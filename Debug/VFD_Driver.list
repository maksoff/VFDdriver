
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd60  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  0800de70  0800de70  0001de70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e708  0800e708  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800e708  0800e708  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e708  0800e708  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e708  0800e708  0001e708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e70c  0800e70c  0001e70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800e710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003490  20000190  0800e8a0  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003620  0800e8a0  00023620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c4d7  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ee1  00000000  00000000  0004c690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e10  00000000  00000000  00052578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001be8  00000000  00000000  00054388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e90e  00000000  00000000  00055f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002472e  00000000  00000000  0007487e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c56f  00000000  00000000  00098fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013551b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c4c  00000000  00000000  00135570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000190 	.word	0x20000190
 800012c:	00000000 	.word	0x00000000
 8000130:	0800de58 	.word	0x0800de58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000194 	.word	0x20000194
 800014c:	0800de58 	.word	0x0800de58

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (32, sizeof(uint8_t), &qUSB_rcv_attributes);
 8000178:	4a1e      	ldr	r2, [pc, #120]	; (80001f4 <MX_FREERTOS_Init+0x80>)
 800017a:	2101      	movs	r1, #1
 800017c:	2020      	movs	r0, #32
 800017e:	f00a fb4b 	bl	800a818 <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a1c      	ldr	r2, [pc, #112]	; (80001f8 <MX_FREERTOS_Init+0x84>)
 8000186:	6013      	str	r3, [r2, #0]

  /* creation of qVFD */
  qVFDHandle = osMessageQueueNew (16, sizeof(uint16_t), &qVFD_attributes);
 8000188:	4a1c      	ldr	r2, [pc, #112]	; (80001fc <MX_FREERTOS_Init+0x88>)
 800018a:	2102      	movs	r1, #2
 800018c:	2010      	movs	r0, #16
 800018e:	f00a fb43 	bl	800a818 <osMessageQueueNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a1a      	ldr	r2, [pc, #104]	; (8000200 <MX_FREERTOS_Init+0x8c>)
 8000196:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000198:	4a1a      	ldr	r2, [pc, #104]	; (8000204 <MX_FREERTOS_Init+0x90>)
 800019a:	2100      	movs	r1, #0
 800019c:	481a      	ldr	r0, [pc, #104]	; (8000208 <MX_FREERTOS_Init+0x94>)
 800019e:	f00a fa63 	bl	800a668 <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a19      	ldr	r2, [pc, #100]	; (800020c <MX_FREERTOS_Init+0x98>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 80001a8:	4a19      	ldr	r2, [pc, #100]	; (8000210 <MX_FREERTOS_Init+0x9c>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	4819      	ldr	r0, [pc, #100]	; (8000214 <MX_FREERTOS_Init+0xa0>)
 80001ae:	f00a fa5b 	bl	800a668 <osThreadNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a18      	ldr	r2, [pc, #96]	; (8000218 <MX_FREERTOS_Init+0xa4>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 80001b8:	4a18      	ldr	r2, [pc, #96]	; (800021c <MX_FREERTOS_Init+0xa8>)
 80001ba:	2100      	movs	r1, #0
 80001bc:	4818      	ldr	r0, [pc, #96]	; (8000220 <MX_FREERTOS_Init+0xac>)
 80001be:	f00a fa53 	bl	800a668 <osThreadNew>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <MX_FREERTOS_Init+0xb0>)
 80001c6:	6013      	str	r3, [r2, #0]

  /* creation of UARTtask */
  UARTtaskHandle = osThreadNew(StartUARTtask, NULL, &UARTtask_attributes);
 80001c8:	4a17      	ldr	r2, [pc, #92]	; (8000228 <MX_FREERTOS_Init+0xb4>)
 80001ca:	2100      	movs	r1, #0
 80001cc:	4817      	ldr	r0, [pc, #92]	; (800022c <MX_FREERTOS_Init+0xb8>)
 80001ce:	f00a fa4b 	bl	800a668 <osThreadNew>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a16      	ldr	r2, [pc, #88]	; (8000230 <MX_FREERTOS_Init+0xbc>)
 80001d6:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(StartEncoder, NULL, &Encoder_attributes);
 80001d8:	4a16      	ldr	r2, [pc, #88]	; (8000234 <MX_FREERTOS_Init+0xc0>)
 80001da:	2100      	movs	r1, #0
 80001dc:	4816      	ldr	r0, [pc, #88]	; (8000238 <MX_FREERTOS_Init+0xc4>)
 80001de:	f00a fa43 	bl	800a668 <osThreadNew>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a15      	ldr	r2, [pc, #84]	; (800023c <MX_FREERTOS_Init+0xc8>)
 80001e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 80001e8:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <MX_FREERTOS_Init+0x84>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a14      	ldr	r2, [pc, #80]	; (8000240 <MX_FREERTOS_Init+0xcc>)
 80001ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	0800e180 	.word	0x0800e180
 80001f8:	20002488 	.word	0x20002488
 80001fc:	0800e198 	.word	0x0800e198
 8000200:	2000248c 	.word	0x2000248c
 8000204:	0800e0cc 	.word	0x0800e0cc
 8000208:	08000245 	.word	0x08000245
 800020c:	20002478 	.word	0x20002478
 8000210:	0800e0f0 	.word	0x0800e0f0
 8000214:	0800027d 	.word	0x0800027d
 8000218:	2000247c 	.word	0x2000247c
 800021c:	0800e114 	.word	0x0800e114
 8000220:	080002b1 	.word	0x080002b1
 8000224:	20002484 	.word	0x20002484
 8000228:	0800e138 	.word	0x0800e138
 800022c:	080002f9 	.word	0x080002f9
 8000230:	20002480 	.word	0x20002480
 8000234:	0800e15c 	.word	0x0800e15c
 8000238:	08000335 	.word	0x08000335
 800023c:	20002494 	.word	0x20002494
 8000240:	20002490 	.word	0x20002490

08000244 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800024c:	f00d f8d6 	bl	800d3fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000256:	4808      	ldr	r0, [pc, #32]	; (8000278 <StartDefaultTask+0x34>)
 8000258:	f003 f87d 	bl	8003356 <HAL_GPIO_WritePin>
  osDelay(10);
 800025c:	200a      	movs	r0, #10
 800025e:	f00a faad 	bl	800a7bc <osDelay>
  init_microrl();
 8000262:	f002 f93b 	bl	80024dc <init_microrl>
  set_CDC_ready(); // allow to send
 8000266:	f002 f973 	bl	8002550 <set_CDC_ready>

  //vTaskDelete(NULL);
  /* Infinite loop */
  for(;;)
  {
    process_encoder();
 800026a:	f000 fbbd 	bl	80009e8 <process_encoder>
    osDelay(1);
 800026e:	2001      	movs	r0, #1
 8000270:	f00a faa4 	bl	800a7bc <osDelay>
    process_encoder();
 8000274:	e7f9      	b.n	800026a <StartDefaultTask+0x26>
 8000276:	bf00      	nop
 8000278:	40010800 	.word	0x40010800

0800027c <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 8000284:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000288:	617b      	str	r3, [r7, #20]

	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 800028a:	f00b fcab 	bl	800bbe4 <xTaskGetTickCount>
 800028e:	4603      	mov	r3, r0
 8000290:	613b      	str	r3, [r7, #16]

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <StartLEDheartbeat+0x30>)
 8000298:	f003 f875 	bl	8003386 <HAL_GPIO_TogglePin>
				if (++cnt >= ALPHAS + DIGITS + ALPHAR + SPECIAL)
					cnt = 0;

		}

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800029c:	f107 0310 	add.w	r3, r7, #16
 80002a0:	6979      	ldr	r1, [r7, #20]
 80002a2:	4618      	mov	r0, r3
 80002a4:	f00b fada 	bl	800b85c <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 80002a8:	e7ef      	b.n	800028a <StartLEDheartbeat+0xe>
 80002aa:	bf00      	nop
 80002ac:	40011000 	.word	0x40011000

080002b0 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 80002b8:	2000      	movs	r0, #0
 80002ba:	f00b ff95 	bl	800c1e8 <uxTaskGetStackHighWaterMark>
 80002be:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80002c4:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <StartUSB_rcv+0x44>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f107 010f 	add.w	r1, r7, #15
 80002cc:	f04f 32ff 	mov.w	r2, #4294967295
 80002d0:	4618      	mov	r0, r3
 80002d2:	f00a fedf 	bl	800b094 <xQueueReceive>
	  microrl_print_char(buf);
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	4618      	mov	r0, r3
 80002da:	f001 fdbb 	bl	8001e54 <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80002de:	2000      	movs	r0, #0
 80002e0:	f00b ff82 	bl	800c1e8 <uxTaskGetStackHighWaterMark>
 80002e4:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 80002e6:	693a      	ldr	r2, [r7, #16]
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d2ea      	bcs.n	80002c4 <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 80002ee:	693b      	ldr	r3, [r7, #16]
 80002f0:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80002f2:	e7e7      	b.n	80002c4 <StartUSB_rcv+0x14>
 80002f4:	20002490 	.word	0x20002490

080002f8 <StartUARTtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTtask */
void StartUARTtask(void *argument)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  uint8_t data;
  for(;;)
  {
	HAL_UART_Receive_IT(&huart2, &data, 1);
 8000300:	f107 030f 	add.w	r3, r7, #15
 8000304:	2201      	movs	r2, #1
 8000306:	4619      	mov	r1, r3
 8000308:	4809      	ldr	r0, [pc, #36]	; (8000330 <StartUARTtask+0x38>)
 800030a:	f005 ff3c 	bl	8006186 <HAL_UART_Receive_IT>
	/* Wait to be notified of an interrupt. */
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 800030e:	f04f 31ff 	mov.w	r1, #4294967295
 8000312:	2001      	movs	r0, #1
 8000314:	f00c f864 	bl	800c3e0 <ulTaskNotifyTake>
	if (get_nema())
 8000318:	f002 fa60 	bl	80027dc <get_nema>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0ee      	beq.n	8000300 <StartUARTtask+0x8>
		CDC_Transmit_FS(&data, 1);
 8000322:	f107 030f 	add.w	r3, r7, #15
 8000326:	2101      	movs	r1, #1
 8000328:	4618      	mov	r0, r3
 800032a:	f00d f94b 	bl	800d5c4 <CDC_Transmit_FS>
	HAL_UART_Receive_IT(&huart2, &data, 1);
 800032e:	e7e7      	b.n	8000300 <StartUARTtask+0x8>
 8000330:	20002618 	.word	0x20002618

08000334 <StartEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoder */
void StartEncoder(void *argument)
{
 8000334:	b5b0      	push	{r4, r5, r7, lr}
 8000336:	b0a6      	sub	sp, #152	; 0x98
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]

	static bool invert = true;
	static bool released = true;


  osDelay(500);
 800033c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000340:	f00a fa3c 	bl	800a7bc <osDelay>
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000344:	2201      	movs	r2, #1
 8000346:	2120      	movs	r1, #32
 8000348:	48be      	ldr	r0, [pc, #760]	; (8000644 <StartEncoder+0x310>)
 800034a:	f003 f804 	bl	8003356 <HAL_GPIO_WritePin>
  union VFD {
	  uint8_t arr2[11][3];
	  uint8_t arr1[11*3];
  } vfd;

  for (int i = 0; i < sizeof(vfd.arr1); i++)
 800034e:	2300      	movs	r3, #0
 8000350:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000354:	e00b      	b.n	800036e <StartEncoder+0x3a>
  {
	  vfd.arr1[i] = 0xFF;
 8000356:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800035a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800035e:	4413      	add	r3, r2
 8000360:	22ff      	movs	r2, #255	; 0xff
 8000362:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000364:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000368:	3301      	adds	r3, #1
 800036a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800036e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000372:	2b20      	cmp	r3, #32
 8000374:	d9ef      	bls.n	8000356 <StartEncoder+0x22>
  }
  uint8_t data;


  data = 0b01000000; // command 2, write to Display port
 8000376:	2340      	movs	r3, #64	; 0x40
 8000378:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000382:	48b0      	ldr	r0, [pc, #704]	; (8000644 <StartEncoder+0x310>)
 8000384:	f002 ffe7 	bl	8003356 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000388:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 800038c:	f04f 33ff 	mov.w	r3, #4294967295
 8000390:	2201      	movs	r2, #1
 8000392:	48ad      	ldr	r0, [pc, #692]	; (8000648 <StartEncoder+0x314>)
 8000394:	f005 fa7e 	bl	8005894 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039e:	48a9      	ldr	r0, [pc, #676]	; (8000644 <StartEncoder+0x310>)
 80003a0:	f002 ffd9 	bl	8003356 <HAL_GPIO_WritePin>
  osDelay(10);
 80003a4:	200a      	movs	r0, #10
 80003a6:	f00a fa09 	bl	800a7bc <osDelay>
  data = 0b11000000; // command 3, set address to 0
 80003aa:	23c0      	movs	r3, #192	; 0xc0
 80003ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b6:	48a3      	ldr	r0, [pc, #652]	; (8000644 <StartEncoder+0x310>)
 80003b8:	f002 ffcd 	bl	8003356 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80003bc:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80003c0:	f04f 33ff 	mov.w	r3, #4294967295
 80003c4:	2201      	movs	r2, #1
 80003c6:	48a0      	ldr	r0, [pc, #640]	; (8000648 <StartEncoder+0x314>)
 80003c8:	f005 fa64 	bl	8005894 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80003cc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80003d0:	f04f 33ff 	mov.w	r3, #4294967295
 80003d4:	2221      	movs	r2, #33	; 0x21
 80003d6:	489c      	ldr	r0, [pc, #624]	; (8000648 <StartEncoder+0x314>)
 80003d8:	f005 fa5c 	bl	8005894 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e2:	4898      	ldr	r0, [pc, #608]	; (8000644 <StartEncoder+0x310>)
 80003e4:	f002 ffb7 	bl	8003356 <HAL_GPIO_WritePin>
  osDelay(10);
 80003e8:	200a      	movs	r0, #10
 80003ea:	f00a f9e7 	bl	800a7bc <osDelay>
  // init display, 11 digits 17 segments
  data = 0b00000111; // command 1, 11 digits 17 segments
 80003ee:	2307      	movs	r3, #7
 80003f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003fa:	4892      	ldr	r0, [pc, #584]	; (8000644 <StartEncoder+0x310>)
 80003fc:	f002 ffab 	bl	8003356 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000400:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000404:	f04f 33ff 	mov.w	r3, #4294967295
 8000408:	2201      	movs	r2, #1
 800040a:	488f      	ldr	r0, [pc, #572]	; (8000648 <StartEncoder+0x314>)
 800040c:	f005 fa42 	bl	8005894 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000410:	2201      	movs	r2, #1
 8000412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000416:	488b      	ldr	r0, [pc, #556]	; (8000644 <StartEncoder+0x310>)
 8000418:	f002 ff9d 	bl	8003356 <HAL_GPIO_WritePin>
  osDelay(10);
 800041c:	200a      	movs	r0, #10
 800041e:	f00a f9cd 	bl	800a7bc <osDelay>

  for (uint8_t i = 0; i <= 0b111; i++)
 8000422:	2300      	movs	r3, #0
 8000424:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8000428:	e02d      	b.n	8000486 <StartEncoder+0x152>
  {
	  data = 0b10000000; // command 4
 800042a:	2380      	movs	r3, #128	; 0x80
 800042c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  data |= 1<<3; // enable/disable display
 8000430:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000434:	f043 0308 	orr.w	r3, r3, #8
 8000438:	b2db      	uxtb	r3, r3
 800043a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  data |= i; // set brightness
 800043e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000442:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000446:	4313      	orrs	r3, r2
 8000448:	b2db      	uxtb	r3, r3
 800044a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000454:	487b      	ldr	r0, [pc, #492]	; (8000644 <StartEncoder+0x310>)
 8000456:	f002 ff7e 	bl	8003356 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800045a:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
 8000462:	2201      	movs	r2, #1
 8000464:	4878      	ldr	r0, [pc, #480]	; (8000648 <StartEncoder+0x314>)
 8000466:	f005 fa15 	bl	8005894 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800046a:	2201      	movs	r2, #1
 800046c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000470:	4874      	ldr	r0, [pc, #464]	; (8000644 <StartEncoder+0x310>)
 8000472:	f002 ff70 	bl	8003356 <HAL_GPIO_WritePin>
	  osDelay(250);
 8000476:	20fa      	movs	r0, #250	; 0xfa
 8000478:	f00a f9a0 	bl	800a7bc <osDelay>
  for (uint8_t i = 0; i <= 0b111; i++)
 800047c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000480:	3301      	adds	r3, #1
 8000482:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8000486:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800048a:	2b07      	cmp	r3, #7
 800048c:	d9cd      	bls.n	800042a <StartEncoder+0xf6>
  }



  for (int i = 0; i < 11; i++)
 800048e:	2300      	movs	r3, #0
 8000490:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000494:	e041      	b.n	800051a <StartEncoder+0x1e6>
  {
	  for (int b = 0; b < 3; b++) // erasing from right to left
 8000496:	2300      	movs	r3, #0
 8000498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800049c:	e012      	b.n	80004c4 <StartEncoder+0x190>
	  {
		  vfd.arr2[i][b] = 0;
 800049e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80004a2:	4613      	mov	r3, r2
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	4413      	add	r3, r2
 80004a8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80004ac:	441a      	add	r2, r3
 80004ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80004b2:	4413      	add	r3, r2
 80004b4:	3b58      	subs	r3, #88	; 0x58
 80004b6:	2200      	movs	r2, #0
 80004b8:	701a      	strb	r2, [r3, #0]
	  for (int b = 0; b < 3; b++) // erasing from right to left
 80004ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80004be:	3301      	adds	r3, #1
 80004c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80004c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80004c8:	2b02      	cmp	r3, #2
 80004ca:	dde8      	ble.n	800049e <StartEncoder+0x16a>
	  }
	  data = 0b11000000; // command 3, set address to 0
 80004cc:	23c0      	movs	r3, #192	; 0xc0
 80004ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d8:	485a      	ldr	r0, [pc, #360]	; (8000644 <StartEncoder+0x310>)
 80004da:	f002 ff3c 	bl	8003356 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004de:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80004e2:	f04f 33ff 	mov.w	r3, #4294967295
 80004e6:	2201      	movs	r2, #1
 80004e8:	4857      	ldr	r0, [pc, #348]	; (8000648 <StartEncoder+0x314>)
 80004ea:	f005 f9d3 	bl	8005894 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80004ee:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295
 80004f6:	2221      	movs	r2, #33	; 0x21
 80004f8:	4853      	ldr	r0, [pc, #332]	; (8000648 <StartEncoder+0x314>)
 80004fa:	f005 f9cb 	bl	8005894 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000504:	484f      	ldr	r0, [pc, #316]	; (8000644 <StartEncoder+0x310>)
 8000506:	f002 ff26 	bl	8003356 <HAL_GPIO_WritePin>
	  osDelay(150);
 800050a:	2096      	movs	r0, #150	; 0x96
 800050c:	f00a f956 	bl	800a7bc <osDelay>
  for (int i = 0; i < 11; i++)
 8000510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000514:	3301      	adds	r3, #1
 8000516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800051a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800051e:	2b0a      	cmp	r3, #10
 8000520:	ddb9      	ble.n	8000496 <StartEncoder+0x162>
  }
  osDelay (500);
 8000522:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000526:	f00a f949 	bl	800a7bc <osDelay>

  //erase everything... just in case
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 800052a:	2300      	movs	r3, #0
 800052c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000530:	e00b      	b.n	800054a <StartEncoder+0x216>
	  vfd.arr1[a] = 0;
 8000532:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000536:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800053a:	4413      	add	r3, r2
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000544:	3301      	adds	r3, #1
 8000546:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800054a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800054e:	2b20      	cmp	r3, #32
 8000550:	d9ef      	bls.n	8000532 <StartEncoder+0x1fe>


  // fill everything
    for (int j = 1; j < 15; j++)
 8000552:	2301      	movs	r3, #1
 8000554:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000558:	e05d      	b.n	8000616 <StartEncoder+0x2e2>
    {
  	  uint32_t temp = 1<<j;
 800055a:	2201      	movs	r2, #1
 800055c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000560:	fa02 f303 	lsl.w	r3, r2, r3
 8000564:	667b      	str	r3, [r7, #100]	; 0x64
  	  for (int i = 1; i < 11; i++)
 8000566:	2301      	movs	r3, #1
 8000568:	67fb      	str	r3, [r7, #124]	; 0x7c
 800056a:	e02a      	b.n	80005c2 <StartEncoder+0x28e>
  	  {
  		  for (int b = 0; b < 3; b++)
 800056c:	2300      	movs	r3, #0
 800056e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000570:	e021      	b.n	80005b6 <StartEncoder+0x282>
  		  {
  			  vfd.arr2[i][b] |= (temp>>(b<<3))&0xFF;
 8000572:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000574:	4613      	mov	r3, r2
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	4413      	add	r3, r2
 800057a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800057e:	441a      	add	r2, r3
 8000580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000582:	4413      	add	r3, r2
 8000584:	3b58      	subs	r3, #88	; 0x58
 8000586:	781a      	ldrb	r2, [r3, #0]
 8000588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800058e:	fa21 f303 	lsr.w	r3, r1, r3
 8000592:	b2db      	uxtb	r3, r3
 8000594:	4313      	orrs	r3, r2
 8000596:	b2d9      	uxtb	r1, r3
 8000598:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800059a:	4613      	mov	r3, r2
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	4413      	add	r3, r2
 80005a0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80005a4:	441a      	add	r2, r3
 80005a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80005a8:	4413      	add	r3, r2
 80005aa:	3b58      	subs	r3, #88	; 0x58
 80005ac:	460a      	mov	r2, r1
 80005ae:	701a      	strb	r2, [r3, #0]
  		  for (int b = 0; b < 3; b++)
 80005b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80005b2:	3301      	adds	r3, #1
 80005b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80005b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	ddda      	ble.n	8000572 <StartEncoder+0x23e>
  	  for (int i = 1; i < 11; i++)
 80005bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005be:	3301      	adds	r3, #1
 80005c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80005c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005c4:	2b0a      	cmp	r3, #10
 80005c6:	ddd1      	ble.n	800056c <StartEncoder+0x238>
  		  }
  	  }
  	  data = 0b11000000; // command 3, set address to 0
 80005c8:	23c0      	movs	r3, #192	; 0xc0
 80005ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <StartEncoder+0x310>)
 80005d6:	f002 febe 	bl	8003356 <HAL_GPIO_WritePin>
  	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80005da:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	2201      	movs	r2, #1
 80005e4:	4818      	ldr	r0, [pc, #96]	; (8000648 <StartEncoder+0x314>)
 80005e6:	f005 f955 	bl	8005894 <HAL_SPI_Transmit>
  	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80005ea:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	2221      	movs	r2, #33	; 0x21
 80005f4:	4814      	ldr	r0, [pc, #80]	; (8000648 <StartEncoder+0x314>)
 80005f6:	f005 f94d 	bl	8005894 <HAL_SPI_Transmit>
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000600:	4810      	ldr	r0, [pc, #64]	; (8000644 <StartEncoder+0x310>)
 8000602:	f002 fea8 	bl	8003356 <HAL_GPIO_WritePin>
  	  osDelay(100);
 8000606:	2064      	movs	r0, #100	; 0x64
 8000608:	f00a f8d8 	bl	800a7bc <osDelay>
    for (int j = 1; j < 15; j++)
 800060c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000610:	3301      	adds	r3, #1
 8000612:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000616:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800061a:	2b0e      	cmp	r3, #14
 800061c:	dd9d      	ble.n	800055a <StartEncoder+0x226>
    }

    const uint8_t arr[][2] = {{6, 0},
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <StartEncoder+0x318>)
 8000620:	f107 040c 	add.w	r4, r7, #12
 8000624:	461d      	mov	r5, r3
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000632:	682b      	ldr	r3, [r5, #0]
 8000634:	8023      	strh	r3, [r4, #0]
					   {9, 16},
					   {10, 16},
					   {10, 15},
    };

    for (int j = 0; j < sizeof(arr)/2; j++)
 8000636:	2300      	movs	r3, #0
 8000638:	677b      	str	r3, [r7, #116]	; 0x74
 800063a:	e06d      	b.n	8000718 <StartEncoder+0x3e4>
    {
		for (int b = 0; b < 3; b++)
 800063c:	2300      	movs	r3, #0
 800063e:	673b      	str	r3, [r7, #112]	; 0x70
 8000640:	e042      	b.n	80006c8 <StartEncoder+0x394>
 8000642:	bf00      	nop
 8000644:	40010c00 	.word	0x40010c00
 8000648:	20002578 	.word	0x20002578
 800064c:	0800dec0 	.word	0x0800dec0
		  vfd.arr2[arr[j][0]][b] |= ((1<<arr[j][1])>>(b<<3))&0xFF;
 8000650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000658:	4413      	add	r3, r2
 800065a:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 800065e:	461a      	mov	r2, r3
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800066a:	441a      	add	r2, r3
 800066c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800066e:	4413      	add	r3, r2
 8000670:	3b58      	subs	r3, #88	; 0x58
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b25a      	sxtb	r2, r3
 8000676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800067e:	440b      	add	r3, r1
 8000680:	f813 3c8b 	ldrb.w	r3, [r3, #-139]
 8000684:	4619      	mov	r1, r3
 8000686:	2301      	movs	r3, #1
 8000688:	fa03 f101 	lsl.w	r1, r3, r1
 800068c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	fa41 f303 	asr.w	r3, r1, r3
 8000694:	b25b      	sxtb	r3, r3
 8000696:	4313      	orrs	r3, r2
 8000698:	b259      	sxtb	r1, r3
 800069a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80006a2:	4413      	add	r3, r2
 80006a4:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 80006a8:	461a      	mov	r2, r3
 80006aa:	b2c9      	uxtb	r1, r1
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80006b6:	441a      	add	r2, r3
 80006b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006ba:	4413      	add	r3, r2
 80006bc:	3b58      	subs	r3, #88	; 0x58
 80006be:	460a      	mov	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++)
 80006c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006c4:	3301      	adds	r3, #1
 80006c6:	673b      	str	r3, [r7, #112]	; 0x70
 80006c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	ddc0      	ble.n	8000650 <StartEncoder+0x31c>
		data = 0b11000000; // command 3, set address to 0
 80006ce:	23c0      	movs	r3, #192	; 0xc0
 80006d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006da:	48a9      	ldr	r0, [pc, #676]	; (8000980 <StartEncoder+0x64c>)
 80006dc:	f002 fe3b 	bl	8003356 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80006e0:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
 80006e8:	2201      	movs	r2, #1
 80006ea:	48a6      	ldr	r0, [pc, #664]	; (8000984 <StartEncoder+0x650>)
 80006ec:	f005 f8d2 	bl	8005894 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80006f0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	2221      	movs	r2, #33	; 0x21
 80006fa:	48a2      	ldr	r0, [pc, #648]	; (8000984 <StartEncoder+0x650>)
 80006fc:	f005 f8ca 	bl	8005894 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000706:	489e      	ldr	r0, [pc, #632]	; (8000980 <StartEncoder+0x64c>)
 8000708:	f002 fe25 	bl	8003356 <HAL_GPIO_WritePin>
		osDelay(100);
 800070c:	2064      	movs	r0, #100	; 0x64
 800070e:	f00a f855 	bl	800a7bc <osDelay>
    for (int j = 0; j < sizeof(arr)/2; j++)
 8000712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000714:	3301      	adds	r3, #1
 8000716:	677b      	str	r3, [r7, #116]	; 0x74
 8000718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800071a:	2b18      	cmp	r3, #24
 800071c:	d98e      	bls.n	800063c <StartEncoder+0x308>
    }

    osDelay(500);
 800071e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000722:	f00a f84b 	bl	800a7bc <osDelay>

    //erase everything... just in case
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000726:	2300      	movs	r3, #0
 8000728:	66fb      	str	r3, [r7, #108]	; 0x6c
 800072a:	e008      	b.n	800073e <StartEncoder+0x40a>
  	  vfd.arr1[a] = 0;
 800072c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000732:	4413      	add	r3, r2
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800073a:	3301      	adds	r3, #1
 800073c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800073e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000740:	2b20      	cmp	r3, #32
 8000742:	d9f3      	bls.n	800072c <StartEncoder+0x3f8>
//    {
//        vfd.arr2[i+1][0] = vfd_digits[i]&0xFF;
//        vfd.arr2[i+1][1] = (vfd_digits[i]>>8)&0xFF;
//    }

	data = 0b11000000; // command 3, set address to 0
 8000744:	23c0      	movs	r3, #192	; 0xc0
 8000746:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000750:	488b      	ldr	r0, [pc, #556]	; (8000980 <StartEncoder+0x64c>)
 8000752:	f002 fe00 	bl	8003356 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000756:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	2201      	movs	r2, #1
 8000760:	4888      	ldr	r0, [pc, #544]	; (8000984 <StartEncoder+0x650>)
 8000762:	f005 f897 	bl	8005894 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000766:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	2221      	movs	r2, #33	; 0x21
 8000770:	4884      	ldr	r0, [pc, #528]	; (8000984 <StartEncoder+0x650>)
 8000772:	f005 f88f 	bl	8005894 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077c:	4880      	ldr	r0, [pc, #512]	; (8000980 <StartEncoder+0x64c>)
 800077e:	f002 fdea 	bl	8003356 <HAL_GPIO_WritePin>

  /* Infinite loop */
  for(;;)
  {
	  uint16_t buf;
	  if(qVFDHandle && xQueueReceive(qVFDHandle, &buf, 1))
 8000782:	4b81      	ldr	r3, [pc, #516]	; (8000988 <StartEncoder+0x654>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d064      	beq.n	8000854 <StartEncoder+0x520>
 800078a:	4b7f      	ldr	r3, [pc, #508]	; (8000988 <StartEncoder+0x654>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f107 010a 	add.w	r1, r7, #10
 8000792:	2201      	movs	r2, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f00a fc7d 	bl	800b094 <xQueueReceive>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d059      	beq.n	8000854 <StartEncoder+0x520>
	  {
		    for (int i = 10; i > 1; i--)
 80007a0:	230a      	movs	r3, #10
 80007a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80007a4:	e02a      	b.n	80007fc <StartEncoder+0x4c8>
		    {
				vfd.arr2[i][0] = vfd.arr2[i-1][0];
 80007a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007a8:	1e5a      	subs	r2, r3, #1
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80007b4:	4413      	add	r3, r2
 80007b6:	3b58      	subs	r3, #88	; 0x58
 80007b8:	7819      	ldrb	r1, [r3, #0]
 80007ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80007bc:	4613      	mov	r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	4413      	add	r3, r2
 80007c2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80007c6:	4413      	add	r3, r2
 80007c8:	3b58      	subs	r3, #88	; 0x58
 80007ca:	460a      	mov	r2, r1
 80007cc:	701a      	strb	r2, [r3, #0]
				vfd.arr2[i][1] = vfd.arr2[i-1][1];
 80007ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	4613      	mov	r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	4413      	add	r3, r2
 80007d8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80007dc:	4413      	add	r3, r2
 80007de:	3b57      	subs	r3, #87	; 0x57
 80007e0:	7819      	ldrb	r1, [r3, #0]
 80007e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80007e4:	4613      	mov	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80007ee:	4413      	add	r3, r2
 80007f0:	3b57      	subs	r3, #87	; 0x57
 80007f2:	460a      	mov	r2, r1
 80007f4:	701a      	strb	r2, [r3, #0]
		    for (int i = 10; i > 1; i--)
 80007f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007f8:	3b01      	subs	r3, #1
 80007fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80007fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007fe:	2b01      	cmp	r3, #1
 8000800:	dcd1      	bgt.n	80007a6 <StartEncoder+0x472>
		    }
			vfd.arr2[1][0] = buf & 0xFF;
 8000802:	897b      	ldrh	r3, [r7, #10]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			vfd.arr2[1][1] = (buf>>8)&0xFF;
 800080a:	897b      	ldrh	r3, [r7, #10]
 800080c:	0a1b      	lsrs	r3, r3, #8
 800080e:	b29b      	uxth	r3, r3
 8000810:	b2db      	uxtb	r3, r3
 8000812:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			data = 0b11000000; // command 3, set address to 0
 8000816:	23c0      	movs	r3, #192	; 0xc0
 8000818:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000822:	4857      	ldr	r0, [pc, #348]	; (8000980 <StartEncoder+0x64c>)
 8000824:	f002 fd97 	bl	8003356 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000828:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	2201      	movs	r2, #1
 8000832:	4854      	ldr	r0, [pc, #336]	; (8000984 <StartEncoder+0x650>)
 8000834:	f005 f82e 	bl	8005894 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000838:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800083c:	f04f 33ff 	mov.w	r3, #4294967295
 8000840:	2221      	movs	r2, #33	; 0x21
 8000842:	4850      	ldr	r0, [pc, #320]	; (8000984 <StartEncoder+0x650>)
 8000844:	f005 f826 	bl	8005894 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084e:	484c      	ldr	r0, [pc, #304]	; (8000980 <StartEncoder+0x64c>)
 8000850:	f002 fd81 	bl	8003356 <HAL_GPIO_WritePin>
	  }

	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 8000854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000858:	4849      	ldr	r0, [pc, #292]	; (8000980 <StartEncoder+0x64c>)
 800085a:	f002 fd65 	bl	8003328 <HAL_GPIO_ReadPin>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d003      	beq.n	800086c <StartEncoder+0x538>
	  {
		  released = true;
 8000864:	4b49      	ldr	r3, [pc, #292]	; (800098c <StartEncoder+0x658>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	e015      	b.n	8000898 <StartEncoder+0x564>
	  } else if (released)
 800086c:	4b47      	ldr	r3, [pc, #284]	; (800098c <StartEncoder+0x658>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d011      	beq.n	8000898 <StartEncoder+0x564>
	  {
		  released = false;
 8000874:	4b45      	ldr	r3, [pc, #276]	; (800098c <StartEncoder+0x658>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
		  invert = !invert;
 800087a:	4b45      	ldr	r3, [pc, #276]	; (8000990 <StartEncoder+0x65c>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	bf14      	ite	ne
 8000882:	2301      	movne	r3, #1
 8000884:	2300      	moveq	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	f083 0301 	eor.w	r3, r3, #1
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b3e      	ldr	r3, [pc, #248]	; (8000990 <StartEncoder+0x65c>)
 8000896:	701a      	strb	r2, [r3, #0]
	  }

	  data = 0b01000001; // command 2, write to LED port
 8000898:	2341      	movs	r3, #65	; 0x41
 800089a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a4:	4836      	ldr	r0, [pc, #216]	; (8000980 <StartEncoder+0x64c>)
 80008a6:	f002 fd56 	bl	8003356 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80008aa:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	2201      	movs	r2, #1
 80008b4:	4833      	ldr	r0, [pc, #204]	; (8000984 <StartEncoder+0x650>)
 80008b6:	f004 ffed 	bl	8005894 <HAL_SPI_Transmit>
	  osDelay(10);
 80008ba:	200a      	movs	r0, #10
 80008bc:	f009 ff7e 	bl	800a7bc <osDelay>

	  data = ~(1<<((encoder_value >> 2)&0b11));
 80008c0:	4b34      	ldr	r3, [pc, #208]	; (8000994 <StartEncoder+0x660>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	089b      	lsrs	r3, r3, #2
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	2201      	movs	r2, #1
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
//	  if (invert)
//		  data =~data;
	  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, invert);
 80008dc:	4b2c      	ldr	r3, [pc, #176]	; (8000990 <StartEncoder+0x65c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	2120      	movs	r1, #32
 80008e4:	4826      	ldr	r0, [pc, #152]	; (8000980 <StartEncoder+0x64c>)
 80008e6:	f002 fd36 	bl	8003356 <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80008ea:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	2201      	movs	r2, #1
 80008f4:	4823      	ldr	r0, [pc, #140]	; (8000984 <StartEncoder+0x650>)
 80008f6:	f004 ffcd 	bl	8005894 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000900:	481f      	ldr	r0, [pc, #124]	; (8000980 <StartEncoder+0x64c>)
 8000902:	f002 fd28 	bl	8003356 <HAL_GPIO_WritePin>

	  osDelay(10);
 8000906:	200a      	movs	r0, #10
 8000908:	f009 ff58 	bl	800a7bc <osDelay>
	  data = 0b10000000; // command 4
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  data |= invert<<3; // enable/disable display
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <StartEncoder+0x65c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	b25a      	sxtb	r2, r3
 800091a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800091e:	b25b      	sxtb	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b25b      	sxtb	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  data |= ((encoder_value >> 2) - 1)&0b111; // set brightness
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <StartEncoder+0x660>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	089b      	lsrs	r3, r3, #2
 8000930:	b29b      	uxth	r3, r3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	3b01      	subs	r3, #1
 8000936:	b2db      	uxtb	r3, r3
 8000938:	b25b      	sxtb	r3, r3
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	b25a      	sxtb	r2, r3
 8000940:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000944:	b25b      	sxtb	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b25b      	sxtb	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <StartEncoder+0x64c>)
 8000958:	f002 fcfd 	bl	8003356 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800095c:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000960:	f04f 33ff 	mov.w	r3, #4294967295
 8000964:	2201      	movs	r2, #1
 8000966:	4807      	ldr	r0, [pc, #28]	; (8000984 <StartEncoder+0x650>)
 8000968:	f004 ff94 	bl	8005894 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000972:	4803      	ldr	r0, [pc, #12]	; (8000980 <StartEncoder+0x64c>)
 8000974:	f002 fcef 	bl	8003356 <HAL_GPIO_WritePin>
	  osDelay(10);
 8000978:	200a      	movs	r0, #10
 800097a:	f009 ff1f 	bl	800a7bc <osDelay>
  {
 800097e:	e700      	b.n	8000782 <StartEncoder+0x44e>
 8000980:	40010c00 	.word	0x40010c00
 8000984:	20002578 	.word	0x20002578
 8000988:	2000248c 	.word	0x2000248c
 800098c:	20000000 	.word	0x20000000
 8000990:	20000001 	.word	0x20000001
 8000994:	200001ac 	.word	0x200001ac

08000998 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <HAL_UART_RxCpltCallback+0x44>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d115      	bne.n	80009d4 <HAL_UART_RxCpltCallback+0x3c>
		return;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]


   /* Notify the task that the transmission is complete by setting the TX_BIT
   in the task's notification value. */
	vTaskNotifyGiveFromISR( UARTtaskHandle,
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_UART_RxCpltCallback+0x48>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f107 020c 	add.w	r2, r7, #12
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f00b fd5a 	bl	800c470 <vTaskNotifyGiveFromISR>

   /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
   should be performed to ensure the interrupt returns directly to the highest
   priority task.  The macro used for this purpose is dependent on the port in
   use and may be called portEND_SWITCHING_ISR(). */
   portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d009      	beq.n	80009d6 <HAL_UART_RxCpltCallback+0x3e>
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_UART_RxCpltCallback+0x4c>)
 80009c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	f3bf 8f4f 	dsb	sy
 80009ce:	f3bf 8f6f 	isb	sy
 80009d2:	e000      	b.n	80009d6 <HAL_UART_RxCpltCallback+0x3e>
		return;
 80009d4:	bf00      	nop
}
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20002618 	.word	0x20002618
 80009e0:	20002480 	.word	0x20002480
 80009e4:	e000ed04 	.word	0xe000ed04

080009e8 <process_encoder>:

void process_encoder(void)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 80009ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f2:	483c      	ldr	r0, [pc, #240]	; (8000ae4 <process_encoder+0xfc>)
 80009f4:	f002 fc98 	bl	8003328 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461c      	mov	r4, r3
		   0b10*HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin));
 80009fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a00:	4838      	ldr	r0, [pc, #224]	; (8000ae4 <process_encoder+0xfc>)
 8000a02:	f002 fc91 	bl	8003328 <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4423      	add	r3, r4
 8000a0e:	71fb      	strb	r3, [r7, #7]
	switch(old)
 8000a10:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <process_encoder+0x100>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d85e      	bhi.n	8000ad6 <process_encoder+0xee>
 8000a18:	a201      	add	r2, pc, #4	; (adr r2, 8000a20 <process_encoder+0x38>)
 8000a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1e:	bf00      	nop
 8000a20:	08000a57 	.word	0x08000a57
 8000a24:	08000a7d 	.word	0x08000a7d
 8000a28:	08000a31 	.word	0x08000a31
 8000a2c:	08000aa3 	.word	0x08000aa3
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d105      	bne.n	8000a42 <process_encoder+0x5a>
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <process_encoder+0x104>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <process_encoder+0x104>)
 8000a40:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d13f      	bne.n	8000ac8 <process_encoder+0xe0>
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <process_encoder+0x104>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	4b26      	ldr	r3, [pc, #152]	; (8000aec <process_encoder+0x104>)
 8000a52:	801a      	strh	r2, [r3, #0]
			break;
 8000a54:	e038      	b.n	8000ac8 <process_encoder+0xe0>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d105      	bne.n	8000a68 <process_encoder+0x80>
 8000a5c:	4b23      	ldr	r3, [pc, #140]	; (8000aec <process_encoder+0x104>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	4b21      	ldr	r3, [pc, #132]	; (8000aec <process_encoder+0x104>)
 8000a66:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d12e      	bne.n	8000acc <process_encoder+0xe4>
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <process_encoder+0x104>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <process_encoder+0x104>)
 8000a78:	801a      	strh	r2, [r3, #0]
			break;
 8000a7a:	e027      	b.n	8000acc <process_encoder+0xe4>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d105      	bne.n	8000a8e <process_encoder+0xa6>
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <process_encoder+0x104>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <process_encoder+0x104>)
 8000a8c:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d11d      	bne.n	8000ad0 <process_encoder+0xe8>
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <process_encoder+0x104>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <process_encoder+0x104>)
 8000a9e:	801a      	strh	r2, [r3, #0]
			break;
 8000aa0:	e016      	b.n	8000ad0 <process_encoder+0xe8>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d105      	bne.n	8000ab4 <process_encoder+0xcc>
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <process_encoder+0x104>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <process_encoder+0x104>)
 8000ab2:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d10c      	bne.n	8000ad4 <process_encoder+0xec>
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <process_encoder+0x104>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <process_encoder+0x104>)
 8000ac4:	801a      	strh	r2, [r3, #0]
			break;
 8000ac6:	e005      	b.n	8000ad4 <process_encoder+0xec>
			break;
 8000ac8:	bf00      	nop
 8000aca:	e004      	b.n	8000ad6 <process_encoder+0xee>
			break;
 8000acc:	bf00      	nop
 8000ace:	e002      	b.n	8000ad6 <process_encoder+0xee>
			break;
 8000ad0:	bf00      	nop
 8000ad2:	e000      	b.n	8000ad6 <process_encoder+0xee>
			break;
 8000ad4:	bf00      	nop
			}
		}
	old = new;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <process_encoder+0x100>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	7013      	strb	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd90      	pop	{r4, r7, pc}
 8000ae4:	40010c00 	.word	0x40010c00
 8000ae8:	200001ae 	.word	0x200001ae
 8000aec:	200001ac 	.word	0x200001ac

08000af0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b04:	4b49      	ldr	r3, [pc, #292]	; (8000c2c <MX_GPIO_Init+0x13c>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a48      	ldr	r2, [pc, #288]	; (8000c2c <MX_GPIO_Init+0x13c>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b46      	ldr	r3, [pc, #280]	; (8000c2c <MX_GPIO_Init+0x13c>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0310 	and.w	r3, r3, #16
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1c:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <MX_GPIO_Init+0x13c>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a42      	ldr	r2, [pc, #264]	; (8000c2c <MX_GPIO_Init+0x13c>)
 8000b22:	f043 0320 	orr.w	r3, r3, #32
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <MX_GPIO_Init+0x13c>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0320 	and.w	r3, r3, #32
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b3d      	ldr	r3, [pc, #244]	; (8000c2c <MX_GPIO_Init+0x13c>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a3c      	ldr	r2, [pc, #240]	; (8000c2c <MX_GPIO_Init+0x13c>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b3a      	ldr	r3, [pc, #232]	; (8000c2c <MX_GPIO_Init+0x13c>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	4b37      	ldr	r3, [pc, #220]	; (8000c2c <MX_GPIO_Init+0x13c>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a36      	ldr	r2, [pc, #216]	; (8000c2c <MX_GPIO_Init+0x13c>)
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b34      	ldr	r3, [pc, #208]	; (8000c2c <MX_GPIO_Init+0x13c>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6a:	4831      	ldr	r0, [pc, #196]	; (8000c30 <MX_GPIO_Init+0x140>)
 8000b6c:	f002 fbf3 	bl	8003356 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 8000b76:	482f      	ldr	r0, [pc, #188]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000b78:	f002 fbed 	bl	8003356 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b82:	482d      	ldr	r0, [pc, #180]	; (8000c38 <MX_GPIO_Init+0x148>)
 8000b84:	f002 fbe7 	bl	8003356 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4823      	ldr	r0, [pc, #140]	; (8000c30 <MX_GPIO_Init+0x140>)
 8000ba2:	f002 fa3d 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000baa:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <MX_GPIO_Init+0x14c>)
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	481f      	ldr	r0, [pc, #124]	; (8000c38 <MX_GPIO_Init+0x148>)
 8000bba:	f002 fa31 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin|enc_s_Pin;
 8000bbe:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4818      	ldr	r0, [pc, #96]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000bd4:	f002 fa24 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000bd8:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 8000bdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4810      	ldr	r0, [pc, #64]	; (8000c34 <MX_GPIO_Init+0x144>)
 8000bf2:	f002 fa15 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480a      	ldr	r0, [pc, #40]	; (8000c38 <MX_GPIO_Init+0x148>)
 8000c10:	f002 fa06 	bl	8003020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2105      	movs	r1, #5
 8000c18:	2006      	movs	r0, #6
 8000c1a:	f002 f926 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c1e:	2006      	movs	r0, #6
 8000c20:	f002 f93f 	bl	8002ea2 <HAL_NVIC_EnableIRQ>

}
 8000c24:	bf00      	nop
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40011000 	.word	0x40011000
 8000c34:	40010c00 	.word	0x40010c00
 8000c38:	40010800 	.word	0x40010800
 8000c3c:	10110000 	.word	0x10110000

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c44:	f002 f82a 	bl	8002c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c48:	f000 f80d 	bl	8000c66 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4c:	f7ff ff50 	bl	8000af0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000c50:	f001 fdce 	bl	80027f0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000c54:	f001 ff1c 	bl	8002a90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000c58:	f009 fca0 	bl	800a59c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000c5c:	f7ff fa8a 	bl	8000174 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000c60:	f009 fcce 	bl	800a600 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <main+0x24>

08000c66 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b094      	sub	sp, #80	; 0x50
 8000c6a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c70:	2228      	movs	r2, #40	; 0x28
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f00d f8cf 	bl	800de18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000ca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000caa:	2302      	movs	r3, #2
 8000cac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cb4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f004 f862 	bl	8004d88 <HAL_RCC_OscConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000cca:	f000 f839 	bl	8000d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cce:	230f      	movs	r3, #15
 8000cd0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cde:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f004 facc 	bl	8005288 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cf6:	f000 f823 	bl	8000d40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 fc8b 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d10:	f000 f816 	bl	8000d40 <Error_Handler>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3750      	adds	r7, #80	; 0x50
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d101      	bne.n	8000d32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d2e:	f001 ffcb 	bl	8002cc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40012c00 	.word	0x40012c00

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>

08000d4a <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b085      	sub	sp, #20
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	5c8a      	ldrb	r2, [r1, r2]
 8000d5e:	4413      	add	r3, r2
 8000d60:	3301      	adds	r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b3f      	cmp	r3, #63	; 0x3f
 8000d68:	dd02      	ble.n	8000d70 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	3b40      	subs	r3, #64	; 0x40
 8000d6e:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	5cd3      	ldrb	r3, [r2, r3]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <hist_is_space_for_new+0x1a>
		return true;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e01e      	b.n	8000dd8 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	429a      	cmp	r2, r3
 8000da4:	db0c      	blt.n	8000dc0 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4413      	add	r3, r2
 8000db4:	3b01      	subs	r3, #1
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	da0c      	bge.n	8000dd6 <hist_is_space_for_new+0x56>
			return true;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e00b      	b.n	8000dd8 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	da01      	bge.n	8000dd6 <hist_is_space_for_new+0x56>
			return true;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <hist_is_space_for_new+0x58>
	}
	return false;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b3e      	cmp	r3, #62	; 0x3e
 8000df2:	dc61      	bgt.n	8000eb8 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8000df4:	e002      	b.n	8000dfc <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	f7ff ffa7 	bl	8000d4a <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f7ff ffbe 	bl	8000d80 <hist_is_space_for_new>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0f5      	beq.n	8000df6 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	5cd3      	ldrb	r3, [r2, r3]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d105      	bne.n	8000e22 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	b2d1      	uxtb	r1, r2
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	da0a      	bge.n	8000e46 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	3301      	adds	r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f00c ffc2 	bl	800ddc8 <memcpy>
 8000e44:	e018      	b.n	8000e78 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000e4e:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	3301      	adds	r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f00c ffb2 	bl	800ddc8 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	18d1      	adds	r1, r2, r3
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	f00c ffa8 	bl	800ddc8 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	b2d1      	uxtb	r1, r2
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	1c5a      	adds	r2, r3, #1
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	2b3f      	cmp	r3, #63	; 0x3f
 8000e98:	dd05      	ble.n	8000ea6 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	2100      	movs	r1, #0
 8000eae:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	649a      	str	r2, [r3, #72]	; 0x48
 8000eb6:	e000      	b.n	8000eba <hist_save_line+0xd8>
		return;
 8000eb8:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8000ed6:	e010      	b.n	8000efa <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ee4:	4413      	add	r3, r2
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8000ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eea:	2b3f      	cmp	r3, #63	; 0x3f
 8000eec:	dd02      	ble.n	8000ef4 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8000eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef0:	3b40      	subs	r3, #64	; 0x40
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8000ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	4413      	add	r3, r2
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1e8      	bne.n	8000ed8 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d176      	bne.n	8000ffa <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f12:	429a      	cmp	r2, r3
 8000f14:	f2c0 80d6 	blt.w	80010c4 <hist_restore_line+0x204>
			int header = pThis->begin;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000f22:	e010      	b.n	8000f46 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	4413      	add	r3, r2
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f30:	4413      	add	r3, r2
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	2b3f      	cmp	r3, #63	; 0x3f
 8000f38:	dd02      	ble.n	8000f40 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	3b40      	subs	r3, #64	; 0x40
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	3301      	adds	r3, #1
 8000f44:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	4413      	add	r3, r2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d007      	beq.n	8000f62 <hist_restore_line+0xa2>
 8000f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	1e5a      	subs	r2, r3, #1
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d1e0      	bne.n	8000f24 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 80aa 	beq.w	80010c4 <hist_restore_line+0x204>
					pThis->cur++;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	4413      	add	r3, r2
 8000f88:	2b3f      	cmp	r3, #63	; 0x3f
 8000f8a:	dc11      	bgt.n	8000fb0 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8000f8c:	2233      	movs	r2, #51	; 0x33
 8000f8e:	2100      	movs	r1, #0
 8000f90:	68b8      	ldr	r0, [r7, #8]
 8000f92:	f00c ff41 	bl	800de18 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	18d1      	adds	r1, r2, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68b8      	ldr	r0, [r7, #8]
 8000faa:	f00c ff0d 	bl	800ddc8 <memcpy>
 8000fae:	e01f      	b.n	8000ff0 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb2:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000fb6:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8000fb8:	2233      	movs	r2, #51	; 0x33
 8000fba:	2100      	movs	r1, #0
 8000fbc:	68b8      	ldr	r0, [r7, #8]
 8000fbe:	f00c ff2b 	bl	800de18 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	68b8      	ldr	r0, [r7, #8]
 8000fd0:	f00c fefa 	bl	800ddc8 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	18d0      	adds	r0, r2, r3
 8000fda:	68f9      	ldr	r1, [r7, #12]
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	f00c feec 	bl	800ddc8 <memcpy>
				}
				return pThis->ring_buf[header];
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	4413      	add	r3, r2
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	e066      	b.n	80010c8 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	dd5e      	ble.n	80010c0 <hist_restore_line+0x200>
				pThis->cur--;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001006:	1e5a      	subs	r2, r3, #1
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8001016:	e010      	b.n	800103a <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	4413      	add	r3, r2
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	69fa      	ldr	r2, [r7, #28]
 8001024:	4413      	add	r3, r2
 8001026:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	2b3f      	cmp	r3, #63	; 0x3f
 800102c:	dd02      	ble.n	8001034 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3b40      	subs	r3, #64	; 0x40
 8001032:	61fb      	str	r3, [r7, #28]
				j++;
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	3301      	adds	r3, #1
 8001038:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d006      	beq.n	8001054 <hist_restore_line+0x194>
 8001046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	1ad2      	subs	r2, r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001050:	429a      	cmp	r2, r3
 8001052:	d1e1      	bne.n	8001018 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	4413      	add	r3, r2
 8001062:	2b3f      	cmp	r3, #63	; 0x3f
 8001064:	dc0c      	bgt.n	8001080 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	3301      	adds	r3, #1
 800106c:	18d1      	adds	r1, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	68b8      	ldr	r0, [r7, #8]
 800107a:	f00c fea5 	bl	800ddc8 <memcpy>
 800107e:	e01a      	b.n	80010b6 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001086:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3301      	adds	r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	4619      	mov	r1, r3
 8001094:	68b8      	ldr	r0, [r7, #8]
 8001096:	f00c fe97 	bl	800ddc8 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	18d0      	adds	r0, r2, r3
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	461a      	mov	r2, r3
 80010b2:	f00c fe89 	bl	800ddc8 <memcpy>
			}
			return pThis->ring_buf[header];
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	e003      	b.n	80010c8 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	e001      	b.n	80010c8 <hist_restore_line+0x208>
		}
	}
	return -1;
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3730      	adds	r7, #48	; 0x30
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
	int i = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
	int ind = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 80010e4:	e002      	b.n	80010ec <split+0x1c>
			ind++;
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	3301      	adds	r3, #1
 80010ea:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4413      	add	r3, r2
 80010f2:	3354      	adds	r3, #84	; 0x54
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d103      	bne.n	8001102 <split+0x32>
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	429a      	cmp	r2, r3
 8001100:	dbf1      	blt.n	80010e6 <split+0x16>
		}
		if (!(ind < limit)) return i;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	429a      	cmp	r2, r3
 8001108:	db01      	blt.n	800110e <split+0x3e>
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	e024      	b.n	8001158 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	1c58      	adds	r0, r3, #1
 800111a:	6178      	str	r0, [r7, #20]
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	4403      	add	r3, r0
 8001122:	440a      	add	r2, r1
 8001124:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2b04      	cmp	r3, #4
 800112a:	dd05      	ble.n	8001138 <split+0x68>
			return -1;
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	e012      	b.n	8001158 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	3301      	adds	r3, #1
 8001136:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4413      	add	r3, r2
 800113e:	3354      	adds	r3, #84	; 0x54
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <split+0x7e>
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	429a      	cmp	r2, r3
 800114c:	dbf1      	blt.n	8001132 <split+0x62>
		}
		if (!(ind < limit)) return i;
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	429a      	cmp	r2, r3
 8001154:	dbca      	blt.n	80010ec <split+0x1c>
 8001156:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8001158:	4618      	mov	r0, r3
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001174:	4610      	mov	r0, r2
 8001176:	4798      	blx	r3
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800118e:	4803      	ldr	r0, [pc, #12]	; (800119c <terminal_backspace+0x1c>)
 8001190:	4798      	blx	r3
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	0800df04 	.word	0x0800df04

080011a0 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <terminal_newline+0x1c>)
 80011b0:	4798      	blx	r3
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	0800df0c 	.word	0x0800df0c

080011c0 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	2300      	movs	r3, #0
 80011d0:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011dc:	d235      	bcs.n	800124a <u16bit_to_str+0x8a>
		while (nmb > 0) {
 80011de:	e01a      	b.n	8001216 <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <u16bit_to_str+0x9c>)
 80011e4:	fba3 2301 	umull	r2, r3, r3, r1
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	1aca      	subs	r2, r1, r3
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	1c59      	adds	r1, r3, #1
 80011fa:	6179      	str	r1, [r7, #20]
 80011fc:	3230      	adds	r2, #48	; 0x30
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	f107 0118 	add.w	r1, r7, #24
 8001204:	440b      	add	r3, r1
 8001206:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a13      	ldr	r2, [pc, #76]	; (800125c <u16bit_to_str+0x9c>)
 800120e:	fba2 2303 	umull	r2, r3, r2, r3
 8001212:	08db      	lsrs	r3, r3, #3
 8001214:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1e1      	bne.n	80011e0 <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	e00f      	b.n	8001242 <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	1e5a      	subs	r2, r3, #1
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	1c59      	adds	r1, r3, #1
 800122e:	6039      	str	r1, [r7, #0]
 8001230:	f107 0118 	add.w	r1, r7, #24
 8001234:	440a      	add	r2, r1
 8001236:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800123a:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	3301      	adds	r3, #1
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	429a      	cmp	r2, r3
 8001248:	dbeb      	blt.n	8001222 <u16bit_to_str+0x62>
	}
	*buf = '\0';
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
	return buf;
 8001250:	683b      	ldr	r3, [r7, #0]
}
 8001252:	4618      	mov	r0, r3
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	cccccccd 	.word	0xcccccccd

08001260 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <terminal_move_cursor+0x94>)
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	4611      	mov	r1, r2
 8001284:	8019      	strh	r1, [r3, #0]
 8001286:	3302      	adds	r3, #2
 8001288:	0c12      	lsrs	r2, r2, #16
 800128a:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	dd0f      	ble.n	80012b2 <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	3302      	adds	r3, #2
 800129a:	4619      	mov	r1, r3
 800129c:	4610      	mov	r0, r2
 800129e:	f7ff ff8f 	bl	80011c0 <u16bit_to_str>
 80012a2:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	4914      	ldr	r1, [pc, #80]	; (80012f8 <terminal_move_cursor+0x98>)
 80012a8:	461a      	mov	r2, r3
 80012aa:	460b      	mov	r3, r1
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	8013      	strh	r3, [r2, #0]
 80012b0:	e013      	b.n	80012da <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da18      	bge.n	80012ea <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	425b      	negs	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	3302      	adds	r3, #2
 80012c4:	4619      	mov	r1, r3
 80012c6:	4610      	mov	r0, r2
 80012c8:	f7ff ff7a 	bl	80011c0 <u16bit_to_str>
 80012cc:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	490a      	ldr	r1, [pc, #40]	; (80012fc <terminal_move_cursor+0x9c>)
 80012d2:	461a      	mov	r2, r3
 80012d4:	460b      	mov	r3, r1
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012e0:	f107 020c 	add.w	r2, r7, #12
 80012e4:	4610      	mov	r0, r2
 80012e6:	4798      	blx	r3
 80012e8:	e000      	b.n	80012ec <terminal_move_cursor+0x8c>
		return;
 80012ea:	bf00      	nop
}
 80012ec:	3720      	adds	r7, #32
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	0800df10 	.word	0x0800df10
 80012f8:	0800df14 	.word	0x0800df14
 80012fc:	0800df18 	.word	0x0800df18

08001300 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4a15      	ldr	r2, [pc, #84]	; (8001364 <terminal_reset_cursor+0x64>)
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	4611      	mov	r1, r2
 8001312:	8019      	strh	r1, [r3, #0]
 8001314:	3302      	adds	r3, #2
 8001316:	0c12      	lsrs	r2, r2, #16
 8001318:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	3302      	adds	r3, #2
 8001320:	4619      	mov	r1, r3
 8001322:	203a      	movs	r0, #58	; 0x3a
 8001324:	f7ff ff4c 	bl	80011c0 <u16bit_to_str>
 8001328:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <terminal_reset_cursor+0x68>)
 800132e:	6810      	ldr	r0, [r2, #0]
 8001330:	6018      	str	r0, [r3, #0]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3303      	adds	r3, #3
 8001336:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8001338:	69f9      	ldr	r1, [r7, #28]
 800133a:	2005      	movs	r0, #5
 800133c:	f7ff ff40 	bl	80011c0 <u16bit_to_str>
 8001340:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	4909      	ldr	r1, [pc, #36]	; (800136c <terminal_reset_cursor+0x6c>)
 8001346:	461a      	mov	r2, r3
 8001348:	460b      	mov	r3, r1
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001354:	f107 020c 	add.w	r2, r7, #12
 8001358:	4610      	mov	r0, r2
 800135a:	4798      	blx	r3
}
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	0800df10 	.word	0x0800df10
 8001368:	0800df1c 	.word	0x0800df1c
 800136c:	0800df14 	.word	0x0800df14

08001370 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001382:	4816      	ldr	r0, [pc, #88]	; (80013dc <terminal_print_line+0x6c>)
 8001384:	4798      	blx	r3

	char nch [] = {0,0};
 8001386:	2300      	movs	r3, #0
 8001388:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e014      	b.n	80013ba <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	4413      	add	r3, r2
 8001396:	3354      	adds	r3, #84	; 0x54
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 800139c:	7c3b      	ldrb	r3, [r7, #16]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <terminal_print_line+0x36>
			nch[0] = ' ';
 80013a2:	2320      	movs	r3, #32
 80013a4:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013ac:	f107 0210 	add.w	r2, r7, #16
 80013b0:	4610      	mov	r0, r2
 80013b2:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3301      	adds	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	dbe4      	blt.n	8001390 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f7ff ff9a 	bl	8001300 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f7ff ff46 	bl	8001260 <terminal_move_cursor>
}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	0800df20 	.word	0x0800df20

080013e0 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3354      	adds	r3, #84	; 0x54
 80013ee:	2233      	movs	r2, #51	; 0x33
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00c fd10 	bl	800de18 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3304      	adds	r3, #4
 80013fc:	2240      	movs	r2, #64	; 0x40
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f00c fd09 	bl	800de18 <memset>
	pThis->ring_hist.begin = 0;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <microrl_init+0x78>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000004 	.word	0x20000004

0800145c <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	1d18      	adds	r0, r3, #4
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3354      	adds	r3, #84	; 0x54
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	f7ff fcfb 	bl	8000ec0 <hist_restore_line>
 80014ca:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db1a      	blt.n	8001508 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4413      	add	r3, r2
 80014d8:	3354      	adds	r3, #84	; 0x54
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ff04 	bl	8001300 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014fe:	461a      	mov	r2, r3
 8001500:	2100      	movs	r1, #0
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff34 	bl	8001370 <terminal_print_line>
	}
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	2b5b      	cmp	r3, #91	; 0x5b
 8001520:	d104      	bne.n	800152c <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
		return 0;
 8001528:	2300      	movs	r3, #0
 800152a:	e07b      	b.n	8001624 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d14f      	bne.n	80015d4 <escape_process+0xc4>
		if (ch == 'A') {
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	2b41      	cmp	r3, #65	; 0x41
 8001538:	d105      	bne.n	8001546 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 800153a:	2100      	movs	r1, #0
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ffb7 	bl	80014b0 <hist_search>
#endif
			return 1;
 8001542:	2301      	movs	r3, #1
 8001544:	e06e      	b.n	8001624 <escape_process+0x114>
		} else if (ch == 'B') {
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	2b42      	cmp	r3, #66	; 0x42
 800154a:	d105      	bne.n	8001558 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 800154c:	2101      	movs	r1, #1
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffae 	bl	80014b0 <hist_search>
#endif
			return 1;
 8001554:	2301      	movs	r3, #1
 8001556:	e065      	b.n	8001624 <escape_process+0x114>
		} else if (ch == 'C') {
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	2b43      	cmp	r3, #67	; 0x43
 800155c:	d114      	bne.n	8001588 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156a:	429a      	cmp	r2, r3
 800156c:	da0a      	bge.n	8001584 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 800156e:	2101      	movs	r1, #1
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fe75 	bl	8001260 <terminal_move_cursor>
				pThis->cursor++;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001584:	2301      	movs	r3, #1
 8001586:	e04d      	b.n	8001624 <escape_process+0x114>
		} else if (ch == 'D') {
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	2b44      	cmp	r3, #68	; 0x44
 800158c:	d112      	bne.n	80015b4 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001594:	2b00      	cmp	r3, #0
 8001596:	dd0b      	ble.n	80015b0 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff fe5f 	bl	8001260 <terminal_move_cursor>
				pThis->cursor--;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015a8:	1e5a      	subs	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e037      	b.n	8001624 <escape_process+0x114>
		} else if (ch == '7') {
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	2b37      	cmp	r3, #55	; 0x37
 80015b8:	d104      	bne.n	80015c4 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2202      	movs	r2, #2
 80015be:	701a      	strb	r2, [r3, #0]
			return 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e02f      	b.n	8001624 <escape_process+0x114>
		} else if (ch == '8') {
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	2b38      	cmp	r3, #56	; 0x38
 80015c8:	d12b      	bne.n	8001622 <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2203      	movs	r2, #3
 80015ce:	701a      	strb	r2, [r3, #0]
			return 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	e027      	b.n	8001624 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 80015d4:	78fb      	ldrb	r3, [r7, #3]
 80015d6:	2b7e      	cmp	r3, #126	; 0x7e
 80015d8:	d123      	bne.n	8001622 <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d108      	bne.n	80015f4 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fe8c 	bl	8001300 <terminal_reset_cursor>
			pThis->cursor = 0;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e017      	b.n	8001624 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d112      	bne.n	8001622 <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	4619      	mov	r1, r3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fe27 	bl	8001260 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	2b32      	cmp	r3, #50	; 0x32
 8001644:	dc60      	bgt.n	8001708 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001652:	4619      	mov	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	440b      	add	r3, r1
 8001658:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3354      	adds	r3, #84	; 0x54
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 8001664:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001672:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8001674:	461a      	mov	r2, r3
 8001676:	f00c fbb5 	bl	800dde4 <memmove>
		for (i = 0; i < len; i++) {
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e025      	b.n	80016cc <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	441a      	add	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	440b      	add	r3, r1
 8001690:	7811      	ldrb	r1, [r2, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	4413      	add	r3, r2
 8001696:	460a      	mov	r2, r1
 8001698:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	4413      	add	r3, r2
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4413      	add	r3, r2
 80016aa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016ae:	2b20      	cmp	r3, #32
 80016b0:	d109      	bne.n	80016c6 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	4413      	add	r3, r2
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3301      	adds	r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbd5      	blt.n	8001680 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	441a      	add	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	441a      	add	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4413      	add	r3, r2
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <microrl_insert_text+0xde>
	}
	return false;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001720:	2b00      	cmp	r3, #0
 8001722:	dd31      	ble.n	8001788 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff fd2b 	bl	8001180 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001736:	3b01      	subs	r3, #1
 8001738:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3354      	adds	r3, #84	; 0x54
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 8001744:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8001756:	461a      	mov	r2, r3
 8001758:	f00c fb44 	bl	800dde4 <memmove>
		pThis->cursor--;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001762:	1e5a      	subs	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001780:	1e5a      	subs	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f7fe fce0 	bl	8000164 <strlen>
 80017a4:	4603      	mov	r3, r0
 80017a6:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e019      	b.n	80017e2 <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fcd3 	bl	8000164 <strlen>
 80017be:	4602      	mov	r2, r0
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d20a      	bcs.n	80017dc <common_len+0x4c>
			shortest = arr[i];
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f7fe fcc6 	bl	8000164 <strlen>
 80017d8:	4603      	mov	r3, r0
 80017da:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3301      	adds	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1de      	bne.n	80017ae <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	e01f      	b.n	8001836 <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	e012      	b.n	8001822 <common_len+0x92>
			if (shortest[i] != arr[j][i])
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4413      	add	r3, r2
 8001802:	781a      	ldrb	r2, [r3, #0]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	440b      	add	r3, r1
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	440b      	add	r3, r1
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <common_len+0x8c>
				return i;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	e011      	b.n	8001840 <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	3301      	adds	r3, #1
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1e5      	bne.n	80017fc <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	3301      	adds	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	429a      	cmp	r2, r3
 800183c:	dbdb      	blt.n	80017f6 <common_len+0x66>

	return i;
 800183e:	697b      	ldr	r3, [r7, #20]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b08c      	sub	sp, #48	; 0x30
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 809c 	beq.w	8001994 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001862:	f107 020c 	add.w	r2, r7, #12
 8001866:	4619      	mov	r1, r3
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fc31 	bl	80010d0 <split>
 800186e:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001876:	3b01      	subs	r3, #1
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	4413      	add	r3, r2
 800187c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001880:	2b00      	cmp	r3, #0
 8001882:	d109      	bne.n	8001898 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8001884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	62fa      	str	r2, [r7, #44]	; 0x2c
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001890:	4413      	add	r3, r2
 8001892:	4a42      	ldr	r2, [pc, #264]	; (800199c <microrl_get_complite+0x154>)
 8001894:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189e:	f107 020c 	add.w	r2, r7, #12
 80018a2:	4611      	mov	r1, r2
 80018a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018a6:	4798      	blx	r3
 80018a8:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d071      	beq.n	8001996 <microrl_get_complite+0x14e>
		int i = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	3304      	adds	r3, #4
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d107      	bne.n	80018d0 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fc4d 	bl	8000164 <strlen>
 80018ca:	4603      	mov	r3, r0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
 80018ce:	e026      	b.n	800191e <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 80018d0:	6a38      	ldr	r0, [r7, #32]
 80018d2:	f7ff ff5d 	bl	8001790 <common_len>
 80018d6:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff fc61 	bl	80011a0 <terminal_newline>
			while (compl_token [i] != NULL) {
 80018de:	e011      	b.n	8001904 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018e8:	0092      	lsls	r2, r2, #2
 80018ea:	6a39      	ldr	r1, [r7, #32]
 80018ec:	440a      	add	r2, r1
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	4610      	mov	r0, r2
 80018f2:	4798      	blx	r3
				pThis->print (" ");
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018fa:	4829      	ldr	r0, [pc, #164]	; (80019a0 <microrl_get_complite+0x158>)
 80018fc:	4798      	blx	r3
				i++;
 80018fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001900:	3301      	adds	r3, #1
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 8001904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	6a3a      	ldr	r2, [r7, #32]
 800190a:	4413      	add	r3, r2
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1e6      	bne.n	80018e0 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fc44 	bl	80011a0 <terminal_newline>
			print_prompt (pThis);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fc22 	bl	8001162 <print_prompt>
		}
		
		if (len) {
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	2b00      	cmp	r3, #0
 8001922:	d02b      	beq.n	800197c <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	681c      	ldr	r4, [r3, #0]
 8001928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192a:	3b01      	subs	r3, #1
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001932:	4413      	add	r3, r2
 8001934:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fc13 	bl	8000164 <strlen>
 800193e:	4603      	mov	r3, r0
 8001940:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 8001942:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001946:	3b01      	subs	r3, #1
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800194e:	4413      	add	r3, r2
 8001950:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fc05 	bl	8000164 <strlen>
 800195a:	4603      	mov	r3, r0
 800195c:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 800195e:	461a      	mov	r2, r3
 8001960:	4629      	mov	r1, r5
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fe62 	bl	800162c <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	3304      	adds	r3, #4
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d104      	bne.n	800197c <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 8001972:	2201      	movs	r2, #1
 8001974:	490a      	ldr	r1, [pc, #40]	; (80019a0 <microrl_get_complite+0x158>)
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fe58 	bl	800162c <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fcbf 	bl	8001300 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001988:	461a      	mov	r2, r3
 800198a:	2100      	movs	r1, #0
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff fcef 	bl	8001370 <terminal_print_line>
 8001992:	e000      	b.n	8001996 <microrl_get_complite+0x14e>
		return;
 8001994:	bf00      	nop
	} 
}
 8001996:	3730      	adds	r7, #48	; 0x30
 8001998:	46bd      	mov	sp, r7
 800199a:	bdb0      	pop	{r4, r5, r7, pc}
 800199c:	0800df24 	.word	0x0800df24
 80019a0:	0800df28 	.word	0x0800df28

080019a4 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff fbf7 	bl	80011a0 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	dd0a      	ble.n	80019d2 <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	1d18      	adds	r0, r3, #4
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019cc:	461a      	mov	r2, r3
 80019ce:	f7ff fa08 	bl	8000de2 <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d8:	f107 0208 	add.w	r2, r7, #8
 80019dc:	4619      	mov	r1, r3
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fb76 	bl	80010d0 <split>
 80019e4:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d109      	bne.n	8001a02 <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019f4:	4817      	ldr	r0, [pc, #92]	; (8001a54 <new_line_handler+0xb0>)
 80019f6:	4798      	blx	r3
		pThis->print (ENDL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019fe:	4816      	ldr	r0, [pc, #88]	; (8001a58 <new_line_handler+0xb4>)
 8001a00:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	dd0c      	ble.n	8001a22 <new_line_handler+0x7e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a18:	f107 0208 	add.w	r2, r7, #8
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	69f8      	ldr	r0, [r7, #28]
 8001a20:	4798      	blx	r3
	print_prompt (pThis);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fb9d 	bl	8001162 <print_prompt>
	pThis->cmdlen = 0;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3354      	adds	r3, #84	; 0x54
 8001a3c:	2233      	movs	r2, #51	; 0x33
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f00c f9e9 	bl	800de18 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8001a4c:	bf00      	nop
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	0800df2c 	.word	0x0800df2c
 8001a58:	0800df0c 	.word	0x0800df0c

08001a5c <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	785b      	ldrb	r3, [r3, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00d      	beq.n	8001a8a <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	4619      	mov	r1, r3
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff fd4b 	bl	8001510 <escape_process>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 81e3 	beq.w	8001e48 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8001a88:	e1de      	b.n	8001e48 <microrl_insert_char+0x3ec>
		switch (ch) {
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	2b7e      	cmp	r3, #126	; 0x7e
 8001a90:	f200 81af 	bhi.w	8001df2 <microrl_insert_char+0x396>
 8001a94:	a201      	add	r2, pc, #4	; (adr r2, 8001a9c <microrl_insert_char+0x40>)
 8001a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9a:	bf00      	nop
 8001a9c:	08001d2f 	.word	0x08001d2f
 8001aa0:	08001d67 	.word	0x08001d67
 8001aa4:	08001ddf 	.word	0x08001ddf
 8001aa8:	08001df3 	.word	0x08001df3
 8001aac:	08001d0b 	.word	0x08001d0b
 8001ab0:	08001d3f 	.word	0x08001d3f
 8001ab4:	08001df3 	.word	0x08001df3
 8001ab8:	08001d9f 	.word	0x08001d9f
 8001abc:	08001cc1 	.word	0x08001cc1
 8001ac0:	08001c99 	.word	0x08001c99
 8001ac4:	08001cf3 	.word	0x08001cf3
 8001ac8:	08001df3 	.word	0x08001df3
 8001acc:	08001c99 	.word	0x08001c99
 8001ad0:	08001d95 	.word	0x08001d95
 8001ad4:	08001df3 	.word	0x08001df3
 8001ad8:	08001d8b 	.word	0x08001d8b
 8001adc:	08001df3 	.word	0x08001df3
 8001ae0:	08001dbb 	.word	0x08001dbb
 8001ae4:	08001df3 	.word	0x08001df3
 8001ae8:	08001df3 	.word	0x08001df3
 8001aec:	08001cd7 	.word	0x08001cd7
 8001af0:	08001df3 	.word	0x08001df3
 8001af4:	08001df3 	.word	0x08001df3
 8001af8:	08001df3 	.word	0x08001df3
 8001afc:	08001df3 	.word	0x08001df3
 8001b00:	08001df3 	.word	0x08001df3
 8001b04:	08001cc9 	.word	0x08001cc9
 8001b08:	08001df3 	.word	0x08001df3
 8001b0c:	08001df3 	.word	0x08001df3
 8001b10:	08001df3 	.word	0x08001df3
 8001b14:	08001df3 	.word	0x08001df3
 8001b18:	08001df3 	.word	0x08001df3
 8001b1c:	08001df3 	.word	0x08001df3
 8001b20:	08001df3 	.word	0x08001df3
 8001b24:	08001df3 	.word	0x08001df3
 8001b28:	08001df3 	.word	0x08001df3
 8001b2c:	08001df3 	.word	0x08001df3
 8001b30:	08001df3 	.word	0x08001df3
 8001b34:	08001df3 	.word	0x08001df3
 8001b38:	08001df3 	.word	0x08001df3
 8001b3c:	08001df3 	.word	0x08001df3
 8001b40:	08001df3 	.word	0x08001df3
 8001b44:	08001df3 	.word	0x08001df3
 8001b48:	08001df3 	.word	0x08001df3
 8001b4c:	08001df3 	.word	0x08001df3
 8001b50:	08001df3 	.word	0x08001df3
 8001b54:	08001df3 	.word	0x08001df3
 8001b58:	08001df3 	.word	0x08001df3
 8001b5c:	08001df3 	.word	0x08001df3
 8001b60:	08001df3 	.word	0x08001df3
 8001b64:	08001df3 	.word	0x08001df3
 8001b68:	08001df3 	.word	0x08001df3
 8001b6c:	08001df3 	.word	0x08001df3
 8001b70:	08001df3 	.word	0x08001df3
 8001b74:	08001df3 	.word	0x08001df3
 8001b78:	08001df3 	.word	0x08001df3
 8001b7c:	08001df3 	.word	0x08001df3
 8001b80:	08001df3 	.word	0x08001df3
 8001b84:	08001df3 	.word	0x08001df3
 8001b88:	08001df3 	.word	0x08001df3
 8001b8c:	08001df3 	.word	0x08001df3
 8001b90:	08001df3 	.word	0x08001df3
 8001b94:	08001df3 	.word	0x08001df3
 8001b98:	08001df3 	.word	0x08001df3
 8001b9c:	08001df3 	.word	0x08001df3
 8001ba0:	08001df3 	.word	0x08001df3
 8001ba4:	08001df3 	.word	0x08001df3
 8001ba8:	08001df3 	.word	0x08001df3
 8001bac:	08001df3 	.word	0x08001df3
 8001bb0:	08001df3 	.word	0x08001df3
 8001bb4:	08001df3 	.word	0x08001df3
 8001bb8:	08001df3 	.word	0x08001df3
 8001bbc:	08001df3 	.word	0x08001df3
 8001bc0:	08001df3 	.word	0x08001df3
 8001bc4:	08001df3 	.word	0x08001df3
 8001bc8:	08001df3 	.word	0x08001df3
 8001bcc:	08001df3 	.word	0x08001df3
 8001bd0:	08001df3 	.word	0x08001df3
 8001bd4:	08001df3 	.word	0x08001df3
 8001bd8:	08001df3 	.word	0x08001df3
 8001bdc:	08001df3 	.word	0x08001df3
 8001be0:	08001df3 	.word	0x08001df3
 8001be4:	08001df3 	.word	0x08001df3
 8001be8:	08001df3 	.word	0x08001df3
 8001bec:	08001df3 	.word	0x08001df3
 8001bf0:	08001df3 	.word	0x08001df3
 8001bf4:	08001df3 	.word	0x08001df3
 8001bf8:	08001df3 	.word	0x08001df3
 8001bfc:	08001df3 	.word	0x08001df3
 8001c00:	08001df3 	.word	0x08001df3
 8001c04:	08001df3 	.word	0x08001df3
 8001c08:	08001df3 	.word	0x08001df3
 8001c0c:	08001df3 	.word	0x08001df3
 8001c10:	08001df3 	.word	0x08001df3
 8001c14:	08001df3 	.word	0x08001df3
 8001c18:	08001df3 	.word	0x08001df3
 8001c1c:	08001df3 	.word	0x08001df3
 8001c20:	08001df3 	.word	0x08001df3
 8001c24:	08001df3 	.word	0x08001df3
 8001c28:	08001df3 	.word	0x08001df3
 8001c2c:	08001df3 	.word	0x08001df3
 8001c30:	08001df3 	.word	0x08001df3
 8001c34:	08001df3 	.word	0x08001df3
 8001c38:	08001df3 	.word	0x08001df3
 8001c3c:	08001df3 	.word	0x08001df3
 8001c40:	08001df3 	.word	0x08001df3
 8001c44:	08001df3 	.word	0x08001df3
 8001c48:	08001df3 	.word	0x08001df3
 8001c4c:	08001df3 	.word	0x08001df3
 8001c50:	08001df3 	.word	0x08001df3
 8001c54:	08001df3 	.word	0x08001df3
 8001c58:	08001df3 	.word	0x08001df3
 8001c5c:	08001df3 	.word	0x08001df3
 8001c60:	08001df3 	.word	0x08001df3
 8001c64:	08001df3 	.word	0x08001df3
 8001c68:	08001df3 	.word	0x08001df3
 8001c6c:	08001df3 	.word	0x08001df3
 8001c70:	08001df3 	.word	0x08001df3
 8001c74:	08001df3 	.word	0x08001df3
 8001c78:	08001df3 	.word	0x08001df3
 8001c7c:	08001df3 	.word	0x08001df3
 8001c80:	08001df3 	.word	0x08001df3
 8001c84:	08001df3 	.word	0x08001df3
 8001c88:	08001df3 	.word	0x08001df3
 8001c8c:	08001df3 	.word	0x08001df3
 8001c90:	08001df3 	.word	0x08001df3
 8001c94:	08001d9f 	.word	0x08001d9f
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	789b      	ldrb	r3, [r3, #2]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b0d      	cmp	r3, #13
 8001ca2:	d101      	bne.n	8001ca8 <microrl_insert_char+0x24c>
 8001ca4:	230a      	movs	r3, #10
 8001ca6:	e000      	b.n	8001caa <microrl_insert_char+0x24e>
 8001ca8:	230d      	movs	r3, #13
 8001caa:	4293      	cmp	r3, r2
 8001cac:	f000 80c1 	beq.w	8001e32 <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff fe73 	bl	80019a4 <new_line_handler>
				break;
 8001cbe:	e0c3      	b.n	8001e48 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff fdc1 	bl	8001848 <microrl_get_complite>
			break;
 8001cc6:	e0bf      	b.n	8001e48 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	705a      	strb	r2, [r3, #1]
			break;
 8001cce:	e0bb      	b.n	8001e48 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff fd1e 	bl	8001712 <microrl_backspace>
					while (pThis->cursor > 0) {
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	dcf7      	bgt.n	8001cd0 <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2100      	movs	r1, #0
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fb40 	bl	8001370 <terminal_print_line>
			break;
 8001cf0:	e0aa      	b.n	8001e48 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cf8:	4855      	ldr	r0, [pc, #340]	; (8001e50 <microrl_insert_char+0x3f4>)
 8001cfa:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8001d08:	e09e      	b.n	8001e48 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff faa0 	bl	8001260 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001d2c:	e08c      	b.n	8001e48 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff fae6 	bl	8001300 <terminal_reset_cursor>
				pThis->cursor = 0;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001d3c:	e084      	b.n	8001e48 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	da73      	bge.n	8001e36 <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 8001d4e:	2101      	movs	r1, #1
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff fa85 	bl	8001260 <terminal_move_cursor>
				pThis->cursor++;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001d64:	e067      	b.n	8001e36 <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d064      	beq.n	8001e3a <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff fa73 	bl	8001260 <terminal_move_cursor>
				pThis->cursor--;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d80:	1e5a      	subs	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001d88:	e057      	b.n	8001e3a <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff fb8f 	bl	80014b0 <hist_search>
			break;
 8001d92:	e059      	b.n	8001e48 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 8001d94:	2101      	movs	r1, #1
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff fb8a 	bl	80014b0 <hist_search>
			break;
 8001d9c:	e054      	b.n	8001e48 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff fcb7 	bl	8001712 <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db0:	461a      	mov	r2, r3
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff fadc 	bl	8001370 <terminal_print_line>
			break;
 8001db8:	e046      	b.n	8001e48 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff f9f0 	bl	80011a0 <terminal_newline>
				print_prompt (pThis);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff f9ce 	bl	8001162 <print_prompt>
				terminal_reset_cursor (pThis);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff fa9a 	bl	8001300 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff faca 	bl	8001370 <terminal_print_line>
			break;
 8001ddc:	e034      	b.n	8001e48 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d02a      	beq.n	8001e3e <microrl_insert_char+0x3e2>
				pThis->sigint();
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001dee:	4798      	blx	r3
			break;
 8001df0:	e025      	b.n	8001e3e <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d104      	bne.n	8001e02 <microrl_insert_char+0x3a6>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01f      	beq.n	8001e42 <microrl_insert_char+0x3e6>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b1f      	cmp	r3, #31
 8001e06:	dd1c      	ble.n	8001e42 <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8001e08:	463b      	mov	r3, r7
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fc0c 	bl	800162c <microrl_insert_text>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d015      	beq.n	8001e46 <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e20:	1e59      	subs	r1, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e28:	461a      	mov	r2, r3
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff faa0 	bl	8001370 <terminal_print_line>
			break;
 8001e30:	e009      	b.n	8001e46 <microrl_insert_char+0x3ea>
					break;
 8001e32:	bf00      	nop
 8001e34:	e008      	b.n	8001e48 <microrl_insert_char+0x3ec>
			break;
 8001e36:	bf00      	nop
 8001e38:	e006      	b.n	8001e48 <microrl_insert_char+0x3ec>
			break;
 8001e3a:	bf00      	nop
 8001e3c:	e004      	b.n	8001e48 <microrl_insert_char+0x3ec>
			break;
 8001e3e:	bf00      	nop
 8001e40:	e002      	b.n	8001e48 <microrl_insert_char+0x3ec>
	}
 8001e42:	bf00      	nop
 8001e44:	e000      	b.n	8001e48 <microrl_insert_char+0x3ec>
			break;
 8001e46:	bf00      	nop
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	0800df20 	.word	0x0800df20

08001e54 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <microrl_print_char+0x20>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	79fa      	ldrb	r2, [r7, #7]
 8001e64:	4611      	mov	r1, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fdf8 	bl	8001a5c <microrl_insert_char>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000008 	.word	0x20000008

08001e78 <print>:

void print (const char * str)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <print+0x84>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	f083 0301 	eor.w	r3, r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <print+0x1e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b1b      	cmp	r3, #27
 8001e94:	d02b      	beq.n	8001eee <print+0x76>
		return;
	if (!CDC_is_ready)
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <print+0x88>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	f083 0301 	eor.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d126      	bne.n	8001ef2 <print+0x7a>
		return;
	uint16_t len = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 8001ea8:	89fb      	ldrh	r3, [r7, #14]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	81fb      	strh	r3, [r7, #14]
 8001eae:	89fb      	ldrh	r3, [r7, #14]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f6      	bne.n	8001ea8 <print+0x30>
	uint32_t timeout = HAL_GetTick();
 8001eba:	f000 ff17 	bl	8002cec <HAL_GetTick>
 8001ebe:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001ec0:	e006      	b.n	8001ed0 <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 8001ec2:	f000 ff13 	bl	8002cec <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d807      	bhi.n	8001ee0 <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <print+0x8c>)
 8001ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001ed6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f1      	bne.n	8001ec2 <print+0x4a>
 8001ede:	e000      	b.n	8001ee2 <print+0x6a>
			break;
 8001ee0:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 8001ee2:	89fb      	ldrh	r3, [r7, #14]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f00b fb6c 	bl	800d5c4 <CDC_Transmit_FS>
 8001eec:	e002      	b.n	8001ef4 <print+0x7c>
		return;
 8001eee:	bf00      	nop
 8001ef0:	e000      	b.n	8001ef4 <print+0x7c>
		return;
 8001ef2:	bf00      	nop
}
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	2000000c 	.word	0x2000000c
 8001f00:	200001af 	.word	0x200001af
 8001f04:	200026a0 	.word	0x200026a0

08001f08 <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	e010      	b.n	8001f3a <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 8001f18:	490c      	ldr	r1, [pc, #48]	; (8001f4c <find_color_by_name+0x44>)
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	440b      	add	r3, r1
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	79fa      	ldrb	r2, [r7, #7]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d101      	bne.n	8001f34 <find_color_by_name+0x2c>
		{
			return i;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	e006      	b.n	8001f42 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3301      	adds	r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2b10      	cmp	r3, #16
 8001f3e:	d9eb      	bls.n	8001f18 <find_color_by_name+0x10>
		}
	}
	return 0;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	0800e570 	.word	0x0800e570

08001f50 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ffd2 	bl	8001f08 <find_color_by_name>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <print_color+0x44>)
 8001f72:	4413      	add	r3, r2
 8001f74:	3301      	adds	r3, #1
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff7e 	bl	8001e78 <print>
	print(str);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff7b 	bl	8001e78 <print>
	print(COLOR_NC);
 8001f82:	4805      	ldr	r0, [pc, #20]	; (8001f98 <print_color+0x48>)
 8001f84:	f7ff ff78 	bl	8001e78 <print>
	return 0;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	0800e570 	.word	0x0800e570
 8001f98:	0800df44 	.word	0x0800df44

08001f9c <str_length>:

int str_length(const char * str)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001fa8:	e002      	b.n	8001fb0 <str_length+0x14>
		i++;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3301      	adds	r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f6      	bne.n	8001faa <str_length+0xe>
	return i;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <print_help>:


int print_help(int argc, const char * const * argv)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
	print(_VER);
 8001fd2:	4858      	ldr	r0, [pc, #352]	; (8002134 <print_help+0x16c>)
 8001fd4:	f7ff ff50 	bl	8001e78 <print>
	print(ENDL);
 8001fd8:	4857      	ldr	r0, [pc, #348]	; (8002138 <print_help+0x170>)
 8001fda:	f7ff ff4d 	bl	8001e78 <print>
	print ("Use ");
 8001fde:	4857      	ldr	r0, [pc, #348]	; (800213c <print_help+0x174>)
 8001fe0:	f7ff ff4a 	bl	8001e78 <print>
	print_color("TAB", C_GREEN);
 8001fe4:	2105      	movs	r1, #5
 8001fe6:	4856      	ldr	r0, [pc, #344]	; (8002140 <print_help+0x178>)
 8001fe8:	f7ff ffb2 	bl	8001f50 <print_color>
	print(" key for completion");
 8001fec:	4855      	ldr	r0, [pc, #340]	; (8002144 <print_help+0x17c>)
 8001fee:	f7ff ff43 	bl	8001e78 <print>
	print (ENDL);
 8001ff2:	4851      	ldr	r0, [pc, #324]	; (8002138 <print_help+0x170>)
 8001ff4:	f7ff ff40 	bl	8001e78 <print>
	print ("Available commands:");
 8001ff8:	4853      	ldr	r0, [pc, #332]	; (8002148 <print_help+0x180>)
 8001ffa:	f7ff ff3d 	bl	8001e78 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e08a      	b.n	800211a <print_help+0x152>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8002004:	4a51      	ldr	r2, [pc, #324]	; (800214c <print_help+0x184>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	019b      	lsls	r3, r3, #6
 800200a:	4413      	add	r3, r2
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002012:	d11b      	bne.n	800204c <print_help+0x84>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3b01      	subs	r3, #1
 8002018:	4a4c      	ldr	r2, [pc, #304]	; (800214c <print_help+0x184>)
 800201a:	019b      	lsls	r3, r3, #6
 800201c:	4413      	add	r3, r2
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d004      	beq.n	8002030 <print_help+0x68>
				print_color(" aka ", C_L_PURPLE);
 8002026:	210c      	movs	r1, #12
 8002028:	4849      	ldr	r0, [pc, #292]	; (8002150 <print_help+0x188>)
 800202a:	f7ff ff91 	bl	8001f50 <print_color>
 800202e:	e003      	b.n	8002038 <print_help+0x70>
			else
				print_color("/", C_L_PURPLE);
 8002030:	210c      	movs	r1, #12
 8002032:	4848      	ldr	r0, [pc, #288]	; (8002154 <print_help+0x18c>)
 8002034:	f7ff ff8c 	bl	8001f50 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	019b      	lsls	r3, r3, #6
 800203c:	4a43      	ldr	r2, [pc, #268]	; (800214c <print_help+0x184>)
 800203e:	4413      	add	r3, r2
 8002040:	3304      	adds	r3, #4
 8002042:	210b      	movs	r1, #11
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff83 	bl	8001f50 <print_color>
 800204a:	e063      	b.n	8002114 <print_help+0x14c>
		}
		else
		{
			print(ENDL);
 800204c:	483a      	ldr	r0, [pc, #232]	; (8002138 <print_help+0x170>)
 800204e:	f7ff ff13 	bl	8001e78 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8002052:	f06f 0303 	mvn.w	r3, #3
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	e005      	b.n	8002066 <print_help+0x9e>
				print(" ");
 800205a:	483f      	ldr	r0, [pc, #252]	; (8002158 <print_help+0x190>)
 800205c:	f7ff ff0c 	bl	8001e78 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	3301      	adds	r3, #1
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4a39      	ldr	r2, [pc, #228]	; (800214c <print_help+0x184>)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	019b      	lsls	r3, r3, #6
 800206c:	4413      	add	r3, r2
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	429a      	cmp	r2, r3
 8002074:	dbf1      	blt.n	800205a <print_help+0x92>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	019b      	lsls	r3, r3, #6
 800207a:	4a34      	ldr	r2, [pc, #208]	; (800214c <print_help+0x184>)
 800207c:	4413      	add	r3, r2
 800207e:	1d1a      	adds	r2, r3, #4
 8002080:	4932      	ldr	r1, [pc, #200]	; (800214c <print_help+0x184>)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	019b      	lsls	r3, r3, #6
 8002086:	440b      	add	r3, r1
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4934      	ldr	r1, [pc, #208]	; (800215c <print_help+0x194>)
 800208c:	5ccb      	ldrb	r3, [r1, r3]
 800208e:	4619      	mov	r1, r3
 8002090:	4610      	mov	r0, r2
 8002092:	f7ff ff5d 	bl	8001f50 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	e005      	b.n	80020a8 <print_help+0xe0>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 800209c:	482e      	ldr	r0, [pc, #184]	; (8002158 <print_help+0x190>)
 800209e:	f7ff feeb 	bl	8001e78 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3301      	adds	r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	4a28      	ldr	r2, [pc, #160]	; (800214c <print_help+0x184>)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	019b      	lsls	r3, r3, #6
 80020ae:	4413      	add	r3, r2
 80020b0:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80020b2:	f1c3 040c 	rsb	r4, r3, #12
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	019b      	lsls	r3, r3, #6
 80020ba:	4a24      	ldr	r2, [pc, #144]	; (800214c <print_help+0x184>)
 80020bc:	4413      	add	r3, r2
 80020be:	3304      	adds	r3, #4
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff6b 	bl	8001f9c <str_length>
 80020c6:	4603      	mov	r3, r0
 80020c8:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	dbe5      	blt.n	800209c <print_help+0xd4>
			switch (microrl_actions[i].level){
 80020d0:	4a1e      	ldr	r2, [pc, #120]	; (800214c <print_help+0x184>)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	019b      	lsls	r3, r3, #6
 80020d6:	4413      	add	r3, r2
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <print_help+0x11c>
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d004      	beq.n	80020ec <print_help+0x124>
 80020e2:	e007      	b.n	80020f4 <print_help+0x12c>
			case 0:
				print ("-");
 80020e4:	481e      	ldr	r0, [pc, #120]	; (8002160 <print_help+0x198>)
 80020e6:	f7ff fec7 	bl	8001e78 <print>
				break;
 80020ea:	e007      	b.n	80020fc <print_help+0x134>
			case 1:
				print ("^");
 80020ec:	481d      	ldr	r0, [pc, #116]	; (8002164 <print_help+0x19c>)
 80020ee:	f7ff fec3 	bl	8001e78 <print>
				break;
 80020f2:	e003      	b.n	80020fc <print_help+0x134>
			default:
				print ("#");
 80020f4:	481c      	ldr	r0, [pc, #112]	; (8002168 <print_help+0x1a0>)
 80020f6:	f7ff febf 	bl	8001e78 <print>
				break;
 80020fa:	bf00      	nop
			}
			print (" ");
 80020fc:	4816      	ldr	r0, [pc, #88]	; (8002158 <print_help+0x190>)
 80020fe:	f7ff febb 	bl	8001e78 <print>
			print (microrl_actions[i].help_msg);
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	019b      	lsls	r3, r3, #6
 8002106:	3308      	adds	r3, #8
 8002108:	4a10      	ldr	r2, [pc, #64]	; (800214c <print_help+0x184>)
 800210a:	4413      	add	r3, r2
 800210c:	3306      	adds	r3, #6
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff feb2 	bl	8001e78 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	3301      	adds	r3, #1
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b0e      	cmp	r3, #14
 800211e:	f67f af71 	bls.w	8002004 <print_help+0x3c>
		}
	}
	print(ENDL);
 8002122:	4805      	ldr	r0, [pc, #20]	; (8002138 <print_help+0x170>)
 8002124:	f7ff fea8 	bl	8001e78 <print>
	return 0;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	371c      	adds	r7, #28
 800212e:	46bd      	mov	sp, r7
 8002130:	bd90      	pop	{r4, r7, pc}
 8002132:	bf00      	nop
 8002134:	0800df4c 	.word	0x0800df4c
 8002138:	0800df5c 	.word	0x0800df5c
 800213c:	0800df60 	.word	0x0800df60
 8002140:	0800df68 	.word	0x0800df68
 8002144:	0800df6c 	.word	0x0800df6c
 8002148:	0800df80 	.word	0x0800df80
 800214c:	0800e1b0 	.word	0x0800e1b0
 8002150:	0800df94 	.word	0x0800df94
 8002154:	0800df9c 	.word	0x0800df9c
 8002158:	0800dfa0 	.word	0x0800dfa0
 800215c:	0800e62c 	.word	0x0800e62c
 8002160:	0800dfa4 	.word	0x0800dfa4
 8002164:	0800dfa8 	.word	0x0800dfa8
 8002168:	0800dfac 	.word	0x0800dfac

0800216c <execute>:



int execute (int argc, const char * const * argv)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 8002182:	2300      	movs	r3, #0
 8002184:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	e050      	b.n	800222e <execute+0xc2>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	e03f      	b.n	8002212 <execute+0xa6>
		{
			tokens_found = false;
 8002192:	2300      	movs	r3, #0
 8002194:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 8002196:	4a52      	ldr	r2, [pc, #328]	; (80022e0 <execute+0x174>)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	019b      	lsls	r3, r3, #6
 800219c:	4413      	add	r3, r2
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d001      	beq.n	80021ae <execute+0x42>
				synonym_level = current_level; // save the synonym level
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d003      	beq.n	80021be <execute+0x52>
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	db2d      	blt.n	800221a <execute+0xae>
				break;
			if (current_level == i)
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d101      	bne.n	80021ca <execute+0x5e>
				last_main_synonym = n;
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	4413      	add	r3, r2
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	019b      	lsls	r3, r3, #6
 80021d8:	4941      	ldr	r1, [pc, #260]	; (80022e0 <execute+0x174>)
 80021da:	440b      	add	r3, r1
 80021dc:	3304      	adds	r3, #4
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f7fd ffb5 	bl	8000150 <strcmp>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10f      	bne.n	800220c <execute+0xa0>
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d10b      	bne.n	800220c <execute+0xa0>
					(i == synonym_level))
			{
				tokens_found = true;
 80021f4:	2301      	movs	r3, #1
 80021f6:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	623a      	str	r2, [r7, #32]
 80021fe:	4a38      	ldr	r2, [pc, #224]	; (80022e0 <execute+0x174>)
 8002200:	019b      	lsls	r3, r3, #6
 8002202:	4413      	add	r3, r2
 8002204:	333c      	adds	r3, #60	; 0x3c
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800220a:	e007      	b.n	800221c <execute+0xb0>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	3301      	adds	r3, #1
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b0e      	cmp	r3, #14
 8002216:	d9bc      	bls.n	8002192 <execute+0x26>
 8002218:	e000      	b.n	800221c <execute+0xb0>
				break;
 800221a:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 800221c:	7efb      	ldrb	r3, [r7, #27]
 800221e:	f083 0301 	eor.w	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d107      	bne.n	8002238 <execute+0xcc>
	for (int i = 0; i < argc; i++)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3301      	adds	r3, #1
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	429a      	cmp	r2, r3
 8002234:	dbaa      	blt.n	800218c <execute+0x20>
 8002236:	e000      	b.n	800223a <execute+0xce>
			break;
 8002238:	bf00      	nop
	}

	if (func != NULL)
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <execute+0xe0>
	{
		return func(argc, argv); // function found
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	6839      	ldr	r1, [r7, #0]
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	4798      	blx	r3
 8002248:	4603      	mov	r3, r0
 800224a:	e045      	b.n	80022d8 <execute+0x16c>
	} else if (tokens_found)
 800224c:	7efb      	ldrb	r3, [r7, #27]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d021      	beq.n	8002296 <execute+0x12a>
	{
		print_color ("command: '", C_L_RED);
 8002252:	210a      	movs	r1, #10
 8002254:	4823      	ldr	r0, [pc, #140]	; (80022e4 <execute+0x178>)
 8002256:	f7ff fe7b 	bl	8001f50 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	210a      	movs	r1, #10
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fe75 	bl	8001f50 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 8002266:	210a      	movs	r1, #10
 8002268:	481f      	ldr	r0, [pc, #124]	; (80022e8 <execute+0x17c>)
 800226a:	f7ff fe71 	bl	8001f50 <print_color>
		print(ENDL);
 800226e:	481f      	ldr	r0, [pc, #124]	; (80022ec <execute+0x180>)
 8002270:	f7ff fe02 	bl	8001e78 <print>
		print_color ("use '", C_NC);
 8002274:	2100      	movs	r1, #0
 8002276:	481e      	ldr	r0, [pc, #120]	; (80022f0 <execute+0x184>)
 8002278:	f7ff fe6a 	bl	8001f50 <print_color>
		print_color ("?", C_GREEN);
 800227c:	2105      	movs	r1, #5
 800227e:	481d      	ldr	r0, [pc, #116]	; (80022f4 <execute+0x188>)
 8002280:	f7ff fe66 	bl	8001f50 <print_color>
		print_color ("' for help", C_NC);
 8002284:	2100      	movs	r1, #0
 8002286:	481c      	ldr	r0, [pc, #112]	; (80022f8 <execute+0x18c>)
 8002288:	f7ff fe62 	bl	8001f50 <print_color>
		print (ENDL);
 800228c:	4817      	ldr	r0, [pc, #92]	; (80022ec <execute+0x180>)
 800228e:	f7ff fdf3 	bl	8001e78 <print>
		return 1;
 8002292:	2301      	movs	r3, #1
 8002294:	e020      	b.n	80022d8 <execute+0x16c>
	}
	else
	{
		print_color ("command: '", C_RED);
 8002296:	2109      	movs	r1, #9
 8002298:	4812      	ldr	r0, [pc, #72]	; (80022e4 <execute+0x178>)
 800229a:	f7ff fe59 	bl	8001f50 <print_color>
		print_color ((char*)argv[0], C_RED);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2109      	movs	r1, #9
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fe53 	bl	8001f50 <print_color>
		print_color ("' not found", C_RED);
 80022aa:	2109      	movs	r1, #9
 80022ac:	4813      	ldr	r0, [pc, #76]	; (80022fc <execute+0x190>)
 80022ae:	f7ff fe4f 	bl	8001f50 <print_color>
		print(ENDL);
 80022b2:	480e      	ldr	r0, [pc, #56]	; (80022ec <execute+0x180>)
 80022b4:	f7ff fde0 	bl	8001e78 <print>
		print_color ("use '", C_NC);
 80022b8:	2100      	movs	r1, #0
 80022ba:	480d      	ldr	r0, [pc, #52]	; (80022f0 <execute+0x184>)
 80022bc:	f7ff fe48 	bl	8001f50 <print_color>
		print_color ("?", C_GREEN);
 80022c0:	2105      	movs	r1, #5
 80022c2:	480c      	ldr	r0, [pc, #48]	; (80022f4 <execute+0x188>)
 80022c4:	f7ff fe44 	bl	8001f50 <print_color>
		print_color ("' for help", C_NC);
 80022c8:	2100      	movs	r1, #0
 80022ca:	480b      	ldr	r0, [pc, #44]	; (80022f8 <execute+0x18c>)
 80022cc:	f7ff fe40 	bl	8001f50 <print_color>
		print (ENDL);
 80022d0:	4806      	ldr	r0, [pc, #24]	; (80022ec <execute+0x180>)
 80022d2:	f7ff fdd1 	bl	8001e78 <print>
		return 1;
 80022d6:	2301      	movs	r3, #1

	}
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3728      	adds	r7, #40	; 0x28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	0800e1b0 	.word	0x0800e1b0
 80022e4:	0800dfb0 	.word	0x0800dfb0
 80022e8:	0800dfbc 	.word	0x0800dfbc
 80022ec:	0800df5c 	.word	0x0800df5c
 80022f0:	0800dfdc 	.word	0x0800dfdc
 80022f4:	0800dfe4 	.word	0x0800dfe4
 80022f8:	0800dfe8 	.word	0x0800dfe8
 80022fc:	0800dff4 	.word	0x0800dff4

08002300 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	; 0x30
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
	int j = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 800230e:	4b5b      	ldr	r3, [pc, #364]	; (800247c <complet+0x17c>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d11b      	bne.n	8002352 <complet+0x52>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 800231a:	2300      	movs	r3, #0
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
 800231e:	e014      	b.n	800234a <complet+0x4a>
			if (microrl_actions[i].level == 0)
 8002320:	4a57      	ldr	r2, [pc, #348]	; (8002480 <complet+0x180>)
 8002322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002324:	019b      	lsls	r3, r3, #6
 8002326:	4413      	add	r3, r2
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10a      	bne.n	8002344 <complet+0x44>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002336:	0192      	lsls	r2, r2, #6
 8002338:	4951      	ldr	r1, [pc, #324]	; (8002480 <complet+0x180>)
 800233a:	440a      	add	r2, r1
 800233c:	3204      	adds	r2, #4
 800233e:	494f      	ldr	r1, [pc, #316]	; (800247c <complet+0x17c>)
 8002340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002346:	3301      	adds	r3, #1
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	2b0e      	cmp	r3, #14
 800234e:	d9e7      	bls.n	8002320 <complet+0x20>
 8002350:	e08a      	b.n	8002468 <complet+0x168>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002358:	3b01      	subs	r3, #1
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	4413      	add	r3, r2
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 800236c:	2300      	movs	r3, #0
 800236e:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
 8002374:	e072      	b.n	800245c <complet+0x15c>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	e061      	b.n	8002440 <complet+0x140>
			{
				tokens_found = false;
 800237c:	2300      	movs	r3, #0
 800237e:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 8002380:	4a3f      	ldr	r2, [pc, #252]	; (8002480 <complet+0x180>)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	019b      	lsls	r3, r3, #6
 8002386:	4413      	add	r3, r2
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002392:	d001      	beq.n	8002398 <complet+0x98>
					synonym_level = current_level; // save the synonym level
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239e:	d003      	beq.n	80023a8 <complet+0xa8>
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	db4f      	blt.n	8002448 <complet+0x148>
					break;
				if (current_level == i)
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d101      	bne.n	80023b4 <complet+0xb4>
					last_main_synonym = n;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d122      	bne.n	8002404 <complet+0x104>
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	019b      	lsls	r3, r3, #6
 80023c2:	4a2f      	ldr	r2, [pc, #188]	; (8002480 <complet+0x180>)
 80023c4:	4413      	add	r3, r2
 80023c6:	3304      	adds	r3, #4
 80023c8:	6939      	ldr	r1, [r7, #16]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f00b fd2c 	bl	800de28 <strstr>
 80023d0:	4602      	mov	r2, r0
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	019b      	lsls	r3, r3, #6
 80023d6:	492a      	ldr	r1, [pc, #168]	; (8002480 <complet+0x180>)
 80023d8:	440b      	add	r3, r1
 80023da:	3304      	adds	r3, #4
 80023dc:	429a      	cmp	r2, r3
 80023de:	d111      	bne.n	8002404 <complet+0x104>
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d10d      	bne.n	8002404 <complet+0x104>
										(i == synonym_level))
				{
					tokens_found = true;
 80023e8:	2301      	movs	r3, #1
 80023ea:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	0192      	lsls	r2, r2, #6
 80023f6:	4922      	ldr	r1, [pc, #136]	; (8002480 <complet+0x180>)
 80023f8:	440a      	add	r2, r1
 80023fa:	3204      	adds	r2, #4
 80023fc:	491f      	ldr	r1, [pc, #124]	; (800247c <complet+0x17c>)
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002402:	e01a      	b.n	800243a <complet+0x13a>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4413      	add	r3, r2
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	019b      	lsls	r3, r3, #6
 8002412:	491b      	ldr	r1, [pc, #108]	; (8002480 <complet+0x180>)
 8002414:	440b      	add	r3, r1
 8002416:	3304      	adds	r3, #4
 8002418:	4619      	mov	r1, r3
 800241a:	4610      	mov	r0, r2
 800241c:	f7fd fe98 	bl	8000150 <strcmp>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <complet+0x13a>
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	429a      	cmp	r2, r3
 800242c:	d105      	bne.n	800243a <complet+0x13a>
				{
					last_main_synonym++;
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	3301      	adds	r3, #1
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 8002434:	2301      	movs	r3, #1
 8002436:	77fb      	strb	r3, [r7, #31]
					break;
 8002438:	e007      	b.n	800244a <complet+0x14a>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b0e      	cmp	r3, #14
 8002444:	d99a      	bls.n	800237c <complet+0x7c>
 8002446:	e000      	b.n	800244a <complet+0x14a>
					break;
 8002448:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 800244a:	7ffb      	ldrb	r3, [r7, #31]
 800244c:	f083 0301 	eor.w	r3, r3, #1
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d107      	bne.n	8002466 <complet+0x166>
		for (int i = 0; i < argc; i++)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	3301      	adds	r3, #1
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	429a      	cmp	r2, r3
 8002462:	db88      	blt.n	8002376 <complet+0x76>
 8002464:	e000      	b.n	8002468 <complet+0x168>
				break;
 8002466:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <complet+0x17c>)
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	2100      	movs	r1, #0
 800246e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 8002472:	4b02      	ldr	r3, [pc, #8]	; (800247c <complet+0x17c>)
}
 8002474:	4618      	mov	r0, r3
 8002476:	3730      	adds	r7, #48	; 0x30
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20002498 	.word	0x20002498
 8002480:	0800e1b0 	.word	0x0800e1b0

08002484 <sigint>:
#endif


void sigint (void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <sigint+0x48>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]


	print (ENDL);
 8002490:	480f      	ldr	r0, [pc, #60]	; (80024d0 <sigint+0x4c>)
 8002492:	f7ff fcf1 	bl	8001e78 <print>
	print ("^C catched!");
 8002496:	480f      	ldr	r0, [pc, #60]	; (80024d4 <sigint+0x50>)
 8002498:	f7ff fcee 	bl	8001e78 <print>
	int i = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 80024a0:	e009      	b.n	80024b6 <sigint+0x32>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <sigint+0x54>)
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	4a08      	ldr	r2, [pc, #32]	; (80024d0 <sigint+0x4c>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	4619      	mov	r1, r3
 80024b2:	f7ff fad3 	bl	8001a5c <microrl_insert_char>
	while (ENTER[i])
 80024b6:	4a06      	ldr	r2, [pc, #24]	; (80024d0 <sigint+0x4c>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1ef      	bne.n	80024a2 <sigint+0x1e>
}
 80024c2:	bf00      	nop
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200001b0 	.word	0x200001b0
 80024d0:	0800df5c 	.word	0x0800df5c
 80024d4:	0800e000 	.word	0x0800e000
 80024d8:	20000008 	.word	0x20000008

080024dc <init_microrl>:

void init_microrl(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <init_microrl+0x38>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	490c      	ldr	r1, [pc, #48]	; (8002518 <init_microrl+0x3c>)
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe ff7a 	bl	80013e0 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <init_microrl+0x38>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	490a      	ldr	r1, [pc, #40]	; (800251c <init_microrl+0x40>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe ffc0 	bl	8001478 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <init_microrl+0x38>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4908      	ldr	r1, [pc, #32]	; (8002520 <init_microrl+0x44>)
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe ffac 	bl	800145c <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <init_microrl+0x38>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4906      	ldr	r1, [pc, #24]	; (8002524 <init_microrl+0x48>)
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe ffc2 	bl	8001494 <microrl_set_sigint_callback>
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000008 	.word	0x20000008
 8002518:	08001e79 	.word	0x08001e79
 800251c:	0800216d 	.word	0x0800216d
 8002520:	08002301 	.word	0x08002301
 8002524:	08002485 	.word	0x08002485

08002528 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 8002532:	4805      	ldr	r0, [pc, #20]	; (8002548 <clear_screen+0x20>)
 8002534:	f7ff fca0 	bl	8001e78 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8002538:	4804      	ldr	r0, [pc, #16]	; (800254c <clear_screen+0x24>)
 800253a:	f7ff fc9d 	bl	8001e78 <print>
	return 0;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	0800e00c 	.word	0x0800e00c
 800254c:	0800e014 	.word	0x0800e014

08002550 <set_CDC_ready>:


void set_CDC_ready(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <set_CDC_ready+0x14>)
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
}
 800255a:	bf00      	nop
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	200001af 	.word	0x200001af

08002568 <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <color_toggle+0x30>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f083 0301 	eor.w	r3, r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b04      	ldr	r3, [pc, #16]	; (8002598 <color_toggle+0x30>)
 8002588:	701a      	strb	r2, [r3, #0]
	return 0;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	2000000c 	.word	0x2000000c

0800259c <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
	color_out = 1;
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <color_on+0x28>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 80025ac:	2105      	movs	r1, #5
 80025ae:	4806      	ldr	r0, [pc, #24]	; (80025c8 <color_on+0x2c>)
 80025b0:	f7ff fcce 	bl	8001f50 <print_color>
	print(ENDL);
 80025b4:	4805      	ldr	r0, [pc, #20]	; (80025cc <color_on+0x30>)
 80025b6:	f7ff fc5f 	bl	8001e78 <print>
	return 0;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	2000000c 	.word	0x2000000c
 80025c8:	0800e018 	.word	0x0800e018
 80025cc:	0800df5c 	.word	0x0800df5c

080025d0 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
	color_out = 0;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <color_off+0x28>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 80025e0:	4806      	ldr	r0, [pc, #24]	; (80025fc <color_off+0x2c>)
 80025e2:	f7ff fc49 	bl	8001e78 <print>
	print(ENDL);
 80025e6:	4806      	ldr	r0, [pc, #24]	; (8002600 <color_off+0x30>)
 80025e8:	f7ff fc46 	bl	8001e78 <print>
	return 0;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	2000000c 	.word	0x2000000c
 80025fc:	0800e02c 	.word	0x0800e02c
 8002600:	0800df5c 	.word	0x0800df5c

08002604 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
	if (color_out)
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <color_show+0x34>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d004      	beq.n	8002620 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8002616:	2105      	movs	r1, #5
 8002618:	4808      	ldr	r0, [pc, #32]	; (800263c <color_show+0x38>)
 800261a:	f7ff fc99 	bl	8001f50 <print_color>
 800261e:	e002      	b.n	8002626 <color_show+0x22>
	else
		print ("Color output is OFF");
 8002620:	4807      	ldr	r0, [pc, #28]	; (8002640 <color_show+0x3c>)
 8002622:	f7ff fc29 	bl	8001e78 <print>
	print(ENDL);
 8002626:	4807      	ldr	r0, [pc, #28]	; (8002644 <color_show+0x40>)
 8002628:	f7ff fc26 	bl	8001e78 <print>
	return 0;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2000000c 	.word	0x2000000c
 800263c:	0800e018 	.word	0x0800e018
 8002640:	0800e02c 	.word	0x0800e02c
 8002644:	0800df5c 	.word	0x0800df5c

08002648 <nema_toggle>:


int nema_toggle 	(int argc, const char * const * argv)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
	nema_out ^= 1;
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <nema_toggle+0x30>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	f083 0301 	eor.w	r3, r3, #1
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4b04      	ldr	r3, [pc, #16]	; (8002678 <nema_toggle+0x30>)
 8002668:	701a      	strb	r2, [r3, #0]
	return 0;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	200001b0 	.word	0x200001b0

0800267c <nema_on>:

int nema_on 		(int argc, const char * const * argv)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
	nema_out = 1;
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <nema_on+0x28>)
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
	print_color ("NEMA output is ON", C_GREEN);
 800268c:	2105      	movs	r1, #5
 800268e:	4806      	ldr	r0, [pc, #24]	; (80026a8 <nema_on+0x2c>)
 8002690:	f7ff fc5e 	bl	8001f50 <print_color>
	print(ENDL);
 8002694:	4805      	ldr	r0, [pc, #20]	; (80026ac <nema_on+0x30>)
 8002696:	f7ff fbef 	bl	8001e78 <print>
	return 0;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200001b0 	.word	0x200001b0
 80026a8:	0800e040 	.word	0x0800e040
 80026ac:	0800df5c 	.word	0x0800df5c

080026b0 <nema_off>:

int nema_off 		(int argc, const char * const * argv)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
	nema_out = 0;
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <nema_off+0x28>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
	print ("NEM output is OFF");
 80026c0:	4806      	ldr	r0, [pc, #24]	; (80026dc <nema_off+0x2c>)
 80026c2:	f7ff fbd9 	bl	8001e78 <print>
	print(ENDL);
 80026c6:	4806      	ldr	r0, [pc, #24]	; (80026e0 <nema_off+0x30>)
 80026c8:	f7ff fbd6 	bl	8001e78 <print>
	return 0;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200001b0 	.word	0x200001b0
 80026dc:	0800e054 	.word	0x0800e054
 80026e0:	0800df5c 	.word	0x0800df5c

080026e4 <vfd>:

int vfd (int argc, const char * const * argv)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
	for (int i = 1; i < argc; i++)
 80026ee:	2301      	movs	r3, #1
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e028      	b.n	8002746 <vfd+0x62>
	{
		uint16_t temp = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	81fb      	strh	r3, [r7, #14]
		char * pchar = (char*)argv[i];
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	613b      	str	r3, [r7, #16]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <vfd+0x74>)
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	f107 010e 	add.w	r1, r7, #14
 800270c:	2300      	movs	r3, #0
 800270e:	2264      	movs	r2, #100	; 0x64
 8002710:	f008 fb2a 	bl	800ad68 <xQueueGenericSend>
		while (*pchar)
 8002714:	e010      	b.n	8002738 <vfd+0x54>
		{
			temp = get_char(*(pchar++));
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	613a      	str	r2, [r7, #16]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fa32 	bl	8002b88 <get_char>
 8002724:	4603      	mov	r3, r0
 8002726:	81fb      	strh	r3, [r7, #14]
			xQueueSendToBack(qVFDHandle, &temp, 100);
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <vfd+0x74>)
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	f107 010e 	add.w	r1, r7, #14
 8002730:	2300      	movs	r3, #0
 8002732:	2264      	movs	r2, #100	; 0x64
 8002734:	f008 fb18 	bl	800ad68 <xQueueGenericSend>
		while (*pchar)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1ea      	bne.n	8002716 <vfd+0x32>
	for (int i = 1; i < argc; i++)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	dbd2      	blt.n	80026f4 <vfd+0x10>
		}
	}
	return 0;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	2000248c 	.word	0x2000248c

0800275c <show_encoder>:


int show_encoder (int argc, const char * const * argv)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]

	uint32_t buf = encoder_value;
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <show_encoder+0x78>)
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	617b      	str	r3, [r7, #20]
	char str [8];

	for (int i = 0; i < 5; i++)
 800276c:	2300      	movs	r3, #0
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	e01d      	b.n	80027ae <show_encoder+0x52>
	{
		str[4 - i] = buf % 10 + '0';
 8002772:	6979      	ldr	r1, [r7, #20]
 8002774:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <show_encoder+0x7c>)
 8002776:	fba3 2301 	umull	r2, r3, r3, r1
 800277a:	08da      	lsrs	r2, r3, #3
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	1aca      	subs	r2, r1, r3
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f1c3 0304 	rsb	r3, r3, #4
 800278e:	3230      	adds	r2, #48	; 0x30
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f107 0118 	add.w	r1, r7, #24
 8002796:	440b      	add	r3, r1
 8002798:	f803 2c10 	strb.w	r2, [r3, #-16]
		buf /= 10;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <show_encoder+0x7c>)
 80027a0:	fba2 2303 	umull	r2, r3, r2, r3
 80027a4:	08db      	lsrs	r3, r3, #3
 80027a6:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 5; i++)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	3301      	adds	r3, #1
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	ddde      	ble.n	8002772 <show_encoder+0x16>
	}
	str[5] = '\r';
 80027b4:	230d      	movs	r3, #13
 80027b6:	737b      	strb	r3, [r7, #13]
	str[6] = '\n';
 80027b8:	230a      	movs	r3, #10
 80027ba:	73bb      	strb	r3, [r7, #14]
	str[7] = '\0';
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]
	print(str);
 80027c0:	f107 0308 	add.w	r3, r7, #8
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fb57 	bl	8001e78 <print>
	return 0;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	200001ac 	.word	0x200001ac
 80027d8:	cccccccd 	.word	0xcccccccd

080027dc <get_nema>:


bool get_nema(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
	return nema_out;
 80027e0:	4b02      	ldr	r3, [pc, #8]	; (80027ec <get_nema+0x10>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	200001b0 	.word	0x200001b0

080027f0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80027f4:	4b17      	ldr	r3, [pc, #92]	; (8002854 <MX_SPI2_Init+0x64>)
 80027f6:	4a18      	ldr	r2, [pc, #96]	; (8002858 <MX_SPI2_Init+0x68>)
 80027f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <MX_SPI2_Init+0x64>)
 80027fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002800:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <MX_SPI2_Init+0x64>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <MX_SPI2_Init+0x64>)
 800280a:	2200      	movs	r2, #0
 800280c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <MX_SPI2_Init+0x64>)
 8002810:	2202      	movs	r2, #2
 8002812:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <MX_SPI2_Init+0x64>)
 8002816:	2201      	movs	r2, #1
 8002818:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <MX_SPI2_Init+0x64>)
 800281c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002820:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <MX_SPI2_Init+0x64>)
 8002824:	2218      	movs	r2, #24
 8002826:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <MX_SPI2_Init+0x64>)
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <MX_SPI2_Init+0x64>)
 8002830:	2200      	movs	r2, #0
 8002832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <MX_SPI2_Init+0x64>)
 8002836:	2200      	movs	r2, #0
 8002838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <MX_SPI2_Init+0x64>)
 800283c:	220a      	movs	r2, #10
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002840:	4804      	ldr	r0, [pc, #16]	; (8002854 <MX_SPI2_Init+0x64>)
 8002842:	f002 ffa3 	bl	800578c <HAL_SPI_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800284c:	f7fe fa78 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20002578 	.word	0x20002578
 8002858:	40003800 	.word	0x40003800

0800285c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_SPI_MspInit+0x8c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d131      	bne.n	80028e0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_SPI_MspInit+0x90>)
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	4a1a      	ldr	r2, [pc, #104]	; (80028ec <HAL_SPI_MspInit+0x90>)
 8002882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002886:	61d3      	str	r3, [r2, #28]
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <HAL_SPI_MspInit+0x90>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002894:	4b15      	ldr	r3, [pc, #84]	; (80028ec <HAL_SPI_MspInit+0x90>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	4a14      	ldr	r2, [pc, #80]	; (80028ec <HAL_SPI_MspInit+0x90>)
 800289a:	f043 0308 	orr.w	r3, r3, #8
 800289e:	6193      	str	r3, [r2, #24]
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_SPI_MspInit+0x90>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80028ac:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80028b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028b6:	2303      	movs	r3, #3
 80028b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ba:	f107 0310 	add.w	r3, r7, #16
 80028be:	4619      	mov	r1, r3
 80028c0:	480b      	ldr	r0, [pc, #44]	; (80028f0 <HAL_SPI_MspInit+0x94>)
 80028c2:	f000 fbad 	bl	8003020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80028c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d4:	f107 0310 	add.w	r3, r7, #16
 80028d8:	4619      	mov	r1, r3
 80028da:	4805      	ldr	r0, [pc, #20]	; (80028f0 <HAL_SPI_MspInit+0x94>)
 80028dc:	f000 fba0 	bl	8003020 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80028e0:	bf00      	nop
 80028e2:	3720      	adds	r7, #32
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40003800 	.word	0x40003800
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40010c00 	.word	0x40010c00

080028f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_MspInit+0x68>)
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	4a17      	ldr	r2, [pc, #92]	; (800295c <HAL_MspInit+0x68>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6193      	str	r3, [r2, #24]
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_MspInit+0x68>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_MspInit+0x68>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4a11      	ldr	r2, [pc, #68]	; (800295c <HAL_MspInit+0x68>)
 8002918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291c:	61d3      	str	r3, [r2, #28]
 800291e:	4b0f      	ldr	r3, [pc, #60]	; (800295c <HAL_MspInit+0x68>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	210f      	movs	r1, #15
 800292e:	f06f 0001 	mvn.w	r0, #1
 8002932:	f000 fa9a 	bl	8002e6a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_MspInit+0x6c>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_MspInit+0x6c>)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000
 8002960:	40010000 	.word	0x40010000

08002964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	; 0x30
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002974:	2200      	movs	r2, #0
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	2019      	movs	r0, #25
 800297a:	f000 fa76 	bl	8002e6a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800297e:	2019      	movs	r0, #25
 8002980:	f000 fa8f 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002984:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <HAL_InitTick+0x9c>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	4a1d      	ldr	r2, [pc, #116]	; (8002a00 <HAL_InitTick+0x9c>)
 800298a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800298e:	6193      	str	r3, [r2, #24]
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_InitTick+0x9c>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800299c:	f107 0210 	add.w	r2, r7, #16
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f002 fdec 	bl	8005584 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80029ac:	f002 fdd6 	bl	800555c <HAL_RCC_GetPCLK2Freq>
 80029b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <HAL_InitTick+0xa0>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0c9b      	lsrs	r3, r3, #18
 80029bc:	3b01      	subs	r3, #1
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_InitTick+0xa4>)
 80029c2:	4a12      	ldr	r2, [pc, #72]	; (8002a0c <HAL_InitTick+0xa8>)
 80029c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_InitTick+0xa4>)
 80029c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80029ce:	4a0e      	ldr	r2, [pc, #56]	; (8002a08 <HAL_InitTick+0xa4>)
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_InitTick+0xa4>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_InitTick+0xa4>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80029e0:	4809      	ldr	r0, [pc, #36]	; (8002a08 <HAL_InitTick+0xa4>)
 80029e2:	f003 f939 	bl	8005c58 <HAL_TIM_Base_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d104      	bne.n	80029f6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80029ec:	4806      	ldr	r0, [pc, #24]	; (8002a08 <HAL_InitTick+0xa4>)
 80029ee:	f003 f98b 	bl	8005d08 <HAL_TIM_Base_Start_IT>
 80029f2:	4603      	mov	r3, r0
 80029f4:	e000      	b.n	80029f8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3730      	adds	r7, #48	; 0x30
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000
 8002a04:	431bde83 	.word	0x431bde83
 8002a08:	200025d0 	.word	0x200025d0
 8002a0c:	40012c00 	.word	0x40012c00

08002a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <NMI_Handler+0x4>

08002a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a1a:	e7fe      	b.n	8002a1a <HardFault_Handler+0x4>

08002a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a20:	e7fe      	b.n	8002a20 <MemManage_Handler+0x4>

08002a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a26:	e7fe      	b.n	8002a26 <BusFault_Handler+0x4>

08002a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <UsageFault_Handler+0x4>

08002a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f000 fcba 	bl	80033b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a44:	bf00      	nop
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002a4e:	f000 fe06 	bl	800365e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20003334 	.word	0x20003334

08002a5c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a60:	4802      	ldr	r0, [pc, #8]	; (8002a6c <TIM1_UP_IRQHandler+0x10>)
 8002a62:	f003 f9a3 	bl	8005dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200025d0 	.word	0x200025d0

08002a70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a74:	4802      	ldr	r0, [pc, #8]	; (8002a80 <USART2_IRQHandler+0x10>)
 8002a76:	f003 fbb7 	bl	80061e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20002618 	.word	0x20002618

08002a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002a96:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <MX_USART2_UART_Init+0x50>)
 8002a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002a9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aae:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ac6:	4805      	ldr	r0, [pc, #20]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002ac8:	f003 fb10 	bl	80060ec <HAL_UART_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ad2:	f7fe f935 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20002618 	.word	0x20002618
 8002ae0:	40004400 	.word	0x40004400

08002ae4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	f107 0310 	add.w	r3, r7, #16
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1f      	ldr	r2, [pc, #124]	; (8002b7c <HAL_UART_MspInit+0x98>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d137      	bne.n	8002b74 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b04:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <HAL_UART_MspInit+0x9c>)
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <HAL_UART_MspInit+0x9c>)
 8002b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0e:	61d3      	str	r3, [r2, #28]
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_UART_MspInit+0x9c>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1c:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <HAL_UART_MspInit+0x9c>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <HAL_UART_MspInit+0x9c>)
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	6193      	str	r3, [r2, #24]
 8002b28:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_UART_MspInit+0x9c>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b34:	2304      	movs	r3, #4
 8002b36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b40:	f107 0310 	add.w	r3, r7, #16
 8002b44:	4619      	mov	r1, r3
 8002b46:	480f      	ldr	r0, [pc, #60]	; (8002b84 <HAL_UART_MspInit+0xa0>)
 8002b48:	f000 fa6a 	bl	8003020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b58:	f107 0310 	add.w	r3, r7, #16
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4809      	ldr	r0, [pc, #36]	; (8002b84 <HAL_UART_MspInit+0xa0>)
 8002b60:	f000 fa5e 	bl	8003020 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002b64:	2200      	movs	r2, #0
 8002b66:	2105      	movs	r1, #5
 8002b68:	2026      	movs	r0, #38	; 0x26
 8002b6a:	f000 f97e 	bl	8002e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b6e:	2026      	movs	r0, #38	; 0x26
 8002b70:	f000 f997 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b74:	bf00      	nop
 8002b76:	3720      	adds	r7, #32
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40004400 	.word	0x40004400
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40010800 	.word	0x40010800

08002b88 <get_char>:
const uint8_t ALPHAS = (sizeof(vfd_alpha)/sizeof(vfd_alpha[0]));
const uint8_t ALPHAR = (sizeof(vfd_alpha_ru)/sizeof(vfd_alpha_ru[0]));
const uint8_t SPECIAL = (sizeof(vfd_special)/sizeof(vfd_special[0]));

uint16_t get_char(char input)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
	if ('0' <= input && input <= '9')
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	2b2f      	cmp	r3, #47	; 0x2f
 8002b96:	d908      	bls.n	8002baa <get_char+0x22>
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	2b39      	cmp	r3, #57	; 0x39
 8002b9c:	d805      	bhi.n	8002baa <get_char+0x22>
		return vfd_digits[input - '0'];
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	3b30      	subs	r3, #48	; 0x30
 8002ba2:	4a26      	ldr	r2, [pc, #152]	; (8002c3c <get_char+0xb4>)
 8002ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ba8:	e042      	b.n	8002c30 <get_char+0xa8>
	if ('a' <= input && input <= 'z')
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	2b60      	cmp	r3, #96	; 0x60
 8002bae:	d908      	bls.n	8002bc2 <get_char+0x3a>
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	2b7a      	cmp	r3, #122	; 0x7a
 8002bb4:	d805      	bhi.n	8002bc2 <get_char+0x3a>
		return vfd_alpha[input - 'a'];
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	3b61      	subs	r3, #97	; 0x61
 8002bba:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <get_char+0xb8>)
 8002bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bc0:	e036      	b.n	8002c30 <get_char+0xa8>
	if ('A' <= input && input <= 'Z')
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d908      	bls.n	8002bda <get_char+0x52>
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	2b5a      	cmp	r3, #90	; 0x5a
 8002bcc:	d805      	bhi.n	8002bda <get_char+0x52>
		return vfd_alpha[input - 'A'];
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	3b41      	subs	r3, #65	; 0x41
 8002bd2:	4a1b      	ldr	r2, [pc, #108]	; (8002c40 <get_char+0xb8>)
 8002bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bd8:	e02a      	b.n	8002c30 <get_char+0xa8>
	if (192 <= input && input <= 223)
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	2bbf      	cmp	r3, #191	; 0xbf
 8002bde:	d908      	bls.n	8002bf2 <get_char+0x6a>
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2bdf      	cmp	r3, #223	; 0xdf
 8002be4:	d805      	bhi.n	8002bf2 <get_char+0x6a>
		return vfd_alpha_ru[input - 192];
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	3bc0      	subs	r3, #192	; 0xc0
 8002bea:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <get_char+0xbc>)
 8002bec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bf0:	e01e      	b.n	8002c30 <get_char+0xa8>
	if (224 <= input && input <= 255)
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	2bdf      	cmp	r3, #223	; 0xdf
 8002bf6:	d905      	bls.n	8002c04 <get_char+0x7c>
		return vfd_alpha_ru[input - 224];
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	3be0      	subs	r3, #224	; 0xe0
 8002bfc:	4a11      	ldr	r2, [pc, #68]	; (8002c44 <get_char+0xbc>)
 8002bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c02:	e015      	b.n	8002c30 <get_char+0xa8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	e00e      	b.n	8002c28 <get_char+0xa0>
		if (vfd_special_char[i] == input)
 8002c0a:	4a0f      	ldr	r2, [pc, #60]	; (8002c48 <get_char+0xc0>)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	79fa      	ldrb	r2, [r7, #7]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d104      	bne.n	8002c22 <get_char+0x9a>
			return vfd_special[i];
 8002c18:	4a0c      	ldr	r2, [pc, #48]	; (8002c4c <get_char+0xc4>)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c20:	e006      	b.n	8002c30 <get_char+0xa8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	3301      	adds	r3, #1
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d9ed      	bls.n	8002c0a <get_char+0x82>
	return 0;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	0800e648 	.word	0x0800e648
 8002c40:	0800e65c 	.word	0x0800e65c
 8002c44:	0800e690 	.word	0x0800e690
 8002c48:	0800e6f4 	.word	0x0800e6f4
 8002c4c:	0800e6d0 	.word	0x0800e6d0

08002c50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c50:	480c      	ldr	r0, [pc, #48]	; (8002c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c52:	490d      	ldr	r1, [pc, #52]	; (8002c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c58:	e002      	b.n	8002c60 <LoopCopyDataInit>

08002c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5e:	3304      	adds	r3, #4

08002c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c64:	d3f9      	bcc.n	8002c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c68:	4c0a      	ldr	r4, [pc, #40]	; (8002c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c6c:	e001      	b.n	8002c72 <LoopFillZerobss>

08002c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c70:	3204      	adds	r2, #4

08002c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c74:	d3fb      	bcc.n	8002c6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c76:	f7ff ff05 	bl	8002a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c7a:	f00b f881 	bl	800dd80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c7e:	f7fd ffdf 	bl	8000c40 <main>
  bx lr
 8002c82:	4770      	bx	lr
  ldr r0, =_sdata
 8002c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c88:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002c8c:	0800e710 	.word	0x0800e710
  ldr r2, =_sbss
 8002c90:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8002c94:	20003620 	.word	0x20003620

08002c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC1_2_IRQHandler>
	...

08002c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <HAL_Init+0x28>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <HAL_Init+0x28>)
 8002ca6:	f043 0310 	orr.w	r3, r3, #16
 8002caa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cac:	2003      	movs	r0, #3
 8002cae:	f000 f8d1 	bl	8002e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7ff fe56 	bl	8002964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb8:	f7ff fe1c 	bl	80028f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40022000 	.word	0x40022000

08002cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_IncTick+0x1c>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_IncTick+0x20>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a03      	ldr	r2, [pc, #12]	; (8002ce8 <HAL_IncTick+0x20>)
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	20000018 	.word	0x20000018
 8002ce8:	2000265c 	.word	0x2000265c

08002cec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf0:	4b02      	ldr	r3, [pc, #8]	; (8002cfc <HAL_GetTick+0x10>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	2000265c 	.word	0x2000265c

08002d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <__NVIC_SetPriorityGrouping+0x44>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d32:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <__NVIC_SetPriorityGrouping+0x44>)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	60d3      	str	r3, [r2, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <__NVIC_GetPriorityGrouping+0x18>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	f003 0307 	and.w	r3, r3, #7
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	db0b      	blt.n	8002d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	4906      	ldr	r1, [pc, #24]	; (8002d98 <__NVIC_EnableIRQ+0x34>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2001      	movs	r0, #1
 8002d86:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100

08002d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	db0a      	blt.n	8002dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	490c      	ldr	r1, [pc, #48]	; (8002de8 <__NVIC_SetPriority+0x4c>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc4:	e00a      	b.n	8002ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4908      	ldr	r1, [pc, #32]	; (8002dec <__NVIC_SetPriority+0x50>)
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	3b04      	subs	r3, #4
 8002dd4:	0112      	lsls	r2, r2, #4
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	440b      	add	r3, r1
 8002dda:	761a      	strb	r2, [r3, #24]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	e000e100 	.word	0xe000e100
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f1c3 0307 	rsb	r3, r3, #7
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	bf28      	it	cs
 8002e0e:	2304      	movcs	r3, #4
 8002e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d902      	bls.n	8002e20 <NVIC_EncodePriority+0x30>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3b03      	subs	r3, #3
 8002e1e:	e000      	b.n	8002e22 <NVIC_EncodePriority+0x32>
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	401a      	ands	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e38:	f04f 31ff 	mov.w	r1, #4294967295
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	43d9      	mvns	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	4313      	orrs	r3, r2
         );
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	; 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ff4f 	bl	8002d00 <__NVIC_SetPriorityGrouping>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b086      	sub	sp, #24
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e7c:	f7ff ff64 	bl	8002d48 <__NVIC_GetPriorityGrouping>
 8002e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	6978      	ldr	r0, [r7, #20]
 8002e88:	f7ff ffb2 	bl	8002df0 <NVIC_EncodePriority>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff81 	bl	8002d9c <__NVIC_SetPriority>
}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ff57 	bl	8002d64 <__NVIC_EnableIRQ>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d008      	beq.n	8002ee6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e020      	b.n	8002f28 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 020e 	bic.w	r2, r2, #14
 8002ef4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0e:	2101      	movs	r1, #1
 8002f10:	fa01 f202 	lsl.w	r2, r1, r2
 8002f14:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr
	...

08002f34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d005      	beq.n	8002f56 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
 8002f54:	e051      	b.n	8002ffa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 020e 	bic.w	r2, r2, #14
 8002f64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a22      	ldr	r2, [pc, #136]	; (8003004 <HAL_DMA_Abort_IT+0xd0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d029      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0xa0>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a20      	ldr	r2, [pc, #128]	; (8003008 <HAL_DMA_Abort_IT+0xd4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d022      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x9c>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1f      	ldr	r2, [pc, #124]	; (800300c <HAL_DMA_Abort_IT+0xd8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d01a      	beq.n	8002fca <HAL_DMA_Abort_IT+0x96>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1d      	ldr	r2, [pc, #116]	; (8003010 <HAL_DMA_Abort_IT+0xdc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d012      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0x90>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1c      	ldr	r2, [pc, #112]	; (8003014 <HAL_DMA_Abort_IT+0xe0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00a      	beq.n	8002fbe <HAL_DMA_Abort_IT+0x8a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <HAL_DMA_Abort_IT+0xe4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d102      	bne.n	8002fb8 <HAL_DMA_Abort_IT+0x84>
 8002fb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fb6:	e00e      	b.n	8002fd6 <HAL_DMA_Abort_IT+0xa2>
 8002fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fbc:	e00b      	b.n	8002fd6 <HAL_DMA_Abort_IT+0xa2>
 8002fbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fc2:	e008      	b.n	8002fd6 <HAL_DMA_Abort_IT+0xa2>
 8002fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc8:	e005      	b.n	8002fd6 <HAL_DMA_Abort_IT+0xa2>
 8002fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fce:	e002      	b.n	8002fd6 <HAL_DMA_Abort_IT+0xa2>
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	e000      	b.n	8002fd6 <HAL_DMA_Abort_IT+0xa2>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	4a11      	ldr	r2, [pc, #68]	; (800301c <HAL_DMA_Abort_IT+0xe8>)
 8002fd8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	4798      	blx	r3
    } 
  }
  return status;
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40020008 	.word	0x40020008
 8003008:	4002001c 	.word	0x4002001c
 800300c:	40020030 	.word	0x40020030
 8003010:	40020044 	.word	0x40020044
 8003014:	40020058 	.word	0x40020058
 8003018:	4002006c 	.word	0x4002006c
 800301c:	40020000 	.word	0x40020000

08003020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003020:	b480      	push	{r7}
 8003022:	b08b      	sub	sp, #44	; 0x2c
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800302a:	2300      	movs	r3, #0
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003032:	e169      	b.n	8003308 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003034:	2201      	movs	r2, #1
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	429a      	cmp	r2, r3
 800304e:	f040 8158 	bne.w	8003302 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4a9a      	ldr	r2, [pc, #616]	; (80032c0 <HAL_GPIO_Init+0x2a0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d05e      	beq.n	800311a <HAL_GPIO_Init+0xfa>
 800305c:	4a98      	ldr	r2, [pc, #608]	; (80032c0 <HAL_GPIO_Init+0x2a0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d875      	bhi.n	800314e <HAL_GPIO_Init+0x12e>
 8003062:	4a98      	ldr	r2, [pc, #608]	; (80032c4 <HAL_GPIO_Init+0x2a4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d058      	beq.n	800311a <HAL_GPIO_Init+0xfa>
 8003068:	4a96      	ldr	r2, [pc, #600]	; (80032c4 <HAL_GPIO_Init+0x2a4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d86f      	bhi.n	800314e <HAL_GPIO_Init+0x12e>
 800306e:	4a96      	ldr	r2, [pc, #600]	; (80032c8 <HAL_GPIO_Init+0x2a8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d052      	beq.n	800311a <HAL_GPIO_Init+0xfa>
 8003074:	4a94      	ldr	r2, [pc, #592]	; (80032c8 <HAL_GPIO_Init+0x2a8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d869      	bhi.n	800314e <HAL_GPIO_Init+0x12e>
 800307a:	4a94      	ldr	r2, [pc, #592]	; (80032cc <HAL_GPIO_Init+0x2ac>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d04c      	beq.n	800311a <HAL_GPIO_Init+0xfa>
 8003080:	4a92      	ldr	r2, [pc, #584]	; (80032cc <HAL_GPIO_Init+0x2ac>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d863      	bhi.n	800314e <HAL_GPIO_Init+0x12e>
 8003086:	4a92      	ldr	r2, [pc, #584]	; (80032d0 <HAL_GPIO_Init+0x2b0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d046      	beq.n	800311a <HAL_GPIO_Init+0xfa>
 800308c:	4a90      	ldr	r2, [pc, #576]	; (80032d0 <HAL_GPIO_Init+0x2b0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d85d      	bhi.n	800314e <HAL_GPIO_Init+0x12e>
 8003092:	2b12      	cmp	r3, #18
 8003094:	d82a      	bhi.n	80030ec <HAL_GPIO_Init+0xcc>
 8003096:	2b12      	cmp	r3, #18
 8003098:	d859      	bhi.n	800314e <HAL_GPIO_Init+0x12e>
 800309a:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <HAL_GPIO_Init+0x80>)
 800309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a0:	0800311b 	.word	0x0800311b
 80030a4:	080030f5 	.word	0x080030f5
 80030a8:	08003107 	.word	0x08003107
 80030ac:	08003149 	.word	0x08003149
 80030b0:	0800314f 	.word	0x0800314f
 80030b4:	0800314f 	.word	0x0800314f
 80030b8:	0800314f 	.word	0x0800314f
 80030bc:	0800314f 	.word	0x0800314f
 80030c0:	0800314f 	.word	0x0800314f
 80030c4:	0800314f 	.word	0x0800314f
 80030c8:	0800314f 	.word	0x0800314f
 80030cc:	0800314f 	.word	0x0800314f
 80030d0:	0800314f 	.word	0x0800314f
 80030d4:	0800314f 	.word	0x0800314f
 80030d8:	0800314f 	.word	0x0800314f
 80030dc:	0800314f 	.word	0x0800314f
 80030e0:	0800314f 	.word	0x0800314f
 80030e4:	080030fd 	.word	0x080030fd
 80030e8:	08003111 	.word	0x08003111
 80030ec:	4a79      	ldr	r2, [pc, #484]	; (80032d4 <HAL_GPIO_Init+0x2b4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030f2:	e02c      	b.n	800314e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	623b      	str	r3, [r7, #32]
          break;
 80030fa:	e029      	b.n	8003150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	3304      	adds	r3, #4
 8003102:	623b      	str	r3, [r7, #32]
          break;
 8003104:	e024      	b.n	8003150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	3308      	adds	r3, #8
 800310c:	623b      	str	r3, [r7, #32]
          break;
 800310e:	e01f      	b.n	8003150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	330c      	adds	r3, #12
 8003116:	623b      	str	r3, [r7, #32]
          break;
 8003118:	e01a      	b.n	8003150 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d102      	bne.n	8003128 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003122:	2304      	movs	r3, #4
 8003124:	623b      	str	r3, [r7, #32]
          break;
 8003126:	e013      	b.n	8003150 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003130:	2308      	movs	r3, #8
 8003132:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	611a      	str	r2, [r3, #16]
          break;
 800313a:	e009      	b.n	8003150 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800313c:	2308      	movs	r3, #8
 800313e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	615a      	str	r2, [r3, #20]
          break;
 8003146:	e003      	b.n	8003150 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003148:	2300      	movs	r3, #0
 800314a:	623b      	str	r3, [r7, #32]
          break;
 800314c:	e000      	b.n	8003150 <HAL_GPIO_Init+0x130>
          break;
 800314e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2bff      	cmp	r3, #255	; 0xff
 8003154:	d801      	bhi.n	800315a <HAL_GPIO_Init+0x13a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	e001      	b.n	800315e <HAL_GPIO_Init+0x13e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3304      	adds	r3, #4
 800315e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2bff      	cmp	r3, #255	; 0xff
 8003164:	d802      	bhi.n	800316c <HAL_GPIO_Init+0x14c>
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	e002      	b.n	8003172 <HAL_GPIO_Init+0x152>
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	3b08      	subs	r3, #8
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	210f      	movs	r1, #15
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	fa01 f303 	lsl.w	r3, r1, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	401a      	ands	r2, r3
 8003184:	6a39      	ldr	r1, [r7, #32]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	431a      	orrs	r2, r3
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80b1 	beq.w	8003302 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031a0:	4b4d      	ldr	r3, [pc, #308]	; (80032d8 <HAL_GPIO_Init+0x2b8>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	4a4c      	ldr	r2, [pc, #304]	; (80032d8 <HAL_GPIO_Init+0x2b8>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6193      	str	r3, [r2, #24]
 80031ac:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <HAL_GPIO_Init+0x2b8>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031b8:	4a48      	ldr	r2, [pc, #288]	; (80032dc <HAL_GPIO_Init+0x2bc>)
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	3302      	adds	r3, #2
 80031c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	220f      	movs	r2, #15
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a40      	ldr	r2, [pc, #256]	; (80032e0 <HAL_GPIO_Init+0x2c0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d013      	beq.n	800320c <HAL_GPIO_Init+0x1ec>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a3f      	ldr	r2, [pc, #252]	; (80032e4 <HAL_GPIO_Init+0x2c4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00d      	beq.n	8003208 <HAL_GPIO_Init+0x1e8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a3e      	ldr	r2, [pc, #248]	; (80032e8 <HAL_GPIO_Init+0x2c8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d007      	beq.n	8003204 <HAL_GPIO_Init+0x1e4>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a3d      	ldr	r2, [pc, #244]	; (80032ec <HAL_GPIO_Init+0x2cc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d101      	bne.n	8003200 <HAL_GPIO_Init+0x1e0>
 80031fc:	2303      	movs	r3, #3
 80031fe:	e006      	b.n	800320e <HAL_GPIO_Init+0x1ee>
 8003200:	2304      	movs	r3, #4
 8003202:	e004      	b.n	800320e <HAL_GPIO_Init+0x1ee>
 8003204:	2302      	movs	r3, #2
 8003206:	e002      	b.n	800320e <HAL_GPIO_Init+0x1ee>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_GPIO_Init+0x1ee>
 800320c:	2300      	movs	r3, #0
 800320e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003210:	f002 0203 	and.w	r2, r2, #3
 8003214:	0092      	lsls	r2, r2, #2
 8003216:	4093      	lsls	r3, r2
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800321e:	492f      	ldr	r1, [pc, #188]	; (80032dc <HAL_GPIO_Init+0x2bc>)
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	089b      	lsrs	r3, r3, #2
 8003224:	3302      	adds	r3, #2
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d006      	beq.n	8003246 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003238:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	492c      	ldr	r1, [pc, #176]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	4313      	orrs	r3, r2
 8003242:	600b      	str	r3, [r1, #0]
 8003244:	e006      	b.n	8003254 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003246:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	43db      	mvns	r3, r3
 800324e:	4928      	ldr	r1, [pc, #160]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 8003250:	4013      	ands	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d006      	beq.n	800326e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003260:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	4922      	ldr	r1, [pc, #136]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
 800326c:	e006      	b.n	800327c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	43db      	mvns	r3, r3
 8003276:	491e      	ldr	r1, [pc, #120]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 8003278:	4013      	ands	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d006      	beq.n	8003296 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	4918      	ldr	r1, [pc, #96]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	608b      	str	r3, [r1, #8]
 8003294:	e006      	b.n	80032a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003296:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	43db      	mvns	r3, r3
 800329e:	4914      	ldr	r1, [pc, #80]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d021      	beq.n	80032f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032b0:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	490e      	ldr	r1, [pc, #56]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60cb      	str	r3, [r1, #12]
 80032bc:	e021      	b.n	8003302 <HAL_GPIO_Init+0x2e2>
 80032be:	bf00      	nop
 80032c0:	10320000 	.word	0x10320000
 80032c4:	10310000 	.word	0x10310000
 80032c8:	10220000 	.word	0x10220000
 80032cc:	10210000 	.word	0x10210000
 80032d0:	10120000 	.word	0x10120000
 80032d4:	10110000 	.word	0x10110000
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40010800 	.word	0x40010800
 80032e4:	40010c00 	.word	0x40010c00
 80032e8:	40011000 	.word	0x40011000
 80032ec:	40011400 	.word	0x40011400
 80032f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_GPIO_Init+0x304>)
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	4909      	ldr	r1, [pc, #36]	; (8003324 <HAL_GPIO_Init+0x304>)
 80032fe:	4013      	ands	r3, r2
 8003300:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	3301      	adds	r3, #1
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	fa22 f303 	lsr.w	r3, r2, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	f47f ae8e 	bne.w	8003034 <HAL_GPIO_Init+0x14>
  }
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	372c      	adds	r7, #44	; 0x2c
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	40010400 	.word	0x40010400

08003328 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	887b      	ldrh	r3, [r7, #2]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
 8003344:	e001      	b.n	800334a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	460b      	mov	r3, r1
 8003360:	807b      	strh	r3, [r7, #2]
 8003362:	4613      	mov	r3, r2
 8003364:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003366:	787b      	ldrb	r3, [r7, #1]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800336c:	887a      	ldrh	r2, [r7, #2]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003372:	e003      	b.n	800337c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003374:	887b      	ldrh	r3, [r7, #2]
 8003376:	041a      	lsls	r2, r3, #16
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	611a      	str	r2, [r3, #16]
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003386:	b480      	push	{r7}
 8003388:	b085      	sub	sp, #20
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	460b      	mov	r3, r1
 8003390:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003398:	887a      	ldrh	r2, [r7, #2]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4013      	ands	r3, r2
 800339e:	041a      	lsls	r2, r3, #16
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	43d9      	mvns	r1, r3
 80033a4:	887b      	ldrh	r3, [r7, #2]
 80033a6:	400b      	ands	r3, r1
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	611a      	str	r2, [r3, #16]
}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033c2:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d006      	beq.n	80033dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ce:	4a05      	ldr	r2, [pc, #20]	; (80033e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f806 	bl	80033e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40010400 	.word	0x40010400

080033e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fe:	b08b      	sub	sp, #44	; 0x2c
 8003400:	af06      	add	r7, sp, #24
 8003402:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0fd      	b.n	800360a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f00a fa02 	bl	800d82c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2203      	movs	r2, #3
 800342c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f003 fadb 	bl	80069f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	687e      	ldr	r6, [r7, #4]
 8003442:	466d      	mov	r5, sp
 8003444:	f106 0410 	add.w	r4, r6, #16
 8003448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800344a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	602b      	str	r3, [r5, #0]
 8003450:	1d33      	adds	r3, r6, #4
 8003452:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003454:	6838      	ldr	r0, [r7, #0]
 8003456:	f003 faa5 	bl	80069a4 <USB_CoreInit>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0ce      	b.n	800360a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f003 fad6 	bl	8006a24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003478:	2300      	movs	r3, #0
 800347a:	73fb      	strb	r3, [r7, #15]
 800347c:	e04c      	b.n	8003518 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	440b      	add	r3, r1
 800348e:	3301      	adds	r3, #1
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	440b      	add	r3, r1
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034a8:	7bfa      	ldrb	r2, [r7, #15]
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	b298      	uxth	r0, r3
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	440b      	add	r3, r1
 80034ba:	3336      	adds	r3, #54	; 0x36
 80034bc:	4602      	mov	r2, r0
 80034be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	440b      	add	r3, r1
 80034d0:	3303      	adds	r3, #3
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034d6:	7bfa      	ldrb	r2, [r7, #15]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	440b      	add	r3, r1
 80034e4:	3338      	adds	r3, #56	; 0x38
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	440b      	add	r3, r1
 80034f8:	333c      	adds	r3, #60	; 0x3c
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034fe:	7bfa      	ldrb	r2, [r7, #15]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	440b      	add	r3, r1
 800350c:	3340      	adds	r3, #64	; 0x40
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	3301      	adds	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	d3ad      	bcc.n	800347e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	e044      	b.n	80035b2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	f203 1369 	addw	r3, r3, #361	; 0x169
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	440b      	add	r3, r1
 800354c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003550:	7bfa      	ldrb	r2, [r7, #15]
 8003552:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	440b      	add	r3, r1
 8003562:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	440b      	add	r3, r1
 8003578:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	440b      	add	r3, r1
 800358e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	3301      	adds	r3, #1
 80035b0:	73fb      	strb	r3, [r7, #15]
 80035b2:	7bfa      	ldrb	r2, [r7, #15]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d3b5      	bcc.n	8003528 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	687e      	ldr	r6, [r7, #4]
 80035c4:	466d      	mov	r5, sp
 80035c6:	f106 0410 	add.w	r4, r6, #16
 80035ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	602b      	str	r3, [r5, #0]
 80035d2:	1d33      	adds	r3, r6, #4
 80035d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035d6:	6838      	ldr	r0, [r7, #0]
 80035d8:	f003 fa30 	bl	8006a3c <USB_DevInit>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2202      	movs	r2, #2
 80035e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e00d      	b.n	800360a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f005 fba1 	bl	8008d4a <USB_DevDisconnect>

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003612 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_PCD_Start+0x16>
 8003624:	2302      	movs	r3, #2
 8003626:	e016      	b.n	8003656 <HAL_PCD_Start+0x44>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f003 f9c5 	bl	80069c4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800363a:	2101      	movs	r1, #1
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f00a fb68 	bl	800dd12 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f005 fb75 	bl	8008d36 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b088      	sub	sp, #32
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f005 fb77 	bl	8008d5e <USB_ReadInterrupts>
 8003670:	4603      	mov	r3, r0
 8003672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800367a:	d102      	bne.n	8003682 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fb61 	bl	8003d44 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f005 fb69 	bl	8008d5e <USB_ReadInterrupts>
 800368c:	4603      	mov	r3, r0
 800368e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003696:	d112      	bne.n	80036be <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036aa:	b292      	uxth	r2, r2
 80036ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f00a f936 	bl	800d922 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80036b6:	2100      	movs	r1, #0
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f925 	bl	8003908 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f005 fb4b 	bl	8008d5e <USB_ReadInterrupts>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d2:	d10b      	bne.n	80036ec <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036dc:	b29a      	uxth	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036e6:	b292      	uxth	r2, r2
 80036e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f005 fb34 	bl	8008d5e <USB_ReadInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003700:	d10b      	bne.n	800371a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800370a:	b29a      	uxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003714:	b292      	uxth	r2, r2
 8003716:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f005 fb1d 	bl	8008d5e <USB_ReadInterrupts>
 8003724:	4603      	mov	r3, r0
 8003726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800372a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372e:	d126      	bne.n	800377e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003738:	b29a      	uxth	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0204 	bic.w	r2, r2, #4
 8003742:	b292      	uxth	r2, r2
 8003744:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003750:	b29a      	uxth	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0208 	bic.w	r2, r2, #8
 800375a:	b292      	uxth	r2, r2
 800375c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f00a f917 	bl	800d994 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800376e:	b29a      	uxth	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003778:	b292      	uxth	r2, r2
 800377a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f005 faeb 	bl	8008d5e <USB_ReadInterrupts>
 8003788:	4603      	mov	r3, r0
 800378a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003792:	f040 8084 	bne.w	800389e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003796:	2300      	movs	r3, #0
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	e011      	b.n	80037c0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	7ffb      	ldrb	r3, [r7, #31]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	441a      	add	r2, r3
 80037a8:	7ffb      	ldrb	r3, [r7, #31]
 80037aa:	8812      	ldrh	r2, [r2, #0]
 80037ac:	b292      	uxth	r2, r2
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	f107 0120 	add.w	r1, r7, #32
 80037b4:	440b      	add	r3, r1
 80037b6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80037ba:	7ffb      	ldrb	r3, [r7, #31]
 80037bc:	3301      	adds	r3, #1
 80037be:	77fb      	strb	r3, [r7, #31]
 80037c0:	7ffb      	ldrb	r3, [r7, #31]
 80037c2:	2b07      	cmp	r3, #7
 80037c4:	d9ea      	bls.n	800379c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0201 	orr.w	r2, r2, #1
 80037d8:	b292      	uxth	r2, r2
 80037da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	b292      	uxth	r2, r2
 80037f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80037f6:	bf00      	nop
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003800:	b29b      	uxth	r3, r3
 8003802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f6      	beq.n	80037f8 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003812:	b29a      	uxth	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381c:	b292      	uxth	r2, r2
 800381e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003822:	2300      	movs	r3, #0
 8003824:	77fb      	strb	r3, [r7, #31]
 8003826:	e010      	b.n	800384a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003828:	7ffb      	ldrb	r3, [r7, #31]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	4611      	mov	r1, r2
 8003830:	7ffa      	ldrb	r2, [r7, #31]
 8003832:	0092      	lsls	r2, r2, #2
 8003834:	440a      	add	r2, r1
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	f107 0120 	add.w	r1, r7, #32
 800383c:	440b      	add	r3, r1
 800383e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003842:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003844:	7ffb      	ldrb	r3, [r7, #31]
 8003846:	3301      	adds	r3, #1
 8003848:	77fb      	strb	r3, [r7, #31]
 800384a:	7ffb      	ldrb	r3, [r7, #31]
 800384c:	2b07      	cmp	r3, #7
 800384e:	d9eb      	bls.n	8003828 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003858:	b29a      	uxth	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0208 	orr.w	r2, r2, #8
 8003862:	b292      	uxth	r2, r2
 8003864:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003870:	b29a      	uxth	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800387a:	b292      	uxth	r2, r2
 800387c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003888:	b29a      	uxth	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0204 	orr.w	r2, r2, #4
 8003892:	b292      	uxth	r2, r2
 8003894:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f00a f861 	bl	800d960 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f005 fa5b 	bl	8008d5e <USB_ReadInterrupts>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b2:	d10e      	bne.n	80038d2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038c6:	b292      	uxth	r2, r2
 80038c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f00a f81a 	bl	800d906 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f005 fa41 	bl	8008d5e <USB_ReadInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e6:	d10b      	bne.n	8003900 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038fa:	b292      	uxth	r2, r2
 80038fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003900:	bf00      	nop
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_PCD_SetAddress+0x1a>
 800391e:	2302      	movs	r3, #2
 8003920:	e013      	b.n	800394a <HAL_PCD_SetAddress+0x42>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	78fa      	ldrb	r2, [r7, #3]
 800392e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f005 f9e8 	bl	8008d10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	4608      	mov	r0, r1
 800395c:	4611      	mov	r1, r2
 800395e:	461a      	mov	r2, r3
 8003960:	4603      	mov	r3, r0
 8003962:	70fb      	strb	r3, [r7, #3]
 8003964:	460b      	mov	r3, r1
 8003966:	803b      	strh	r3, [r7, #0]
 8003968:	4613      	mov	r3, r2
 800396a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003974:	2b00      	cmp	r3, #0
 8003976:	da0e      	bge.n	8003996 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4413      	add	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	705a      	strb	r2, [r3, #1]
 8003994:	e00e      	b.n	80039b4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	f003 0207 	and.w	r2, r3, #7
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039c0:	883a      	ldrh	r2, [r7, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	78ba      	ldrb	r2, [r7, #2]
 80039ca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	785b      	ldrb	r3, [r3, #1]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d004      	beq.n	80039de <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039de:	78bb      	ldrb	r3, [r7, #2]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d102      	bne.n	80039ea <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_PCD_EP_Open+0xa6>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e00e      	b.n	8003a16 <HAL_PCD_EP_Open+0xc4>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68f9      	ldr	r1, [r7, #12]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f003 f838 	bl	8006a7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003a14:	7afb      	ldrb	r3, [r7, #11]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	da0e      	bge.n	8003a50 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	705a      	strb	r2, [r3, #1]
 8003a4e:	e00e      	b.n	8003a6e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	f003 0207 	and.w	r2, r3, #7
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_PCD_EP_Close+0x6a>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e00e      	b.n	8003aa6 <HAL_PCD_EP_Close+0x88>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68f9      	ldr	r1, [r7, #12]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f003 fb5a 	bl	8007150 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b086      	sub	sp, #24
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	460b      	mov	r3, r1
 8003abc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003abe:	7afb      	ldrb	r3, [r7, #11]
 8003ac0:	f003 0207 	and.w	r2, r3, #7
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2200      	movs	r2, #0
 8003aec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aee:	7afb      	ldrb	r3, [r7, #11]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003afa:	7afb      	ldrb	r3, [r7, #11]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6979      	ldr	r1, [r7, #20]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f003 fd0c 	bl	8007528 <USB_EPStartXfer>
 8003b10:	e005      	b.n	8003b1e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6979      	ldr	r1, [r7, #20]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f003 fd05 	bl	8007528 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	f003 0207 	and.w	r2, r3, #7
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	440b      	add	r3, r1
 8003b46:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003b4a:	681b      	ldr	r3, [r3, #0]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b086      	sub	sp, #24
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
 8003b62:	460b      	mov	r3, r1
 8003b64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b66:	7afb      	ldrb	r3, [r7, #11]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4413      	add	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ba2:	7afb      	ldrb	r3, [r7, #11]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bae:	7afb      	ldrb	r3, [r7, #11]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d106      	bne.n	8003bc6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6979      	ldr	r1, [r7, #20]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f003 fcb2 	bl	8007528 <USB_EPStartXfer>
 8003bc4:	e005      	b.n	8003bd2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6979      	ldr	r1, [r7, #20]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f003 fcab 	bl	8007528 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	f003 0207 	and.w	r2, r3, #7
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d901      	bls.n	8003bfa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e04c      	b.n	8003c94 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	da0e      	bge.n	8003c20 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	705a      	strb	r2, [r3, #1]
 8003c1e:	e00c      	b.n	8003c3a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_PCD_EP_SetStall+0x7e>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e01c      	b.n	8003c94 <HAL_PCD_EP_SetStall+0xb8>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f004 ff54 	bl	8008b16 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d108      	bne.n	8003c8a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003c82:	4619      	mov	r1, r3
 8003c84:	4610      	mov	r0, r2
 8003c86:	f005 f879 	bl	8008d7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	f003 020f 	and.w	r2, r3, #15
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d901      	bls.n	8003cba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e040      	b.n	8003d3c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	da0e      	bge.n	8003ce0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	705a      	strb	r2, [r3, #1]
 8003cde:	e00e      	b.n	8003cfe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	f003 0207 	and.w	r2, r3, #7
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_PCD_EP_ClrStall+0x82>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e00e      	b.n	8003d3c <HAL_PCD_EP_ClrStall+0xa0>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68f9      	ldr	r1, [r7, #12]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f004 ff42 	bl	8008bb6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08e      	sub	sp, #56	; 0x38
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d4c:	e2ec      	b.n	8004328 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d56:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003d64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f040 8161 	bne.w	8004030 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d152      	bne.n	8003e1e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d88:	81fb      	strh	r3, [r7, #14]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	89fb      	ldrh	r3, [r7, #14]
 8003d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3328      	adds	r3, #40	; 0x28
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	3302      	adds	r3, #2
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	441a      	add	r2, r3
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003ddc:	2100      	movs	r1, #0
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f009 fd77 	bl	800d8d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 829b 	beq.w	8004328 <PCD_EP_ISR_Handler+0x5e4>
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f040 8296 	bne.w	8004328 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	b292      	uxth	r2, r2
 8003e10:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e1c:	e284      	b.n	8004328 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003e2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d034      	beq.n	8003ea2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3306      	adds	r3, #6
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f004 ffd0 	bl	8008e1c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e88:	4013      	ands	r3, r2
 8003e8a:	823b      	strh	r3, [r7, #16]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	8a3a      	ldrh	r2, [r7, #16]
 8003e92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e96:	b292      	uxth	r2, r2
 8003e98:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f009 fcec 	bl	800d878 <HAL_PCD_SetupStageCallback>
 8003ea0:	e242      	b.n	8004328 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ea2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f280 823e 	bge.w	8004328 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003eb8:	4013      	ands	r3, r2
 8003eba:	83bb      	strh	r3, [r7, #28]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	8bba      	ldrh	r2, [r7, #28]
 8003ec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ec6:	b292      	uxth	r2, r2
 8003ec8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	3306      	adds	r3, #6
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d019      	beq.n	8003f32 <PCD_EP_ISR_Handler+0x1ee>
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d015      	beq.n	8003f32 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	6959      	ldr	r1, [r3, #20]
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	f004 ff80 	bl	8008e1c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	441a      	add	r2, r3
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f009 fcb5 	bl	800d89c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f040 81f2 	bne.w	8004328 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	4413      	add	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d112      	bne.n	8003f92 <PCD_EP_ISR_Handler+0x24e>
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	801a      	strh	r2, [r3, #0]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	801a      	strh	r2, [r3, #0]
 8003f90:	e02f      	b.n	8003ff2 <PCD_EP_ISR_Handler+0x2ae>
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b3e      	cmp	r3, #62	; 0x3e
 8003f98:	d813      	bhi.n	8003fc2 <PCD_EP_ISR_Handler+0x27e>
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <PCD_EP_ISR_Handler+0x270>
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	029b      	lsls	r3, r3, #10
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	801a      	strh	r2, [r3, #0]
 8003fc0:	e017      	b.n	8003ff2 <PCD_EP_ISR_Handler+0x2ae>
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d102      	bne.n	8003fdc <PCD_EP_ISR_Handler+0x298>
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	633b      	str	r3, [r7, #48]	; 0x30
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	029b      	lsls	r3, r3, #10
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004002:	827b      	strh	r3, [r7, #18]
 8004004:	8a7b      	ldrh	r3, [r7, #18]
 8004006:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800400a:	827b      	strh	r3, [r7, #18]
 800400c:	8a7b      	ldrh	r3, [r7, #18]
 800400e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004012:	827b      	strh	r3, [r7, #18]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	8a7b      	ldrh	r3, [r7, #18]
 800401a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800401e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800402a:	b29b      	uxth	r3, r3
 800402c:	8013      	strh	r3, [r2, #0]
 800402e:	e17b      	b.n	8004328 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004042:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004046:	2b00      	cmp	r3, #0
 8004048:	f280 80ea 	bge.w	8004220 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	b29a      	uxth	r2, r3
 800405e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004062:	4013      	ands	r3, r2
 8004064:	853b      	strh	r3, [r7, #40]	; 0x28
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004076:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800407a:	b292      	uxth	r2, r2
 800407c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800407e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	7b1b      	ldrb	r3, [r3, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d122      	bne.n	80040e2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4413      	add	r3, r2
 80040b0:	3306      	adds	r3, #6
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040c4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80040c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8087 	beq.w	80041dc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	6959      	ldr	r1, [r3, #20]
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	88da      	ldrh	r2, [r3, #6]
 80040da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040dc:	f004 fe9e 	bl	8008e1c <USB_ReadPMA>
 80040e0:	e07c      	b.n	80041dc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	78db      	ldrb	r3, [r3, #3]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d108      	bne.n	80040fc <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80040ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040ec:	461a      	mov	r2, r3
 80040ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f927 	bl	8004344 <HAL_PCD_EP_DB_Receive>
 80040f6:	4603      	mov	r3, r0
 80040f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80040fa:	e06f      	b.n	80041dc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004116:	847b      	strh	r3, [r7, #34]	; 0x22
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	441a      	add	r2, r3
 8004126:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800412c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004134:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004138:	b29b      	uxth	r3, r3
 800413a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	b29b      	uxth	r3, r3
 800414e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d021      	beq.n	800419a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415e:	b29b      	uxth	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4413      	add	r3, r2
 800416a:	3302      	adds	r3, #2
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800417e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004180:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004182:	2b00      	cmp	r3, #0
 8004184:	d02a      	beq.n	80041dc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	6959      	ldr	r1, [r3, #20]
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	891a      	ldrh	r2, [r3, #8]
 8004192:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004194:	f004 fe42 	bl	8008e1c <USB_ReadPMA>
 8004198:	e020      	b.n	80041dc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4413      	add	r3, r2
 80041ae:	3306      	adds	r3, #6
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80041c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d008      	beq.n	80041dc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	6959      	ldr	r1, [r3, #20]
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	895a      	ldrh	r2, [r3, #10]
 80041d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041d8:	f004 fe20 	bl	8008e1c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041e2:	441a      	add	r2, r3
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041ee:	441a      	add	r2, r3
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d004      	beq.n	8004206 <PCD_EP_ISR_Handler+0x4c2>
 80041fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	429a      	cmp	r2, r3
 8004204:	d206      	bcs.n	8004214 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	4619      	mov	r1, r3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f009 fb45 	bl	800d89c <HAL_PCD_DataOutStageCallback>
 8004212:	e005      	b.n	8004220 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800421a:	4618      	mov	r0, r3
 800421c:	f003 f984 	bl	8007528 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004220:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004226:	2b00      	cmp	r3, #0
 8004228:	d07e      	beq.n	8004328 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800422a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4413      	add	r3, r2
 800423c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004258:	843b      	strh	r3, [r7, #32]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	441a      	add	r2, r3
 8004268:	8c3b      	ldrh	r3, [r7, #32]
 800426a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800426e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004272:	b29b      	uxth	r3, r3
 8004274:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	78db      	ldrb	r3, [r3, #3]
 800427a:	2b03      	cmp	r3, #3
 800427c:	d00c      	beq.n	8004298 <PCD_EP_ISR_Handler+0x554>
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d008      	beq.n	8004298 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800428a:	2b02      	cmp	r3, #2
 800428c:	d146      	bne.n	800431c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800428e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d141      	bne.n	800431c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	4413      	add	r3, r2
 80042ac:	3302      	adds	r3, #2
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	8bfb      	ldrh	r3, [r7, #30]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d906      	bls.n	80042da <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	8bfb      	ldrh	r3, [r7, #30]
 80042d2:	1ad2      	subs	r2, r2, r3
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	619a      	str	r2, [r3, #24]
 80042d8:	e002      	b.n	80042e0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	2200      	movs	r2, #0
 80042de:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d106      	bne.n	80042f6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	4619      	mov	r1, r3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f009 faef 	bl	800d8d2 <HAL_PCD_DataInStageCallback>
 80042f4:	e018      	b.n	8004328 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	8bfb      	ldrh	r3, [r7, #30]
 80042fc:	441a      	add	r2, r3
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	69da      	ldr	r2, [r3, #28]
 8004306:	8bfb      	ldrh	r3, [r7, #30]
 8004308:	441a      	add	r2, r3
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004314:	4618      	mov	r0, r3
 8004316:	f003 f907 	bl	8007528 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800431a:	e005      	b.n	8004328 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800431c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800431e:	461a      	mov	r2, r3
 8004320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f91b 	bl	800455e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004330:	b29b      	uxth	r3, r3
 8004332:	b21b      	sxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	f6ff ad0a 	blt.w	8003d4e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3738      	adds	r7, #56	; 0x38
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	4613      	mov	r3, r2
 8004350:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d07e      	beq.n	800445a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004364:	b29b      	uxth	r3, r3
 8004366:	461a      	mov	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4413      	add	r3, r2
 8004370:	3302      	adds	r3, #2
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004384:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	8b7b      	ldrh	r3, [r7, #26]
 800438c:	429a      	cmp	r2, r3
 800438e:	d306      	bcc.n	800439e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	8b7b      	ldrh	r3, [r7, #26]
 8004396:	1ad2      	subs	r2, r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	619a      	str	r2, [r3, #24]
 800439c:	e002      	b.n	80043a4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2200      	movs	r2, #0
 80043a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d123      	bne.n	80043f4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c6:	833b      	strh	r3, [r7, #24]
 80043c8:	8b3b      	ldrh	r3, [r7, #24]
 80043ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043ce:	833b      	strh	r3, [r7, #24]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	441a      	add	r2, r3
 80043de:	8b3b      	ldrh	r3, [r7, #24]
 80043e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043f4:	88fb      	ldrh	r3, [r7, #6]
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d01f      	beq.n	800443e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004418:	82fb      	strh	r3, [r7, #22]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	441a      	add	r2, r3
 8004428:	8afb      	ldrh	r3, [r7, #22]
 800442a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800442e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004436:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800443a:	b29b      	uxth	r3, r3
 800443c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800443e:	8b7b      	ldrh	r3, [r7, #26]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8087 	beq.w	8004554 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6959      	ldr	r1, [r3, #20]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	891a      	ldrh	r2, [r3, #8]
 8004452:	8b7b      	ldrh	r3, [r7, #26]
 8004454:	f004 fce2 	bl	8008e1c <USB_ReadPMA>
 8004458:	e07c      	b.n	8004554 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004462:	b29b      	uxth	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4413      	add	r3, r2
 800446e:	3306      	adds	r3, #6
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004482:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	699a      	ldr	r2, [r3, #24]
 8004488:	8b7b      	ldrh	r3, [r7, #26]
 800448a:	429a      	cmp	r2, r3
 800448c:	d306      	bcc.n	800449c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	8b7b      	ldrh	r3, [r7, #26]
 8004494:	1ad2      	subs	r2, r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	619a      	str	r2, [r3, #24]
 800449a:	e002      	b.n	80044a2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2200      	movs	r2, #0
 80044a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d123      	bne.n	80044f2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c4:	83fb      	strh	r3, [r7, #30]
 80044c6:	8bfb      	ldrh	r3, [r7, #30]
 80044c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044cc:	83fb      	strh	r3, [r7, #30]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	441a      	add	r2, r3
 80044dc:	8bfb      	ldrh	r3, [r7, #30]
 80044de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d11f      	bne.n	800453c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	b29b      	uxth	r3, r3
 800450e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	83bb      	strh	r3, [r7, #28]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	441a      	add	r2, r3
 8004526:	8bbb      	ldrh	r3, [r7, #28]
 8004528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800452c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004534:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004538:	b29b      	uxth	r3, r3
 800453a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800453c:	8b7b      	ldrh	r3, [r7, #26]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6959      	ldr	r1, [r3, #20]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	895a      	ldrh	r2, [r3, #10]
 800454e:	8b7b      	ldrh	r3, [r7, #26]
 8004550:	f004 fc64 	bl	8008e1c <USB_ReadPMA>
    }
  }

  return count;
 8004554:	8b7b      	ldrh	r3, [r7, #26]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3720      	adds	r7, #32
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b0a2      	sub	sp, #136	; 0x88
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	4613      	mov	r3, r2
 800456a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800456c:	88fb      	ldrh	r3, [r7, #6]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 81c7 	beq.w	8004906 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004580:	b29b      	uxth	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4413      	add	r3, r2
 800458c:	3302      	adds	r3, #2
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d907      	bls.n	80045c0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	699a      	ldr	r2, [r3, #24]
 80045b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045b8:	1ad2      	subs	r2, r2, r3
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	619a      	str	r2, [r3, #24]
 80045be:	e002      	b.n	80045c6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2200      	movs	r2, #0
 80045c4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f040 80b9 	bne.w	8004742 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	785b      	ldrb	r3, [r3, #1]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d126      	bne.n	8004626 <HAL_PCD_EP_DB_Transmit+0xc8>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	4413      	add	r3, r2
 80045ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	011a      	lsls	r2, r3, #4
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	4413      	add	r3, r2
 80045fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	b29b      	uxth	r3, r3
 8004606:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800460a:	b29a      	uxth	r2, r3
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	801a      	strh	r2, [r3, #0]
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	b29b      	uxth	r3, r3
 8004616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800461a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800461e:	b29a      	uxth	r2, r3
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	801a      	strh	r2, [r3, #0]
 8004624:	e01a      	b.n	800465c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	785b      	ldrb	r3, [r3, #1]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d116      	bne.n	800465c <HAL_PCD_EP_DB_Transmit+0xfe>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	633b      	str	r3, [r7, #48]	; 0x30
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800463c:	b29b      	uxth	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	4413      	add	r3, r2
 8004644:	633b      	str	r3, [r7, #48]	; 0x30
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	011a      	lsls	r2, r3, #4
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	4413      	add	r3, r2
 8004650:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004658:	2200      	movs	r2, #0
 800465a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	623b      	str	r3, [r7, #32]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	785b      	ldrb	r3, [r3, #1]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d126      	bne.n	80046b8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004678:	b29b      	uxth	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	4413      	add	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	011a      	lsls	r2, r3, #4
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	4413      	add	r3, r2
 800468c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800469c:	b29a      	uxth	r2, r3
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	801a      	strh	r2, [r3, #0]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	801a      	strh	r2, [r3, #0]
 80046b6:	e017      	b.n	80046e8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d113      	bne.n	80046e8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	4413      	add	r3, r2
 80046d0:	623b      	str	r3, [r7, #32]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	011a      	lsls	r2, r3, #4
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	4413      	add	r3, r2
 80046dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	2200      	movs	r2, #0
 80046e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	4619      	mov	r1, r3
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f009 f8ef 	bl	800d8d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046f4:	88fb      	ldrh	r3, [r7, #6]
 80046f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 82d4 	beq.w	8004ca8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	827b      	strh	r3, [r7, #18]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	441a      	add	r2, r3
 800472a:	8a7b      	ldrh	r3, [r7, #18]
 800472c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473c:	b29b      	uxth	r3, r3
 800473e:	8013      	strh	r3, [r2, #0]
 8004740:	e2b2      	b.n	8004ca8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d021      	beq.n	8004790 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004766:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	441a      	add	r2, r3
 8004778:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800477c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478c:	b29b      	uxth	r3, r3
 800478e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004796:	2b01      	cmp	r3, #1
 8004798:	f040 8286 	bne.w	8004ca8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047a4:	441a      	add	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	69da      	ldr	r2, [r3, #28]
 80047ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047b2:	441a      	add	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	6a1a      	ldr	r2, [r3, #32]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d309      	bcc.n	80047d8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d0:	1ad2      	subs	r2, r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	621a      	str	r2, [r3, #32]
 80047d6:	e015      	b.n	8004804 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d107      	bne.n	80047f0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80047e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80047ee:	e009      	b.n	8004804 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2200      	movs	r2, #0
 8004802:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d155      	bne.n	80048b8 <HAL_PCD_EP_DB_Transmit+0x35a>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	63bb      	str	r3, [r7, #56]	; 0x38
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800481a:	b29b      	uxth	r3, r3
 800481c:	461a      	mov	r2, r3
 800481e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004820:	4413      	add	r3, r2
 8004822:	63bb      	str	r3, [r7, #56]	; 0x38
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	011a      	lsls	r2, r3, #4
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	4413      	add	r3, r2
 800482e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
 8004834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004836:	2b00      	cmp	r3, #0
 8004838:	d112      	bne.n	8004860 <HAL_PCD_EP_DB_Transmit+0x302>
 800483a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	b29b      	uxth	r3, r3
 8004840:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004844:	b29a      	uxth	r2, r3
 8004846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004848:	801a      	strh	r2, [r3, #0]
 800484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004858:	b29a      	uxth	r2, r3
 800485a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485c:	801a      	strh	r2, [r3, #0]
 800485e:	e047      	b.n	80048f0 <HAL_PCD_EP_DB_Transmit+0x392>
 8004860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004862:	2b3e      	cmp	r3, #62	; 0x3e
 8004864:	d811      	bhi.n	800488a <HAL_PCD_EP_DB_Transmit+0x32c>
 8004866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	64bb      	str	r3, [r7, #72]	; 0x48
 800486c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_PCD_EP_DB_Transmit+0x31e>
 8004876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004878:	3301      	adds	r3, #1
 800487a:	64bb      	str	r3, [r7, #72]	; 0x48
 800487c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487e:	b29b      	uxth	r3, r3
 8004880:	029b      	lsls	r3, r3, #10
 8004882:	b29a      	uxth	r2, r3
 8004884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004886:	801a      	strh	r2, [r3, #0]
 8004888:	e032      	b.n	80048f0 <HAL_PCD_EP_DB_Transmit+0x392>
 800488a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004892:	f003 031f 	and.w	r3, r3, #31
 8004896:	2b00      	cmp	r3, #0
 8004898:	d102      	bne.n	80048a0 <HAL_PCD_EP_DB_Transmit+0x342>
 800489a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800489c:	3b01      	subs	r3, #1
 800489e:	64bb      	str	r3, [r7, #72]	; 0x48
 80048a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	029b      	lsls	r3, r3, #10
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b4:	801a      	strh	r2, [r3, #0]
 80048b6:	e01b      	b.n	80048f0 <HAL_PCD_EP_DB_Transmit+0x392>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	785b      	ldrb	r3, [r3, #1]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d117      	bne.n	80048f0 <HAL_PCD_EP_DB_Transmit+0x392>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	643b      	str	r3, [r7, #64]	; 0x40
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d4:	4413      	add	r3, r2
 80048d6:	643b      	str	r3, [r7, #64]	; 0x40
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	011a      	lsls	r2, r3, #4
 80048de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e0:	4413      	add	r3, r2
 80048e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6818      	ldr	r0, [r3, #0]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	6959      	ldr	r1, [r3, #20]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	891a      	ldrh	r2, [r3, #8]
 80048fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f004 fa47 	bl	8008d92 <USB_WritePMA>
 8004904:	e1d0      	b.n	8004ca8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800490e:	b29b      	uxth	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4413      	add	r3, r2
 800491a:	3306      	adds	r3, #6
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800492e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	699a      	ldr	r2, [r3, #24]
 8004936:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800493a:	429a      	cmp	r2, r3
 800493c:	d307      	bcc.n	800494e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004946:	1ad2      	subs	r2, r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	619a      	str	r2, [r3, #24]
 800494c:	e002      	b.n	8004954 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2200      	movs	r2, #0
 8004952:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f040 80c4 	bne.w	8004ae6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	785b      	ldrb	r3, [r3, #1]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d126      	bne.n	80049b4 <HAL_PCD_EP_DB_Transmit+0x456>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004974:	b29b      	uxth	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497a:	4413      	add	r3, r2
 800497c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	011a      	lsls	r2, r3, #4
 8004984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004986:	4413      	add	r3, r2
 8004988:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800498c:	66bb      	str	r3, [r7, #104]	; 0x68
 800498e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004998:	b29a      	uxth	r2, r3
 800499a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800499c:	801a      	strh	r2, [r3, #0]
 800499e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	e01a      	b.n	80049ea <HAL_PCD_EP_DB_Transmit+0x48c>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d116      	bne.n	80049ea <HAL_PCD_EP_DB_Transmit+0x48c>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	677b      	str	r3, [r7, #116]	; 0x74
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	461a      	mov	r2, r3
 80049ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d0:	4413      	add	r3, r2
 80049d2:	677b      	str	r3, [r7, #116]	; 0x74
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	011a      	lsls	r2, r3, #4
 80049da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049dc:	4413      	add	r3, r2
 80049de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049e2:	673b      	str	r3, [r7, #112]	; 0x70
 80049e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049e6:	2200      	movs	r2, #0
 80049e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	785b      	ldrb	r3, [r3, #1]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d12f      	bne.n	8004a58 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a10:	4413      	add	r3, r2
 8004a12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	011a      	lsls	r2, r3, #4
 8004a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a20:	4413      	add	r3, r2
 8004a22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a3c:	801a      	strh	r2, [r3, #0]
 8004a3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a54:	801a      	strh	r2, [r3, #0]
 8004a56:	e017      	b.n	8004a88 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	785b      	ldrb	r3, [r3, #1]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d113      	bne.n	8004a88 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a6e:	4413      	add	r3, r2
 8004a70:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	011a      	lsls	r2, r3, #4
 8004a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a84:	2200      	movs	r2, #0
 8004a86:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f008 ff1f 	bl	800d8d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a94:	88fb      	ldrh	r3, [r7, #6]
 8004a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f040 8104 	bne.w	8004ca8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	441a      	add	r2, r3
 8004acc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	8013      	strh	r3, [r2, #0]
 8004ae4:	e0e0      	b.n	8004ca8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ae6:	88fb      	ldrh	r3, [r7, #6]
 8004ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d121      	bne.n	8004b34 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	441a      	add	r2, r3
 8004b1c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	f040 80b4 	bne.w	8004ca8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	695a      	ldr	r2, [r3, #20]
 8004b44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b48:	441a      	add	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	69da      	ldr	r2, [r3, #28]
 8004b52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b56:	441a      	add	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	6a1a      	ldr	r2, [r3, #32]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d309      	bcc.n	8004b7c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	6a1a      	ldr	r2, [r3, #32]
 8004b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b74:	1ad2      	subs	r2, r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	621a      	str	r2, [r3, #32]
 8004b7a:	e015      	b.n	8004ba8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d107      	bne.n	8004b94 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004b84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b88:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b92:	e009      	b.n	8004ba8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	667b      	str	r3, [r7, #100]	; 0x64
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	785b      	ldrb	r3, [r3, #1]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d155      	bne.n	8004c62 <HAL_PCD_EP_DB_Transmit+0x704>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bca:	4413      	add	r3, r2
 8004bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	011a      	lsls	r2, r3, #4
 8004bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d112      	bne.n	8004c0a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bf2:	801a      	strh	r2, [r3, #0]
 8004bf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c06:	801a      	strh	r2, [r3, #0]
 8004c08:	e044      	b.n	8004c94 <HAL_PCD_EP_DB_Transmit+0x736>
 8004c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c0c:	2b3e      	cmp	r3, #62	; 0x3e
 8004c0e:	d811      	bhi.n	8004c34 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c12:	085b      	lsrs	r3, r3, #1
 8004c14:	657b      	str	r3, [r7, #84]	; 0x54
 8004c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c22:	3301      	adds	r3, #1
 8004c24:	657b      	str	r3, [r7, #84]	; 0x54
 8004c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	029b      	lsls	r3, r3, #10
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c30:	801a      	strh	r2, [r3, #0]
 8004c32:	e02f      	b.n	8004c94 <HAL_PCD_EP_DB_Transmit+0x736>
 8004c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	657b      	str	r3, [r7, #84]	; 0x54
 8004c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c3c:	f003 031f 	and.w	r3, r3, #31
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c46:	3b01      	subs	r3, #1
 8004c48:	657b      	str	r3, [r7, #84]	; 0x54
 8004c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	029b      	lsls	r3, r3, #10
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c5e:	801a      	strh	r2, [r3, #0]
 8004c60:	e018      	b.n	8004c94 <HAL_PCD_EP_DB_Transmit+0x736>
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	785b      	ldrb	r3, [r3, #1]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d114      	bne.n	8004c94 <HAL_PCD_EP_DB_Transmit+0x736>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	461a      	mov	r2, r3
 8004c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c78:	4413      	add	r3, r2
 8004c7a:	667b      	str	r3, [r7, #100]	; 0x64
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	011a      	lsls	r2, r3, #4
 8004c82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c84:	4413      	add	r3, r2
 8004c86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c8a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c92:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6818      	ldr	r0, [r3, #0]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	6959      	ldr	r1, [r3, #20]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	895a      	ldrh	r2, [r3, #10]
 8004ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f004 f875 	bl	8008d92 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc2:	823b      	strh	r3, [r7, #16]
 8004cc4:	8a3b      	ldrh	r3, [r7, #16]
 8004cc6:	f083 0310 	eor.w	r3, r3, #16
 8004cca:	823b      	strh	r3, [r7, #16]
 8004ccc:	8a3b      	ldrh	r3, [r7, #16]
 8004cce:	f083 0320 	eor.w	r3, r3, #32
 8004cd2:	823b      	strh	r3, [r7, #16]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	441a      	add	r2, r3
 8004ce2:	8a3b      	ldrh	r3, [r7, #16]
 8004ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3788      	adds	r7, #136	; 0x88
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b087      	sub	sp, #28
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	607b      	str	r3, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	817b      	strh	r3, [r7, #10]
 8004d10:	4613      	mov	r3, r2
 8004d12:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004d14:	897b      	ldrh	r3, [r7, #10]
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00b      	beq.n	8004d38 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d20:	897b      	ldrh	r3, [r7, #10]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e009      	b.n	8004d4c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d38:	897a      	ldrh	r2, [r7, #10]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004d4c:	893b      	ldrh	r3, [r7, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d107      	bne.n	8004d62 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2200      	movs	r2, #0
 8004d56:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	80da      	strh	r2, [r3, #6]
 8004d60:	e00b      	b.n	8004d7a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2201      	movs	r2, #1
 8004d66:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	0c1b      	lsrs	r3, r3, #16
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	371c      	adds	r7, #28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e26c      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 8087 	beq.w	8004eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004da8:	4b92      	ldr	r3, [pc, #584]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f003 030c 	and.w	r3, r3, #12
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d00c      	beq.n	8004dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004db4:	4b8f      	ldr	r3, [pc, #572]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 030c 	and.w	r3, r3, #12
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d112      	bne.n	8004de6 <HAL_RCC_OscConfig+0x5e>
 8004dc0:	4b8c      	ldr	r3, [pc, #560]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dcc:	d10b      	bne.n	8004de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dce:	4b89      	ldr	r3, [pc, #548]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d06c      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x12c>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d168      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e246      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dee:	d106      	bne.n	8004dfe <HAL_RCC_OscConfig+0x76>
 8004df0:	4b80      	ldr	r3, [pc, #512]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a7f      	ldr	r2, [pc, #508]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	e02e      	b.n	8004e5c <HAL_RCC_OscConfig+0xd4>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10c      	bne.n	8004e20 <HAL_RCC_OscConfig+0x98>
 8004e06:	4b7b      	ldr	r3, [pc, #492]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a7a      	ldr	r2, [pc, #488]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	4b78      	ldr	r3, [pc, #480]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a77      	ldr	r2, [pc, #476]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	e01d      	b.n	8004e5c <HAL_RCC_OscConfig+0xd4>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e28:	d10c      	bne.n	8004e44 <HAL_RCC_OscConfig+0xbc>
 8004e2a:	4b72      	ldr	r3, [pc, #456]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a71      	ldr	r2, [pc, #452]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	4b6f      	ldr	r3, [pc, #444]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a6e      	ldr	r2, [pc, #440]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	e00b      	b.n	8004e5c <HAL_RCC_OscConfig+0xd4>
 8004e44:	4b6b      	ldr	r3, [pc, #428]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a6a      	ldr	r2, [pc, #424]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	4b68      	ldr	r3, [pc, #416]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a67      	ldr	r2, [pc, #412]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d013      	beq.n	8004e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fd ff42 	bl	8002cec <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e6c:	f7fd ff3e 	bl	8002cec <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	; 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e1fa      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7e:	4b5d      	ldr	r3, [pc, #372]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0xe4>
 8004e8a:	e014      	b.n	8004eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fd ff2e 	bl	8002cec <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e94:	f7fd ff2a 	bl	8002cec <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	; 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e1e6      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea6:	4b53      	ldr	r3, [pc, #332]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x10c>
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d063      	beq.n	8004f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ec2:	4b4c      	ldr	r3, [pc, #304]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ece:	4b49      	ldr	r3, [pc, #292]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d11c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x18c>
 8004eda:	4b46      	ldr	r3, [pc, #280]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d116      	bne.n	8004f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee6:	4b43      	ldr	r3, [pc, #268]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <HAL_RCC_OscConfig+0x176>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d001      	beq.n	8004efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e1ba      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efe:	4b3d      	ldr	r3, [pc, #244]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4939      	ldr	r1, [pc, #228]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f12:	e03a      	b.n	8004f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d020      	beq.n	8004f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f1c:	4b36      	ldr	r3, [pc, #216]	; (8004ff8 <HAL_RCC_OscConfig+0x270>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f22:	f7fd fee3 	bl	8002cec <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f2a:	f7fd fedf 	bl	8002cec <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e19b      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f3c:	4b2d      	ldr	r3, [pc, #180]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0f0      	beq.n	8004f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f48:	4b2a      	ldr	r3, [pc, #168]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4927      	ldr	r1, [pc, #156]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	600b      	str	r3, [r1, #0]
 8004f5c:	e015      	b.n	8004f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f5e:	4b26      	ldr	r3, [pc, #152]	; (8004ff8 <HAL_RCC_OscConfig+0x270>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f64:	f7fd fec2 	bl	8002cec <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f6c:	f7fd febe 	bl	8002cec <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e17a      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7e:	4b1d      	ldr	r3, [pc, #116]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d03a      	beq.n	800500c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d019      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f9e:	4b17      	ldr	r3, [pc, #92]	; (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa4:	f7fd fea2 	bl	8002cec <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fac:	f7fd fe9e 	bl	8002cec <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e15a      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004fca:	2001      	movs	r0, #1
 8004fcc:	f000 fb0a 	bl	80055e4 <RCC_Delay>
 8004fd0:	e01c      	b.n	800500c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fd2:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd8:	f7fd fe88 	bl	8002cec <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fde:	e00f      	b.n	8005000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe0:	f7fd fe84 	bl	8002cec <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d908      	bls.n	8005000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e140      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
 8004ff2:	bf00      	nop
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	42420000 	.word	0x42420000
 8004ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005000:	4b9e      	ldr	r3, [pc, #632]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e9      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80a6 	beq.w	8005166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800501a:	2300      	movs	r3, #0
 800501c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800501e:	4b97      	ldr	r3, [pc, #604]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10d      	bne.n	8005046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800502a:	4b94      	ldr	r3, [pc, #592]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	4a93      	ldr	r2, [pc, #588]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 8005030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005034:	61d3      	str	r3, [r2, #28]
 8005036:	4b91      	ldr	r3, [pc, #580]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503e:	60bb      	str	r3, [r7, #8]
 8005040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005042:	2301      	movs	r3, #1
 8005044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005046:	4b8e      	ldr	r3, [pc, #568]	; (8005280 <HAL_RCC_OscConfig+0x4f8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d118      	bne.n	8005084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005052:	4b8b      	ldr	r3, [pc, #556]	; (8005280 <HAL_RCC_OscConfig+0x4f8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a8a      	ldr	r2, [pc, #552]	; (8005280 <HAL_RCC_OscConfig+0x4f8>)
 8005058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800505e:	f7fd fe45 	bl	8002cec <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005066:	f7fd fe41 	bl	8002cec <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b64      	cmp	r3, #100	; 0x64
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e0fd      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005078:	4b81      	ldr	r3, [pc, #516]	; (8005280 <HAL_RCC_OscConfig+0x4f8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f0      	beq.n	8005066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d106      	bne.n	800509a <HAL_RCC_OscConfig+0x312>
 800508c:	4b7b      	ldr	r3, [pc, #492]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4a7a      	ldr	r2, [pc, #488]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	6213      	str	r3, [r2, #32]
 8005098:	e02d      	b.n	80050f6 <HAL_RCC_OscConfig+0x36e>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10c      	bne.n	80050bc <HAL_RCC_OscConfig+0x334>
 80050a2:	4b76      	ldr	r3, [pc, #472]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	4a75      	ldr	r2, [pc, #468]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	6213      	str	r3, [r2, #32]
 80050ae:	4b73      	ldr	r3, [pc, #460]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	4a72      	ldr	r2, [pc, #456]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80050b4:	f023 0304 	bic.w	r3, r3, #4
 80050b8:	6213      	str	r3, [r2, #32]
 80050ba:	e01c      	b.n	80050f6 <HAL_RCC_OscConfig+0x36e>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b05      	cmp	r3, #5
 80050c2:	d10c      	bne.n	80050de <HAL_RCC_OscConfig+0x356>
 80050c4:	4b6d      	ldr	r3, [pc, #436]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	4a6c      	ldr	r2, [pc, #432]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80050ca:	f043 0304 	orr.w	r3, r3, #4
 80050ce:	6213      	str	r3, [r2, #32]
 80050d0:	4b6a      	ldr	r3, [pc, #424]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	4a69      	ldr	r2, [pc, #420]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	6213      	str	r3, [r2, #32]
 80050dc:	e00b      	b.n	80050f6 <HAL_RCC_OscConfig+0x36e>
 80050de:	4b67      	ldr	r3, [pc, #412]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	4a66      	ldr	r2, [pc, #408]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	6213      	str	r3, [r2, #32]
 80050ea:	4b64      	ldr	r3, [pc, #400]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	4a63      	ldr	r2, [pc, #396]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80050f0:	f023 0304 	bic.w	r3, r3, #4
 80050f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d015      	beq.n	800512a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050fe:	f7fd fdf5 	bl	8002cec <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005104:	e00a      	b.n	800511c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005106:	f7fd fdf1 	bl	8002cec <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	f241 3288 	movw	r2, #5000	; 0x1388
 8005114:	4293      	cmp	r3, r2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e0ab      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511c:	4b57      	ldr	r3, [pc, #348]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0ee      	beq.n	8005106 <HAL_RCC_OscConfig+0x37e>
 8005128:	e014      	b.n	8005154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800512a:	f7fd fddf 	bl	8002cec <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005130:	e00a      	b.n	8005148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005132:	f7fd fddb 	bl	8002cec <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005140:	4293      	cmp	r3, r2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e095      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005148:	4b4c      	ldr	r3, [pc, #304]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1ee      	bne.n	8005132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d105      	bne.n	8005166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800515a:	4b48      	ldr	r3, [pc, #288]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	4a47      	ldr	r2, [pc, #284]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 8005160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 8081 	beq.w	8005272 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005170:	4b42      	ldr	r3, [pc, #264]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 030c 	and.w	r3, r3, #12
 8005178:	2b08      	cmp	r3, #8
 800517a:	d061      	beq.n	8005240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d146      	bne.n	8005212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005184:	4b3f      	ldr	r3, [pc, #252]	; (8005284 <HAL_RCC_OscConfig+0x4fc>)
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518a:	f7fd fdaf 	bl	8002cec <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005192:	f7fd fdab 	bl	8002cec <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e067      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051a4:	4b35      	ldr	r3, [pc, #212]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f0      	bne.n	8005192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b8:	d108      	bne.n	80051cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051ba:	4b30      	ldr	r3, [pc, #192]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	492d      	ldr	r1, [pc, #180]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051cc:	4b2b      	ldr	r3, [pc, #172]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a19      	ldr	r1, [r3, #32]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	430b      	orrs	r3, r1
 80051de:	4927      	ldr	r1, [pc, #156]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051e4:	4b27      	ldr	r3, [pc, #156]	; (8005284 <HAL_RCC_OscConfig+0x4fc>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ea:	f7fd fd7f 	bl	8002cec <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f2:	f7fd fd7b 	bl	8002cec <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e037      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005204:	4b1d      	ldr	r3, [pc, #116]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCC_OscConfig+0x46a>
 8005210:	e02f      	b.n	8005272 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005212:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <HAL_RCC_OscConfig+0x4fc>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005218:	f7fd fd68 	bl	8002cec <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005220:	f7fd fd64 	bl	8002cec <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e020      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005232:	4b12      	ldr	r3, [pc, #72]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f0      	bne.n	8005220 <HAL_RCC_OscConfig+0x498>
 800523e:	e018      	b.n	8005272 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e013      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <HAL_RCC_OscConfig+0x4f4>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	429a      	cmp	r2, r3
 800525e:	d106      	bne.n	800526e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800526a:	429a      	cmp	r2, r3
 800526c:	d001      	beq.n	8005272 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40021000 	.word	0x40021000
 8005280:	40007000 	.word	0x40007000
 8005284:	42420060 	.word	0x42420060

08005288 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0d0      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800529c:	4b6a      	ldr	r3, [pc, #424]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d910      	bls.n	80052cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b67      	ldr	r3, [pc, #412]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f023 0207 	bic.w	r2, r3, #7
 80052b2:	4965      	ldr	r1, [pc, #404]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ba:	4b63      	ldr	r3, [pc, #396]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d001      	beq.n	80052cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0b8      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d020      	beq.n	800531a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052e4:	4b59      	ldr	r3, [pc, #356]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4a58      	ldr	r2, [pc, #352]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 80052ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052fc:	4b53      	ldr	r3, [pc, #332]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	4a52      	ldr	r2, [pc, #328]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005302:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005306:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005308:	4b50      	ldr	r3, [pc, #320]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	494d      	ldr	r1, [pc, #308]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005316:	4313      	orrs	r3, r2
 8005318:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d040      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d107      	bne.n	800533e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	4b47      	ldr	r3, [pc, #284]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d115      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e07f      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d107      	bne.n	8005356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005346:	4b41      	ldr	r3, [pc, #260]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e073      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005356:	4b3d      	ldr	r3, [pc, #244]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e06b      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005366:	4b39      	ldr	r3, [pc, #228]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f023 0203 	bic.w	r2, r3, #3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	4936      	ldr	r1, [pc, #216]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005374:	4313      	orrs	r3, r2
 8005376:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005378:	f7fd fcb8 	bl	8002cec <HAL_GetTick>
 800537c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537e:	e00a      	b.n	8005396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005380:	f7fd fcb4 	bl	8002cec <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	f241 3288 	movw	r2, #5000	; 0x1388
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e053      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005396:	4b2d      	ldr	r3, [pc, #180]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f003 020c 	and.w	r2, r3, #12
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d1eb      	bne.n	8005380 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053a8:	4b27      	ldr	r3, [pc, #156]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d210      	bcs.n	80053d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b6:	4b24      	ldr	r3, [pc, #144]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f023 0207 	bic.w	r2, r3, #7
 80053be:	4922      	ldr	r1, [pc, #136]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c6:	4b20      	ldr	r3, [pc, #128]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d001      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e032      	b.n	800543e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053e4:	4b19      	ldr	r3, [pc, #100]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4916      	ldr	r1, [pc, #88]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005402:	4b12      	ldr	r3, [pc, #72]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	490e      	ldr	r1, [pc, #56]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005412:	4313      	orrs	r3, r2
 8005414:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005416:	f000 f821 	bl	800545c <HAL_RCC_GetSysClockFreq>
 800541a:	4602      	mov	r2, r0
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	091b      	lsrs	r3, r3, #4
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	490a      	ldr	r1, [pc, #40]	; (8005450 <HAL_RCC_ClockConfig+0x1c8>)
 8005428:	5ccb      	ldrb	r3, [r1, r3]
 800542a:	fa22 f303 	lsr.w	r3, r2, r3
 800542e:	4a09      	ldr	r2, [pc, #36]	; (8005454 <HAL_RCC_ClockConfig+0x1cc>)
 8005430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005432:	4b09      	ldr	r3, [pc, #36]	; (8005458 <HAL_RCC_ClockConfig+0x1d0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f7fd fa94 	bl	8002964 <HAL_InitTick>

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40022000 	.word	0x40022000
 800544c:	40021000 	.word	0x40021000
 8005450:	0800e630 	.word	0x0800e630
 8005454:	20000010 	.word	0x20000010
 8005458:	20000014 	.word	0x20000014

0800545c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800545c:	b490      	push	{r4, r7}
 800545e:	b08a      	sub	sp, #40	; 0x28
 8005460:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005462:	4b2a      	ldr	r3, [pc, #168]	; (800550c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005464:	1d3c      	adds	r4, r7, #4
 8005466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800546c:	f240 2301 	movw	r3, #513	; 0x201
 8005470:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
 8005476:	2300      	movs	r3, #0
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	2300      	movs	r3, #0
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005486:	4b22      	ldr	r3, [pc, #136]	; (8005510 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f003 030c 	and.w	r3, r3, #12
 8005492:	2b04      	cmp	r3, #4
 8005494:	d002      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0x40>
 8005496:	2b08      	cmp	r3, #8
 8005498:	d003      	beq.n	80054a2 <HAL_RCC_GetSysClockFreq+0x46>
 800549a:	e02d      	b.n	80054f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800549c:	4b1d      	ldr	r3, [pc, #116]	; (8005514 <HAL_RCC_GetSysClockFreq+0xb8>)
 800549e:	623b      	str	r3, [r7, #32]
      break;
 80054a0:	e02d      	b.n	80054fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	0c9b      	lsrs	r3, r3, #18
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054ae:	4413      	add	r3, r2
 80054b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80054b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d013      	beq.n	80054e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054c0:	4b13      	ldr	r3, [pc, #76]	; (8005510 <HAL_RCC_GetSysClockFreq+0xb4>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	0c5b      	lsrs	r3, r3, #17
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054ce:	4413      	add	r3, r2
 80054d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80054d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	4a0e      	ldr	r2, [pc, #56]	; (8005514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054da:	fb02 f203 	mul.w	r2, r2, r3
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
 80054e6:	e004      	b.n	80054f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4a0b      	ldr	r2, [pc, #44]	; (8005518 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054ec:	fb02 f303 	mul.w	r3, r2, r3
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	623b      	str	r3, [r7, #32]
      break;
 80054f6:	e002      	b.n	80054fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054f8:	4b08      	ldr	r3, [pc, #32]	; (800551c <HAL_RCC_GetSysClockFreq+0xc0>)
 80054fa:	623b      	str	r3, [r7, #32]
      break;
 80054fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054fe:	6a3b      	ldr	r3, [r7, #32]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3728      	adds	r7, #40	; 0x28
 8005504:	46bd      	mov	sp, r7
 8005506:	bc90      	pop	{r4, r7}
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	0800e068 	.word	0x0800e068
 8005510:	40021000 	.word	0x40021000
 8005514:	00f42400 	.word	0x00f42400
 8005518:	003d0900 	.word	0x003d0900
 800551c:	007a1200 	.word	0x007a1200

08005520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005524:	4b02      	ldr	r3, [pc, #8]	; (8005530 <HAL_RCC_GetHCLKFreq+0x10>)
 8005526:	681b      	ldr	r3, [r3, #0]
}
 8005528:	4618      	mov	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr
 8005530:	20000010 	.word	0x20000010

08005534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005538:	f7ff fff2 	bl	8005520 <HAL_RCC_GetHCLKFreq>
 800553c:	4602      	mov	r2, r0
 800553e:	4b05      	ldr	r3, [pc, #20]	; (8005554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	0a1b      	lsrs	r3, r3, #8
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	4903      	ldr	r1, [pc, #12]	; (8005558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800554a:	5ccb      	ldrb	r3, [r1, r3]
 800554c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005550:	4618      	mov	r0, r3
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40021000 	.word	0x40021000
 8005558:	0800e640 	.word	0x0800e640

0800555c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005560:	f7ff ffde 	bl	8005520 <HAL_RCC_GetHCLKFreq>
 8005564:	4602      	mov	r2, r0
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	0adb      	lsrs	r3, r3, #11
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	4903      	ldr	r1, [pc, #12]	; (8005580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005572:	5ccb      	ldrb	r3, [r1, r3]
 8005574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005578:	4618      	mov	r0, r3
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40021000 	.word	0x40021000
 8005580:	0800e640 	.word	0x0800e640

08005584 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	220f      	movs	r2, #15
 8005592:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005594:	4b11      	ldr	r3, [pc, #68]	; (80055dc <HAL_RCC_GetClockConfig+0x58>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f003 0203 	and.w	r2, r3, #3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055a0:	4b0e      	ldr	r3, [pc, #56]	; (80055dc <HAL_RCC_GetClockConfig+0x58>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055ac:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <HAL_RCC_GetClockConfig+0x58>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80055b8:	4b08      	ldr	r3, [pc, #32]	; (80055dc <HAL_RCC_GetClockConfig+0x58>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	08db      	lsrs	r3, r3, #3
 80055be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055c6:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <HAL_RCC_GetClockConfig+0x5c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0207 	and.w	r2, r3, #7
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc80      	pop	{r7}
 80055da:	4770      	bx	lr
 80055dc:	40021000 	.word	0x40021000
 80055e0:	40022000 	.word	0x40022000

080055e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055ec:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <RCC_Delay+0x34>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0a      	ldr	r2, [pc, #40]	; (800561c <RCC_Delay+0x38>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	0a5b      	lsrs	r3, r3, #9
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	fb02 f303 	mul.w	r3, r2, r3
 80055fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005600:	bf00      	nop
  }
  while (Delay --);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1e5a      	subs	r2, r3, #1
 8005606:	60fa      	str	r2, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1f9      	bne.n	8005600 <RCC_Delay+0x1c>
}
 800560c:	bf00      	nop
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr
 8005618:	20000010 	.word	0x20000010
 800561c:	10624dd3 	.word	0x10624dd3

08005620 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d07d      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800563c:	2300      	movs	r3, #0
 800563e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005640:	4b4f      	ldr	r3, [pc, #316]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10d      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800564c:	4b4c      	ldr	r3, [pc, #304]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	4a4b      	ldr	r2, [pc, #300]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005656:	61d3      	str	r3, [r2, #28]
 8005658:	4b49      	ldr	r3, [pc, #292]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005664:	2301      	movs	r3, #1
 8005666:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005668:	4b46      	ldr	r3, [pc, #280]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005670:	2b00      	cmp	r3, #0
 8005672:	d118      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005674:	4b43      	ldr	r3, [pc, #268]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a42      	ldr	r2, [pc, #264]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800567a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800567e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005680:	f7fd fb34 	bl	8002cec <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005686:	e008      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005688:	f7fd fb30 	bl	8002cec <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b64      	cmp	r3, #100	; 0x64
 8005694:	d901      	bls.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e06d      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569a:	4b3a      	ldr	r3, [pc, #232]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0f0      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056a6:	4b36      	ldr	r3, [pc, #216]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d02e      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d027      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056c4:	4b2e      	ldr	r3, [pc, #184]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056ce:	4b2e      	ldr	r3, [pc, #184]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056d4:	4b2c      	ldr	r3, [pc, #176]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056da:	4a29      	ldr	r2, [pc, #164]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d014      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ea:	f7fd faff 	bl	8002cec <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f0:	e00a      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f2:	f7fd fafb 	bl	8002cec <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005700:	4293      	cmp	r3, r2
 8005702:	d901      	bls.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e036      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005708:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0ee      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005714:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	4917      	ldr	r1, [pc, #92]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005722:	4313      	orrs	r3, r2
 8005724:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005726:	7dfb      	ldrb	r3, [r7, #23]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d105      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800572c:	4b14      	ldr	r3, [pc, #80]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	4a13      	ldr	r2, [pc, #76]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005736:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d008      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005744:	4b0e      	ldr	r3, [pc, #56]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	490b      	ldr	r1, [pc, #44]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005752:	4313      	orrs	r3, r2
 8005754:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0310 	and.w	r3, r3, #16
 800575e:	2b00      	cmp	r3, #0
 8005760:	d008      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005762:	4b07      	ldr	r3, [pc, #28]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	4904      	ldr	r1, [pc, #16]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005770:	4313      	orrs	r3, r2
 8005772:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	40021000 	.word	0x40021000
 8005784:	40007000 	.word	0x40007000
 8005788:	42420440 	.word	0x42420440

0800578c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e076      	b.n	800588c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d108      	bne.n	80057b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ae:	d009      	beq.n	80057c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	61da      	str	r2, [r3, #28]
 80057b6:	e005      	b.n	80057c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fd f83c 	bl	800285c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	431a      	orrs	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005834:	431a      	orrs	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005848:	ea42 0103 	orr.w	r1, r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	0c1a      	lsrs	r2, r3, #16
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f002 0204 	and.w	r2, r2, #4
 800586a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69da      	ldr	r2, [r3, #28]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800587a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	4613      	mov	r3, r2
 80058a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_SPI_Transmit+0x22>
 80058b2:	2302      	movs	r3, #2
 80058b4:	e126      	b.n	8005b04 <HAL_SPI_Transmit+0x270>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058be:	f7fd fa15 	bl	8002cec <HAL_GetTick>
 80058c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058c4:	88fb      	ldrh	r3, [r7, #6]
 80058c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d002      	beq.n	80058da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80058d4:	2302      	movs	r3, #2
 80058d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058d8:	e10b      	b.n	8005af2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <HAL_SPI_Transmit+0x52>
 80058e0:	88fb      	ldrh	r3, [r7, #6]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058ea:	e102      	b.n	8005af2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2203      	movs	r2, #3
 80058f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	88fa      	ldrh	r2, [r7, #6]
 8005904:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	88fa      	ldrh	r2, [r7, #6]
 800590a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005932:	d10f      	bne.n	8005954 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005942:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005952:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d007      	beq.n	8005972 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005970:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800597a:	d14b      	bne.n	8005a14 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_SPI_Transmit+0xf6>
 8005984:	8afb      	ldrh	r3, [r7, #22]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d13e      	bne.n	8005a08 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	881a      	ldrh	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	1c9a      	adds	r2, r3, #2
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059ae:	e02b      	b.n	8005a08 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d112      	bne.n	80059e4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c2:	881a      	ldrh	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	1c9a      	adds	r2, r3, #2
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80059e2:	e011      	b.n	8005a08 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059e4:	f7fd f982 	bl	8002cec <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d803      	bhi.n	80059fc <HAL_SPI_Transmit+0x168>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fa:	d102      	bne.n	8005a02 <HAL_SPI_Transmit+0x16e>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d102      	bne.n	8005a08 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a06:	e074      	b.n	8005af2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1ce      	bne.n	80059b0 <HAL_SPI_Transmit+0x11c>
 8005a12:	e04c      	b.n	8005aae <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_SPI_Transmit+0x18e>
 8005a1c:	8afb      	ldrh	r3, [r7, #22]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d140      	bne.n	8005aa4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	7812      	ldrb	r2, [r2, #0]
 8005a2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a48:	e02c      	b.n	8005aa4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d113      	bne.n	8005a80 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	330c      	adds	r3, #12
 8005a62:	7812      	ldrb	r2, [r2, #0]
 8005a64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a7e:	e011      	b.n	8005aa4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a80:	f7fd f934 	bl	8002cec <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d803      	bhi.n	8005a98 <HAL_SPI_Transmit+0x204>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a96:	d102      	bne.n	8005a9e <HAL_SPI_Transmit+0x20a>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005aa2:	e026      	b.n	8005af2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1cd      	bne.n	8005a4a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f8b2 	bl	8005c1c <SPI_EndRxTxTransaction>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005acc:	2300      	movs	r3, #0
 8005ace:	613b      	str	r3, [r7, #16]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	613b      	str	r3, [r7, #16]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	77fb      	strb	r3, [r7, #31]
 8005aee:	e000      	b.n	8005af2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005af0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b02:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3720      	adds	r7, #32
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b1c:	f7fd f8e6 	bl	8002cec <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	4413      	add	r3, r2
 8005b2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b2c:	f7fd f8de 	bl	8002cec <HAL_GetTick>
 8005b30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b32:	4b39      	ldr	r3, [pc, #228]	; (8005c18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	015b      	lsls	r3, r3, #5
 8005b38:	0d1b      	lsrs	r3, r3, #20
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	fb02 f303 	mul.w	r3, r2, r3
 8005b40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b42:	e054      	b.n	8005bee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d050      	beq.n	8005bee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b4c:	f7fd f8ce 	bl	8002cec <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	69fa      	ldr	r2, [r7, #28]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d902      	bls.n	8005b62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d13d      	bne.n	8005bde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b7a:	d111      	bne.n	8005ba0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b84:	d004      	beq.n	8005b90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b8e:	d107      	bne.n	8005ba0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba8:	d10f      	bne.n	8005bca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e017      	b.n	8005c0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	bf0c      	ite	eq
 8005bfe:	2301      	moveq	r3, #1
 8005c00:	2300      	movne	r3, #0
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d19b      	bne.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3720      	adds	r7, #32
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000010 	.word	0x20000010

08005c1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af02      	add	r7, sp, #8
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2180      	movs	r1, #128	; 0x80
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7ff ff6a 	bl	8005b0c <SPI_WaitFlagStateUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d007      	beq.n	8005c4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	f043 0220 	orr.w	r2, r3, #32
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e000      	b.n	8005c50 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e041      	b.n	8005cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f839 	bl	8005cf6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4619      	mov	r1, r3
 8005c96:	4610      	mov	r0, r2
 8005c98:	f000 f9b4 	bl	8006004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr

08005d08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d001      	beq.n	8005d20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e03a      	b.n	8005d96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a18      	ldr	r2, [pc, #96]	; (8005da0 <HAL_TIM_Base_Start_IT+0x98>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00e      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x58>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4a:	d009      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x58>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a14      	ldr	r2, [pc, #80]	; (8005da4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d004      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x58>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a13      	ldr	r2, [pc, #76]	; (8005da8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d111      	bne.n	8005d84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b06      	cmp	r3, #6
 8005d70:	d010      	beq.n	8005d94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0201 	orr.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d82:	e007      	b.n	8005d94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr
 8005da0:	40012c00 	.word	0x40012c00
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800

08005dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d122      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d11b      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f06f 0202 	mvn.w	r2, #2
 8005dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f8ed 	bl	8005fce <HAL_TIM_IC_CaptureCallback>
 8005df4:	e005      	b.n	8005e02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f8e0 	bl	8005fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f8ef 	bl	8005fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0304 	and.w	r3, r3, #4
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d122      	bne.n	8005e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d11b      	bne.n	8005e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0204 	mvn.w	r2, #4
 8005e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2202      	movs	r2, #2
 8005e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f8c3 	bl	8005fce <HAL_TIM_IC_CaptureCallback>
 8005e48:	e005      	b.n	8005e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f8b6 	bl	8005fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f8c5 	bl	8005fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d122      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d11b      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0208 	mvn.w	r2, #8
 8005e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2204      	movs	r2, #4
 8005e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f899 	bl	8005fce <HAL_TIM_IC_CaptureCallback>
 8005e9c:	e005      	b.n	8005eaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f88c 	bl	8005fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f89b 	bl	8005fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0310 	and.w	r3, r3, #16
 8005eba:	2b10      	cmp	r3, #16
 8005ebc:	d122      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b10      	cmp	r3, #16
 8005eca:	d11b      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0210 	mvn.w	r2, #16
 8005ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2208      	movs	r2, #8
 8005eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f86f 	bl	8005fce <HAL_TIM_IC_CaptureCallback>
 8005ef0:	e005      	b.n	8005efe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f862 	bl	8005fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f871 	bl	8005fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d10e      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d107      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0201 	mvn.w	r2, #1
 8005f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fa fef6 	bl	8000d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3a:	2b80      	cmp	r3, #128	; 0x80
 8005f3c:	d10e      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f48:	2b80      	cmp	r3, #128	; 0x80
 8005f4a:	d107      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f8bf 	bl	80060da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f66:	2b40      	cmp	r3, #64	; 0x40
 8005f68:	d10e      	bne.n	8005f88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f74:	2b40      	cmp	r3, #64	; 0x40
 8005f76:	d107      	bne.n	8005f88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f835 	bl	8005ff2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	d10e      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d107      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f06f 0220 	mvn.w	r2, #32
 8005fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f88a 	bl	80060c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bc80      	pop	{r7}
 8005fcc:	4770      	bx	lr

08005fce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr

08005fe0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr

08005ff2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr

08006004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a29      	ldr	r2, [pc, #164]	; (80060bc <TIM_Base_SetConfig+0xb8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00b      	beq.n	8006034 <TIM_Base_SetConfig+0x30>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006022:	d007      	beq.n	8006034 <TIM_Base_SetConfig+0x30>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a26      	ldr	r2, [pc, #152]	; (80060c0 <TIM_Base_SetConfig+0xbc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_Base_SetConfig+0x30>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a25      	ldr	r2, [pc, #148]	; (80060c4 <TIM_Base_SetConfig+0xc0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d108      	bne.n	8006046 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a1c      	ldr	r2, [pc, #112]	; (80060bc <TIM_Base_SetConfig+0xb8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00b      	beq.n	8006066 <TIM_Base_SetConfig+0x62>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006054:	d007      	beq.n	8006066 <TIM_Base_SetConfig+0x62>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a19      	ldr	r2, [pc, #100]	; (80060c0 <TIM_Base_SetConfig+0xbc>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d003      	beq.n	8006066 <TIM_Base_SetConfig+0x62>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a18      	ldr	r2, [pc, #96]	; (80060c4 <TIM_Base_SetConfig+0xc0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d108      	bne.n	8006078 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800606c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4313      	orrs	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a07      	ldr	r2, [pc, #28]	; (80060bc <TIM_Base_SetConfig+0xb8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d103      	bne.n	80060ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	615a      	str	r2, [r3, #20]
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bc80      	pop	{r7}
 80060ba:	4770      	bx	lr
 80060bc:	40012c00 	.word	0x40012c00
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40000800 	.word	0x40000800

080060c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr

080060da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bc80      	pop	{r7}
 80060ea:	4770      	bx	lr

080060ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e03f      	b.n	800617e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fc fce6 	bl	8002ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2224      	movs	r2, #36	; 0x24
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800612e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fba9 	bl	8006888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695a      	ldr	r2, [r3, #20]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006154:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006164:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	4613      	mov	r3, r2
 8006192:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b20      	cmp	r3, #32
 800619e:	d11d      	bne.n	80061dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_UART_Receive_IT+0x26>
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e016      	b.n	80061de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_UART_Receive_IT+0x38>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e00f      	b.n	80061de <HAL_UART_Receive_IT+0x58>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	461a      	mov	r2, r3
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 f9cf 	bl	8006576 <UART_Start_Receive_IT>
 80061d8:	4603      	mov	r3, r0
 80061da:	e000      	b.n	80061de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80061dc:	2302      	movs	r3, #2
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08a      	sub	sp, #40	; 0x28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006208:	2300      	movs	r3, #0
 800620a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800620c:	2300      	movs	r3, #0
 800620e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10d      	bne.n	800623a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d008      	beq.n	800623a <HAL_UART_IRQHandler+0x52>
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa7f 	bl	8006736 <UART_Receive_IT>
      return;
 8006238:	e17b      	b.n	8006532 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80b1 	beq.w	80063a4 <HAL_UART_IRQHandler+0x1bc>
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d105      	bne.n	8006258 <HAL_UART_IRQHandler+0x70>
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 80a6 	beq.w	80063a4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <HAL_UART_IRQHandler+0x90>
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d005      	beq.n	8006278 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006270:	f043 0201 	orr.w	r2, r3, #1
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <HAL_UART_IRQHandler+0xb0>
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	f043 0202 	orr.w	r2, r3, #2
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <HAL_UART_IRQHandler+0xd0>
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b0:	f043 0204 	orr.w	r2, r3, #4
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00f      	beq.n	80062e2 <HAL_UART_IRQHandler+0xfa>
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d104      	bne.n	80062d6 <HAL_UART_IRQHandler+0xee>
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d005      	beq.n	80062e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	f043 0208 	orr.w	r2, r3, #8
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 811e 	beq.w	8006528 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d007      	beq.n	8006306 <HAL_UART_IRQHandler+0x11e>
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fa18 	bl	8006736 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	bf14      	ite	ne
 8006314:	2301      	movne	r3, #1
 8006316:	2300      	moveq	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	f003 0308 	and.w	r3, r3, #8
 8006324:	2b00      	cmp	r3, #0
 8006326:	d102      	bne.n	800632e <HAL_UART_IRQHandler+0x146>
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d031      	beq.n	8006392 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f95a 	bl	80065e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d023      	beq.n	800638a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695a      	ldr	r2, [r3, #20]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006350:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006356:	2b00      	cmp	r3, #0
 8006358:	d013      	beq.n	8006382 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635e:	4a76      	ldr	r2, [pc, #472]	; (8006538 <HAL_UART_IRQHandler+0x350>)
 8006360:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006366:	4618      	mov	r0, r3
 8006368:	f7fc fde4 	bl	8002f34 <HAL_DMA_Abort_IT>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d016      	beq.n	80063a0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800637c:	4610      	mov	r0, r2
 800637e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006380:	e00e      	b.n	80063a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f8e3 	bl	800654e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006388:	e00a      	b.n	80063a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f8df 	bl	800654e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006390:	e006      	b.n	80063a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f8db 	bl	800654e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800639e:	e0c3      	b.n	8006528 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a0:	bf00      	nop
    return;
 80063a2:	e0c1      	b.n	8006528 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	f040 80a1 	bne.w	80064f0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	f003 0310 	and.w	r3, r3, #16
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 809b 	beq.w	80064f0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 8095 	beq.w	80064f0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d04e      	beq.n	8006488 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80063f4:	8a3b      	ldrh	r3, [r7, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 8098 	beq.w	800652c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006400:	8a3a      	ldrh	r2, [r7, #16]
 8006402:	429a      	cmp	r2, r3
 8006404:	f080 8092 	bcs.w	800652c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8a3a      	ldrh	r2, [r7, #16]
 800640c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	2b20      	cmp	r3, #32
 8006416:	d02b      	beq.n	8006470 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006426:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695a      	ldr	r2, [r3, #20]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0201 	bic.w	r2, r2, #1
 8006436:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695a      	ldr	r2, [r3, #20]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006446:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0210 	bic.w	r2, r2, #16
 8006464:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	4618      	mov	r0, r3
 800646c:	f7fc fd27 	bl	8002ebe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006478:	b29b      	uxth	r3, r3
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	b29b      	uxth	r3, r3
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f86d 	bl	8006560 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006486:	e051      	b.n	800652c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006490:	b29b      	uxth	r3, r3
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800649a:	b29b      	uxth	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d047      	beq.n	8006530 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80064a0:	8a7b      	ldrh	r3, [r7, #18]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d044      	beq.n	8006530 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064b4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695a      	ldr	r2, [r3, #20]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0201 	bic.w	r2, r2, #1
 80064c4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0210 	bic.w	r2, r2, #16
 80064e2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064e4:	8a7b      	ldrh	r3, [r7, #18]
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f839 	bl	8006560 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80064ee:	e01f      	b.n	8006530 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d008      	beq.n	800650c <HAL_UART_IRQHandler+0x324>
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f8af 	bl	8006668 <UART_Transmit_IT>
    return;
 800650a:	e012      	b.n	8006532 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00d      	beq.n	8006532 <HAL_UART_IRQHandler+0x34a>
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f8f0 	bl	8006706 <UART_EndTransmit_IT>
    return;
 8006526:	e004      	b.n	8006532 <HAL_UART_IRQHandler+0x34a>
    return;
 8006528:	bf00      	nop
 800652a:	e002      	b.n	8006532 <HAL_UART_IRQHandler+0x34a>
      return;
 800652c:	bf00      	nop
 800652e:	e000      	b.n	8006532 <HAL_UART_IRQHandler+0x34a>
      return;
 8006530:	bf00      	nop
  }
}
 8006532:	3728      	adds	r7, #40	; 0x28
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	08006641 	.word	0x08006641

0800653c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr

0800654e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	bc80      	pop	{r7}
 800655e:	4770      	bx	lr

08006560 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr

08006576 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006576:	b480      	push	{r7}
 8006578:	b085      	sub	sp, #20
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	4613      	mov	r3, r2
 8006582:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	88fa      	ldrh	r2, [r7, #6]
 800658e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	88fa      	ldrh	r2, [r7, #6]
 8006594:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2222      	movs	r2, #34	; 0x22
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ba:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695a      	ldr	r2, [r3, #20]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0220 	orr.w	r2, r2, #32
 80065da:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bc80      	pop	{r7}
 80065e6:	4770      	bx	lr

080065e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	695a      	ldr	r2, [r3, #20]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0201 	bic.w	r2, r2, #1
 800660e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	2b01      	cmp	r3, #1
 8006616:	d107      	bne.n	8006628 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0210 	bic.w	r2, r2, #16
 8006626:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	bc80      	pop	{r7}
 800663e:	4770      	bx	lr

08006640 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f7ff ff77 	bl	800654e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006660:	bf00      	nop
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b21      	cmp	r3, #33	; 0x21
 800667a:	d13e      	bne.n	80066fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006684:	d114      	bne.n	80066b0 <UART_Transmit_IT+0x48>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d110      	bne.n	80066b0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	461a      	mov	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	1c9a      	adds	r2, r3, #2
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	621a      	str	r2, [r3, #32]
 80066ae:	e008      	b.n	80066c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	1c59      	adds	r1, r3, #1
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6211      	str	r1, [r2, #32]
 80066ba:	781a      	ldrb	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	4619      	mov	r1, r3
 80066d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10f      	bne.n	80066f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	e000      	b.n	80066fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066fa:	2302      	movs	r3, #2
  }
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr

08006706 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b082      	sub	sp, #8
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800671c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2220      	movs	r2, #32
 8006722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff ff08 	bl	800653c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b086      	sub	sp, #24
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b22      	cmp	r3, #34	; 0x22
 8006748:	f040 8099 	bne.w	800687e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006754:	d117      	bne.n	8006786 <UART_Receive_IT+0x50>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d113      	bne.n	8006786 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800675e:	2300      	movs	r3, #0
 8006760:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006766:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	b29b      	uxth	r3, r3
 8006770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006774:	b29a      	uxth	r2, r3
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677e:	1c9a      	adds	r2, r3, #2
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	629a      	str	r2, [r3, #40]	; 0x28
 8006784:	e026      	b.n	80067d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800678c:	2300      	movs	r3, #0
 800678e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006798:	d007      	beq.n	80067aa <UART_Receive_IT+0x74>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10a      	bne.n	80067b8 <UART_Receive_IT+0x82>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d106      	bne.n	80067b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	e008      	b.n	80067ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29b      	uxth	r3, r3
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	4619      	mov	r1, r3
 80067e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d148      	bne.n	800687a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 0220 	bic.w	r2, r2, #32
 80067f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695a      	ldr	r2, [r3, #20]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 0201 	bic.w	r2, r2, #1
 8006816:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	2b01      	cmp	r3, #1
 8006826:	d123      	bne.n	8006870 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0210 	bic.w	r2, r2, #16
 800683c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0310 	and.w	r3, r3, #16
 8006848:	2b10      	cmp	r3, #16
 800684a:	d10a      	bne.n	8006862 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7ff fe79 	bl	8006560 <HAL_UARTEx_RxEventCallback>
 800686e:	e002      	b.n	8006876 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7fa f891 	bl	8000998 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	e002      	b.n	8006880 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	e000      	b.n	8006880 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800687e:	2302      	movs	r3, #2
  }
}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80068c2:	f023 030c 	bic.w	r3, r3, #12
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6812      	ldr	r2, [r2, #0]
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	430b      	orrs	r3, r1
 80068ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699a      	ldr	r2, [r3, #24]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a2c      	ldr	r2, [pc, #176]	; (800699c <UART_SetConfig+0x114>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d103      	bne.n	80068f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80068f0:	f7fe fe34 	bl	800555c <HAL_RCC_GetPCLK2Freq>
 80068f4:	60f8      	str	r0, [r7, #12]
 80068f6:	e002      	b.n	80068fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80068f8:	f7fe fe1c 	bl	8005534 <HAL_RCC_GetPCLK1Freq>
 80068fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009a      	lsls	r2, r3, #2
 8006908:	441a      	add	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	fbb2 f3f3 	udiv	r3, r2, r3
 8006914:	4a22      	ldr	r2, [pc, #136]	; (80069a0 <UART_SetConfig+0x118>)
 8006916:	fba2 2303 	umull	r2, r3, r2, r3
 800691a:	095b      	lsrs	r3, r3, #5
 800691c:	0119      	lsls	r1, r3, #4
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4613      	mov	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	009a      	lsls	r2, r3, #2
 8006928:	441a      	add	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	fbb2 f2f3 	udiv	r2, r2, r3
 8006934:	4b1a      	ldr	r3, [pc, #104]	; (80069a0 <UART_SetConfig+0x118>)
 8006936:	fba3 0302 	umull	r0, r3, r3, r2
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	2064      	movs	r0, #100	; 0x64
 800693e:	fb00 f303 	mul.w	r3, r0, r3
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	011b      	lsls	r3, r3, #4
 8006946:	3332      	adds	r3, #50	; 0x32
 8006948:	4a15      	ldr	r2, [pc, #84]	; (80069a0 <UART_SetConfig+0x118>)
 800694a:	fba2 2303 	umull	r2, r3, r2, r3
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006954:	4419      	add	r1, r3
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	009a      	lsls	r2, r3, #2
 8006960:	441a      	add	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	fbb2 f2f3 	udiv	r2, r2, r3
 800696c:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <UART_SetConfig+0x118>)
 800696e:	fba3 0302 	umull	r0, r3, r3, r2
 8006972:	095b      	lsrs	r3, r3, #5
 8006974:	2064      	movs	r0, #100	; 0x64
 8006976:	fb00 f303 	mul.w	r3, r0, r3
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	3332      	adds	r3, #50	; 0x32
 8006980:	4a07      	ldr	r2, [pc, #28]	; (80069a0 <UART_SetConfig+0x118>)
 8006982:	fba2 2303 	umull	r2, r3, r2, r3
 8006986:	095b      	lsrs	r3, r3, #5
 8006988:	f003 020f 	and.w	r2, r3, #15
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	440a      	add	r2, r1
 8006992:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006994:	bf00      	nop
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	40013800 	.word	0x40013800
 80069a0:	51eb851f 	.word	0x51eb851f

080069a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069a4:	b084      	sub	sp, #16
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	f107 0014 	add.w	r0, r7, #20
 80069b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	bc80      	pop	{r7}
 80069c0:	b004      	add	sp, #16
 80069c2:	4770      	bx	lr

080069c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80069d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80069d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	b29a      	uxth	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80069f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80069fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	4013      	ands	r3, r2
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr

08006a24 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr

08006a3c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	f107 0014 	add.w	r0, r7, #20
 8006a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	b004      	add	sp, #16
 8006a7a:	4770      	bx	lr

08006a7c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b09b      	sub	sp, #108	; 0x6c
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	78db      	ldrb	r3, [r3, #3]
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d81f      	bhi.n	8006aee <USB_ActivateEndpoint+0x72>
 8006aae:	a201      	add	r2, pc, #4	; (adr r2, 8006ab4 <USB_ActivateEndpoint+0x38>)
 8006ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab4:	08006ac5 	.word	0x08006ac5
 8006ab8:	08006ae1 	.word	0x08006ae1
 8006abc:	08006af7 	.word	0x08006af7
 8006ac0:	08006ad3 	.word	0x08006ad3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006ac4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006ac8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006acc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006ad0:	e012      	b.n	8006af8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006ad2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006ad6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006ada:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006ade:	e00b      	b.n	8006af8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006ae0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006ae4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ae8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006aec:	e004      	b.n	8006af8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006af4:	e000      	b.n	8006af8 <USB_ActivateEndpoint+0x7c>
      break;
 8006af6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	441a      	add	r2, r3
 8006b02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	441a      	add	r2, r3
 8006b48:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	7b1b      	ldrb	r3, [r3, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f040 8149 	bne.w	8006dfc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 8084 	beq.w	8006c7c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	461a      	mov	r2, r3
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	4413      	add	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	011a      	lsls	r2, r3, #4
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	88db      	ldrh	r3, [r3, #6]
 8006b9c:	085b      	lsrs	r3, r3, #1
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	81fb      	strh	r3, [r7, #14]
 8006bb6:	89fb      	ldrh	r3, [r7, #14]
 8006bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01b      	beq.n	8006bf8 <USB_ActivateEndpoint+0x17c>
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd6:	81bb      	strh	r3, [r7, #12]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	441a      	add	r2, r3
 8006be2:	89bb      	ldrh	r3, [r7, #12]
 8006be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	78db      	ldrb	r3, [r3, #3]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d020      	beq.n	8006c42 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c16:	813b      	strh	r3, [r7, #8]
 8006c18:	893b      	ldrh	r3, [r7, #8]
 8006c1a:	f083 0320 	eor.w	r3, r3, #32
 8006c1e:	813b      	strh	r3, [r7, #8]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	441a      	add	r2, r3
 8006c2a:	893b      	ldrh	r3, [r7, #8]
 8006c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	8013      	strh	r3, [r2, #0]
 8006c40:	e27f      	b.n	8007142 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c58:	817b      	strh	r3, [r7, #10]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	441a      	add	r2, r3
 8006c64:	897b      	ldrh	r3, [r7, #10]
 8006c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	8013      	strh	r3, [r2, #0]
 8006c7a:	e262      	b.n	8007142 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	4413      	add	r3, r2
 8006c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	011a      	lsls	r2, r3, #4
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	88db      	ldrh	r3, [r3, #6]
 8006ca4:	085b      	lsrs	r3, r3, #1
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	4413      	add	r3, r2
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	011a      	lsls	r2, r3, #4
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	4413      	add	r3, r2
 8006cce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cd2:	623b      	str	r3, [r7, #32]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d112      	bne.n	8006d02 <USB_ActivateEndpoint+0x286>
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	801a      	strh	r2, [r3, #0]
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	801a      	strh	r2, [r3, #0]
 8006d00:	e02f      	b.n	8006d62 <USB_ActivateEndpoint+0x2e6>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b3e      	cmp	r3, #62	; 0x3e
 8006d08:	d813      	bhi.n	8006d32 <USB_ActivateEndpoint+0x2b6>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	085b      	lsrs	r3, r3, #1
 8006d10:	663b      	str	r3, [r7, #96]	; 0x60
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <USB_ActivateEndpoint+0x2a8>
 8006d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d20:	3301      	adds	r3, #1
 8006d22:	663b      	str	r3, [r7, #96]	; 0x60
 8006d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	029b      	lsls	r3, r3, #10
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	e017      	b.n	8006d62 <USB_ActivateEndpoint+0x2e6>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	095b      	lsrs	r3, r3, #5
 8006d38:	663b      	str	r3, [r7, #96]	; 0x60
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d102      	bne.n	8006d4c <USB_ActivateEndpoint+0x2d0>
 8006d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	663b      	str	r3, [r7, #96]	; 0x60
 8006d4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	029b      	lsls	r3, r3, #10
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	83fb      	strh	r3, [r7, #30]
 8006d70:	8bfb      	ldrh	r3, [r7, #30]
 8006d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d01b      	beq.n	8006db2 <USB_ActivateEndpoint+0x336>
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d90:	83bb      	strh	r3, [r7, #28]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	441a      	add	r2, r3
 8006d9c:	8bbb      	ldrh	r3, [r7, #28]
 8006d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc8:	837b      	strh	r3, [r7, #26]
 8006dca:	8b7b      	ldrh	r3, [r7, #26]
 8006dcc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dd0:	837b      	strh	r3, [r7, #26]
 8006dd2:	8b7b      	ldrh	r3, [r7, #26]
 8006dd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006dd8:	837b      	strh	r3, [r7, #26]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	441a      	add	r2, r3
 8006de4:	8b7b      	ldrh	r3, [r7, #26]
 8006de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	8013      	strh	r3, [r2, #0]
 8006dfa:	e1a2      	b.n	8007142 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	441a      	add	r2, r3
 8006e20:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e2c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	461a      	mov	r2, r3
 8006e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e48:	4413      	add	r3, r2
 8006e4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	011a      	lsls	r2, r3, #4
 8006e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e5a:	657b      	str	r3, [r7, #84]	; 0x54
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	891b      	ldrh	r3, [r3, #8]
 8006e60:	085b      	lsrs	r3, r3, #1
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e6a:	801a      	strh	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	653b      	str	r3, [r7, #80]	; 0x50
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e7c:	4413      	add	r3, r2
 8006e7e:	653b      	str	r3, [r7, #80]	; 0x50
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	011a      	lsls	r2, r3, #4
 8006e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	895b      	ldrh	r3, [r3, #10]
 8006e94:	085b      	lsrs	r3, r3, #1
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e9e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	785b      	ldrb	r3, [r3, #1]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f040 8091 	bne.w	8006fcc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006eb8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d01b      	beq.n	8006efa <USB_ActivateEndpoint+0x47e>
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	873b      	strh	r3, [r7, #56]	; 0x38
 8006f08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d01b      	beq.n	8006f4a <USB_ActivateEndpoint+0x4ce>
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f28:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	441a      	add	r2, r3
 8006f34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f60:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006f62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006f64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f68:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006f6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006f6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f70:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	441a      	add	r2, r3
 8006f7c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa8:	867b      	strh	r3, [r7, #50]	; 0x32
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	441a      	add	r2, r3
 8006fb4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	8013      	strh	r3, [r2, #0]
 8006fca:	e0ba      	b.n	8007142 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006fdc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d01d      	beq.n	8007024 <USB_ActivateEndpoint+0x5a8>
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	441a      	add	r2, r3
 800700c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800701c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007020:	b29b      	uxth	r3, r3
 8007022:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007034:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01d      	beq.n	800707c <USB_ActivateEndpoint+0x600>
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	b29b      	uxth	r3, r3
 800704e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007056:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	441a      	add	r2, r3
 8007064:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007074:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007078:	b29b      	uxth	r3, r3
 800707a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	78db      	ldrb	r3, [r3, #3]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d024      	beq.n	80070ce <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	b29b      	uxth	r3, r3
 8007092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800709a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800709e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070a2:	f083 0320 	eor.w	r3, r3, #32
 80070a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	441a      	add	r2, r3
 80070b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	8013      	strh	r3, [r2, #0]
 80070cc:	e01d      	b.n	800710a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	441a      	add	r2, r3
 80070f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80070f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007106:	b29b      	uxth	r3, r3
 8007108:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800711c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007120:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	441a      	add	r2, r3
 800712c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800712e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800713a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713e:	b29b      	uxth	r3, r3
 8007140:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007142:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007146:	4618      	mov	r0, r3
 8007148:	376c      	adds	r7, #108	; 0x6c
 800714a:	46bd      	mov	sp, r7
 800714c:	bc80      	pop	{r7}
 800714e:	4770      	bx	lr

08007150 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007150:	b480      	push	{r7}
 8007152:	b08d      	sub	sp, #52	; 0x34
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	7b1b      	ldrb	r3, [r3, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	f040 808e 	bne.w	8007280 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	785b      	ldrb	r3, [r3, #1]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d044      	beq.n	80071f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	81bb      	strh	r3, [r7, #12]
 800717a:	89bb      	ldrh	r3, [r7, #12]
 800717c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	d01b      	beq.n	80071bc <USB_DeactivateEndpoint+0x6c>
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719a:	817b      	strh	r3, [r7, #10]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	441a      	add	r2, r3
 80071a6:	897b      	ldrh	r3, [r7, #10]
 80071a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071d2:	813b      	strh	r3, [r7, #8]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	441a      	add	r2, r3
 80071de:	893b      	ldrh	r3, [r7, #8]
 80071e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	8013      	strh	r3, [r2, #0]
 80071f4:	e192      	b.n	800751c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	827b      	strh	r3, [r7, #18]
 8007204:	8a7b      	ldrh	r3, [r7, #18]
 8007206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d01b      	beq.n	8007246 <USB_DeactivateEndpoint+0xf6>
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007224:	823b      	strh	r3, [r7, #16]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	441a      	add	r2, r3
 8007230:	8a3b      	ldrh	r3, [r7, #16]
 8007232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800723a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800723e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007242:	b29b      	uxth	r3, r3
 8007244:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725c:	81fb      	strh	r3, [r7, #14]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	441a      	add	r2, r3
 8007268:	89fb      	ldrh	r3, [r7, #14]
 800726a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727a:	b29b      	uxth	r3, r3
 800727c:	8013      	strh	r3, [r2, #0]
 800727e:	e14d      	b.n	800751c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	785b      	ldrb	r3, [r3, #1]
 8007284:	2b00      	cmp	r3, #0
 8007286:	f040 80a5 	bne.w	80073d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	843b      	strh	r3, [r7, #32]
 8007298:	8c3b      	ldrh	r3, [r7, #32]
 800729a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d01b      	beq.n	80072da <USB_DeactivateEndpoint+0x18a>
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b8:	83fb      	strh	r3, [r7, #30]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	441a      	add	r2, r3
 80072c4:	8bfb      	ldrh	r3, [r7, #30]
 80072c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	83bb      	strh	r3, [r7, #28]
 80072e8:	8bbb      	ldrh	r3, [r7, #28]
 80072ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d01b      	beq.n	800732a <USB_DeactivateEndpoint+0x1da>
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007308:	837b      	strh	r3, [r7, #26]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	441a      	add	r2, r3
 8007314:	8b7b      	ldrh	r3, [r7, #26]
 8007316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800731a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800731e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007322:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007326:	b29b      	uxth	r3, r3
 8007328:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800733c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007340:	833b      	strh	r3, [r7, #24]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	441a      	add	r2, r3
 800734c:	8b3b      	ldrh	r3, [r7, #24]
 800734e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800735a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800735e:	b29b      	uxth	r3, r3
 8007360:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	b29b      	uxth	r3, r3
 8007370:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007378:	82fb      	strh	r3, [r7, #22]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	441a      	add	r2, r3
 8007384:	8afb      	ldrh	r3, [r7, #22]
 8007386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800738a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800738e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007396:	b29b      	uxth	r3, r3
 8007398:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b0:	82bb      	strh	r3, [r7, #20]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	441a      	add	r2, r3
 80073bc:	8abb      	ldrh	r3, [r7, #20]
 80073be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	8013      	strh	r3, [r2, #0]
 80073d2:	e0a3      	b.n	800751c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80073e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80073e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01b      	beq.n	8007424 <USB_DeactivateEndpoint+0x2d4>
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007402:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	441a      	add	r2, r3
 800740e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800741c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007420:	b29b      	uxth	r3, r3
 8007422:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007432:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007438:	2b00      	cmp	r3, #0
 800743a:	d01b      	beq.n	8007474 <USB_DeactivateEndpoint+0x324>
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	b29b      	uxth	r3, r3
 800744a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800744e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007452:	853b      	strh	r3, [r7, #40]	; 0x28
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	441a      	add	r2, r3
 800745e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800746c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007470:	b29b      	uxth	r3, r3
 8007472:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	441a      	add	r2, r3
 8007496:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800749c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	441a      	add	r2, r3
 80074ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	441a      	add	r2, r3
 8007506:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800750c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007518:	b29b      	uxth	r3, r3
 800751a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3734      	adds	r7, #52	; 0x34
 8007522:	46bd      	mov	sp, r7
 8007524:	bc80      	pop	{r7}
 8007526:	4770      	bx	lr

08007528 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b0cc      	sub	sp, #304	; 0x130
 800752c:	af00      	add	r7, sp, #0
 800752e:	1d3b      	adds	r3, r7, #4
 8007530:	6018      	str	r0, [r3, #0]
 8007532:	463b      	mov	r3, r7
 8007534:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007536:	463b      	mov	r3, r7
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	785b      	ldrb	r3, [r3, #1]
 800753c:	2b01      	cmp	r3, #1
 800753e:	f040 872e 	bne.w	800839e <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007542:	463b      	mov	r3, r7
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	699a      	ldr	r2, [r3, #24]
 8007548:	463b      	mov	r3, r7
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	429a      	cmp	r2, r3
 8007550:	d905      	bls.n	800755e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007552:	463b      	mov	r3, r7
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800755c:	e004      	b.n	8007568 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800755e:	463b      	mov	r3, r7
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007568:	463b      	mov	r3, r7
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	7b1b      	ldrb	r3, [r3, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d134      	bne.n	80075dc <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007572:	463b      	mov	r3, r7
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6959      	ldr	r1, [r3, #20]
 8007578:	463b      	mov	r3, r7
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	88da      	ldrh	r2, [r3, #6]
 800757e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007582:	b29b      	uxth	r3, r3
 8007584:	1d38      	adds	r0, r7, #4
 8007586:	6800      	ldr	r0, [r0, #0]
 8007588:	f001 fc03 	bl	8008d92 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800758c:	f107 0310 	add.w	r3, r7, #16
 8007590:	1d3a      	adds	r2, r7, #4
 8007592:	6812      	ldr	r2, [r2, #0]
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	1d3b      	adds	r3, r7, #4
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800759e:	b29b      	uxth	r3, r3
 80075a0:	4619      	mov	r1, r3
 80075a2:	f107 0310 	add.w	r3, r7, #16
 80075a6:	f107 0210 	add.w	r2, r7, #16
 80075aa:	6812      	ldr	r2, [r2, #0]
 80075ac:	440a      	add	r2, r1
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	463b      	mov	r3, r7
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	011a      	lsls	r2, r3, #4
 80075b8:	f107 0310 	add.w	r3, r7, #16
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4413      	add	r3, r2
 80075c0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80075c4:	f107 030c 	add.w	r3, r7, #12
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	f107 030c 	add.w	r3, r7, #12
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	801a      	strh	r2, [r3, #0]
 80075d8:	f000 beac 	b.w	8008334 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80075dc:	463b      	mov	r3, r7
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	78db      	ldrb	r3, [r3, #3]
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	f040 838c 	bne.w	8007d00 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80075e8:	463b      	mov	r3, r7
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6a1a      	ldr	r2, [r3, #32]
 80075ee:	463b      	mov	r3, r7
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	f240 8330 	bls.w	8007c5a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80075fa:	1d3b      	adds	r3, r7, #4
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	463b      	mov	r3, r7
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	b29b      	uxth	r3, r3
 800760c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007614:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007618:	1d3b      	adds	r3, r7, #4
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	463b      	mov	r3, r7
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	441a      	add	r2, r3
 8007626:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800762a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800762e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007632:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800763a:	b29b      	uxth	r3, r3
 800763c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800763e:	463b      	mov	r3, r7
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6a1a      	ldr	r2, [r3, #32]
 8007644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007648:	1ad2      	subs	r2, r2, r3
 800764a:	463b      	mov	r3, r7
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007650:	1d3b      	adds	r3, r7, #4
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	463b      	mov	r3, r7
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	b29b      	uxth	r3, r3
 8007662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 819e 	beq.w	80079a8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800766c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007670:	1d3a      	adds	r2, r7, #4
 8007672:	6812      	ldr	r2, [r2, #0]
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	463b      	mov	r3, r7
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	785b      	ldrb	r3, [r3, #1]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d17a      	bne.n	8007776 <USB_EPStartXfer+0x24e>
 8007680:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007684:	1d3a      	adds	r2, r7, #4
 8007686:	6812      	ldr	r2, [r2, #0]
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	1d3b      	adds	r3, r7, #4
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007692:	b29b      	uxth	r3, r3
 8007694:	4619      	mov	r1, r3
 8007696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800769a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800769e:	6812      	ldr	r2, [r2, #0]
 80076a0:	440a      	add	r2, r1
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	463b      	mov	r3, r7
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	011a      	lsls	r2, r3, #4
 80076ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4413      	add	r3, r2
 80076b4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80076b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d11a      	bne.n	80076fc <USB_EPStartXfer+0x1d4>
 80076c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	801a      	strh	r2, [r3, #0]
 80076de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	801a      	strh	r2, [r3, #0]
 80076fa:	e062      	b.n	80077c2 <USB_EPStartXfer+0x29a>
 80076fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007700:	2b3e      	cmp	r3, #62	; 0x3e
 8007702:	d819      	bhi.n	8007738 <USB_EPStartXfer+0x210>
 8007704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007708:	085b      	lsrs	r3, r3, #1
 800770a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800770e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <USB_EPStartXfer+0x1fc>
 800771a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800771e:	3301      	adds	r3, #1
 8007720:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007724:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007728:	b29b      	uxth	r3, r3
 800772a:	029b      	lsls	r3, r3, #10
 800772c:	b29a      	uxth	r2, r3
 800772e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	801a      	strh	r2, [r3, #0]
 8007736:	e044      	b.n	80077c2 <USB_EPStartXfer+0x29a>
 8007738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800773c:	095b      	lsrs	r3, r3, #5
 800773e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007746:	f003 031f 	and.w	r3, r3, #31
 800774a:	2b00      	cmp	r3, #0
 800774c:	d104      	bne.n	8007758 <USB_EPStartXfer+0x230>
 800774e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007752:	3b01      	subs	r3, #1
 8007754:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007758:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800775c:	b29b      	uxth	r3, r3
 800775e:	029b      	lsls	r3, r3, #10
 8007760:	b29b      	uxth	r3, r3
 8007762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800776a:	b29a      	uxth	r2, r3
 800776c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	801a      	strh	r2, [r3, #0]
 8007774:	e025      	b.n	80077c2 <USB_EPStartXfer+0x29a>
 8007776:	463b      	mov	r3, r7
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	785b      	ldrb	r3, [r3, #1]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d120      	bne.n	80077c2 <USB_EPStartXfer+0x29a>
 8007780:	1d3b      	adds	r3, r7, #4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007788:	b29b      	uxth	r3, r3
 800778a:	4619      	mov	r1, r3
 800778c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007790:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007794:	6812      	ldr	r2, [r2, #0]
 8007796:	440a      	add	r2, r1
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	463b      	mov	r3, r7
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	011a      	lsls	r2, r3, #4
 80077a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4413      	add	r3, r2
 80077aa:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80077ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80077c2:	463b      	mov	r3, r7
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	895b      	ldrh	r3, [r3, #10]
 80077c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077cc:	463b      	mov	r3, r7
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6959      	ldr	r1, [r3, #20]
 80077d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077dc:	1d38      	adds	r0, r7, #4
 80077de:	6800      	ldr	r0, [r0, #0]
 80077e0:	f001 fad7 	bl	8008d92 <USB_WritePMA>
            ep->xfer_buff += len;
 80077e4:	463b      	mov	r3, r7
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695a      	ldr	r2, [r3, #20]
 80077ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ee:	441a      	add	r2, r3
 80077f0:	463b      	mov	r3, r7
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077f6:	463b      	mov	r3, r7
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6a1a      	ldr	r2, [r3, #32]
 80077fc:	463b      	mov	r3, r7
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	429a      	cmp	r2, r3
 8007804:	d909      	bls.n	800781a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8007806:	463b      	mov	r3, r7
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6a1a      	ldr	r2, [r3, #32]
 800780c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007810:	1ad2      	subs	r2, r2, r3
 8007812:	463b      	mov	r3, r7
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	621a      	str	r2, [r3, #32]
 8007818:	e008      	b.n	800782c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800781a:	463b      	mov	r3, r7
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007824:	463b      	mov	r3, r7
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2200      	movs	r2, #0
 800782a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800782c:	463b      	mov	r3, r7
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d17a      	bne.n	800792c <USB_EPStartXfer+0x404>
 8007836:	f107 0318 	add.w	r3, r7, #24
 800783a:	1d3a      	adds	r2, r7, #4
 800783c:	6812      	ldr	r2, [r2, #0]
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	1d3b      	adds	r3, r7, #4
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007848:	b29b      	uxth	r3, r3
 800784a:	4619      	mov	r1, r3
 800784c:	f107 0318 	add.w	r3, r7, #24
 8007850:	f107 0218 	add.w	r2, r7, #24
 8007854:	6812      	ldr	r2, [r2, #0]
 8007856:	440a      	add	r2, r1
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	463b      	mov	r3, r7
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	011a      	lsls	r2, r3, #4
 8007862:	f107 0318 	add.w	r3, r7, #24
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4413      	add	r3, r2
 800786a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800786e:	f107 0314 	add.w	r3, r7, #20
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007878:	2b00      	cmp	r3, #0
 800787a:	d11a      	bne.n	80078b2 <USB_EPStartXfer+0x38a>
 800787c:	f107 0314 	add.w	r3, r7, #20
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800788a:	b29a      	uxth	r2, r3
 800788c:	f107 0314 	add.w	r3, r7, #20
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	801a      	strh	r2, [r3, #0]
 8007894:	f107 0314 	add.w	r3, r7, #20
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29b      	uxth	r3, r3
 800789e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	f107 0314 	add.w	r3, r7, #20
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	801a      	strh	r2, [r3, #0]
 80078b0:	e067      	b.n	8007982 <USB_EPStartXfer+0x45a>
 80078b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b6:	2b3e      	cmp	r3, #62	; 0x3e
 80078b8:	d819      	bhi.n	80078ee <USB_EPStartXfer+0x3c6>
 80078ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078be:	085b      	lsrs	r3, r3, #1
 80078c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80078c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d004      	beq.n	80078da <USB_EPStartXfer+0x3b2>
 80078d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80078d4:	3301      	adds	r3, #1
 80078d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80078da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80078de:	b29b      	uxth	r3, r3
 80078e0:	029b      	lsls	r3, r3, #10
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	f107 0314 	add.w	r3, r7, #20
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	801a      	strh	r2, [r3, #0]
 80078ec:	e049      	b.n	8007982 <USB_EPStartXfer+0x45a>
 80078ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f2:	095b      	lsrs	r3, r3, #5
 80078f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80078f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078fc:	f003 031f 	and.w	r3, r3, #31
 8007900:	2b00      	cmp	r3, #0
 8007902:	d104      	bne.n	800790e <USB_EPStartXfer+0x3e6>
 8007904:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007908:	3b01      	subs	r3, #1
 800790a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800790e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007912:	b29b      	uxth	r3, r3
 8007914:	029b      	lsls	r3, r3, #10
 8007916:	b29b      	uxth	r3, r3
 8007918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800791c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007920:	b29a      	uxth	r2, r3
 8007922:	f107 0314 	add.w	r3, r7, #20
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	801a      	strh	r2, [r3, #0]
 800792a:	e02a      	b.n	8007982 <USB_EPStartXfer+0x45a>
 800792c:	463b      	mov	r3, r7
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	785b      	ldrb	r3, [r3, #1]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d125      	bne.n	8007982 <USB_EPStartXfer+0x45a>
 8007936:	f107 0320 	add.w	r3, r7, #32
 800793a:	1d3a      	adds	r2, r7, #4
 800793c:	6812      	ldr	r2, [r2, #0]
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	1d3b      	adds	r3, r7, #4
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007948:	b29b      	uxth	r3, r3
 800794a:	4619      	mov	r1, r3
 800794c:	f107 0320 	add.w	r3, r7, #32
 8007950:	f107 0220 	add.w	r2, r7, #32
 8007954:	6812      	ldr	r2, [r2, #0]
 8007956:	440a      	add	r2, r1
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	463b      	mov	r3, r7
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	011a      	lsls	r2, r3, #4
 8007962:	f107 0320 	add.w	r3, r7, #32
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4413      	add	r3, r2
 800796a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800796e:	f107 031c 	add.w	r3, r7, #28
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007978:	b29a      	uxth	r2, r3
 800797a:	f107 031c 	add.w	r3, r7, #28
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007982:	463b      	mov	r3, r7
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	891b      	ldrh	r3, [r3, #8]
 8007988:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800798c:	463b      	mov	r3, r7
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6959      	ldr	r1, [r3, #20]
 8007992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007996:	b29b      	uxth	r3, r3
 8007998:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800799c:	1d38      	adds	r0, r7, #4
 800799e:	6800      	ldr	r0, [r0, #0]
 80079a0:	f001 f9f7 	bl	8008d92 <USB_WritePMA>
 80079a4:	f000 bcc6 	b.w	8008334 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079a8:	463b      	mov	r3, r7
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	785b      	ldrb	r3, [r3, #1]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d164      	bne.n	8007a7c <USB_EPStartXfer+0x554>
 80079b2:	1d3b      	adds	r3, r7, #4
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80079b8:	1d3b      	adds	r3, r7, #4
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	461a      	mov	r2, r3
 80079c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079c6:	4413      	add	r3, r2
 80079c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80079ca:	463b      	mov	r3, r7
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	011a      	lsls	r2, r3, #4
 80079d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079d4:	4413      	add	r3, r2
 80079d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079da:	647b      	str	r3, [r7, #68]	; 0x44
 80079dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d112      	bne.n	8007a0a <USB_EPStartXfer+0x4e2>
 80079e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079f2:	801a      	strh	r2, [r3, #0]
 80079f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a06:	801a      	strh	r2, [r3, #0]
 8007a08:	e057      	b.n	8007aba <USB_EPStartXfer+0x592>
 8007a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a0e:	2b3e      	cmp	r3, #62	; 0x3e
 8007a10:	d817      	bhi.n	8007a42 <USB_EPStartXfer+0x51a>
 8007a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a16:	085b      	lsrs	r3, r3, #1
 8007a18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d004      	beq.n	8007a32 <USB_EPStartXfer+0x50a>
 8007a28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	029b      	lsls	r3, r3, #10
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	e03b      	b.n	8007aba <USB_EPStartXfer+0x592>
 8007a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a46:	095b      	lsrs	r3, r3, #5
 8007a48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a50:	f003 031f 	and.w	r3, r3, #31
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d104      	bne.n	8007a62 <USB_EPStartXfer+0x53a>
 8007a58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	029b      	lsls	r3, r3, #10
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a78:	801a      	strh	r2, [r3, #0]
 8007a7a:	e01e      	b.n	8007aba <USB_EPStartXfer+0x592>
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	785b      	ldrb	r3, [r3, #1]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d119      	bne.n	8007aba <USB_EPStartXfer+0x592>
 8007a86:	1d3b      	adds	r3, r7, #4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a8c:	1d3b      	adds	r3, r7, #4
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	461a      	mov	r2, r3
 8007a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a9a:	4413      	add	r3, r2
 8007a9c:	653b      	str	r3, [r7, #80]	; 0x50
 8007a9e:	463b      	mov	r3, r7
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	011a      	lsls	r2, r3, #4
 8007aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007aba:	463b      	mov	r3, r7
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	891b      	ldrh	r3, [r3, #8]
 8007ac0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ac4:	463b      	mov	r3, r7
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6959      	ldr	r1, [r3, #20]
 8007aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ad4:	1d38      	adds	r0, r7, #4
 8007ad6:	6800      	ldr	r0, [r0, #0]
 8007ad8:	f001 f95b 	bl	8008d92 <USB_WritePMA>
            ep->xfer_buff += len;
 8007adc:	463b      	mov	r3, r7
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	695a      	ldr	r2, [r3, #20]
 8007ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae6:	441a      	add	r2, r3
 8007ae8:	463b      	mov	r3, r7
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007aee:	463b      	mov	r3, r7
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6a1a      	ldr	r2, [r3, #32]
 8007af4:	463b      	mov	r3, r7
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d909      	bls.n	8007b12 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8007afe:	463b      	mov	r3, r7
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6a1a      	ldr	r2, [r3, #32]
 8007b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b08:	1ad2      	subs	r2, r2, r3
 8007b0a:	463b      	mov	r3, r7
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	621a      	str	r2, [r3, #32]
 8007b10:	e008      	b.n	8007b24 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8007b12:	463b      	mov	r3, r7
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007b1c:	463b      	mov	r3, r7
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2200      	movs	r2, #0
 8007b22:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b24:	1d3b      	adds	r3, r7, #4
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	643b      	str	r3, [r7, #64]	; 0x40
 8007b2a:	463b      	mov	r3, r7
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	785b      	ldrb	r3, [r3, #1]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d164      	bne.n	8007bfe <USB_EPStartXfer+0x6d6>
 8007b34:	1d3b      	adds	r3, r7, #4
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b3a:	1d3b      	adds	r3, r7, #4
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	461a      	mov	r2, r3
 8007b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b48:	4413      	add	r3, r2
 8007b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b4c:	463b      	mov	r3, r7
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	011a      	lsls	r2, r3, #4
 8007b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b56:	4413      	add	r3, r2
 8007b58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d112      	bne.n	8007b8c <USB_EPStartXfer+0x664>
 8007b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b74:	801a      	strh	r2, [r3, #0]
 8007b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	e054      	b.n	8007c36 <USB_EPStartXfer+0x70e>
 8007b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b90:	2b3e      	cmp	r3, #62	; 0x3e
 8007b92:	d817      	bhi.n	8007bc4 <USB_EPStartXfer+0x69c>
 8007b94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b98:	085b      	lsrs	r3, r3, #1
 8007b9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d004      	beq.n	8007bb4 <USB_EPStartXfer+0x68c>
 8007baa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007bae:	3301      	adds	r3, #1
 8007bb0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007bb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	029b      	lsls	r3, r3, #10
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc0:	801a      	strh	r2, [r3, #0]
 8007bc2:	e038      	b.n	8007c36 <USB_EPStartXfer+0x70e>
 8007bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc8:	095b      	lsrs	r3, r3, #5
 8007bca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd2:	f003 031f 	and.w	r3, r3, #31
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d104      	bne.n	8007be4 <USB_EPStartXfer+0x6bc>
 8007bda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007bde:	3b01      	subs	r3, #1
 8007be0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007be4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	029b      	lsls	r3, r3, #10
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfa:	801a      	strh	r2, [r3, #0]
 8007bfc:	e01b      	b.n	8007c36 <USB_EPStartXfer+0x70e>
 8007bfe:	463b      	mov	r3, r7
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	785b      	ldrb	r3, [r3, #1]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d116      	bne.n	8007c36 <USB_EPStartXfer+0x70e>
 8007c08:	1d3b      	adds	r3, r7, #4
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	461a      	mov	r2, r3
 8007c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c16:	4413      	add	r3, r2
 8007c18:	643b      	str	r3, [r7, #64]	; 0x40
 8007c1a:	463b      	mov	r3, r7
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	011a      	lsls	r2, r3, #4
 8007c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c24:	4413      	add	r3, r2
 8007c26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c36:	463b      	mov	r3, r7
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	895b      	ldrh	r3, [r3, #10]
 8007c3c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c40:	463b      	mov	r3, r7
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6959      	ldr	r1, [r3, #20]
 8007c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c50:	1d38      	adds	r0, r7, #4
 8007c52:	6800      	ldr	r0, [r0, #0]
 8007c54:	f001 f89d 	bl	8008d92 <USB_WritePMA>
 8007c58:	e36c      	b.n	8008334 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6a1b      	ldr	r3, [r3, #32]
 8007c60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007c64:	1d3b      	adds	r3, r7, #4
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	463b      	mov	r3, r7
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007c82:	1d3b      	adds	r3, r7, #4
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	463b      	mov	r3, r7
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	441a      	add	r2, r3
 8007c90:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ca8:	1d3b      	adds	r3, r7, #4
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cae:	1d3b      	adds	r3, r7, #4
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	461a      	mov	r2, r3
 8007cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cbc:	4413      	add	r3, r2
 8007cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cc0:	463b      	mov	r3, r7
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	011a      	lsls	r2, r3, #4
 8007cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cca:	4413      	add	r3, r2
 8007ccc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007cdc:	463b      	mov	r3, r7
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	891b      	ldrh	r3, [r3, #8]
 8007ce2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6959      	ldr	r1, [r3, #20]
 8007cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007cf6:	1d38      	adds	r0, r7, #4
 8007cf8:	6800      	ldr	r0, [r0, #0]
 8007cfa:	f001 f84a 	bl	8008d92 <USB_WritePMA>
 8007cfe:	e319      	b.n	8008334 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007d00:	1d3b      	adds	r3, r7, #4
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	463b      	mov	r3, r7
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	881b      	ldrh	r3, [r3, #0]
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007d1e:	1d3b      	adds	r3, r7, #4
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	463b      	mov	r3, r7
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	441a      	add	r2, r3
 8007d2c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d38:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007d44:	463b      	mov	r3, r7
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6a1a      	ldr	r2, [r3, #32]
 8007d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d4e:	1ad2      	subs	r2, r2, r3
 8007d50:	463b      	mov	r3, r7
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d56:	1d3b      	adds	r3, r7, #4
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	463b      	mov	r3, r7
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 8162 	beq.w	8008036 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d72:	1d3b      	adds	r3, r7, #4
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d7a:	463b      	mov	r3, r7
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	785b      	ldrb	r3, [r3, #1]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d164      	bne.n	8007e4e <USB_EPStartXfer+0x926>
 8007d84:	1d3b      	adds	r3, r7, #4
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d8a:	1d3b      	adds	r3, r7, #4
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	461a      	mov	r2, r3
 8007d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d98:	4413      	add	r3, r2
 8007d9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d9c:	463b      	mov	r3, r7
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	011a      	lsls	r2, r3, #4
 8007da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007da6:	4413      	add	r3, r2
 8007da8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dac:	677b      	str	r3, [r7, #116]	; 0x74
 8007dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d112      	bne.n	8007ddc <USB_EPStartXfer+0x8b4>
 8007db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dc4:	801a      	strh	r2, [r3, #0]
 8007dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dd8:	801a      	strh	r2, [r3, #0]
 8007dda:	e057      	b.n	8007e8c <USB_EPStartXfer+0x964>
 8007ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de0:	2b3e      	cmp	r3, #62	; 0x3e
 8007de2:	d817      	bhi.n	8007e14 <USB_EPStartXfer+0x8ec>
 8007de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de8:	085b      	lsrs	r3, r3, #1
 8007dea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d004      	beq.n	8007e04 <USB_EPStartXfer+0x8dc>
 8007dfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007dfe:	3301      	adds	r3, #1
 8007e00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007e04:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	029b      	lsls	r3, r3, #10
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e10:	801a      	strh	r2, [r3, #0]
 8007e12:	e03b      	b.n	8007e8c <USB_EPStartXfer+0x964>
 8007e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e18:	095b      	lsrs	r3, r3, #5
 8007e1a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e22:	f003 031f 	and.w	r3, r3, #31
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d104      	bne.n	8007e34 <USB_EPStartXfer+0x90c>
 8007e2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007e34:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	029b      	lsls	r3, r3, #10
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e4a:	801a      	strh	r2, [r3, #0]
 8007e4c:	e01e      	b.n	8007e8c <USB_EPStartXfer+0x964>
 8007e4e:	463b      	mov	r3, r7
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	785b      	ldrb	r3, [r3, #1]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d119      	bne.n	8007e8c <USB_EPStartXfer+0x964>
 8007e58:	1d3b      	adds	r3, r7, #4
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	461a      	mov	r2, r3
 8007e64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e68:	4413      	add	r3, r2
 8007e6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e6e:	463b      	mov	r3, r7
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	011a      	lsls	r2, r3, #4
 8007e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e8a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007e8c:	463b      	mov	r3, r7
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	895b      	ldrh	r3, [r3, #10]
 8007e92:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e96:	463b      	mov	r3, r7
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6959      	ldr	r1, [r3, #20]
 8007e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ea6:	1d38      	adds	r0, r7, #4
 8007ea8:	6800      	ldr	r0, [r0, #0]
 8007eaa:	f000 ff72 	bl	8008d92 <USB_WritePMA>
          ep->xfer_buff += len;
 8007eae:	463b      	mov	r3, r7
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	695a      	ldr	r2, [r3, #20]
 8007eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb8:	441a      	add	r2, r3
 8007eba:	463b      	mov	r3, r7
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007ec0:	463b      	mov	r3, r7
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6a1a      	ldr	r2, [r3, #32]
 8007ec6:	463b      	mov	r3, r7
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d909      	bls.n	8007ee4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8007ed0:	463b      	mov	r3, r7
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6a1a      	ldr	r2, [r3, #32]
 8007ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eda:	1ad2      	subs	r2, r2, r3
 8007edc:	463b      	mov	r3, r7
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	621a      	str	r2, [r3, #32]
 8007ee2:	e008      	b.n	8007ef6 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007ee4:	463b      	mov	r3, r7
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007eee:	463b      	mov	r3, r7
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 821a 	beq.w	8008334 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f00:	463b      	mov	r3, r7
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	785b      	ldrb	r3, [r3, #1]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d164      	bne.n	8007fd4 <USB_EPStartXfer+0xaac>
 8007f0a:	1d3b      	adds	r3, r7, #4
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f10:	1d3b      	adds	r3, r7, #4
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f1e:	4413      	add	r3, r2
 8007f20:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f22:	463b      	mov	r3, r7
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	011a      	lsls	r2, r3, #4
 8007f2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f32:	667b      	str	r3, [r7, #100]	; 0x64
 8007f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d112      	bne.n	8007f62 <USB_EPStartXfer+0xa3a>
 8007f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f4a:	801a      	strh	r2, [r3, #0]
 8007f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f5e:	801a      	strh	r2, [r3, #0]
 8007f60:	e057      	b.n	8008012 <USB_EPStartXfer+0xaea>
 8007f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f66:	2b3e      	cmp	r3, #62	; 0x3e
 8007f68:	d817      	bhi.n	8007f9a <USB_EPStartXfer+0xa72>
 8007f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f6e:	085b      	lsrs	r3, r3, #1
 8007f70:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <USB_EPStartXfer+0xa62>
 8007f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f84:	3301      	adds	r3, #1
 8007f86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	029b      	lsls	r3, r3, #10
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f96:	801a      	strh	r2, [r3, #0]
 8007f98:	e03b      	b.n	8008012 <USB_EPStartXfer+0xaea>
 8007f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f9e:	095b      	lsrs	r3, r3, #5
 8007fa0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fa8:	f003 031f 	and.w	r3, r3, #31
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d104      	bne.n	8007fba <USB_EPStartXfer+0xa92>
 8007fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	029b      	lsls	r3, r3, #10
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fd0:	801a      	strh	r2, [r3, #0]
 8007fd2:	e01e      	b.n	8008012 <USB_EPStartXfer+0xaea>
 8007fd4:	463b      	mov	r3, r7
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	785b      	ldrb	r3, [r3, #1]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d119      	bne.n	8008012 <USB_EPStartXfer+0xaea>
 8007fde:	1d3b      	adds	r3, r7, #4
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	673b      	str	r3, [r7, #112]	; 0x70
 8007fe4:	1d3b      	adds	r3, r7, #4
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	461a      	mov	r2, r3
 8007ff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ff2:	4413      	add	r3, r2
 8007ff4:	673b      	str	r3, [r7, #112]	; 0x70
 8007ff6:	463b      	mov	r3, r7
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	011a      	lsls	r2, r3, #4
 8007ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008000:	4413      	add	r3, r2
 8008002:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008006:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800800c:	b29a      	uxth	r2, r3
 800800e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008010:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008012:	463b      	mov	r3, r7
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	891b      	ldrh	r3, [r3, #8]
 8008018:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800801c:	463b      	mov	r3, r7
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6959      	ldr	r1, [r3, #20]
 8008022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008026:	b29b      	uxth	r3, r3
 8008028:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800802c:	1d38      	adds	r0, r7, #4
 800802e:	6800      	ldr	r0, [r0, #0]
 8008030:	f000 feaf 	bl	8008d92 <USB_WritePMA>
 8008034:	e17e      	b.n	8008334 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008036:	463b      	mov	r3, r7
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	785b      	ldrb	r3, [r3, #1]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d16f      	bne.n	8008120 <USB_EPStartXfer+0xbf8>
 8008040:	1d3b      	adds	r3, r7, #4
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008048:	1d3b      	adds	r3, r7, #4
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008050:	b29b      	uxth	r3, r3
 8008052:	461a      	mov	r2, r3
 8008054:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008058:	4413      	add	r3, r2
 800805a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800805e:	463b      	mov	r3, r7
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	011a      	lsls	r2, r3, #4
 8008066:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800806a:	4413      	add	r3, r2
 800806c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008078:	2b00      	cmp	r3, #0
 800807a:	d116      	bne.n	80080aa <USB_EPStartXfer+0xb82>
 800807c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	b29b      	uxth	r3, r3
 8008084:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008088:	b29a      	uxth	r2, r3
 800808a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800808e:	801a      	strh	r2, [r3, #0]
 8008090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	b29b      	uxth	r3, r3
 8008098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800809c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080a6:	801a      	strh	r2, [r3, #0]
 80080a8:	e05f      	b.n	800816a <USB_EPStartXfer+0xc42>
 80080aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ae:	2b3e      	cmp	r3, #62	; 0x3e
 80080b0:	d818      	bhi.n	80080e4 <USB_EPStartXfer+0xbbc>
 80080b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80080bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d004      	beq.n	80080d2 <USB_EPStartXfer+0xbaa>
 80080c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080cc:	3301      	adds	r3, #1
 80080ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80080d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	029b      	lsls	r3, r3, #10
 80080da:	b29a      	uxth	r2, r3
 80080dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080e0:	801a      	strh	r2, [r3, #0]
 80080e2:	e042      	b.n	800816a <USB_EPStartXfer+0xc42>
 80080e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e8:	095b      	lsrs	r3, r3, #5
 80080ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80080ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080f2:	f003 031f 	and.w	r3, r3, #31
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d104      	bne.n	8008104 <USB_EPStartXfer+0xbdc>
 80080fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080fe:	3b01      	subs	r3, #1
 8008100:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008104:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008108:	b29b      	uxth	r3, r3
 800810a:	029b      	lsls	r3, r3, #10
 800810c:	b29b      	uxth	r3, r3
 800810e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008116:	b29a      	uxth	r2, r3
 8008118:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800811c:	801a      	strh	r2, [r3, #0]
 800811e:	e024      	b.n	800816a <USB_EPStartXfer+0xc42>
 8008120:	463b      	mov	r3, r7
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	785b      	ldrb	r3, [r3, #1]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d11f      	bne.n	800816a <USB_EPStartXfer+0xc42>
 800812a:	1d3b      	adds	r3, r7, #4
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008132:	1d3b      	adds	r3, r7, #4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800813a:	b29b      	uxth	r3, r3
 800813c:	461a      	mov	r2, r3
 800813e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008142:	4413      	add	r3, r2
 8008144:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008148:	463b      	mov	r3, r7
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	011a      	lsls	r2, r3, #4
 8008150:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008154:	4413      	add	r3, r2
 8008156:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800815a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800815e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008162:	b29a      	uxth	r2, r3
 8008164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008168:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800816a:	463b      	mov	r3, r7
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	891b      	ldrh	r3, [r3, #8]
 8008170:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008174:	463b      	mov	r3, r7
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6959      	ldr	r1, [r3, #20]
 800817a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800817e:	b29b      	uxth	r3, r3
 8008180:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008184:	1d38      	adds	r0, r7, #4
 8008186:	6800      	ldr	r0, [r0, #0]
 8008188:	f000 fe03 	bl	8008d92 <USB_WritePMA>
          ep->xfer_buff += len;
 800818c:	463b      	mov	r3, r7
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	695a      	ldr	r2, [r3, #20]
 8008192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008196:	441a      	add	r2, r3
 8008198:	463b      	mov	r3, r7
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800819e:	463b      	mov	r3, r7
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6a1a      	ldr	r2, [r3, #32]
 80081a4:	463b      	mov	r3, r7
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d909      	bls.n	80081c2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80081ae:	463b      	mov	r3, r7
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6a1a      	ldr	r2, [r3, #32]
 80081b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081b8:	1ad2      	subs	r2, r2, r3
 80081ba:	463b      	mov	r3, r7
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	621a      	str	r2, [r3, #32]
 80081c0:	e008      	b.n	80081d4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80081c2:	463b      	mov	r3, r7
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6a1b      	ldr	r3, [r3, #32]
 80081c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80081cc:	463b      	mov	r3, r7
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2200      	movs	r2, #0
 80081d2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80081d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 80ab 	beq.w	8008334 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081de:	1d3b      	adds	r3, r7, #4
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081e6:	463b      	mov	r3, r7
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	785b      	ldrb	r3, [r3, #1]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d16f      	bne.n	80082d0 <USB_EPStartXfer+0xda8>
 80081f0:	1d3b      	adds	r3, r7, #4
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081f8:	1d3b      	adds	r3, r7, #4
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008200:	b29b      	uxth	r3, r3
 8008202:	461a      	mov	r2, r3
 8008204:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008208:	4413      	add	r3, r2
 800820a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800820e:	463b      	mov	r3, r7
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	011a      	lsls	r2, r3, #4
 8008216:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800821a:	4413      	add	r3, r2
 800821c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008224:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008228:	2b00      	cmp	r3, #0
 800822a:	d116      	bne.n	800825a <USB_EPStartXfer+0xd32>
 800822c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008238:	b29a      	uxth	r2, r3
 800823a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800823e:	801a      	strh	r2, [r3, #0]
 8008240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800824c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008250:	b29a      	uxth	r2, r3
 8008252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008256:	801a      	strh	r2, [r3, #0]
 8008258:	e05b      	b.n	8008312 <USB_EPStartXfer+0xdea>
 800825a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800825e:	2b3e      	cmp	r3, #62	; 0x3e
 8008260:	d818      	bhi.n	8008294 <USB_EPStartXfer+0xd6c>
 8008262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008266:	085b      	lsrs	r3, r3, #1
 8008268:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800826c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	2b00      	cmp	r3, #0
 8008276:	d004      	beq.n	8008282 <USB_EPStartXfer+0xd5a>
 8008278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800827c:	3301      	adds	r3, #1
 800827e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008286:	b29b      	uxth	r3, r3
 8008288:	029b      	lsls	r3, r3, #10
 800828a:	b29a      	uxth	r2, r3
 800828c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008290:	801a      	strh	r2, [r3, #0]
 8008292:	e03e      	b.n	8008312 <USB_EPStartXfer+0xdea>
 8008294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008298:	095b      	lsrs	r3, r3, #5
 800829a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800829e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082a2:	f003 031f 	and.w	r3, r3, #31
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d104      	bne.n	80082b4 <USB_EPStartXfer+0xd8c>
 80082aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082ae:	3b01      	subs	r3, #1
 80082b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80082b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	029b      	lsls	r3, r3, #10
 80082bc:	b29b      	uxth	r3, r3
 80082be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082cc:	801a      	strh	r2, [r3, #0]
 80082ce:	e020      	b.n	8008312 <USB_EPStartXfer+0xdea>
 80082d0:	463b      	mov	r3, r7
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	785b      	ldrb	r3, [r3, #1]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d11b      	bne.n	8008312 <USB_EPStartXfer+0xdea>
 80082da:	1d3b      	adds	r3, r7, #4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	461a      	mov	r2, r3
 80082e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082ea:	4413      	add	r3, r2
 80082ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082f0:	463b      	mov	r3, r7
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	011a      	lsls	r2, r3, #4
 80082f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082fc:	4413      	add	r3, r2
 80082fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800830a:	b29a      	uxth	r2, r3
 800830c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008310:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008312:	463b      	mov	r3, r7
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	895b      	ldrh	r3, [r3, #10]
 8008318:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800831c:	463b      	mov	r3, r7
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6959      	ldr	r1, [r3, #20]
 8008322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008326:	b29b      	uxth	r3, r3
 8008328:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800832c:	1d38      	adds	r0, r7, #4
 800832e:	6800      	ldr	r0, [r0, #0]
 8008330:	f000 fd2f 	bl	8008d92 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008334:	1d3b      	adds	r3, r7, #4
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	463b      	mov	r3, r7
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	881b      	ldrh	r3, [r3, #0]
 8008344:	b29b      	uxth	r3, r3
 8008346:	f107 020a 	add.w	r2, r7, #10
 800834a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800834e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008352:	8013      	strh	r3, [r2, #0]
 8008354:	f107 030a 	add.w	r3, r7, #10
 8008358:	f107 020a 	add.w	r2, r7, #10
 800835c:	8812      	ldrh	r2, [r2, #0]
 800835e:	f082 0210 	eor.w	r2, r2, #16
 8008362:	801a      	strh	r2, [r3, #0]
 8008364:	f107 030a 	add.w	r3, r7, #10
 8008368:	f107 020a 	add.w	r2, r7, #10
 800836c:	8812      	ldrh	r2, [r2, #0]
 800836e:	f082 0220 	eor.w	r2, r2, #32
 8008372:	801a      	strh	r2, [r3, #0]
 8008374:	1d3b      	adds	r3, r7, #4
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	463b      	mov	r3, r7
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	441a      	add	r2, r3
 8008382:	f107 030a 	add.w	r3, r7, #10
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800838c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008398:	b29b      	uxth	r3, r3
 800839a:	8013      	strh	r3, [r2, #0]
 800839c:	e3b5      	b.n	8008b0a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800839e:	463b      	mov	r3, r7
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	7b1b      	ldrb	r3, [r3, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f040 8090 	bne.w	80084ca <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80083aa:	463b      	mov	r3, r7
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	699a      	ldr	r2, [r3, #24]
 80083b0:	463b      	mov	r3, r7
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d90e      	bls.n	80083d8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80083ba:	463b      	mov	r3, r7
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80083c4:	463b      	mov	r3, r7
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	699a      	ldr	r2, [r3, #24]
 80083ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ce:	1ad2      	subs	r2, r2, r3
 80083d0:	463b      	mov	r3, r7
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	619a      	str	r2, [r3, #24]
 80083d6:	e008      	b.n	80083ea <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80083d8:	463b      	mov	r3, r7
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80083e2:	463b      	mov	r3, r7
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2200      	movs	r2, #0
 80083e8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80083ea:	1d3b      	adds	r3, r7, #4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083f2:	1d3b      	adds	r3, r7, #4
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	461a      	mov	r2, r3
 80083fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008402:	4413      	add	r3, r2
 8008404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008408:	463b      	mov	r3, r7
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	011a      	lsls	r2, r3, #4
 8008410:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008414:	4413      	add	r3, r2
 8008416:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800841a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800841e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008422:	2b00      	cmp	r3, #0
 8008424:	d116      	bne.n	8008454 <USB_EPStartXfer+0xf2c>
 8008426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b29b      	uxth	r3, r3
 800842e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008432:	b29a      	uxth	r2, r3
 8008434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008438:	801a      	strh	r2, [r3, #0]
 800843a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	b29b      	uxth	r3, r3
 8008442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800844a:	b29a      	uxth	r2, r3
 800844c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008450:	801a      	strh	r2, [r3, #0]
 8008452:	e32c      	b.n	8008aae <USB_EPStartXfer+0x1586>
 8008454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008458:	2b3e      	cmp	r3, #62	; 0x3e
 800845a:	d818      	bhi.n	800848e <USB_EPStartXfer+0xf66>
 800845c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008460:	085b      	lsrs	r3, r3, #1
 8008462:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d004      	beq.n	800847c <USB_EPStartXfer+0xf54>
 8008472:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008476:	3301      	adds	r3, #1
 8008478:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800847c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008480:	b29b      	uxth	r3, r3
 8008482:	029b      	lsls	r3, r3, #10
 8008484:	b29a      	uxth	r2, r3
 8008486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800848a:	801a      	strh	r2, [r3, #0]
 800848c:	e30f      	b.n	8008aae <USB_EPStartXfer+0x1586>
 800848e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008492:	095b      	lsrs	r3, r3, #5
 8008494:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800849c:	f003 031f 	and.w	r3, r3, #31
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d104      	bne.n	80084ae <USB_EPStartXfer+0xf86>
 80084a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084a8:	3b01      	subs	r3, #1
 80084aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	029b      	lsls	r3, r3, #10
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084c6:	801a      	strh	r2, [r3, #0]
 80084c8:	e2f1      	b.n	8008aae <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80084ca:	463b      	mov	r3, r7
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	78db      	ldrb	r3, [r3, #3]
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	f040 818f 	bne.w	80087f4 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80084d6:	463b      	mov	r3, r7
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	785b      	ldrb	r3, [r3, #1]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d175      	bne.n	80085cc <USB_EPStartXfer+0x10a4>
 80084e0:	1d3b      	adds	r3, r7, #4
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084e8:	1d3b      	adds	r3, r7, #4
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	461a      	mov	r2, r3
 80084f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80084f8:	4413      	add	r3, r2
 80084fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084fe:	463b      	mov	r3, r7
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	011a      	lsls	r2, r3, #4
 8008506:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800850a:	4413      	add	r3, r2
 800850c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008514:	463b      	mov	r3, r7
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d116      	bne.n	800854c <USB_EPStartXfer+0x1024>
 800851e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	b29b      	uxth	r3, r3
 8008526:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800852a:	b29a      	uxth	r2, r3
 800852c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008530:	801a      	strh	r2, [r3, #0]
 8008532:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	b29b      	uxth	r3, r3
 800853a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800853e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008542:	b29a      	uxth	r2, r3
 8008544:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008548:	801a      	strh	r2, [r3, #0]
 800854a:	e065      	b.n	8008618 <USB_EPStartXfer+0x10f0>
 800854c:	463b      	mov	r3, r7
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	2b3e      	cmp	r3, #62	; 0x3e
 8008554:	d81a      	bhi.n	800858c <USB_EPStartXfer+0x1064>
 8008556:	463b      	mov	r3, r7
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	085b      	lsrs	r3, r3, #1
 800855e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008562:	463b      	mov	r3, r7
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	2b00      	cmp	r3, #0
 800856e:	d004      	beq.n	800857a <USB_EPStartXfer+0x1052>
 8008570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008574:	3301      	adds	r3, #1
 8008576:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800857a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800857e:	b29b      	uxth	r3, r3
 8008580:	029b      	lsls	r3, r3, #10
 8008582:	b29a      	uxth	r2, r3
 8008584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008588:	801a      	strh	r2, [r3, #0]
 800858a:	e045      	b.n	8008618 <USB_EPStartXfer+0x10f0>
 800858c:	463b      	mov	r3, r7
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	095b      	lsrs	r3, r3, #5
 8008594:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008598:	463b      	mov	r3, r7
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	f003 031f 	and.w	r3, r3, #31
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d104      	bne.n	80085b0 <USB_EPStartXfer+0x1088>
 80085a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085aa:	3b01      	subs	r3, #1
 80085ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	029b      	lsls	r3, r3, #10
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085c8:	801a      	strh	r2, [r3, #0]
 80085ca:	e025      	b.n	8008618 <USB_EPStartXfer+0x10f0>
 80085cc:	463b      	mov	r3, r7
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	785b      	ldrb	r3, [r3, #1]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d120      	bne.n	8008618 <USB_EPStartXfer+0x10f0>
 80085d6:	1d3b      	adds	r3, r7, #4
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80085de:	1d3b      	adds	r3, r7, #4
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	461a      	mov	r2, r3
 80085ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085ee:	4413      	add	r3, r2
 80085f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80085f4:	463b      	mov	r3, r7
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	011a      	lsls	r2, r3, #4
 80085fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008600:	4413      	add	r3, r2
 8008602:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008606:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800860a:	463b      	mov	r3, r7
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	b29a      	uxth	r2, r3
 8008612:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008616:	801a      	strh	r2, [r3, #0]
 8008618:	1d3b      	adds	r3, r7, #4
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008620:	463b      	mov	r3, r7
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	785b      	ldrb	r3, [r3, #1]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d175      	bne.n	8008716 <USB_EPStartXfer+0x11ee>
 800862a:	1d3b      	adds	r3, r7, #4
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008632:	1d3b      	adds	r3, r7, #4
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800863a:	b29b      	uxth	r3, r3
 800863c:	461a      	mov	r2, r3
 800863e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008642:	4413      	add	r3, r2
 8008644:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008648:	463b      	mov	r3, r7
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	011a      	lsls	r2, r3, #4
 8008650:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008654:	4413      	add	r3, r2
 8008656:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800865a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800865e:	463b      	mov	r3, r7
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d116      	bne.n	8008696 <USB_EPStartXfer+0x116e>
 8008668:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	b29b      	uxth	r3, r3
 8008670:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008674:	b29a      	uxth	r2, r3
 8008676:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800867a:	801a      	strh	r2, [r3, #0]
 800867c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	b29b      	uxth	r3, r3
 8008684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800868c:	b29a      	uxth	r2, r3
 800868e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008692:	801a      	strh	r2, [r3, #0]
 8008694:	e061      	b.n	800875a <USB_EPStartXfer+0x1232>
 8008696:	463b      	mov	r3, r7
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	2b3e      	cmp	r3, #62	; 0x3e
 800869e:	d81a      	bhi.n	80086d6 <USB_EPStartXfer+0x11ae>
 80086a0:	463b      	mov	r3, r7
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	085b      	lsrs	r3, r3, #1
 80086a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086ac:	463b      	mov	r3, r7
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d004      	beq.n	80086c4 <USB_EPStartXfer+0x119c>
 80086ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086be:	3301      	adds	r3, #1
 80086c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	029b      	lsls	r3, r3, #10
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086d2:	801a      	strh	r2, [r3, #0]
 80086d4:	e041      	b.n	800875a <USB_EPStartXfer+0x1232>
 80086d6:	463b      	mov	r3, r7
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	095b      	lsrs	r3, r3, #5
 80086de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086e2:	463b      	mov	r3, r7
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	f003 031f 	and.w	r3, r3, #31
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d104      	bne.n	80086fa <USB_EPStartXfer+0x11d2>
 80086f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086f4:	3b01      	subs	r3, #1
 80086f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086fe:	b29b      	uxth	r3, r3
 8008700:	029b      	lsls	r3, r3, #10
 8008702:	b29b      	uxth	r3, r3
 8008704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800870c:	b29a      	uxth	r2, r3
 800870e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008712:	801a      	strh	r2, [r3, #0]
 8008714:	e021      	b.n	800875a <USB_EPStartXfer+0x1232>
 8008716:	463b      	mov	r3, r7
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d11c      	bne.n	800875a <USB_EPStartXfer+0x1232>
 8008720:	1d3b      	adds	r3, r7, #4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008728:	b29b      	uxth	r3, r3
 800872a:	461a      	mov	r2, r3
 800872c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008730:	4413      	add	r3, r2
 8008732:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008736:	463b      	mov	r3, r7
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	011a      	lsls	r2, r3, #4
 800873e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008742:	4413      	add	r3, r2
 8008744:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008748:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800874c:	463b      	mov	r3, r7
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	b29a      	uxth	r2, r3
 8008754:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008758:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800875a:	463b      	mov	r3, r7
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 81a4 	beq.w	8008aae <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008766:	1d3b      	adds	r3, r7, #4
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	463b      	mov	r3, r7
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800877a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800877e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d005      	beq.n	8008792 <USB_EPStartXfer+0x126a>
 8008786:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800878a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10d      	bne.n	80087ae <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008792:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800879a:	2b00      	cmp	r3, #0
 800879c:	f040 8187 	bne.w	8008aae <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087a0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f040 8180 	bne.w	8008aae <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80087ae:	1d3b      	adds	r3, r7, #4
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	463b      	mov	r3, r7
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80087cc:	1d3b      	adds	r3, r7, #4
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	463b      	mov	r3, r7
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	441a      	add	r2, r3
 80087da:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80087de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	8013      	strh	r3, [r2, #0]
 80087f2:	e15c      	b.n	8008aae <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80087f4:	463b      	mov	r3, r7
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	78db      	ldrb	r3, [r3, #3]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	f040 8155 	bne.w	8008aaa <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008800:	463b      	mov	r3, r7
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	699a      	ldr	r2, [r3, #24]
 8008806:	463b      	mov	r3, r7
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	429a      	cmp	r2, r3
 800880e:	d90e      	bls.n	800882e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8008810:	463b      	mov	r3, r7
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800881a:	463b      	mov	r3, r7
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	699a      	ldr	r2, [r3, #24]
 8008820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008824:	1ad2      	subs	r2, r2, r3
 8008826:	463b      	mov	r3, r7
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	619a      	str	r2, [r3, #24]
 800882c:	e008      	b.n	8008840 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800882e:	463b      	mov	r3, r7
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008838:	463b      	mov	r3, r7
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2200      	movs	r2, #0
 800883e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008840:	463b      	mov	r3, r7
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	785b      	ldrb	r3, [r3, #1]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d16f      	bne.n	800892a <USB_EPStartXfer+0x1402>
 800884a:	1d3b      	adds	r3, r7, #4
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008852:	1d3b      	adds	r3, r7, #4
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800885a:	b29b      	uxth	r3, r3
 800885c:	461a      	mov	r2, r3
 800885e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008862:	4413      	add	r3, r2
 8008864:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008868:	463b      	mov	r3, r7
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	011a      	lsls	r2, r3, #4
 8008870:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008874:	4413      	add	r3, r2
 8008876:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800887a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800887e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008882:	2b00      	cmp	r3, #0
 8008884:	d116      	bne.n	80088b4 <USB_EPStartXfer+0x138c>
 8008886:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	b29b      	uxth	r3, r3
 800888e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008892:	b29a      	uxth	r2, r3
 8008894:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008898:	801a      	strh	r2, [r3, #0]
 800889a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800889e:	881b      	ldrh	r3, [r3, #0]
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088b0:	801a      	strh	r2, [r3, #0]
 80088b2:	e05f      	b.n	8008974 <USB_EPStartXfer+0x144c>
 80088b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b8:	2b3e      	cmp	r3, #62	; 0x3e
 80088ba:	d818      	bhi.n	80088ee <USB_EPStartXfer+0x13c6>
 80088bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088c0:	085b      	lsrs	r3, r3, #1
 80088c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d004      	beq.n	80088dc <USB_EPStartXfer+0x13b4>
 80088d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088d6:	3301      	adds	r3, #1
 80088d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	029b      	lsls	r3, r3, #10
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088ea:	801a      	strh	r2, [r3, #0]
 80088ec:	e042      	b.n	8008974 <USB_EPStartXfer+0x144c>
 80088ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f2:	095b      	lsrs	r3, r3, #5
 80088f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088fc:	f003 031f 	and.w	r3, r3, #31
 8008900:	2b00      	cmp	r3, #0
 8008902:	d104      	bne.n	800890e <USB_EPStartXfer+0x13e6>
 8008904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008908:	3b01      	subs	r3, #1
 800890a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800890e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008912:	b29b      	uxth	r3, r3
 8008914:	029b      	lsls	r3, r3, #10
 8008916:	b29b      	uxth	r3, r3
 8008918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800891c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008920:	b29a      	uxth	r2, r3
 8008922:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008926:	801a      	strh	r2, [r3, #0]
 8008928:	e024      	b.n	8008974 <USB_EPStartXfer+0x144c>
 800892a:	463b      	mov	r3, r7
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	785b      	ldrb	r3, [r3, #1]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d11f      	bne.n	8008974 <USB_EPStartXfer+0x144c>
 8008934:	1d3b      	adds	r3, r7, #4
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800893c:	1d3b      	adds	r3, r7, #4
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008944:	b29b      	uxth	r3, r3
 8008946:	461a      	mov	r2, r3
 8008948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800894c:	4413      	add	r3, r2
 800894e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008952:	463b      	mov	r3, r7
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	011a      	lsls	r2, r3, #4
 800895a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800895e:	4413      	add	r3, r2
 8008960:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008964:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800896c:	b29a      	uxth	r2, r3
 800896e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008972:	801a      	strh	r2, [r3, #0]
 8008974:	1d3b      	adds	r3, r7, #4
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800897c:	463b      	mov	r3, r7
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	785b      	ldrb	r3, [r3, #1]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d16f      	bne.n	8008a66 <USB_EPStartXfer+0x153e>
 8008986:	1d3b      	adds	r3, r7, #4
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800898e:	1d3b      	adds	r3, r7, #4
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008996:	b29b      	uxth	r3, r3
 8008998:	461a      	mov	r2, r3
 800899a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800899e:	4413      	add	r3, r2
 80089a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089a4:	463b      	mov	r3, r7
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	011a      	lsls	r2, r3, #4
 80089ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089b0:	4413      	add	r3, r2
 80089b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d116      	bne.n	80089f0 <USB_EPStartXfer+0x14c8>
 80089c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089d4:	801a      	strh	r2, [r3, #0]
 80089d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089da:	881b      	ldrh	r3, [r3, #0]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089ec:	801a      	strh	r2, [r3, #0]
 80089ee:	e05e      	b.n	8008aae <USB_EPStartXfer+0x1586>
 80089f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089f4:	2b3e      	cmp	r3, #62	; 0x3e
 80089f6:	d818      	bhi.n	8008a2a <USB_EPStartXfer+0x1502>
 80089f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089fc:	085b      	lsrs	r3, r3, #1
 80089fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d004      	beq.n	8008a18 <USB_EPStartXfer+0x14f0>
 8008a0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a12:	3301      	adds	r3, #1
 8008a14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	029b      	lsls	r3, r3, #10
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a26:	801a      	strh	r2, [r3, #0]
 8008a28:	e041      	b.n	8008aae <USB_EPStartXfer+0x1586>
 8008a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a2e:	095b      	lsrs	r3, r3, #5
 8008a30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a38:	f003 031f 	and.w	r3, r3, #31
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d104      	bne.n	8008a4a <USB_EPStartXfer+0x1522>
 8008a40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a44:	3b01      	subs	r3, #1
 8008a46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	029b      	lsls	r3, r3, #10
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a62:	801a      	strh	r2, [r3, #0]
 8008a64:	e023      	b.n	8008aae <USB_EPStartXfer+0x1586>
 8008a66:	463b      	mov	r3, r7
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	785b      	ldrb	r3, [r3, #1]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d11e      	bne.n	8008aae <USB_EPStartXfer+0x1586>
 8008a70:	1d3b      	adds	r3, r7, #4
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a80:	4413      	add	r3, r2
 8008a82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a86:	463b      	mov	r3, r7
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	011a      	lsls	r2, r3, #4
 8008a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a92:	4413      	add	r3, r2
 8008a94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aa6:	801a      	strh	r2, [r3, #0]
 8008aa8:	e001      	b.n	8008aae <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e02e      	b.n	8008b0c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008aae:	1d3b      	adds	r3, r7, #4
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	463b      	mov	r3, r7
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008acc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ad0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ad4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ad8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008adc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ae0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ae4:	1d3b      	adds	r3, r7, #4
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	463b      	mov	r3, r7
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	441a      	add	r2, r3
 8008af2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b085      	sub	sp, #20
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	785b      	ldrb	r3, [r3, #1]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d020      	beq.n	8008b6a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b3e:	81bb      	strh	r3, [r7, #12]
 8008b40:	89bb      	ldrh	r3, [r7, #12]
 8008b42:	f083 0310 	eor.w	r3, r3, #16
 8008b46:	81bb      	strh	r3, [r7, #12]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	441a      	add	r2, r3
 8008b52:	89bb      	ldrh	r3, [r7, #12]
 8008b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	8013      	strh	r3, [r2, #0]
 8008b68:	e01f      	b.n	8008baa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b80:	81fb      	strh	r3, [r7, #14]
 8008b82:	89fb      	ldrh	r3, [r7, #14]
 8008b84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b88:	81fb      	strh	r3, [r7, #14]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	441a      	add	r2, r3
 8008b94:	89fb      	ldrh	r3, [r7, #14]
 8008b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bc80      	pop	{r7}
 8008bb4:	4770      	bx	lr

08008bb6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b087      	sub	sp, #28
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	7b1b      	ldrb	r3, [r3, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f040 809d 	bne.w	8008d04 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	785b      	ldrb	r3, [r3, #1]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d04c      	beq.n	8008c6c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	823b      	strh	r3, [r7, #16]
 8008be0:	8a3b      	ldrh	r3, [r7, #16]
 8008be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d01b      	beq.n	8008c22 <USB_EPClearStall+0x6c>
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	881b      	ldrh	r3, [r3, #0]
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c00:	81fb      	strh	r3, [r7, #14]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	441a      	add	r2, r3
 8008c0c:	89fb      	ldrh	r3, [r7, #14]
 8008c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	78db      	ldrb	r3, [r3, #3]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d06c      	beq.n	8008d04 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c40:	81bb      	strh	r3, [r7, #12]
 8008c42:	89bb      	ldrh	r3, [r7, #12]
 8008c44:	f083 0320 	eor.w	r3, r3, #32
 8008c48:	81bb      	strh	r3, [r7, #12]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	441a      	add	r2, r3
 8008c54:	89bb      	ldrh	r3, [r7, #12]
 8008c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	8013      	strh	r3, [r2, #0]
 8008c6a:	e04b      	b.n	8008d04 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	881b      	ldrh	r3, [r3, #0]
 8008c78:	82fb      	strh	r3, [r7, #22]
 8008c7a:	8afb      	ldrh	r3, [r7, #22]
 8008c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d01b      	beq.n	8008cbc <USB_EPClearStall+0x106>
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9a:	82bb      	strh	r3, [r7, #20]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	441a      	add	r2, r3
 8008ca6:	8abb      	ldrh	r3, [r7, #20]
 8008ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd2:	827b      	strh	r3, [r7, #18]
 8008cd4:	8a7b      	ldrh	r3, [r7, #18]
 8008cd6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cda:	827b      	strh	r3, [r7, #18]
 8008cdc:	8a7b      	ldrh	r3, [r7, #18]
 8008cde:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ce2:	827b      	strh	r3, [r7, #18]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	441a      	add	r2, r3
 8008cee:	8a7b      	ldrh	r3, [r7, #18]
 8008cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	371c      	adds	r7, #28
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bc80      	pop	{r7}
 8008d0e:	4770      	bx	lr

08008d10 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008d1c:	78fb      	ldrb	r3, [r7, #3]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d103      	bne.n	8008d2a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2280      	movs	r2, #128	; 0x80
 8008d26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bc80      	pop	{r7}
 8008d34:	4770      	bx	lr

08008d36 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bc80      	pop	{r7}
 8008d48:	4770      	bx	lr

08008d4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b083      	sub	sp, #12
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bc80      	pop	{r7}
 8008d5c:	4770      	bx	lr

08008d5e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b085      	sub	sp, #20
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008d70:	68fb      	ldr	r3, [r7, #12]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bc80      	pop	{r7}
 8008d7a:	4770      	bx	lr

08008d7c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bc80      	pop	{r7}
 8008d90:	4770      	bx	lr

08008d92 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b08d      	sub	sp, #52	; 0x34
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	60b9      	str	r1, [r7, #8]
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	461a      	mov	r2, r3
 8008da0:	460b      	mov	r3, r1
 8008da2:	80fb      	strh	r3, [r7, #6]
 8008da4:	4613      	mov	r3, r2
 8008da6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008da8:	88bb      	ldrh	r3, [r7, #4]
 8008daa:	3301      	adds	r3, #1
 8008dac:	085b      	lsrs	r3, r3, #1
 8008dae:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008db8:	88fb      	ldrh	r3, [r7, #6]
 8008dba:	005a      	lsls	r2, r3, #1
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dc4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dca:	e01e      	b.n	8008e0a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	021b      	lsls	r3, r3, #8
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	461a      	mov	r2, r3
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df4:	3302      	adds	r3, #2
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	3302      	adds	r3, #2
 8008dfc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	3301      	adds	r3, #1
 8008e02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e06:	3b01      	subs	r3, #1
 8008e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1dd      	bne.n	8008dcc <USB_WritePMA+0x3a>
  }
}
 8008e10:	bf00      	nop
 8008e12:	bf00      	nop
 8008e14:	3734      	adds	r7, #52	; 0x34
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bc80      	pop	{r7}
 8008e1a:	4770      	bx	lr

08008e1c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b08b      	sub	sp, #44	; 0x2c
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	4611      	mov	r1, r2
 8008e28:	461a      	mov	r2, r3
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	80fb      	strh	r3, [r7, #6]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008e32:	88bb      	ldrh	r3, [r7, #4]
 8008e34:	085b      	lsrs	r3, r3, #1
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e42:	88fb      	ldrh	r3, [r7, #6]
 8008e44:	005a      	lsls	r2, r3, #1
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e4e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	627b      	str	r3, [r7, #36]	; 0x24
 8008e54:	e01b      	b.n	8008e8e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	3302      	adds	r3, #2
 8008e62:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	0a1b      	lsrs	r3, r3, #8
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	3302      	adds	r3, #2
 8008e86:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e0      	bne.n	8008e56 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008e94:	88bb      	ldrh	r3, [r7, #4]
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d007      	beq.n	8008eb0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	b2da      	uxtb	r2, r3
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	701a      	strb	r2, [r3, #0]
  }
}
 8008eb0:	bf00      	nop
 8008eb2:	372c      	adds	r7, #44	; 0x2c
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bc80      	pop	{r7}
 8008eb8:	4770      	bx	lr

08008eba <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	7c1b      	ldrb	r3, [r3, #16]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d115      	bne.n	8008efe <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	2181      	movs	r1, #129	; 0x81
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f004 fddd 	bl	800da9a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eea:	2202      	movs	r2, #2
 8008eec:	2101      	movs	r1, #1
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f004 fdd3 	bl	800da9a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008efc:	e012      	b.n	8008f24 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008efe:	2340      	movs	r3, #64	; 0x40
 8008f00:	2202      	movs	r2, #2
 8008f02:	2181      	movs	r1, #129	; 0x81
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f004 fdc8 	bl	800da9a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f10:	2340      	movs	r3, #64	; 0x40
 8008f12:	2202      	movs	r2, #2
 8008f14:	2101      	movs	r1, #1
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f004 fdbf 	bl	800da9a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008f24:	2308      	movs	r3, #8
 8008f26:	2203      	movs	r2, #3
 8008f28:	2182      	movs	r1, #130	; 0x82
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f004 fdb5 	bl	800da9a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f36:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008f3a:	f004 fed5 	bl	800dce8 <USBD_static_malloc>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d102      	bne.n	8008f56 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008f50:	2301      	movs	r3, #1
 8008f52:	73fb      	strb	r3, [r7, #15]
 8008f54:	e026      	b.n	8008fa4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f5c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	7c1b      	ldrb	r3, [r3, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d109      	bne.n	8008f94 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f8a:	2101      	movs	r1, #1
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f004 fe75 	bl	800dc7c <USBD_LL_PrepareReceive>
 8008f92:	e007      	b.n	8008fa4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f9a:	2340      	movs	r3, #64	; 0x40
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f004 fe6c 	bl	800dc7c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008fbe:	2181      	movs	r1, #129	; 0x81
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f004 fd90 	bl	800dae6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008fcc:	2101      	movs	r1, #1
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f004 fd89 	bl	800dae6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008fdc:	2182      	movs	r1, #130	; 0x82
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f004 fd81 	bl	800dae6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00e      	beq.n	8009012 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009004:	4618      	mov	r0, r3
 8009006:	f004 fe7b 	bl	800dd00 <USBD_static_free>
    pdev->pClassData = NULL;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009012:	7bfb      	ldrb	r3, [r7, #15]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800902c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800902e:	2300      	movs	r3, #0
 8009030:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009032:	2300      	movs	r3, #0
 8009034:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009042:	2b00      	cmp	r3, #0
 8009044:	d039      	beq.n	80090ba <USBD_CDC_Setup+0x9e>
 8009046:	2b20      	cmp	r3, #32
 8009048:	d17f      	bne.n	800914a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	88db      	ldrh	r3, [r3, #6]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d029      	beq.n	80090a6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	b25b      	sxtb	r3, r3
 8009058:	2b00      	cmp	r3, #0
 800905a:	da11      	bge.n	8009080 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009068:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	88d2      	ldrh	r2, [r2, #6]
 800906e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009070:	6939      	ldr	r1, [r7, #16]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	88db      	ldrh	r3, [r3, #6]
 8009076:	461a      	mov	r2, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f001 fa0a 	bl	800a492 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800907e:	e06b      	b.n	8009158 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	785a      	ldrb	r2, [r3, #1]
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	88db      	ldrh	r3, [r3, #6]
 800908e:	b2da      	uxtb	r2, r3
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009096:	6939      	ldr	r1, [r7, #16]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	88db      	ldrh	r3, [r3, #6]
 800909c:	461a      	mov	r2, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f001 fa25 	bl	800a4ee <USBD_CtlPrepareRx>
      break;
 80090a4:	e058      	b.n	8009158 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	7850      	ldrb	r0, [r2, #1]
 80090b2:	2200      	movs	r2, #0
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	4798      	blx	r3
      break;
 80090b8:	e04e      	b.n	8009158 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	785b      	ldrb	r3, [r3, #1]
 80090be:	2b0b      	cmp	r3, #11
 80090c0:	d02e      	beq.n	8009120 <USBD_CDC_Setup+0x104>
 80090c2:	2b0b      	cmp	r3, #11
 80090c4:	dc38      	bgt.n	8009138 <USBD_CDC_Setup+0x11c>
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d002      	beq.n	80090d0 <USBD_CDC_Setup+0xb4>
 80090ca:	2b0a      	cmp	r3, #10
 80090cc:	d014      	beq.n	80090f8 <USBD_CDC_Setup+0xdc>
 80090ce:	e033      	b.n	8009138 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d107      	bne.n	80090ea <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80090da:	f107 030c 	add.w	r3, r7, #12
 80090de:	2202      	movs	r2, #2
 80090e0:	4619      	mov	r1, r3
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f001 f9d5 	bl	800a492 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090e8:	e02e      	b.n	8009148 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 f966 	bl	800a3be <USBD_CtlError>
            ret = USBD_FAIL;
 80090f2:	2302      	movs	r3, #2
 80090f4:	75fb      	strb	r3, [r7, #23]
          break;
 80090f6:	e027      	b.n	8009148 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d107      	bne.n	8009112 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009102:	f107 030f 	add.w	r3, r7, #15
 8009106:	2201      	movs	r2, #1
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 f9c1 	bl	800a492 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009110:	e01a      	b.n	8009148 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f001 f952 	bl	800a3be <USBD_CtlError>
            ret = USBD_FAIL;
 800911a:	2302      	movs	r3, #2
 800911c:	75fb      	strb	r3, [r7, #23]
          break;
 800911e:	e013      	b.n	8009148 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009126:	2b03      	cmp	r3, #3
 8009128:	d00d      	beq.n	8009146 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f001 f946 	bl	800a3be <USBD_CtlError>
            ret = USBD_FAIL;
 8009132:	2302      	movs	r3, #2
 8009134:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009136:	e006      	b.n	8009146 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f001 f93f 	bl	800a3be <USBD_CtlError>
          ret = USBD_FAIL;
 8009140:	2302      	movs	r3, #2
 8009142:	75fb      	strb	r3, [r7, #23]
          break;
 8009144:	e000      	b.n	8009148 <USBD_CDC_Setup+0x12c>
          break;
 8009146:	bf00      	nop
      }
      break;
 8009148:	e006      	b.n	8009158 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 f936 	bl	800a3be <USBD_CtlError>
      ret = USBD_FAIL;
 8009152:	2302      	movs	r3, #2
 8009154:	75fb      	strb	r3, [r7, #23]
      break;
 8009156:	bf00      	nop
  }

  return ret;
 8009158:	7dfb      	ldrb	r3, [r7, #23]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3718      	adds	r7, #24
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b084      	sub	sp, #16
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	460b      	mov	r3, r1
 800916c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009174:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800917c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009184:	2b00      	cmp	r3, #0
 8009186:	d03a      	beq.n	80091fe <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009188:	78fa      	ldrb	r2, [r7, #3]
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	440b      	add	r3, r1
 8009196:	331c      	adds	r3, #28
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d029      	beq.n	80091f2 <USBD_CDC_DataIn+0x90>
 800919e:	78fa      	ldrb	r2, [r7, #3]
 80091a0:	6879      	ldr	r1, [r7, #4]
 80091a2:	4613      	mov	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	440b      	add	r3, r1
 80091ac:	331c      	adds	r3, #28
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	78f9      	ldrb	r1, [r7, #3]
 80091b2:	68b8      	ldr	r0, [r7, #8]
 80091b4:	460b      	mov	r3, r1
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	440b      	add	r3, r1
 80091ba:	00db      	lsls	r3, r3, #3
 80091bc:	4403      	add	r3, r0
 80091be:	3338      	adds	r3, #56	; 0x38
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	fbb2 f1f3 	udiv	r1, r2, r3
 80091c6:	fb03 f301 	mul.w	r3, r3, r1
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d110      	bne.n	80091f2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80091d0:	78fa      	ldrb	r2, [r7, #3]
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	4613      	mov	r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	440b      	add	r3, r1
 80091de:	331c      	adds	r3, #28
 80091e0:	2200      	movs	r2, #0
 80091e2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80091e4:	78f9      	ldrb	r1, [r7, #3]
 80091e6:	2300      	movs	r3, #0
 80091e8:	2200      	movs	r2, #0
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f004 fd23 	bl	800dc36 <USBD_LL_Transmit>
 80091f0:	e003      	b.n	80091fa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	e000      	b.n	8009200 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80091fe:	2302      	movs	r3, #2
  }
}
 8009200:	4618      	mov	r0, r3
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	460b      	mov	r3, r1
 8009212:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800921a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f004 fd4e 	bl	800dcc2 <USBD_LL_GetRxDataSize>
 8009226:	4602      	mov	r2, r0
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00d      	beq.n	8009254 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800924c:	4611      	mov	r1, r2
 800924e:	4798      	blx	r3

    return USBD_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	e000      	b.n	8009256 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009254:	2302      	movs	r3, #2
  }
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b084      	sub	sp, #16
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800926c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009274:	2b00      	cmp	r3, #0
 8009276:	d015      	beq.n	80092a4 <USBD_CDC_EP0_RxReady+0x46>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800927e:	2bff      	cmp	r3, #255	; 0xff
 8009280:	d010      	beq.n	80092a4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009290:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009298:	b292      	uxth	r2, r2
 800929a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	22ff      	movs	r2, #255	; 0xff
 80092a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
	...

080092b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2243      	movs	r2, #67	; 0x43
 80092bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80092be:	4b03      	ldr	r3, [pc, #12]	; (80092cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bc80      	pop	{r7}
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	200000a4 	.word	0x200000a4

080092d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2243      	movs	r2, #67	; 0x43
 80092dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80092de:	4b03      	ldr	r3, [pc, #12]	; (80092ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bc80      	pop	{r7}
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	20000060 	.word	0x20000060

080092f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2243      	movs	r2, #67	; 0x43
 80092fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80092fe:	4b03      	ldr	r3, [pc, #12]	; (800930c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009300:	4618      	mov	r0, r3
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	bc80      	pop	{r7}
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	200000e8 	.word	0x200000e8

08009310 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	220a      	movs	r2, #10
 800931c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800931e:	4b03      	ldr	r3, [pc, #12]	; (800932c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	bc80      	pop	{r7}
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	2000001c 	.word	0x2000001c

08009330 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800933a:	2302      	movs	r3, #2
 800933c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d005      	beq.n	8009350 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009350:	7bfb      	ldrb	r3, [r7, #15]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	bc80      	pop	{r7}
 800935a:	4770      	bx	lr

0800935c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800935c:	b480      	push	{r7}
 800935e:	b087      	sub	sp, #28
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	4613      	mov	r3, r2
 8009368:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009370:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800937a:	88fa      	ldrh	r2, [r7, #6]
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	371c      	adds	r7, #28
 8009388:	46bd      	mov	sp, r7
 800938a:	bc80      	pop	{r7}
 800938c:	4770      	bx	lr

0800938e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800938e:	b480      	push	{r7}
 8009390:	b085      	sub	sp, #20
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800939e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bc80      	pop	{r7}
 80093b2:	4770      	bx	lr

080093b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d01c      	beq.n	8009408 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d115      	bne.n	8009404 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2201      	movs	r2, #1
 80093dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	2181      	movs	r1, #129	; 0x81
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f004 fc1b 	bl	800dc36 <USBD_LL_Transmit>

      return USBD_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	e002      	b.n	800940a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009404:	2301      	movs	r3, #1
 8009406:	e000      	b.n	800940a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009408:	2302      	movs	r3, #2
  }
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009420:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009428:	2b00      	cmp	r3, #0
 800942a:	d017      	beq.n	800945c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	7c1b      	ldrb	r3, [r3, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d109      	bne.n	8009448 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800943a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800943e:	2101      	movs	r1, #1
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f004 fc1b 	bl	800dc7c <USBD_LL_PrepareReceive>
 8009446:	e007      	b.n	8009458 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800944e:	2340      	movs	r3, #64	; 0x40
 8009450:	2101      	movs	r1, #1
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f004 fc12 	bl	800dc7c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	e000      	b.n	800945e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800945c:	2302      	movs	r3, #2
  }
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b084      	sub	sp, #16
 800946a:	af00      	add	r7, sp, #0
 800946c:	60f8      	str	r0, [r7, #12]
 800946e:	60b9      	str	r1, [r7, #8]
 8009470:	4613      	mov	r3, r2
 8009472:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800947a:	2302      	movs	r3, #2
 800947c:	e01a      	b.n	80094b4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009484:	2b00      	cmp	r3, #0
 8009486:	d003      	beq.n	8009490 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	79fa      	ldrb	r2, [r7, #7]
 80094aa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f004 fa7f 	bl	800d9b0 <USBD_LL_Init>

  return USBD_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d006      	beq.n	80094de <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]
 80094dc:	e001      	b.n	80094e2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80094de:	2302      	movs	r3, #2
 80094e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bc80      	pop	{r7}
 80094ec:	4770      	bx	lr

080094ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b082      	sub	sp, #8
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f004 fab4 	bl	800da64 <USBD_LL_Start>

  return USBD_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	bc80      	pop	{r7}
 8009518:	4770      	bx	lr

0800951a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	460b      	mov	r3, r1
 8009524:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009526:	2302      	movs	r3, #2
 8009528:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00c      	beq.n	800954e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	78fa      	ldrb	r2, [r7, #3]
 800953e:	4611      	mov	r1, r2
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	4798      	blx	r3
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800954e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	78fa      	ldrb	r2, [r7, #3]
 800956e:	4611      	mov	r1, r2
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	4798      	blx	r3

  return USBD_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b082      	sub	sp, #8
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	4618      	mov	r0, r3
 8009592:	f000 fed8 	bl	800a346 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80095a4:	461a      	mov	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095b2:	f003 031f 	and.w	r3, r3, #31
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d016      	beq.n	80095e8 <USBD_LL_SetupStage+0x6a>
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d81c      	bhi.n	80095f8 <USBD_LL_SetupStage+0x7a>
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d002      	beq.n	80095c8 <USBD_LL_SetupStage+0x4a>
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d008      	beq.n	80095d8 <USBD_LL_SetupStage+0x5a>
 80095c6:	e017      	b.n	80095f8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095ce:	4619      	mov	r1, r3
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f9cb 	bl	800996c <USBD_StdDevReq>
      break;
 80095d6:	e01a      	b.n	800960e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fa2d 	bl	8009a40 <USBD_StdItfReq>
      break;
 80095e6:	e012      	b.n	800960e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095ee:	4619      	mov	r1, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fa6d 	bl	8009ad0 <USBD_StdEPReq>
      break;
 80095f6:	e00a      	b.n	800960e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009602:	b2db      	uxtb	r3, r3
 8009604:	4619      	mov	r1, r3
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f004 fa8c 	bl	800db24 <USBD_LL_StallEP>
      break;
 800960c:	bf00      	nop
  }

  return USBD_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b086      	sub	sp, #24
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	460b      	mov	r3, r1
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009626:	7afb      	ldrb	r3, [r7, #11]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d14b      	bne.n	80096c4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009632:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800963a:	2b03      	cmp	r3, #3
 800963c:	d134      	bne.n	80096a8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	68da      	ldr	r2, [r3, #12]
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	429a      	cmp	r2, r3
 8009648:	d919      	bls.n	800967e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	68da      	ldr	r2, [r3, #12]
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	1ad2      	subs	r2, r2, r3
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	68da      	ldr	r2, [r3, #12]
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009660:	429a      	cmp	r2, r3
 8009662:	d203      	bcs.n	800966c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009668:	b29b      	uxth	r3, r3
 800966a:	e002      	b.n	8009672 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009670:	b29b      	uxth	r3, r3
 8009672:	461a      	mov	r2, r3
 8009674:	6879      	ldr	r1, [r7, #4]
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 ff57 	bl	800a52a <USBD_CtlContinueRx>
 800967c:	e038      	b.n	80096f0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00a      	beq.n	80096a0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009690:	2b03      	cmp	r3, #3
 8009692:	d105      	bne.n	80096a0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 ff54 	bl	800a54e <USBD_CtlSendStatus>
 80096a6:	e023      	b.n	80096f0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096ae:	2b05      	cmp	r3, #5
 80096b0:	d11e      	bne.n	80096f0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80096ba:	2100      	movs	r1, #0
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f004 fa31 	bl	800db24 <USBD_LL_StallEP>
 80096c2:	e015      	b.n	80096f0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00d      	beq.n	80096ec <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d108      	bne.n	80096ec <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096e0:	699b      	ldr	r3, [r3, #24]
 80096e2:	7afa      	ldrb	r2, [r7, #11]
 80096e4:	4611      	mov	r1, r2
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	4798      	blx	r3
 80096ea:	e001      	b.n	80096f0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80096ec:	2302      	movs	r3, #2
 80096ee:	e000      	b.n	80096f2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b086      	sub	sp, #24
 80096fe:	af00      	add	r7, sp, #0
 8009700:	60f8      	str	r0, [r7, #12]
 8009702:	460b      	mov	r3, r1
 8009704:	607a      	str	r2, [r7, #4]
 8009706:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009708:	7afb      	ldrb	r3, [r7, #11]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d17f      	bne.n	800980e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	3314      	adds	r3, #20
 8009712:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800971a:	2b02      	cmp	r3, #2
 800971c:	d15c      	bne.n	80097d8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	68da      	ldr	r2, [r3, #12]
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	429a      	cmp	r2, r3
 8009728:	d915      	bls.n	8009756 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	1ad2      	subs	r2, r2, r3
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	b29b      	uxth	r3, r3
 800973e:	461a      	mov	r2, r3
 8009740:	6879      	ldr	r1, [r7, #4]
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 fec1 	bl	800a4ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009748:	2300      	movs	r3, #0
 800974a:	2200      	movs	r2, #0
 800974c:	2100      	movs	r1, #0
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f004 fa94 	bl	800dc7c <USBD_LL_PrepareReceive>
 8009754:	e04e      	b.n	80097f4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	6912      	ldr	r2, [r2, #16]
 800975e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009762:	fb02 f201 	mul.w	r2, r2, r1
 8009766:	1a9b      	subs	r3, r3, r2
 8009768:	2b00      	cmp	r3, #0
 800976a:	d11c      	bne.n	80097a6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	689a      	ldr	r2, [r3, #8]
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009774:	429a      	cmp	r2, r3
 8009776:	d316      	bcc.n	80097a6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	689a      	ldr	r2, [r3, #8]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009782:	429a      	cmp	r2, r3
 8009784:	d20f      	bcs.n	80097a6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009786:	2200      	movs	r2, #0
 8009788:	2100      	movs	r1, #0
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f000 fe9d 	bl	800a4ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009798:	2300      	movs	r3, #0
 800979a:	2200      	movs	r2, #0
 800979c:	2100      	movs	r1, #0
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f004 fa6c 	bl	800dc7c <USBD_LL_PrepareReceive>
 80097a4:	e026      	b.n	80097f4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00a      	beq.n	80097c8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d105      	bne.n	80097c8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80097c8:	2180      	movs	r1, #128	; 0x80
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f004 f9aa 	bl	800db24 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f000 fecf 	bl	800a574 <USBD_CtlReceiveStatus>
 80097d6:	e00d      	b.n	80097f4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097de:	2b04      	cmp	r3, #4
 80097e0:	d004      	beq.n	80097ec <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d103      	bne.n	80097f4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80097ec:	2180      	movs	r1, #128	; 0x80
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f004 f998 	bl	800db24 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d11d      	bne.n	800983a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f7ff fe81 	bl	8009506 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800980c:	e015      	b.n	800983a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00d      	beq.n	8009836 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009820:	2b03      	cmp	r3, #3
 8009822:	d108      	bne.n	8009836 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	7afa      	ldrb	r2, [r7, #11]
 800982e:	4611      	mov	r1, r2
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	4798      	blx	r3
 8009834:	e001      	b.n	800983a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009836:	2302      	movs	r3, #2
 8009838:	e000      	b.n	800983c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800984c:	2340      	movs	r3, #64	; 0x40
 800984e:	2200      	movs	r2, #0
 8009850:	2100      	movs	r1, #0
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f004 f921 	bl	800da9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2240      	movs	r2, #64	; 0x40
 8009864:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009868:	2340      	movs	r3, #64	; 0x40
 800986a:	2200      	movs	r2, #0
 800986c:	2180      	movs	r1, #128	; 0x80
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f004 f913 	bl	800da9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2240      	movs	r2, #64	; 0x40
 800987e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d009      	beq.n	80098bc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6852      	ldr	r2, [r2, #4]
 80098b4:	b2d2      	uxtb	r2, r2
 80098b6:	4611      	mov	r1, r2
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	4798      	blx	r3
  }

  return USBD_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b083      	sub	sp, #12
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	460b      	mov	r3, r1
 80098d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	78fa      	ldrb	r2, [r7, #3]
 80098d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	bc80      	pop	{r7}
 80098e2:	4770      	bx	lr

080098e4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2204      	movs	r2, #4
 80098fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	bc80      	pop	{r7}
 800990a:	4770      	bx	lr

0800990c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800991a:	2b04      	cmp	r3, #4
 800991c:	d105      	bne.n	800992a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	bc80      	pop	{r7}
 8009934:	4770      	bx	lr

08009936 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b082      	sub	sp, #8
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009944:	2b03      	cmp	r3, #3
 8009946:	d10b      	bne.n	8009960 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d005      	beq.n	8009960 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
	...

0800996c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009982:	2b40      	cmp	r3, #64	; 0x40
 8009984:	d005      	beq.n	8009992 <USBD_StdDevReq+0x26>
 8009986:	2b40      	cmp	r3, #64	; 0x40
 8009988:	d84f      	bhi.n	8009a2a <USBD_StdDevReq+0xbe>
 800998a:	2b00      	cmp	r3, #0
 800998c:	d009      	beq.n	80099a2 <USBD_StdDevReq+0x36>
 800998e:	2b20      	cmp	r3, #32
 8009990:	d14b      	bne.n	8009a2a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	4798      	blx	r3
      break;
 80099a0:	e048      	b.n	8009a34 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	785b      	ldrb	r3, [r3, #1]
 80099a6:	2b09      	cmp	r3, #9
 80099a8:	d839      	bhi.n	8009a1e <USBD_StdDevReq+0xb2>
 80099aa:	a201      	add	r2, pc, #4	; (adr r2, 80099b0 <USBD_StdDevReq+0x44>)
 80099ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b0:	08009a01 	.word	0x08009a01
 80099b4:	08009a15 	.word	0x08009a15
 80099b8:	08009a1f 	.word	0x08009a1f
 80099bc:	08009a0b 	.word	0x08009a0b
 80099c0:	08009a1f 	.word	0x08009a1f
 80099c4:	080099e3 	.word	0x080099e3
 80099c8:	080099d9 	.word	0x080099d9
 80099cc:	08009a1f 	.word	0x08009a1f
 80099d0:	080099f7 	.word	0x080099f7
 80099d4:	080099ed 	.word	0x080099ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f9dc 	bl	8009d98 <USBD_GetDescriptor>
          break;
 80099e0:	e022      	b.n	8009a28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 fb3f 	bl	800a068 <USBD_SetAddress>
          break;
 80099ea:	e01d      	b.n	8009a28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fb7e 	bl	800a0f0 <USBD_SetConfig>
          break;
 80099f4:	e018      	b.n	8009a28 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fc07 	bl	800a20c <USBD_GetConfig>
          break;
 80099fe:	e013      	b.n	8009a28 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fc37 	bl	800a276 <USBD_GetStatus>
          break;
 8009a08:	e00e      	b.n	8009a28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a0a:	6839      	ldr	r1, [r7, #0]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fc65 	bl	800a2dc <USBD_SetFeature>
          break;
 8009a12:	e009      	b.n	8009a28 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fc74 	bl	800a304 <USBD_ClrFeature>
          break;
 8009a1c:	e004      	b.n	8009a28 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fccc 	bl	800a3be <USBD_CtlError>
          break;
 8009a26:	bf00      	nop
      }
      break;
 8009a28:	e004      	b.n	8009a34 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fcc6 	bl	800a3be <USBD_CtlError>
      break;
 8009a32:	bf00      	nop
  }

  return ret;
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop

08009a40 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a56:	2b40      	cmp	r3, #64	; 0x40
 8009a58:	d005      	beq.n	8009a66 <USBD_StdItfReq+0x26>
 8009a5a:	2b40      	cmp	r3, #64	; 0x40
 8009a5c:	d82e      	bhi.n	8009abc <USBD_StdItfReq+0x7c>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <USBD_StdItfReq+0x26>
 8009a62:	2b20      	cmp	r3, #32
 8009a64:	d12a      	bne.n	8009abc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d81d      	bhi.n	8009aae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	889b      	ldrh	r3, [r3, #4]
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d813      	bhi.n	8009aa4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	4798      	blx	r3
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	88db      	ldrh	r3, [r3, #6]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d110      	bne.n	8009ab8 <USBD_StdItfReq+0x78>
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10d      	bne.n	8009ab8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fd56 	bl	800a54e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009aa2:	e009      	b.n	8009ab8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fc89 	bl	800a3be <USBD_CtlError>
          break;
 8009aac:	e004      	b.n	8009ab8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fc84 	bl	800a3be <USBD_CtlError>
          break;
 8009ab6:	e000      	b.n	8009aba <USBD_StdItfReq+0x7a>
          break;
 8009ab8:	bf00      	nop
      }
      break;
 8009aba:	e004      	b.n	8009ac6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fc7d 	bl	800a3be <USBD_CtlError>
      break;
 8009ac4:	bf00      	nop
  }

  return USBD_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	889b      	ldrh	r3, [r3, #4]
 8009ae2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009aec:	2b40      	cmp	r3, #64	; 0x40
 8009aee:	d007      	beq.n	8009b00 <USBD_StdEPReq+0x30>
 8009af0:	2b40      	cmp	r3, #64	; 0x40
 8009af2:	f200 8146 	bhi.w	8009d82 <USBD_StdEPReq+0x2b2>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00a      	beq.n	8009b10 <USBD_StdEPReq+0x40>
 8009afa:	2b20      	cmp	r3, #32
 8009afc:	f040 8141 	bne.w	8009d82 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	4798      	blx	r3
      break;
 8009b0e:	e13d      	b.n	8009d8c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b18:	2b20      	cmp	r3, #32
 8009b1a:	d10a      	bne.n	8009b32 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	4798      	blx	r3
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	e12d      	b.n	8009d8e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	785b      	ldrb	r3, [r3, #1]
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	d007      	beq.n	8009b4a <USBD_StdEPReq+0x7a>
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	f300 811b 	bgt.w	8009d76 <USBD_StdEPReq+0x2a6>
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d072      	beq.n	8009c2a <USBD_StdEPReq+0x15a>
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d03a      	beq.n	8009bbe <USBD_StdEPReq+0xee>
 8009b48:	e115      	b.n	8009d76 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d002      	beq.n	8009b5a <USBD_StdEPReq+0x8a>
 8009b54:	2b03      	cmp	r3, #3
 8009b56:	d015      	beq.n	8009b84 <USBD_StdEPReq+0xb4>
 8009b58:	e02b      	b.n	8009bb2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00c      	beq.n	8009b7a <USBD_StdEPReq+0xaa>
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	2b80      	cmp	r3, #128	; 0x80
 8009b64:	d009      	beq.n	8009b7a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f003 ffda 	bl	800db24 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b70:	2180      	movs	r1, #128	; 0x80
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f003 ffd6 	bl	800db24 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b78:	e020      	b.n	8009bbc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fc1e 	bl	800a3be <USBD_CtlError>
              break;
 8009b82:	e01b      	b.n	8009bbc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	885b      	ldrh	r3, [r3, #2]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10e      	bne.n	8009baa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009b8c:	7bbb      	ldrb	r3, [r7, #14]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00b      	beq.n	8009baa <USBD_StdEPReq+0xda>
 8009b92:	7bbb      	ldrb	r3, [r7, #14]
 8009b94:	2b80      	cmp	r3, #128	; 0x80
 8009b96:	d008      	beq.n	8009baa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	88db      	ldrh	r3, [r3, #6]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d104      	bne.n	8009baa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009ba0:	7bbb      	ldrb	r3, [r7, #14]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f003 ffbd 	bl	800db24 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fccf 	bl	800a54e <USBD_CtlSendStatus>

              break;
 8009bb0:	e004      	b.n	8009bbc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fc02 	bl	800a3be <USBD_CtlError>
              break;
 8009bba:	bf00      	nop
          }
          break;
 8009bbc:	e0e0      	b.n	8009d80 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d002      	beq.n	8009bce <USBD_StdEPReq+0xfe>
 8009bc8:	2b03      	cmp	r3, #3
 8009bca:	d015      	beq.n	8009bf8 <USBD_StdEPReq+0x128>
 8009bcc:	e026      	b.n	8009c1c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bce:	7bbb      	ldrb	r3, [r7, #14]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00c      	beq.n	8009bee <USBD_StdEPReq+0x11e>
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
 8009bd6:	2b80      	cmp	r3, #128	; 0x80
 8009bd8:	d009      	beq.n	8009bee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f003 ffa0 	bl	800db24 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009be4:	2180      	movs	r1, #128	; 0x80
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f003 ff9c 	bl	800db24 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bec:	e01c      	b.n	8009c28 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fbe4 	bl	800a3be <USBD_CtlError>
              break;
 8009bf6:	e017      	b.n	8009c28 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	885b      	ldrh	r3, [r3, #2]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d112      	bne.n	8009c26 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
 8009c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d004      	beq.n	8009c14 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c0a:	7bbb      	ldrb	r3, [r7, #14]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f003 ffa7 	bl	800db62 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fc9a 	bl	800a54e <USBD_CtlSendStatus>
              }
              break;
 8009c1a:	e004      	b.n	8009c26 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 fbcd 	bl	800a3be <USBD_CtlError>
              break;
 8009c24:	e000      	b.n	8009c28 <USBD_StdEPReq+0x158>
              break;
 8009c26:	bf00      	nop
          }
          break;
 8009c28:	e0aa      	b.n	8009d80 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d002      	beq.n	8009c3a <USBD_StdEPReq+0x16a>
 8009c34:	2b03      	cmp	r3, #3
 8009c36:	d032      	beq.n	8009c9e <USBD_StdEPReq+0x1ce>
 8009c38:	e097      	b.n	8009d6a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c3a:	7bbb      	ldrb	r3, [r7, #14]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d007      	beq.n	8009c50 <USBD_StdEPReq+0x180>
 8009c40:	7bbb      	ldrb	r3, [r7, #14]
 8009c42:	2b80      	cmp	r3, #128	; 0x80
 8009c44:	d004      	beq.n	8009c50 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fbb8 	bl	800a3be <USBD_CtlError>
                break;
 8009c4e:	e091      	b.n	8009d74 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	da0b      	bge.n	8009c70 <USBD_StdEPReq+0x1a0>
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c5e:	4613      	mov	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4413      	add	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	3310      	adds	r3, #16
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	e00b      	b.n	8009c88 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c70:	7bbb      	ldrb	r3, [r7, #14]
 8009c72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c76:	4613      	mov	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	4413      	add	r3, r2
 8009c86:	3304      	adds	r3, #4
 8009c88:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	2202      	movs	r2, #2
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 fbfb 	bl	800a492 <USBD_CtlSendData>
              break;
 8009c9c:	e06a      	b.n	8009d74 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	da11      	bge.n	8009cca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
 8009ca8:	f003 020f 	and.w	r2, r3, #15
 8009cac:	6879      	ldr	r1, [r7, #4]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	440b      	add	r3, r1
 8009cb8:	3318      	adds	r3, #24
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d117      	bne.n	8009cf0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fb7b 	bl	800a3be <USBD_CtlError>
                  break;
 8009cc8:	e054      	b.n	8009d74 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	f003 020f 	and.w	r2, r3, #15
 8009cd0:	6879      	ldr	r1, [r7, #4]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4413      	add	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	440b      	add	r3, r1
 8009cdc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d104      	bne.n	8009cf0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fb68 	bl	800a3be <USBD_CtlError>
                  break;
 8009cee:	e041      	b.n	8009d74 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	da0b      	bge.n	8009d10 <USBD_StdEPReq+0x240>
 8009cf8:	7bbb      	ldrb	r3, [r7, #14]
 8009cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cfe:	4613      	mov	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	3310      	adds	r3, #16
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	e00b      	b.n	8009d28 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
 8009d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d16:	4613      	mov	r3, r2
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	4413      	add	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	4413      	add	r3, r2
 8009d26:	3304      	adds	r3, #4
 8009d28:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <USBD_StdEPReq+0x266>
 8009d30:	7bbb      	ldrb	r3, [r7, #14]
 8009d32:	2b80      	cmp	r3, #128	; 0x80
 8009d34:	d103      	bne.n	8009d3e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	e00e      	b.n	8009d5c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009d3e:	7bbb      	ldrb	r3, [r7, #14]
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f003 ff2c 	bl	800dba0 <USBD_LL_IsStallEP>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	2201      	movs	r2, #1
 8009d52:	601a      	str	r2, [r3, #0]
 8009d54:	e002      	b.n	8009d5c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	2202      	movs	r2, #2
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fb95 	bl	800a492 <USBD_CtlSendData>
              break;
 8009d68:	e004      	b.n	8009d74 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009d6a:	6839      	ldr	r1, [r7, #0]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fb26 	bl	800a3be <USBD_CtlError>
              break;
 8009d72:	bf00      	nop
          }
          break;
 8009d74:	e004      	b.n	8009d80 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fb20 	bl	800a3be <USBD_CtlError>
          break;
 8009d7e:	bf00      	nop
      }
      break;
 8009d80:	e004      	b.n	8009d8c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fb1a 	bl	800a3be <USBD_CtlError>
      break;
 8009d8a:	bf00      	nop
  }

  return ret;
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
	...

08009d98 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009da2:	2300      	movs	r3, #0
 8009da4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009daa:	2300      	movs	r3, #0
 8009dac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	885b      	ldrh	r3, [r3, #2]
 8009db2:	0a1b      	lsrs	r3, r3, #8
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	3b01      	subs	r3, #1
 8009db8:	2b06      	cmp	r3, #6
 8009dba:	f200 8128 	bhi.w	800a00e <USBD_GetDescriptor+0x276>
 8009dbe:	a201      	add	r2, pc, #4	; (adr r2, 8009dc4 <USBD_GetDescriptor+0x2c>)
 8009dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc4:	08009de1 	.word	0x08009de1
 8009dc8:	08009df9 	.word	0x08009df9
 8009dcc:	08009e39 	.word	0x08009e39
 8009dd0:	0800a00f 	.word	0x0800a00f
 8009dd4:	0800a00f 	.word	0x0800a00f
 8009dd8:	08009faf 	.word	0x08009faf
 8009ddc:	08009fdb 	.word	0x08009fdb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	7c12      	ldrb	r2, [r2, #16]
 8009dec:	f107 0108 	add.w	r1, r7, #8
 8009df0:	4610      	mov	r0, r2
 8009df2:	4798      	blx	r3
 8009df4:	60f8      	str	r0, [r7, #12]
      break;
 8009df6:	e112      	b.n	800a01e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	7c1b      	ldrb	r3, [r3, #16]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10d      	bne.n	8009e1c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e08:	f107 0208 	add.w	r2, r7, #8
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	4798      	blx	r3
 8009e10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	3301      	adds	r3, #1
 8009e16:	2202      	movs	r2, #2
 8009e18:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e1a:	e100      	b.n	800a01e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e24:	f107 0208 	add.w	r2, r7, #8
 8009e28:	4610      	mov	r0, r2
 8009e2a:	4798      	blx	r3
 8009e2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	3301      	adds	r3, #1
 8009e32:	2202      	movs	r2, #2
 8009e34:	701a      	strb	r2, [r3, #0]
      break;
 8009e36:	e0f2      	b.n	800a01e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	885b      	ldrh	r3, [r3, #2]
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b05      	cmp	r3, #5
 8009e40:	f200 80ac 	bhi.w	8009f9c <USBD_GetDescriptor+0x204>
 8009e44:	a201      	add	r2, pc, #4	; (adr r2, 8009e4c <USBD_GetDescriptor+0xb4>)
 8009e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4a:	bf00      	nop
 8009e4c:	08009e65 	.word	0x08009e65
 8009e50:	08009e99 	.word	0x08009e99
 8009e54:	08009ecd 	.word	0x08009ecd
 8009e58:	08009f01 	.word	0x08009f01
 8009e5c:	08009f35 	.word	0x08009f35
 8009e60:	08009f69 	.word	0x08009f69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00b      	beq.n	8009e88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	7c12      	ldrb	r2, [r2, #16]
 8009e7c:	f107 0108 	add.w	r1, r7, #8
 8009e80:	4610      	mov	r0, r2
 8009e82:	4798      	blx	r3
 8009e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e86:	e091      	b.n	8009fac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fa97 	bl	800a3be <USBD_CtlError>
            err++;
 8009e90:	7afb      	ldrb	r3, [r7, #11]
 8009e92:	3301      	adds	r3, #1
 8009e94:	72fb      	strb	r3, [r7, #11]
          break;
 8009e96:	e089      	b.n	8009fac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00b      	beq.n	8009ebc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	7c12      	ldrb	r2, [r2, #16]
 8009eb0:	f107 0108 	add.w	r1, r7, #8
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	4798      	blx	r3
 8009eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eba:	e077      	b.n	8009fac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fa7d 	bl	800a3be <USBD_CtlError>
            err++;
 8009ec4:	7afb      	ldrb	r3, [r7, #11]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eca:	e06f      	b.n	8009fac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00b      	beq.n	8009ef0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	7c12      	ldrb	r2, [r2, #16]
 8009ee4:	f107 0108 	add.w	r1, r7, #8
 8009ee8:	4610      	mov	r0, r2
 8009eea:	4798      	blx	r3
 8009eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eee:	e05d      	b.n	8009fac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ef0:	6839      	ldr	r1, [r7, #0]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fa63 	bl	800a3be <USBD_CtlError>
            err++;
 8009ef8:	7afb      	ldrb	r3, [r7, #11]
 8009efa:	3301      	adds	r3, #1
 8009efc:	72fb      	strb	r3, [r7, #11]
          break;
 8009efe:	e055      	b.n	8009fac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00b      	beq.n	8009f24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	7c12      	ldrb	r2, [r2, #16]
 8009f18:	f107 0108 	add.w	r1, r7, #8
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	4798      	blx	r3
 8009f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f22:	e043      	b.n	8009fac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fa49 	bl	800a3be <USBD_CtlError>
            err++;
 8009f2c:	7afb      	ldrb	r3, [r7, #11]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	72fb      	strb	r3, [r7, #11]
          break;
 8009f32:	e03b      	b.n	8009fac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f3a:	695b      	ldr	r3, [r3, #20]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00b      	beq.n	8009f58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	7c12      	ldrb	r2, [r2, #16]
 8009f4c:	f107 0108 	add.w	r1, r7, #8
 8009f50:	4610      	mov	r0, r2
 8009f52:	4798      	blx	r3
 8009f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f56:	e029      	b.n	8009fac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fa2f 	bl	800a3be <USBD_CtlError>
            err++;
 8009f60:	7afb      	ldrb	r3, [r7, #11]
 8009f62:	3301      	adds	r3, #1
 8009f64:	72fb      	strb	r3, [r7, #11]
          break;
 8009f66:	e021      	b.n	8009fac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00b      	beq.n	8009f8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f7a:	699b      	ldr	r3, [r3, #24]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	7c12      	ldrb	r2, [r2, #16]
 8009f80:	f107 0108 	add.w	r1, r7, #8
 8009f84:	4610      	mov	r0, r2
 8009f86:	4798      	blx	r3
 8009f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f8a:	e00f      	b.n	8009fac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fa15 	bl	800a3be <USBD_CtlError>
            err++;
 8009f94:	7afb      	ldrb	r3, [r7, #11]
 8009f96:	3301      	adds	r3, #1
 8009f98:	72fb      	strb	r3, [r7, #11]
          break;
 8009f9a:	e007      	b.n	8009fac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fa0d 	bl	800a3be <USBD_CtlError>
          err++;
 8009fa4:	7afb      	ldrb	r3, [r7, #11]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009faa:	e038      	b.n	800a01e <USBD_GetDescriptor+0x286>
 8009fac:	e037      	b.n	800a01e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	7c1b      	ldrb	r3, [r3, #16]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d109      	bne.n	8009fca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fbe:	f107 0208 	add.w	r2, r7, #8
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	4798      	blx	r3
 8009fc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fc8:	e029      	b.n	800a01e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f9f6 	bl	800a3be <USBD_CtlError>
        err++;
 8009fd2:	7afb      	ldrb	r3, [r7, #11]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	72fb      	strb	r3, [r7, #11]
      break;
 8009fd8:	e021      	b.n	800a01e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	7c1b      	ldrb	r3, [r3, #16]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10d      	bne.n	8009ffe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fea:	f107 0208 	add.w	r2, r7, #8
 8009fee:	4610      	mov	r0, r2
 8009ff0:	4798      	blx	r3
 8009ff2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	2207      	movs	r2, #7
 8009ffa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ffc:	e00f      	b.n	800a01e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f9dc 	bl	800a3be <USBD_CtlError>
        err++;
 800a006:	7afb      	ldrb	r3, [r7, #11]
 800a008:	3301      	adds	r3, #1
 800a00a:	72fb      	strb	r3, [r7, #11]
      break;
 800a00c:	e007      	b.n	800a01e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f9d4 	bl	800a3be <USBD_CtlError>
      err++;
 800a016:	7afb      	ldrb	r3, [r7, #11]
 800a018:	3301      	adds	r3, #1
 800a01a:	72fb      	strb	r3, [r7, #11]
      break;
 800a01c:	bf00      	nop
  }

  if (err != 0U)
 800a01e:	7afb      	ldrb	r3, [r7, #11]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d11c      	bne.n	800a05e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a024:	893b      	ldrh	r3, [r7, #8]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d011      	beq.n	800a04e <USBD_GetDescriptor+0x2b6>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	88db      	ldrh	r3, [r3, #6]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00d      	beq.n	800a04e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	88da      	ldrh	r2, [r3, #6]
 800a036:	893b      	ldrh	r3, [r7, #8]
 800a038:	4293      	cmp	r3, r2
 800a03a:	bf28      	it	cs
 800a03c:	4613      	movcs	r3, r2
 800a03e:	b29b      	uxth	r3, r3
 800a040:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a042:	893b      	ldrh	r3, [r7, #8]
 800a044:	461a      	mov	r2, r3
 800a046:	68f9      	ldr	r1, [r7, #12]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fa22 	bl	800a492 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	88db      	ldrh	r3, [r3, #6]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d104      	bne.n	800a060 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fa79 	bl	800a54e <USBD_CtlSendStatus>
 800a05c:	e000      	b.n	800a060 <USBD_GetDescriptor+0x2c8>
    return;
 800a05e:	bf00      	nop
    }
  }
}
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop

0800a068 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	889b      	ldrh	r3, [r3, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d130      	bne.n	800a0dc <USBD_SetAddress+0x74>
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	88db      	ldrh	r3, [r3, #6]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d12c      	bne.n	800a0dc <USBD_SetAddress+0x74>
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	885b      	ldrh	r3, [r3, #2]
 800a086:	2b7f      	cmp	r3, #127	; 0x7f
 800a088:	d828      	bhi.n	800a0dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	885b      	ldrh	r3, [r3, #2]
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a094:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d104      	bne.n	800a0aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a0a0:	6839      	ldr	r1, [r7, #0]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f98b 	bl	800a3be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0a8:	e01d      	b.n	800a0e6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	7bfa      	ldrb	r2, [r7, #15]
 800a0ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f003 fd9e 	bl	800dbf8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fa46 	bl	800a54e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d004      	beq.n	800a0d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0d0:	e009      	b.n	800a0e6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0da:	e004      	b.n	800a0e6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f96d 	bl	800a3be <USBD_CtlError>
  }
}
 800a0e4:	bf00      	nop
 800a0e6:	bf00      	nop
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
	...

0800a0f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	885b      	ldrh	r3, [r3, #2]
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	4b41      	ldr	r3, [pc, #260]	; (800a208 <USBD_SetConfig+0x118>)
 800a102:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a104:	4b40      	ldr	r3, [pc, #256]	; (800a208 <USBD_SetConfig+0x118>)
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d904      	bls.n	800a116 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f955 	bl	800a3be <USBD_CtlError>
 800a114:	e075      	b.n	800a202 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d002      	beq.n	800a126 <USBD_SetConfig+0x36>
 800a120:	2b03      	cmp	r3, #3
 800a122:	d023      	beq.n	800a16c <USBD_SetConfig+0x7c>
 800a124:	e062      	b.n	800a1ec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a126:	4b38      	ldr	r3, [pc, #224]	; (800a208 <USBD_SetConfig+0x118>)
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d01a      	beq.n	800a164 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a12e:	4b36      	ldr	r3, [pc, #216]	; (800a208 <USBD_SetConfig+0x118>)
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2203      	movs	r2, #3
 800a13c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a140:	4b31      	ldr	r3, [pc, #196]	; (800a208 <USBD_SetConfig+0x118>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	4619      	mov	r1, r3
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7ff f9e7 	bl	800951a <USBD_SetClassConfig>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d104      	bne.n	800a15c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f932 	bl	800a3be <USBD_CtlError>
            return;
 800a15a:	e052      	b.n	800a202 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f9f6 	bl	800a54e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a162:	e04e      	b.n	800a202 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f9f2 	bl	800a54e <USBD_CtlSendStatus>
        break;
 800a16a:	e04a      	b.n	800a202 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a16c:	4b26      	ldr	r3, [pc, #152]	; (800a208 <USBD_SetConfig+0x118>)
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d112      	bne.n	800a19a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2202      	movs	r2, #2
 800a178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a17c:	4b22      	ldr	r3, [pc, #136]	; (800a208 <USBD_SetConfig+0x118>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a186:	4b20      	ldr	r3, [pc, #128]	; (800a208 <USBD_SetConfig+0x118>)
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	4619      	mov	r1, r3
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7ff f9e3 	bl	8009558 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 f9db 	bl	800a54e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a198:	e033      	b.n	800a202 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a19a:	4b1b      	ldr	r3, [pc, #108]	; (800a208 <USBD_SetConfig+0x118>)
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d01d      	beq.n	800a1e4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff f9d1 	bl	8009558 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a1b6:	4b14      	ldr	r3, [pc, #80]	; (800a208 <USBD_SetConfig+0x118>)
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a1c0:	4b11      	ldr	r3, [pc, #68]	; (800a208 <USBD_SetConfig+0x118>)
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7ff f9a7 	bl	800951a <USBD_SetClassConfig>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d104      	bne.n	800a1dc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f8f2 	bl	800a3be <USBD_CtlError>
            return;
 800a1da:	e012      	b.n	800a202 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f9b6 	bl	800a54e <USBD_CtlSendStatus>
        break;
 800a1e2:	e00e      	b.n	800a202 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f9b2 	bl	800a54e <USBD_CtlSendStatus>
        break;
 800a1ea:	e00a      	b.n	800a202 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f8e5 	bl	800a3be <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a1f4:	4b04      	ldr	r3, [pc, #16]	; (800a208 <USBD_SetConfig+0x118>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7ff f9ac 	bl	8009558 <USBD_ClrClassConfig>
        break;
 800a200:	bf00      	nop
    }
  }
}
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	200001b1 	.word	0x200001b1

0800a20c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	88db      	ldrh	r3, [r3, #6]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d004      	beq.n	800a228 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a21e:	6839      	ldr	r1, [r7, #0]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 f8cc 	bl	800a3be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a226:	e022      	b.n	800a26e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a22e:	2b02      	cmp	r3, #2
 800a230:	dc02      	bgt.n	800a238 <USBD_GetConfig+0x2c>
 800a232:	2b00      	cmp	r3, #0
 800a234:	dc03      	bgt.n	800a23e <USBD_GetConfig+0x32>
 800a236:	e015      	b.n	800a264 <USBD_GetConfig+0x58>
 800a238:	2b03      	cmp	r3, #3
 800a23a:	d00b      	beq.n	800a254 <USBD_GetConfig+0x48>
 800a23c:	e012      	b.n	800a264 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	3308      	adds	r3, #8
 800a248:	2201      	movs	r2, #1
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f920 	bl	800a492 <USBD_CtlSendData>
        break;
 800a252:	e00c      	b.n	800a26e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3304      	adds	r3, #4
 800a258:	2201      	movs	r2, #1
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f918 	bl	800a492 <USBD_CtlSendData>
        break;
 800a262:	e004      	b.n	800a26e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f8a9 	bl	800a3be <USBD_CtlError>
        break;
 800a26c:	bf00      	nop
}
 800a26e:	bf00      	nop
 800a270:	3708      	adds	r7, #8
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b082      	sub	sp, #8
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a286:	3b01      	subs	r3, #1
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d81e      	bhi.n	800a2ca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	88db      	ldrh	r3, [r3, #6]
 800a290:	2b02      	cmp	r3, #2
 800a292:	d004      	beq.n	800a29e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f891 	bl	800a3be <USBD_CtlError>
        break;
 800a29c:	e01a      	b.n	800a2d4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d005      	beq.n	800a2ba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	f043 0202 	orr.w	r2, r3, #2
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	330c      	adds	r3, #12
 800a2be:	2202      	movs	r2, #2
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 f8e5 	bl	800a492 <USBD_CtlSendData>
      break;
 800a2c8:	e004      	b.n	800a2d4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a2ca:	6839      	ldr	r1, [r7, #0]
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 f876 	bl	800a3be <USBD_CtlError>
      break;
 800a2d2:	bf00      	nop
  }
}
 800a2d4:	bf00      	nop
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	885b      	ldrh	r3, [r3, #2]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d106      	bne.n	800a2fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f929 	bl	800a54e <USBD_CtlSendStatus>
  }
}
 800a2fc:	bf00      	nop
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a314:	3b01      	subs	r3, #1
 800a316:	2b02      	cmp	r3, #2
 800a318:	d80b      	bhi.n	800a332 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	885b      	ldrh	r3, [r3, #2]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d10c      	bne.n	800a33c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f90f 	bl	800a54e <USBD_CtlSendStatus>
      }
      break;
 800a330:	e004      	b.n	800a33c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 f842 	bl	800a3be <USBD_CtlError>
      break;
 800a33a:	e000      	b.n	800a33e <USBD_ClrFeature+0x3a>
      break;
 800a33c:	bf00      	nop
  }
}
 800a33e:	bf00      	nop
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a346:	b480      	push	{r7}
 800a348:	b083      	sub	sp, #12
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	781a      	ldrb	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	785a      	ldrb	r2, [r3, #1]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	3302      	adds	r3, #2
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	b29a      	uxth	r2, r3
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	3303      	adds	r3, #3
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	b29b      	uxth	r3, r3
 800a370:	021b      	lsls	r3, r3, #8
 800a372:	b29b      	uxth	r3, r3
 800a374:	4413      	add	r3, r2
 800a376:	b29a      	uxth	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	3304      	adds	r3, #4
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	b29a      	uxth	r2, r3
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	3305      	adds	r3, #5
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	021b      	lsls	r3, r3, #8
 800a38e:	b29b      	uxth	r3, r3
 800a390:	4413      	add	r3, r2
 800a392:	b29a      	uxth	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	3306      	adds	r3, #6
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	3307      	adds	r3, #7
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	021b      	lsls	r3, r3, #8
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	4413      	add	r3, r2
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	80da      	strh	r2, [r3, #6]

}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bc80      	pop	{r7}
 800a3bc:	4770      	bx	lr

0800a3be <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b082      	sub	sp, #8
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
 800a3c6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a3c8:	2180      	movs	r1, #128	; 0x80
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f003 fbaa 	bl	800db24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f003 fba6 	bl	800db24 <USBD_LL_StallEP>
}
 800a3d8:	bf00      	nop
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d032      	beq.n	800a45c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 f834 	bl	800a464 <USBD_GetLen>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	3301      	adds	r3, #1
 800a400:	b29b      	uxth	r3, r3
 800a402:	005b      	lsls	r3, r3, #1
 800a404:	b29a      	uxth	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a40a:	7dfb      	ldrb	r3, [r7, #23]
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	75fa      	strb	r2, [r7, #23]
 800a410:	461a      	mov	r2, r3
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	4413      	add	r3, r2
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	7812      	ldrb	r2, [r2, #0]
 800a41a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a41c:	7dfb      	ldrb	r3, [r7, #23]
 800a41e:	1c5a      	adds	r2, r3, #1
 800a420:	75fa      	strb	r2, [r7, #23]
 800a422:	461a      	mov	r2, r3
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	4413      	add	r3, r2
 800a428:	2203      	movs	r2, #3
 800a42a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a42c:	e012      	b.n	800a454 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	1c5a      	adds	r2, r3, #1
 800a432:	60fa      	str	r2, [r7, #12]
 800a434:	7dfa      	ldrb	r2, [r7, #23]
 800a436:	1c51      	adds	r1, r2, #1
 800a438:	75f9      	strb	r1, [r7, #23]
 800a43a:	4611      	mov	r1, r2
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	440a      	add	r2, r1
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a444:	7dfb      	ldrb	r3, [r7, #23]
 800a446:	1c5a      	adds	r2, r3, #1
 800a448:	75fa      	strb	r2, [r7, #23]
 800a44a:	461a      	mov	r2, r3
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	4413      	add	r3, r2
 800a450:	2200      	movs	r2, #0
 800a452:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1e8      	bne.n	800a42e <USBD_GetString+0x4e>
    }
  }
}
 800a45c:	bf00      	nop
 800a45e:	3718      	adds	r7, #24
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a470:	e005      	b.n	800a47e <USBD_GetLen+0x1a>
  {
    len++;
 800a472:	7bfb      	ldrb	r3, [r7, #15]
 800a474:	3301      	adds	r3, #1
 800a476:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	3301      	adds	r3, #1
 800a47c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1f5      	bne.n	800a472 <USBD_GetLen+0xe>
  }

  return len;
 800a486:	7bfb      	ldrb	r3, [r7, #15]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bc80      	pop	{r7}
 800a490:	4770      	bx	lr

0800a492 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b084      	sub	sp, #16
 800a496:	af00      	add	r7, sp, #0
 800a498:	60f8      	str	r0, [r7, #12]
 800a49a:	60b9      	str	r1, [r7, #8]
 800a49c:	4613      	mov	r3, r2
 800a49e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a4a8:	88fa      	ldrh	r2, [r7, #6]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a4ae:	88fa      	ldrh	r2, [r7, #6]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4b4:	88fb      	ldrh	r3, [r7, #6]
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f003 fbbb 	bl	800dc36 <USBD_LL_Transmit>

  return USBD_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	60f8      	str	r0, [r7, #12]
 800a4d2:	60b9      	str	r1, [r7, #8]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4d8:	88fb      	ldrh	r3, [r7, #6]
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	2100      	movs	r1, #0
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f003 fba9 	bl	800dc36 <USBD_LL_Transmit>

  return USBD_OK;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b084      	sub	sp, #16
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	60f8      	str	r0, [r7, #12]
 800a4f6:	60b9      	str	r1, [r7, #8]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2203      	movs	r2, #3
 800a500:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a504:	88fa      	ldrh	r2, [r7, #6]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a50c:	88fa      	ldrh	r2, [r7, #6]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a514:	88fb      	ldrh	r3, [r7, #6]
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	2100      	movs	r1, #0
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f003 fbae 	bl	800dc7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b084      	sub	sp, #16
 800a52e:	af00      	add	r7, sp, #0
 800a530:	60f8      	str	r0, [r7, #12]
 800a532:	60b9      	str	r1, [r7, #8]
 800a534:	4613      	mov	r3, r2
 800a536:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a538:	88fb      	ldrh	r3, [r7, #6]
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	2100      	movs	r1, #0
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f003 fb9c 	bl	800dc7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b082      	sub	sp, #8
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2204      	movs	r2, #4
 800a55a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a55e:	2300      	movs	r3, #0
 800a560:	2200      	movs	r2, #0
 800a562:	2100      	movs	r1, #0
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f003 fb66 	bl	800dc36 <USBD_LL_Transmit>

  return USBD_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2205      	movs	r2, #5
 800a580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a584:	2300      	movs	r3, #0
 800a586:	2200      	movs	r2, #0
 800a588:	2100      	movs	r1, #0
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f003 fb76 	bl	800dc7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5a2:	f3ef 8305 	mrs	r3, IPSR
 800a5a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10f      	bne.n	800a5ce <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5ae:	f3ef 8310 	mrs	r3, PRIMASK
 800a5b2:	607b      	str	r3, [r7, #4]
  return(result);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d109      	bne.n	800a5ce <osKernelInitialize+0x32>
 800a5ba:	4b10      	ldr	r3, [pc, #64]	; (800a5fc <osKernelInitialize+0x60>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d109      	bne.n	800a5d6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a5c2:	f3ef 8311 	mrs	r3, BASEPRI
 800a5c6:	603b      	str	r3, [r7, #0]
  return(result);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d003      	beq.n	800a5d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a5ce:	f06f 0305 	mvn.w	r3, #5
 800a5d2:	60fb      	str	r3, [r7, #12]
 800a5d4:	e00c      	b.n	800a5f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a5d6:	4b09      	ldr	r3, [pc, #36]	; (800a5fc <osKernelInitialize+0x60>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d105      	bne.n	800a5ea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800a5de:	4b07      	ldr	r3, [pc, #28]	; (800a5fc <osKernelInitialize+0x60>)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	60fb      	str	r3, [r7, #12]
 800a5e8:	e002      	b.n	800a5f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a5ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bc80      	pop	{r7}
 800a5fa:	4770      	bx	lr
 800a5fc:	200001b4 	.word	0x200001b4

0800a600 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a606:	f3ef 8305 	mrs	r3, IPSR
 800a60a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a60c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10f      	bne.n	800a632 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a612:	f3ef 8310 	mrs	r3, PRIMASK
 800a616:	607b      	str	r3, [r7, #4]
  return(result);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d109      	bne.n	800a632 <osKernelStart+0x32>
 800a61e:	4b11      	ldr	r3, [pc, #68]	; (800a664 <osKernelStart+0x64>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b02      	cmp	r3, #2
 800a624:	d109      	bne.n	800a63a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a626:	f3ef 8311 	mrs	r3, BASEPRI
 800a62a:	603b      	str	r3, [r7, #0]
  return(result);
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <osKernelStart+0x3a>
    stat = osErrorISR;
 800a632:	f06f 0305 	mvn.w	r3, #5
 800a636:	60fb      	str	r3, [r7, #12]
 800a638:	e00e      	b.n	800a658 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800a63a:	4b0a      	ldr	r3, [pc, #40]	; (800a664 <osKernelStart+0x64>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d107      	bne.n	800a652 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800a642:	4b08      	ldr	r3, [pc, #32]	; (800a664 <osKernelStart+0x64>)
 800a644:	2202      	movs	r2, #2
 800a646:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a648:	f001 f9ba 	bl	800b9c0 <vTaskStartScheduler>
      stat = osOK;
 800a64c:	2300      	movs	r3, #0
 800a64e:	60fb      	str	r3, [r7, #12]
 800a650:	e002      	b.n	800a658 <osKernelStart+0x58>
    } else {
      stat = osError;
 800a652:	f04f 33ff 	mov.w	r3, #4294967295
 800a656:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a658:	68fb      	ldr	r3, [r7, #12]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	200001b4 	.word	0x200001b4

0800a668 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a668:	b580      	push	{r7, lr}
 800a66a:	b092      	sub	sp, #72	; 0x48
 800a66c:	af04      	add	r7, sp, #16
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a674:	2300      	movs	r3, #0
 800a676:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a678:	f3ef 8305 	mrs	r3, IPSR
 800a67c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800a680:	2b00      	cmp	r3, #0
 800a682:	f040 8094 	bne.w	800a7ae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a686:	f3ef 8310 	mrs	r3, PRIMASK
 800a68a:	623b      	str	r3, [r7, #32]
  return(result);
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	f040 808d 	bne.w	800a7ae <osThreadNew+0x146>
 800a694:	4b48      	ldr	r3, [pc, #288]	; (800a7b8 <osThreadNew+0x150>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d106      	bne.n	800a6aa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a69c:	f3ef 8311 	mrs	r3, BASEPRI
 800a6a0:	61fb      	str	r3, [r7, #28]
  return(result);
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f040 8082 	bne.w	800a7ae <osThreadNew+0x146>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d07e      	beq.n	800a7ae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800a6b0:	2380      	movs	r3, #128	; 0x80
 800a6b2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800a6b4:	2318      	movs	r3, #24
 800a6b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800a6bc:	f107 031b 	add.w	r3, r7, #27
 800a6c0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800a6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6c6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d045      	beq.n	800a75a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <osThreadNew+0x74>
        name = attr->name;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d002      	beq.n	800a6ea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d008      	beq.n	800a702 <osThreadNew+0x9a>
 800a6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f2:	2b38      	cmp	r3, #56	; 0x38
 800a6f4:	d805      	bhi.n	800a702 <osThreadNew+0x9a>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	f003 0301 	and.w	r3, r3, #1
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d001      	beq.n	800a706 <osThreadNew+0x9e>
        return (NULL);
 800a702:	2300      	movs	r3, #0
 800a704:	e054      	b.n	800a7b0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	695b      	ldr	r3, [r3, #20]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	089b      	lsrs	r3, r3, #2
 800a714:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00e      	beq.n	800a73c <osThreadNew+0xd4>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	2b5b      	cmp	r3, #91	; 0x5b
 800a724:	d90a      	bls.n	800a73c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d006      	beq.n	800a73c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	695b      	ldr	r3, [r3, #20]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d002      	beq.n	800a73c <osThreadNew+0xd4>
        mem = 1;
 800a736:	2301      	movs	r3, #1
 800a738:	62bb      	str	r3, [r7, #40]	; 0x28
 800a73a:	e010      	b.n	800a75e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10c      	bne.n	800a75e <osThreadNew+0xf6>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d108      	bne.n	800a75e <osThreadNew+0xf6>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d104      	bne.n	800a75e <osThreadNew+0xf6>
          mem = 0;
 800a754:	2300      	movs	r3, #0
 800a756:	62bb      	str	r3, [r7, #40]	; 0x28
 800a758:	e001      	b.n	800a75e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800a75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a760:	2b01      	cmp	r3, #1
 800a762:	d110      	bne.n	800a786 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a76c:	9202      	str	r2, [sp, #8]
 800a76e:	9301      	str	r3, [sp, #4]
 800a770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a778:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f000 fed6 	bl	800b52c <xTaskCreateStatic>
 800a780:	4603      	mov	r3, r0
 800a782:	617b      	str	r3, [r7, #20]
 800a784:	e013      	b.n	800a7ae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d110      	bne.n	800a7ae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78e:	b29a      	uxth	r2, r3
 800a790:	f107 0314 	add.w	r3, r7, #20
 800a794:	9301      	str	r3, [sp, #4]
 800a796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a798:	9300      	str	r3, [sp, #0]
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 ff20 	bl	800b5e4 <xTaskCreate>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d001      	beq.n	800a7ae <osThreadNew+0x146>
          hTask = NULL;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a7ae:	697b      	ldr	r3, [r7, #20]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3738      	adds	r7, #56	; 0x38
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	200001b4 	.word	0x200001b4

0800a7bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b086      	sub	sp, #24
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7c4:	f3ef 8305 	mrs	r3, IPSR
 800a7c8:	613b      	str	r3, [r7, #16]
  return(result);
 800a7ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10f      	bne.n	800a7f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7d0:	f3ef 8310 	mrs	r3, PRIMASK
 800a7d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d109      	bne.n	800a7f0 <osDelay+0x34>
 800a7dc:	4b0d      	ldr	r3, [pc, #52]	; (800a814 <osDelay+0x58>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d109      	bne.n	800a7f8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a7e4:	f3ef 8311 	mrs	r3, BASEPRI
 800a7e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d003      	beq.n	800a7f8 <osDelay+0x3c>
    stat = osErrorISR;
 800a7f0:	f06f 0305 	mvn.w	r3, #5
 800a7f4:	617b      	str	r3, [r7, #20]
 800a7f6:	e007      	b.n	800a808 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d002      	beq.n	800a808 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f001 f8a8 	bl	800b958 <vTaskDelay>
    }
  }

  return (stat);
 800a808:	697b      	ldr	r3, [r7, #20]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	200001b4 	.word	0x200001b4

0800a818 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a818:	b580      	push	{r7, lr}
 800a81a:	b08c      	sub	sp, #48	; 0x30
 800a81c:	af02      	add	r7, sp, #8
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a824:	2300      	movs	r3, #0
 800a826:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a828:	f3ef 8305 	mrs	r3, IPSR
 800a82c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a82e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a830:	2b00      	cmp	r3, #0
 800a832:	d16f      	bne.n	800a914 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a834:	f3ef 8310 	mrs	r3, PRIMASK
 800a838:	617b      	str	r3, [r7, #20]
  return(result);
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d169      	bne.n	800a914 <osMessageQueueNew+0xfc>
 800a840:	4b37      	ldr	r3, [pc, #220]	; (800a920 <osMessageQueueNew+0x108>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b02      	cmp	r3, #2
 800a846:	d105      	bne.n	800a854 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a848:	f3ef 8311 	mrs	r3, BASEPRI
 800a84c:	613b      	str	r3, [r7, #16]
  return(result);
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d15f      	bne.n	800a914 <osMessageQueueNew+0xfc>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d05c      	beq.n	800a914 <osMessageQueueNew+0xfc>
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d059      	beq.n	800a914 <osMessageQueueNew+0xfc>
    mem = -1;
 800a860:	f04f 33ff 	mov.w	r3, #4294967295
 800a864:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d029      	beq.n	800a8c0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d012      	beq.n	800a89a <osMessageQueueNew+0x82>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	2b4f      	cmp	r3, #79	; 0x4f
 800a87a:	d90e      	bls.n	800a89a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00a      	beq.n	800a89a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	695a      	ldr	r2, [r3, #20]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	68b9      	ldr	r1, [r7, #8]
 800a88c:	fb01 f303 	mul.w	r3, r1, r3
 800a890:	429a      	cmp	r2, r3
 800a892:	d302      	bcc.n	800a89a <osMessageQueueNew+0x82>
        mem = 1;
 800a894:	2301      	movs	r3, #1
 800a896:	623b      	str	r3, [r7, #32]
 800a898:	e014      	b.n	800a8c4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d110      	bne.n	800a8c4 <osMessageQueueNew+0xac>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10c      	bne.n	800a8c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d108      	bne.n	800a8c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d104      	bne.n	800a8c4 <osMessageQueueNew+0xac>
          mem = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	623b      	str	r3, [r7, #32]
 800a8be:	e001      	b.n	800a8c4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a8c4:	6a3b      	ldr	r3, [r7, #32]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d10b      	bne.n	800a8e2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	691a      	ldr	r2, [r3, #16]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	9100      	str	r1, [sp, #0]
 800a8d6:	68b9      	ldr	r1, [r7, #8]
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f000 f96d 	bl	800abb8 <xQueueGenericCreateStatic>
 800a8de:	6278      	str	r0, [r7, #36]	; 0x24
 800a8e0:	e008      	b.n	800a8f4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d105      	bne.n	800a8f4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	68b9      	ldr	r1, [r7, #8]
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f000 f9da 	bl	800aca6 <xQueueGenericCreate>
 800a8f2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00c      	beq.n	800a914 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d003      	beq.n	800a908 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	61fb      	str	r3, [r7, #28]
 800a906:	e001      	b.n	800a90c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a908:	2300      	movs	r3, #0
 800a90a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a90c:	69f9      	ldr	r1, [r7, #28]
 800a90e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a910:	f000 fdb0 	bl	800b474 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a916:	4618      	mov	r0, r3
 800a918:	3728      	adds	r7, #40	; 0x28
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	200001b4 	.word	0x200001b4

0800a924 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	4a06      	ldr	r2, [pc, #24]	; (800a94c <vApplicationGetIdleTaskMemory+0x28>)
 800a934:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	4a05      	ldr	r2, [pc, #20]	; (800a950 <vApplicationGetIdleTaskMemory+0x2c>)
 800a93a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2280      	movs	r2, #128	; 0x80
 800a940:	601a      	str	r2, [r3, #0]
}
 800a942:	bf00      	nop
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	bc80      	pop	{r7}
 800a94a:	4770      	bx	lr
 800a94c:	200001b8 	.word	0x200001b8
 800a950:	20000214 	.word	0x20000214

0800a954 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4a07      	ldr	r2, [pc, #28]	; (800a980 <vApplicationGetTimerTaskMemory+0x2c>)
 800a964:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	4a06      	ldr	r2, [pc, #24]	; (800a984 <vApplicationGetTimerTaskMemory+0x30>)
 800a96a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a972:	601a      	str	r2, [r3, #0]
}
 800a974:	bf00      	nop
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	bc80      	pop	{r7}
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	20000414 	.word	0x20000414
 800a984:	20000470 	.word	0x20000470

0800a988 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f103 0208 	add.w	r2, r3, #8
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f103 0208 	add.w	r2, r3, #8
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f103 0208 	add.w	r2, r3, #8
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bc80      	pop	{r7}
 800a9c4:	4770      	bx	lr

0800a9c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b083      	sub	sp, #12
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bc80      	pop	{r7}
 800a9dc:	4770      	bx	lr

0800a9de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b085      	sub	sp, #20
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	689a      	ldr	r2, [r3, #8]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	683a      	ldr	r2, [r7, #0]
 800aa02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	601a      	str	r2, [r3, #0]
}
 800aa1a:	bf00      	nop
 800aa1c:	3714      	adds	r7, #20
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bc80      	pop	{r7}
 800aa22:	4770      	bx	lr

0800aa24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa3a:	d103      	bne.n	800aa44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	60fb      	str	r3, [r7, #12]
 800aa42:	e00c      	b.n	800aa5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	3308      	adds	r3, #8
 800aa48:	60fb      	str	r3, [r7, #12]
 800aa4a:	e002      	b.n	800aa52 <vListInsert+0x2e>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	60fb      	str	r3, [r7, #12]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d2f6      	bcs.n	800aa4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	1c5a      	adds	r2, r3, #1
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	601a      	str	r2, [r3, #0]
}
 800aa8a:	bf00      	nop
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bc80      	pop	{r7}
 800aa92:	4770      	bx	lr

0800aa94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	6892      	ldr	r2, [r2, #8]
 800aaaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	6852      	ldr	r2, [r2, #4]
 800aab4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d103      	bne.n	800aac8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	689a      	ldr	r2, [r3, #8]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	1e5a      	subs	r2, r3, #1
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3714      	adds	r7, #20
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bc80      	pop	{r7}
 800aae4:	4770      	bx	lr
	...

0800aae8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d10a      	bne.n	800ab12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab0e:	bf00      	nop
 800ab10:	e7fe      	b.n	800ab10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab12:	f002 f99b 	bl	800ce4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab1e:	68f9      	ldr	r1, [r7, #12]
 800ab20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab22:	fb01 f303 	mul.w	r3, r1, r3
 800ab26:	441a      	add	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab42:	3b01      	subs	r3, #1
 800ab44:	68f9      	ldr	r1, [r7, #12]
 800ab46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab48:	fb01 f303 	mul.w	r3, r1, r3
 800ab4c:	441a      	add	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	22ff      	movs	r2, #255	; 0xff
 800ab56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	22ff      	movs	r2, #255	; 0xff
 800ab5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d114      	bne.n	800ab92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d01a      	beq.n	800aba6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	3310      	adds	r3, #16
 800ab74:	4618      	mov	r0, r3
 800ab76:	f001 f9ad 	bl	800bed4 <xTaskRemoveFromEventList>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d012      	beq.n	800aba6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab80:	4b0c      	ldr	r3, [pc, #48]	; (800abb4 <xQueueGenericReset+0xcc>)
 800ab82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab86:	601a      	str	r2, [r3, #0]
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	e009      	b.n	800aba6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3310      	adds	r3, #16
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7ff fef6 	bl	800a988 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	3324      	adds	r3, #36	; 0x24
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7ff fef1 	bl	800a988 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aba6:	f002 f981 	bl	800ceac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800abaa:	2301      	movs	r3, #1
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	e000ed04 	.word	0xe000ed04

0800abb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b08e      	sub	sp, #56	; 0x38
 800abbc:	af02      	add	r7, sp, #8
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
 800abc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10a      	bne.n	800abe2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800abde:	bf00      	nop
 800abe0:	e7fe      	b.n	800abe0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10a      	bne.n	800abfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800abe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abfa:	bf00      	nop
 800abfc:	e7fe      	b.n	800abfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d002      	beq.n	800ac0a <xQueueGenericCreateStatic+0x52>
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d001      	beq.n	800ac0e <xQueueGenericCreateStatic+0x56>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e000      	b.n	800ac10 <xQueueGenericCreateStatic+0x58>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10a      	bne.n	800ac2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac18:	f383 8811 	msr	BASEPRI, r3
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	623b      	str	r3, [r7, #32]
}
 800ac26:	bf00      	nop
 800ac28:	e7fe      	b.n	800ac28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d102      	bne.n	800ac36 <xQueueGenericCreateStatic+0x7e>
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <xQueueGenericCreateStatic+0x82>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e000      	b.n	800ac3c <xQueueGenericCreateStatic+0x84>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10a      	bne.n	800ac56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	61fb      	str	r3, [r7, #28]
}
 800ac52:	bf00      	nop
 800ac54:	e7fe      	b.n	800ac54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac56:	2350      	movs	r3, #80	; 0x50
 800ac58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	2b50      	cmp	r3, #80	; 0x50
 800ac5e:	d00a      	beq.n	800ac76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	61bb      	str	r3, [r7, #24]
}
 800ac72:	bf00      	nop
 800ac74:	e7fe      	b.n	800ac74 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00d      	beq.n	800ac9c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac88:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8e:	9300      	str	r3, [sp, #0]
 800ac90:	4613      	mov	r3, r2
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	68b9      	ldr	r1, [r7, #8]
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f000 f843 	bl	800ad22 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ac9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3730      	adds	r7, #48	; 0x30
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b08a      	sub	sp, #40	; 0x28
 800acaa:	af02      	add	r7, sp, #8
 800acac:	60f8      	str	r0, [r7, #12]
 800acae:	60b9      	str	r1, [r7, #8]
 800acb0:	4613      	mov	r3, r2
 800acb2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10a      	bne.n	800acd0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	613b      	str	r3, [r7, #16]
}
 800accc:	bf00      	nop
 800acce:	e7fe      	b.n	800acce <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d102      	bne.n	800acdc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	61fb      	str	r3, [r7, #28]
 800acda:	e004      	b.n	800ace6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	fb02 f303 	mul.w	r3, r2, r3
 800ace4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	3350      	adds	r3, #80	; 0x50
 800acea:	4618      	mov	r0, r3
 800acec:	f002 f9ae 	bl	800d04c <pvPortMalloc>
 800acf0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00f      	beq.n	800ad18 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	3350      	adds	r3, #80	; 0x50
 800acfc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad06:	79fa      	ldrb	r2, [r7, #7]
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	697a      	ldr	r2, [r7, #20]
 800ad10:	68b9      	ldr	r1, [r7, #8]
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f000 f805 	bl	800ad22 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ad18:	69bb      	ldr	r3, [r7, #24]
	}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3720      	adds	r7, #32
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b084      	sub	sp, #16
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	60f8      	str	r0, [r7, #12]
 800ad2a:	60b9      	str	r1, [r7, #8]
 800ad2c:	607a      	str	r2, [r7, #4]
 800ad2e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d103      	bne.n	800ad3e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	69ba      	ldr	r2, [r7, #24]
 800ad3a:	601a      	str	r2, [r3, #0]
 800ad3c:	e002      	b.n	800ad44 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad50:	2101      	movs	r1, #1
 800ad52:	69b8      	ldr	r0, [r7, #24]
 800ad54:	f7ff fec8 	bl	800aae8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	78fa      	ldrb	r2, [r7, #3]
 800ad5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad60:	bf00      	nop
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b08e      	sub	sp, #56	; 0x38
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
 800ad74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad76:	2300      	movs	r3, #0
 800ad78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10a      	bne.n	800ad9a <xQueueGenericSend+0x32>
	__asm volatile
 800ad84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad88:	f383 8811 	msr	BASEPRI, r3
 800ad8c:	f3bf 8f6f 	isb	sy
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad96:	bf00      	nop
 800ad98:	e7fe      	b.n	800ad98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d103      	bne.n	800ada8 <xQueueGenericSend+0x40>
 800ada0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <xQueueGenericSend+0x44>
 800ada8:	2301      	movs	r3, #1
 800adaa:	e000      	b.n	800adae <xQueueGenericSend+0x46>
 800adac:	2300      	movs	r3, #0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d10a      	bne.n	800adc8 <xQueueGenericSend+0x60>
	__asm volatile
 800adb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb6:	f383 8811 	msr	BASEPRI, r3
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adc4:	bf00      	nop
 800adc6:	e7fe      	b.n	800adc6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d103      	bne.n	800add6 <xQueueGenericSend+0x6e>
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add2:	2b01      	cmp	r3, #1
 800add4:	d101      	bne.n	800adda <xQueueGenericSend+0x72>
 800add6:	2301      	movs	r3, #1
 800add8:	e000      	b.n	800addc <xQueueGenericSend+0x74>
 800adda:	2300      	movs	r3, #0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10a      	bne.n	800adf6 <xQueueGenericSend+0x8e>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	623b      	str	r3, [r7, #32]
}
 800adf2:	bf00      	nop
 800adf4:	e7fe      	b.n	800adf4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adf6:	f001 fa67 	bl	800c2c8 <xTaskGetSchedulerState>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d102      	bne.n	800ae06 <xQueueGenericSend+0x9e>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <xQueueGenericSend+0xa2>
 800ae06:	2301      	movs	r3, #1
 800ae08:	e000      	b.n	800ae0c <xQueueGenericSend+0xa4>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10a      	bne.n	800ae26 <xQueueGenericSend+0xbe>
	__asm volatile
 800ae10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	61fb      	str	r3, [r7, #28]
}
 800ae22:	bf00      	nop
 800ae24:	e7fe      	b.n	800ae24 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae26:	f002 f811 	bl	800ce4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d302      	bcc.n	800ae3c <xQueueGenericSend+0xd4>
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d129      	bne.n	800ae90 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae3c:	683a      	ldr	r2, [r7, #0]
 800ae3e:	68b9      	ldr	r1, [r7, #8]
 800ae40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae42:	f000 fa07 	bl	800b254 <prvCopyDataToQueue>
 800ae46:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d010      	beq.n	800ae72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae52:	3324      	adds	r3, #36	; 0x24
 800ae54:	4618      	mov	r0, r3
 800ae56:	f001 f83d 	bl	800bed4 <xTaskRemoveFromEventList>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d013      	beq.n	800ae88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae60:	4b3f      	ldr	r3, [pc, #252]	; (800af60 <xQueueGenericSend+0x1f8>)
 800ae62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae66:	601a      	str	r2, [r3, #0]
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	e00a      	b.n	800ae88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d007      	beq.n	800ae88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae78:	4b39      	ldr	r3, [pc, #228]	; (800af60 <xQueueGenericSend+0x1f8>)
 800ae7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae7e:	601a      	str	r2, [r3, #0]
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae88:	f002 f810 	bl	800ceac <vPortExitCritical>
				return pdPASS;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e063      	b.n	800af58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d103      	bne.n	800ae9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae96:	f002 f809 	bl	800ceac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	e05c      	b.n	800af58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d106      	bne.n	800aeb2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aea4:	f107 0314 	add.w	r3, r7, #20
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f001 f877 	bl	800bf9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aeb2:	f001 fffb 	bl	800ceac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aeb6:	f000 fde9 	bl	800ba8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aeba:	f001 ffc7 	bl	800ce4c <vPortEnterCritical>
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aec4:	b25b      	sxtb	r3, r3
 800aec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeca:	d103      	bne.n	800aed4 <xQueueGenericSend+0x16c>
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeda:	b25b      	sxtb	r3, r3
 800aedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee0:	d103      	bne.n	800aeea <xQueueGenericSend+0x182>
 800aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee4:	2200      	movs	r2, #0
 800aee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeea:	f001 ffdf 	bl	800ceac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeee:	1d3a      	adds	r2, r7, #4
 800aef0:	f107 0314 	add.w	r3, r7, #20
 800aef4:	4611      	mov	r1, r2
 800aef6:	4618      	mov	r0, r3
 800aef8:	f001 f866 	bl	800bfc8 <xTaskCheckForTimeOut>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d124      	bne.n	800af4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af04:	f000 fa9e 	bl	800b444 <prvIsQueueFull>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d018      	beq.n	800af40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	3310      	adds	r3, #16
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	4611      	mov	r1, r2
 800af16:	4618      	mov	r0, r3
 800af18:	f000 ff8c 	bl	800be34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af1e:	f000 fa29 	bl	800b374 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af22:	f000 fdc1 	bl	800baa8 <xTaskResumeAll>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f47f af7c 	bne.w	800ae26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af2e:	4b0c      	ldr	r3, [pc, #48]	; (800af60 <xQueueGenericSend+0x1f8>)
 800af30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	e772      	b.n	800ae26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af42:	f000 fa17 	bl	800b374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af46:	f000 fdaf 	bl	800baa8 <xTaskResumeAll>
 800af4a:	e76c      	b.n	800ae26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af4e:	f000 fa11 	bl	800b374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af52:	f000 fda9 	bl	800baa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af56:	2300      	movs	r3, #0
		}
	}
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3738      	adds	r7, #56	; 0x38
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	e000ed04 	.word	0xe000ed04

0800af64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b08e      	sub	sp, #56	; 0x38
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
 800af70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10a      	bne.n	800af92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af80:	f383 8811 	msr	BASEPRI, r3
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af8e:	bf00      	nop
 800af90:	e7fe      	b.n	800af90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d103      	bne.n	800afa0 <xQueueGenericSendFromISR+0x3c>
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <xQueueGenericSendFromISR+0x40>
 800afa0:	2301      	movs	r3, #1
 800afa2:	e000      	b.n	800afa6 <xQueueGenericSendFromISR+0x42>
 800afa4:	2300      	movs	r3, #0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10a      	bne.n	800afc0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800afaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	623b      	str	r3, [r7, #32]
}
 800afbc:	bf00      	nop
 800afbe:	e7fe      	b.n	800afbe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d103      	bne.n	800afce <xQueueGenericSendFromISR+0x6a>
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d101      	bne.n	800afd2 <xQueueGenericSendFromISR+0x6e>
 800afce:	2301      	movs	r3, #1
 800afd0:	e000      	b.n	800afd4 <xQueueGenericSendFromISR+0x70>
 800afd2:	2300      	movs	r3, #0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d10a      	bne.n	800afee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800afd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afdc:	f383 8811 	msr	BASEPRI, r3
 800afe0:	f3bf 8f6f 	isb	sy
 800afe4:	f3bf 8f4f 	dsb	sy
 800afe8:	61fb      	str	r3, [r7, #28]
}
 800afea:	bf00      	nop
 800afec:	e7fe      	b.n	800afec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afee:	f001 ffef 	bl	800cfd0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aff2:	f3ef 8211 	mrs	r2, BASEPRI
 800aff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	61ba      	str	r2, [r7, #24]
 800b008:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b00a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b00c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b016:	429a      	cmp	r2, r3
 800b018:	d302      	bcc.n	800b020 <xQueueGenericSendFromISR+0xbc>
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	2b02      	cmp	r3, #2
 800b01e:	d12c      	bne.n	800b07a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b02a:	683a      	ldr	r2, [r7, #0]
 800b02c:	68b9      	ldr	r1, [r7, #8]
 800b02e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b030:	f000 f910 	bl	800b254 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b034:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b03c:	d112      	bne.n	800b064 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b042:	2b00      	cmp	r3, #0
 800b044:	d016      	beq.n	800b074 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	3324      	adds	r3, #36	; 0x24
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 ff42 	bl	800bed4 <xTaskRemoveFromEventList>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00e      	beq.n	800b074 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00b      	beq.n	800b074 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	601a      	str	r2, [r3, #0]
 800b062:	e007      	b.n	800b074 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b064:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b068:	3301      	adds	r3, #1
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	b25a      	sxtb	r2, r3
 800b06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b074:	2301      	movs	r3, #1
 800b076:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b078:	e001      	b.n	800b07e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b07a:	2300      	movs	r3, #0
 800b07c:	637b      	str	r3, [r7, #52]	; 0x34
 800b07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b080:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b088:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3738      	adds	r7, #56	; 0x38
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b08c      	sub	sp, #48	; 0x30
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d10a      	bne.n	800b0c4 <xQueueReceive+0x30>
	__asm volatile
 800b0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b2:	f383 8811 	msr	BASEPRI, r3
 800b0b6:	f3bf 8f6f 	isb	sy
 800b0ba:	f3bf 8f4f 	dsb	sy
 800b0be:	623b      	str	r3, [r7, #32]
}
 800b0c0:	bf00      	nop
 800b0c2:	e7fe      	b.n	800b0c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d103      	bne.n	800b0d2 <xQueueReceive+0x3e>
 800b0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <xQueueReceive+0x42>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e000      	b.n	800b0d8 <xQueueReceive+0x44>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10a      	bne.n	800b0f2 <xQueueReceive+0x5e>
	__asm volatile
 800b0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e0:	f383 8811 	msr	BASEPRI, r3
 800b0e4:	f3bf 8f6f 	isb	sy
 800b0e8:	f3bf 8f4f 	dsb	sy
 800b0ec:	61fb      	str	r3, [r7, #28]
}
 800b0ee:	bf00      	nop
 800b0f0:	e7fe      	b.n	800b0f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0f2:	f001 f8e9 	bl	800c2c8 <xTaskGetSchedulerState>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d102      	bne.n	800b102 <xQueueReceive+0x6e>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <xQueueReceive+0x72>
 800b102:	2301      	movs	r3, #1
 800b104:	e000      	b.n	800b108 <xQueueReceive+0x74>
 800b106:	2300      	movs	r3, #0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10a      	bne.n	800b122 <xQueueReceive+0x8e>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	61bb      	str	r3, [r7, #24]
}
 800b11e:	bf00      	nop
 800b120:	e7fe      	b.n	800b120 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b122:	f001 fe93 	bl	800ce4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b12a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d01f      	beq.n	800b172 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b132:	68b9      	ldr	r1, [r7, #8]
 800b134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b136:	f000 f8f7 	bl	800b328 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13c:	1e5a      	subs	r2, r3, #1
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00f      	beq.n	800b16a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14c:	3310      	adds	r3, #16
 800b14e:	4618      	mov	r0, r3
 800b150:	f000 fec0 	bl	800bed4 <xTaskRemoveFromEventList>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d007      	beq.n	800b16a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b15a:	4b3d      	ldr	r3, [pc, #244]	; (800b250 <xQueueReceive+0x1bc>)
 800b15c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b160:	601a      	str	r2, [r3, #0]
 800b162:	f3bf 8f4f 	dsb	sy
 800b166:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b16a:	f001 fe9f 	bl	800ceac <vPortExitCritical>
				return pdPASS;
 800b16e:	2301      	movs	r3, #1
 800b170:	e069      	b.n	800b246 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d103      	bne.n	800b180 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b178:	f001 fe98 	bl	800ceac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b17c:	2300      	movs	r3, #0
 800b17e:	e062      	b.n	800b246 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b182:	2b00      	cmp	r3, #0
 800b184:	d106      	bne.n	800b194 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b186:	f107 0310 	add.w	r3, r7, #16
 800b18a:	4618      	mov	r0, r3
 800b18c:	f000 ff06 	bl	800bf9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b190:	2301      	movs	r3, #1
 800b192:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b194:	f001 fe8a 	bl	800ceac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b198:	f000 fc78 	bl	800ba8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b19c:	f001 fe56 	bl	800ce4c <vPortEnterCritical>
 800b1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1a6:	b25b      	sxtb	r3, r3
 800b1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ac:	d103      	bne.n	800b1b6 <xQueueReceive+0x122>
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1bc:	b25b      	sxtb	r3, r3
 800b1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1c2:	d103      	bne.n	800b1cc <xQueueReceive+0x138>
 800b1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1cc:	f001 fe6e 	bl	800ceac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1d0:	1d3a      	adds	r2, r7, #4
 800b1d2:	f107 0310 	add.w	r3, r7, #16
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 fef5 	bl	800bfc8 <xTaskCheckForTimeOut>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d123      	bne.n	800b22c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1e6:	f000 f917 	bl	800b418 <prvIsQueueEmpty>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d017      	beq.n	800b220 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f2:	3324      	adds	r3, #36	; 0x24
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f000 fe1b 	bl	800be34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b200:	f000 f8b8 	bl	800b374 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b204:	f000 fc50 	bl	800baa8 <xTaskResumeAll>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d189      	bne.n	800b122 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b20e:	4b10      	ldr	r3, [pc, #64]	; (800b250 <xQueueReceive+0x1bc>)
 800b210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b214:	601a      	str	r2, [r3, #0]
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	f3bf 8f6f 	isb	sy
 800b21e:	e780      	b.n	800b122 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b222:	f000 f8a7 	bl	800b374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b226:	f000 fc3f 	bl	800baa8 <xTaskResumeAll>
 800b22a:	e77a      	b.n	800b122 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b22c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b22e:	f000 f8a1 	bl	800b374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b232:	f000 fc39 	bl	800baa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b238:	f000 f8ee 	bl	800b418 <prvIsQueueEmpty>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f43f af6f 	beq.w	800b122 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b244:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b246:	4618      	mov	r0, r3
 800b248:	3730      	adds	r7, #48	; 0x30
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	e000ed04 	.word	0xe000ed04

0800b254 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b260:	2300      	movs	r3, #0
 800b262:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b268:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10d      	bne.n	800b28e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d14d      	bne.n	800b316 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	4618      	mov	r0, r3
 800b280:	f001 f840 	bl	800c304 <xTaskPriorityDisinherit>
 800b284:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	605a      	str	r2, [r3, #4]
 800b28c:	e043      	b.n	800b316 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d119      	bne.n	800b2c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6898      	ldr	r0, [r3, #8]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29c:	461a      	mov	r2, r3
 800b29e:	68b9      	ldr	r1, [r7, #8]
 800b2a0:	f002 fd92 	bl	800ddc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	689a      	ldr	r2, [r3, #8]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ac:	441a      	add	r2, r3
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	689a      	ldr	r2, [r3, #8]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d32b      	bcc.n	800b316 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	609a      	str	r2, [r3, #8]
 800b2c6:	e026      	b.n	800b316 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	68d8      	ldr	r0, [r3, #12]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	68b9      	ldr	r1, [r7, #8]
 800b2d4:	f002 fd78 	bl	800ddc8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	68da      	ldr	r2, [r3, #12]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e0:	425b      	negs	r3, r3
 800b2e2:	441a      	add	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	68da      	ldr	r2, [r3, #12]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d207      	bcs.n	800b304 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	685a      	ldr	r2, [r3, #4]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fc:	425b      	negs	r3, r3
 800b2fe:	441a      	add	r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b02      	cmp	r3, #2
 800b308:	d105      	bne.n	800b316 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	3b01      	subs	r3, #1
 800b314:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	1c5a      	adds	r2, r3, #1
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b31e:	697b      	ldr	r3, [r7, #20]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3718      	adds	r7, #24
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b336:	2b00      	cmp	r3, #0
 800b338:	d018      	beq.n	800b36c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	68da      	ldr	r2, [r3, #12]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b342:	441a      	add	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	68da      	ldr	r2, [r3, #12]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	429a      	cmp	r2, r3
 800b352:	d303      	bcc.n	800b35c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	68d9      	ldr	r1, [r3, #12]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b364:	461a      	mov	r2, r3
 800b366:	6838      	ldr	r0, [r7, #0]
 800b368:	f002 fd2e 	bl	800ddc8 <memcpy>
	}
}
 800b36c:	bf00      	nop
 800b36e:	3708      	adds	r7, #8
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b37c:	f001 fd66 	bl	800ce4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b386:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b388:	e011      	b.n	800b3ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d012      	beq.n	800b3b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3324      	adds	r3, #36	; 0x24
 800b396:	4618      	mov	r0, r3
 800b398:	f000 fd9c 	bl	800bed4 <xTaskRemoveFromEventList>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d001      	beq.n	800b3a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b3a2:	f000 fe73 	bl	800c08c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	dce9      	bgt.n	800b38a <prvUnlockQueue+0x16>
 800b3b6:	e000      	b.n	800b3ba <prvUnlockQueue+0x46>
					break;
 800b3b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	22ff      	movs	r2, #255	; 0xff
 800b3be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b3c2:	f001 fd73 	bl	800ceac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b3c6:	f001 fd41 	bl	800ce4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3d2:	e011      	b.n	800b3f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	691b      	ldr	r3, [r3, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d012      	beq.n	800b402 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	3310      	adds	r3, #16
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 fd77 	bl	800bed4 <xTaskRemoveFromEventList>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d001      	beq.n	800b3f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3ec:	f000 fe4e 	bl	800c08c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b3f0:	7bbb      	ldrb	r3, [r7, #14]
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	dce9      	bgt.n	800b3d4 <prvUnlockQueue+0x60>
 800b400:	e000      	b.n	800b404 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b402:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	22ff      	movs	r2, #255	; 0xff
 800b408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b40c:	f001 fd4e 	bl	800ceac <vPortExitCritical>
}
 800b410:	bf00      	nop
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b420:	f001 fd14 	bl	800ce4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d102      	bne.n	800b432 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b42c:	2301      	movs	r3, #1
 800b42e:	60fb      	str	r3, [r7, #12]
 800b430:	e001      	b.n	800b436 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b432:	2300      	movs	r3, #0
 800b434:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b436:	f001 fd39 	bl	800ceac <vPortExitCritical>

	return xReturn;
 800b43a:	68fb      	ldr	r3, [r7, #12]
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b44c:	f001 fcfe 	bl	800ce4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b458:	429a      	cmp	r2, r3
 800b45a:	d102      	bne.n	800b462 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b45c:	2301      	movs	r3, #1
 800b45e:	60fb      	str	r3, [r7, #12]
 800b460:	e001      	b.n	800b466 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b462:	2300      	movs	r3, #0
 800b464:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b466:	f001 fd21 	bl	800ceac <vPortExitCritical>

	return xReturn;
 800b46a:	68fb      	ldr	r3, [r7, #12]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b47e:	2300      	movs	r3, #0
 800b480:	60fb      	str	r3, [r7, #12]
 800b482:	e014      	b.n	800b4ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b484:	4a0e      	ldr	r2, [pc, #56]	; (800b4c0 <vQueueAddToRegistry+0x4c>)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10b      	bne.n	800b4a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b490:	490b      	ldr	r1, [pc, #44]	; (800b4c0 <vQueueAddToRegistry+0x4c>)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	683a      	ldr	r2, [r7, #0]
 800b496:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b49a:	4a09      	ldr	r2, [pc, #36]	; (800b4c0 <vQueueAddToRegistry+0x4c>)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	00db      	lsls	r3, r3, #3
 800b4a0:	4413      	add	r3, r2
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b4a6:	e006      	b.n	800b4b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	60fb      	str	r3, [r7, #12]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b07      	cmp	r3, #7
 800b4b2:	d9e7      	bls.n	800b484 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bc80      	pop	{r7}
 800b4be:	4770      	bx	lr
 800b4c0:	20002660 	.word	0x20002660

0800b4c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b4d4:	f001 fcba 	bl	800ce4c <vPortEnterCritical>
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4de:	b25b      	sxtb	r3, r3
 800b4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e4:	d103      	bne.n	800b4ee <vQueueWaitForMessageRestricted+0x2a>
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4f4:	b25b      	sxtb	r3, r3
 800b4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4fa:	d103      	bne.n	800b504 <vQueueWaitForMessageRestricted+0x40>
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b504:	f001 fcd2 	bl	800ceac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d106      	bne.n	800b51e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	3324      	adds	r3, #36	; 0x24
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	68b9      	ldr	r1, [r7, #8]
 800b518:	4618      	mov	r0, r3
 800b51a:	f000 fcaf 	bl	800be7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b51e:	6978      	ldr	r0, [r7, #20]
 800b520:	f7ff ff28 	bl	800b374 <prvUnlockQueue>
	}
 800b524:	bf00      	nop
 800b526:	3718      	adds	r7, #24
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b08e      	sub	sp, #56	; 0x38
 800b530:	af04      	add	r7, sp, #16
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
 800b538:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d10a      	bne.n	800b556 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b544:	f383 8811 	msr	BASEPRI, r3
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	f3bf 8f4f 	dsb	sy
 800b550:	623b      	str	r3, [r7, #32]
}
 800b552:	bf00      	nop
 800b554:	e7fe      	b.n	800b554 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10a      	bne.n	800b572 <xTaskCreateStatic+0x46>
	__asm volatile
 800b55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b560:	f383 8811 	msr	BASEPRI, r3
 800b564:	f3bf 8f6f 	isb	sy
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	61fb      	str	r3, [r7, #28]
}
 800b56e:	bf00      	nop
 800b570:	e7fe      	b.n	800b570 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b572:	235c      	movs	r3, #92	; 0x5c
 800b574:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	2b5c      	cmp	r3, #92	; 0x5c
 800b57a:	d00a      	beq.n	800b592 <xTaskCreateStatic+0x66>
	__asm volatile
 800b57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	61bb      	str	r3, [r7, #24]
}
 800b58e:	bf00      	nop
 800b590:	e7fe      	b.n	800b590 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b594:	2b00      	cmp	r3, #0
 800b596:	d01e      	beq.n	800b5d6 <xTaskCreateStatic+0xaa>
 800b598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d01b      	beq.n	800b5d6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5aa:	2202      	movs	r2, #2
 800b5ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	9303      	str	r3, [sp, #12]
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b6:	9302      	str	r3, [sp, #8]
 800b5b8:	f107 0314 	add.w	r3, r7, #20
 800b5bc:	9301      	str	r3, [sp, #4]
 800b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	68b9      	ldr	r1, [r7, #8]
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f000 f850 	bl	800b66e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5d0:	f000 f8d4 	bl	800b77c <prvAddNewTaskToReadyList>
 800b5d4:	e001      	b.n	800b5da <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b5da:	697b      	ldr	r3, [r7, #20]
	}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3728      	adds	r7, #40	; 0x28
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b08c      	sub	sp, #48	; 0x30
 800b5e8:	af04      	add	r7, sp, #16
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	603b      	str	r3, [r7, #0]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5f4:	88fb      	ldrh	r3, [r7, #6]
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f001 fd27 	bl	800d04c <pvPortMalloc>
 800b5fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00e      	beq.n	800b624 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b606:	205c      	movs	r0, #92	; 0x5c
 800b608:	f001 fd20 	bl	800d04c <pvPortMalloc>
 800b60c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d003      	beq.n	800b61c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	631a      	str	r2, [r3, #48]	; 0x30
 800b61a:	e005      	b.n	800b628 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b61c:	6978      	ldr	r0, [r7, #20]
 800b61e:	f001 fdd9 	bl	800d1d4 <vPortFree>
 800b622:	e001      	b.n	800b628 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b624:	2300      	movs	r3, #0
 800b626:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d017      	beq.n	800b65e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b636:	88fa      	ldrh	r2, [r7, #6]
 800b638:	2300      	movs	r3, #0
 800b63a:	9303      	str	r3, [sp, #12]
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	9302      	str	r3, [sp, #8]
 800b640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b642:	9301      	str	r3, [sp, #4]
 800b644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	68b9      	ldr	r1, [r7, #8]
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f000 f80e 	bl	800b66e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b652:	69f8      	ldr	r0, [r7, #28]
 800b654:	f000 f892 	bl	800b77c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b658:	2301      	movs	r3, #1
 800b65a:	61bb      	str	r3, [r7, #24]
 800b65c:	e002      	b.n	800b664 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b65e:	f04f 33ff 	mov.w	r3, #4294967295
 800b662:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b664:	69bb      	ldr	r3, [r7, #24]
	}
 800b666:	4618      	mov	r0, r3
 800b668:	3720      	adds	r7, #32
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b088      	sub	sp, #32
 800b672:	af00      	add	r7, sp, #0
 800b674:	60f8      	str	r0, [r7, #12]
 800b676:	60b9      	str	r1, [r7, #8]
 800b678:	607a      	str	r2, [r7, #4]
 800b67a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	461a      	mov	r2, r3
 800b686:	21a5      	movs	r1, #165	; 0xa5
 800b688:	f002 fbc6 	bl	800de18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b696:	3b01      	subs	r3, #1
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	4413      	add	r3, r2
 800b69c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	f023 0307 	bic.w	r3, r3, #7
 800b6a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	f003 0307 	and.w	r3, r3, #7
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00a      	beq.n	800b6c6 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b4:	f383 8811 	msr	BASEPRI, r3
 800b6b8:	f3bf 8f6f 	isb	sy
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	617b      	str	r3, [r7, #20]
}
 800b6c2:	bf00      	nop
 800b6c4:	e7fe      	b.n	800b6c4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	61fb      	str	r3, [r7, #28]
 800b6ca:	e012      	b.n	800b6f2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	7819      	ldrb	r1, [r3, #0]
 800b6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	4413      	add	r3, r2
 800b6da:	3334      	adds	r3, #52	; 0x34
 800b6dc:	460a      	mov	r2, r1
 800b6de:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d006      	beq.n	800b6fa <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	61fb      	str	r3, [r7, #28]
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	2b0f      	cmp	r3, #15
 800b6f6:	d9e9      	bls.n	800b6cc <prvInitialiseNewTask+0x5e>
 800b6f8:	e000      	b.n	800b6fc <prvInitialiseNewTask+0x8e>
		{
			break;
 800b6fa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b706:	2b37      	cmp	r3, #55	; 0x37
 800b708:	d901      	bls.n	800b70e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b70a:	2337      	movs	r3, #55	; 0x37
 800b70c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b712:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b718:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71c:	2200      	movs	r2, #0
 800b71e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b722:	3304      	adds	r3, #4
 800b724:	4618      	mov	r0, r3
 800b726:	f7ff f94e 	bl	800a9c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	3318      	adds	r3, #24
 800b72e:	4618      	mov	r0, r3
 800b730:	f7ff f949 	bl	800a9c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b738:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b742:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b748:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	2200      	movs	r2, #0
 800b74e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b752:	2200      	movs	r2, #0
 800b754:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b758:	683a      	ldr	r2, [r7, #0]
 800b75a:	68f9      	ldr	r1, [r7, #12]
 800b75c:	69b8      	ldr	r0, [r7, #24]
 800b75e:	f001 fa81 	bl	800cc64 <pxPortInitialiseStack>
 800b762:	4602      	mov	r2, r0
 800b764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b766:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d002      	beq.n	800b774 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b772:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b774:	bf00      	nop
 800b776:	3720      	adds	r7, #32
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b784:	f001 fb62 	bl	800ce4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b788:	4b2d      	ldr	r3, [pc, #180]	; (800b840 <prvAddNewTaskToReadyList+0xc4>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3301      	adds	r3, #1
 800b78e:	4a2c      	ldr	r2, [pc, #176]	; (800b840 <prvAddNewTaskToReadyList+0xc4>)
 800b790:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b792:	4b2c      	ldr	r3, [pc, #176]	; (800b844 <prvAddNewTaskToReadyList+0xc8>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d109      	bne.n	800b7ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b79a:	4a2a      	ldr	r2, [pc, #168]	; (800b844 <prvAddNewTaskToReadyList+0xc8>)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7a0:	4b27      	ldr	r3, [pc, #156]	; (800b840 <prvAddNewTaskToReadyList+0xc4>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d110      	bne.n	800b7ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b7a8:	f000 fc94 	bl	800c0d4 <prvInitialiseTaskLists>
 800b7ac:	e00d      	b.n	800b7ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b7ae:	4b26      	ldr	r3, [pc, #152]	; (800b848 <prvAddNewTaskToReadyList+0xcc>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d109      	bne.n	800b7ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b7b6:	4b23      	ldr	r3, [pc, #140]	; (800b844 <prvAddNewTaskToReadyList+0xc8>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d802      	bhi.n	800b7ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b7c4:	4a1f      	ldr	r2, [pc, #124]	; (800b844 <prvAddNewTaskToReadyList+0xc8>)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b7ca:	4b20      	ldr	r3, [pc, #128]	; (800b84c <prvAddNewTaskToReadyList+0xd0>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	4a1e      	ldr	r2, [pc, #120]	; (800b84c <prvAddNewTaskToReadyList+0xd0>)
 800b7d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b7d4:	4b1d      	ldr	r3, [pc, #116]	; (800b84c <prvAddNewTaskToReadyList+0xd0>)
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e0:	4b1b      	ldr	r3, [pc, #108]	; (800b850 <prvAddNewTaskToReadyList+0xd4>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d903      	bls.n	800b7f0 <prvAddNewTaskToReadyList+0x74>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ec:	4a18      	ldr	r2, [pc, #96]	; (800b850 <prvAddNewTaskToReadyList+0xd4>)
 800b7ee:	6013      	str	r3, [r2, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	4413      	add	r3, r2
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	4a15      	ldr	r2, [pc, #84]	; (800b854 <prvAddNewTaskToReadyList+0xd8>)
 800b7fe:	441a      	add	r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	3304      	adds	r3, #4
 800b804:	4619      	mov	r1, r3
 800b806:	4610      	mov	r0, r2
 800b808:	f7ff f8e9 	bl	800a9de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b80c:	f001 fb4e 	bl	800ceac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b810:	4b0d      	ldr	r3, [pc, #52]	; (800b848 <prvAddNewTaskToReadyList+0xcc>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00e      	beq.n	800b836 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b818:	4b0a      	ldr	r3, [pc, #40]	; (800b844 <prvAddNewTaskToReadyList+0xc8>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b822:	429a      	cmp	r2, r3
 800b824:	d207      	bcs.n	800b836 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b826:	4b0c      	ldr	r3, [pc, #48]	; (800b858 <prvAddNewTaskToReadyList+0xdc>)
 800b828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82c:	601a      	str	r2, [r3, #0]
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b836:	bf00      	nop
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	20000d44 	.word	0x20000d44
 800b844:	20000870 	.word	0x20000870
 800b848:	20000d50 	.word	0x20000d50
 800b84c:	20000d60 	.word	0x20000d60
 800b850:	20000d4c 	.word	0x20000d4c
 800b854:	20000874 	.word	0x20000874
 800b858:	e000ed04 	.word	0xe000ed04

0800b85c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08a      	sub	sp, #40	; 0x28
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b866:	2300      	movs	r3, #0
 800b868:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10a      	bne.n	800b886 <vTaskDelayUntil+0x2a>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	617b      	str	r3, [r7, #20]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d10a      	bne.n	800b8a2 <vTaskDelayUntil+0x46>
	__asm volatile
 800b88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	613b      	str	r3, [r7, #16]
}
 800b89e:	bf00      	nop
 800b8a0:	e7fe      	b.n	800b8a0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b8a2:	4b2a      	ldr	r3, [pc, #168]	; (800b94c <vTaskDelayUntil+0xf0>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00a      	beq.n	800b8c0 <vTaskDelayUntil+0x64>
	__asm volatile
 800b8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ae:	f383 8811 	msr	BASEPRI, r3
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	f3bf 8f4f 	dsb	sy
 800b8ba:	60fb      	str	r3, [r7, #12]
}
 800b8bc:	bf00      	nop
 800b8be:	e7fe      	b.n	800b8be <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b8c0:	f000 f8e4 	bl	800ba8c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b8c4:	4b22      	ldr	r3, [pc, #136]	; (800b950 <vTaskDelayUntil+0xf4>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6a3a      	ldr	r2, [r7, #32]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d20b      	bcs.n	800b8f6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	69fa      	ldr	r2, [r7, #28]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d211      	bcs.n	800b90c <vTaskDelayUntil+0xb0>
 800b8e8:	69fa      	ldr	r2, [r7, #28]
 800b8ea:	6a3b      	ldr	r3, [r7, #32]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d90d      	bls.n	800b90c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	627b      	str	r3, [r7, #36]	; 0x24
 800b8f4:	e00a      	b.n	800b90c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	69fa      	ldr	r2, [r7, #28]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d303      	bcc.n	800b908 <vTaskDelayUntil+0xac>
 800b900:	69fa      	ldr	r2, [r7, #28]
 800b902:	6a3b      	ldr	r3, [r7, #32]
 800b904:	429a      	cmp	r2, r3
 800b906:	d901      	bls.n	800b90c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b908:	2301      	movs	r3, #1
 800b90a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	69fa      	ldr	r2, [r7, #28]
 800b910:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b914:	2b00      	cmp	r3, #0
 800b916:	d006      	beq.n	800b926 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b918:	69fa      	ldr	r2, [r7, #28]
 800b91a:	6a3b      	ldr	r3, [r7, #32]
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	2100      	movs	r1, #0
 800b920:	4618      	mov	r0, r3
 800b922:	f000 fe39 	bl	800c598 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b926:	f000 f8bf 	bl	800baa8 <xTaskResumeAll>
 800b92a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d107      	bne.n	800b942 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b932:	4b08      	ldr	r3, [pc, #32]	; (800b954 <vTaskDelayUntil+0xf8>)
 800b934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b938:	601a      	str	r2, [r3, #0]
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b942:	bf00      	nop
 800b944:	3728      	adds	r7, #40	; 0x28
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	20000d6c 	.word	0x20000d6c
 800b950:	20000d48 	.word	0x20000d48
 800b954:	e000ed04 	.word	0xe000ed04

0800b958 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b960:	2300      	movs	r3, #0
 800b962:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d017      	beq.n	800b99a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b96a:	4b13      	ldr	r3, [pc, #76]	; (800b9b8 <vTaskDelay+0x60>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00a      	beq.n	800b988 <vTaskDelay+0x30>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	60bb      	str	r3, [r7, #8]
}
 800b984:	bf00      	nop
 800b986:	e7fe      	b.n	800b986 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b988:	f000 f880 	bl	800ba8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b98c:	2100      	movs	r1, #0
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fe02 	bl	800c598 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b994:	f000 f888 	bl	800baa8 <xTaskResumeAll>
 800b998:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d107      	bne.n	800b9b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b9a0:	4b06      	ldr	r3, [pc, #24]	; (800b9bc <vTaskDelay+0x64>)
 800b9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9b0:	bf00      	nop
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	20000d6c 	.word	0x20000d6c
 800b9bc:	e000ed04 	.word	0xe000ed04

0800b9c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b08a      	sub	sp, #40	; 0x28
 800b9c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b9ce:	463a      	mov	r2, r7
 800b9d0:	1d39      	adds	r1, r7, #4
 800b9d2:	f107 0308 	add.w	r3, r7, #8
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fe ffa4 	bl	800a924 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b9dc:	6839      	ldr	r1, [r7, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	9202      	str	r2, [sp, #8]
 800b9e4:	9301      	str	r3, [sp, #4]
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	9300      	str	r3, [sp, #0]
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	460a      	mov	r2, r1
 800b9ee:	4921      	ldr	r1, [pc, #132]	; (800ba74 <vTaskStartScheduler+0xb4>)
 800b9f0:	4821      	ldr	r0, [pc, #132]	; (800ba78 <vTaskStartScheduler+0xb8>)
 800b9f2:	f7ff fd9b 	bl	800b52c <xTaskCreateStatic>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	4a20      	ldr	r2, [pc, #128]	; (800ba7c <vTaskStartScheduler+0xbc>)
 800b9fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b9fc:	4b1f      	ldr	r3, [pc, #124]	; (800ba7c <vTaskStartScheduler+0xbc>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ba04:	2301      	movs	r3, #1
 800ba06:	617b      	str	r3, [r7, #20]
 800ba08:	e001      	b.n	800ba0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d102      	bne.n	800ba1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ba14:	f000 fe14 	bl	800c640 <xTimerCreateTimerTask>
 800ba18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d116      	bne.n	800ba4e <vTaskStartScheduler+0x8e>
	__asm volatile
 800ba20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	613b      	str	r3, [r7, #16]
}
 800ba32:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ba34:	4b12      	ldr	r3, [pc, #72]	; (800ba80 <vTaskStartScheduler+0xc0>)
 800ba36:	f04f 32ff 	mov.w	r2, #4294967295
 800ba3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ba3c:	4b11      	ldr	r3, [pc, #68]	; (800ba84 <vTaskStartScheduler+0xc4>)
 800ba3e:	2201      	movs	r2, #1
 800ba40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ba42:	4b11      	ldr	r3, [pc, #68]	; (800ba88 <vTaskStartScheduler+0xc8>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ba48:	f001 f98e 	bl	800cd68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ba4c:	e00e      	b.n	800ba6c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba54:	d10a      	bne.n	800ba6c <vTaskStartScheduler+0xac>
	__asm volatile
 800ba56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5a:	f383 8811 	msr	BASEPRI, r3
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	60fb      	str	r3, [r7, #12]
}
 800ba68:	bf00      	nop
 800ba6a:	e7fe      	b.n	800ba6a <vTaskStartScheduler+0xaa>
}
 800ba6c:	bf00      	nop
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	0800e078 	.word	0x0800e078
 800ba78:	0800c0a5 	.word	0x0800c0a5
 800ba7c:	20000d68 	.word	0x20000d68
 800ba80:	20000d64 	.word	0x20000d64
 800ba84:	20000d50 	.word	0x20000d50
 800ba88:	20000d48 	.word	0x20000d48

0800ba8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ba90:	4b04      	ldr	r3, [pc, #16]	; (800baa4 <vTaskSuspendAll+0x18>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	3301      	adds	r3, #1
 800ba96:	4a03      	ldr	r2, [pc, #12]	; (800baa4 <vTaskSuspendAll+0x18>)
 800ba98:	6013      	str	r3, [r2, #0]
}
 800ba9a:	bf00      	nop
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bc80      	pop	{r7}
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	20000d6c 	.word	0x20000d6c

0800baa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800baae:	2300      	movs	r3, #0
 800bab0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bab2:	2300      	movs	r3, #0
 800bab4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bab6:	4b42      	ldr	r3, [pc, #264]	; (800bbc0 <xTaskResumeAll+0x118>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10a      	bne.n	800bad4 <xTaskResumeAll+0x2c>
	__asm volatile
 800babe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac2:	f383 8811 	msr	BASEPRI, r3
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	603b      	str	r3, [r7, #0]
}
 800bad0:	bf00      	nop
 800bad2:	e7fe      	b.n	800bad2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bad4:	f001 f9ba 	bl	800ce4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bad8:	4b39      	ldr	r3, [pc, #228]	; (800bbc0 <xTaskResumeAll+0x118>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3b01      	subs	r3, #1
 800bade:	4a38      	ldr	r2, [pc, #224]	; (800bbc0 <xTaskResumeAll+0x118>)
 800bae0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bae2:	4b37      	ldr	r3, [pc, #220]	; (800bbc0 <xTaskResumeAll+0x118>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d162      	bne.n	800bbb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800baea:	4b36      	ldr	r3, [pc, #216]	; (800bbc4 <xTaskResumeAll+0x11c>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d05e      	beq.n	800bbb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800baf2:	e02f      	b.n	800bb54 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800baf4:	4b34      	ldr	r3, [pc, #208]	; (800bbc8 <xTaskResumeAll+0x120>)
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	3318      	adds	r3, #24
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fe ffc7 	bl	800aa94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	3304      	adds	r3, #4
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fe ffc2 	bl	800aa94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb14:	4b2d      	ldr	r3, [pc, #180]	; (800bbcc <xTaskResumeAll+0x124>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d903      	bls.n	800bb24 <xTaskResumeAll+0x7c>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb20:	4a2a      	ldr	r2, [pc, #168]	; (800bbcc <xTaskResumeAll+0x124>)
 800bb22:	6013      	str	r3, [r2, #0]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb28:	4613      	mov	r3, r2
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4413      	add	r3, r2
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	4a27      	ldr	r2, [pc, #156]	; (800bbd0 <xTaskResumeAll+0x128>)
 800bb32:	441a      	add	r2, r3
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	3304      	adds	r3, #4
 800bb38:	4619      	mov	r1, r3
 800bb3a:	4610      	mov	r0, r2
 800bb3c:	f7fe ff4f 	bl	800a9de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb44:	4b23      	ldr	r3, [pc, #140]	; (800bbd4 <xTaskResumeAll+0x12c>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d302      	bcc.n	800bb54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bb4e:	4b22      	ldr	r3, [pc, #136]	; (800bbd8 <xTaskResumeAll+0x130>)
 800bb50:	2201      	movs	r2, #1
 800bb52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb54:	4b1c      	ldr	r3, [pc, #112]	; (800bbc8 <xTaskResumeAll+0x120>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1cb      	bne.n	800baf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d001      	beq.n	800bb66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bb62:	f000 fb8d 	bl	800c280 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bb66:	4b1d      	ldr	r3, [pc, #116]	; (800bbdc <xTaskResumeAll+0x134>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d010      	beq.n	800bb94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bb72:	f000 f845 	bl	800bc00 <xTaskIncrementTick>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d002      	beq.n	800bb82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bb7c:	4b16      	ldr	r3, [pc, #88]	; (800bbd8 <xTaskResumeAll+0x130>)
 800bb7e:	2201      	movs	r2, #1
 800bb80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	3b01      	subs	r3, #1
 800bb86:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1f1      	bne.n	800bb72 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800bb8e:	4b13      	ldr	r3, [pc, #76]	; (800bbdc <xTaskResumeAll+0x134>)
 800bb90:	2200      	movs	r2, #0
 800bb92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb94:	4b10      	ldr	r3, [pc, #64]	; (800bbd8 <xTaskResumeAll+0x130>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d009      	beq.n	800bbb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bba0:	4b0f      	ldr	r3, [pc, #60]	; (800bbe0 <xTaskResumeAll+0x138>)
 800bba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bba6:	601a      	str	r2, [r3, #0]
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bbb0:	f001 f97c 	bl	800ceac <vPortExitCritical>

	return xAlreadyYielded;
 800bbb4:	68bb      	ldr	r3, [r7, #8]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	20000d6c 	.word	0x20000d6c
 800bbc4:	20000d44 	.word	0x20000d44
 800bbc8:	20000d04 	.word	0x20000d04
 800bbcc:	20000d4c 	.word	0x20000d4c
 800bbd0:	20000874 	.word	0x20000874
 800bbd4:	20000870 	.word	0x20000870
 800bbd8:	20000d58 	.word	0x20000d58
 800bbdc:	20000d54 	.word	0x20000d54
 800bbe0:	e000ed04 	.word	0xe000ed04

0800bbe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bbea:	4b04      	ldr	r3, [pc, #16]	; (800bbfc <xTaskGetTickCount+0x18>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bbf0:	687b      	ldr	r3, [r7, #4]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bc80      	pop	{r7}
 800bbfa:	4770      	bx	lr
 800bbfc:	20000d48 	.word	0x20000d48

0800bc00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc06:	2300      	movs	r3, #0
 800bc08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc0a:	4b51      	ldr	r3, [pc, #324]	; (800bd50 <xTaskIncrementTick+0x150>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f040 808e 	bne.w	800bd30 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bc14:	4b4f      	ldr	r3, [pc, #316]	; (800bd54 <xTaskIncrementTick+0x154>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bc1c:	4a4d      	ldr	r2, [pc, #308]	; (800bd54 <xTaskIncrementTick+0x154>)
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d120      	bne.n	800bc6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bc28:	4b4b      	ldr	r3, [pc, #300]	; (800bd58 <xTaskIncrementTick+0x158>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00a      	beq.n	800bc48 <xTaskIncrementTick+0x48>
	__asm volatile
 800bc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	603b      	str	r3, [r7, #0]
}
 800bc44:	bf00      	nop
 800bc46:	e7fe      	b.n	800bc46 <xTaskIncrementTick+0x46>
 800bc48:	4b43      	ldr	r3, [pc, #268]	; (800bd58 <xTaskIncrementTick+0x158>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	60fb      	str	r3, [r7, #12]
 800bc4e:	4b43      	ldr	r3, [pc, #268]	; (800bd5c <xTaskIncrementTick+0x15c>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a41      	ldr	r2, [pc, #260]	; (800bd58 <xTaskIncrementTick+0x158>)
 800bc54:	6013      	str	r3, [r2, #0]
 800bc56:	4a41      	ldr	r2, [pc, #260]	; (800bd5c <xTaskIncrementTick+0x15c>)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6013      	str	r3, [r2, #0]
 800bc5c:	4b40      	ldr	r3, [pc, #256]	; (800bd60 <xTaskIncrementTick+0x160>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	3301      	adds	r3, #1
 800bc62:	4a3f      	ldr	r2, [pc, #252]	; (800bd60 <xTaskIncrementTick+0x160>)
 800bc64:	6013      	str	r3, [r2, #0]
 800bc66:	f000 fb0b 	bl	800c280 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc6a:	4b3e      	ldr	r3, [pc, #248]	; (800bd64 <xTaskIncrementTick+0x164>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	693a      	ldr	r2, [r7, #16]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d34e      	bcc.n	800bd12 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc74:	4b38      	ldr	r3, [pc, #224]	; (800bd58 <xTaskIncrementTick+0x158>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d101      	bne.n	800bc82 <xTaskIncrementTick+0x82>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e000      	b.n	800bc84 <xTaskIncrementTick+0x84>
 800bc82:	2300      	movs	r3, #0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d004      	beq.n	800bc92 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc88:	4b36      	ldr	r3, [pc, #216]	; (800bd64 <xTaskIncrementTick+0x164>)
 800bc8a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc8e:	601a      	str	r2, [r3, #0]
					break;
 800bc90:	e03f      	b.n	800bd12 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bc92:	4b31      	ldr	r3, [pc, #196]	; (800bd58 <xTaskIncrementTick+0x158>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bca2:	693a      	ldr	r2, [r7, #16]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d203      	bcs.n	800bcb2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bcaa:	4a2e      	ldr	r2, [pc, #184]	; (800bd64 <xTaskIncrementTick+0x164>)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6013      	str	r3, [r2, #0]
						break;
 800bcb0:	e02f      	b.n	800bd12 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	3304      	adds	r3, #4
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fe feec 	bl	800aa94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d004      	beq.n	800bcce <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	3318      	adds	r3, #24
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7fe fee3 	bl	800aa94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd2:	4b25      	ldr	r3, [pc, #148]	; (800bd68 <xTaskIncrementTick+0x168>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d903      	bls.n	800bce2 <xTaskIncrementTick+0xe2>
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcde:	4a22      	ldr	r2, [pc, #136]	; (800bd68 <xTaskIncrementTick+0x168>)
 800bce0:	6013      	str	r3, [r2, #0]
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bce6:	4613      	mov	r3, r2
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	4413      	add	r3, r2
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	4a1f      	ldr	r2, [pc, #124]	; (800bd6c <xTaskIncrementTick+0x16c>)
 800bcf0:	441a      	add	r2, r3
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	3304      	adds	r3, #4
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	f7fe fe70 	bl	800a9de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd02:	4b1b      	ldr	r3, [pc, #108]	; (800bd70 <xTaskIncrementTick+0x170>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d3b3      	bcc.n	800bc74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd10:	e7b0      	b.n	800bc74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd12:	4b17      	ldr	r3, [pc, #92]	; (800bd70 <xTaskIncrementTick+0x170>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd18:	4914      	ldr	r1, [pc, #80]	; (800bd6c <xTaskIncrementTick+0x16c>)
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	440b      	add	r3, r1
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d907      	bls.n	800bd3a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	617b      	str	r3, [r7, #20]
 800bd2e:	e004      	b.n	800bd3a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bd30:	4b10      	ldr	r3, [pc, #64]	; (800bd74 <xTaskIncrementTick+0x174>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3301      	adds	r3, #1
 800bd36:	4a0f      	ldr	r2, [pc, #60]	; (800bd74 <xTaskIncrementTick+0x174>)
 800bd38:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bd3a:	4b0f      	ldr	r3, [pc, #60]	; (800bd78 <xTaskIncrementTick+0x178>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d001      	beq.n	800bd46 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800bd42:	2301      	movs	r3, #1
 800bd44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bd46:	697b      	ldr	r3, [r7, #20]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3718      	adds	r7, #24
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	20000d6c 	.word	0x20000d6c
 800bd54:	20000d48 	.word	0x20000d48
 800bd58:	20000cfc 	.word	0x20000cfc
 800bd5c:	20000d00 	.word	0x20000d00
 800bd60:	20000d5c 	.word	0x20000d5c
 800bd64:	20000d64 	.word	0x20000d64
 800bd68:	20000d4c 	.word	0x20000d4c
 800bd6c:	20000874 	.word	0x20000874
 800bd70:	20000870 	.word	0x20000870
 800bd74:	20000d54 	.word	0x20000d54
 800bd78:	20000d58 	.word	0x20000d58

0800bd7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd82:	4b27      	ldr	r3, [pc, #156]	; (800be20 <vTaskSwitchContext+0xa4>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d003      	beq.n	800bd92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd8a:	4b26      	ldr	r3, [pc, #152]	; (800be24 <vTaskSwitchContext+0xa8>)
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd90:	e041      	b.n	800be16 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bd92:	4b24      	ldr	r3, [pc, #144]	; (800be24 <vTaskSwitchContext+0xa8>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800bd98:	4b23      	ldr	r3, [pc, #140]	; (800be28 <vTaskSwitchContext+0xac>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	60fb      	str	r3, [r7, #12]
 800bd9e:	e010      	b.n	800bdc2 <vTaskSwitchContext+0x46>
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10a      	bne.n	800bdbc <vTaskSwitchContext+0x40>
	__asm volatile
 800bda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	607b      	str	r3, [r7, #4]
}
 800bdb8:	bf00      	nop
 800bdba:	e7fe      	b.n	800bdba <vTaskSwitchContext+0x3e>
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	60fb      	str	r3, [r7, #12]
 800bdc2:	491a      	ldr	r1, [pc, #104]	; (800be2c <vTaskSwitchContext+0xb0>)
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	4413      	add	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	440b      	add	r3, r1
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d0e4      	beq.n	800bda0 <vTaskSwitchContext+0x24>
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4413      	add	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4a12      	ldr	r2, [pc, #72]	; (800be2c <vTaskSwitchContext+0xb0>)
 800bde2:	4413      	add	r3, r2
 800bde4:	60bb      	str	r3, [r7, #8]
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	685a      	ldr	r2, [r3, #4]
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	605a      	str	r2, [r3, #4]
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	3308      	adds	r3, #8
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d104      	bne.n	800be06 <vTaskSwitchContext+0x8a>
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	685a      	ldr	r2, [r3, #4]
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	605a      	str	r2, [r3, #4]
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	4a08      	ldr	r2, [pc, #32]	; (800be30 <vTaskSwitchContext+0xb4>)
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	4a05      	ldr	r2, [pc, #20]	; (800be28 <vTaskSwitchContext+0xac>)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6013      	str	r3, [r2, #0]
}
 800be16:	bf00      	nop
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bc80      	pop	{r7}
 800be1e:	4770      	bx	lr
 800be20:	20000d6c 	.word	0x20000d6c
 800be24:	20000d58 	.word	0x20000d58
 800be28:	20000d4c 	.word	0x20000d4c
 800be2c:	20000874 	.word	0x20000874
 800be30:	20000870 	.word	0x20000870

0800be34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d10a      	bne.n	800be5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800be44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be48:	f383 8811 	msr	BASEPRI, r3
 800be4c:	f3bf 8f6f 	isb	sy
 800be50:	f3bf 8f4f 	dsb	sy
 800be54:	60fb      	str	r3, [r7, #12]
}
 800be56:	bf00      	nop
 800be58:	e7fe      	b.n	800be58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be5a:	4b07      	ldr	r3, [pc, #28]	; (800be78 <vTaskPlaceOnEventList+0x44>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	3318      	adds	r3, #24
 800be60:	4619      	mov	r1, r3
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7fe fdde 	bl	800aa24 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be68:	2101      	movs	r1, #1
 800be6a:	6838      	ldr	r0, [r7, #0]
 800be6c:	f000 fb94 	bl	800c598 <prvAddCurrentTaskToDelayedList>
}
 800be70:	bf00      	nop
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	20000870 	.word	0x20000870

0800be7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10a      	bne.n	800bea4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	617b      	str	r3, [r7, #20]
}
 800bea0:	bf00      	nop
 800bea2:	e7fe      	b.n	800bea2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bea4:	4b0a      	ldr	r3, [pc, #40]	; (800bed0 <vTaskPlaceOnEventListRestricted+0x54>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	3318      	adds	r3, #24
 800beaa:	4619      	mov	r1, r3
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f7fe fd96 	bl	800a9de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d002      	beq.n	800bebe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800beb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bebc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bebe:	6879      	ldr	r1, [r7, #4]
 800bec0:	68b8      	ldr	r0, [r7, #8]
 800bec2:	f000 fb69 	bl	800c598 <prvAddCurrentTaskToDelayedList>
	}
 800bec6:	bf00      	nop
 800bec8:	3718      	adds	r7, #24
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	20000870 	.word	0x20000870

0800bed4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b086      	sub	sp, #24
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d10a      	bne.n	800bf00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800beea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	60fb      	str	r3, [r7, #12]
}
 800befc:	bf00      	nop
 800befe:	e7fe      	b.n	800befe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	3318      	adds	r3, #24
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7fe fdc5 	bl	800aa94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf0a:	4b1e      	ldr	r3, [pc, #120]	; (800bf84 <xTaskRemoveFromEventList+0xb0>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d11d      	bne.n	800bf4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	3304      	adds	r3, #4
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fe fdbc 	bl	800aa94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf20:	4b19      	ldr	r3, [pc, #100]	; (800bf88 <xTaskRemoveFromEventList+0xb4>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d903      	bls.n	800bf30 <xTaskRemoveFromEventList+0x5c>
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2c:	4a16      	ldr	r2, [pc, #88]	; (800bf88 <xTaskRemoveFromEventList+0xb4>)
 800bf2e:	6013      	str	r3, [r2, #0]
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf34:	4613      	mov	r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	4413      	add	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4a13      	ldr	r2, [pc, #76]	; (800bf8c <xTaskRemoveFromEventList+0xb8>)
 800bf3e:	441a      	add	r2, r3
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	3304      	adds	r3, #4
 800bf44:	4619      	mov	r1, r3
 800bf46:	4610      	mov	r0, r2
 800bf48:	f7fe fd49 	bl	800a9de <vListInsertEnd>
 800bf4c:	e005      	b.n	800bf5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	3318      	adds	r3, #24
 800bf52:	4619      	mov	r1, r3
 800bf54:	480e      	ldr	r0, [pc, #56]	; (800bf90 <xTaskRemoveFromEventList+0xbc>)
 800bf56:	f7fe fd42 	bl	800a9de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf5e:	4b0d      	ldr	r3, [pc, #52]	; (800bf94 <xTaskRemoveFromEventList+0xc0>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d905      	bls.n	800bf74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf6c:	4b0a      	ldr	r3, [pc, #40]	; (800bf98 <xTaskRemoveFromEventList+0xc4>)
 800bf6e:	2201      	movs	r2, #1
 800bf70:	601a      	str	r2, [r3, #0]
 800bf72:	e001      	b.n	800bf78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bf74:	2300      	movs	r3, #0
 800bf76:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bf78:	697b      	ldr	r3, [r7, #20]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3718      	adds	r7, #24
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	20000d6c 	.word	0x20000d6c
 800bf88:	20000d4c 	.word	0x20000d4c
 800bf8c:	20000874 	.word	0x20000874
 800bf90:	20000d04 	.word	0x20000d04
 800bf94:	20000870 	.word	0x20000870
 800bf98:	20000d58 	.word	0x20000d58

0800bf9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bfa4:	4b06      	ldr	r3, [pc, #24]	; (800bfc0 <vTaskInternalSetTimeOutState+0x24>)
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bfac:	4b05      	ldr	r3, [pc, #20]	; (800bfc4 <vTaskInternalSetTimeOutState+0x28>)
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	605a      	str	r2, [r3, #4]
}
 800bfb4:	bf00      	nop
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bc80      	pop	{r7}
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	20000d5c 	.word	0x20000d5c
 800bfc4:	20000d48 	.word	0x20000d48

0800bfc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b088      	sub	sp, #32
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d10a      	bne.n	800bfee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfdc:	f383 8811 	msr	BASEPRI, r3
 800bfe0:	f3bf 8f6f 	isb	sy
 800bfe4:	f3bf 8f4f 	dsb	sy
 800bfe8:	613b      	str	r3, [r7, #16]
}
 800bfea:	bf00      	nop
 800bfec:	e7fe      	b.n	800bfec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10a      	bne.n	800c00a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	60fb      	str	r3, [r7, #12]
}
 800c006:	bf00      	nop
 800c008:	e7fe      	b.n	800c008 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c00a:	f000 ff1f 	bl	800ce4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c00e:	4b1d      	ldr	r3, [pc, #116]	; (800c084 <xTaskCheckForTimeOut+0xbc>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	69ba      	ldr	r2, [r7, #24]
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c026:	d102      	bne.n	800c02e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c028:	2300      	movs	r3, #0
 800c02a:	61fb      	str	r3, [r7, #28]
 800c02c:	e023      	b.n	800c076 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	4b15      	ldr	r3, [pc, #84]	; (800c088 <xTaskCheckForTimeOut+0xc0>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	429a      	cmp	r2, r3
 800c038:	d007      	beq.n	800c04a <xTaskCheckForTimeOut+0x82>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	69ba      	ldr	r2, [r7, #24]
 800c040:	429a      	cmp	r2, r3
 800c042:	d302      	bcc.n	800c04a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c044:	2301      	movs	r3, #1
 800c046:	61fb      	str	r3, [r7, #28]
 800c048:	e015      	b.n	800c076 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	697a      	ldr	r2, [r7, #20]
 800c050:	429a      	cmp	r2, r3
 800c052:	d20b      	bcs.n	800c06c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	1ad2      	subs	r2, r2, r3
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f7ff ff9b 	bl	800bf9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c066:	2300      	movs	r3, #0
 800c068:	61fb      	str	r3, [r7, #28]
 800c06a:	e004      	b.n	800c076 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	2200      	movs	r2, #0
 800c070:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c072:	2301      	movs	r3, #1
 800c074:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c076:	f000 ff19 	bl	800ceac <vPortExitCritical>

	return xReturn;
 800c07a:	69fb      	ldr	r3, [r7, #28]
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3720      	adds	r7, #32
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	20000d48 	.word	0x20000d48
 800c088:	20000d5c 	.word	0x20000d5c

0800c08c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c08c:	b480      	push	{r7}
 800c08e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c090:	4b03      	ldr	r3, [pc, #12]	; (800c0a0 <vTaskMissedYield+0x14>)
 800c092:	2201      	movs	r2, #1
 800c094:	601a      	str	r2, [r3, #0]
}
 800c096:	bf00      	nop
 800c098:	46bd      	mov	sp, r7
 800c09a:	bc80      	pop	{r7}
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	20000d58 	.word	0x20000d58

0800c0a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c0ac:	f000 f852 	bl	800c154 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c0b0:	4b06      	ldr	r3, [pc, #24]	; (800c0cc <prvIdleTask+0x28>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d9f9      	bls.n	800c0ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800c0b8:	4b05      	ldr	r3, [pc, #20]	; (800c0d0 <prvIdleTask+0x2c>)
 800c0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0be:	601a      	str	r2, [r3, #0]
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c0c8:	e7f0      	b.n	800c0ac <prvIdleTask+0x8>
 800c0ca:	bf00      	nop
 800c0cc:	20000874 	.word	0x20000874
 800c0d0:	e000ed04 	.word	0xe000ed04

0800c0d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0da:	2300      	movs	r3, #0
 800c0dc:	607b      	str	r3, [r7, #4]
 800c0de:	e00c      	b.n	800c0fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	4413      	add	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	4a12      	ldr	r2, [pc, #72]	; (800c134 <prvInitialiseTaskLists+0x60>)
 800c0ec:	4413      	add	r3, r2
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fe fc4a 	bl	800a988 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	607b      	str	r3, [r7, #4]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2b37      	cmp	r3, #55	; 0x37
 800c0fe:	d9ef      	bls.n	800c0e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c100:	480d      	ldr	r0, [pc, #52]	; (800c138 <prvInitialiseTaskLists+0x64>)
 800c102:	f7fe fc41 	bl	800a988 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c106:	480d      	ldr	r0, [pc, #52]	; (800c13c <prvInitialiseTaskLists+0x68>)
 800c108:	f7fe fc3e 	bl	800a988 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c10c:	480c      	ldr	r0, [pc, #48]	; (800c140 <prvInitialiseTaskLists+0x6c>)
 800c10e:	f7fe fc3b 	bl	800a988 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c112:	480c      	ldr	r0, [pc, #48]	; (800c144 <prvInitialiseTaskLists+0x70>)
 800c114:	f7fe fc38 	bl	800a988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c118:	480b      	ldr	r0, [pc, #44]	; (800c148 <prvInitialiseTaskLists+0x74>)
 800c11a:	f7fe fc35 	bl	800a988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c11e:	4b0b      	ldr	r3, [pc, #44]	; (800c14c <prvInitialiseTaskLists+0x78>)
 800c120:	4a05      	ldr	r2, [pc, #20]	; (800c138 <prvInitialiseTaskLists+0x64>)
 800c122:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c124:	4b0a      	ldr	r3, [pc, #40]	; (800c150 <prvInitialiseTaskLists+0x7c>)
 800c126:	4a05      	ldr	r2, [pc, #20]	; (800c13c <prvInitialiseTaskLists+0x68>)
 800c128:	601a      	str	r2, [r3, #0]
}
 800c12a:	bf00      	nop
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	20000874 	.word	0x20000874
 800c138:	20000cd4 	.word	0x20000cd4
 800c13c:	20000ce8 	.word	0x20000ce8
 800c140:	20000d04 	.word	0x20000d04
 800c144:	20000d18 	.word	0x20000d18
 800c148:	20000d30 	.word	0x20000d30
 800c14c:	20000cfc 	.word	0x20000cfc
 800c150:	20000d00 	.word	0x20000d00

0800c154 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c15a:	e019      	b.n	800c190 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c15c:	f000 fe76 	bl	800ce4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c160:	4b10      	ldr	r3, [pc, #64]	; (800c1a4 <prvCheckTasksWaitingTermination+0x50>)
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	3304      	adds	r3, #4
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fe fc91 	bl	800aa94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c172:	4b0d      	ldr	r3, [pc, #52]	; (800c1a8 <prvCheckTasksWaitingTermination+0x54>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	3b01      	subs	r3, #1
 800c178:	4a0b      	ldr	r2, [pc, #44]	; (800c1a8 <prvCheckTasksWaitingTermination+0x54>)
 800c17a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c17c:	4b0b      	ldr	r3, [pc, #44]	; (800c1ac <prvCheckTasksWaitingTermination+0x58>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	3b01      	subs	r3, #1
 800c182:	4a0a      	ldr	r2, [pc, #40]	; (800c1ac <prvCheckTasksWaitingTermination+0x58>)
 800c184:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c186:	f000 fe91 	bl	800ceac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f848 	bl	800c220 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c190:	4b06      	ldr	r3, [pc, #24]	; (800c1ac <prvCheckTasksWaitingTermination+0x58>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1e1      	bne.n	800c15c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c198:	bf00      	nop
 800c19a:	bf00      	nop
 800c19c:	3708      	adds	r7, #8
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	20000d18 	.word	0x20000d18
 800c1a8:	20000d44 	.word	0x20000d44
 800c1ac:	20000d2c 	.word	0x20000d2c

0800c1b0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c1bc:	e005      	b.n	800c1ca <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	2ba5      	cmp	r3, #165	; 0xa5
 800c1d0:	d0f5      	beq.n	800c1be <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	089b      	lsrs	r3, r3, #2
 800c1d6:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	b29b      	uxth	r3, r3
	}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3714      	adds	r7, #20
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bc80      	pop	{r7}
 800c1e4:	4770      	bx	lr
	...

0800c1e8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b086      	sub	sp, #24
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d102      	bne.n	800c1fc <uxTaskGetStackHighWaterMark+0x14>
 800c1f6:	4b09      	ldr	r3, [pc, #36]	; (800c21c <uxTaskGetStackHighWaterMark+0x34>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	e000      	b.n	800c1fe <uxTaskGetStackHighWaterMark+0x16>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c204:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800c206:	6938      	ldr	r0, [r7, #16]
 800c208:	f7ff ffd2 	bl	800c1b0 <prvTaskCheckFreeStackSpace>
 800c20c:	4603      	mov	r3, r0
 800c20e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800c210:	68fb      	ldr	r3, [r7, #12]
	}
 800c212:	4618      	mov	r0, r3
 800c214:	3718      	adds	r7, #24
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	20000870 	.word	0x20000870

0800c220 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d108      	bne.n	800c244 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c236:	4618      	mov	r0, r3
 800c238:	f000 ffcc 	bl	800d1d4 <vPortFree>
				vPortFree( pxTCB );
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 ffc9 	bl	800d1d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c242:	e018      	b.n	800c276 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d103      	bne.n	800c256 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 ffc0 	bl	800d1d4 <vPortFree>
	}
 800c254:	e00f      	b.n	800c276 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	d00a      	beq.n	800c276 <prvDeleteTCB+0x56>
	__asm volatile
 800c260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	60fb      	str	r3, [r7, #12]
}
 800c272:	bf00      	nop
 800c274:	e7fe      	b.n	800c274 <prvDeleteTCB+0x54>
	}
 800c276:	bf00      	nop
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
	...

0800c280 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c286:	4b0e      	ldr	r3, [pc, #56]	; (800c2c0 <prvResetNextTaskUnblockTime+0x40>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d101      	bne.n	800c294 <prvResetNextTaskUnblockTime+0x14>
 800c290:	2301      	movs	r3, #1
 800c292:	e000      	b.n	800c296 <prvResetNextTaskUnblockTime+0x16>
 800c294:	2300      	movs	r3, #0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d004      	beq.n	800c2a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c29a:	4b0a      	ldr	r3, [pc, #40]	; (800c2c4 <prvResetNextTaskUnblockTime+0x44>)
 800c29c:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c2a2:	e008      	b.n	800c2b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c2a4:	4b06      	ldr	r3, [pc, #24]	; (800c2c0 <prvResetNextTaskUnblockTime+0x40>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	4a04      	ldr	r2, [pc, #16]	; (800c2c4 <prvResetNextTaskUnblockTime+0x44>)
 800c2b4:	6013      	str	r3, [r2, #0]
}
 800c2b6:	bf00      	nop
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bc80      	pop	{r7}
 800c2be:	4770      	bx	lr
 800c2c0:	20000cfc 	.word	0x20000cfc
 800c2c4:	20000d64 	.word	0x20000d64

0800c2c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c2ce:	4b0b      	ldr	r3, [pc, #44]	; (800c2fc <xTaskGetSchedulerState+0x34>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d102      	bne.n	800c2dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	607b      	str	r3, [r7, #4]
 800c2da:	e008      	b.n	800c2ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2dc:	4b08      	ldr	r3, [pc, #32]	; (800c300 <xTaskGetSchedulerState+0x38>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d102      	bne.n	800c2ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c2e4:	2302      	movs	r3, #2
 800c2e6:	607b      	str	r3, [r7, #4]
 800c2e8:	e001      	b.n	800c2ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c2ee:	687b      	ldr	r3, [r7, #4]
	}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bc80      	pop	{r7}
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop
 800c2fc:	20000d50 	.word	0x20000d50
 800c300:	20000d6c 	.word	0x20000d6c

0800c304 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c304:	b580      	push	{r7, lr}
 800c306:	b086      	sub	sp, #24
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c310:	2300      	movs	r3, #0
 800c312:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d056      	beq.n	800c3c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c31a:	4b2e      	ldr	r3, [pc, #184]	; (800c3d4 <xTaskPriorityDisinherit+0xd0>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	693a      	ldr	r2, [r7, #16]
 800c320:	429a      	cmp	r2, r3
 800c322:	d00a      	beq.n	800c33a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c328:	f383 8811 	msr	BASEPRI, r3
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	60fb      	str	r3, [r7, #12]
}
 800c336:	bf00      	nop
 800c338:	e7fe      	b.n	800c338 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10a      	bne.n	800c358 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	60bb      	str	r3, [r7, #8]
}
 800c354:	bf00      	nop
 800c356:	e7fe      	b.n	800c356 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c35c:	1e5a      	subs	r2, r3, #1
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d02c      	beq.n	800c3c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c372:	2b00      	cmp	r3, #0
 800c374:	d128      	bne.n	800c3c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	3304      	adds	r3, #4
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7fe fb8a 	bl	800aa94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c398:	4b0f      	ldr	r3, [pc, #60]	; (800c3d8 <xTaskPriorityDisinherit+0xd4>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d903      	bls.n	800c3a8 <xTaskPriorityDisinherit+0xa4>
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a4:	4a0c      	ldr	r2, [pc, #48]	; (800c3d8 <xTaskPriorityDisinherit+0xd4>)
 800c3a6:	6013      	str	r3, [r2, #0]
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	4413      	add	r3, r2
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	4a09      	ldr	r2, [pc, #36]	; (800c3dc <xTaskPriorityDisinherit+0xd8>)
 800c3b6:	441a      	add	r2, r3
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	3304      	adds	r3, #4
 800c3bc:	4619      	mov	r1, r3
 800c3be:	4610      	mov	r0, r2
 800c3c0:	f7fe fb0d 	bl	800a9de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3c8:	697b      	ldr	r3, [r7, #20]
	}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3718      	adds	r7, #24
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	20000870 	.word	0x20000870
 800c3d8:	20000d4c 	.word	0x20000d4c
 800c3dc:	20000874 	.word	0x20000874

0800c3e0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c3ea:	f000 fd2f 	bl	800ce4c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c3ee:	4b1e      	ldr	r3, [pc, #120]	; (800c468 <ulTaskNotifyTake+0x88>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d113      	bne.n	800c420 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c3f8:	4b1b      	ldr	r3, [pc, #108]	; (800c468 <ulTaskNotifyTake+0x88>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00b      	beq.n	800c420 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c408:	2101      	movs	r1, #1
 800c40a:	6838      	ldr	r0, [r7, #0]
 800c40c:	f000 f8c4 	bl	800c598 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c410:	4b16      	ldr	r3, [pc, #88]	; (800c46c <ulTaskNotifyTake+0x8c>)
 800c412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c416:	601a      	str	r2, [r3, #0]
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c420:	f000 fd44 	bl	800ceac <vPortExitCritical>

		taskENTER_CRITICAL();
 800c424:	f000 fd12 	bl	800ce4c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c428:	4b0f      	ldr	r3, [pc, #60]	; (800c468 <ulTaskNotifyTake+0x88>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c42e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00c      	beq.n	800c450 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d004      	beq.n	800c446 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c43c:	4b0a      	ldr	r3, [pc, #40]	; (800c468 <ulTaskNotifyTake+0x88>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2200      	movs	r2, #0
 800c442:	655a      	str	r2, [r3, #84]	; 0x54
 800c444:	e004      	b.n	800c450 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c446:	4b08      	ldr	r3, [pc, #32]	; (800c468 <ulTaskNotifyTake+0x88>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	3a01      	subs	r2, #1
 800c44e:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c450:	4b05      	ldr	r3, [pc, #20]	; (800c468 <ulTaskNotifyTake+0x88>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	2200      	movs	r2, #0
 800c456:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c45a:	f000 fd27 	bl	800ceac <vPortExitCritical>

		return ulReturn;
 800c45e:	68fb      	ldr	r3, [r7, #12]
	}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	20000870 	.word	0x20000870
 800c46c:	e000ed04 	.word	0xe000ed04

0800c470 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c470:	b580      	push	{r7, lr}
 800c472:	b08a      	sub	sp, #40	; 0x28
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10a      	bne.n	800c496 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	61bb      	str	r3, [r7, #24]
}
 800c492:	bf00      	nop
 800c494:	e7fe      	b.n	800c494 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c496:	f000 fd9b 	bl	800cfd0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800c49e:	f3ef 8211 	mrs	r2, BASEPRI
 800c4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a6:	f383 8811 	msr	BASEPRI, r3
 800c4aa:	f3bf 8f6f 	isb	sy
 800c4ae:	f3bf 8f4f 	dsb	sy
 800c4b2:	617a      	str	r2, [r7, #20]
 800c4b4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c4b6:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4b8:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4bc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c4c0:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c4:	2202      	movs	r2, #2
 800c4c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ce:	1c5a      	adds	r2, r3, #1
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d2:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c4d4:	7ffb      	ldrb	r3, [r7, #31]
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d147      	bne.n	800c56a <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00a      	beq.n	800c4f8 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800c4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e6:	f383 8811 	msr	BASEPRI, r3
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	60fb      	str	r3, [r7, #12]
}
 800c4f4:	bf00      	nop
 800c4f6:	e7fe      	b.n	800c4f6 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4f8:	4b21      	ldr	r3, [pc, #132]	; (800c580 <vTaskNotifyGiveFromISR+0x110>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d11d      	bne.n	800c53c <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c502:	3304      	adds	r3, #4
 800c504:	4618      	mov	r0, r3
 800c506:	f7fe fac5 	bl	800aa94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c50e:	4b1d      	ldr	r3, [pc, #116]	; (800c584 <vTaskNotifyGiveFromISR+0x114>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	429a      	cmp	r2, r3
 800c514:	d903      	bls.n	800c51e <vTaskNotifyGiveFromISR+0xae>
 800c516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51a:	4a1a      	ldr	r2, [pc, #104]	; (800c584 <vTaskNotifyGiveFromISR+0x114>)
 800c51c:	6013      	str	r3, [r2, #0]
 800c51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c522:	4613      	mov	r3, r2
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	4413      	add	r3, r2
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	4a17      	ldr	r2, [pc, #92]	; (800c588 <vTaskNotifyGiveFromISR+0x118>)
 800c52c:	441a      	add	r2, r3
 800c52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c530:	3304      	adds	r3, #4
 800c532:	4619      	mov	r1, r3
 800c534:	4610      	mov	r0, r2
 800c536:	f7fe fa52 	bl	800a9de <vListInsertEnd>
 800c53a:	e005      	b.n	800c548 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53e:	3318      	adds	r3, #24
 800c540:	4619      	mov	r1, r3
 800c542:	4812      	ldr	r0, [pc, #72]	; (800c58c <vTaskNotifyGiveFromISR+0x11c>)
 800c544:	f7fe fa4b 	bl	800a9de <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c54c:	4b10      	ldr	r3, [pc, #64]	; (800c590 <vTaskNotifyGiveFromISR+0x120>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c552:	429a      	cmp	r2, r3
 800c554:	d909      	bls.n	800c56a <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d003      	beq.n	800c564 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	2201      	movs	r2, #1
 800c560:	601a      	str	r2, [r3, #0]
 800c562:	e002      	b.n	800c56a <vTaskNotifyGiveFromISR+0xfa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800c564:	4b0b      	ldr	r3, [pc, #44]	; (800c594 <vTaskNotifyGiveFromISR+0x124>)
 800c566:	2201      	movs	r2, #1
 800c568:	601a      	str	r2, [r3, #0]
 800c56a:	6a3b      	ldr	r3, [r7, #32]
 800c56c:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	f383 8811 	msr	BASEPRI, r3
}
 800c574:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c576:	bf00      	nop
 800c578:	3728      	adds	r7, #40	; 0x28
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	20000d6c 	.word	0x20000d6c
 800c584:	20000d4c 	.word	0x20000d4c
 800c588:	20000874 	.word	0x20000874
 800c58c:	20000d04 	.word	0x20000d04
 800c590:	20000870 	.word	0x20000870
 800c594:	20000d58 	.word	0x20000d58

0800c598 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c5a2:	4b21      	ldr	r3, [pc, #132]	; (800c628 <prvAddCurrentTaskToDelayedList+0x90>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5a8:	4b20      	ldr	r3, [pc, #128]	; (800c62c <prvAddCurrentTaskToDelayedList+0x94>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	3304      	adds	r3, #4
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fe fa70 	bl	800aa94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ba:	d10a      	bne.n	800c5d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d007      	beq.n	800c5d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5c2:	4b1a      	ldr	r3, [pc, #104]	; (800c62c <prvAddCurrentTaskToDelayedList+0x94>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	3304      	adds	r3, #4
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	4819      	ldr	r0, [pc, #100]	; (800c630 <prvAddCurrentTaskToDelayedList+0x98>)
 800c5cc:	f7fe fa07 	bl	800a9de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c5d0:	e026      	b.n	800c620 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c5da:	4b14      	ldr	r3, [pc, #80]	; (800c62c <prvAddCurrentTaskToDelayedList+0x94>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c5e2:	68ba      	ldr	r2, [r7, #8]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d209      	bcs.n	800c5fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5ea:	4b12      	ldr	r3, [pc, #72]	; (800c634 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	4b0f      	ldr	r3, [pc, #60]	; (800c62c <prvAddCurrentTaskToDelayedList+0x94>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	3304      	adds	r3, #4
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	4610      	mov	r0, r2
 800c5f8:	f7fe fa14 	bl	800aa24 <vListInsert>
}
 800c5fc:	e010      	b.n	800c620 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5fe:	4b0e      	ldr	r3, [pc, #56]	; (800c638 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	4b0a      	ldr	r3, [pc, #40]	; (800c62c <prvAddCurrentTaskToDelayedList+0x94>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	3304      	adds	r3, #4
 800c608:	4619      	mov	r1, r3
 800c60a:	4610      	mov	r0, r2
 800c60c:	f7fe fa0a 	bl	800aa24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c610:	4b0a      	ldr	r3, [pc, #40]	; (800c63c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	68ba      	ldr	r2, [r7, #8]
 800c616:	429a      	cmp	r2, r3
 800c618:	d202      	bcs.n	800c620 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c61a:	4a08      	ldr	r2, [pc, #32]	; (800c63c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	6013      	str	r3, [r2, #0]
}
 800c620:	bf00      	nop
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	20000d48 	.word	0x20000d48
 800c62c:	20000870 	.word	0x20000870
 800c630:	20000d30 	.word	0x20000d30
 800c634:	20000d00 	.word	0x20000d00
 800c638:	20000cfc 	.word	0x20000cfc
 800c63c:	20000d64 	.word	0x20000d64

0800c640 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b08a      	sub	sp, #40	; 0x28
 800c644:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c646:	2300      	movs	r3, #0
 800c648:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c64a:	f000 facb 	bl	800cbe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c64e:	4b1c      	ldr	r3, [pc, #112]	; (800c6c0 <xTimerCreateTimerTask+0x80>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d021      	beq.n	800c69a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c656:	2300      	movs	r3, #0
 800c658:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c65a:	2300      	movs	r3, #0
 800c65c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c65e:	1d3a      	adds	r2, r7, #4
 800c660:	f107 0108 	add.w	r1, r7, #8
 800c664:	f107 030c 	add.w	r3, r7, #12
 800c668:	4618      	mov	r0, r3
 800c66a:	f7fe f973 	bl	800a954 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c66e:	6879      	ldr	r1, [r7, #4]
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	9202      	str	r2, [sp, #8]
 800c676:	9301      	str	r3, [sp, #4]
 800c678:	2302      	movs	r3, #2
 800c67a:	9300      	str	r3, [sp, #0]
 800c67c:	2300      	movs	r3, #0
 800c67e:	460a      	mov	r2, r1
 800c680:	4910      	ldr	r1, [pc, #64]	; (800c6c4 <xTimerCreateTimerTask+0x84>)
 800c682:	4811      	ldr	r0, [pc, #68]	; (800c6c8 <xTimerCreateTimerTask+0x88>)
 800c684:	f7fe ff52 	bl	800b52c <xTaskCreateStatic>
 800c688:	4603      	mov	r3, r0
 800c68a:	4a10      	ldr	r2, [pc, #64]	; (800c6cc <xTimerCreateTimerTask+0x8c>)
 800c68c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c68e:	4b0f      	ldr	r3, [pc, #60]	; (800c6cc <xTimerCreateTimerTask+0x8c>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d001      	beq.n	800c69a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c696:	2301      	movs	r3, #1
 800c698:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10a      	bne.n	800c6b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	613b      	str	r3, [r7, #16]
}
 800c6b2:	bf00      	nop
 800c6b4:	e7fe      	b.n	800c6b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c6b6:	697b      	ldr	r3, [r7, #20]
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3718      	adds	r7, #24
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	20000da0 	.word	0x20000da0
 800c6c4:	0800e080 	.word	0x0800e080
 800c6c8:	0800c7ed 	.word	0x0800c7ed
 800c6cc:	20000da4 	.word	0x20000da4

0800c6d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b08a      	sub	sp, #40	; 0x28
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	607a      	str	r2, [r7, #4]
 800c6dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10a      	bne.n	800c6fe <xTimerGenericCommand+0x2e>
	__asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	623b      	str	r3, [r7, #32]
}
 800c6fa:	bf00      	nop
 800c6fc:	e7fe      	b.n	800c6fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c6fe:	4b1a      	ldr	r3, [pc, #104]	; (800c768 <xTimerGenericCommand+0x98>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d02a      	beq.n	800c75c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	2b05      	cmp	r3, #5
 800c716:	dc18      	bgt.n	800c74a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c718:	f7ff fdd6 	bl	800c2c8 <xTaskGetSchedulerState>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b02      	cmp	r3, #2
 800c720:	d109      	bne.n	800c736 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c722:	4b11      	ldr	r3, [pc, #68]	; (800c768 <xTimerGenericCommand+0x98>)
 800c724:	6818      	ldr	r0, [r3, #0]
 800c726:	f107 0110 	add.w	r1, r7, #16
 800c72a:	2300      	movs	r3, #0
 800c72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c72e:	f7fe fb1b 	bl	800ad68 <xQueueGenericSend>
 800c732:	6278      	str	r0, [r7, #36]	; 0x24
 800c734:	e012      	b.n	800c75c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c736:	4b0c      	ldr	r3, [pc, #48]	; (800c768 <xTimerGenericCommand+0x98>)
 800c738:	6818      	ldr	r0, [r3, #0]
 800c73a:	f107 0110 	add.w	r1, r7, #16
 800c73e:	2300      	movs	r3, #0
 800c740:	2200      	movs	r2, #0
 800c742:	f7fe fb11 	bl	800ad68 <xQueueGenericSend>
 800c746:	6278      	str	r0, [r7, #36]	; 0x24
 800c748:	e008      	b.n	800c75c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c74a:	4b07      	ldr	r3, [pc, #28]	; (800c768 <xTimerGenericCommand+0x98>)
 800c74c:	6818      	ldr	r0, [r3, #0]
 800c74e:	f107 0110 	add.w	r1, r7, #16
 800c752:	2300      	movs	r3, #0
 800c754:	683a      	ldr	r2, [r7, #0]
 800c756:	f7fe fc05 	bl	800af64 <xQueueGenericSendFromISR>
 800c75a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3728      	adds	r7, #40	; 0x28
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	20000da0 	.word	0x20000da0

0800c76c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b088      	sub	sp, #32
 800c770:	af02      	add	r7, sp, #8
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c776:	4b1c      	ldr	r3, [pc, #112]	; (800c7e8 <prvProcessExpiredTimer+0x7c>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	3304      	adds	r3, #4
 800c784:	4618      	mov	r0, r3
 800c786:	f7fe f985 	bl	800aa94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	69db      	ldr	r3, [r3, #28]
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d122      	bne.n	800c7d8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	699a      	ldr	r2, [r3, #24]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	18d1      	adds	r1, r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	683a      	ldr	r2, [r7, #0]
 800c79e:	6978      	ldr	r0, [r7, #20]
 800c7a0:	f000 f8c8 	bl	800c934 <prvInsertTimerInActiveList>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d016      	beq.n	800c7d8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	6978      	ldr	r0, [r7, #20]
 800c7b6:	f7ff ff8b 	bl	800c6d0 <xTimerGenericCommand>
 800c7ba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10a      	bne.n	800c7d8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	60fb      	str	r3, [r7, #12]
}
 800c7d4:	bf00      	nop
 800c7d6:	e7fe      	b.n	800c7d6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7dc:	6978      	ldr	r0, [r7, #20]
 800c7de:	4798      	blx	r3
}
 800c7e0:	bf00      	nop
 800c7e2:	3718      	adds	r7, #24
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	20000d98 	.word	0x20000d98

0800c7ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7f4:	f107 0308 	add.w	r3, r7, #8
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f000 f857 	bl	800c8ac <prvGetNextExpireTime>
 800c7fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	4619      	mov	r1, r3
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f000 f803 	bl	800c810 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c80a:	f000 f8d5 	bl	800c9b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c80e:	e7f1      	b.n	800c7f4 <prvTimerTask+0x8>

0800c810 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c81a:	f7ff f937 	bl	800ba8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c81e:	f107 0308 	add.w	r3, r7, #8
 800c822:	4618      	mov	r0, r3
 800c824:	f000 f866 	bl	800c8f4 <prvSampleTimeNow>
 800c828:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d130      	bne.n	800c892 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d10a      	bne.n	800c84c <prvProcessTimerOrBlockTask+0x3c>
 800c836:	687a      	ldr	r2, [r7, #4]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d806      	bhi.n	800c84c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c83e:	f7ff f933 	bl	800baa8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c842:	68f9      	ldr	r1, [r7, #12]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f7ff ff91 	bl	800c76c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c84a:	e024      	b.n	800c896 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d008      	beq.n	800c864 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c852:	4b13      	ldr	r3, [pc, #76]	; (800c8a0 <prvProcessTimerOrBlockTask+0x90>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	bf0c      	ite	eq
 800c85c:	2301      	moveq	r3, #1
 800c85e:	2300      	movne	r3, #0
 800c860:	b2db      	uxtb	r3, r3
 800c862:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c864:	4b0f      	ldr	r3, [pc, #60]	; (800c8a4 <prvProcessTimerOrBlockTask+0x94>)
 800c866:	6818      	ldr	r0, [r3, #0]
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	1ad3      	subs	r3, r2, r3
 800c86e:	683a      	ldr	r2, [r7, #0]
 800c870:	4619      	mov	r1, r3
 800c872:	f7fe fe27 	bl	800b4c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c876:	f7ff f917 	bl	800baa8 <xTaskResumeAll>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10a      	bne.n	800c896 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c880:	4b09      	ldr	r3, [pc, #36]	; (800c8a8 <prvProcessTimerOrBlockTask+0x98>)
 800c882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c886:	601a      	str	r2, [r3, #0]
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	f3bf 8f6f 	isb	sy
}
 800c890:	e001      	b.n	800c896 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c892:	f7ff f909 	bl	800baa8 <xTaskResumeAll>
}
 800c896:	bf00      	nop
 800c898:	3710      	adds	r7, #16
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	20000d9c 	.word	0x20000d9c
 800c8a4:	20000da0 	.word	0x20000da0
 800c8a8:	e000ed04 	.word	0xe000ed04

0800c8ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c8b4:	4b0e      	ldr	r3, [pc, #56]	; (800c8f0 <prvGetNextExpireTime+0x44>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	bf0c      	ite	eq
 800c8be:	2301      	moveq	r3, #1
 800c8c0:	2300      	movne	r3, #0
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d105      	bne.n	800c8de <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8d2:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <prvGetNextExpireTime+0x44>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	60fb      	str	r3, [r7, #12]
 800c8dc:	e001      	b.n	800c8e2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3714      	adds	r7, #20
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bc80      	pop	{r7}
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	20000d98 	.word	0x20000d98

0800c8f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c8fc:	f7ff f972 	bl	800bbe4 <xTaskGetTickCount>
 800c900:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c902:	4b0b      	ldr	r3, [pc, #44]	; (800c930 <prvSampleTimeNow+0x3c>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	68fa      	ldr	r2, [r7, #12]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d205      	bcs.n	800c918 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c90c:	f000 f908 	bl	800cb20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2201      	movs	r2, #1
 800c914:	601a      	str	r2, [r3, #0]
 800c916:	e002      	b.n	800c91e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c91e:	4a04      	ldr	r2, [pc, #16]	; (800c930 <prvSampleTimeNow+0x3c>)
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c924:	68fb      	ldr	r3, [r7, #12]
}
 800c926:	4618      	mov	r0, r3
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	20000da8 	.word	0x20000da8

0800c934 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b086      	sub	sp, #24
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
 800c940:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c942:	2300      	movs	r3, #0
 800c944:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	68fa      	ldr	r2, [r7, #12]
 800c950:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c952:	68ba      	ldr	r2, [r7, #8]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	429a      	cmp	r2, r3
 800c958:	d812      	bhi.n	800c980 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	1ad2      	subs	r2, r2, r3
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	699b      	ldr	r3, [r3, #24]
 800c964:	429a      	cmp	r2, r3
 800c966:	d302      	bcc.n	800c96e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c968:	2301      	movs	r3, #1
 800c96a:	617b      	str	r3, [r7, #20]
 800c96c:	e01b      	b.n	800c9a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c96e:	4b10      	ldr	r3, [pc, #64]	; (800c9b0 <prvInsertTimerInActiveList+0x7c>)
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	3304      	adds	r3, #4
 800c976:	4619      	mov	r1, r3
 800c978:	4610      	mov	r0, r2
 800c97a:	f7fe f853 	bl	800aa24 <vListInsert>
 800c97e:	e012      	b.n	800c9a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	429a      	cmp	r2, r3
 800c986:	d206      	bcs.n	800c996 <prvInsertTimerInActiveList+0x62>
 800c988:	68ba      	ldr	r2, [r7, #8]
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d302      	bcc.n	800c996 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c990:	2301      	movs	r3, #1
 800c992:	617b      	str	r3, [r7, #20]
 800c994:	e007      	b.n	800c9a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c996:	4b07      	ldr	r3, [pc, #28]	; (800c9b4 <prvInsertTimerInActiveList+0x80>)
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	3304      	adds	r3, #4
 800c99e:	4619      	mov	r1, r3
 800c9a0:	4610      	mov	r0, r2
 800c9a2:	f7fe f83f 	bl	800aa24 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c9a6:	697b      	ldr	r3, [r7, #20]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3718      	adds	r7, #24
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	20000d9c 	.word	0x20000d9c
 800c9b4:	20000d98 	.word	0x20000d98

0800c9b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b08e      	sub	sp, #56	; 0x38
 800c9bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9be:	e09d      	b.n	800cafc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	da18      	bge.n	800c9f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c9c6:	1d3b      	adds	r3, r7, #4
 800c9c8:	3304      	adds	r3, #4
 800c9ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d10a      	bne.n	800c9e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d6:	f383 8811 	msr	BASEPRI, r3
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	61fb      	str	r3, [r7, #28]
}
 800c9e4:	bf00      	nop
 800c9e6:	e7fe      	b.n	800c9e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9ee:	6850      	ldr	r0, [r2, #4]
 800c9f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9f2:	6892      	ldr	r2, [r2, #8]
 800c9f4:	4611      	mov	r1, r2
 800c9f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	db7d      	blt.n	800cafa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca04:	695b      	ldr	r3, [r3, #20]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d004      	beq.n	800ca14 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0c:	3304      	adds	r3, #4
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fe f840 	bl	800aa94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca14:	463b      	mov	r3, r7
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7ff ff6c 	bl	800c8f4 <prvSampleTimeNow>
 800ca1c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2b09      	cmp	r3, #9
 800ca22:	d86b      	bhi.n	800cafc <prvProcessReceivedCommands+0x144>
 800ca24:	a201      	add	r2, pc, #4	; (adr r2, 800ca2c <prvProcessReceivedCommands+0x74>)
 800ca26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2a:	bf00      	nop
 800ca2c:	0800ca55 	.word	0x0800ca55
 800ca30:	0800ca55 	.word	0x0800ca55
 800ca34:	0800ca55 	.word	0x0800ca55
 800ca38:	0800cafd 	.word	0x0800cafd
 800ca3c:	0800cab1 	.word	0x0800cab1
 800ca40:	0800cae9 	.word	0x0800cae9
 800ca44:	0800ca55 	.word	0x0800ca55
 800ca48:	0800ca55 	.word	0x0800ca55
 800ca4c:	0800cafd 	.word	0x0800cafd
 800ca50:	0800cab1 	.word	0x0800cab1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ca54:	68ba      	ldr	r2, [r7, #8]
 800ca56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca58:	699b      	ldr	r3, [r3, #24]
 800ca5a:	18d1      	adds	r1, r2, r3
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca62:	f7ff ff67 	bl	800c934 <prvInsertTimerInActiveList>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d047      	beq.n	800cafc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca72:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ca74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca76:	69db      	ldr	r3, [r3, #28]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d13f      	bne.n	800cafc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca80:	699b      	ldr	r3, [r3, #24]
 800ca82:	441a      	add	r2, r3
 800ca84:	2300      	movs	r3, #0
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	2300      	movs	r3, #0
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca8e:	f7ff fe1f 	bl	800c6d0 <xTimerGenericCommand>
 800ca92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ca94:	6a3b      	ldr	r3, [r7, #32]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d130      	bne.n	800cafc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	61bb      	str	r3, [r7, #24]
}
 800caac:	bf00      	nop
 800caae:	e7fe      	b.n	800caae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab8:	699b      	ldr	r3, [r3, #24]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10a      	bne.n	800cad4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	617b      	str	r3, [r7, #20]
}
 800cad0:	bf00      	nop
 800cad2:	e7fe      	b.n	800cad2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad6:	699a      	ldr	r2, [r3, #24]
 800cad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cada:	18d1      	adds	r1, r2, r3
 800cadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cae2:	f7ff ff27 	bl	800c934 <prvInsertTimerInActiveList>
					break;
 800cae6:	e009      	b.n	800cafc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d104      	bne.n	800cafc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800caf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caf4:	f000 fb6e 	bl	800d1d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800caf8:	e000      	b.n	800cafc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cafa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cafc:	4b07      	ldr	r3, [pc, #28]	; (800cb1c <prvProcessReceivedCommands+0x164>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	1d39      	adds	r1, r7, #4
 800cb02:	2200      	movs	r2, #0
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7fe fac5 	bl	800b094 <xQueueReceive>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	f47f af57 	bne.w	800c9c0 <prvProcessReceivedCommands+0x8>
	}
}
 800cb12:	bf00      	nop
 800cb14:	bf00      	nop
 800cb16:	3730      	adds	r7, #48	; 0x30
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	20000da0 	.word	0x20000da0

0800cb20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b088      	sub	sp, #32
 800cb24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb26:	e045      	b.n	800cbb4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb28:	4b2c      	ldr	r3, [pc, #176]	; (800cbdc <prvSwitchTimerLists+0xbc>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb32:	4b2a      	ldr	r3, [pc, #168]	; (800cbdc <prvSwitchTimerLists+0xbc>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	3304      	adds	r3, #4
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7fd ffa7 	bl	800aa94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	69db      	ldr	r3, [r3, #28]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d12e      	bne.n	800cbb4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	699b      	ldr	r3, [r3, #24]
 800cb5a:	693a      	ldr	r2, [r7, #16]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cb60:	68ba      	ldr	r2, [r7, #8]
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d90e      	bls.n	800cb86 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	68ba      	ldr	r2, [r7, #8]
 800cb6c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb74:	4b19      	ldr	r3, [pc, #100]	; (800cbdc <prvSwitchTimerLists+0xbc>)
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	3304      	adds	r3, #4
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	4610      	mov	r0, r2
 800cb80:	f7fd ff50 	bl	800aa24 <vListInsert>
 800cb84:	e016      	b.n	800cbb4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb86:	2300      	movs	r3, #0
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	693a      	ldr	r2, [r7, #16]
 800cb8e:	2100      	movs	r1, #0
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	f7ff fd9d 	bl	800c6d0 <xTimerGenericCommand>
 800cb96:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d10a      	bne.n	800cbb4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800cb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba2:	f383 8811 	msr	BASEPRI, r3
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	f3bf 8f4f 	dsb	sy
 800cbae:	603b      	str	r3, [r7, #0]
}
 800cbb0:	bf00      	nop
 800cbb2:	e7fe      	b.n	800cbb2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbb4:	4b09      	ldr	r3, [pc, #36]	; (800cbdc <prvSwitchTimerLists+0xbc>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d1b4      	bne.n	800cb28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cbbe:	4b07      	ldr	r3, [pc, #28]	; (800cbdc <prvSwitchTimerLists+0xbc>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cbc4:	4b06      	ldr	r3, [pc, #24]	; (800cbe0 <prvSwitchTimerLists+0xc0>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a04      	ldr	r2, [pc, #16]	; (800cbdc <prvSwitchTimerLists+0xbc>)
 800cbca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cbcc:	4a04      	ldr	r2, [pc, #16]	; (800cbe0 <prvSwitchTimerLists+0xc0>)
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	6013      	str	r3, [r2, #0]
}
 800cbd2:	bf00      	nop
 800cbd4:	3718      	adds	r7, #24
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	20000d98 	.word	0x20000d98
 800cbe0:	20000d9c 	.word	0x20000d9c

0800cbe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cbea:	f000 f92f 	bl	800ce4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cbee:	4b15      	ldr	r3, [pc, #84]	; (800cc44 <prvCheckForValidListAndQueue+0x60>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d120      	bne.n	800cc38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cbf6:	4814      	ldr	r0, [pc, #80]	; (800cc48 <prvCheckForValidListAndQueue+0x64>)
 800cbf8:	f7fd fec6 	bl	800a988 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cbfc:	4813      	ldr	r0, [pc, #76]	; (800cc4c <prvCheckForValidListAndQueue+0x68>)
 800cbfe:	f7fd fec3 	bl	800a988 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cc02:	4b13      	ldr	r3, [pc, #76]	; (800cc50 <prvCheckForValidListAndQueue+0x6c>)
 800cc04:	4a10      	ldr	r2, [pc, #64]	; (800cc48 <prvCheckForValidListAndQueue+0x64>)
 800cc06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cc08:	4b12      	ldr	r3, [pc, #72]	; (800cc54 <prvCheckForValidListAndQueue+0x70>)
 800cc0a:	4a10      	ldr	r2, [pc, #64]	; (800cc4c <prvCheckForValidListAndQueue+0x68>)
 800cc0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cc0e:	2300      	movs	r3, #0
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	4b11      	ldr	r3, [pc, #68]	; (800cc58 <prvCheckForValidListAndQueue+0x74>)
 800cc14:	4a11      	ldr	r2, [pc, #68]	; (800cc5c <prvCheckForValidListAndQueue+0x78>)
 800cc16:	2110      	movs	r1, #16
 800cc18:	200a      	movs	r0, #10
 800cc1a:	f7fd ffcd 	bl	800abb8 <xQueueGenericCreateStatic>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	4a08      	ldr	r2, [pc, #32]	; (800cc44 <prvCheckForValidListAndQueue+0x60>)
 800cc22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cc24:	4b07      	ldr	r3, [pc, #28]	; (800cc44 <prvCheckForValidListAndQueue+0x60>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d005      	beq.n	800cc38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc2c:	4b05      	ldr	r3, [pc, #20]	; (800cc44 <prvCheckForValidListAndQueue+0x60>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	490b      	ldr	r1, [pc, #44]	; (800cc60 <prvCheckForValidListAndQueue+0x7c>)
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fe fc1e 	bl	800b474 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc38:	f000 f938 	bl	800ceac <vPortExitCritical>
}
 800cc3c:	bf00      	nop
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	20000da0 	.word	0x20000da0
 800cc48:	20000d70 	.word	0x20000d70
 800cc4c:	20000d84 	.word	0x20000d84
 800cc50:	20000d98 	.word	0x20000d98
 800cc54:	20000d9c 	.word	0x20000d9c
 800cc58:	20000e4c 	.word	0x20000e4c
 800cc5c:	20000dac 	.word	0x20000dac
 800cc60:	0800e088 	.word	0x0800e088

0800cc64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc64:	b480      	push	{r7}
 800cc66:	b085      	sub	sp, #20
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	3b04      	subs	r3, #4
 800cc74:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cc7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	3b04      	subs	r3, #4
 800cc82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	f023 0201 	bic.w	r2, r3, #1
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	3b04      	subs	r3, #4
 800cc92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc94:	4a08      	ldr	r2, [pc, #32]	; (800ccb8 <pxPortInitialiseStack+0x54>)
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	3b14      	subs	r3, #20
 800cc9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	3b20      	subs	r3, #32
 800ccaa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ccac:	68fb      	ldr	r3, [r7, #12]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3714      	adds	r7, #20
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bc80      	pop	{r7}
 800ccb6:	4770      	bx	lr
 800ccb8:	0800ccbd 	.word	0x0800ccbd

0800ccbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ccc6:	4b12      	ldr	r3, [pc, #72]	; (800cd10 <prvTaskExitError+0x54>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccce:	d00a      	beq.n	800cce6 <prvTaskExitError+0x2a>
	__asm volatile
 800ccd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd4:	f383 8811 	msr	BASEPRI, r3
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	f3bf 8f4f 	dsb	sy
 800cce0:	60fb      	str	r3, [r7, #12]
}
 800cce2:	bf00      	nop
 800cce4:	e7fe      	b.n	800cce4 <prvTaskExitError+0x28>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	60bb      	str	r3, [r7, #8]
}
 800ccf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ccfa:	bf00      	nop
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d0fc      	beq.n	800ccfc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cd02:	bf00      	nop
 800cd04:	bf00      	nop
 800cd06:	3714      	adds	r7, #20
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bc80      	pop	{r7}
 800cd0c:	4770      	bx	lr
 800cd0e:	bf00      	nop
 800cd10:	2000012c 	.word	0x2000012c
	...

0800cd20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd20:	4b07      	ldr	r3, [pc, #28]	; (800cd40 <pxCurrentTCBConst2>)
 800cd22:	6819      	ldr	r1, [r3, #0]
 800cd24:	6808      	ldr	r0, [r1, #0]
 800cd26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cd2a:	f380 8809 	msr	PSP, r0
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f04f 0000 	mov.w	r0, #0
 800cd36:	f380 8811 	msr	BASEPRI, r0
 800cd3a:	f04e 0e0d 	orr.w	lr, lr, #13
 800cd3e:	4770      	bx	lr

0800cd40 <pxCurrentTCBConst2>:
 800cd40:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd44:	bf00      	nop
 800cd46:	bf00      	nop

0800cd48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800cd48:	4806      	ldr	r0, [pc, #24]	; (800cd64 <prvPortStartFirstTask+0x1c>)
 800cd4a:	6800      	ldr	r0, [r0, #0]
 800cd4c:	6800      	ldr	r0, [r0, #0]
 800cd4e:	f380 8808 	msr	MSP, r0
 800cd52:	b662      	cpsie	i
 800cd54:	b661      	cpsie	f
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	df00      	svc	0
 800cd60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd62:	bf00      	nop
 800cd64:	e000ed08 	.word	0xe000ed08

0800cd68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd6e:	4b32      	ldr	r3, [pc, #200]	; (800ce38 <xPortStartScheduler+0xd0>)
 800cd70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	22ff      	movs	r2, #255	; 0xff
 800cd7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd88:	78fb      	ldrb	r3, [r7, #3]
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cd90:	b2da      	uxtb	r2, r3
 800cd92:	4b2a      	ldr	r3, [pc, #168]	; (800ce3c <xPortStartScheduler+0xd4>)
 800cd94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd96:	4b2a      	ldr	r3, [pc, #168]	; (800ce40 <xPortStartScheduler+0xd8>)
 800cd98:	2207      	movs	r2, #7
 800cd9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd9c:	e009      	b.n	800cdb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cd9e:	4b28      	ldr	r3, [pc, #160]	; (800ce40 <xPortStartScheduler+0xd8>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	3b01      	subs	r3, #1
 800cda4:	4a26      	ldr	r2, [pc, #152]	; (800ce40 <xPortStartScheduler+0xd8>)
 800cda6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cda8:	78fb      	ldrb	r3, [r7, #3]
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	005b      	lsls	r3, r3, #1
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdb2:	78fb      	ldrb	r3, [r7, #3]
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdba:	2b80      	cmp	r3, #128	; 0x80
 800cdbc:	d0ef      	beq.n	800cd9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cdbe:	4b20      	ldr	r3, [pc, #128]	; (800ce40 <xPortStartScheduler+0xd8>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f1c3 0307 	rsb	r3, r3, #7
 800cdc6:	2b04      	cmp	r3, #4
 800cdc8:	d00a      	beq.n	800cde0 <xPortStartScheduler+0x78>
	__asm volatile
 800cdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdce:	f383 8811 	msr	BASEPRI, r3
 800cdd2:	f3bf 8f6f 	isb	sy
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	60bb      	str	r3, [r7, #8]
}
 800cddc:	bf00      	nop
 800cdde:	e7fe      	b.n	800cdde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cde0:	4b17      	ldr	r3, [pc, #92]	; (800ce40 <xPortStartScheduler+0xd8>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	021b      	lsls	r3, r3, #8
 800cde6:	4a16      	ldr	r2, [pc, #88]	; (800ce40 <xPortStartScheduler+0xd8>)
 800cde8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cdea:	4b15      	ldr	r3, [pc, #84]	; (800ce40 <xPortStartScheduler+0xd8>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cdf2:	4a13      	ldr	r2, [pc, #76]	; (800ce40 <xPortStartScheduler+0xd8>)
 800cdf4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cdfe:	4b11      	ldr	r3, [pc, #68]	; (800ce44 <xPortStartScheduler+0xdc>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	4a10      	ldr	r2, [pc, #64]	; (800ce44 <xPortStartScheduler+0xdc>)
 800ce04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce0a:	4b0e      	ldr	r3, [pc, #56]	; (800ce44 <xPortStartScheduler+0xdc>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a0d      	ldr	r2, [pc, #52]	; (800ce44 <xPortStartScheduler+0xdc>)
 800ce10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ce14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce16:	f000 f8b9 	bl	800cf8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce1a:	4b0b      	ldr	r3, [pc, #44]	; (800ce48 <xPortStartScheduler+0xe0>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce20:	f7ff ff92 	bl	800cd48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce24:	f7fe ffaa 	bl	800bd7c <vTaskSwitchContext>
	prvTaskExitError();
 800ce28:	f7ff ff48 	bl	800ccbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	e000e400 	.word	0xe000e400
 800ce3c:	20000e9c 	.word	0x20000e9c
 800ce40:	20000ea0 	.word	0x20000ea0
 800ce44:	e000ed20 	.word	0xe000ed20
 800ce48:	2000012c 	.word	0x2000012c

0800ce4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
	__asm volatile
 800ce52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce56:	f383 8811 	msr	BASEPRI, r3
 800ce5a:	f3bf 8f6f 	isb	sy
 800ce5e:	f3bf 8f4f 	dsb	sy
 800ce62:	607b      	str	r3, [r7, #4]
}
 800ce64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce66:	4b0f      	ldr	r3, [pc, #60]	; (800cea4 <vPortEnterCritical+0x58>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	4a0d      	ldr	r2, [pc, #52]	; (800cea4 <vPortEnterCritical+0x58>)
 800ce6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ce70:	4b0c      	ldr	r3, [pc, #48]	; (800cea4 <vPortEnterCritical+0x58>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d10f      	bne.n	800ce98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce78:	4b0b      	ldr	r3, [pc, #44]	; (800cea8 <vPortEnterCritical+0x5c>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00a      	beq.n	800ce98 <vPortEnterCritical+0x4c>
	__asm volatile
 800ce82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce86:	f383 8811 	msr	BASEPRI, r3
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	603b      	str	r3, [r7, #0]
}
 800ce94:	bf00      	nop
 800ce96:	e7fe      	b.n	800ce96 <vPortEnterCritical+0x4a>
	}
}
 800ce98:	bf00      	nop
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bc80      	pop	{r7}
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	2000012c 	.word	0x2000012c
 800cea8:	e000ed04 	.word	0xe000ed04

0800ceac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ceb2:	4b11      	ldr	r3, [pc, #68]	; (800cef8 <vPortExitCritical+0x4c>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d10a      	bne.n	800ced0 <vPortExitCritical+0x24>
	__asm volatile
 800ceba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebe:	f383 8811 	msr	BASEPRI, r3
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	607b      	str	r3, [r7, #4]
}
 800cecc:	bf00      	nop
 800cece:	e7fe      	b.n	800cece <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ced0:	4b09      	ldr	r3, [pc, #36]	; (800cef8 <vPortExitCritical+0x4c>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	3b01      	subs	r3, #1
 800ced6:	4a08      	ldr	r2, [pc, #32]	; (800cef8 <vPortExitCritical+0x4c>)
 800ced8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ceda:	4b07      	ldr	r3, [pc, #28]	; (800cef8 <vPortExitCritical+0x4c>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d105      	bne.n	800ceee <vPortExitCritical+0x42>
 800cee2:	2300      	movs	r3, #0
 800cee4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	f383 8811 	msr	BASEPRI, r3
}
 800ceec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ceee:	bf00      	nop
 800cef0:	370c      	adds	r7, #12
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bc80      	pop	{r7}
 800cef6:	4770      	bx	lr
 800cef8:	2000012c 	.word	0x2000012c
 800cefc:	00000000 	.word	0x00000000

0800cf00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf00:	f3ef 8009 	mrs	r0, PSP
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	4b0d      	ldr	r3, [pc, #52]	; (800cf40 <pxCurrentTCBConst>)
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cf10:	6010      	str	r0, [r2, #0]
 800cf12:	e92d 4008 	stmdb	sp!, {r3, lr}
 800cf16:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cf1a:	f380 8811 	msr	BASEPRI, r0
 800cf1e:	f7fe ff2d 	bl	800bd7c <vTaskSwitchContext>
 800cf22:	f04f 0000 	mov.w	r0, #0
 800cf26:	f380 8811 	msr	BASEPRI, r0
 800cf2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cf2e:	6819      	ldr	r1, [r3, #0]
 800cf30:	6808      	ldr	r0, [r1, #0]
 800cf32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cf36:	f380 8809 	msr	PSP, r0
 800cf3a:	f3bf 8f6f 	isb	sy
 800cf3e:	4770      	bx	lr

0800cf40 <pxCurrentTCBConst>:
 800cf40:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf44:	bf00      	nop
 800cf46:	bf00      	nop

0800cf48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf52:	f383 8811 	msr	BASEPRI, r3
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	607b      	str	r3, [r7, #4]
}
 800cf60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf62:	f7fe fe4d 	bl	800bc00 <xTaskIncrementTick>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d003      	beq.n	800cf74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf6c:	4b06      	ldr	r3, [pc, #24]	; (800cf88 <SysTick_Handler+0x40>)
 800cf6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	2300      	movs	r3, #0
 800cf76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	f383 8811 	msr	BASEPRI, r3
}
 800cf7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf80:	bf00      	nop
 800cf82:	3708      	adds	r7, #8
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	e000ed04 	.word	0xe000ed04

0800cf8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf90:	4b0a      	ldr	r3, [pc, #40]	; (800cfbc <vPortSetupTimerInterrupt+0x30>)
 800cf92:	2200      	movs	r2, #0
 800cf94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf96:	4b0a      	ldr	r3, [pc, #40]	; (800cfc0 <vPortSetupTimerInterrupt+0x34>)
 800cf98:	2200      	movs	r2, #0
 800cf9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf9c:	4b09      	ldr	r3, [pc, #36]	; (800cfc4 <vPortSetupTimerInterrupt+0x38>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a09      	ldr	r2, [pc, #36]	; (800cfc8 <vPortSetupTimerInterrupt+0x3c>)
 800cfa2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfa6:	099b      	lsrs	r3, r3, #6
 800cfa8:	4a08      	ldr	r2, [pc, #32]	; (800cfcc <vPortSetupTimerInterrupt+0x40>)
 800cfaa:	3b01      	subs	r3, #1
 800cfac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cfae:	4b03      	ldr	r3, [pc, #12]	; (800cfbc <vPortSetupTimerInterrupt+0x30>)
 800cfb0:	2207      	movs	r2, #7
 800cfb2:	601a      	str	r2, [r3, #0]
}
 800cfb4:	bf00      	nop
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bc80      	pop	{r7}
 800cfba:	4770      	bx	lr
 800cfbc:	e000e010 	.word	0xe000e010
 800cfc0:	e000e018 	.word	0xe000e018
 800cfc4:	20000010 	.word	0x20000010
 800cfc8:	10624dd3 	.word	0x10624dd3
 800cfcc:	e000e014 	.word	0xe000e014

0800cfd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cfd6:	f3ef 8305 	mrs	r3, IPSR
 800cfda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2b0f      	cmp	r3, #15
 800cfe0:	d914      	bls.n	800d00c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cfe2:	4a16      	ldr	r2, [pc, #88]	; (800d03c <vPortValidateInterruptPriority+0x6c>)
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cfec:	4b14      	ldr	r3, [pc, #80]	; (800d040 <vPortValidateInterruptPriority+0x70>)
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	7afa      	ldrb	r2, [r7, #11]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d20a      	bcs.n	800d00c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffa:	f383 8811 	msr	BASEPRI, r3
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	f3bf 8f4f 	dsb	sy
 800d006:	607b      	str	r3, [r7, #4]
}
 800d008:	bf00      	nop
 800d00a:	e7fe      	b.n	800d00a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d00c:	4b0d      	ldr	r3, [pc, #52]	; (800d044 <vPortValidateInterruptPriority+0x74>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d014:	4b0c      	ldr	r3, [pc, #48]	; (800d048 <vPortValidateInterruptPriority+0x78>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d90a      	bls.n	800d032 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d020:	f383 8811 	msr	BASEPRI, r3
 800d024:	f3bf 8f6f 	isb	sy
 800d028:	f3bf 8f4f 	dsb	sy
 800d02c:	603b      	str	r3, [r7, #0]
}
 800d02e:	bf00      	nop
 800d030:	e7fe      	b.n	800d030 <vPortValidateInterruptPriority+0x60>
	}
 800d032:	bf00      	nop
 800d034:	3714      	adds	r7, #20
 800d036:	46bd      	mov	sp, r7
 800d038:	bc80      	pop	{r7}
 800d03a:	4770      	bx	lr
 800d03c:	e000e3f0 	.word	0xe000e3f0
 800d040:	20000e9c 	.word	0x20000e9c
 800d044:	e000ed0c 	.word	0xe000ed0c
 800d048:	20000ea0 	.word	0x20000ea0

0800d04c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b08a      	sub	sp, #40	; 0x28
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d054:	2300      	movs	r3, #0
 800d056:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d058:	f7fe fd18 	bl	800ba8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d05c:	4b58      	ldr	r3, [pc, #352]	; (800d1c0 <pvPortMalloc+0x174>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d101      	bne.n	800d068 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d064:	f000 f910 	bl	800d288 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d068:	4b56      	ldr	r3, [pc, #344]	; (800d1c4 <pvPortMalloc+0x178>)
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	4013      	ands	r3, r2
 800d070:	2b00      	cmp	r3, #0
 800d072:	f040 808e 	bne.w	800d192 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d01d      	beq.n	800d0b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d07c:	2208      	movs	r2, #8
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4413      	add	r3, r2
 800d082:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f003 0307 	and.w	r3, r3, #7
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d014      	beq.n	800d0b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f023 0307 	bic.w	r3, r3, #7
 800d094:	3308      	adds	r3, #8
 800d096:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f003 0307 	and.w	r3, r3, #7
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d00a      	beq.n	800d0b8 <pvPortMalloc+0x6c>
	__asm volatile
 800d0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a6:	f383 8811 	msr	BASEPRI, r3
 800d0aa:	f3bf 8f6f 	isb	sy
 800d0ae:	f3bf 8f4f 	dsb	sy
 800d0b2:	617b      	str	r3, [r7, #20]
}
 800d0b4:	bf00      	nop
 800d0b6:	e7fe      	b.n	800d0b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d069      	beq.n	800d192 <pvPortMalloc+0x146>
 800d0be:	4b42      	ldr	r3, [pc, #264]	; (800d1c8 <pvPortMalloc+0x17c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d864      	bhi.n	800d192 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d0c8:	4b40      	ldr	r3, [pc, #256]	; (800d1cc <pvPortMalloc+0x180>)
 800d0ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d0cc:	4b3f      	ldr	r3, [pc, #252]	; (800d1cc <pvPortMalloc+0x180>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0d2:	e004      	b.n	800d0de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d903      	bls.n	800d0f0 <pvPortMalloc+0xa4>
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d1f1      	bne.n	800d0d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d0f0:	4b33      	ldr	r3, [pc, #204]	; (800d1c0 <pvPortMalloc+0x174>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d04b      	beq.n	800d192 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d0fa:	6a3b      	ldr	r3, [r7, #32]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2208      	movs	r2, #8
 800d100:	4413      	add	r3, r2
 800d102:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	6a3b      	ldr	r3, [r7, #32]
 800d10a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10e:	685a      	ldr	r2, [r3, #4]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	1ad2      	subs	r2, r2, r3
 800d114:	2308      	movs	r3, #8
 800d116:	005b      	lsls	r3, r3, #1
 800d118:	429a      	cmp	r2, r3
 800d11a:	d91f      	bls.n	800d15c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	4413      	add	r3, r2
 800d122:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	f003 0307 	and.w	r3, r3, #7
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00a      	beq.n	800d144 <pvPortMalloc+0xf8>
	__asm volatile
 800d12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	613b      	str	r3, [r7, #16]
}
 800d140:	bf00      	nop
 800d142:	e7fe      	b.n	800d142 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d146:	685a      	ldr	r2, [r3, #4]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	1ad2      	subs	r2, r2, r3
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d156:	69b8      	ldr	r0, [r7, #24]
 800d158:	f000 f8f8 	bl	800d34c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d15c:	4b1a      	ldr	r3, [pc, #104]	; (800d1c8 <pvPortMalloc+0x17c>)
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	1ad3      	subs	r3, r2, r3
 800d166:	4a18      	ldr	r2, [pc, #96]	; (800d1c8 <pvPortMalloc+0x17c>)
 800d168:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d16a:	4b17      	ldr	r3, [pc, #92]	; (800d1c8 <pvPortMalloc+0x17c>)
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	4b18      	ldr	r3, [pc, #96]	; (800d1d0 <pvPortMalloc+0x184>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	429a      	cmp	r2, r3
 800d174:	d203      	bcs.n	800d17e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d176:	4b14      	ldr	r3, [pc, #80]	; (800d1c8 <pvPortMalloc+0x17c>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4a15      	ldr	r2, [pc, #84]	; (800d1d0 <pvPortMalloc+0x184>)
 800d17c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d180:	685a      	ldr	r2, [r3, #4]
 800d182:	4b10      	ldr	r3, [pc, #64]	; (800d1c4 <pvPortMalloc+0x178>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	431a      	orrs	r2, r3
 800d188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18e:	2200      	movs	r2, #0
 800d190:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d192:	f7fe fc89 	bl	800baa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	f003 0307 	and.w	r3, r3, #7
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00a      	beq.n	800d1b6 <pvPortMalloc+0x16a>
	__asm volatile
 800d1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a4:	f383 8811 	msr	BASEPRI, r3
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	60fb      	str	r3, [r7, #12]
}
 800d1b2:	bf00      	nop
 800d1b4:	e7fe      	b.n	800d1b4 <pvPortMalloc+0x168>
	return pvReturn;
 800d1b6:	69fb      	ldr	r3, [r7, #28]
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3728      	adds	r7, #40	; 0x28
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	20002248 	.word	0x20002248
 800d1c4:	20002254 	.word	0x20002254
 800d1c8:	2000224c 	.word	0x2000224c
 800d1cc:	20002240 	.word	0x20002240
 800d1d0:	20002250 	.word	0x20002250

0800d1d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b086      	sub	sp, #24
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d048      	beq.n	800d278 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d1e6:	2308      	movs	r3, #8
 800d1e8:	425b      	negs	r3, r3
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	685a      	ldr	r2, [r3, #4]
 800d1f8:	4b21      	ldr	r3, [pc, #132]	; (800d280 <vPortFree+0xac>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4013      	ands	r3, r2
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d10a      	bne.n	800d218 <vPortFree+0x44>
	__asm volatile
 800d202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d206:	f383 8811 	msr	BASEPRI, r3
 800d20a:	f3bf 8f6f 	isb	sy
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	60fb      	str	r3, [r7, #12]
}
 800d214:	bf00      	nop
 800d216:	e7fe      	b.n	800d216 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d00a      	beq.n	800d236 <vPortFree+0x62>
	__asm volatile
 800d220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d224:	f383 8811 	msr	BASEPRI, r3
 800d228:	f3bf 8f6f 	isb	sy
 800d22c:	f3bf 8f4f 	dsb	sy
 800d230:	60bb      	str	r3, [r7, #8]
}
 800d232:	bf00      	nop
 800d234:	e7fe      	b.n	800d234 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	685a      	ldr	r2, [r3, #4]
 800d23a:	4b11      	ldr	r3, [pc, #68]	; (800d280 <vPortFree+0xac>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	4013      	ands	r3, r2
 800d240:	2b00      	cmp	r3, #0
 800d242:	d019      	beq.n	800d278 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d115      	bne.n	800d278 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	685a      	ldr	r2, [r3, #4]
 800d250:	4b0b      	ldr	r3, [pc, #44]	; (800d280 <vPortFree+0xac>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	43db      	mvns	r3, r3
 800d256:	401a      	ands	r2, r3
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d25c:	f7fe fc16 	bl	800ba8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	685a      	ldr	r2, [r3, #4]
 800d264:	4b07      	ldr	r3, [pc, #28]	; (800d284 <vPortFree+0xb0>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4413      	add	r3, r2
 800d26a:	4a06      	ldr	r2, [pc, #24]	; (800d284 <vPortFree+0xb0>)
 800d26c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d26e:	6938      	ldr	r0, [r7, #16]
 800d270:	f000 f86c 	bl	800d34c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d274:	f7fe fc18 	bl	800baa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d278:	bf00      	nop
 800d27a:	3718      	adds	r7, #24
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	20002254 	.word	0x20002254
 800d284:	2000224c 	.word	0x2000224c

0800d288 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d288:	b480      	push	{r7}
 800d28a:	b085      	sub	sp, #20
 800d28c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d28e:	f241 339c 	movw	r3, #5020	; 0x139c
 800d292:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d294:	4b27      	ldr	r3, [pc, #156]	; (800d334 <prvHeapInit+0xac>)
 800d296:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f003 0307 	and.w	r3, r3, #7
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00c      	beq.n	800d2bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	3307      	adds	r3, #7
 800d2a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f023 0307 	bic.w	r3, r3, #7
 800d2ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d2b0:	68ba      	ldr	r2, [r7, #8]
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	1ad3      	subs	r3, r2, r3
 800d2b6:	4a1f      	ldr	r2, [pc, #124]	; (800d334 <prvHeapInit+0xac>)
 800d2b8:	4413      	add	r3, r2
 800d2ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d2c0:	4a1d      	ldr	r2, [pc, #116]	; (800d338 <prvHeapInit+0xb0>)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d2c6:	4b1c      	ldr	r3, [pc, #112]	; (800d338 <prvHeapInit+0xb0>)
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d2d4:	2208      	movs	r2, #8
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	1a9b      	subs	r3, r3, r2
 800d2da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f023 0307 	bic.w	r3, r3, #7
 800d2e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	4a15      	ldr	r2, [pc, #84]	; (800d33c <prvHeapInit+0xb4>)
 800d2e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d2ea:	4b14      	ldr	r3, [pc, #80]	; (800d33c <prvHeapInit+0xb4>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d2f2:	4b12      	ldr	r3, [pc, #72]	; (800d33c <prvHeapInit+0xb4>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	1ad2      	subs	r2, r2, r3
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d308:	4b0c      	ldr	r3, [pc, #48]	; (800d33c <prvHeapInit+0xb4>)
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	4a0a      	ldr	r2, [pc, #40]	; (800d340 <prvHeapInit+0xb8>)
 800d316:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	4a09      	ldr	r2, [pc, #36]	; (800d344 <prvHeapInit+0xbc>)
 800d31e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d320:	4b09      	ldr	r3, [pc, #36]	; (800d348 <prvHeapInit+0xc0>)
 800d322:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d326:	601a      	str	r2, [r3, #0]
}
 800d328:	bf00      	nop
 800d32a:	3714      	adds	r7, #20
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bc80      	pop	{r7}
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop
 800d334:	20000ea4 	.word	0x20000ea4
 800d338:	20002240 	.word	0x20002240
 800d33c:	20002248 	.word	0x20002248
 800d340:	20002250 	.word	0x20002250
 800d344:	2000224c 	.word	0x2000224c
 800d348:	20002254 	.word	0x20002254

0800d34c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d34c:	b480      	push	{r7}
 800d34e:	b085      	sub	sp, #20
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d354:	4b27      	ldr	r3, [pc, #156]	; (800d3f4 <prvInsertBlockIntoFreeList+0xa8>)
 800d356:	60fb      	str	r3, [r7, #12]
 800d358:	e002      	b.n	800d360 <prvInsertBlockIntoFreeList+0x14>
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	60fb      	str	r3, [r7, #12]
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	687a      	ldr	r2, [r7, #4]
 800d366:	429a      	cmp	r2, r3
 800d368:	d8f7      	bhi.n	800d35a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	68ba      	ldr	r2, [r7, #8]
 800d374:	4413      	add	r3, r2
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d108      	bne.n	800d38e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	685a      	ldr	r2, [r3, #4]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	441a      	add	r2, r3
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	68ba      	ldr	r2, [r7, #8]
 800d398:	441a      	add	r2, r3
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d118      	bne.n	800d3d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	4b14      	ldr	r3, [pc, #80]	; (800d3f8 <prvInsertBlockIntoFreeList+0xac>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d00d      	beq.n	800d3ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	685a      	ldr	r2, [r3, #4]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	441a      	add	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	601a      	str	r2, [r3, #0]
 800d3c8:	e008      	b.n	800d3dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d3ca:	4b0b      	ldr	r3, [pc, #44]	; (800d3f8 <prvInsertBlockIntoFreeList+0xac>)
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	601a      	str	r2, [r3, #0]
 800d3d2:	e003      	b.n	800d3dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681a      	ldr	r2, [r3, #0]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d3dc:	68fa      	ldr	r2, [r7, #12]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d002      	beq.n	800d3ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3ea:	bf00      	nop
 800d3ec:	3714      	adds	r7, #20
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bc80      	pop	{r7}
 800d3f2:	4770      	bx	lr
 800d3f4:	20002240 	.word	0x20002240
 800d3f8:	20002248 	.word	0x20002248

0800d3fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d400:	2200      	movs	r2, #0
 800d402:	4912      	ldr	r1, [pc, #72]	; (800d44c <MX_USB_DEVICE_Init+0x50>)
 800d404:	4812      	ldr	r0, [pc, #72]	; (800d450 <MX_USB_DEVICE_Init+0x54>)
 800d406:	f7fc f82e 	bl	8009466 <USBD_Init>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d410:	f7f3 fc96 	bl	8000d40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d414:	490f      	ldr	r1, [pc, #60]	; (800d454 <MX_USB_DEVICE_Init+0x58>)
 800d416:	480e      	ldr	r0, [pc, #56]	; (800d450 <MX_USB_DEVICE_Init+0x54>)
 800d418:	f7fc f850 	bl	80094bc <USBD_RegisterClass>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d001      	beq.n	800d426 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d422:	f7f3 fc8d 	bl	8000d40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d426:	490c      	ldr	r1, [pc, #48]	; (800d458 <MX_USB_DEVICE_Init+0x5c>)
 800d428:	4809      	ldr	r0, [pc, #36]	; (800d450 <MX_USB_DEVICE_Init+0x54>)
 800d42a:	f7fb ff81 	bl	8009330 <USBD_CDC_RegisterInterface>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d434:	f7f3 fc84 	bl	8000d40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d438:	4805      	ldr	r0, [pc, #20]	; (800d450 <MX_USB_DEVICE_Init+0x54>)
 800d43a:	f7fc f858 	bl	80094ee <USBD_Start>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d001      	beq.n	800d448 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d444:	f7f3 fc7c 	bl	8000d40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d448:	bf00      	nop
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	20000140 	.word	0x20000140
 800d450:	200026a0 	.word	0x200026a0
 800d454:	20000028 	.word	0x20000028
 800d458:	20000130 	.word	0x20000130

0800d45c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d460:	2200      	movs	r2, #0
 800d462:	4905      	ldr	r1, [pc, #20]	; (800d478 <CDC_Init_FS+0x1c>)
 800d464:	4805      	ldr	r0, [pc, #20]	; (800d47c <CDC_Init_FS+0x20>)
 800d466:	f7fb ff79 	bl	800935c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d46a:	4905      	ldr	r1, [pc, #20]	; (800d480 <CDC_Init_FS+0x24>)
 800d46c:	4803      	ldr	r0, [pc, #12]	; (800d47c <CDC_Init_FS+0x20>)
 800d46e:	f7fb ff8e 	bl	800938e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d472:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d474:	4618      	mov	r0, r3
 800d476:	bd80      	pop	{r7, pc}
 800d478:	20002d4c 	.word	0x20002d4c
 800d47c:	200026a0 	.word	0x200026a0
 800d480:	20002964 	.word	0x20002964

0800d484 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d484:	b480      	push	{r7}
 800d486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d488:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bc80      	pop	{r7}
 800d490:	4770      	bx	lr
	...

0800d494 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	4603      	mov	r3, r0
 800d49c:	6039      	str	r1, [r7, #0]
 800d49e:	71fb      	strb	r3, [r7, #7]
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d4a4:	79fb      	ldrb	r3, [r7, #7]
 800d4a6:	2b23      	cmp	r3, #35	; 0x23
 800d4a8:	d84a      	bhi.n	800d540 <CDC_Control_FS+0xac>
 800d4aa:	a201      	add	r2, pc, #4	; (adr r2, 800d4b0 <CDC_Control_FS+0x1c>)
 800d4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b0:	0800d541 	.word	0x0800d541
 800d4b4:	0800d541 	.word	0x0800d541
 800d4b8:	0800d541 	.word	0x0800d541
 800d4bc:	0800d541 	.word	0x0800d541
 800d4c0:	0800d541 	.word	0x0800d541
 800d4c4:	0800d541 	.word	0x0800d541
 800d4c8:	0800d541 	.word	0x0800d541
 800d4cc:	0800d541 	.word	0x0800d541
 800d4d0:	0800d541 	.word	0x0800d541
 800d4d4:	0800d541 	.word	0x0800d541
 800d4d8:	0800d541 	.word	0x0800d541
 800d4dc:	0800d541 	.word	0x0800d541
 800d4e0:	0800d541 	.word	0x0800d541
 800d4e4:	0800d541 	.word	0x0800d541
 800d4e8:	0800d541 	.word	0x0800d541
 800d4ec:	0800d541 	.word	0x0800d541
 800d4f0:	0800d541 	.word	0x0800d541
 800d4f4:	0800d541 	.word	0x0800d541
 800d4f8:	0800d541 	.word	0x0800d541
 800d4fc:	0800d541 	.word	0x0800d541
 800d500:	0800d541 	.word	0x0800d541
 800d504:	0800d541 	.word	0x0800d541
 800d508:	0800d541 	.word	0x0800d541
 800d50c:	0800d541 	.word	0x0800d541
 800d510:	0800d541 	.word	0x0800d541
 800d514:	0800d541 	.word	0x0800d541
 800d518:	0800d541 	.word	0x0800d541
 800d51c:	0800d541 	.word	0x0800d541
 800d520:	0800d541 	.word	0x0800d541
 800d524:	0800d541 	.word	0x0800d541
 800d528:	0800d541 	.word	0x0800d541
 800d52c:	0800d541 	.word	0x0800d541
 800d530:	0800d541 	.word	0x0800d541
 800d534:	0800d541 	.word	0x0800d541
 800d538:	0800d541 	.word	0x0800d541
 800d53c:	0800d541 	.word	0x0800d541
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d540:	bf00      	nop
  }

  return (USBD_OK);
 800d542:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d544:	4618      	mov	r0, r3
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	bc80      	pop	{r7}
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop

0800d550 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800d55a:	2300      	movs	r3, #0
 800d55c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800d55e:	2300      	movs	r3, #0
 800d560:	60fb      	str	r3, [r7, #12]
 800d562:	e00c      	b.n	800d57e <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800d564:	4b14      	ldr	r3, [pc, #80]	; (800d5b8 <CDC_Receive_FS+0x68>)
 800d566:	6818      	ldr	r0, [r3, #0]
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	18d1      	adds	r1, r2, r3
 800d56e:	f107 0208 	add.w	r2, r7, #8
 800d572:	2300      	movs	r3, #0
 800d574:	f7fd fcf6 	bl	800af64 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	3301      	adds	r3, #1
 800d57c:	60fb      	str	r3, [r7, #12]
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	68fa      	ldr	r2, [r7, #12]
 800d584:	429a      	cmp	r2, r3
 800d586:	d3ed      	bcc.n	800d564 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d588:	6879      	ldr	r1, [r7, #4]
 800d58a:	480c      	ldr	r0, [pc, #48]	; (800d5bc <CDC_Receive_FS+0x6c>)
 800d58c:	f7fb feff 	bl	800938e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d590:	480a      	ldr	r0, [pc, #40]	; (800d5bc <CDC_Receive_FS+0x6c>)
 800d592:	f7fb ff3e 	bl	8009412 <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d007      	beq.n	800d5ac <CDC_Receive_FS+0x5c>
 800d59c:	4b08      	ldr	r3, [pc, #32]	; (800d5c0 <CDC_Receive_FS+0x70>)
 800d59e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5a2:	601a      	str	r2, [r3, #0]
 800d5a4:	f3bf 8f4f 	dsb	sy
 800d5a8:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800d5ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3710      	adds	r7, #16
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	20002490 	.word	0x20002490
 800d5bc:	200026a0 	.word	0x200026a0
 800d5c0:	e000ed04 	.word	0xe000ed04

0800d5c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d5d4:	4b0d      	ldr	r3, [pc, #52]	; (800d60c <CDC_Transmit_FS+0x48>)
 800d5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d001      	beq.n	800d5ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e00b      	b.n	800d602 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d5ea:	887b      	ldrh	r3, [r7, #2]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	6879      	ldr	r1, [r7, #4]
 800d5f0:	4806      	ldr	r0, [pc, #24]	; (800d60c <CDC_Transmit_FS+0x48>)
 800d5f2:	f7fb feb3 	bl	800935c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d5f6:	4805      	ldr	r0, [pc, #20]	; (800d60c <CDC_Transmit_FS+0x48>)
 800d5f8:	f7fb fedc 	bl	80093b4 <USBD_CDC_TransmitPacket>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d600:	7bfb      	ldrb	r3, [r7, #15]
}
 800d602:	4618      	mov	r0, r3
 800d604:	3710      	adds	r7, #16
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	200026a0 	.word	0x200026a0

0800d610 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	4603      	mov	r3, r0
 800d618:	6039      	str	r1, [r7, #0]
 800d61a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	2212      	movs	r2, #18
 800d620:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d622:	4b03      	ldr	r3, [pc, #12]	; (800d630 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d624:	4618      	mov	r0, r3
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	bc80      	pop	{r7}
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop
 800d630:	2000015c 	.word	0x2000015c

0800d634 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d634:	b480      	push	{r7}
 800d636:	b083      	sub	sp, #12
 800d638:	af00      	add	r7, sp, #0
 800d63a:	4603      	mov	r3, r0
 800d63c:	6039      	str	r1, [r7, #0]
 800d63e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	2204      	movs	r2, #4
 800d644:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d646:	4b03      	ldr	r3, [pc, #12]	; (800d654 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d648:	4618      	mov	r0, r3
 800d64a:	370c      	adds	r7, #12
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bc80      	pop	{r7}
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	20000170 	.word	0x20000170

0800d658 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	4603      	mov	r3, r0
 800d660:	6039      	str	r1, [r7, #0]
 800d662:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d664:	79fb      	ldrb	r3, [r7, #7]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d105      	bne.n	800d676 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d66a:	683a      	ldr	r2, [r7, #0]
 800d66c:	4907      	ldr	r1, [pc, #28]	; (800d68c <USBD_FS_ProductStrDescriptor+0x34>)
 800d66e:	4808      	ldr	r0, [pc, #32]	; (800d690 <USBD_FS_ProductStrDescriptor+0x38>)
 800d670:	f7fc feb6 	bl	800a3e0 <USBD_GetString>
 800d674:	e004      	b.n	800d680 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	4904      	ldr	r1, [pc, #16]	; (800d68c <USBD_FS_ProductStrDescriptor+0x34>)
 800d67a:	4805      	ldr	r0, [pc, #20]	; (800d690 <USBD_FS_ProductStrDescriptor+0x38>)
 800d67c:	f7fc feb0 	bl	800a3e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d680:	4b02      	ldr	r3, [pc, #8]	; (800d68c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d682:	4618      	mov	r0, r3
 800d684:	3708      	adds	r7, #8
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	20003134 	.word	0x20003134
 800d690:	0800e090 	.word	0x0800e090

0800d694 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af00      	add	r7, sp, #0
 800d69a:	4603      	mov	r3, r0
 800d69c:	6039      	str	r1, [r7, #0]
 800d69e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d6a0:	683a      	ldr	r2, [r7, #0]
 800d6a2:	4904      	ldr	r1, [pc, #16]	; (800d6b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d6a4:	4804      	ldr	r0, [pc, #16]	; (800d6b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d6a6:	f7fc fe9b 	bl	800a3e0 <USBD_GetString>
  return USBD_StrDesc;
 800d6aa:	4b02      	ldr	r3, [pc, #8]	; (800d6b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	20003134 	.word	0x20003134
 800d6b8:	0800e09c 	.word	0x0800e09c

0800d6bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	6039      	str	r1, [r7, #0]
 800d6c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	221a      	movs	r2, #26
 800d6cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d6ce:	f000 f843 	bl	800d758 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d6d2:	4b02      	ldr	r3, [pc, #8]	; (800d6dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	20000174 	.word	0x20000174

0800d6e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	6039      	str	r1, [r7, #0]
 800d6ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d6ec:	79fb      	ldrb	r3, [r7, #7]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d105      	bne.n	800d6fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d6f2:	683a      	ldr	r2, [r7, #0]
 800d6f4:	4907      	ldr	r1, [pc, #28]	; (800d714 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d6f6:	4808      	ldr	r0, [pc, #32]	; (800d718 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d6f8:	f7fc fe72 	bl	800a3e0 <USBD_GetString>
 800d6fc:	e004      	b.n	800d708 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d6fe:	683a      	ldr	r2, [r7, #0]
 800d700:	4904      	ldr	r1, [pc, #16]	; (800d714 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d702:	4805      	ldr	r0, [pc, #20]	; (800d718 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d704:	f7fc fe6c 	bl	800a3e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d708:	4b02      	ldr	r3, [pc, #8]	; (800d714 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3708      	adds	r7, #8
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	20003134 	.word	0x20003134
 800d718:	0800e0b0 	.word	0x0800e0b0

0800d71c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	4603      	mov	r3, r0
 800d724:	6039      	str	r1, [r7, #0]
 800d726:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d728:	79fb      	ldrb	r3, [r7, #7]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d105      	bne.n	800d73a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d72e:	683a      	ldr	r2, [r7, #0]
 800d730:	4907      	ldr	r1, [pc, #28]	; (800d750 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d732:	4808      	ldr	r0, [pc, #32]	; (800d754 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d734:	f7fc fe54 	bl	800a3e0 <USBD_GetString>
 800d738:	e004      	b.n	800d744 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d73a:	683a      	ldr	r2, [r7, #0]
 800d73c:	4904      	ldr	r1, [pc, #16]	; (800d750 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d73e:	4805      	ldr	r0, [pc, #20]	; (800d754 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d740:	f7fc fe4e 	bl	800a3e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d744:	4b02      	ldr	r3, [pc, #8]	; (800d750 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d746:	4618      	mov	r0, r3
 800d748:	3708      	adds	r7, #8
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	20003134 	.word	0x20003134
 800d754:	0800e0bc 	.word	0x0800e0bc

0800d758 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d75e:	4b0f      	ldr	r3, [pc, #60]	; (800d79c <Get_SerialNum+0x44>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d764:	4b0e      	ldr	r3, [pc, #56]	; (800d7a0 <Get_SerialNum+0x48>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d76a:	4b0e      	ldr	r3, [pc, #56]	; (800d7a4 <Get_SerialNum+0x4c>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4413      	add	r3, r2
 800d776:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d009      	beq.n	800d792 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d77e:	2208      	movs	r2, #8
 800d780:	4909      	ldr	r1, [pc, #36]	; (800d7a8 <Get_SerialNum+0x50>)
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f000 f814 	bl	800d7b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d788:	2204      	movs	r2, #4
 800d78a:	4908      	ldr	r1, [pc, #32]	; (800d7ac <Get_SerialNum+0x54>)
 800d78c:	68b8      	ldr	r0, [r7, #8]
 800d78e:	f000 f80f 	bl	800d7b0 <IntToUnicode>
  }
}
 800d792:	bf00      	nop
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	1ffff7e8 	.word	0x1ffff7e8
 800d7a0:	1ffff7ec 	.word	0x1ffff7ec
 800d7a4:	1ffff7f0 	.word	0x1ffff7f0
 800d7a8:	20000176 	.word	0x20000176
 800d7ac:	20000186 	.word	0x20000186

0800d7b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b087      	sub	sp, #28
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	75fb      	strb	r3, [r7, #23]
 800d7c6:	e027      	b.n	800d818 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	0f1b      	lsrs	r3, r3, #28
 800d7cc:	2b09      	cmp	r3, #9
 800d7ce:	d80b      	bhi.n	800d7e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	0f1b      	lsrs	r3, r3, #28
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	7dfb      	ldrb	r3, [r7, #23]
 800d7d8:	005b      	lsls	r3, r3, #1
 800d7da:	4619      	mov	r1, r3
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	440b      	add	r3, r1
 800d7e0:	3230      	adds	r2, #48	; 0x30
 800d7e2:	b2d2      	uxtb	r2, r2
 800d7e4:	701a      	strb	r2, [r3, #0]
 800d7e6:	e00a      	b.n	800d7fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	0f1b      	lsrs	r3, r3, #28
 800d7ec:	b2da      	uxtb	r2, r3
 800d7ee:	7dfb      	ldrb	r3, [r7, #23]
 800d7f0:	005b      	lsls	r3, r3, #1
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	440b      	add	r3, r1
 800d7f8:	3237      	adds	r2, #55	; 0x37
 800d7fa:	b2d2      	uxtb	r2, r2
 800d7fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	011b      	lsls	r3, r3, #4
 800d802:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d804:	7dfb      	ldrb	r3, [r7, #23]
 800d806:	005b      	lsls	r3, r3, #1
 800d808:	3301      	adds	r3, #1
 800d80a:	68ba      	ldr	r2, [r7, #8]
 800d80c:	4413      	add	r3, r2
 800d80e:	2200      	movs	r2, #0
 800d810:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d812:	7dfb      	ldrb	r3, [r7, #23]
 800d814:	3301      	adds	r3, #1
 800d816:	75fb      	strb	r3, [r7, #23]
 800d818:	7dfa      	ldrb	r2, [r7, #23]
 800d81a:	79fb      	ldrb	r3, [r7, #7]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d3d3      	bcc.n	800d7c8 <IntToUnicode+0x18>
  }
}
 800d820:	bf00      	nop
 800d822:	bf00      	nop
 800d824:	371c      	adds	r7, #28
 800d826:	46bd      	mov	sp, r7
 800d828:	bc80      	pop	{r7}
 800d82a:	4770      	bx	lr

0800d82c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a0d      	ldr	r2, [pc, #52]	; (800d870 <HAL_PCD_MspInit+0x44>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d113      	bne.n	800d866 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d83e:	4b0d      	ldr	r3, [pc, #52]	; (800d874 <HAL_PCD_MspInit+0x48>)
 800d840:	69db      	ldr	r3, [r3, #28]
 800d842:	4a0c      	ldr	r2, [pc, #48]	; (800d874 <HAL_PCD_MspInit+0x48>)
 800d844:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d848:	61d3      	str	r3, [r2, #28]
 800d84a:	4b0a      	ldr	r3, [pc, #40]	; (800d874 <HAL_PCD_MspInit+0x48>)
 800d84c:	69db      	ldr	r3, [r3, #28]
 800d84e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d852:	60fb      	str	r3, [r7, #12]
 800d854:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800d856:	2200      	movs	r2, #0
 800d858:	2105      	movs	r1, #5
 800d85a:	2014      	movs	r0, #20
 800d85c:	f7f5 fb05 	bl	8002e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d860:	2014      	movs	r0, #20
 800d862:	f7f5 fb1e 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d866:	bf00      	nop
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
 800d86e:	bf00      	nop
 800d870:	40005c00 	.word	0x40005c00
 800d874:	40021000 	.word	0x40021000

0800d878 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d88c:	4619      	mov	r1, r3
 800d88e:	4610      	mov	r0, r2
 800d890:	f7fb fe75 	bl	800957e <USBD_LL_SetupStage>
}
 800d894:	bf00      	nop
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d8ae:	78fa      	ldrb	r2, [r7, #3]
 800d8b0:	6879      	ldr	r1, [r7, #4]
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	4413      	add	r3, r2
 800d8b8:	00db      	lsls	r3, r3, #3
 800d8ba:	440b      	add	r3, r1
 800d8bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	78fb      	ldrb	r3, [r7, #3]
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	f7fb fea7 	bl	8009618 <USBD_LL_DataOutStage>
}
 800d8ca:	bf00      	nop
 800d8cc:	3708      	adds	r7, #8
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b082      	sub	sp, #8
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
 800d8da:	460b      	mov	r3, r1
 800d8dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d8e4:	78fa      	ldrb	r2, [r7, #3]
 800d8e6:	6879      	ldr	r1, [r7, #4]
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	009b      	lsls	r3, r3, #2
 800d8ec:	4413      	add	r3, r2
 800d8ee:	00db      	lsls	r3, r3, #3
 800d8f0:	440b      	add	r3, r1
 800d8f2:	333c      	adds	r3, #60	; 0x3c
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	78fb      	ldrb	r3, [r7, #3]
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	f7fb fefe 	bl	80096fa <USBD_LL_DataInStage>
}
 800d8fe:	bf00      	nop
 800d900:	3708      	adds	r7, #8
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d906:	b580      	push	{r7, lr}
 800d908:	b082      	sub	sp, #8
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d914:	4618      	mov	r0, r3
 800d916:	f7fc f80e 	bl	8009936 <USBD_LL_SOF>
}
 800d91a:	bf00      	nop
 800d91c:	3708      	adds	r7, #8
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}

0800d922 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d922:	b580      	push	{r7, lr}
 800d924:	b084      	sub	sp, #16
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d92a:	2301      	movs	r3, #1
 800d92c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	2b02      	cmp	r3, #2
 800d934:	d001      	beq.n	800d93a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d936:	f7f3 fa03 	bl	8000d40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d940:	7bfa      	ldrb	r2, [r7, #15]
 800d942:	4611      	mov	r1, r2
 800d944:	4618      	mov	r0, r3
 800d946:	f7fb ffbe 	bl	80098c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d950:	4618      	mov	r0, r3
 800d952:	f7fb ff77 	bl	8009844 <USBD_LL_Reset>
}
 800d956:	bf00      	nop
 800d958:	3710      	adds	r7, #16
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
	...

0800d960 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fb ffb8 	bl	80098e4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	699b      	ldr	r3, [r3, #24]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d005      	beq.n	800d988 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d97c:	4b04      	ldr	r3, [pc, #16]	; (800d990 <HAL_PCD_SuspendCallback+0x30>)
 800d97e:	691b      	ldr	r3, [r3, #16]
 800d980:	4a03      	ldr	r2, [pc, #12]	; (800d990 <HAL_PCD_SuspendCallback+0x30>)
 800d982:	f043 0306 	orr.w	r3, r3, #6
 800d986:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d988:	bf00      	nop
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	e000ed00 	.word	0xe000ed00

0800d994 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fb ffb2 	bl	800990c <USBD_LL_Resume>
}
 800d9a8:	bf00      	nop
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d9b8:	4a28      	ldr	r2, [pc, #160]	; (800da5c <USBD_LL_Init+0xac>)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a26      	ldr	r2, [pc, #152]	; (800da5c <USBD_LL_Init+0xac>)
 800d9c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d9c8:	4b24      	ldr	r3, [pc, #144]	; (800da5c <USBD_LL_Init+0xac>)
 800d9ca:	4a25      	ldr	r2, [pc, #148]	; (800da60 <USBD_LL_Init+0xb0>)
 800d9cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d9ce:	4b23      	ldr	r3, [pc, #140]	; (800da5c <USBD_LL_Init+0xac>)
 800d9d0:	2208      	movs	r2, #8
 800d9d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d9d4:	4b21      	ldr	r3, [pc, #132]	; (800da5c <USBD_LL_Init+0xac>)
 800d9d6:	2202      	movs	r2, #2
 800d9d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d9da:	4b20      	ldr	r3, [pc, #128]	; (800da5c <USBD_LL_Init+0xac>)
 800d9dc:	2200      	movs	r2, #0
 800d9de:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d9e0:	4b1e      	ldr	r3, [pc, #120]	; (800da5c <USBD_LL_Init+0xac>)
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d9e6:	4b1d      	ldr	r3, [pc, #116]	; (800da5c <USBD_LL_Init+0xac>)
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d9ec:	481b      	ldr	r0, [pc, #108]	; (800da5c <USBD_LL_Init+0xac>)
 800d9ee:	f7f5 fd05 	bl	80033fc <HAL_PCD_Init>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d001      	beq.n	800d9fc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d9f8:	f7f3 f9a2 	bl	8000d40 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da02:	2318      	movs	r3, #24
 800da04:	2200      	movs	r2, #0
 800da06:	2100      	movs	r1, #0
 800da08:	f7f7 f97b 	bl	8004d02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da12:	2358      	movs	r3, #88	; 0x58
 800da14:	2200      	movs	r2, #0
 800da16:	2180      	movs	r1, #128	; 0x80
 800da18:	f7f7 f973 	bl	8004d02 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da22:	23c0      	movs	r3, #192	; 0xc0
 800da24:	2200      	movs	r2, #0
 800da26:	2181      	movs	r1, #129	; 0x81
 800da28:	f7f7 f96b 	bl	8004d02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da32:	f44f 7388 	mov.w	r3, #272	; 0x110
 800da36:	2200      	movs	r2, #0
 800da38:	2101      	movs	r1, #1
 800da3a:	f7f7 f962 	bl	8004d02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da48:	2200      	movs	r2, #0
 800da4a:	2182      	movs	r1, #130	; 0x82
 800da4c:	f7f7 f959 	bl	8004d02 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	20003334 	.word	0x20003334
 800da60:	40005c00 	.word	0x40005c00

0800da64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da6c:	2300      	movs	r3, #0
 800da6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da70:	2300      	movs	r3, #0
 800da72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7f5 fdc9 	bl	8003612 <HAL_PCD_Start>
 800da80:	4603      	mov	r3, r0
 800da82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da84:	7bfb      	ldrb	r3, [r7, #15]
 800da86:	4618      	mov	r0, r3
 800da88:	f000 f94e 	bl	800dd28 <USBD_Get_USB_Status>
 800da8c:	4603      	mov	r3, r0
 800da8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da90:	7bbb      	ldrb	r3, [r7, #14]
}
 800da92:	4618      	mov	r0, r3
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b084      	sub	sp, #16
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
 800daa2:	4608      	mov	r0, r1
 800daa4:	4611      	mov	r1, r2
 800daa6:	461a      	mov	r2, r3
 800daa8:	4603      	mov	r3, r0
 800daaa:	70fb      	strb	r3, [r7, #3]
 800daac:	460b      	mov	r3, r1
 800daae:	70bb      	strb	r3, [r7, #2]
 800dab0:	4613      	mov	r3, r2
 800dab2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dab4:	2300      	movs	r3, #0
 800dab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dab8:	2300      	movs	r3, #0
 800daba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dac2:	78bb      	ldrb	r3, [r7, #2]
 800dac4:	883a      	ldrh	r2, [r7, #0]
 800dac6:	78f9      	ldrb	r1, [r7, #3]
 800dac8:	f7f5 ff43 	bl	8003952 <HAL_PCD_EP_Open>
 800dacc:	4603      	mov	r3, r0
 800dace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dad0:	7bfb      	ldrb	r3, [r7, #15]
 800dad2:	4618      	mov	r0, r3
 800dad4:	f000 f928 	bl	800dd28 <USBD_Get_USB_Status>
 800dad8:	4603      	mov	r3, r0
 800dada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dadc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3710      	adds	r7, #16
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b084      	sub	sp, #16
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
 800daee:	460b      	mov	r3, r1
 800daf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daf6:	2300      	movs	r3, #0
 800daf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db00:	78fa      	ldrb	r2, [r7, #3]
 800db02:	4611      	mov	r1, r2
 800db04:	4618      	mov	r0, r3
 800db06:	f7f5 ff8a 	bl	8003a1e <HAL_PCD_EP_Close>
 800db0a:	4603      	mov	r3, r0
 800db0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db0e:	7bfb      	ldrb	r3, [r7, #15]
 800db10:	4618      	mov	r0, r3
 800db12:	f000 f909 	bl	800dd28 <USBD_Get_USB_Status>
 800db16:	4603      	mov	r3, r0
 800db18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3710      	adds	r7, #16
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	460b      	mov	r3, r1
 800db2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db30:	2300      	movs	r3, #0
 800db32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db34:	2300      	movs	r3, #0
 800db36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db3e:	78fa      	ldrb	r2, [r7, #3]
 800db40:	4611      	mov	r1, r2
 800db42:	4618      	mov	r0, r3
 800db44:	f7f6 f84a 	bl	8003bdc <HAL_PCD_EP_SetStall>
 800db48:	4603      	mov	r3, r0
 800db4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db4c:	7bfb      	ldrb	r3, [r7, #15]
 800db4e:	4618      	mov	r0, r3
 800db50:	f000 f8ea 	bl	800dd28 <USBD_Get_USB_Status>
 800db54:	4603      	mov	r3, r0
 800db56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db58:	7bbb      	ldrb	r3, [r7, #14]
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3710      	adds	r7, #16
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}

0800db62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db62:	b580      	push	{r7, lr}
 800db64:	b084      	sub	sp, #16
 800db66:	af00      	add	r7, sp, #0
 800db68:	6078      	str	r0, [r7, #4]
 800db6a:	460b      	mov	r3, r1
 800db6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db6e:	2300      	movs	r3, #0
 800db70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db72:	2300      	movs	r3, #0
 800db74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db7c:	78fa      	ldrb	r2, [r7, #3]
 800db7e:	4611      	mov	r1, r2
 800db80:	4618      	mov	r0, r3
 800db82:	f7f6 f88b 	bl	8003c9c <HAL_PCD_EP_ClrStall>
 800db86:	4603      	mov	r3, r0
 800db88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db8a:	7bfb      	ldrb	r3, [r7, #15]
 800db8c:	4618      	mov	r0, r3
 800db8e:	f000 f8cb 	bl	800dd28 <USBD_Get_USB_Status>
 800db92:	4603      	mov	r3, r0
 800db94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db96:	7bbb      	ldrb	r3, [r7, #14]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3710      	adds	r7, #16
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b085      	sub	sp, #20
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	460b      	mov	r3, r1
 800dbaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dbb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	da0c      	bge.n	800dbd6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dbbc:	78fb      	ldrb	r3, [r7, #3]
 800dbbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbc2:	68f9      	ldr	r1, [r7, #12]
 800dbc4:	1c5a      	adds	r2, r3, #1
 800dbc6:	4613      	mov	r3, r2
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	4413      	add	r3, r2
 800dbcc:	00db      	lsls	r3, r3, #3
 800dbce:	440b      	add	r3, r1
 800dbd0:	3302      	adds	r3, #2
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	e00b      	b.n	800dbee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dbd6:	78fb      	ldrb	r3, [r7, #3]
 800dbd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dbdc:	68f9      	ldr	r1, [r7, #12]
 800dbde:	4613      	mov	r3, r2
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	4413      	add	r3, r2
 800dbe4:	00db      	lsls	r3, r3, #3
 800dbe6:	440b      	add	r3, r1
 800dbe8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800dbec:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3714      	adds	r7, #20
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bc80      	pop	{r7}
 800dbf6:	4770      	bx	lr

0800dbf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	460b      	mov	r3, r1
 800dc02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc04:	2300      	movs	r3, #0
 800dc06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc12:	78fa      	ldrb	r2, [r7, #3]
 800dc14:	4611      	mov	r1, r2
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7f5 fe76 	bl	8003908 <HAL_PCD_SetAddress>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc20:	7bfb      	ldrb	r3, [r7, #15]
 800dc22:	4618      	mov	r0, r3
 800dc24:	f000 f880 	bl	800dd28 <USBD_Get_USB_Status>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3710      	adds	r7, #16
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}

0800dc36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b086      	sub	sp, #24
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	60f8      	str	r0, [r7, #12]
 800dc3e:	607a      	str	r2, [r7, #4]
 800dc40:	461a      	mov	r2, r3
 800dc42:	460b      	mov	r3, r1
 800dc44:	72fb      	strb	r3, [r7, #11]
 800dc46:	4613      	mov	r3, r2
 800dc48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dc58:	893b      	ldrh	r3, [r7, #8]
 800dc5a:	7af9      	ldrb	r1, [r7, #11]
 800dc5c:	687a      	ldr	r2, [r7, #4]
 800dc5e:	f7f5 ff7a 	bl	8003b56 <HAL_PCD_EP_Transmit>
 800dc62:	4603      	mov	r3, r0
 800dc64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc66:	7dfb      	ldrb	r3, [r7, #23]
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f000 f85d 	bl	800dd28 <USBD_Get_USB_Status>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc72:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3718      	adds	r7, #24
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b086      	sub	sp, #24
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	607a      	str	r2, [r7, #4]
 800dc86:	461a      	mov	r2, r3
 800dc88:	460b      	mov	r3, r1
 800dc8a:	72fb      	strb	r3, [r7, #11]
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc90:	2300      	movs	r3, #0
 800dc92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc94:	2300      	movs	r3, #0
 800dc96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dc9e:	893b      	ldrh	r3, [r7, #8]
 800dca0:	7af9      	ldrb	r1, [r7, #11]
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	f7f5 ff03 	bl	8003aae <HAL_PCD_EP_Receive>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcac:	7dfb      	ldrb	r3, [r7, #23]
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f000 f83a 	bl	800dd28 <USBD_Get_USB_Status>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dcb8:	7dbb      	ldrb	r3, [r7, #22]
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3718      	adds	r7, #24
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcc2:	b580      	push	{r7, lr}
 800dcc4:	b082      	sub	sp, #8
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
 800dcca:	460b      	mov	r3, r1
 800dccc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dcd4:	78fa      	ldrb	r2, [r7, #3]
 800dcd6:	4611      	mov	r1, r2
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7f5 ff25 	bl	8003b28 <HAL_PCD_EP_GetRxCount>
 800dcde:	4603      	mov	r3, r0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dcf0:	4b02      	ldr	r3, [pc, #8]	; (800dcfc <USBD_static_malloc+0x14>)
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	370c      	adds	r7, #12
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bc80      	pop	{r7}
 800dcfa:	4770      	bx	lr
 800dcfc:	20002258 	.word	0x20002258

0800dd00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b083      	sub	sp, #12
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]

}
 800dd08:	bf00      	nop
 800dd0a:	370c      	adds	r7, #12
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bc80      	pop	{r7}
 800dd10:	4770      	bx	lr

0800dd12 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd12:	b480      	push	{r7}
 800dd14:	b083      	sub	sp, #12
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800dd1e:	bf00      	nop
 800dd20:	370c      	adds	r7, #12
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bc80      	pop	{r7}
 800dd26:	4770      	bx	lr

0800dd28 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	4603      	mov	r3, r0
 800dd30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd32:	2300      	movs	r3, #0
 800dd34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd36:	79fb      	ldrb	r3, [r7, #7]
 800dd38:	2b03      	cmp	r3, #3
 800dd3a:	d817      	bhi.n	800dd6c <USBD_Get_USB_Status+0x44>
 800dd3c:	a201      	add	r2, pc, #4	; (adr r2, 800dd44 <USBD_Get_USB_Status+0x1c>)
 800dd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd42:	bf00      	nop
 800dd44:	0800dd55 	.word	0x0800dd55
 800dd48:	0800dd5b 	.word	0x0800dd5b
 800dd4c:	0800dd61 	.word	0x0800dd61
 800dd50:	0800dd67 	.word	0x0800dd67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dd54:	2300      	movs	r3, #0
 800dd56:	73fb      	strb	r3, [r7, #15]
    break;
 800dd58:	e00b      	b.n	800dd72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd5a:	2302      	movs	r3, #2
 800dd5c:	73fb      	strb	r3, [r7, #15]
    break;
 800dd5e:	e008      	b.n	800dd72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd60:	2301      	movs	r3, #1
 800dd62:	73fb      	strb	r3, [r7, #15]
    break;
 800dd64:	e005      	b.n	800dd72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd66:	2302      	movs	r3, #2
 800dd68:	73fb      	strb	r3, [r7, #15]
    break;
 800dd6a:	e002      	b.n	800dd72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dd6c:	2302      	movs	r3, #2
 800dd6e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd70:	bf00      	nop
  }
  return usb_status;
 800dd72:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3714      	adds	r7, #20
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bc80      	pop	{r7}
 800dd7c:	4770      	bx	lr
 800dd7e:	bf00      	nop

0800dd80 <__libc_init_array>:
 800dd80:	b570      	push	{r4, r5, r6, lr}
 800dd82:	2600      	movs	r6, #0
 800dd84:	4d0c      	ldr	r5, [pc, #48]	; (800ddb8 <__libc_init_array+0x38>)
 800dd86:	4c0d      	ldr	r4, [pc, #52]	; (800ddbc <__libc_init_array+0x3c>)
 800dd88:	1b64      	subs	r4, r4, r5
 800dd8a:	10a4      	asrs	r4, r4, #2
 800dd8c:	42a6      	cmp	r6, r4
 800dd8e:	d109      	bne.n	800dda4 <__libc_init_array+0x24>
 800dd90:	f000 f862 	bl	800de58 <_init>
 800dd94:	2600      	movs	r6, #0
 800dd96:	4d0a      	ldr	r5, [pc, #40]	; (800ddc0 <__libc_init_array+0x40>)
 800dd98:	4c0a      	ldr	r4, [pc, #40]	; (800ddc4 <__libc_init_array+0x44>)
 800dd9a:	1b64      	subs	r4, r4, r5
 800dd9c:	10a4      	asrs	r4, r4, #2
 800dd9e:	42a6      	cmp	r6, r4
 800dda0:	d105      	bne.n	800ddae <__libc_init_array+0x2e>
 800dda2:	bd70      	pop	{r4, r5, r6, pc}
 800dda4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dda8:	4798      	blx	r3
 800ddaa:	3601      	adds	r6, #1
 800ddac:	e7ee      	b.n	800dd8c <__libc_init_array+0xc>
 800ddae:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddb2:	4798      	blx	r3
 800ddb4:	3601      	adds	r6, #1
 800ddb6:	e7f2      	b.n	800dd9e <__libc_init_array+0x1e>
 800ddb8:	0800e708 	.word	0x0800e708
 800ddbc:	0800e708 	.word	0x0800e708
 800ddc0:	0800e708 	.word	0x0800e708
 800ddc4:	0800e70c 	.word	0x0800e70c

0800ddc8 <memcpy>:
 800ddc8:	440a      	add	r2, r1
 800ddca:	4291      	cmp	r1, r2
 800ddcc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddd0:	d100      	bne.n	800ddd4 <memcpy+0xc>
 800ddd2:	4770      	bx	lr
 800ddd4:	b510      	push	{r4, lr}
 800ddd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddda:	4291      	cmp	r1, r2
 800dddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dde0:	d1f9      	bne.n	800ddd6 <memcpy+0xe>
 800dde2:	bd10      	pop	{r4, pc}

0800dde4 <memmove>:
 800dde4:	4288      	cmp	r0, r1
 800dde6:	b510      	push	{r4, lr}
 800dde8:	eb01 0402 	add.w	r4, r1, r2
 800ddec:	d902      	bls.n	800ddf4 <memmove+0x10>
 800ddee:	4284      	cmp	r4, r0
 800ddf0:	4623      	mov	r3, r4
 800ddf2:	d807      	bhi.n	800de04 <memmove+0x20>
 800ddf4:	1e43      	subs	r3, r0, #1
 800ddf6:	42a1      	cmp	r1, r4
 800ddf8:	d008      	beq.n	800de0c <memmove+0x28>
 800ddfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ddfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de02:	e7f8      	b.n	800ddf6 <memmove+0x12>
 800de04:	4601      	mov	r1, r0
 800de06:	4402      	add	r2, r0
 800de08:	428a      	cmp	r2, r1
 800de0a:	d100      	bne.n	800de0e <memmove+0x2a>
 800de0c:	bd10      	pop	{r4, pc}
 800de0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de16:	e7f7      	b.n	800de08 <memmove+0x24>

0800de18 <memset>:
 800de18:	4603      	mov	r3, r0
 800de1a:	4402      	add	r2, r0
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d100      	bne.n	800de22 <memset+0xa>
 800de20:	4770      	bx	lr
 800de22:	f803 1b01 	strb.w	r1, [r3], #1
 800de26:	e7f9      	b.n	800de1c <memset+0x4>

0800de28 <strstr>:
 800de28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de2a:	780c      	ldrb	r4, [r1, #0]
 800de2c:	b164      	cbz	r4, 800de48 <strstr+0x20>
 800de2e:	4603      	mov	r3, r0
 800de30:	781a      	ldrb	r2, [r3, #0]
 800de32:	4618      	mov	r0, r3
 800de34:	1c5e      	adds	r6, r3, #1
 800de36:	b90a      	cbnz	r2, 800de3c <strstr+0x14>
 800de38:	4610      	mov	r0, r2
 800de3a:	e005      	b.n	800de48 <strstr+0x20>
 800de3c:	4294      	cmp	r4, r2
 800de3e:	d108      	bne.n	800de52 <strstr+0x2a>
 800de40:	460d      	mov	r5, r1
 800de42:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800de46:	b902      	cbnz	r2, 800de4a <strstr+0x22>
 800de48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de4a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800de4e:	4297      	cmp	r7, r2
 800de50:	d0f7      	beq.n	800de42 <strstr+0x1a>
 800de52:	4633      	mov	r3, r6
 800de54:	e7ec      	b.n	800de30 <strstr+0x8>
	...

0800de58 <_init>:
 800de58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5a:	bf00      	nop
 800de5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de5e:	bc08      	pop	{r3}
 800de60:	469e      	mov	lr, r3
 800de62:	4770      	bx	lr

0800de64 <_fini>:
 800de64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de66:	bf00      	nop
 800de68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de6a:	bc08      	pop	{r3}
 800de6c:	469e      	mov	lr, r3
 800de6e:	4770      	bx	lr
