
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db10  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800dc20  0800dc20  0001dc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e364  0800e364  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800e364  0800e364  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e364  0800e364  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e364  0800e364  0001e364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e368  0800e368  0001e368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800e36c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003488  20000190  0800e4fc  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003618  0800e4fc  00023618  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c022  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005dac  00000000  00000000  0004c1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de8  00000000  00000000  00051f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bd0  00000000  00000000  00053d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e707  00000000  00000000  00055940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023f90  00000000  00000000  00074047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c4c5  00000000  00000000  00097fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013449c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bec  00000000  00000000  001344f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000190 	.word	0x20000190
 800012c:	00000000 	.word	0x00000000
 8000130:	0800dc08 	.word	0x0800dc08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000194 	.word	0x20000194
 800014c:	0800dc08 	.word	0x0800dc08

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (64, sizeof(uint8_t), &qUSB_rcv_attributes);
 8000178:	4a1a      	ldr	r2, [pc, #104]	; (80001e4 <MX_FREERTOS_Init+0x70>)
 800017a:	2101      	movs	r1, #1
 800017c:	2040      	movs	r0, #64	; 0x40
 800017e:	f00a fa29 	bl	800a5d4 <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a18      	ldr	r2, [pc, #96]	; (80001e8 <MX_FREERTOS_Init+0x74>)
 8000186:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000188:	4a18      	ldr	r2, [pc, #96]	; (80001ec <MX_FREERTOS_Init+0x78>)
 800018a:	2100      	movs	r1, #0
 800018c:	4818      	ldr	r0, [pc, #96]	; (80001f0 <MX_FREERTOS_Init+0x7c>)
 800018e:	f00a f949 	bl	800a424 <osThreadNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a17      	ldr	r2, [pc, #92]	; (80001f4 <MX_FREERTOS_Init+0x80>)
 8000196:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 8000198:	4a17      	ldr	r2, [pc, #92]	; (80001f8 <MX_FREERTOS_Init+0x84>)
 800019a:	2100      	movs	r1, #0
 800019c:	4817      	ldr	r0, [pc, #92]	; (80001fc <MX_FREERTOS_Init+0x88>)
 800019e:	f00a f941 	bl	800a424 <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a16      	ldr	r2, [pc, #88]	; (8000200 <MX_FREERTOS_Init+0x8c>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 80001a8:	4a16      	ldr	r2, [pc, #88]	; (8000204 <MX_FREERTOS_Init+0x90>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	4816      	ldr	r0, [pc, #88]	; (8000208 <MX_FREERTOS_Init+0x94>)
 80001ae:	f00a f939 	bl	800a424 <osThreadNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a15      	ldr	r2, [pc, #84]	; (800020c <MX_FREERTOS_Init+0x98>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* creation of UARTtask */
  UARTtaskHandle = osThreadNew(StartUARTtask, NULL, &UARTtask_attributes);
 80001b8:	4a15      	ldr	r2, [pc, #84]	; (8000210 <MX_FREERTOS_Init+0x9c>)
 80001ba:	2100      	movs	r1, #0
 80001bc:	4815      	ldr	r0, [pc, #84]	; (8000214 <MX_FREERTOS_Init+0xa0>)
 80001be:	f00a f931 	bl	800a424 <osThreadNew>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a14      	ldr	r2, [pc, #80]	; (8000218 <MX_FREERTOS_Init+0xa4>)
 80001c6:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(StartEncoder, NULL, &Encoder_attributes);
 80001c8:	4a14      	ldr	r2, [pc, #80]	; (800021c <MX_FREERTOS_Init+0xa8>)
 80001ca:	2100      	movs	r1, #0
 80001cc:	4814      	ldr	r0, [pc, #80]	; (8000220 <MX_FREERTOS_Init+0xac>)
 80001ce:	f00a f929 	bl	800a424 <osThreadNew>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a13      	ldr	r2, [pc, #76]	; (8000224 <MX_FREERTOS_Init+0xb0>)
 80001d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 80001d8:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <MX_FREERTOS_Init+0x74>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a12      	ldr	r2, [pc, #72]	; (8000228 <MX_FREERTOS_Init+0xb4>)
 80001de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	0800def4 	.word	0x0800def4
 80001e8:	20002488 	.word	0x20002488
 80001ec:	0800de40 	.word	0x0800de40
 80001f0:	0800022d 	.word	0x0800022d
 80001f4:	20002478 	.word	0x20002478
 80001f8:	0800de64 	.word	0x0800de64
 80001fc:	08000265 	.word	0x08000265
 8000200:	2000247c 	.word	0x2000247c
 8000204:	0800de88 	.word	0x0800de88
 8000208:	08000299 	.word	0x08000299
 800020c:	20002484 	.word	0x20002484
 8000210:	0800deac 	.word	0x0800deac
 8000214:	080002e1 	.word	0x080002e1
 8000218:	20002480 	.word	0x20002480
 800021c:	0800ded0 	.word	0x0800ded0
 8000220:	0800031d 	.word	0x0800031d
 8000224:	20002490 	.word	0x20002490
 8000228:	2000248c 	.word	0x2000248c

0800022c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000234:	f00c ffba 	bl	800d1ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 8000238:	2201      	movs	r2, #1
 800023a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800023e:	4808      	ldr	r0, [pc, #32]	; (8000260 <StartDefaultTask+0x34>)
 8000240:	f002 ff67 	bl	8003112 <HAL_GPIO_WritePin>
  osDelay(10);
 8000244:	200a      	movs	r0, #10
 8000246:	f00a f997 	bl	800a578 <osDelay>
  init_microrl();
 800024a:	f002 f8c5 	bl	80023d8 <init_microrl>
  set_CDC_ready(); // allow to send
 800024e:	f002 f8fd 	bl	800244c <set_CDC_ready>

  //vTaskDelete(NULL);
  /* Infinite loop */
  for(;;)
  {
    process_encoder();
 8000252:	f000 fb47 	bl	80008e4 <process_encoder>
    osDelay(1);
 8000256:	2001      	movs	r0, #1
 8000258:	f00a f98e 	bl	800a578 <osDelay>
    process_encoder();
 800025c:	e7f9      	b.n	8000252 <StartDefaultTask+0x26>
 800025e:	bf00      	nop
 8000260:	40010800 	.word	0x40010800

08000264 <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 800026c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000270:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 8000272:	f00b fb95 	bl	800b9a0 <xTaskGetTickCount>
 8000276:	4603      	mov	r3, r0
 8000278:	60bb      	str	r3, [r7, #8]

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800027a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <StartLEDheartbeat+0x30>)
 8000280:	f002 ff5f 	bl	8003142 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000284:	f107 0308 	add.w	r3, r7, #8
 8000288:	68f9      	ldr	r1, [r7, #12]
 800028a:	4618      	mov	r0, r3
 800028c:	f00b f9c4 	bl	800b618 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000290:	e7ef      	b.n	8000272 <StartLEDheartbeat+0xe>
 8000292:	bf00      	nop
 8000294:	40011000 	.word	0x40011000

08000298 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 80002a0:	2000      	movs	r0, #0
 80002a2:	f00b fe7f 	bl	800bfa4 <uxTaskGetStackHighWaterMark>
 80002a6:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <StartUSB_rcv+0x44>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f107 010f 	add.w	r1, r7, #15
 80002b4:	f04f 32ff 	mov.w	r2, #4294967295
 80002b8:	4618      	mov	r0, r3
 80002ba:	f00a fdc9 	bl	800ae50 <xQueueReceive>
	  microrl_print_char(buf);
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fd45 	bl	8001d50 <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80002c6:	2000      	movs	r0, #0
 80002c8:	f00b fe6c 	bl	800bfa4 <uxTaskGetStackHighWaterMark>
 80002cc:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 80002ce:	693a      	ldr	r2, [r7, #16]
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d2ea      	bcs.n	80002ac <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80002da:	e7e7      	b.n	80002ac <StartUSB_rcv+0x14>
 80002dc:	2000248c 	.word	0x2000248c

080002e0 <StartUARTtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTtask */
void StartUARTtask(void *argument)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  uint8_t data;
  for(;;)
  {
	HAL_UART_Receive_IT(&huart2, &data, 1);
 80002e8:	f107 030f 	add.w	r3, r7, #15
 80002ec:	2201      	movs	r2, #1
 80002ee:	4619      	mov	r1, r3
 80002f0:	4809      	ldr	r0, [pc, #36]	; (8000318 <StartUARTtask+0x38>)
 80002f2:	f005 fe26 	bl	8005f42 <HAL_UART_Receive_IT>
	/* Wait to be notified of an interrupt. */
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80002f6:	f04f 31ff 	mov.w	r1, #4294967295
 80002fa:	2001      	movs	r0, #1
 80002fc:	f00b ff4e 	bl	800c19c <ulTaskNotifyTake>
	if (get_nema())
 8000300:	f002 f9ae 	bl	8002660 <get_nema>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0ee      	beq.n	80002e8 <StartUARTtask+0x8>
		CDC_Transmit_FS(&data, 1);
 800030a:	f107 030f 	add.w	r3, r7, #15
 800030e:	2101      	movs	r1, #1
 8000310:	4618      	mov	r0, r3
 8000312:	f00d f82f 	bl	800d374 <CDC_Transmit_FS>
	HAL_UART_Receive_IT(&huart2, &data, 1);
 8000316:	e7e7      	b.n	80002e8 <StartUARTtask+0x8>
 8000318:	20002610 	.word	0x20002610

0800031c <StartEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoder */
void StartEncoder(void *argument)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b0a0      	sub	sp, #128	; 0x80
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoder */

	static bool invert = true;
	static bool released = true;

  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000324:	2201      	movs	r2, #1
 8000326:	2120      	movs	r1, #32
 8000328:	48b1      	ldr	r0, [pc, #708]	; (80005f0 <StartEncoder+0x2d4>)
 800032a:	f002 fef2 	bl	8003112 <HAL_GPIO_WritePin>

  osDelay(200);
 800032e:	20c8      	movs	r0, #200	; 0xc8
 8000330:	f00a f922 	bl	800a578 <osDelay>
  union VFD {
	  uint8_t arr2[11][3];
	  uint8_t arr1[11*3];
  } vfd;

  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000334:	2300      	movs	r3, #0
 8000336:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000338:	e008      	b.n	800034c <StartEncoder+0x30>
  {
	  vfd.arr1[i] = 0;
 800033a:	f107 0210 	add.w	r2, r7, #16
 800033e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000340:	4413      	add	r3, r2
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000346:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000348:	3301      	adds	r3, #1
 800034a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800034c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800034e:	2b20      	cmp	r3, #32
 8000350:	d9f3      	bls.n	800033a <StartEncoder+0x1e>
  }
  uint8_t data;

  // init display, 11 digits 17 segments
  data = 0b00000111; // command 1, 11 digits 17 segments
 8000352:	2307      	movs	r3, #7
 8000354:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 7180 	mov.w	r1, #256	; 0x100
 800035c:	48a4      	ldr	r0, [pc, #656]	; (80005f0 <StartEncoder+0x2d4>)
 800035e:	f002 fed8 	bl	8003112 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000362:	f107 010f 	add.w	r1, r7, #15
 8000366:	f04f 33ff 	mov.w	r3, #4294967295
 800036a:	2201      	movs	r2, #1
 800036c:	48a1      	ldr	r0, [pc, #644]	; (80005f4 <StartEncoder+0x2d8>)
 800036e:	f005 f96f 	bl	8005650 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000372:	2201      	movs	r2, #1
 8000374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000378:	489d      	ldr	r0, [pc, #628]	; (80005f0 <StartEncoder+0x2d4>)
 800037a:	f002 feca 	bl	8003112 <HAL_GPIO_WritePin>
  osDelay(10);
 800037e:	200a      	movs	r0, #10
 8000380:	f00a f8fa 	bl	800a578 <osDelay>


  data = 0b01000000; // command 2, write to Display port
 8000384:	2340      	movs	r3, #64	; 0x40
 8000386:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800038e:	4898      	ldr	r0, [pc, #608]	; (80005f0 <StartEncoder+0x2d4>)
 8000390:	f002 febf 	bl	8003112 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000394:	f107 010f 	add.w	r1, r7, #15
 8000398:	f04f 33ff 	mov.w	r3, #4294967295
 800039c:	2201      	movs	r2, #1
 800039e:	4895      	ldr	r0, [pc, #596]	; (80005f4 <StartEncoder+0x2d8>)
 80003a0:	f005 f956 	bl	8005650 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80003a4:	2201      	movs	r2, #1
 80003a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003aa:	4891      	ldr	r0, [pc, #580]	; (80005f0 <StartEncoder+0x2d4>)
 80003ac:	f002 feb1 	bl	8003112 <HAL_GPIO_WritePin>
  osDelay(10);
 80003b0:	200a      	movs	r0, #10
 80003b2:	f00a f8e1 	bl	800a578 <osDelay>
  data = 0b11000000; // command 3, set address to 0
 80003b6:	23c0      	movs	r3, #192	; 0xc0
 80003b8:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003c0:	488b      	ldr	r0, [pc, #556]	; (80005f0 <StartEncoder+0x2d4>)
 80003c2:	f002 fea6 	bl	8003112 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80003c6:	f107 010f 	add.w	r1, r7, #15
 80003ca:	f04f 33ff 	mov.w	r3, #4294967295
 80003ce:	2201      	movs	r2, #1
 80003d0:	4888      	ldr	r0, [pc, #544]	; (80005f4 <StartEncoder+0x2d8>)
 80003d2:	f005 f93d 	bl	8005650 <HAL_SPI_Transmit>


  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80003d6:	f107 0110 	add.w	r1, r7, #16
 80003da:	f04f 33ff 	mov.w	r3, #4294967295
 80003de:	2221      	movs	r2, #33	; 0x21
 80003e0:	4884      	ldr	r0, [pc, #528]	; (80005f4 <StartEncoder+0x2d8>)
 80003e2:	f005 f935 	bl	8005650 <HAL_SPI_Transmit>

//  for (uint8_t i = 0; i < sizeof(vfd.arr1); i++)
//  {
//	  osDelay(10);
//  }
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80003e6:	2201      	movs	r2, #1
 80003e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ec:	4880      	ldr	r0, [pc, #512]	; (80005f0 <StartEncoder+0x2d4>)
 80003ee:	f002 fe90 	bl	8003112 <HAL_GPIO_WritePin>
  osDelay(10);
 80003f2:	200a      	movs	r0, #10
 80003f4:	f00a f8c0 	bl	800a578 <osDelay>

  data = 0b10000000; // command 4
 80003f8:	2380      	movs	r3, #128	; 0x80
 80003fa:	73fb      	strb	r3, [r7, #15]
  data |= 1<<3; // enable/disable display
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	f043 0308 	orr.w	r3, r3, #8
 8000402:	b2db      	uxtb	r3, r3
 8000404:	73fb      	strb	r3, [r7, #15]
  data |= 0b111; // set brightness
 8000406:	7bfb      	ldrb	r3, [r7, #15]
 8000408:	f043 0307 	orr.w	r3, r3, #7
 800040c:	b2db      	uxtb	r3, r3
 800040e:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000416:	4876      	ldr	r0, [pc, #472]	; (80005f0 <StartEncoder+0x2d4>)
 8000418:	f002 fe7b 	bl	8003112 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800041c:	f107 010f 	add.w	r1, r7, #15
 8000420:	f04f 33ff 	mov.w	r3, #4294967295
 8000424:	2201      	movs	r2, #1
 8000426:	4873      	ldr	r0, [pc, #460]	; (80005f4 <StartEncoder+0x2d8>)
 8000428:	f005 f912 	bl	8005650 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800042c:	2201      	movs	r2, #1
 800042e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000432:	486f      	ldr	r0, [pc, #444]	; (80005f0 <StartEncoder+0x2d4>)
 8000434:	f002 fe6d 	bl	8003112 <HAL_GPIO_WritePin>
  osDelay(10);
 8000438:	200a      	movs	r0, #10
 800043a:	f00a f89d 	bl	800a578 <osDelay>
//  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
//  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
//  osDelay(1000);


  for (int i = 0; i < 11; i++)
 800043e:	2300      	movs	r3, #0
 8000440:	67bb      	str	r3, [r7, #120]	; 0x78
 8000442:	e047      	b.n	80004d4 <StartEncoder+0x1b8>
  {
	  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000444:	2300      	movs	r3, #0
 8000446:	677b      	str	r3, [r7, #116]	; 0x74
 8000448:	e008      	b.n	800045c <StartEncoder+0x140>
	  	  vfd.arr1[a] = 0;
 800044a:	f107 0210 	add.w	r2, r7, #16
 800044e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000450:	4413      	add	r3, r2
 8000452:	2200      	movs	r2, #0
 8000454:	701a      	strb	r2, [r3, #0]
	  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000458:	3301      	adds	r3, #1
 800045a:	677b      	str	r3, [r7, #116]	; 0x74
 800045c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800045e:	2b20      	cmp	r3, #32
 8000460:	d9f3      	bls.n	800044a <StartEncoder+0x12e>
	  for (int b = 0; b < 3; b++)
 8000462:	2300      	movs	r3, #0
 8000464:	673b      	str	r3, [r7, #112]	; 0x70
 8000466:	e00e      	b.n	8000486 <StartEncoder+0x16a>
	  {
		  vfd.arr2[i][b] = 0xFF;
 8000468:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800046a:	4613      	mov	r3, r2
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	4413      	add	r3, r2
 8000470:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000474:	441a      	add	r2, r3
 8000476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000478:	4413      	add	r3, r2
 800047a:	3b70      	subs	r3, #112	; 0x70
 800047c:	22ff      	movs	r2, #255	; 0xff
 800047e:	701a      	strb	r2, [r3, #0]
	  for (int b = 0; b < 3; b++)
 8000480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000482:	3301      	adds	r3, #1
 8000484:	673b      	str	r3, [r7, #112]	; 0x70
 8000486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000488:	2b02      	cmp	r3, #2
 800048a:	dded      	ble.n	8000468 <StartEncoder+0x14c>
	  }


	  data = 0b11000000; // command 3, set address to 0
 800048c:	23c0      	movs	r3, #192	; 0xc0
 800048e:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000496:	4856      	ldr	r0, [pc, #344]	; (80005f0 <StartEncoder+0x2d4>)
 8000498:	f002 fe3b 	bl	8003112 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800049c:	f107 010f 	add.w	r1, r7, #15
 80004a0:	f04f 33ff 	mov.w	r3, #4294967295
 80004a4:	2201      	movs	r2, #1
 80004a6:	4853      	ldr	r0, [pc, #332]	; (80005f4 <StartEncoder+0x2d8>)
 80004a8:	f005 f8d2 	bl	8005650 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80004ac:	f107 0110 	add.w	r1, r7, #16
 80004b0:	f04f 33ff 	mov.w	r3, #4294967295
 80004b4:	2221      	movs	r2, #33	; 0x21
 80004b6:	484f      	ldr	r0, [pc, #316]	; (80005f4 <StartEncoder+0x2d8>)
 80004b8:	f005 f8ca 	bl	8005650 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c2:	484b      	ldr	r0, [pc, #300]	; (80005f0 <StartEncoder+0x2d4>)
 80004c4:	f002 fe25 	bl	8003112 <HAL_GPIO_WritePin>
	  osDelay(200);
 80004c8:	20c8      	movs	r0, #200	; 0xc8
 80004ca:	f00a f855 	bl	800a578 <osDelay>
  for (int i = 0; i < 11; i++)
 80004ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80004d0:	3301      	adds	r3, #1
 80004d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80004d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80004d6:	2b0a      	cmp	r3, #10
 80004d8:	ddb4      	ble.n	8000444 <StartEncoder+0x128>
  }

  osDelay(500);
 80004da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004de:	f00a f84b 	bl	800a578 <osDelay>

  for (int j = 0; j < 17; j++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80004e6:	e05b      	b.n	80005a0 <StartEncoder+0x284>
  {
	  uint32_t temp = 1<<j;
 80004e8:	2201      	movs	r2, #1
 80004ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004ec:	fa02 f303 	lsl.w	r3, r2, r3
 80004f0:	637b      	str	r3, [r7, #52]	; 0x34
	  for (int i = 0; i < 11; i++)
 80004f2:	2300      	movs	r3, #0
 80004f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80004f6:	e04d      	b.n	8000594 <StartEncoder+0x278>
	  {
		  for (int a = 0; a < sizeof(vfd.arr1); a++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	667b      	str	r3, [r7, #100]	; 0x64
 80004fc:	e008      	b.n	8000510 <StartEncoder+0x1f4>
			  vfd.arr1[a] = 0;
 80004fe:	f107 0210 	add.w	r2, r7, #16
 8000502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000504:	4413      	add	r3, r2
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
		  for (int a = 0; a < sizeof(vfd.arr1); a++)
 800050a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800050c:	3301      	adds	r3, #1
 800050e:	667b      	str	r3, [r7, #100]	; 0x64
 8000510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000512:	2b20      	cmp	r3, #32
 8000514:	d9f3      	bls.n	80004fe <StartEncoder+0x1e2>
		  for (int b = 0; b < 3; b++)
 8000516:	2300      	movs	r3, #0
 8000518:	663b      	str	r3, [r7, #96]	; 0x60
 800051a:	e014      	b.n	8000546 <StartEncoder+0x22a>
		  {
			  vfd.arr2[i][b] = (temp>>(b<<3))&0xFF;
 800051c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800051e:	00db      	lsls	r3, r3, #3
 8000520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000522:	fa22 f303 	lsr.w	r3, r2, r3
 8000526:	b2d9      	uxtb	r1, r3
 8000528:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800052a:	4613      	mov	r3, r2
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	4413      	add	r3, r2
 8000530:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000534:	441a      	add	r2, r3
 8000536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000538:	4413      	add	r3, r2
 800053a:	3b70      	subs	r3, #112	; 0x70
 800053c:	460a      	mov	r2, r1
 800053e:	701a      	strb	r2, [r3, #0]
		  for (int b = 0; b < 3; b++)
 8000540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000542:	3301      	adds	r3, #1
 8000544:	663b      	str	r3, [r7, #96]	; 0x60
 8000546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000548:	2b02      	cmp	r3, #2
 800054a:	dde7      	ble.n	800051c <StartEncoder+0x200>
		  }
		  data = 0b11000000; // command 3, set address to 0
 800054c:	23c0      	movs	r3, #192	; 0xc0
 800054e:	73fb      	strb	r3, [r7, #15]
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000556:	4826      	ldr	r0, [pc, #152]	; (80005f0 <StartEncoder+0x2d4>)
 8000558:	f002 fddb 	bl	8003112 <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800055c:	f107 010f 	add.w	r1, r7, #15
 8000560:	f04f 33ff 	mov.w	r3, #4294967295
 8000564:	2201      	movs	r2, #1
 8000566:	4823      	ldr	r0, [pc, #140]	; (80005f4 <StartEncoder+0x2d8>)
 8000568:	f005 f872 	bl	8005650 <HAL_SPI_Transmit>
		  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 800056c:	f107 0110 	add.w	r1, r7, #16
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	2221      	movs	r2, #33	; 0x21
 8000576:	481f      	ldr	r0, [pc, #124]	; (80005f4 <StartEncoder+0x2d8>)
 8000578:	f005 f86a 	bl	8005650 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000582:	481b      	ldr	r0, [pc, #108]	; (80005f0 <StartEncoder+0x2d4>)
 8000584:	f002 fdc5 	bl	8003112 <HAL_GPIO_WritePin>
		  osDelay(50);
 8000588:	2032      	movs	r0, #50	; 0x32
 800058a:	f009 fff5 	bl	800a578 <osDelay>
	  for (int i = 0; i < 11; i++)
 800058e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000590:	3301      	adds	r3, #1
 8000592:	66bb      	str	r3, [r7, #104]	; 0x68
 8000594:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000596:	2b0a      	cmp	r3, #10
 8000598:	ddae      	ble.n	80004f8 <StartEncoder+0x1dc>
  for (int j = 0; j < 17; j++)
 800059a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800059c:	3301      	adds	r3, #1
 800059e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80005a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005a2:	2b10      	cmp	r3, #16
 80005a4:	dda0      	ble.n	80004e8 <StartEncoder+0x1cc>
	  }
  }

  osDelay(500);
 80005a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005aa:	f009 ffe5 	bl	800a578 <osDelay>

  osDelay(500);
 80005ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b2:	f009 ffe1 	bl	800a578 <osDelay>

  for (int j = 0; j < 17; j++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005ba:	e05f      	b.n	800067c <StartEncoder+0x360>
  {
	  uint32_t temp = 1<<j;
 80005bc:	2201      	movs	r2, #1
 80005be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	63bb      	str	r3, [r7, #56]	; 0x38
	  for (int a = 0; a < sizeof(vfd.arr1); a++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80005ca:	e008      	b.n	80005de <StartEncoder+0x2c2>
		  vfd.arr1[a] = 0;
 80005cc:	f107 0210 	add.w	r2, r7, #16
 80005d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005d2:	4413      	add	r3, r2
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
	  for (int a = 0; a < sizeof(vfd.arr1); a++)
 80005d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005da:	3301      	adds	r3, #1
 80005dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80005de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005e0:	2b20      	cmp	r3, #32
 80005e2:	d9f3      	bls.n	80005cc <StartEncoder+0x2b0>
	  for (int i = 0; i < 11; i++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	657b      	str	r3, [r7, #84]	; 0x54
 80005e8:	e021      	b.n	800062e <StartEncoder+0x312>
	  {
		  for (int b = 0; b < 3; b++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	653b      	str	r3, [r7, #80]	; 0x50
 80005ee:	e018      	b.n	8000622 <StartEncoder+0x306>
 80005f0:	40010c00 	.word	0x40010c00
 80005f4:	20002570 	.word	0x20002570
		  {
			  vfd.arr2[i][b] = (temp>>(b<<3))&0xFF;
 80005f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80005fe:	fa22 f303 	lsr.w	r3, r2, r3
 8000602:	b2d9      	uxtb	r1, r3
 8000604:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000610:	441a      	add	r2, r3
 8000612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000614:	4413      	add	r3, r2
 8000616:	3b70      	subs	r3, #112	; 0x70
 8000618:	460a      	mov	r2, r1
 800061a:	701a      	strb	r2, [r3, #0]
		  for (int b = 0; b < 3; b++)
 800061c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800061e:	3301      	adds	r3, #1
 8000620:	653b      	str	r3, [r7, #80]	; 0x50
 8000622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000624:	2b02      	cmp	r3, #2
 8000626:	dde7      	ble.n	80005f8 <StartEncoder+0x2dc>
	  for (int i = 0; i < 11; i++)
 8000628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800062a:	3301      	adds	r3, #1
 800062c:	657b      	str	r3, [r7, #84]	; 0x54
 800062e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000630:	2b0a      	cmp	r3, #10
 8000632:	ddda      	ble.n	80005ea <StartEncoder+0x2ce>
		  }


	  }
	  data = 0b11000000; // command 3, set address to 0
 8000634:	23c0      	movs	r3, #192	; 0xc0
 8000636:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063e:	4890      	ldr	r0, [pc, #576]	; (8000880 <StartEncoder+0x564>)
 8000640:	f002 fd67 	bl	8003112 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000644:	f107 010f 	add.w	r1, r7, #15
 8000648:	f04f 33ff 	mov.w	r3, #4294967295
 800064c:	2201      	movs	r2, #1
 800064e:	488d      	ldr	r0, [pc, #564]	; (8000884 <StartEncoder+0x568>)
 8000650:	f004 fffe 	bl	8005650 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000654:	f107 0110 	add.w	r1, r7, #16
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
 800065c:	2221      	movs	r2, #33	; 0x21
 800065e:	4889      	ldr	r0, [pc, #548]	; (8000884 <StartEncoder+0x568>)
 8000660:	f004 fff6 	bl	8005650 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066a:	4885      	ldr	r0, [pc, #532]	; (8000880 <StartEncoder+0x564>)
 800066c:	f002 fd51 	bl	8003112 <HAL_GPIO_WritePin>
	  osDelay(200);
 8000670:	20c8      	movs	r0, #200	; 0xc8
 8000672:	f009 ff81 	bl	800a578 <osDelay>
  for (int j = 0; j < 17; j++)
 8000676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000678:	3301      	adds	r3, #1
 800067a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800067c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800067e:	2b10      	cmp	r3, #16
 8000680:	dd9c      	ble.n	80005bc <StartEncoder+0x2a0>
  }

  osDelay(500);
 8000682:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000686:	f009 ff77 	bl	800a578 <osDelay>

  for (int a = 0; a < sizeof(vfd.arr1); a++)
 800068a:	2300      	movs	r3, #0
 800068c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800068e:	e008      	b.n	80006a2 <StartEncoder+0x386>
	  vfd.arr1[a] = 0;
 8000690:	f107 0210 	add.w	r2, r7, #16
 8000694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000696:	4413      	add	r3, r2
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 800069c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800069e:	3301      	adds	r3, #1
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80006a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006a4:	2b20      	cmp	r3, #32
 80006a6:	d9f3      	bls.n	8000690 <StartEncoder+0x374>

  for (int j = 0; j < 17; j++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80006ac:	e059      	b.n	8000762 <StartEncoder+0x446>
  {
	  uint32_t temp = 1<<j;
 80006ae:	2201      	movs	r2, #1
 80006b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  for (int i = 0; i < 11; i++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
 80006bc:	e02a      	b.n	8000714 <StartEncoder+0x3f8>
	  {
		  for (int b = 0; b < 3; b++)
 80006be:	2300      	movs	r3, #0
 80006c0:	643b      	str	r3, [r7, #64]	; 0x40
 80006c2:	e021      	b.n	8000708 <StartEncoder+0x3ec>
		  {
			  vfd.arr2[i][b] |= (temp>>(b<<3))&0xFF;
 80006c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80006d0:	441a      	add	r2, r3
 80006d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006d4:	4413      	add	r3, r2
 80006d6:	3b70      	subs	r3, #112	; 0x70
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006dc:	00db      	lsls	r3, r3, #3
 80006de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80006e0:	fa21 f303 	lsr.w	r3, r1, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2d9      	uxtb	r1, r3
 80006ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80006ec:	4613      	mov	r3, r2
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	4413      	add	r3, r2
 80006f2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80006f6:	441a      	add	r2, r3
 80006f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006fa:	4413      	add	r3, r2
 80006fc:	3b70      	subs	r3, #112	; 0x70
 80006fe:	460a      	mov	r2, r1
 8000700:	701a      	strb	r2, [r3, #0]
		  for (int b = 0; b < 3; b++)
 8000702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000704:	3301      	adds	r3, #1
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
 8000708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800070a:	2b02      	cmp	r3, #2
 800070c:	ddda      	ble.n	80006c4 <StartEncoder+0x3a8>
	  for (int i = 0; i < 11; i++)
 800070e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000710:	3301      	adds	r3, #1
 8000712:	647b      	str	r3, [r7, #68]	; 0x44
 8000714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000716:	2b0a      	cmp	r3, #10
 8000718:	ddd1      	ble.n	80006be <StartEncoder+0x3a2>
		  }


	  }
	  data = 0b11000000; // command 3, set address to 0
 800071a:	23c0      	movs	r3, #192	; 0xc0
 800071c:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000724:	4856      	ldr	r0, [pc, #344]	; (8000880 <StartEncoder+0x564>)
 8000726:	f002 fcf4 	bl	8003112 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800072a:	f107 010f 	add.w	r1, r7, #15
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	2201      	movs	r2, #1
 8000734:	4853      	ldr	r0, [pc, #332]	; (8000884 <StartEncoder+0x568>)
 8000736:	f004 ff8b 	bl	8005650 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 800073a:	f107 0110 	add.w	r1, r7, #16
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	2221      	movs	r2, #33	; 0x21
 8000744:	484f      	ldr	r0, [pc, #316]	; (8000884 <StartEncoder+0x568>)
 8000746:	f004 ff83 	bl	8005650 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000750:	484b      	ldr	r0, [pc, #300]	; (8000880 <StartEncoder+0x564>)
 8000752:	f002 fcde 	bl	8003112 <HAL_GPIO_WritePin>
	  osDelay(150);
 8000756:	2096      	movs	r0, #150	; 0x96
 8000758:	f009 ff0e 	bl	800a578 <osDelay>
  for (int j = 0; j < 17; j++)
 800075c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800075e:	3301      	adds	r3, #1
 8000760:	64bb      	str	r3, [r7, #72]	; 0x48
 8000762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000764:	2b10      	cmp	r3, #16
 8000766:	dda2      	ble.n	80006ae <StartEncoder+0x392>

  /* Infinite loop */
  for(;;)
  {

	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 8000768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076c:	4844      	ldr	r0, [pc, #272]	; (8000880 <StartEncoder+0x564>)
 800076e:	f002 fcb9 	bl	80030e4 <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d003      	beq.n	8000780 <StartEncoder+0x464>
	  {
		  released = true;
 8000778:	4b43      	ldr	r3, [pc, #268]	; (8000888 <StartEncoder+0x56c>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
 800077e:	e015      	b.n	80007ac <StartEncoder+0x490>
	  } else if (released)
 8000780:	4b41      	ldr	r3, [pc, #260]	; (8000888 <StartEncoder+0x56c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d011      	beq.n	80007ac <StartEncoder+0x490>
	  {
		  released = false;
 8000788:	4b3f      	ldr	r3, [pc, #252]	; (8000888 <StartEncoder+0x56c>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
		  invert = !invert;
 800078e:	4b3f      	ldr	r3, [pc, #252]	; (800088c <StartEncoder+0x570>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	bf14      	ite	ne
 8000796:	2301      	movne	r3, #1
 8000798:	2300      	moveq	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	f083 0301 	eor.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b38      	ldr	r3, [pc, #224]	; (800088c <StartEncoder+0x570>)
 80007aa:	701a      	strb	r2, [r3, #0]
	  }

	  data = 0b01000001; // command 2, write to LED port
 80007ac:	2341      	movs	r3, #65	; 0x41
 80007ae:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b6:	4832      	ldr	r0, [pc, #200]	; (8000880 <StartEncoder+0x564>)
 80007b8:	f002 fcab 	bl	8003112 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80007bc:	f107 010f 	add.w	r1, r7, #15
 80007c0:	f04f 33ff 	mov.w	r3, #4294967295
 80007c4:	2201      	movs	r2, #1
 80007c6:	482f      	ldr	r0, [pc, #188]	; (8000884 <StartEncoder+0x568>)
 80007c8:	f004 ff42 	bl	8005650 <HAL_SPI_Transmit>
	  osDelay(10);
 80007cc:	200a      	movs	r0, #10
 80007ce:	f009 fed3 	bl	800a578 <osDelay>

	  data = ~(1<<((encoder_value >> 2)&0b11));
 80007d2:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <StartEncoder+0x574>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	089b      	lsrs	r3, r3, #2
 80007d8:	b29b      	uxth	r3, r3
 80007da:	f003 0303 	and.w	r3, r3, #3
 80007de:	2201      	movs	r2, #1
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	43db      	mvns	r3, r3
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	73fb      	strb	r3, [r7, #15]
//	  if (invert)
//		  data =~data;
	  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, invert);
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <StartEncoder+0x570>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	2120      	movs	r1, #32
 80007f4:	4822      	ldr	r0, [pc, #136]	; (8000880 <StartEncoder+0x564>)
 80007f6:	f002 fc8c 	bl	8003112 <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80007fa:	f107 010f 	add.w	r1, r7, #15
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	2201      	movs	r2, #1
 8000804:	481f      	ldr	r0, [pc, #124]	; (8000884 <StartEncoder+0x568>)
 8000806:	f004 ff23 	bl	8005650 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000810:	481b      	ldr	r0, [pc, #108]	; (8000880 <StartEncoder+0x564>)
 8000812:	f002 fc7e 	bl	8003112 <HAL_GPIO_WritePin>

	  osDelay(10);
 8000816:	200a      	movs	r0, #10
 8000818:	f009 feae 	bl	800a578 <osDelay>
	  data = 0b10000000; // command 4
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	73fb      	strb	r3, [r7, #15]
	  data |= invert<<3; // enable/disable display
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <StartEncoder+0x570>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	b25a      	sxtb	r2, r3
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	b25b      	sxtb	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b25b      	sxtb	r3, r3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	73fb      	strb	r3, [r7, #15]
	  data |= (encoder_value >> 2)&0b111; // set brightness
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <StartEncoder+0x574>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	089b      	lsrs	r3, r3, #2
 800083a:	b29b      	uxth	r3, r3
 800083c:	b25b      	sxtb	r3, r3
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	b25a      	sxtb	r2, r3
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	b25b      	sxtb	r3, r3
 8000848:	4313      	orrs	r3, r2
 800084a:	b25b      	sxtb	r3, r3
 800084c:	b2db      	uxtb	r3, r3
 800084e:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000856:	480a      	ldr	r0, [pc, #40]	; (8000880 <StartEncoder+0x564>)
 8000858:	f002 fc5b 	bl	8003112 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800085c:	f107 010f 	add.w	r1, r7, #15
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	2201      	movs	r2, #1
 8000866:	4807      	ldr	r0, [pc, #28]	; (8000884 <StartEncoder+0x568>)
 8000868:	f004 fef2 	bl	8005650 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000872:	4803      	ldr	r0, [pc, #12]	; (8000880 <StartEncoder+0x564>)
 8000874:	f002 fc4d 	bl	8003112 <HAL_GPIO_WritePin>
	  osDelay(10);
 8000878:	200a      	movs	r0, #10
 800087a:	f009 fe7d 	bl	800a578 <osDelay>
	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 800087e:	e773      	b.n	8000768 <StartEncoder+0x44c>
 8000880:	40010c00 	.word	0x40010c00
 8000884:	20002570 	.word	0x20002570
 8000888:	20000000 	.word	0x20000000
 800088c:	20000001 	.word	0x20000001
 8000890:	200001ac 	.word	0x200001ac

08000894 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_UART_RxCpltCallback+0x44>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d115      	bne.n	80008d0 <HAL_UART_RxCpltCallback+0x3c>
		return;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]


   /* Notify the task that the transmission is complete by setting the TX_BIT
   in the task's notification value. */
	vTaskNotifyGiveFromISR( UARTtaskHandle,
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_UART_RxCpltCallback+0x48>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f107 020c 	add.w	r2, r7, #12
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f00b fcba 	bl	800c22c <vTaskNotifyGiveFromISR>

   /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
   should be performed to ensure the interrupt returns directly to the highest
   priority task.  The macro used for this purpose is dependent on the port in
   use and may be called portEND_SWITCHING_ISR(). */
   portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d009      	beq.n	80008d2 <HAL_UART_RxCpltCallback+0x3e>
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_UART_RxCpltCallback+0x4c>)
 80008c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	f3bf 8f4f 	dsb	sy
 80008ca:	f3bf 8f6f 	isb	sy
 80008ce:	e000      	b.n	80008d2 <HAL_UART_RxCpltCallback+0x3e>
		return;
 80008d0:	bf00      	nop
}
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20002610 	.word	0x20002610
 80008dc:	20002480 	.word	0x20002480
 80008e0:	e000ed04 	.word	0xe000ed04

080008e4 <process_encoder>:

void process_encoder(void)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 80008ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ee:	483c      	ldr	r0, [pc, #240]	; (80009e0 <process_encoder+0xfc>)
 80008f0:	f002 fbf8 	bl	80030e4 <HAL_GPIO_ReadPin>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461c      	mov	r4, r3
		   0b10*HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin));
 80008f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fc:	4838      	ldr	r0, [pc, #224]	; (80009e0 <process_encoder+0xfc>)
 80008fe:	f002 fbf1 	bl	80030e4 <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	b2db      	uxtb	r3, r3
 8000908:	4423      	add	r3, r4
 800090a:	71fb      	strb	r3, [r7, #7]
	switch(old)
 800090c:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <process_encoder+0x100>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b03      	cmp	r3, #3
 8000912:	d85e      	bhi.n	80009d2 <process_encoder+0xee>
 8000914:	a201      	add	r2, pc, #4	; (adr r2, 800091c <process_encoder+0x38>)
 8000916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091a:	bf00      	nop
 800091c:	08000953 	.word	0x08000953
 8000920:	08000979 	.word	0x08000979
 8000924:	0800092d 	.word	0x0800092d
 8000928:	0800099f 	.word	0x0800099f
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	2b03      	cmp	r3, #3
 8000930:	d105      	bne.n	800093e <process_encoder+0x5a>
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <process_encoder+0x104>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	3301      	adds	r3, #1
 8000938:	b29a      	uxth	r2, r3
 800093a:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <process_encoder+0x104>)
 800093c:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d13f      	bne.n	80009c4 <process_encoder+0xe0>
 8000944:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <process_encoder+0x104>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	3b01      	subs	r3, #1
 800094a:	b29a      	uxth	r2, r3
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <process_encoder+0x104>)
 800094e:	801a      	strh	r2, [r3, #0]
			break;
 8000950:	e038      	b.n	80009c4 <process_encoder+0xe0>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d105      	bne.n	8000964 <process_encoder+0x80>
 8000958:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <process_encoder+0x104>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	3301      	adds	r3, #1
 800095e:	b29a      	uxth	r2, r3
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <process_encoder+0x104>)
 8000962:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d12e      	bne.n	80009c8 <process_encoder+0xe4>
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <process_encoder+0x104>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	3b01      	subs	r3, #1
 8000970:	b29a      	uxth	r2, r3
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <process_encoder+0x104>)
 8000974:	801a      	strh	r2, [r3, #0]
			break;
 8000976:	e027      	b.n	80009c8 <process_encoder+0xe4>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d105      	bne.n	800098a <process_encoder+0xa6>
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <process_encoder+0x104>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	3301      	adds	r3, #1
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <process_encoder+0x104>)
 8000988:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b03      	cmp	r3, #3
 800098e:	d11d      	bne.n	80009cc <process_encoder+0xe8>
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <process_encoder+0x104>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	3b01      	subs	r3, #1
 8000996:	b29a      	uxth	r2, r3
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <process_encoder+0x104>)
 800099a:	801a      	strh	r2, [r3, #0]
			break;
 800099c:	e016      	b.n	80009cc <process_encoder+0xe8>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d105      	bne.n	80009b0 <process_encoder+0xcc>
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <process_encoder+0x104>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	3301      	adds	r3, #1
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <process_encoder+0x104>)
 80009ae:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d10c      	bne.n	80009d0 <process_encoder+0xec>
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <process_encoder+0x104>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	b29a      	uxth	r2, r3
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <process_encoder+0x104>)
 80009c0:	801a      	strh	r2, [r3, #0]
			break;
 80009c2:	e005      	b.n	80009d0 <process_encoder+0xec>
			break;
 80009c4:	bf00      	nop
 80009c6:	e004      	b.n	80009d2 <process_encoder+0xee>
			break;
 80009c8:	bf00      	nop
 80009ca:	e002      	b.n	80009d2 <process_encoder+0xee>
			break;
 80009cc:	bf00      	nop
 80009ce:	e000      	b.n	80009d2 <process_encoder+0xee>
			break;
 80009d0:	bf00      	nop
			}
		}
	old = new;
 80009d2:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <process_encoder+0x100>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	7013      	strb	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd90      	pop	{r4, r7, pc}
 80009e0:	40010c00 	.word	0x40010c00
 80009e4:	200001ae 	.word	0x200001ae
 80009e8:	200001ac 	.word	0x200001ac

080009ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a00:	4b49      	ldr	r3, [pc, #292]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a48      	ldr	r2, [pc, #288]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b46      	ldr	r3, [pc, #280]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0310 	and.w	r3, r3, #16
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a18:	4b43      	ldr	r3, [pc, #268]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a42      	ldr	r2, [pc, #264]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a1e:	f043 0320 	orr.w	r3, r3, #32
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b40      	ldr	r3, [pc, #256]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b3d      	ldr	r3, [pc, #244]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a3c      	ldr	r2, [pc, #240]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b3a      	ldr	r3, [pc, #232]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a48:	4b37      	ldr	r3, [pc, #220]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a36      	ldr	r2, [pc, #216]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a4e:	f043 0308 	orr.w	r3, r3, #8
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b34      	ldr	r3, [pc, #208]	; (8000b28 <MX_GPIO_Init+0x13c>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0308 	and.w	r3, r3, #8
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a66:	4831      	ldr	r0, [pc, #196]	; (8000b2c <MX_GPIO_Init+0x140>)
 8000a68:	f002 fb53 	bl	8003112 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 8000a72:	482f      	ldr	r0, [pc, #188]	; (8000b30 <MX_GPIO_Init+0x144>)
 8000a74:	f002 fb4d 	bl	8003112 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a7e:	482d      	ldr	r0, [pc, #180]	; (8000b34 <MX_GPIO_Init+0x148>)
 8000a80:	f002 fb47 	bl	8003112 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4823      	ldr	r0, [pc, #140]	; (8000b2c <MX_GPIO_Init+0x140>)
 8000a9e:	f002 f99d 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa6:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <MX_GPIO_Init+0x14c>)
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	481f      	ldr	r0, [pc, #124]	; (8000b34 <MX_GPIO_Init+0x148>)
 8000ab6:	f002 f991 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin|enc_s_Pin;
 8000aba:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	4619      	mov	r1, r3
 8000ace:	4818      	ldr	r0, [pc, #96]	; (8000b30 <MX_GPIO_Init+0x144>)
 8000ad0:	f002 f984 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000ad4:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 8000ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	4619      	mov	r1, r3
 8000aec:	4810      	ldr	r0, [pc, #64]	; (8000b30 <MX_GPIO_Init+0x144>)
 8000aee:	f002 f975 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480a      	ldr	r0, [pc, #40]	; (8000b34 <MX_GPIO_Init+0x148>)
 8000b0c:	f002 f966 	bl	8002ddc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2105      	movs	r1, #5
 8000b14:	2006      	movs	r0, #6
 8000b16:	f002 f886 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b1a:	2006      	movs	r0, #6
 8000b1c:	f002 f89f 	bl	8002c5e <HAL_NVIC_EnableIRQ>

}
 8000b20:	bf00      	nop
 8000b22:	3720      	adds	r7, #32
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40011000 	.word	0x40011000
 8000b30:	40010c00 	.word	0x40010c00
 8000b34:	40010800 	.word	0x40010800
 8000b38:	10110000 	.word	0x10110000

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b40:	f001 ff8a 	bl	8002a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b44:	f000 f80d 	bl	8000b62 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f7ff ff50 	bl	80009ec <MX_GPIO_Init>
  MX_SPI2_Init();
 8000b4c:	f001 fd92 	bl	8002674 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000b50:	f001 fee0 	bl	8002914 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000b54:	f009 fc00 	bl	800a358 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000b58:	f7ff fb0c 	bl	8000174 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b5c:	f009 fc2e 	bl	800a3bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <main+0x24>

08000b62 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b094      	sub	sp, #80	; 0x50
 8000b66:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6c:	2228      	movs	r2, #40	; 0x28
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f00d f829 	bl	800dbc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b92:	2301      	movs	r3, #1
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bb0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 ffc2 	bl	8004b44 <HAL_RCC_OscConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000bc6:	f000 f839 	bl	8000c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bca:	230f      	movs	r3, #15
 8000bcc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bda:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2102      	movs	r1, #2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f004 fa2c 	bl	8005044 <HAL_RCC_ClockConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bf2:	f000 f823 	bl	8000c3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4618      	mov	r0, r3
 8000c02:	f004 fbeb 	bl	80053dc <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c0c:	f000 f816 	bl	8000c3c <Error_Handler>
  }
}
 8000c10:	bf00      	nop
 8000c12:	3750      	adds	r7, #80	; 0x50
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d101      	bne.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c2a:	f001 ff2b 	bl	8002a84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40012c00 	.word	0x40012c00

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>

08000c46 <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b085      	sub	sp, #20
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	5c8a      	ldrb	r2, [r1, r2]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b3f      	cmp	r3, #63	; 0x3f
 8000c64:	dd02      	ble.n	8000c6c <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3b40      	subs	r3, #64	; 0x40
 8000c6a:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	5cd3      	ldrb	r3, [r2, r3]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <hist_is_space_for_new+0x1a>
		return true;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e01e      	b.n	8000cd4 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	db0c      	blt.n	8000cbc <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4413      	add	r3, r2
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	da0c      	bge.n	8000cd2 <hist_is_space_for_new+0x56>
			return true;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e00b      	b.n	8000cd4 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	da01      	bge.n	8000cd2 <hist_is_space_for_new+0x56>
			return true;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <hist_is_space_for_new+0x58>
	}
	return false;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr

08000cde <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b3e      	cmp	r3, #62	; 0x3e
 8000cee:	dc61      	bgt.n	8000db4 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8000cf0:	e002      	b.n	8000cf8 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f7ff ffa7 	bl	8000c46 <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f7ff ffbe 	bl	8000c7c <hist_is_space_for_new>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f5      	beq.n	8000cf2 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	5cd3      	ldrb	r3, [r2, r3]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d105      	bne.n	8000d1e <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	b2d1      	uxtb	r1, r2
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	da0a      	bge.n	8000d42 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	3301      	adds	r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f00c ff1c 	bl	800db78 <memcpy>
 8000d40:	e018      	b.n	8000d74 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000d4a:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	3301      	adds	r3, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f00c ff0c 	bl	800db78 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	18d1      	adds	r1, r2, r3
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	f00c ff02 	bl	800db78 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	b2d1      	uxtb	r1, r2
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4413      	add	r3, r2
 8000d88:	1c5a      	adds	r2, r3, #1
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	2b3f      	cmp	r3, #63	; 0x3f
 8000d94:	dd05      	ble.n	8000da2 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	2100      	movs	r1, #0
 8000daa:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2200      	movs	r2, #0
 8000db0:	649a      	str	r2, [r3, #72]	; 0x48
 8000db2:	e000      	b.n	8000db6 <hist_save_line+0xd8>
		return;
 8000db4:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08c      	sub	sp, #48	; 0x30
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8000dd2:	e010      	b.n	8000df6 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd8:	4413      	add	r3, r2
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000de0:	4413      	add	r3, r2
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8000de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de6:	2b3f      	cmp	r3, #63	; 0x3f
 8000de8:	dd02      	ble.n	8000df0 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8000dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dec:	3b40      	subs	r3, #64	; 0x40
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8000df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df2:	3301      	adds	r3, #1
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1e8      	bne.n	8000dd4 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d176      	bne.n	8000ef6 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f2c0 80d6 	blt.w	8000fc0 <hist_restore_line+0x204>
			int header = pThis->begin;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000e1e:	e010      	b.n	8000e42 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	4413      	add	r3, r2
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e2c:	4413      	add	r3, r2
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	2b3f      	cmp	r3, #63	; 0x3f
 8000e34:	dd02      	ble.n	8000e3c <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	3b40      	subs	r3, #64	; 0x40
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8000e3c:	6a3b      	ldr	r3, [r7, #32]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	4413      	add	r3, r2
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d007      	beq.n	8000e5e <hist_restore_line+0xa2>
 8000e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e50:	6a3b      	ldr	r3, [r7, #32]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d1e0      	bne.n	8000e20 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	4413      	add	r3, r2
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 80aa 	beq.w	8000fc0 <hist_restore_line+0x204>
					pThis->cur++;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e70:	1c5a      	adds	r2, r3, #1
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	4413      	add	r3, r2
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	4413      	add	r3, r2
 8000e84:	2b3f      	cmp	r3, #63	; 0x3f
 8000e86:	dc11      	bgt.n	8000eac <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8000e88:	2233      	movs	r2, #51	; 0x33
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	68b8      	ldr	r0, [r7, #8]
 8000e8e:	f00c fe9b 	bl	800dbc8 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	3301      	adds	r3, #1
 8000e98:	18d1      	adds	r1, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	4413      	add	r3, r2
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68b8      	ldr	r0, [r7, #8]
 8000ea6:	f00c fe67 	bl	800db78 <memcpy>
 8000eaa:	e01f      	b.n	8000eec <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000eb2:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8000eb4:	2233      	movs	r2, #51	; 0x33
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	68b8      	ldr	r0, [r7, #8]
 8000eba:	f00c fe85 	bl	800dbc8 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	68b8      	ldr	r0, [r7, #8]
 8000ecc:	f00c fe54 	bl	800db78 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	18d0      	adds	r0, r2, r3
 8000ed6:	68f9      	ldr	r1, [r7, #12]
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	f00c fe46 	bl	800db78 <memcpy>
				}
				return pThis->ring_buf[header];
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	4413      	add	r3, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	e066      	b.n	8000fc4 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	dd5e      	ble.n	8000fbc <hist_restore_line+0x200>
				pThis->cur--;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f02:	1e5a      	subs	r2, r3, #1
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8000f12:	e010      	b.n	8000f36 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	4413      	add	r3, r2
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	69fa      	ldr	r2, [r7, #28]
 8000f20:	4413      	add	r3, r2
 8000f22:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	2b3f      	cmp	r3, #63	; 0x3f
 8000f28:	dd02      	ble.n	8000f30 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b40      	subs	r3, #64	; 0x40
 8000f2e:	61fb      	str	r3, [r7, #28]
				j++;
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	3301      	adds	r3, #1
 8000f34:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d006      	beq.n	8000f50 <hist_restore_line+0x194>
 8000f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	1ad2      	subs	r2, r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d1e1      	bne.n	8000f14 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	4413      	add	r3, r2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f60:	dc0c      	bgt.n	8000f7c <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	3301      	adds	r3, #1
 8000f68:	18d1      	adds	r1, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	4413      	add	r3, r2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68b8      	ldr	r0, [r7, #8]
 8000f76:	f00c fdff 	bl	800db78 <memcpy>
 8000f7a:	e01a      	b.n	8000fb2 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000f82:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	68b8      	ldr	r0, [r7, #8]
 8000f92:	f00c fdf1 	bl	800db78 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	18d0      	adds	r0, r2, r3
 8000f9c:	68f9      	ldr	r1, [r7, #12]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	f00c fde3 	bl	800db78 <memcpy>
			}
			return pThis->ring_buf[header];
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	e003      	b.n	8000fc4 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e001      	b.n	8000fc4 <hist_restore_line+0x208>
		}
	}
	return -1;
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3730      	adds	r7, #48	; 0x30
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8000fe0:	e002      	b.n	8000fe8 <split+0x1c>
			ind++;
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4413      	add	r3, r2
 8000fee:	3354      	adds	r3, #84	; 0x54
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d103      	bne.n	8000ffe <split+0x32>
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	dbf1      	blt.n	8000fe2 <split+0x16>
		}
		if (!(ind < limit)) return i;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	429a      	cmp	r2, r3
 8001004:	db01      	blt.n	800100a <split+0x3e>
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	e024      	b.n	8001054 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	1c58      	adds	r0, r3, #1
 8001016:	6178      	str	r0, [r7, #20]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	4403      	add	r3, r0
 800101e:	440a      	add	r2, r1
 8001020:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b04      	cmp	r3, #4
 8001026:	dd05      	ble.n	8001034 <split+0x68>
			return -1;
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
 800102c:	e012      	b.n	8001054 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4413      	add	r3, r2
 800103a:	3354      	adds	r3, #84	; 0x54
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <split+0x7e>
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	429a      	cmp	r2, r3
 8001048:	dbf1      	blt.n	800102e <split+0x62>
		}
		if (!(ind < limit)) return i;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	429a      	cmp	r2, r3
 8001050:	dbca      	blt.n	8000fe8 <split+0x1c>
 8001052:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8001054:	4618      	mov	r0, r3
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001070:	4610      	mov	r0, r2
 8001072:	4798      	blx	r3
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <terminal_backspace+0x1c>)
 800108c:	4798      	blx	r3
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	0800dc78 	.word	0x0800dc78

0800109c <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010aa:	4803      	ldr	r0, [pc, #12]	; (80010b8 <terminal_newline+0x1c>)
 80010ac:	4798      	blx	r3
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	0800dc80 	.word	0x0800dc80

080010bc <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	2300      	movs	r3, #0
 80010cc:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d8:	d235      	bcs.n	8001146 <u16bit_to_str+0x8a>
		while (nmb > 0) {
 80010da:	e01a      	b.n	8001112 <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <u16bit_to_str+0x9c>)
 80010e0:	fba3 2301 	umull	r2, r3, r3, r1
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	1aca      	subs	r2, r1, r3
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	1c59      	adds	r1, r3, #1
 80010f6:	6179      	str	r1, [r7, #20]
 80010f8:	3230      	adds	r2, #48	; 0x30
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	f107 0118 	add.w	r1, r7, #24
 8001100:	440b      	add	r3, r1
 8001102:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a13      	ldr	r2, [pc, #76]	; (8001158 <u16bit_to_str+0x9c>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1e1      	bne.n	80010dc <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	e00f      	b.n	800113e <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	1e5a      	subs	r2, r3, #1
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	1c59      	adds	r1, r3, #1
 800112a:	6039      	str	r1, [r7, #0]
 800112c:	f107 0118 	add.w	r1, r7, #24
 8001130:	440a      	add	r2, r1
 8001132:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001136:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	3301      	adds	r3, #1
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	429a      	cmp	r2, r3
 8001144:	dbeb      	blt.n	800111e <u16bit_to_str+0x62>
	}
	*buf = '\0';
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
	return buf;
 800114c:	683b      	ldr	r3, [r7, #0]
}
 800114e:	4618      	mov	r0, r3
 8001150:	371c      	adds	r7, #28
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	cccccccd 	.word	0xcccccccd

0800115c <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <terminal_move_cursor+0x94>)
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	4611      	mov	r1, r2
 8001180:	8019      	strh	r1, [r3, #0]
 8001182:	3302      	adds	r3, #2
 8001184:	0c12      	lsrs	r2, r2, #16
 8001186:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	dd0f      	ble.n	80011ae <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	3302      	adds	r3, #2
 8001196:	4619      	mov	r1, r3
 8001198:	4610      	mov	r0, r2
 800119a:	f7ff ff8f 	bl	80010bc <u16bit_to_str>
 800119e:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	4914      	ldr	r1, [pc, #80]	; (80011f4 <terminal_move_cursor+0x98>)
 80011a4:	461a      	mov	r2, r3
 80011a6:	460b      	mov	r3, r1
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	8013      	strh	r3, [r2, #0]
 80011ac:	e013      	b.n	80011d6 <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	da18      	bge.n	80011e6 <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	425b      	negs	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	3302      	adds	r3, #2
 80011c0:	4619      	mov	r1, r3
 80011c2:	4610      	mov	r0, r2
 80011c4:	f7ff ff7a 	bl	80010bc <u16bit_to_str>
 80011c8:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	490a      	ldr	r1, [pc, #40]	; (80011f8 <terminal_move_cursor+0x9c>)
 80011ce:	461a      	mov	r2, r3
 80011d0:	460b      	mov	r3, r1
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011dc:	f107 020c 	add.w	r2, r7, #12
 80011e0:	4610      	mov	r0, r2
 80011e2:	4798      	blx	r3
 80011e4:	e000      	b.n	80011e8 <terminal_move_cursor+0x8c>
		return;
 80011e6:	bf00      	nop
}
 80011e8:	3720      	adds	r7, #32
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	0800dc84 	.word	0x0800dc84
 80011f4:	0800dc88 	.word	0x0800dc88
 80011f8:	0800dc8c 	.word	0x0800dc8c

080011fc <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4a15      	ldr	r2, [pc, #84]	; (8001260 <terminal_reset_cursor+0x64>)
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	4611      	mov	r1, r2
 800120e:	8019      	strh	r1, [r3, #0]
 8001210:	3302      	adds	r3, #2
 8001212:	0c12      	lsrs	r2, r2, #16
 8001214:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	3302      	adds	r3, #2
 800121c:	4619      	mov	r1, r3
 800121e:	203a      	movs	r0, #58	; 0x3a
 8001220:	f7ff ff4c 	bl	80010bc <u16bit_to_str>
 8001224:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <terminal_reset_cursor+0x68>)
 800122a:	6810      	ldr	r0, [r2, #0]
 800122c:	6018      	str	r0, [r3, #0]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3303      	adds	r3, #3
 8001232:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8001234:	69f9      	ldr	r1, [r7, #28]
 8001236:	2005      	movs	r0, #5
 8001238:	f7ff ff40 	bl	80010bc <u16bit_to_str>
 800123c:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	4909      	ldr	r1, [pc, #36]	; (8001268 <terminal_reset_cursor+0x6c>)
 8001242:	461a      	mov	r2, r3
 8001244:	460b      	mov	r3, r1
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001250:	f107 020c 	add.w	r2, r7, #12
 8001254:	4610      	mov	r0, r2
 8001256:	4798      	blx	r3
}
 8001258:	bf00      	nop
 800125a:	3720      	adds	r7, #32
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	0800dc84 	.word	0x0800dc84
 8001264:	0800dc90 	.word	0x0800dc90
 8001268:	0800dc88 	.word	0x0800dc88

0800126c <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800127e:	4816      	ldr	r0, [pc, #88]	; (80012d8 <terminal_print_line+0x6c>)
 8001280:	4798      	blx	r3

	char nch [] = {0,0};
 8001282:	2300      	movs	r3, #0
 8001284:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	e014      	b.n	80012b6 <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	4413      	add	r3, r2
 8001292:	3354      	adds	r3, #84	; 0x54
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8001298:	7c3b      	ldrb	r3, [r7, #16]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <terminal_print_line+0x36>
			nch[0] = ' ';
 800129e:	2320      	movs	r3, #32
 80012a0:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012a8:	f107 0210 	add.w	r2, r7, #16
 80012ac:	4610      	mov	r0, r2
 80012ae:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	3301      	adds	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	429a      	cmp	r2, r3
 80012c0:	dbe4      	blt.n	800128c <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f7ff ff9a 	bl	80011fc <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f7ff ff46 	bl	800115c <terminal_move_cursor>
}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	0800dc94 	.word	0x0800dc94

080012dc <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3354      	adds	r3, #84	; 0x54
 80012ea:	2233      	movs	r2, #51	; 0x33
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00c fc6a 	bl	800dbc8 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3304      	adds	r3, #4
 80012f8:	2240      	movs	r2, #64	; 0x40
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00c fc63 	bl	800dbc8 <memset>
	pThis->ring_hist.begin = 0;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <microrl_init+0x78>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000004 	.word	0x20000004

08001358 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	1d18      	adds	r0, r3, #4
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3354      	adds	r3, #84	; 0x54
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fcfb 	bl	8000dbc <hist_restore_line>
 80013c6:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	db1a      	blt.n	8001404 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	3354      	adds	r3, #84	; 0x54
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff04 	bl	80011fc <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013fa:	461a      	mov	r2, r3
 80013fc:	2100      	movs	r1, #0
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff34 	bl	800126c <terminal_print_line>
	}
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	2b5b      	cmp	r3, #91	; 0x5b
 800141c:	d104      	bne.n	8001428 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
		return 0;
 8001424:	2300      	movs	r3, #0
 8001426:	e07b      	b.n	8001520 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d14f      	bne.n	80014d0 <escape_process+0xc4>
		if (ch == 'A') {
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	2b41      	cmp	r3, #65	; 0x41
 8001434:	d105      	bne.n	8001442 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 8001436:	2100      	movs	r1, #0
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ffb7 	bl	80013ac <hist_search>
#endif
			return 1;
 800143e:	2301      	movs	r3, #1
 8001440:	e06e      	b.n	8001520 <escape_process+0x114>
		} else if (ch == 'B') {
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	2b42      	cmp	r3, #66	; 0x42
 8001446:	d105      	bne.n	8001454 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8001448:	2101      	movs	r1, #1
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffae 	bl	80013ac <hist_search>
#endif
			return 1;
 8001450:	2301      	movs	r3, #1
 8001452:	e065      	b.n	8001520 <escape_process+0x114>
		} else if (ch == 'C') {
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	2b43      	cmp	r3, #67	; 0x43
 8001458:	d114      	bne.n	8001484 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001466:	429a      	cmp	r2, r3
 8001468:	da0a      	bge.n	8001480 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 800146a:	2101      	movs	r1, #1
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fe75 	bl	800115c <terminal_move_cursor>
				pThis->cursor++;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001480:	2301      	movs	r3, #1
 8001482:	e04d      	b.n	8001520 <escape_process+0x114>
		} else if (ch == 'D') {
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	2b44      	cmp	r3, #68	; 0x44
 8001488:	d112      	bne.n	80014b0 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001490:	2b00      	cmp	r3, #0
 8001492:	dd0b      	ble.n	80014ac <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff fe5f 	bl	800115c <terminal_move_cursor>
				pThis->cursor--;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014a4:	1e5a      	subs	r2, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e037      	b.n	8001520 <escape_process+0x114>
		} else if (ch == '7') {
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	2b37      	cmp	r3, #55	; 0x37
 80014b4:	d104      	bne.n	80014c0 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2202      	movs	r2, #2
 80014ba:	701a      	strb	r2, [r3, #0]
			return 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	e02f      	b.n	8001520 <escape_process+0x114>
		} else if (ch == '8') {
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	2b38      	cmp	r3, #56	; 0x38
 80014c4:	d12b      	bne.n	800151e <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2203      	movs	r2, #3
 80014ca:	701a      	strb	r2, [r3, #0]
			return 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e027      	b.n	8001520 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	2b7e      	cmp	r3, #126	; 0x7e
 80014d4:	d123      	bne.n	800151e <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d108      	bne.n	80014f0 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fe8c 	bl	80011fc <terminal_reset_cursor>
			pThis->cursor = 0;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e017      	b.n	8001520 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d112      	bne.n	800151e <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	4619      	mov	r1, r3
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fe27 	bl	800115c <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	2b32      	cmp	r3, #50	; 0x32
 8001540:	dc60      	bgt.n	8001604 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800154e:	4619      	mov	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	440b      	add	r3, r1
 8001554:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3354      	adds	r3, #84	; 0x54
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 8001560:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800156e:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8001570:	461a      	mov	r2, r3
 8001572:	f00c fb0f 	bl	800db94 <memmove>
		for (i = 0; i < len; i++) {
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	e025      	b.n	80015c8 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	441a      	add	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	440b      	add	r3, r1
 800158c:	7811      	ldrb	r1, [r2, #0]
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	4413      	add	r3, r2
 8001592:	460a      	mov	r2, r1
 8001594:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	4413      	add	r3, r2
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	4413      	add	r3, r2
 80015a6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015aa:	2b20      	cmp	r3, #32
 80015ac:	d109      	bne.n	80015c2 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	4413      	add	r3, r2
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	dbd5      	blt.n	800157c <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	441a      	add	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	441a      	add	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4413      	add	r3, r2
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <microrl_insert_text+0xde>
	}
	return false;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800161c:	2b00      	cmp	r3, #0
 800161e:	dd31      	ble.n	8001684 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fd2b 	bl	800107c <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001632:	3b01      	subs	r3, #1
 8001634:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3354      	adds	r3, #84	; 0x54
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 8001640:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8001652:	461a      	mov	r2, r3
 8001654:	f00c fa9e 	bl	800db94 <memmove>
		pThis->cursor--;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800165e:	1e5a      	subs	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167c:	1e5a      	subs	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f7fe fd62 	bl	8000164 <strlen>
 80016a0:	4603      	mov	r3, r0
 80016a2:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e019      	b.n	80016de <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe fd55 	bl	8000164 <strlen>
 80016ba:	4602      	mov	r2, r0
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d20a      	bcs.n	80016d8 <common_len+0x4c>
			shortest = arr[i];
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7fe fd48 	bl	8000164 <strlen>
 80016d4:	4603      	mov	r3, r0
 80016d6:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3301      	adds	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1de      	bne.n	80016aa <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e01f      	b.n	8001732 <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	e012      	b.n	800171e <common_len+0x92>
			if (shortest[i] != arr[j][i])
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4413      	add	r3, r2
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	440b      	add	r3, r1
 8001708:	6819      	ldr	r1, [r3, #0]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	440b      	add	r3, r1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <common_len+0x8c>
				return i;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	e011      	b.n	800173c <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	3301      	adds	r3, #1
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1e5      	bne.n	80016f8 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3301      	adds	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	429a      	cmp	r2, r3
 8001738:	dbdb      	blt.n	80016f2 <common_len+0x66>

	return i;
 800173a:	697b      	ldr	r3, [r7, #20]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8001744:	b5b0      	push	{r4, r5, r7, lr}
 8001746:	b08c      	sub	sp, #48	; 0x30
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 809c 	beq.w	8001890 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800175e:	f107 020c 	add.w	r2, r7, #12
 8001762:	4619      	mov	r1, r3
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fc31 	bl	8000fcc <split>
 800176a:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001772:	3b01      	subs	r3, #1
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800177c:	2b00      	cmp	r3, #0
 800177e:	d109      	bne.n	8001794 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8001780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800178c:	4413      	add	r3, r2
 800178e:	4a42      	ldr	r2, [pc, #264]	; (8001898 <microrl_get_complite+0x154>)
 8001790:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179a:	f107 020c 	add.w	r2, r7, #12
 800179e:	4611      	mov	r1, r2
 80017a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017a2:	4798      	blx	r3
 80017a4:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d071      	beq.n	8001892 <microrl_get_complite+0x14e>
		int i = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	3304      	adds	r3, #4
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d107      	bne.n	80017cc <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fccf 	bl	8000164 <strlen>
 80017c6:	4603      	mov	r3, r0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ca:	e026      	b.n	800181a <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 80017cc:	6a38      	ldr	r0, [r7, #32]
 80017ce:	f7ff ff5d 	bl	800168c <common_len>
 80017d2:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fc61 	bl	800109c <terminal_newline>
			while (compl_token [i] != NULL) {
 80017da:	e011      	b.n	8001800 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017e4:	0092      	lsls	r2, r2, #2
 80017e6:	6a39      	ldr	r1, [r7, #32]
 80017e8:	440a      	add	r2, r1
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	4610      	mov	r0, r2
 80017ee:	4798      	blx	r3
				pThis->print (" ");
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017f6:	4829      	ldr	r0, [pc, #164]	; (800189c <microrl_get_complite+0x158>)
 80017f8:	4798      	blx	r3
				i++;
 80017fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fc:	3301      	adds	r3, #1
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 8001800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	6a3a      	ldr	r2, [r7, #32]
 8001806:	4413      	add	r3, r2
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1e6      	bne.n	80017dc <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fc44 	bl	800109c <terminal_newline>
			print_prompt (pThis);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fc22 	bl	800105e <print_prompt>
		}
		
		if (len) {
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	2b00      	cmp	r3, #0
 800181e:	d02b      	beq.n	8001878 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	681c      	ldr	r4, [r3, #0]
 8001824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001826:	3b01      	subs	r3, #1
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800182e:	4413      	add	r3, r2
 8001830:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fc95 	bl	8000164 <strlen>
 800183a:	4603      	mov	r3, r0
 800183c:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 800183e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	3b01      	subs	r3, #1
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800184a:	4413      	add	r3, r2
 800184c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fc87 	bl	8000164 <strlen>
 8001856:	4603      	mov	r3, r0
 8001858:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 800185a:	461a      	mov	r2, r3
 800185c:	4629      	mov	r1, r5
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fe62 	bl	8001528 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	3304      	adds	r3, #4
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d104      	bne.n	8001878 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 800186e:	2201      	movs	r2, #1
 8001870:	490a      	ldr	r1, [pc, #40]	; (800189c <microrl_get_complite+0x158>)
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fe58 	bl	8001528 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fcbf 	bl	80011fc <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001884:	461a      	mov	r2, r3
 8001886:	2100      	movs	r1, #0
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff fcef 	bl	800126c <terminal_print_line>
 800188e:	e000      	b.n	8001892 <microrl_get_complite+0x14e>
		return;
 8001890:	bf00      	nop
	} 
}
 8001892:	3730      	adds	r7, #48	; 0x30
 8001894:	46bd      	mov	sp, r7
 8001896:	bdb0      	pop	{r4, r5, r7, pc}
 8001898:	0800dc98 	.word	0x0800dc98
 800189c:	0800dc9c 	.word	0x0800dc9c

080018a0 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fbf7 	bl	800109c <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	dd0a      	ble.n	80018ce <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	1d18      	adds	r0, r3, #4
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c8:	461a      	mov	r2, r3
 80018ca:	f7ff fa08 	bl	8000cde <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d4:	f107 0208 	add.w	r2, r7, #8
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fb76 	bl	8000fcc <split>
 80018e0:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d109      	bne.n	80018fe <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018f0:	4817      	ldr	r0, [pc, #92]	; (8001950 <new_line_handler+0xb0>)
 80018f2:	4798      	blx	r3
		pThis->print (ENDL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018fa:	4816      	ldr	r0, [pc, #88]	; (8001954 <new_line_handler+0xb4>)
 80018fc:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	2b00      	cmp	r3, #0
 8001902:	dd0c      	ble.n	800191e <new_line_handler+0x7e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001914:	f107 0208 	add.w	r2, r7, #8
 8001918:	4611      	mov	r1, r2
 800191a:	69f8      	ldr	r0, [r7, #28]
 800191c:	4798      	blx	r3
	print_prompt (pThis);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fb9d 	bl	800105e <print_prompt>
	pThis->cmdlen = 0;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3354      	adds	r3, #84	; 0x54
 8001938:	2233      	movs	r2, #51	; 0x33
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f00c f943 	bl	800dbc8 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	0800dca0 	.word	0x0800dca0
 8001954:	0800dc80 	.word	0x0800dc80

08001958 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	785b      	ldrb	r3, [r3, #1]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00d      	beq.n	8001986 <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	4619      	mov	r1, r3
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff fd4b 	bl	800140c <escape_process>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 81e3 	beq.w	8001d44 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8001984:	e1de      	b.n	8001d44 <microrl_insert_char+0x3ec>
		switch (ch) {
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	3b01      	subs	r3, #1
 800198a:	2b7e      	cmp	r3, #126	; 0x7e
 800198c:	f200 81af 	bhi.w	8001cee <microrl_insert_char+0x396>
 8001990:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <microrl_insert_char+0x40>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	08001c2b 	.word	0x08001c2b
 800199c:	08001c63 	.word	0x08001c63
 80019a0:	08001cdb 	.word	0x08001cdb
 80019a4:	08001cef 	.word	0x08001cef
 80019a8:	08001c07 	.word	0x08001c07
 80019ac:	08001c3b 	.word	0x08001c3b
 80019b0:	08001cef 	.word	0x08001cef
 80019b4:	08001c9b 	.word	0x08001c9b
 80019b8:	08001bbd 	.word	0x08001bbd
 80019bc:	08001b95 	.word	0x08001b95
 80019c0:	08001bef 	.word	0x08001bef
 80019c4:	08001cef 	.word	0x08001cef
 80019c8:	08001b95 	.word	0x08001b95
 80019cc:	08001c91 	.word	0x08001c91
 80019d0:	08001cef 	.word	0x08001cef
 80019d4:	08001c87 	.word	0x08001c87
 80019d8:	08001cef 	.word	0x08001cef
 80019dc:	08001cb7 	.word	0x08001cb7
 80019e0:	08001cef 	.word	0x08001cef
 80019e4:	08001cef 	.word	0x08001cef
 80019e8:	08001bd3 	.word	0x08001bd3
 80019ec:	08001cef 	.word	0x08001cef
 80019f0:	08001cef 	.word	0x08001cef
 80019f4:	08001cef 	.word	0x08001cef
 80019f8:	08001cef 	.word	0x08001cef
 80019fc:	08001cef 	.word	0x08001cef
 8001a00:	08001bc5 	.word	0x08001bc5
 8001a04:	08001cef 	.word	0x08001cef
 8001a08:	08001cef 	.word	0x08001cef
 8001a0c:	08001cef 	.word	0x08001cef
 8001a10:	08001cef 	.word	0x08001cef
 8001a14:	08001cef 	.word	0x08001cef
 8001a18:	08001cef 	.word	0x08001cef
 8001a1c:	08001cef 	.word	0x08001cef
 8001a20:	08001cef 	.word	0x08001cef
 8001a24:	08001cef 	.word	0x08001cef
 8001a28:	08001cef 	.word	0x08001cef
 8001a2c:	08001cef 	.word	0x08001cef
 8001a30:	08001cef 	.word	0x08001cef
 8001a34:	08001cef 	.word	0x08001cef
 8001a38:	08001cef 	.word	0x08001cef
 8001a3c:	08001cef 	.word	0x08001cef
 8001a40:	08001cef 	.word	0x08001cef
 8001a44:	08001cef 	.word	0x08001cef
 8001a48:	08001cef 	.word	0x08001cef
 8001a4c:	08001cef 	.word	0x08001cef
 8001a50:	08001cef 	.word	0x08001cef
 8001a54:	08001cef 	.word	0x08001cef
 8001a58:	08001cef 	.word	0x08001cef
 8001a5c:	08001cef 	.word	0x08001cef
 8001a60:	08001cef 	.word	0x08001cef
 8001a64:	08001cef 	.word	0x08001cef
 8001a68:	08001cef 	.word	0x08001cef
 8001a6c:	08001cef 	.word	0x08001cef
 8001a70:	08001cef 	.word	0x08001cef
 8001a74:	08001cef 	.word	0x08001cef
 8001a78:	08001cef 	.word	0x08001cef
 8001a7c:	08001cef 	.word	0x08001cef
 8001a80:	08001cef 	.word	0x08001cef
 8001a84:	08001cef 	.word	0x08001cef
 8001a88:	08001cef 	.word	0x08001cef
 8001a8c:	08001cef 	.word	0x08001cef
 8001a90:	08001cef 	.word	0x08001cef
 8001a94:	08001cef 	.word	0x08001cef
 8001a98:	08001cef 	.word	0x08001cef
 8001a9c:	08001cef 	.word	0x08001cef
 8001aa0:	08001cef 	.word	0x08001cef
 8001aa4:	08001cef 	.word	0x08001cef
 8001aa8:	08001cef 	.word	0x08001cef
 8001aac:	08001cef 	.word	0x08001cef
 8001ab0:	08001cef 	.word	0x08001cef
 8001ab4:	08001cef 	.word	0x08001cef
 8001ab8:	08001cef 	.word	0x08001cef
 8001abc:	08001cef 	.word	0x08001cef
 8001ac0:	08001cef 	.word	0x08001cef
 8001ac4:	08001cef 	.word	0x08001cef
 8001ac8:	08001cef 	.word	0x08001cef
 8001acc:	08001cef 	.word	0x08001cef
 8001ad0:	08001cef 	.word	0x08001cef
 8001ad4:	08001cef 	.word	0x08001cef
 8001ad8:	08001cef 	.word	0x08001cef
 8001adc:	08001cef 	.word	0x08001cef
 8001ae0:	08001cef 	.word	0x08001cef
 8001ae4:	08001cef 	.word	0x08001cef
 8001ae8:	08001cef 	.word	0x08001cef
 8001aec:	08001cef 	.word	0x08001cef
 8001af0:	08001cef 	.word	0x08001cef
 8001af4:	08001cef 	.word	0x08001cef
 8001af8:	08001cef 	.word	0x08001cef
 8001afc:	08001cef 	.word	0x08001cef
 8001b00:	08001cef 	.word	0x08001cef
 8001b04:	08001cef 	.word	0x08001cef
 8001b08:	08001cef 	.word	0x08001cef
 8001b0c:	08001cef 	.word	0x08001cef
 8001b10:	08001cef 	.word	0x08001cef
 8001b14:	08001cef 	.word	0x08001cef
 8001b18:	08001cef 	.word	0x08001cef
 8001b1c:	08001cef 	.word	0x08001cef
 8001b20:	08001cef 	.word	0x08001cef
 8001b24:	08001cef 	.word	0x08001cef
 8001b28:	08001cef 	.word	0x08001cef
 8001b2c:	08001cef 	.word	0x08001cef
 8001b30:	08001cef 	.word	0x08001cef
 8001b34:	08001cef 	.word	0x08001cef
 8001b38:	08001cef 	.word	0x08001cef
 8001b3c:	08001cef 	.word	0x08001cef
 8001b40:	08001cef 	.word	0x08001cef
 8001b44:	08001cef 	.word	0x08001cef
 8001b48:	08001cef 	.word	0x08001cef
 8001b4c:	08001cef 	.word	0x08001cef
 8001b50:	08001cef 	.word	0x08001cef
 8001b54:	08001cef 	.word	0x08001cef
 8001b58:	08001cef 	.word	0x08001cef
 8001b5c:	08001cef 	.word	0x08001cef
 8001b60:	08001cef 	.word	0x08001cef
 8001b64:	08001cef 	.word	0x08001cef
 8001b68:	08001cef 	.word	0x08001cef
 8001b6c:	08001cef 	.word	0x08001cef
 8001b70:	08001cef 	.word	0x08001cef
 8001b74:	08001cef 	.word	0x08001cef
 8001b78:	08001cef 	.word	0x08001cef
 8001b7c:	08001cef 	.word	0x08001cef
 8001b80:	08001cef 	.word	0x08001cef
 8001b84:	08001cef 	.word	0x08001cef
 8001b88:	08001cef 	.word	0x08001cef
 8001b8c:	08001cef 	.word	0x08001cef
 8001b90:	08001c9b 	.word	0x08001c9b
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	789b      	ldrb	r3, [r3, #2]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b0d      	cmp	r3, #13
 8001b9e:	d101      	bne.n	8001ba4 <microrl_insert_char+0x24c>
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	e000      	b.n	8001ba6 <microrl_insert_char+0x24e>
 8001ba4:	230d      	movs	r3, #13
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	f000 80c1 	beq.w	8001d2e <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff fe73 	bl	80018a0 <new_line_handler>
				break;
 8001bba:	e0c3      	b.n	8001d44 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff fdc1 	bl	8001744 <microrl_get_complite>
			break;
 8001bc2:	e0bf      	b.n	8001d44 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	705a      	strb	r2, [r3, #1]
			break;
 8001bca:	e0bb      	b.n	8001d44 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff fd1e 	bl	800160e <microrl_backspace>
					while (pThis->cursor > 0) {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	dcf7      	bgt.n	8001bcc <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001be2:	461a      	mov	r2, r3
 8001be4:	2100      	movs	r1, #0
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fb40 	bl	800126c <terminal_print_line>
			break;
 8001bec:	e0aa      	b.n	8001d44 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bf4:	4855      	ldr	r0, [pc, #340]	; (8001d4c <microrl_insert_char+0x3f4>)
 8001bf6:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8001c04:	e09e      	b.n	8001d44 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4619      	mov	r1, r3
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff faa0 	bl	800115c <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001c28:	e08c      	b.n	8001d44 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff fae6 	bl	80011fc <terminal_reset_cursor>
				pThis->cursor = 0;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001c38:	e084      	b.n	8001d44 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c46:	429a      	cmp	r2, r3
 8001c48:	da73      	bge.n	8001d32 <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff fa85 	bl	800115c <terminal_move_cursor>
				pThis->cursor++;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001c60:	e067      	b.n	8001d32 <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d064      	beq.n	8001d36 <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff fa73 	bl	800115c <terminal_move_cursor>
				pThis->cursor--;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c7c:	1e5a      	subs	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001c84:	e057      	b.n	8001d36 <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 8001c86:	2100      	movs	r1, #0
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff fb8f 	bl	80013ac <hist_search>
			break;
 8001c8e:	e059      	b.n	8001d44 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 8001c90:	2101      	movs	r1, #1
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fb8a 	bl	80013ac <hist_search>
			break;
 8001c98:	e054      	b.n	8001d44 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff fcb7 	bl	800160e <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cac:	461a      	mov	r2, r3
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fadc 	bl	800126c <terminal_print_line>
			break;
 8001cb4:	e046      	b.n	8001d44 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff f9f0 	bl	800109c <terminal_newline>
				print_prompt (pThis);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff f9ce 	bl	800105e <print_prompt>
				terminal_reset_cursor (pThis);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fa9a 	bl	80011fc <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cce:	461a      	mov	r2, r3
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff faca 	bl	800126c <terminal_print_line>
			break;
 8001cd8:	e034      	b.n	8001d44 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d02a      	beq.n	8001d3a <microrl_insert_char+0x3e2>
				pThis->sigint();
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001cea:	4798      	blx	r3
			break;
 8001cec:	e025      	b.n	8001d3a <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d104      	bne.n	8001cfe <microrl_insert_char+0x3a6>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d01f      	beq.n	8001d3e <microrl_insert_char+0x3e6>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b1f      	cmp	r3, #31
 8001d02:	dd1c      	ble.n	8001d3e <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8001d04:	463b      	mov	r3, r7
 8001d06:	2201      	movs	r2, #1
 8001d08:	4619      	mov	r1, r3
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fc0c 	bl	8001528 <microrl_insert_text>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d015      	beq.n	8001d42 <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d1c:	1e59      	subs	r1, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d24:	461a      	mov	r2, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff faa0 	bl	800126c <terminal_print_line>
			break;
 8001d2c:	e009      	b.n	8001d42 <microrl_insert_char+0x3ea>
					break;
 8001d2e:	bf00      	nop
 8001d30:	e008      	b.n	8001d44 <microrl_insert_char+0x3ec>
			break;
 8001d32:	bf00      	nop
 8001d34:	e006      	b.n	8001d44 <microrl_insert_char+0x3ec>
			break;
 8001d36:	bf00      	nop
 8001d38:	e004      	b.n	8001d44 <microrl_insert_char+0x3ec>
			break;
 8001d3a:	bf00      	nop
 8001d3c:	e002      	b.n	8001d44 <microrl_insert_char+0x3ec>
	}
 8001d3e:	bf00      	nop
 8001d40:	e000      	b.n	8001d44 <microrl_insert_char+0x3ec>
			break;
 8001d42:	bf00      	nop
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	0800dc94 	.word	0x0800dc94

08001d50 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <microrl_print_char+0x20>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	79fa      	ldrb	r2, [r7, #7]
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fdf8 	bl	8001958 <microrl_insert_char>
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000008 	.word	0x20000008

08001d74 <print>:

void print (const char * str)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <print+0x84>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	f083 0301 	eor.w	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <print+0x1e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b1b      	cmp	r3, #27
 8001d90:	d02b      	beq.n	8001dea <print+0x76>
		return;
	if (!CDC_is_ready)
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <print+0x88>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	f083 0301 	eor.w	r3, r3, #1
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d126      	bne.n	8001dee <print+0x7a>
		return;
	uint16_t len = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 8001da4:	89fb      	ldrh	r3, [r7, #14]
 8001da6:	3301      	adds	r3, #1
 8001da8:	81fb      	strh	r3, [r7, #14]
 8001daa:	89fb      	ldrh	r3, [r7, #14]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f6      	bne.n	8001da4 <print+0x30>
	uint32_t timeout = HAL_GetTick();
 8001db6:	f000 fe77 	bl	8002aa8 <HAL_GetTick>
 8001dba:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001dbc:	e006      	b.n	8001dcc <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 8001dbe:	f000 fe73 	bl	8002aa8 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d807      	bhi.n	8001ddc <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <print+0x8c>)
 8001dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001dd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f1      	bne.n	8001dbe <print+0x4a>
 8001dda:	e000      	b.n	8001dde <print+0x6a>
			break;
 8001ddc:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 8001dde:	89fb      	ldrh	r3, [r7, #14]
 8001de0:	4619      	mov	r1, r3
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f00b fac6 	bl	800d374 <CDC_Transmit_FS>
 8001de8:	e002      	b.n	8001df0 <print+0x7c>
		return;
 8001dea:	bf00      	nop
 8001dec:	e000      	b.n	8001df0 <print+0x7c>
		return;
 8001dee:	bf00      	nop
}
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000000c 	.word	0x2000000c
 8001dfc:	200001af 	.word	0x200001af
 8001e00:	20002698 	.word	0x20002698

08001e04 <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	e010      	b.n	8001e36 <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 8001e14:	490c      	ldr	r1, [pc, #48]	; (8001e48 <find_color_by_name+0x44>)
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	79fa      	ldrb	r2, [r7, #7]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d101      	bne.n	8001e30 <find_color_by_name+0x2c>
		{
			return i;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	e006      	b.n	8001e3e <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3301      	adds	r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b10      	cmp	r3, #16
 8001e3a:	d9eb      	bls.n	8001e14 <find_color_by_name+0x10>
		}
	}
	return 0;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	0800e28c 	.word	0x0800e28c

08001e4c <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ffd2 	bl	8001e04 <find_color_by_name>
 8001e60:	4602      	mov	r2, r0
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <print_color+0x44>)
 8001e6e:	4413      	add	r3, r2
 8001e70:	3301      	adds	r3, #1
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff7e 	bl	8001d74 <print>
	print(str);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff7b 	bl	8001d74 <print>
	print(COLOR_NC);
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <print_color+0x48>)
 8001e80:	f7ff ff78 	bl	8001d74 <print>
	return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	0800e28c 	.word	0x0800e28c
 8001e94:	0800dcb8 	.word	0x0800dcb8

08001e98 <str_length>:

int str_length(const char * str)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001ea4:	e002      	b.n	8001eac <str_length+0x14>
		i++;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f6      	bne.n	8001ea6 <str_length+0xe>
	return i;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <print_help>:


int print_help(int argc, const char * const * argv)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
	print(_VER);
 8001ece:	4858      	ldr	r0, [pc, #352]	; (8002030 <print_help+0x16c>)
 8001ed0:	f7ff ff50 	bl	8001d74 <print>
	print(ENDL);
 8001ed4:	4857      	ldr	r0, [pc, #348]	; (8002034 <print_help+0x170>)
 8001ed6:	f7ff ff4d 	bl	8001d74 <print>
	print ("Use ");
 8001eda:	4857      	ldr	r0, [pc, #348]	; (8002038 <print_help+0x174>)
 8001edc:	f7ff ff4a 	bl	8001d74 <print>
	print_color("TAB", C_GREEN);
 8001ee0:	2105      	movs	r1, #5
 8001ee2:	4856      	ldr	r0, [pc, #344]	; (800203c <print_help+0x178>)
 8001ee4:	f7ff ffb2 	bl	8001e4c <print_color>
	print(" key for completion");
 8001ee8:	4855      	ldr	r0, [pc, #340]	; (8002040 <print_help+0x17c>)
 8001eea:	f7ff ff43 	bl	8001d74 <print>
	print (ENDL);
 8001eee:	4851      	ldr	r0, [pc, #324]	; (8002034 <print_help+0x170>)
 8001ef0:	f7ff ff40 	bl	8001d74 <print>
	print ("Available commands:");
 8001ef4:	4853      	ldr	r0, [pc, #332]	; (8002044 <print_help+0x180>)
 8001ef6:	f7ff ff3d 	bl	8001d74 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e08a      	b.n	8002016 <print_help+0x152>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8001f00:	4a51      	ldr	r2, [pc, #324]	; (8002048 <print_help+0x184>)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	019b      	lsls	r3, r3, #6
 8001f06:	4413      	add	r3, r2
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0e:	d11b      	bne.n	8001f48 <print_help+0x84>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	4a4c      	ldr	r2, [pc, #304]	; (8002048 <print_help+0x184>)
 8001f16:	019b      	lsls	r3, r3, #6
 8001f18:	4413      	add	r3, r2
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d004      	beq.n	8001f2c <print_help+0x68>
				print_color(" aka ", C_L_PURPLE);
 8001f22:	210c      	movs	r1, #12
 8001f24:	4849      	ldr	r0, [pc, #292]	; (800204c <print_help+0x188>)
 8001f26:	f7ff ff91 	bl	8001e4c <print_color>
 8001f2a:	e003      	b.n	8001f34 <print_help+0x70>
			else
				print_color("/", C_L_PURPLE);
 8001f2c:	210c      	movs	r1, #12
 8001f2e:	4848      	ldr	r0, [pc, #288]	; (8002050 <print_help+0x18c>)
 8001f30:	f7ff ff8c 	bl	8001e4c <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	019b      	lsls	r3, r3, #6
 8001f38:	4a43      	ldr	r2, [pc, #268]	; (8002048 <print_help+0x184>)
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	210b      	movs	r1, #11
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff83 	bl	8001e4c <print_color>
 8001f46:	e063      	b.n	8002010 <print_help+0x14c>
		}
		else
		{
			print(ENDL);
 8001f48:	483a      	ldr	r0, [pc, #232]	; (8002034 <print_help+0x170>)
 8001f4a:	f7ff ff13 	bl	8001d74 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8001f4e:	f06f 0303 	mvn.w	r3, #3
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	e005      	b.n	8001f62 <print_help+0x9e>
				print(" ");
 8001f56:	483f      	ldr	r0, [pc, #252]	; (8002054 <print_help+0x190>)
 8001f58:	f7ff ff0c 	bl	8001d74 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	4a39      	ldr	r2, [pc, #228]	; (8002048 <print_help+0x184>)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	019b      	lsls	r3, r3, #6
 8001f68:	4413      	add	r3, r2
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	dbf1      	blt.n	8001f56 <print_help+0x92>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	019b      	lsls	r3, r3, #6
 8001f76:	4a34      	ldr	r2, [pc, #208]	; (8002048 <print_help+0x184>)
 8001f78:	4413      	add	r3, r2
 8001f7a:	1d1a      	adds	r2, r3, #4
 8001f7c:	4932      	ldr	r1, [pc, #200]	; (8002048 <print_help+0x184>)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	019b      	lsls	r3, r3, #6
 8001f82:	440b      	add	r3, r1
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4934      	ldr	r1, [pc, #208]	; (8002058 <print_help+0x194>)
 8001f88:	5ccb      	ldrb	r3, [r1, r3]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f7ff ff5d 	bl	8001e4c <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	e005      	b.n	8001fa4 <print_help+0xe0>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 8001f98:	482e      	ldr	r0, [pc, #184]	; (8002054 <print_help+0x190>)
 8001f9a:	f7ff feeb 	bl	8001d74 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	4a28      	ldr	r2, [pc, #160]	; (8002048 <print_help+0x184>)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	019b      	lsls	r3, r3, #6
 8001faa:	4413      	add	r3, r2
 8001fac:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001fae:	f1c3 040c 	rsb	r4, r3, #12
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	019b      	lsls	r3, r3, #6
 8001fb6:	4a24      	ldr	r2, [pc, #144]	; (8002048 <print_help+0x184>)
 8001fb8:	4413      	add	r3, r2
 8001fba:	3304      	adds	r3, #4
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff6b 	bl	8001e98 <str_length>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dbe5      	blt.n	8001f98 <print_help+0xd4>
			switch (microrl_actions[i].level){
 8001fcc:	4a1e      	ldr	r2, [pc, #120]	; (8002048 <print_help+0x184>)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	019b      	lsls	r3, r3, #6
 8001fd2:	4413      	add	r3, r2
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <print_help+0x11c>
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d004      	beq.n	8001fe8 <print_help+0x124>
 8001fde:	e007      	b.n	8001ff0 <print_help+0x12c>
			case 0:
				print ("-");
 8001fe0:	481e      	ldr	r0, [pc, #120]	; (800205c <print_help+0x198>)
 8001fe2:	f7ff fec7 	bl	8001d74 <print>
				break;
 8001fe6:	e007      	b.n	8001ff8 <print_help+0x134>
			case 1:
				print ("^");
 8001fe8:	481d      	ldr	r0, [pc, #116]	; (8002060 <print_help+0x19c>)
 8001fea:	f7ff fec3 	bl	8001d74 <print>
				break;
 8001fee:	e003      	b.n	8001ff8 <print_help+0x134>
			default:
				print ("#");
 8001ff0:	481c      	ldr	r0, [pc, #112]	; (8002064 <print_help+0x1a0>)
 8001ff2:	f7ff febf 	bl	8001d74 <print>
				break;
 8001ff6:	bf00      	nop
			}
			print (" ");
 8001ff8:	4816      	ldr	r0, [pc, #88]	; (8002054 <print_help+0x190>)
 8001ffa:	f7ff febb 	bl	8001d74 <print>
			print (microrl_actions[i].help_msg);
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	019b      	lsls	r3, r3, #6
 8002002:	3308      	adds	r3, #8
 8002004:	4a10      	ldr	r2, [pc, #64]	; (8002048 <print_help+0x184>)
 8002006:	4413      	add	r3, r2
 8002008:	3306      	adds	r3, #6
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff feb2 	bl	8001d74 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b0d      	cmp	r3, #13
 800201a:	f67f af71 	bls.w	8001f00 <print_help+0x3c>
		}
	}
	print(ENDL);
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <print_help+0x170>)
 8002020:	f7ff fea8 	bl	8001d74 <print>
	return 0;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	bf00      	nop
 8002030:	0800dcc0 	.word	0x0800dcc0
 8002034:	0800dcd0 	.word	0x0800dcd0
 8002038:	0800dcd4 	.word	0x0800dcd4
 800203c:	0800dcdc 	.word	0x0800dcdc
 8002040:	0800dce0 	.word	0x0800dce0
 8002044:	0800dcf4 	.word	0x0800dcf4
 8002048:	0800df0c 	.word	0x0800df0c
 800204c:	0800dd08 	.word	0x0800dd08
 8002050:	0800dd10 	.word	0x0800dd10
 8002054:	0800dd14 	.word	0x0800dd14
 8002058:	0800e348 	.word	0x0800e348
 800205c:	0800dd18 	.word	0x0800dd18
 8002060:	0800dd1c 	.word	0x0800dd1c
 8002064:	0800dd20 	.word	0x0800dd20

08002068 <execute>:



int execute (int argc, const char * const * argv)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 800207e:	2300      	movs	r3, #0
 8002080:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	e050      	b.n	800212a <execute+0xc2>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	e03f      	b.n	800210e <execute+0xa6>
		{
			tokens_found = false;
 800208e:	2300      	movs	r3, #0
 8002090:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 8002092:	4a52      	ldr	r2, [pc, #328]	; (80021dc <execute+0x174>)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	019b      	lsls	r3, r3, #6
 8002098:	4413      	add	r3, r2
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d001      	beq.n	80020aa <execute+0x42>
				synonym_level = current_level; // save the synonym level
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d003      	beq.n	80020ba <execute+0x52>
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	db2d      	blt.n	8002116 <execute+0xae>
				break;
			if (current_level == i)
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d101      	bne.n	80020c6 <execute+0x5e>
				last_main_synonym = n;
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	4413      	add	r3, r2
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	019b      	lsls	r3, r3, #6
 80020d4:	4941      	ldr	r1, [pc, #260]	; (80021dc <execute+0x174>)
 80020d6:	440b      	add	r3, r1
 80020d8:	3304      	adds	r3, #4
 80020da:	4619      	mov	r1, r3
 80020dc:	4610      	mov	r0, r2
 80020de:	f7fe f837 	bl	8000150 <strcmp>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10f      	bne.n	8002108 <execute+0xa0>
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d10b      	bne.n	8002108 <execute+0xa0>
					(i == synonym_level))
			{
				tokens_found = true;
 80020f0:	2301      	movs	r3, #1
 80020f2:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	623a      	str	r2, [r7, #32]
 80020fa:	4a38      	ldr	r2, [pc, #224]	; (80021dc <execute+0x174>)
 80020fc:	019b      	lsls	r3, r3, #6
 80020fe:	4413      	add	r3, r2
 8002100:	333c      	adds	r3, #60	; 0x3c
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8002106:	e007      	b.n	8002118 <execute+0xb0>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	3301      	adds	r3, #1
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	2b0d      	cmp	r3, #13
 8002112:	d9bc      	bls.n	800208e <execute+0x26>
 8002114:	e000      	b.n	8002118 <execute+0xb0>
				break;
 8002116:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8002118:	7efb      	ldrb	r3, [r7, #27]
 800211a:	f083 0301 	eor.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <execute+0xcc>
	for (int i = 0; i < argc; i++)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	3301      	adds	r3, #1
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	429a      	cmp	r2, r3
 8002130:	dbaa      	blt.n	8002088 <execute+0x20>
 8002132:	e000      	b.n	8002136 <execute+0xce>
			break;
 8002134:	bf00      	nop
	}

	if (func != NULL)
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <execute+0xe0>
	{
		return func(argc, argv); // function found
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	6839      	ldr	r1, [r7, #0]
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	4798      	blx	r3
 8002144:	4603      	mov	r3, r0
 8002146:	e045      	b.n	80021d4 <execute+0x16c>
	} else if (tokens_found)
 8002148:	7efb      	ldrb	r3, [r7, #27]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d021      	beq.n	8002192 <execute+0x12a>
	{
		print_color ("command: '", C_L_RED);
 800214e:	210a      	movs	r1, #10
 8002150:	4823      	ldr	r0, [pc, #140]	; (80021e0 <execute+0x178>)
 8002152:	f7ff fe7b 	bl	8001e4c <print_color>
		print_color ((char*)argv[0], C_L_RED);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	210a      	movs	r1, #10
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fe75 	bl	8001e4c <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 8002162:	210a      	movs	r1, #10
 8002164:	481f      	ldr	r0, [pc, #124]	; (80021e4 <execute+0x17c>)
 8002166:	f7ff fe71 	bl	8001e4c <print_color>
		print(ENDL);
 800216a:	481f      	ldr	r0, [pc, #124]	; (80021e8 <execute+0x180>)
 800216c:	f7ff fe02 	bl	8001d74 <print>
		print_color ("use '", C_NC);
 8002170:	2100      	movs	r1, #0
 8002172:	481e      	ldr	r0, [pc, #120]	; (80021ec <execute+0x184>)
 8002174:	f7ff fe6a 	bl	8001e4c <print_color>
		print_color ("?", C_GREEN);
 8002178:	2105      	movs	r1, #5
 800217a:	481d      	ldr	r0, [pc, #116]	; (80021f0 <execute+0x188>)
 800217c:	f7ff fe66 	bl	8001e4c <print_color>
		print_color ("' for help", C_NC);
 8002180:	2100      	movs	r1, #0
 8002182:	481c      	ldr	r0, [pc, #112]	; (80021f4 <execute+0x18c>)
 8002184:	f7ff fe62 	bl	8001e4c <print_color>
		print (ENDL);
 8002188:	4817      	ldr	r0, [pc, #92]	; (80021e8 <execute+0x180>)
 800218a:	f7ff fdf3 	bl	8001d74 <print>
		return 1;
 800218e:	2301      	movs	r3, #1
 8002190:	e020      	b.n	80021d4 <execute+0x16c>
	}
	else
	{
		print_color ("command: '", C_RED);
 8002192:	2109      	movs	r1, #9
 8002194:	4812      	ldr	r0, [pc, #72]	; (80021e0 <execute+0x178>)
 8002196:	f7ff fe59 	bl	8001e4c <print_color>
		print_color ((char*)argv[0], C_RED);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2109      	movs	r1, #9
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fe53 	bl	8001e4c <print_color>
		print_color ("' not found", C_RED);
 80021a6:	2109      	movs	r1, #9
 80021a8:	4813      	ldr	r0, [pc, #76]	; (80021f8 <execute+0x190>)
 80021aa:	f7ff fe4f 	bl	8001e4c <print_color>
		print(ENDL);
 80021ae:	480e      	ldr	r0, [pc, #56]	; (80021e8 <execute+0x180>)
 80021b0:	f7ff fde0 	bl	8001d74 <print>
		print_color ("use '", C_NC);
 80021b4:	2100      	movs	r1, #0
 80021b6:	480d      	ldr	r0, [pc, #52]	; (80021ec <execute+0x184>)
 80021b8:	f7ff fe48 	bl	8001e4c <print_color>
		print_color ("?", C_GREEN);
 80021bc:	2105      	movs	r1, #5
 80021be:	480c      	ldr	r0, [pc, #48]	; (80021f0 <execute+0x188>)
 80021c0:	f7ff fe44 	bl	8001e4c <print_color>
		print_color ("' for help", C_NC);
 80021c4:	2100      	movs	r1, #0
 80021c6:	480b      	ldr	r0, [pc, #44]	; (80021f4 <execute+0x18c>)
 80021c8:	f7ff fe40 	bl	8001e4c <print_color>
		print (ENDL);
 80021cc:	4806      	ldr	r0, [pc, #24]	; (80021e8 <execute+0x180>)
 80021ce:	f7ff fdd1 	bl	8001d74 <print>
		return 1;
 80021d2:	2301      	movs	r3, #1

	}
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3728      	adds	r7, #40	; 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	0800df0c 	.word	0x0800df0c
 80021e0:	0800dd24 	.word	0x0800dd24
 80021e4:	0800dd30 	.word	0x0800dd30
 80021e8:	0800dcd0 	.word	0x0800dcd0
 80021ec:	0800dd50 	.word	0x0800dd50
 80021f0:	0800dd58 	.word	0x0800dd58
 80021f4:	0800dd5c 	.word	0x0800dd5c
 80021f8:	0800dd68 	.word	0x0800dd68

080021fc <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08c      	sub	sp, #48	; 0x30
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
	int j = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 800220a:	4b5b      	ldr	r3, [pc, #364]	; (8002378 <complet+0x17c>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d11b      	bne.n	800224e <complet+0x52>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 8002216:	2300      	movs	r3, #0
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
 800221a:	e014      	b.n	8002246 <complet+0x4a>
			if (microrl_actions[i].level == 0)
 800221c:	4a57      	ldr	r2, [pc, #348]	; (800237c <complet+0x180>)
 800221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002220:	019b      	lsls	r3, r3, #6
 8002222:	4413      	add	r3, r2
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10a      	bne.n	8002240 <complet+0x44>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002232:	0192      	lsls	r2, r2, #6
 8002234:	4951      	ldr	r1, [pc, #324]	; (800237c <complet+0x180>)
 8002236:	440a      	add	r2, r1
 8002238:	3204      	adds	r2, #4
 800223a:	494f      	ldr	r1, [pc, #316]	; (8002378 <complet+0x17c>)
 800223c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002242:	3301      	adds	r3, #1
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	2b0d      	cmp	r3, #13
 800224a:	d9e7      	bls.n	800221c <complet+0x20>
 800224c:	e08a      	b.n	8002364 <complet+0x168>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002254:	3b01      	subs	r3, #1
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	4413      	add	r3, r2
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 8002268:	2300      	movs	r3, #0
 800226a:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	e072      	b.n	8002358 <complet+0x15c>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e061      	b.n	800233c <complet+0x140>
			{
				tokens_found = false;
 8002278:	2300      	movs	r3, #0
 800227a:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 800227c:	4a3f      	ldr	r2, [pc, #252]	; (800237c <complet+0x180>)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	019b      	lsls	r3, r3, #6
 8002282:	4413      	add	r3, r2
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228e:	d001      	beq.n	8002294 <complet+0x98>
					synonym_level = current_level; // save the synonym level
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229a:	d003      	beq.n	80022a4 <complet+0xa8>
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	db4f      	blt.n	8002344 <complet+0x148>
					break;
				if (current_level == i)
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d101      	bne.n	80022b0 <complet+0xb4>
					last_main_synonym = n;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d122      	bne.n	8002300 <complet+0x104>
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	019b      	lsls	r3, r3, #6
 80022be:	4a2f      	ldr	r2, [pc, #188]	; (800237c <complet+0x180>)
 80022c0:	4413      	add	r3, r2
 80022c2:	3304      	adds	r3, #4
 80022c4:	6939      	ldr	r1, [r7, #16]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f00b fc86 	bl	800dbd8 <strstr>
 80022cc:	4602      	mov	r2, r0
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	019b      	lsls	r3, r3, #6
 80022d2:	492a      	ldr	r1, [pc, #168]	; (800237c <complet+0x180>)
 80022d4:	440b      	add	r3, r1
 80022d6:	3304      	adds	r3, #4
 80022d8:	429a      	cmp	r2, r3
 80022da:	d111      	bne.n	8002300 <complet+0x104>
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d10d      	bne.n	8002300 <complet+0x104>
										(i == synonym_level))
				{
					tokens_found = true;
 80022e4:	2301      	movs	r3, #1
 80022e6:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 80022e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	0192      	lsls	r2, r2, #6
 80022f2:	4922      	ldr	r1, [pc, #136]	; (800237c <complet+0x180>)
 80022f4:	440a      	add	r2, r1
 80022f6:	3204      	adds	r2, #4
 80022f8:	491f      	ldr	r1, [pc, #124]	; (8002378 <complet+0x17c>)
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80022fe:	e01a      	b.n	8002336 <complet+0x13a>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	4413      	add	r3, r2
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	019b      	lsls	r3, r3, #6
 800230e:	491b      	ldr	r1, [pc, #108]	; (800237c <complet+0x180>)
 8002310:	440b      	add	r3, r1
 8002312:	3304      	adds	r3, #4
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f7fd ff1a 	bl	8000150 <strcmp>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <complet+0x13a>
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	429a      	cmp	r2, r3
 8002328:	d105      	bne.n	8002336 <complet+0x13a>
				{
					last_main_synonym++;
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	3301      	adds	r3, #1
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 8002330:	2301      	movs	r3, #1
 8002332:	77fb      	strb	r3, [r7, #31]
					break;
 8002334:	e007      	b.n	8002346 <complet+0x14a>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3301      	adds	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2b0d      	cmp	r3, #13
 8002340:	d99a      	bls.n	8002278 <complet+0x7c>
 8002342:	e000      	b.n	8002346 <complet+0x14a>
					break;
 8002344:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 8002346:	7ffb      	ldrb	r3, [r7, #31]
 8002348:	f083 0301 	eor.w	r3, r3, #1
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d107      	bne.n	8002362 <complet+0x166>
		for (int i = 0; i < argc; i++)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	3301      	adds	r3, #1
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	db88      	blt.n	8002272 <complet+0x76>
 8002360:	e000      	b.n	8002364 <complet+0x168>
				break;
 8002362:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <complet+0x17c>)
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	2100      	movs	r1, #0
 800236a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 800236e:	4b02      	ldr	r3, [pc, #8]	; (8002378 <complet+0x17c>)
}
 8002370:	4618      	mov	r0, r3
 8002372:	3730      	adds	r7, #48	; 0x30
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20002494 	.word	0x20002494
 800237c:	0800df0c 	.word	0x0800df0c

08002380 <sigint>:
#endif


void sigint (void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <sigint+0x48>)
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]


	print (ENDL);
 800238c:	480f      	ldr	r0, [pc, #60]	; (80023cc <sigint+0x4c>)
 800238e:	f7ff fcf1 	bl	8001d74 <print>
	print ("^C catched!");
 8002392:	480f      	ldr	r0, [pc, #60]	; (80023d0 <sigint+0x50>)
 8002394:	f7ff fcee 	bl	8001d74 <print>
	int i = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 800239c:	e009      	b.n	80023b2 <sigint+0x32>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <sigint+0x54>)
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	4a08      	ldr	r2, [pc, #32]	; (80023cc <sigint+0x4c>)
 80023aa:	5cd3      	ldrb	r3, [r2, r3]
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7ff fad3 	bl	8001958 <microrl_insert_char>
	while (ENTER[i])
 80023b2:	4a06      	ldr	r2, [pc, #24]	; (80023cc <sigint+0x4c>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ef      	bne.n	800239e <sigint+0x1e>
}
 80023be:	bf00      	nop
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200001b0 	.word	0x200001b0
 80023cc:	0800dcd0 	.word	0x0800dcd0
 80023d0:	0800dd74 	.word	0x0800dd74
 80023d4:	20000008 	.word	0x20000008

080023d8 <init_microrl>:

void init_microrl(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <init_microrl+0x38>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	490c      	ldr	r1, [pc, #48]	; (8002414 <init_microrl+0x3c>)
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe ff7a 	bl	80012dc <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <init_microrl+0x38>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	490a      	ldr	r1, [pc, #40]	; (8002418 <init_microrl+0x40>)
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe ffc0 	bl	8001374 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <init_microrl+0x38>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4908      	ldr	r1, [pc, #32]	; (800241c <init_microrl+0x44>)
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe ffac 	bl	8001358 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <init_microrl+0x38>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4906      	ldr	r1, [pc, #24]	; (8002420 <init_microrl+0x48>)
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe ffc2 	bl	8001390 <microrl_set_sigint_callback>
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000008 	.word	0x20000008
 8002414:	08001d75 	.word	0x08001d75
 8002418:	08002069 	.word	0x08002069
 800241c:	080021fd 	.word	0x080021fd
 8002420:	08002381 	.word	0x08002381

08002424 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <clear_screen+0x20>)
 8002430:	f7ff fca0 	bl	8001d74 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8002434:	4804      	ldr	r0, [pc, #16]	; (8002448 <clear_screen+0x24>)
 8002436:	f7ff fc9d 	bl	8001d74 <print>
	return 0;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	0800dd80 	.word	0x0800dd80
 8002448:	0800dd88 	.word	0x0800dd88

0800244c <set_CDC_ready>:


void set_CDC_ready(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <set_CDC_ready+0x14>)
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	200001af 	.word	0x200001af

08002464 <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <color_toggle+0x30>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	f083 0301 	eor.w	r3, r3, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf14      	ite	ne
 800247c:	2301      	movne	r3, #1
 800247e:	2300      	moveq	r3, #0
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4b04      	ldr	r3, [pc, #16]	; (8002494 <color_toggle+0x30>)
 8002484:	701a      	strb	r2, [r3, #0]
	return 0;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	2000000c 	.word	0x2000000c

08002498 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
	color_out = 1;
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <color_on+0x28>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 80024a8:	2105      	movs	r1, #5
 80024aa:	4806      	ldr	r0, [pc, #24]	; (80024c4 <color_on+0x2c>)
 80024ac:	f7ff fcce 	bl	8001e4c <print_color>
	print(ENDL);
 80024b0:	4805      	ldr	r0, [pc, #20]	; (80024c8 <color_on+0x30>)
 80024b2:	f7ff fc5f 	bl	8001d74 <print>
	return 0;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	2000000c 	.word	0x2000000c
 80024c4:	0800dd8c 	.word	0x0800dd8c
 80024c8:	0800dcd0 	.word	0x0800dcd0

080024cc <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
	color_out = 0;
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <color_off+0x28>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 80024dc:	4806      	ldr	r0, [pc, #24]	; (80024f8 <color_off+0x2c>)
 80024de:	f7ff fc49 	bl	8001d74 <print>
	print(ENDL);
 80024e2:	4806      	ldr	r0, [pc, #24]	; (80024fc <color_off+0x30>)
 80024e4:	f7ff fc46 	bl	8001d74 <print>
	return 0;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000000c 	.word	0x2000000c
 80024f8:	0800dda0 	.word	0x0800dda0
 80024fc:	0800dcd0 	.word	0x0800dcd0

08002500 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	if (color_out)
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <color_show+0x34>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d004      	beq.n	800251c <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8002512:	2105      	movs	r1, #5
 8002514:	4808      	ldr	r0, [pc, #32]	; (8002538 <color_show+0x38>)
 8002516:	f7ff fc99 	bl	8001e4c <print_color>
 800251a:	e002      	b.n	8002522 <color_show+0x22>
	else
		print ("Color output is OFF");
 800251c:	4807      	ldr	r0, [pc, #28]	; (800253c <color_show+0x3c>)
 800251e:	f7ff fc29 	bl	8001d74 <print>
	print(ENDL);
 8002522:	4807      	ldr	r0, [pc, #28]	; (8002540 <color_show+0x40>)
 8002524:	f7ff fc26 	bl	8001d74 <print>
	return 0;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	2000000c 	.word	0x2000000c
 8002538:	0800dd8c 	.word	0x0800dd8c
 800253c:	0800dda0 	.word	0x0800dda0
 8002540:	0800dcd0 	.word	0x0800dcd0

08002544 <nema_toggle>:


int nema_toggle 	(int argc, const char * const * argv)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
	nema_out ^= 1;
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <nema_toggle+0x30>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	f083 0301 	eor.w	r3, r3, #1
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b04      	ldr	r3, [pc, #16]	; (8002574 <nema_toggle+0x30>)
 8002564:	701a      	strb	r2, [r3, #0]
	return 0;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	200001b0 	.word	0x200001b0

08002578 <nema_on>:

int nema_on 		(int argc, const char * const * argv)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
	nema_out = 1;
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <nema_on+0x28>)
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
	print_color ("NEMA output is ON", C_GREEN);
 8002588:	2105      	movs	r1, #5
 800258a:	4806      	ldr	r0, [pc, #24]	; (80025a4 <nema_on+0x2c>)
 800258c:	f7ff fc5e 	bl	8001e4c <print_color>
	print(ENDL);
 8002590:	4805      	ldr	r0, [pc, #20]	; (80025a8 <nema_on+0x30>)
 8002592:	f7ff fbef 	bl	8001d74 <print>
	return 0;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200001b0 	.word	0x200001b0
 80025a4:	0800ddb4 	.word	0x0800ddb4
 80025a8:	0800dcd0 	.word	0x0800dcd0

080025ac <nema_off>:

int nema_off 		(int argc, const char * const * argv)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
	nema_out = 0;
 80025b6:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <nema_off+0x28>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
	print ("NEM output is OFF");
 80025bc:	4806      	ldr	r0, [pc, #24]	; (80025d8 <nema_off+0x2c>)
 80025be:	f7ff fbd9 	bl	8001d74 <print>
	print(ENDL);
 80025c2:	4806      	ldr	r0, [pc, #24]	; (80025dc <nema_off+0x30>)
 80025c4:	f7ff fbd6 	bl	8001d74 <print>
	return 0;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200001b0 	.word	0x200001b0
 80025d8:	0800ddc8 	.word	0x0800ddc8
 80025dc:	0800dcd0 	.word	0x0800dcd0

080025e0 <show_encoder>:


int show_encoder (int argc, const char * const * argv)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]

	uint32_t buf = encoder_value;
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <show_encoder+0x78>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	617b      	str	r3, [r7, #20]
	char str [8];

	for (int i = 0; i < 5; i++)
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	e01d      	b.n	8002632 <show_encoder+0x52>
	{
		str[4 - i] = buf % 10 + '0';
 80025f6:	6979      	ldr	r1, [r7, #20]
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <show_encoder+0x7c>)
 80025fa:	fba3 2301 	umull	r2, r3, r3, r1
 80025fe:	08da      	lsrs	r2, r3, #3
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	1aca      	subs	r2, r1, r3
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f1c3 0304 	rsb	r3, r3, #4
 8002612:	3230      	adds	r2, #48	; 0x30
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f107 0118 	add.w	r1, r7, #24
 800261a:	440b      	add	r3, r1
 800261c:	f803 2c10 	strb.w	r2, [r3, #-16]
		buf /= 10;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	4a0e      	ldr	r2, [pc, #56]	; (800265c <show_encoder+0x7c>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	08db      	lsrs	r3, r3, #3
 800262a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 5; i++)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	3301      	adds	r3, #1
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b04      	cmp	r3, #4
 8002636:	ddde      	ble.n	80025f6 <show_encoder+0x16>
	}
	str[5] = '\r';
 8002638:	230d      	movs	r3, #13
 800263a:	737b      	strb	r3, [r7, #13]
	str[6] = '\n';
 800263c:	230a      	movs	r3, #10
 800263e:	73bb      	strb	r3, [r7, #14]
	str[7] = '\0';
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]
	print(str);
 8002644:	f107 0308 	add.w	r3, r7, #8
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fb93 	bl	8001d74 <print>
	return 0;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	200001ac 	.word	0x200001ac
 800265c:	cccccccd 	.word	0xcccccccd

08002660 <get_nema>:


bool get_nema(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
	return nema_out;
 8002664:	4b02      	ldr	r3, [pc, #8]	; (8002670 <get_nema+0x10>)
 8002666:	781b      	ldrb	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	200001b0 	.word	0x200001b0

08002674 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002678:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <MX_SPI2_Init+0x64>)
 800267a:	4a18      	ldr	r2, [pc, #96]	; (80026dc <MX_SPI2_Init+0x68>)
 800267c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <MX_SPI2_Init+0x64>)
 8002680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002684:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002686:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <MX_SPI2_Init+0x64>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <MX_SPI2_Init+0x64>)
 800268e:	2200      	movs	r2, #0
 8002690:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <MX_SPI2_Init+0x64>)
 8002694:	2202      	movs	r2, #2
 8002696:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002698:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <MX_SPI2_Init+0x64>)
 800269a:	2201      	movs	r2, #1
 800269c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <MX_SPI2_Init+0x64>)
 80026a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80026a6:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <MX_SPI2_Init+0x64>)
 80026a8:	2218      	movs	r2, #24
 80026aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <MX_SPI2_Init+0x64>)
 80026ae:	2280      	movs	r2, #128	; 0x80
 80026b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <MX_SPI2_Init+0x64>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <MX_SPI2_Init+0x64>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <MX_SPI2_Init+0x64>)
 80026c0:	220a      	movs	r2, #10
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80026c4:	4804      	ldr	r0, [pc, #16]	; (80026d8 <MX_SPI2_Init+0x64>)
 80026c6:	f002 ff3f 	bl	8005548 <HAL_SPI_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80026d0:	f7fe fab4 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20002570 	.word	0x20002570
 80026dc:	40003800 	.word	0x40003800

080026e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1c      	ldr	r2, [pc, #112]	; (800276c <HAL_SPI_MspInit+0x8c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d131      	bne.n	8002764 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002700:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <HAL_SPI_MspInit+0x90>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	4a1a      	ldr	r2, [pc, #104]	; (8002770 <HAL_SPI_MspInit+0x90>)
 8002706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800270a:	61d3      	str	r3, [r2, #28]
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <HAL_SPI_MspInit+0x90>)
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002718:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_SPI_MspInit+0x90>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	4a14      	ldr	r2, [pc, #80]	; (8002770 <HAL_SPI_MspInit+0x90>)
 800271e:	f043 0308 	orr.w	r3, r3, #8
 8002722:	6193      	str	r3, [r2, #24]
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_SPI_MspInit+0x90>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002730:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800273a:	2303      	movs	r3, #3
 800273c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273e:	f107 0310 	add.w	r3, r7, #16
 8002742:	4619      	mov	r1, r3
 8002744:	480b      	ldr	r0, [pc, #44]	; (8002774 <HAL_SPI_MspInit+0x94>)
 8002746:	f000 fb49 	bl	8002ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800274a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800274e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	4619      	mov	r1, r3
 800275e:	4805      	ldr	r0, [pc, #20]	; (8002774 <HAL_SPI_MspInit+0x94>)
 8002760:	f000 fb3c 	bl	8002ddc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002764:	bf00      	nop
 8002766:	3720      	adds	r7, #32
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40003800 	.word	0x40003800
 8002770:	40021000 	.word	0x40021000
 8002774:	40010c00 	.word	0x40010c00

08002778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_MspInit+0x68>)
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <HAL_MspInit+0x68>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6193      	str	r3, [r2, #24]
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_MspInit+0x68>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_MspInit+0x68>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <HAL_MspInit+0x68>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a0:	61d3      	str	r3, [r2, #28]
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_MspInit+0x68>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	607b      	str	r3, [r7, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	210f      	movs	r1, #15
 80027b2:	f06f 0001 	mvn.w	r0, #1
 80027b6:	f000 fa36 	bl	8002c26 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_MspInit+0x6c>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <HAL_MspInit+0x6c>)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40010000 	.word	0x40010000

080027e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	; 0x30
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80027f8:	2200      	movs	r2, #0
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	2019      	movs	r0, #25
 80027fe:	f000 fa12 	bl	8002c26 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002802:	2019      	movs	r0, #25
 8002804:	f000 fa2b 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002808:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <HAL_InitTick+0x9c>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <HAL_InitTick+0x9c>)
 800280e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002812:	6193      	str	r3, [r2, #24]
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <HAL_InitTick+0x9c>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002820:	f107 0210 	add.w	r2, r7, #16
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f002 fd88 	bl	8005340 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002830:	f002 fd72 	bl	8005318 <HAL_RCC_GetPCLK2Freq>
 8002834:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002838:	4a13      	ldr	r2, [pc, #76]	; (8002888 <HAL_InitTick+0xa0>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0c9b      	lsrs	r3, r3, #18
 8002840:	3b01      	subs	r3, #1
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_InitTick+0xa4>)
 8002846:	4a12      	ldr	r2, [pc, #72]	; (8002890 <HAL_InitTick+0xa8>)
 8002848:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_InitTick+0xa4>)
 800284c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002850:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002852:	4a0e      	ldr	r2, [pc, #56]	; (800288c <HAL_InitTick+0xa4>)
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <HAL_InitTick+0xa4>)
 800285a:	2200      	movs	r2, #0
 800285c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_InitTick+0xa4>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002864:	4809      	ldr	r0, [pc, #36]	; (800288c <HAL_InitTick+0xa4>)
 8002866:	f003 f8d5 	bl	8005a14 <HAL_TIM_Base_Init>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d104      	bne.n	800287a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002870:	4806      	ldr	r0, [pc, #24]	; (800288c <HAL_InitTick+0xa4>)
 8002872:	f003 f927 	bl	8005ac4 <HAL_TIM_Base_Start_IT>
 8002876:	4603      	mov	r3, r0
 8002878:	e000      	b.n	800287c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
}
 800287c:	4618      	mov	r0, r3
 800287e:	3730      	adds	r7, #48	; 0x30
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	431bde83 	.word	0x431bde83
 800288c:	200025c8 	.word	0x200025c8
 8002890:	40012c00 	.word	0x40012c00

08002894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <NMI_Handler+0x4>

0800289a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800289e:	e7fe      	b.n	800289e <HardFault_Handler+0x4>

080028a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <MemManage_Handler+0x4>

080028a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028aa:	e7fe      	b.n	80028aa <BusFault_Handler+0x4>

080028ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b0:	e7fe      	b.n	80028b0 <UsageFault_Handler+0x4>

080028b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80028c2:	2001      	movs	r0, #1
 80028c4:	f000 fc56 	bl	8003174 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}

080028cc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80028d2:	f000 fda2 	bl	800341a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	2000332c 	.word	0x2000332c

080028e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028e4:	4802      	ldr	r0, [pc, #8]	; (80028f0 <TIM1_UP_IRQHandler+0x10>)
 80028e6:	f003 f93f 	bl	8005b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	200025c8 	.word	0x200025c8

080028f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <USART2_IRQHandler+0x10>)
 80028fa:	f003 fb53 	bl	8005fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20002610 	.word	0x20002610

08002908 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002918:	4b11      	ldr	r3, [pc, #68]	; (8002960 <MX_USART2_UART_Init+0x4c>)
 800291a:	4a12      	ldr	r2, [pc, #72]	; (8002964 <MX_USART2_UART_Init+0x50>)
 800291c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <MX_USART2_UART_Init+0x4c>)
 8002920:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002926:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <MX_USART2_UART_Init+0x4c>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <MX_USART2_UART_Init+0x4c>)
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <MX_USART2_UART_Init+0x4c>)
 8002934:	2200      	movs	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <MX_USART2_UART_Init+0x4c>)
 800293a:	220c      	movs	r2, #12
 800293c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <MX_USART2_UART_Init+0x4c>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <MX_USART2_UART_Init+0x4c>)
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800294a:	4805      	ldr	r0, [pc, #20]	; (8002960 <MX_USART2_UART_Init+0x4c>)
 800294c:	f003 faac 	bl	8005ea8 <HAL_UART_Init>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002956:	f7fe f971 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20002610 	.word	0x20002610
 8002964:	40004400 	.word	0x40004400

08002968 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 0310 	add.w	r3, r7, #16
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <HAL_UART_MspInit+0x98>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d137      	bne.n	80029f8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002988:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <HAL_UART_MspInit+0x9c>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <HAL_UART_MspInit+0x9c>)
 800298e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002992:	61d3      	str	r3, [r2, #28]
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <HAL_UART_MspInit+0x9c>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a0:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <HAL_UART_MspInit+0x9c>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <HAL_UART_MspInit+0x9c>)
 80029a6:	f043 0304 	orr.w	r3, r3, #4
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <HAL_UART_MspInit+0x9c>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029b8:	2304      	movs	r3, #4
 80029ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c0:	2303      	movs	r3, #3
 80029c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	4619      	mov	r1, r3
 80029ca:	480f      	ldr	r0, [pc, #60]	; (8002a08 <HAL_UART_MspInit+0xa0>)
 80029cc:	f000 fa06 	bl	8002ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029d0:	2308      	movs	r3, #8
 80029d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	f107 0310 	add.w	r3, r7, #16
 80029e0:	4619      	mov	r1, r3
 80029e2:	4809      	ldr	r0, [pc, #36]	; (8002a08 <HAL_UART_MspInit+0xa0>)
 80029e4:	f000 f9fa 	bl	8002ddc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80029e8:	2200      	movs	r2, #0
 80029ea:	2105      	movs	r1, #5
 80029ec:	2026      	movs	r0, #38	; 0x26
 80029ee:	f000 f91a 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029f2:	2026      	movs	r0, #38	; 0x26
 80029f4:	f000 f933 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029f8:	bf00      	nop
 80029fa:	3720      	adds	r7, #32
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40004400 	.word	0x40004400
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40010800 	.word	0x40010800

08002a0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a0c:	480c      	ldr	r0, [pc, #48]	; (8002a40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a0e:	490d      	ldr	r1, [pc, #52]	; (8002a44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a10:	4a0d      	ldr	r2, [pc, #52]	; (8002a48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a14:	e002      	b.n	8002a1c <LoopCopyDataInit>

08002a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a1a:	3304      	adds	r3, #4

08002a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a20:	d3f9      	bcc.n	8002a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a22:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a24:	4c0a      	ldr	r4, [pc, #40]	; (8002a50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a28:	e001      	b.n	8002a2e <LoopFillZerobss>

08002a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a2c:	3204      	adds	r2, #4

08002a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a30:	d3fb      	bcc.n	8002a2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a32:	f7ff ff69 	bl	8002908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a36:	f00b f87b 	bl	800db30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a3a:	f7fe f87f 	bl	8000b3c <main>
  bx lr
 8002a3e:	4770      	bx	lr
  ldr r0, =_sdata
 8002a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a44:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002a48:	0800e36c 	.word	0x0800e36c
  ldr r2, =_sbss
 8002a4c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8002a50:	20003618 	.word	0x20003618

08002a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a54:	e7fe      	b.n	8002a54 <ADC1_2_IRQHandler>
	...

08002a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_Init+0x28>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_Init+0x28>)
 8002a62:	f043 0310 	orr.w	r3, r3, #16
 8002a66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f000 f8d1 	bl	8002c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7ff feba 	bl	80027e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a74:	f7ff fe80 	bl	8002778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40022000 	.word	0x40022000

08002a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_IncTick+0x1c>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_IncTick+0x20>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a03      	ldr	r2, [pc, #12]	; (8002aa4 <HAL_IncTick+0x20>)
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	20000018 	.word	0x20000018
 8002aa4:	20002654 	.word	0x20002654

08002aa8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8002aac:	4b02      	ldr	r3, [pc, #8]	; (8002ab8 <HAL_GetTick+0x10>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	20002654 	.word	0x20002654

08002abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aee:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <__NVIC_SetPriorityGrouping+0x44>)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	60d3      	str	r3, [r2, #12]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <__NVIC_GetPriorityGrouping+0x18>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	f003 0307 	and.w	r3, r3, #7
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	db0b      	blt.n	8002b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	f003 021f 	and.w	r2, r3, #31
 8002b38:	4906      	ldr	r1, [pc, #24]	; (8002b54 <__NVIC_EnableIRQ+0x34>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2001      	movs	r0, #1
 8002b42:	fa00 f202 	lsl.w	r2, r0, r2
 8002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf28      	it	cs
 8002bca:	2304      	movcs	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d902      	bls.n	8002bdc <NVIC_EncodePriority+0x30>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b03      	subs	r3, #3
 8002bda:	e000      	b.n	8002bde <NVIC_EncodePriority+0x32>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	4313      	orrs	r3, r2
         );
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff4f 	bl	8002abc <__NVIC_SetPriorityGrouping>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c38:	f7ff ff64 	bl	8002b04 <__NVIC_GetPriorityGrouping>
 8002c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	6978      	ldr	r0, [r7, #20]
 8002c44:	f7ff ffb2 	bl	8002bac <NVIC_EncodePriority>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff81 	bl	8002b58 <__NVIC_SetPriority>
}
 8002c56:	bf00      	nop
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff57 	bl	8002b20 <__NVIC_EnableIRQ>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d008      	beq.n	8002ca2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2204      	movs	r2, #4
 8002c94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e020      	b.n	8002ce4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 020e 	bic.w	r2, r2, #14
 8002cb0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0201 	bic.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	2101      	movs	r1, #1
 8002ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d005      	beq.n	8002d12 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2204      	movs	r2, #4
 8002d0a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
 8002d10:	e051      	b.n	8002db6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 020e 	bic.w	r2, r2, #14
 8002d20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a22      	ldr	r2, [pc, #136]	; (8002dc0 <HAL_DMA_Abort_IT+0xd0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d029      	beq.n	8002d90 <HAL_DMA_Abort_IT+0xa0>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a20      	ldr	r2, [pc, #128]	; (8002dc4 <HAL_DMA_Abort_IT+0xd4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d022      	beq.n	8002d8c <HAL_DMA_Abort_IT+0x9c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1f      	ldr	r2, [pc, #124]	; (8002dc8 <HAL_DMA_Abort_IT+0xd8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d01a      	beq.n	8002d86 <HAL_DMA_Abort_IT+0x96>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a1d      	ldr	r2, [pc, #116]	; (8002dcc <HAL_DMA_Abort_IT+0xdc>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d012      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x90>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a1c      	ldr	r2, [pc, #112]	; (8002dd0 <HAL_DMA_Abort_IT+0xe0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00a      	beq.n	8002d7a <HAL_DMA_Abort_IT+0x8a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a1a      	ldr	r2, [pc, #104]	; (8002dd4 <HAL_DMA_Abort_IT+0xe4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d102      	bne.n	8002d74 <HAL_DMA_Abort_IT+0x84>
 8002d6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d72:	e00e      	b.n	8002d92 <HAL_DMA_Abort_IT+0xa2>
 8002d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d78:	e00b      	b.n	8002d92 <HAL_DMA_Abort_IT+0xa2>
 8002d7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d7e:	e008      	b.n	8002d92 <HAL_DMA_Abort_IT+0xa2>
 8002d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d84:	e005      	b.n	8002d92 <HAL_DMA_Abort_IT+0xa2>
 8002d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d8a:	e002      	b.n	8002d92 <HAL_DMA_Abort_IT+0xa2>
 8002d8c:	2310      	movs	r3, #16
 8002d8e:	e000      	b.n	8002d92 <HAL_DMA_Abort_IT+0xa2>
 8002d90:	2301      	movs	r3, #1
 8002d92:	4a11      	ldr	r2, [pc, #68]	; (8002dd8 <HAL_DMA_Abort_IT+0xe8>)
 8002d94:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4798      	blx	r3
    } 
  }
  return status;
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40020008 	.word	0x40020008
 8002dc4:	4002001c 	.word	0x4002001c
 8002dc8:	40020030 	.word	0x40020030
 8002dcc:	40020044 	.word	0x40020044
 8002dd0:	40020058 	.word	0x40020058
 8002dd4:	4002006c 	.word	0x4002006c
 8002dd8:	40020000 	.word	0x40020000

08002ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b08b      	sub	sp, #44	; 0x2c
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002de6:	2300      	movs	r3, #0
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dea:	2300      	movs	r3, #0
 8002dec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dee:	e169      	b.n	80030c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002df0:	2201      	movs	r2, #1
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	f040 8158 	bne.w	80030be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4a9a      	ldr	r2, [pc, #616]	; (800307c <HAL_GPIO_Init+0x2a0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d05e      	beq.n	8002ed6 <HAL_GPIO_Init+0xfa>
 8002e18:	4a98      	ldr	r2, [pc, #608]	; (800307c <HAL_GPIO_Init+0x2a0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d875      	bhi.n	8002f0a <HAL_GPIO_Init+0x12e>
 8002e1e:	4a98      	ldr	r2, [pc, #608]	; (8003080 <HAL_GPIO_Init+0x2a4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d058      	beq.n	8002ed6 <HAL_GPIO_Init+0xfa>
 8002e24:	4a96      	ldr	r2, [pc, #600]	; (8003080 <HAL_GPIO_Init+0x2a4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d86f      	bhi.n	8002f0a <HAL_GPIO_Init+0x12e>
 8002e2a:	4a96      	ldr	r2, [pc, #600]	; (8003084 <HAL_GPIO_Init+0x2a8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d052      	beq.n	8002ed6 <HAL_GPIO_Init+0xfa>
 8002e30:	4a94      	ldr	r2, [pc, #592]	; (8003084 <HAL_GPIO_Init+0x2a8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d869      	bhi.n	8002f0a <HAL_GPIO_Init+0x12e>
 8002e36:	4a94      	ldr	r2, [pc, #592]	; (8003088 <HAL_GPIO_Init+0x2ac>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d04c      	beq.n	8002ed6 <HAL_GPIO_Init+0xfa>
 8002e3c:	4a92      	ldr	r2, [pc, #584]	; (8003088 <HAL_GPIO_Init+0x2ac>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d863      	bhi.n	8002f0a <HAL_GPIO_Init+0x12e>
 8002e42:	4a92      	ldr	r2, [pc, #584]	; (800308c <HAL_GPIO_Init+0x2b0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d046      	beq.n	8002ed6 <HAL_GPIO_Init+0xfa>
 8002e48:	4a90      	ldr	r2, [pc, #576]	; (800308c <HAL_GPIO_Init+0x2b0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d85d      	bhi.n	8002f0a <HAL_GPIO_Init+0x12e>
 8002e4e:	2b12      	cmp	r3, #18
 8002e50:	d82a      	bhi.n	8002ea8 <HAL_GPIO_Init+0xcc>
 8002e52:	2b12      	cmp	r3, #18
 8002e54:	d859      	bhi.n	8002f0a <HAL_GPIO_Init+0x12e>
 8002e56:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <HAL_GPIO_Init+0x80>)
 8002e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5c:	08002ed7 	.word	0x08002ed7
 8002e60:	08002eb1 	.word	0x08002eb1
 8002e64:	08002ec3 	.word	0x08002ec3
 8002e68:	08002f05 	.word	0x08002f05
 8002e6c:	08002f0b 	.word	0x08002f0b
 8002e70:	08002f0b 	.word	0x08002f0b
 8002e74:	08002f0b 	.word	0x08002f0b
 8002e78:	08002f0b 	.word	0x08002f0b
 8002e7c:	08002f0b 	.word	0x08002f0b
 8002e80:	08002f0b 	.word	0x08002f0b
 8002e84:	08002f0b 	.word	0x08002f0b
 8002e88:	08002f0b 	.word	0x08002f0b
 8002e8c:	08002f0b 	.word	0x08002f0b
 8002e90:	08002f0b 	.word	0x08002f0b
 8002e94:	08002f0b 	.word	0x08002f0b
 8002e98:	08002f0b 	.word	0x08002f0b
 8002e9c:	08002f0b 	.word	0x08002f0b
 8002ea0:	08002eb9 	.word	0x08002eb9
 8002ea4:	08002ecd 	.word	0x08002ecd
 8002ea8:	4a79      	ldr	r2, [pc, #484]	; (8003090 <HAL_GPIO_Init+0x2b4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d013      	beq.n	8002ed6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002eae:	e02c      	b.n	8002f0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	623b      	str	r3, [r7, #32]
          break;
 8002eb6:	e029      	b.n	8002f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	623b      	str	r3, [r7, #32]
          break;
 8002ec0:	e024      	b.n	8002f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	623b      	str	r3, [r7, #32]
          break;
 8002eca:	e01f      	b.n	8002f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	330c      	adds	r3, #12
 8002ed2:	623b      	str	r3, [r7, #32]
          break;
 8002ed4:	e01a      	b.n	8002f0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ede:	2304      	movs	r3, #4
 8002ee0:	623b      	str	r3, [r7, #32]
          break;
 8002ee2:	e013      	b.n	8002f0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eec:	2308      	movs	r3, #8
 8002eee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	611a      	str	r2, [r3, #16]
          break;
 8002ef6:	e009      	b.n	8002f0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ef8:	2308      	movs	r3, #8
 8002efa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	615a      	str	r2, [r3, #20]
          break;
 8002f02:	e003      	b.n	8002f0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f04:	2300      	movs	r3, #0
 8002f06:	623b      	str	r3, [r7, #32]
          break;
 8002f08:	e000      	b.n	8002f0c <HAL_GPIO_Init+0x130>
          break;
 8002f0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2bff      	cmp	r3, #255	; 0xff
 8002f10:	d801      	bhi.n	8002f16 <HAL_GPIO_Init+0x13a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	e001      	b.n	8002f1a <HAL_GPIO_Init+0x13e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	2bff      	cmp	r3, #255	; 0xff
 8002f20:	d802      	bhi.n	8002f28 <HAL_GPIO_Init+0x14c>
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	e002      	b.n	8002f2e <HAL_GPIO_Init+0x152>
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	3b08      	subs	r3, #8
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	210f      	movs	r1, #15
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	401a      	ands	r2, r3
 8002f40:	6a39      	ldr	r1, [r7, #32]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	fa01 f303 	lsl.w	r3, r1, r3
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80b1 	beq.w	80030be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f5c:	4b4d      	ldr	r3, [pc, #308]	; (8003094 <HAL_GPIO_Init+0x2b8>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	4a4c      	ldr	r2, [pc, #304]	; (8003094 <HAL_GPIO_Init+0x2b8>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6193      	str	r3, [r2, #24]
 8002f68:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <HAL_GPIO_Init+0x2b8>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f74:	4a48      	ldr	r2, [pc, #288]	; (8003098 <HAL_GPIO_Init+0x2bc>)
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	220f      	movs	r2, #15
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4013      	ands	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a40      	ldr	r2, [pc, #256]	; (800309c <HAL_GPIO_Init+0x2c0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d013      	beq.n	8002fc8 <HAL_GPIO_Init+0x1ec>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a3f      	ldr	r2, [pc, #252]	; (80030a0 <HAL_GPIO_Init+0x2c4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_GPIO_Init+0x1e8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a3e      	ldr	r2, [pc, #248]	; (80030a4 <HAL_GPIO_Init+0x2c8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d007      	beq.n	8002fc0 <HAL_GPIO_Init+0x1e4>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a3d      	ldr	r2, [pc, #244]	; (80030a8 <HAL_GPIO_Init+0x2cc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d101      	bne.n	8002fbc <HAL_GPIO_Init+0x1e0>
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e006      	b.n	8002fca <HAL_GPIO_Init+0x1ee>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	e004      	b.n	8002fca <HAL_GPIO_Init+0x1ee>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e002      	b.n	8002fca <HAL_GPIO_Init+0x1ee>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_GPIO_Init+0x1ee>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fcc:	f002 0203 	and.w	r2, r2, #3
 8002fd0:	0092      	lsls	r2, r2, #2
 8002fd2:	4093      	lsls	r3, r2
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fda:	492f      	ldr	r1, [pc, #188]	; (8003098 <HAL_GPIO_Init+0x2bc>)
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d006      	beq.n	8003002 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <HAL_GPIO_Init+0x2d0>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	492c      	ldr	r1, [pc, #176]	; (80030ac <HAL_GPIO_Init+0x2d0>)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
 8003000:	e006      	b.n	8003010 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003002:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <HAL_GPIO_Init+0x2d0>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	43db      	mvns	r3, r3
 800300a:	4928      	ldr	r1, [pc, #160]	; (80030ac <HAL_GPIO_Init+0x2d0>)
 800300c:	4013      	ands	r3, r2
 800300e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d006      	beq.n	800302a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800301c:	4b23      	ldr	r3, [pc, #140]	; (80030ac <HAL_GPIO_Init+0x2d0>)
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	4922      	ldr	r1, [pc, #136]	; (80030ac <HAL_GPIO_Init+0x2d0>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
 8003028:	e006      	b.n	8003038 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800302a:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_GPIO_Init+0x2d0>)
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	43db      	mvns	r3, r3
 8003032:	491e      	ldr	r1, [pc, #120]	; (80030ac <HAL_GPIO_Init+0x2d0>)
 8003034:	4013      	ands	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003044:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_GPIO_Init+0x2d0>)
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	4918      	ldr	r1, [pc, #96]	; (80030ac <HAL_GPIO_Init+0x2d0>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	608b      	str	r3, [r1, #8]
 8003050:	e006      	b.n	8003060 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003052:	4b16      	ldr	r3, [pc, #88]	; (80030ac <HAL_GPIO_Init+0x2d0>)
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	43db      	mvns	r3, r3
 800305a:	4914      	ldr	r1, [pc, #80]	; (80030ac <HAL_GPIO_Init+0x2d0>)
 800305c:	4013      	ands	r3, r2
 800305e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d021      	beq.n	80030b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800306c:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <HAL_GPIO_Init+0x2d0>)
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	490e      	ldr	r1, [pc, #56]	; (80030ac <HAL_GPIO_Init+0x2d0>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	60cb      	str	r3, [r1, #12]
 8003078:	e021      	b.n	80030be <HAL_GPIO_Init+0x2e2>
 800307a:	bf00      	nop
 800307c:	10320000 	.word	0x10320000
 8003080:	10310000 	.word	0x10310000
 8003084:	10220000 	.word	0x10220000
 8003088:	10210000 	.word	0x10210000
 800308c:	10120000 	.word	0x10120000
 8003090:	10110000 	.word	0x10110000
 8003094:	40021000 	.word	0x40021000
 8003098:	40010000 	.word	0x40010000
 800309c:	40010800 	.word	0x40010800
 80030a0:	40010c00 	.word	0x40010c00
 80030a4:	40011000 	.word	0x40011000
 80030a8:	40011400 	.word	0x40011400
 80030ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_GPIO_Init+0x304>)
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	4909      	ldr	r1, [pc, #36]	; (80030e0 <HAL_GPIO_Init+0x304>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	3301      	adds	r3, #1
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	fa22 f303 	lsr.w	r3, r2, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f47f ae8e 	bne.w	8002df0 <HAL_GPIO_Init+0x14>
  }
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	372c      	adds	r7, #44	; 0x2c
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	40010400 	.word	0x40010400

080030e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	887b      	ldrh	r3, [r7, #2]
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
 8003100:	e001      	b.n	8003106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003106:	7bfb      	ldrb	r3, [r7, #15]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	807b      	strh	r3, [r7, #2]
 800311e:	4613      	mov	r3, r2
 8003120:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003122:	787b      	ldrb	r3, [r7, #1]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003128:	887a      	ldrh	r2, [r7, #2]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800312e:	e003      	b.n	8003138 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003130:	887b      	ldrh	r3, [r7, #2]
 8003132:	041a      	lsls	r2, r3, #16
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	611a      	str	r2, [r3, #16]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003142:	b480      	push	{r7}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003154:	887a      	ldrh	r2, [r7, #2]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4013      	ands	r3, r2
 800315a:	041a      	lsls	r2, r3, #16
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	43d9      	mvns	r1, r3
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	400b      	ands	r3, r1
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	611a      	str	r2, [r3, #16]
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d006      	beq.n	8003198 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800318a:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	4618      	mov	r0, r3
 8003194:	f000 f806 	bl	80031a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003198:	bf00      	nop
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40010400 	.word	0x40010400

080031a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ba:	b08b      	sub	sp, #44	; 0x2c
 80031bc:	af06      	add	r7, sp, #24
 80031be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0fd      	b.n	80033c6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f00a f9fc 	bl	800d5dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2203      	movs	r2, #3
 80031e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 fadb 	bl	80067ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	687e      	ldr	r6, [r7, #4]
 80031fe:	466d      	mov	r5, sp
 8003200:	f106 0410 	add.w	r4, r6, #16
 8003204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	602b      	str	r3, [r5, #0]
 800320c:	1d33      	adds	r3, r6, #4
 800320e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003210:	6838      	ldr	r0, [r7, #0]
 8003212:	f003 faa5 	bl	8006760 <USB_CoreInit>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0ce      	b.n	80033c6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f003 fad6 	bl	80067e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	e04c      	b.n	80032d4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	3301      	adds	r3, #1
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	b298      	uxth	r0, r3
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	440b      	add	r3, r1
 8003276:	3336      	adds	r3, #54	; 0x36
 8003278:	4602      	mov	r2, r0
 800327a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	440b      	add	r3, r1
 800328c:	3303      	adds	r3, #3
 800328e:	2200      	movs	r2, #0
 8003290:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003292:	7bfa      	ldrb	r2, [r7, #15]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	440b      	add	r3, r1
 80032a0:	3338      	adds	r3, #56	; 0x38
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	333c      	adds	r3, #60	; 0x3c
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032ba:	7bfa      	ldrb	r2, [r7, #15]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	440b      	add	r3, r1
 80032c8:	3340      	adds	r3, #64	; 0x40
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	3301      	adds	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
 80032d4:	7bfa      	ldrb	r2, [r7, #15]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d3ad      	bcc.n	800323a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032de:	2300      	movs	r3, #0
 80032e0:	73fb      	strb	r3, [r7, #15]
 80032e2:	e044      	b.n	800336e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	440b      	add	r3, r1
 80032f2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	440b      	add	r3, r1
 8003308:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	440b      	add	r3, r1
 800331e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003326:	7bfa      	ldrb	r2, [r7, #15]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	440b      	add	r3, r1
 8003334:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	440b      	add	r3, r1
 800334a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	440b      	add	r3, r1
 8003360:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	3301      	adds	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d3b5      	bcc.n	80032e4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	603b      	str	r3, [r7, #0]
 800337e:	687e      	ldr	r6, [r7, #4]
 8003380:	466d      	mov	r5, sp
 8003382:	f106 0410 	add.w	r4, r6, #16
 8003386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	602b      	str	r3, [r5, #0]
 800338e:	1d33      	adds	r3, r6, #4
 8003390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003392:	6838      	ldr	r0, [r7, #0]
 8003394:	f003 fa30 	bl	80067f8 <USB_DevInit>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e00d      	b.n	80033c6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f005 fba1 	bl	8008b06 <USB_DevDisconnect>

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_PCD_Start+0x16>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e016      	b.n	8003412 <HAL_PCD_Start+0x44>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f003 f9c5 	bl	8006780 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80033f6:	2101      	movs	r1, #1
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f00a fb62 	bl	800dac2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f005 fb75 	bl	8008af2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b088      	sub	sp, #32
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f005 fb77 	bl	8008b1a <USB_ReadInterrupts>
 800342c:	4603      	mov	r3, r0
 800342e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003436:	d102      	bne.n	800343e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fb61 	bl	8003b00 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f005 fb69 	bl	8008b1a <USB_ReadInterrupts>
 8003448:	4603      	mov	r3, r0
 800344a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003452:	d112      	bne.n	800347a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800345c:	b29a      	uxth	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003466:	b292      	uxth	r2, r2
 8003468:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f00a f930 	bl	800d6d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003472:	2100      	movs	r1, #0
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f925 	bl	80036c4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f005 fb4b 	bl	8008b1a <USB_ReadInterrupts>
 8003484:	4603      	mov	r3, r0
 8003486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800348e:	d10b      	bne.n	80034a8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003498:	b29a      	uxth	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034a2:	b292      	uxth	r2, r2
 80034a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f005 fb34 	bl	8008b1a <USB_ReadInterrupts>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034bc:	d10b      	bne.n	80034d6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d0:	b292      	uxth	r2, r2
 80034d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f005 fb1d 	bl	8008b1a <USB_ReadInterrupts>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ea:	d126      	bne.n	800353a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0204 	bic.w	r2, r2, #4
 80034fe:	b292      	uxth	r2, r2
 8003500:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800350c:	b29a      	uxth	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0208 	bic.w	r2, r2, #8
 8003516:	b292      	uxth	r2, r2
 8003518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f00a f911 	bl	800d744 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800352a:	b29a      	uxth	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003534:	b292      	uxth	r2, r2
 8003536:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f005 faeb 	bl	8008b1a <USB_ReadInterrupts>
 8003544:	4603      	mov	r3, r0
 8003546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800354e:	f040 8084 	bne.w	800365a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003552:	2300      	movs	r3, #0
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e011      	b.n	800357c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	7ffb      	ldrb	r3, [r7, #31]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	441a      	add	r2, r3
 8003564:	7ffb      	ldrb	r3, [r7, #31]
 8003566:	8812      	ldrh	r2, [r2, #0]
 8003568:	b292      	uxth	r2, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	f107 0120 	add.w	r1, r7, #32
 8003570:	440b      	add	r3, r1
 8003572:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003576:	7ffb      	ldrb	r3, [r7, #31]
 8003578:	3301      	adds	r3, #1
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	7ffb      	ldrb	r3, [r7, #31]
 800357e:	2b07      	cmp	r3, #7
 8003580:	d9ea      	bls.n	8003558 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800358a:	b29a      	uxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	b292      	uxth	r2, r2
 8003596:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0201 	bic.w	r2, r2, #1
 80035ac:	b292      	uxth	r2, r2
 80035ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80035b2:	bf00      	nop
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f6      	beq.n	80035b4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d8:	b292      	uxth	r2, r2
 80035da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80035de:	2300      	movs	r3, #0
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e010      	b.n	8003606 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80035e4:	7ffb      	ldrb	r3, [r7, #31]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	4611      	mov	r1, r2
 80035ec:	7ffa      	ldrb	r2, [r7, #31]
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	440a      	add	r2, r1
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	f107 0120 	add.w	r1, r7, #32
 80035f8:	440b      	add	r3, r1
 80035fa:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80035fe:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003600:	7ffb      	ldrb	r3, [r7, #31]
 8003602:	3301      	adds	r3, #1
 8003604:	77fb      	strb	r3, [r7, #31]
 8003606:	7ffb      	ldrb	r3, [r7, #31]
 8003608:	2b07      	cmp	r3, #7
 800360a:	d9eb      	bls.n	80035e4 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0208 	orr.w	r2, r2, #8
 800361e:	b292      	uxth	r2, r2
 8003620:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800362c:	b29a      	uxth	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003636:	b292      	uxth	r2, r2
 8003638:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003644:	b29a      	uxth	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0204 	orr.w	r2, r2, #4
 800364e:	b292      	uxth	r2, r2
 8003650:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f00a f85b 	bl	800d710 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f005 fa5b 	bl	8008b1a <USB_ReadInterrupts>
 8003664:	4603      	mov	r3, r0
 8003666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800366a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800366e:	d10e      	bne.n	800368e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003678:	b29a      	uxth	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003682:	b292      	uxth	r2, r2
 8003684:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f00a f814 	bl	800d6b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f005 fa41 	bl	8008b1a <USB_ReadInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a2:	d10b      	bne.n	80036bc <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036b6:	b292      	uxth	r2, r2
 80036b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80036bc:	bf00      	nop
 80036be:	3720      	adds	r7, #32
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_PCD_SetAddress+0x1a>
 80036da:	2302      	movs	r3, #2
 80036dc:	e013      	b.n	8003706 <HAL_PCD_SetAddress+0x42>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	4611      	mov	r1, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f005 f9e8 	bl	8008acc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	4608      	mov	r0, r1
 8003718:	4611      	mov	r1, r2
 800371a:	461a      	mov	r2, r3
 800371c:	4603      	mov	r3, r0
 800371e:	70fb      	strb	r3, [r7, #3]
 8003720:	460b      	mov	r3, r1
 8003722:	803b      	strh	r3, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800372c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003730:	2b00      	cmp	r3, #0
 8003732:	da0e      	bge.n	8003752 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	4413      	add	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	705a      	strb	r2, [r3, #1]
 8003750:	e00e      	b.n	8003770 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	f003 0207 	and.w	r2, r3, #7
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4413      	add	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	b2da      	uxtb	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800377c:	883a      	ldrh	r2, [r7, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	78ba      	ldrb	r2, [r7, #2]
 8003786:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	785b      	ldrb	r3, [r3, #1]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d004      	beq.n	800379a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800379a:	78bb      	ldrb	r3, [r7, #2]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d102      	bne.n	80037a6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_PCD_EP_Open+0xa6>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e00e      	b.n	80037d2 <HAL_PCD_EP_Open+0xc4>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68f9      	ldr	r1, [r7, #12]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f003 f838 	bl	8006838 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80037d0:	7afb      	ldrb	r3, [r7, #11]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	460b      	mov	r3, r1
 80037e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	da0e      	bge.n	800380c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	705a      	strb	r2, [r3, #1]
 800380a:	e00e      	b.n	800382a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	f003 0207 	and.w	r2, r3, #7
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	b2da      	uxtb	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_PCD_EP_Close+0x6a>
 8003840:	2302      	movs	r3, #2
 8003842:	e00e      	b.n	8003862 <HAL_PCD_EP_Close+0x88>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68f9      	ldr	r1, [r7, #12]
 8003852:	4618      	mov	r0, r3
 8003854:	f003 fb5a 	bl	8006f0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	460b      	mov	r3, r1
 8003878:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800387a:	7afb      	ldrb	r3, [r7, #11]
 800387c:	f003 0207 	and.w	r2, r3, #7
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2200      	movs	r2, #0
 80038a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2200      	movs	r2, #0
 80038a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038aa:	7afb      	ldrb	r3, [r7, #11]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038b6:	7afb      	ldrb	r3, [r7, #11]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d106      	bne.n	80038ce <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6979      	ldr	r1, [r7, #20]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f003 fd0c 	bl	80072e4 <USB_EPStartXfer>
 80038cc:	e005      	b.n	80038da <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6979      	ldr	r1, [r7, #20]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f003 fd05 	bl	80072e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	f003 0207 	and.w	r2, r3, #7
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003906:	681b      	ldr	r3, [r3, #0]
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	460b      	mov	r3, r1
 8003920:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003922:	7afb      	ldrb	r3, [r7, #11]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2200      	movs	r2, #0
 8003956:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2201      	movs	r2, #1
 800395c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800395e:	7afb      	ldrb	r3, [r7, #11]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	b2da      	uxtb	r2, r3
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800396a:	7afb      	ldrb	r3, [r7, #11]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	2b00      	cmp	r3, #0
 8003972:	d106      	bne.n	8003982 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6979      	ldr	r1, [r7, #20]
 800397a:	4618      	mov	r0, r3
 800397c:	f003 fcb2 	bl	80072e4 <USB_EPStartXfer>
 8003980:	e005      	b.n	800398e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6979      	ldr	r1, [r7, #20]
 8003988:	4618      	mov	r0, r3
 800398a:	f003 fcab 	bl	80072e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	f003 0207 	and.w	r2, r3, #7
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d901      	bls.n	80039b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e04c      	b.n	8003a50 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	da0e      	bge.n	80039dc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	705a      	strb	r2, [r3, #1]
 80039da:	e00c      	b.n	80039f6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_PCD_EP_SetStall+0x7e>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e01c      	b.n	8003a50 <HAL_PCD_EP_SetStall+0xb8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68f9      	ldr	r1, [r7, #12]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f004 ff54 	bl	80088d2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d108      	bne.n	8003a46 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4610      	mov	r0, r2
 8003a42:	f005 f879 	bl	8008b38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	f003 020f 	and.w	r2, r3, #15
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d901      	bls.n	8003a76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e040      	b.n	8003af8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	da0e      	bge.n	8003a9c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	705a      	strb	r2, [r3, #1]
 8003a9a:	e00e      	b.n	8003aba <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	f003 0207 	and.w	r2, r3, #7
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_PCD_EP_ClrStall+0x82>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e00e      	b.n	8003af8 <HAL_PCD_EP_ClrStall+0xa0>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68f9      	ldr	r1, [r7, #12]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f004 ff42 	bl	8008972 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08e      	sub	sp, #56	; 0x38
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b08:	e2ec      	b.n	80040e4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b12:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003b20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f040 8161 	bne.w	8003dec <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d152      	bne.n	8003bda <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b44:	81fb      	strh	r3, [r7, #14]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	89fb      	ldrh	r3, [r7, #14]
 8003b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3328      	adds	r3, #40	; 0x28
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	461a      	mov	r2, r3
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4413      	add	r3, r2
 8003b72:	3302      	adds	r3, #2
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	441a      	add	r2, r3
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003b98:	2100      	movs	r1, #0
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f009 fd71 	bl	800d682 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 829b 	beq.w	80040e4 <PCD_EP_ISR_Handler+0x5e4>
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f040 8296 	bne.w	80040e4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	b292      	uxth	r2, r2
 8003bcc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003bd8:	e284      	b.n	80040e4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003bea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d034      	beq.n	8003c5e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	3306      	adds	r3, #6
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	f004 ffd0 	bl	8008bd8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c44:	4013      	ands	r3, r2
 8003c46:	823b      	strh	r3, [r7, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	8a3a      	ldrh	r2, [r7, #16]
 8003c4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c52:	b292      	uxth	r2, r2
 8003c54:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f009 fce6 	bl	800d628 <HAL_PCD_SetupStageCallback>
 8003c5c:	e242      	b.n	80040e4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c5e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f280 823e 	bge.w	80040e4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c74:	4013      	ands	r3, r2
 8003c76:	83bb      	strh	r3, [r7, #28]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	8bba      	ldrh	r2, [r7, #28]
 8003c7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c82:	b292      	uxth	r2, r2
 8003c84:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	3306      	adds	r3, #6
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d019      	beq.n	8003cee <PCD_EP_ISR_Handler+0x1ee>
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d015      	beq.n	8003cee <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	6959      	ldr	r1, [r3, #20]
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	f004 ff80 	bl	8008bd8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	441a      	add	r2, r3
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f009 fcaf 	bl	800d64c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 81f2 	bne.w	80040e4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	4413      	add	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d112      	bne.n	8003d4e <PCD_EP_ISR_Handler+0x24e>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	801a      	strh	r2, [r3, #0]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	801a      	strh	r2, [r3, #0]
 8003d4c:	e02f      	b.n	8003dae <PCD_EP_ISR_Handler+0x2ae>
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b3e      	cmp	r3, #62	; 0x3e
 8003d54:	d813      	bhi.n	8003d7e <PCD_EP_ISR_Handler+0x27e>
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <PCD_EP_ISR_Handler+0x270>
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	029b      	lsls	r3, r3, #10
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	801a      	strh	r2, [r3, #0]
 8003d7c:	e017      	b.n	8003dae <PCD_EP_ISR_Handler+0x2ae>
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	633b      	str	r3, [r7, #48]	; 0x30
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <PCD_EP_ISR_Handler+0x298>
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	3b01      	subs	r3, #1
 8003d96:	633b      	str	r3, [r7, #48]	; 0x30
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	029b      	lsls	r3, r3, #10
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbe:	827b      	strh	r3, [r7, #18]
 8003dc0:	8a7b      	ldrh	r3, [r7, #18]
 8003dc2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003dc6:	827b      	strh	r3, [r7, #18]
 8003dc8:	8a7b      	ldrh	r3, [r7, #18]
 8003dca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003dce:	827b      	strh	r3, [r7, #18]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	8a7b      	ldrh	r3, [r7, #18]
 8003dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	8013      	strh	r3, [r2, #0]
 8003dea:	e17b      	b.n	80040e4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003dfe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f280 80ea 	bge.w	8003fdc <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e1e:	4013      	ands	r3, r2
 8003e20:	853b      	strh	r3, [r7, #40]	; 0x28
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e36:	b292      	uxth	r2, r2
 8003e38:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003e3a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	7b1b      	ldrb	r3, [r3, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d122      	bne.n	8003e9e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3306      	adds	r3, #6
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e80:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003e82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8087 	beq.w	8003f98 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	6959      	ldr	r1, [r3, #20]
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	88da      	ldrh	r2, [r3, #6]
 8003e96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e98:	f004 fe9e 	bl	8008bd8 <USB_ReadPMA>
 8003e9c:	e07c      	b.n	8003f98 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	78db      	ldrb	r3, [r3, #3]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d108      	bne.n	8003eb8 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003ea6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f927 	bl	8004100 <HAL_PCD_EP_DB_Receive>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003eb6:	e06f      	b.n	8003f98 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed2:	847b      	strh	r3, [r7, #34]	; 0x22
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	441a      	add	r2, r3
 8003ee2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d021      	beq.n	8003f56 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	3302      	adds	r3, #2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f3a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003f3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d02a      	beq.n	8003f98 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	6959      	ldr	r1, [r3, #20]
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	891a      	ldrh	r2, [r3, #8]
 8003f4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f50:	f004 fe42 	bl	8008bd8 <USB_ReadPMA>
 8003f54:	e020      	b.n	8003f98 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	3306      	adds	r3, #6
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f7e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003f80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	6959      	ldr	r1, [r3, #20]
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	895a      	ldrh	r2, [r3, #10]
 8003f92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f94:	f004 fe20 	bl	8008bd8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f9e:	441a      	add	r2, r3
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003faa:	441a      	add	r2, r3
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d004      	beq.n	8003fc2 <PCD_EP_ISR_Handler+0x4c2>
 8003fb8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d206      	bcs.n	8003fd0 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f009 fb3f 	bl	800d64c <HAL_PCD_DataOutStageCallback>
 8003fce:	e005      	b.n	8003fdc <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f003 f984 	bl	80072e4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003fdc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d07e      	beq.n	80040e4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003fe6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004014:	843b      	strh	r3, [r7, #32]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	441a      	add	r2, r3
 8004024:	8c3b      	ldrh	r3, [r7, #32]
 8004026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800402a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800402e:	b29b      	uxth	r3, r3
 8004030:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	78db      	ldrb	r3, [r3, #3]
 8004036:	2b03      	cmp	r3, #3
 8004038:	d00c      	beq.n	8004054 <PCD_EP_ISR_Handler+0x554>
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	78db      	ldrb	r3, [r3, #3]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d008      	beq.n	8004054 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004046:	2b02      	cmp	r3, #2
 8004048:	d146      	bne.n	80040d8 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800404a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800404c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d141      	bne.n	80040d8 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800405c:	b29b      	uxth	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	3302      	adds	r3, #2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800407c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	8bfb      	ldrh	r3, [r7, #30]
 8004084:	429a      	cmp	r2, r3
 8004086:	d906      	bls.n	8004096 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	8bfb      	ldrh	r3, [r7, #30]
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	619a      	str	r2, [r3, #24]
 8004094:	e002      	b.n	800409c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	2200      	movs	r2, #0
 800409a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d106      	bne.n	80040b2 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	4619      	mov	r1, r3
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f009 fae9 	bl	800d682 <HAL_PCD_DataInStageCallback>
 80040b0:	e018      	b.n	80040e4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	8bfb      	ldrh	r3, [r7, #30]
 80040b8:	441a      	add	r2, r3
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	8bfb      	ldrh	r3, [r7, #30]
 80040c4:	441a      	add	r2, r3
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040d0:	4618      	mov	r0, r3
 80040d2:	f003 f907 	bl	80072e4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80040d6:	e005      	b.n	80040e4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80040d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040da:	461a      	mov	r2, r3
 80040dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f91b 	bl	800431a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	b21b      	sxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f6ff ad0a 	blt.w	8003b0a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3738      	adds	r7, #56	; 0x38
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d07e      	beq.n	8004216 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004120:	b29b      	uxth	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	3302      	adds	r3, #2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004140:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	8b7b      	ldrh	r3, [r7, #26]
 8004148:	429a      	cmp	r2, r3
 800414a:	d306      	bcc.n	800415a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	8b7b      	ldrh	r3, [r7, #26]
 8004152:	1ad2      	subs	r2, r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	619a      	str	r2, [r3, #24]
 8004158:	e002      	b.n	8004160 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2200      	movs	r2, #0
 800415e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d123      	bne.n	80041b0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	833b      	strh	r3, [r7, #24]
 8004184:	8b3b      	ldrh	r3, [r7, #24]
 8004186:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800418a:	833b      	strh	r3, [r7, #24]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	441a      	add	r2, r3
 800419a:	8b3b      	ldrh	r3, [r7, #24]
 800419c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01f      	beq.n	80041fa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d4:	82fb      	strh	r3, [r7, #22]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	441a      	add	r2, r3
 80041e4:	8afb      	ldrh	r3, [r7, #22]
 80041e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80041fa:	8b7b      	ldrh	r3, [r7, #26]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8087 	beq.w	8004310 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	6959      	ldr	r1, [r3, #20]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	891a      	ldrh	r2, [r3, #8]
 800420e:	8b7b      	ldrh	r3, [r7, #26]
 8004210:	f004 fce2 	bl	8008bd8 <USB_ReadPMA>
 8004214:	e07c      	b.n	8004310 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800421e:	b29b      	uxth	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4413      	add	r3, r2
 800422a:	3306      	adds	r3, #6
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800423e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	699a      	ldr	r2, [r3, #24]
 8004244:	8b7b      	ldrh	r3, [r7, #26]
 8004246:	429a      	cmp	r2, r3
 8004248:	d306      	bcc.n	8004258 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	8b7b      	ldrh	r3, [r7, #26]
 8004250:	1ad2      	subs	r2, r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	619a      	str	r2, [r3, #24]
 8004256:	e002      	b.n	800425e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2200      	movs	r2, #0
 800425c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d123      	bne.n	80042ae <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800427c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004280:	83fb      	strh	r3, [r7, #30]
 8004282:	8bfb      	ldrh	r3, [r7, #30]
 8004284:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004288:	83fb      	strh	r3, [r7, #30]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	441a      	add	r2, r3
 8004298:	8bfb      	ldrh	r3, [r7, #30]
 800429a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800429e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d11f      	bne.n	80042f8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d2:	83bb      	strh	r3, [r7, #28]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	441a      	add	r2, r3
 80042e2:	8bbb      	ldrh	r3, [r7, #28]
 80042e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80042f8:	8b7b      	ldrh	r3, [r7, #26]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	6959      	ldr	r1, [r3, #20]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	895a      	ldrh	r2, [r3, #10]
 800430a:	8b7b      	ldrh	r3, [r7, #26]
 800430c:	f004 fc64 	bl	8008bd8 <USB_ReadPMA>
    }
  }

  return count;
 8004310:	8b7b      	ldrh	r3, [r7, #26]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b0a2      	sub	sp, #136	; 0x88
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	4613      	mov	r3, r2
 8004326:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 81c7 	beq.w	80046c2 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433c:	b29b      	uxth	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4413      	add	r3, r2
 8004348:	3302      	adds	r3, #2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800435c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	699a      	ldr	r2, [r3, #24]
 8004364:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004368:	429a      	cmp	r2, r3
 800436a:	d907      	bls.n	800437c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004374:	1ad2      	subs	r2, r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	619a      	str	r2, [r3, #24]
 800437a:	e002      	b.n	8004382 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2200      	movs	r2, #0
 8004380:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	f040 80b9 	bne.w	80044fe <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	785b      	ldrb	r3, [r3, #1]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d126      	bne.n	80043e2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	4413      	add	r3, r2
 80043aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	011a      	lsls	r2, r3, #4
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	4413      	add	r3, r2
 80043b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043da:	b29a      	uxth	r2, r3
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	801a      	strh	r2, [r3, #0]
 80043e0:	e01a      	b.n	8004418 <HAL_PCD_EP_DB_Transmit+0xfe>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	785b      	ldrb	r3, [r3, #1]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d116      	bne.n	8004418 <HAL_PCD_EP_DB_Transmit+0xfe>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	4413      	add	r3, r2
 8004400:	633b      	str	r3, [r7, #48]	; 0x30
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	011a      	lsls	r2, r3, #4
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	4413      	add	r3, r2
 800440c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	2200      	movs	r2, #0
 8004416:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	623b      	str	r3, [r7, #32]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	785b      	ldrb	r3, [r3, #1]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d126      	bne.n	8004474 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004434:	b29b      	uxth	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	4413      	add	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	011a      	lsls	r2, r3, #4
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	4413      	add	r3, r2
 8004448:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004458:	b29a      	uxth	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800446c:	b29a      	uxth	r2, r3
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	e017      	b.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	785b      	ldrb	r3, [r3, #1]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d113      	bne.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x18a>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004484:	b29b      	uxth	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	4413      	add	r3, r2
 800448c:	623b      	str	r3, [r7, #32]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	011a      	lsls	r2, r3, #4
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	4413      	add	r3, r2
 8004498:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	2200      	movs	r2, #0
 80044a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	4619      	mov	r1, r3
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f009 f8e9 	bl	800d682 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 82d4 	beq.w	8004a64 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	827b      	strh	r3, [r7, #18]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	441a      	add	r2, r3
 80044e6:	8a7b      	ldrh	r3, [r7, #18]
 80044e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	8013      	strh	r3, [r2, #0]
 80044fc:	e2b2      	b.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d021      	beq.n	800454c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004522:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	441a      	add	r2, r3
 8004534:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800453c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004548:	b29b      	uxth	r3, r3
 800454a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004552:	2b01      	cmp	r3, #1
 8004554:	f040 8286 	bne.w	8004a64 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004560:	441a      	add	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	69da      	ldr	r2, [r3, #28]
 800456a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800456e:	441a      	add	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	6a1a      	ldr	r2, [r3, #32]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	429a      	cmp	r2, r3
 800457e:	d309      	bcc.n	8004594 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	6a1a      	ldr	r2, [r3, #32]
 800458a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800458c:	1ad2      	subs	r2, r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	621a      	str	r2, [r3, #32]
 8004592:	e015      	b.n	80045c0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d107      	bne.n	80045ac <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800459c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80045aa:	e009      	b.n	80045c0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2200      	movs	r2, #0
 80045be:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d155      	bne.n	8004674 <HAL_PCD_EP_DB_Transmit+0x35a>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	4413      	add	r3, r2
 80045de:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	011a      	lsls	r2, r3, #4
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	4413      	add	r3, r2
 80045ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045ee:	637b      	str	r3, [r7, #52]	; 0x34
 80045f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d112      	bne.n	800461c <HAL_PCD_EP_DB_Transmit+0x302>
 80045f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004600:	b29a      	uxth	r2, r3
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004604:	801a      	strh	r2, [r3, #0]
 8004606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004614:	b29a      	uxth	r2, r3
 8004616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004618:	801a      	strh	r2, [r3, #0]
 800461a:	e047      	b.n	80046ac <HAL_PCD_EP_DB_Transmit+0x392>
 800461c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800461e:	2b3e      	cmp	r3, #62	; 0x3e
 8004620:	d811      	bhi.n	8004646 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	64bb      	str	r3, [r7, #72]	; 0x48
 8004628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004634:	3301      	adds	r3, #1
 8004636:	64bb      	str	r3, [r7, #72]	; 0x48
 8004638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463a:	b29b      	uxth	r3, r3
 800463c:	029b      	lsls	r3, r3, #10
 800463e:	b29a      	uxth	r2, r3
 8004640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004642:	801a      	strh	r2, [r3, #0]
 8004644:	e032      	b.n	80046ac <HAL_PCD_EP_DB_Transmit+0x392>
 8004646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	64bb      	str	r3, [r7, #72]	; 0x48
 800464c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <HAL_PCD_EP_DB_Transmit+0x342>
 8004656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004658:	3b01      	subs	r3, #1
 800465a:	64bb      	str	r3, [r7, #72]	; 0x48
 800465c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800465e:	b29b      	uxth	r3, r3
 8004660:	029b      	lsls	r3, r3, #10
 8004662:	b29b      	uxth	r3, r3
 8004664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800466c:	b29a      	uxth	r2, r3
 800466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004670:	801a      	strh	r2, [r3, #0]
 8004672:	e01b      	b.n	80046ac <HAL_PCD_EP_DB_Transmit+0x392>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d117      	bne.n	80046ac <HAL_PCD_EP_DB_Transmit+0x392>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	643b      	str	r3, [r7, #64]	; 0x40
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800468a:	b29b      	uxth	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004690:	4413      	add	r3, r2
 8004692:	643b      	str	r3, [r7, #64]	; 0x40
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	011a      	lsls	r2, r3, #4
 800469a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469c:	4413      	add	r3, r2
 800469e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046aa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	6959      	ldr	r1, [r3, #20]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	891a      	ldrh	r2, [r3, #8]
 80046b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f004 fa47 	bl	8008b4e <USB_WritePMA>
 80046c0:	e1d0      	b.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	3306      	adds	r3, #6
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d307      	bcc.n	800470a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004702:	1ad2      	subs	r2, r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	619a      	str	r2, [r3, #24]
 8004708:	e002      	b.n	8004710 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2200      	movs	r2, #0
 800470e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	f040 80c4 	bne.w	80048a2 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	785b      	ldrb	r3, [r3, #1]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d126      	bne.n	8004770 <HAL_PCD_EP_DB_Transmit+0x456>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004730:	b29b      	uxth	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004736:	4413      	add	r3, r2
 8004738:	66fb      	str	r3, [r7, #108]	; 0x6c
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	011a      	lsls	r2, r3, #4
 8004740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004742:	4413      	add	r3, r2
 8004744:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004748:	66bb      	str	r3, [r7, #104]	; 0x68
 800474a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004754:	b29a      	uxth	r2, r3
 8004756:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004758:	801a      	strh	r2, [r3, #0]
 800475a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004768:	b29a      	uxth	r2, r3
 800476a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800476c:	801a      	strh	r2, [r3, #0]
 800476e:	e01a      	b.n	80047a6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	785b      	ldrb	r3, [r3, #1]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d116      	bne.n	80047a6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	677b      	str	r3, [r7, #116]	; 0x74
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004786:	b29b      	uxth	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800478c:	4413      	add	r3, r2
 800478e:	677b      	str	r3, [r7, #116]	; 0x74
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	011a      	lsls	r2, r3, #4
 8004796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004798:	4413      	add	r3, r2
 800479a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800479e:	673b      	str	r3, [r7, #112]	; 0x70
 80047a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047a2:	2200      	movs	r2, #0
 80047a4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	785b      	ldrb	r3, [r3, #1]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d12f      	bne.n	8004814 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	461a      	mov	r2, r3
 80047c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047cc:	4413      	add	r3, r2
 80047ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	011a      	lsls	r2, r3, #4
 80047d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047dc:	4413      	add	r3, r2
 80047de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047f8:	801a      	strh	r2, [r3, #0]
 80047fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800480a:	b29a      	uxth	r2, r3
 800480c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004810:	801a      	strh	r2, [r3, #0]
 8004812:	e017      	b.n	8004844 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	785b      	ldrb	r3, [r3, #1]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d113      	bne.n	8004844 <HAL_PCD_EP_DB_Transmit+0x52a>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004824:	b29b      	uxth	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800482a:	4413      	add	r3, r2
 800482c:	67bb      	str	r3, [r7, #120]	; 0x78
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	011a      	lsls	r2, r3, #4
 8004834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004836:	4413      	add	r3, r2
 8004838:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800483c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800483e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004840:	2200      	movs	r2, #0
 8004842:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	4619      	mov	r1, r3
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f008 ff19 	bl	800d682 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004856:	2b00      	cmp	r3, #0
 8004858:	f040 8104 	bne.w	8004a64 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	441a      	add	r2, r3
 8004888:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800488c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489c:	b29b      	uxth	r3, r3
 800489e:	8013      	strh	r3, [r2, #0]
 80048a0:	e0e0      	b.n	8004a64 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d121      	bne.n	80048f0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	b29b      	uxth	r3, r3
 80048be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	441a      	add	r2, r3
 80048d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80048dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	f040 80b4 	bne.w	8004a64 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	695a      	ldr	r2, [r3, #20]
 8004900:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004904:	441a      	add	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004912:	441a      	add	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	6a1a      	ldr	r2, [r3, #32]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	429a      	cmp	r2, r3
 8004922:	d309      	bcc.n	8004938 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	6a1a      	ldr	r2, [r3, #32]
 800492e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004930:	1ad2      	subs	r2, r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	621a      	str	r2, [r3, #32]
 8004936:	e015      	b.n	8004964 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d107      	bne.n	8004950 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004940:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004944:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800494e:	e009      	b.n	8004964 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2200      	movs	r2, #0
 800495a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	667b      	str	r3, [r7, #100]	; 0x64
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	785b      	ldrb	r3, [r3, #1]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d155      	bne.n	8004a1e <HAL_PCD_EP_DB_Transmit+0x704>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004980:	b29b      	uxth	r3, r3
 8004982:	461a      	mov	r2, r3
 8004984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004986:	4413      	add	r3, r2
 8004988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	011a      	lsls	r2, r3, #4
 8004990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004992:	4413      	add	r3, r2
 8004994:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004998:	65bb      	str	r3, [r7, #88]	; 0x58
 800499a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800499c:	2b00      	cmp	r3, #0
 800499e:	d112      	bne.n	80049c6 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80049a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ae:	801a      	strh	r2, [r3, #0]
 80049b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049be:	b29a      	uxth	r2, r3
 80049c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049c2:	801a      	strh	r2, [r3, #0]
 80049c4:	e044      	b.n	8004a50 <HAL_PCD_EP_DB_Transmit+0x736>
 80049c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c8:	2b3e      	cmp	r3, #62	; 0x3e
 80049ca:	d811      	bhi.n	80049f0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80049cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	657b      	str	r3, [r7, #84]	; 0x54
 80049d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80049dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049de:	3301      	adds	r3, #1
 80049e0:	657b      	str	r3, [r7, #84]	; 0x54
 80049e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	029b      	lsls	r3, r3, #10
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ec:	801a      	strh	r2, [r3, #0]
 80049ee:	e02f      	b.n	8004a50 <HAL_PCD_EP_DB_Transmit+0x736>
 80049f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	657b      	str	r3, [r7, #84]	; 0x54
 80049f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f8:	f003 031f 	and.w	r3, r3, #31
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d102      	bne.n	8004a06 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a02:	3b01      	subs	r3, #1
 8004a04:	657b      	str	r3, [r7, #84]	; 0x54
 8004a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	029b      	lsls	r3, r3, #10
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a1a:	801a      	strh	r2, [r3, #0]
 8004a1c:	e018      	b.n	8004a50 <HAL_PCD_EP_DB_Transmit+0x736>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	785b      	ldrb	r3, [r3, #1]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d114      	bne.n	8004a50 <HAL_PCD_EP_DB_Transmit+0x736>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a34:	4413      	add	r3, r2
 8004a36:	667b      	str	r3, [r7, #100]	; 0x64
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	011a      	lsls	r2, r3, #4
 8004a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a40:	4413      	add	r3, r2
 8004a42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a46:	663b      	str	r3, [r7, #96]	; 0x60
 8004a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a4e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6959      	ldr	r1, [r3, #20]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	895a      	ldrh	r2, [r3, #10]
 8004a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f004 f875 	bl	8008b4e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a7e:	823b      	strh	r3, [r7, #16]
 8004a80:	8a3b      	ldrh	r3, [r7, #16]
 8004a82:	f083 0310 	eor.w	r3, r3, #16
 8004a86:	823b      	strh	r3, [r7, #16]
 8004a88:	8a3b      	ldrh	r3, [r7, #16]
 8004a8a:	f083 0320 	eor.w	r3, r3, #32
 8004a8e:	823b      	strh	r3, [r7, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	441a      	add	r2, r3
 8004a9e:	8a3b      	ldrh	r3, [r7, #16]
 8004aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3788      	adds	r7, #136	; 0x88
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b087      	sub	sp, #28
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	817b      	strh	r3, [r7, #10]
 8004acc:	4613      	mov	r3, r2
 8004ace:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004ad0:	897b      	ldrh	r3, [r7, #10]
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00b      	beq.n	8004af4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004adc:	897b      	ldrh	r3, [r7, #10]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	e009      	b.n	8004b08 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004af4:	897a      	ldrh	r2, [r7, #10]
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004b08:	893b      	ldrh	r3, [r7, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d107      	bne.n	8004b1e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2200      	movs	r2, #0
 8004b12:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	80da      	strh	r2, [r3, #6]
 8004b1c:	e00b      	b.n	8004b36 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2201      	movs	r2, #1
 8004b22:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	0c1b      	lsrs	r3, r3, #16
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr
	...

08004b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e26c      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8087 	beq.w	8004c72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b64:	4b92      	ldr	r3, [pc, #584]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 030c 	and.w	r3, r3, #12
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d00c      	beq.n	8004b8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b70:	4b8f      	ldr	r3, [pc, #572]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 030c 	and.w	r3, r3, #12
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d112      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x5e>
 8004b7c:	4b8c      	ldr	r3, [pc, #560]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d10b      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8a:	4b89      	ldr	r3, [pc, #548]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d06c      	beq.n	8004c70 <HAL_RCC_OscConfig+0x12c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d168      	bne.n	8004c70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e246      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004baa:	d106      	bne.n	8004bba <HAL_RCC_OscConfig+0x76>
 8004bac:	4b80      	ldr	r3, [pc, #512]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a7f      	ldr	r2, [pc, #508]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	e02e      	b.n	8004c18 <HAL_RCC_OscConfig+0xd4>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x98>
 8004bc2:	4b7b      	ldr	r3, [pc, #492]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a7a      	ldr	r2, [pc, #488]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	4b78      	ldr	r3, [pc, #480]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a77      	ldr	r2, [pc, #476]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	e01d      	b.n	8004c18 <HAL_RCC_OscConfig+0xd4>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004be4:	d10c      	bne.n	8004c00 <HAL_RCC_OscConfig+0xbc>
 8004be6:	4b72      	ldr	r3, [pc, #456]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a71      	ldr	r2, [pc, #452]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	4b6f      	ldr	r3, [pc, #444]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a6e      	ldr	r2, [pc, #440]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e00b      	b.n	8004c18 <HAL_RCC_OscConfig+0xd4>
 8004c00:	4b6b      	ldr	r3, [pc, #428]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a6a      	ldr	r2, [pc, #424]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	4b68      	ldr	r3, [pc, #416]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a67      	ldr	r2, [pc, #412]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d013      	beq.n	8004c48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c20:	f7fd ff42 	bl	8002aa8 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c28:	f7fd ff3e 	bl	8002aa8 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b64      	cmp	r3, #100	; 0x64
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e1fa      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3a:	4b5d      	ldr	r3, [pc, #372]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0xe4>
 8004c46:	e014      	b.n	8004c72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c48:	f7fd ff2e 	bl	8002aa8 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c50:	f7fd ff2a 	bl	8002aa8 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	; 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e1e6      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c62:	4b53      	ldr	r3, [pc, #332]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f0      	bne.n	8004c50 <HAL_RCC_OscConfig+0x10c>
 8004c6e:	e000      	b.n	8004c72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d063      	beq.n	8004d46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c7e:	4b4c      	ldr	r3, [pc, #304]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f003 030c 	and.w	r3, r3, #12
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00b      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c8a:	4b49      	ldr	r3, [pc, #292]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d11c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x18c>
 8004c96:	4b46      	ldr	r3, [pc, #280]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d116      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ca2:	4b43      	ldr	r3, [pc, #268]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d005      	beq.n	8004cba <HAL_RCC_OscConfig+0x176>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d001      	beq.n	8004cba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e1ba      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cba:	4b3d      	ldr	r3, [pc, #244]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4939      	ldr	r1, [pc, #228]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cce:	e03a      	b.n	8004d46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d020      	beq.n	8004d1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cd8:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <HAL_RCC_OscConfig+0x270>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cde:	f7fd fee3 	bl	8002aa8 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce6:	f7fd fedf 	bl	8002aa8 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e19b      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf8:	4b2d      	ldr	r3, [pc, #180]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f0      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d04:	4b2a      	ldr	r3, [pc, #168]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	4927      	ldr	r1, [pc, #156]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	600b      	str	r3, [r1, #0]
 8004d18:	e015      	b.n	8004d46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d1a:	4b26      	ldr	r3, [pc, #152]	; (8004db4 <HAL_RCC_OscConfig+0x270>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d20:	f7fd fec2 	bl	8002aa8 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d28:	f7fd febe 	bl	8002aa8 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e17a      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d03a      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d019      	beq.n	8004d8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d5a:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d60:	f7fd fea2 	bl	8002aa8 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d68:	f7fd fe9e 	bl	8002aa8 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e15a      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <HAL_RCC_OscConfig+0x26c>)
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d86:	2001      	movs	r0, #1
 8004d88:	f000 fb0a 	bl	80053a0 <RCC_Delay>
 8004d8c:	e01c      	b.n	8004dc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <HAL_RCC_OscConfig+0x274>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d94:	f7fd fe88 	bl	8002aa8 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d9a:	e00f      	b.n	8004dbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d9c:	f7fd fe84 	bl	8002aa8 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d908      	bls.n	8004dbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e140      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
 8004dae:	bf00      	nop
 8004db0:	40021000 	.word	0x40021000
 8004db4:	42420000 	.word	0x42420000
 8004db8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dbc:	4b9e      	ldr	r3, [pc, #632]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e9      	bne.n	8004d9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80a6 	beq.w	8004f22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dda:	4b97      	ldr	r3, [pc, #604]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10d      	bne.n	8004e02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de6:	4b94      	ldr	r3, [pc, #592]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	4a93      	ldr	r2, [pc, #588]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df0:	61d3      	str	r3, [r2, #28]
 8004df2:	4b91      	ldr	r3, [pc, #580]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	60bb      	str	r3, [r7, #8]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e02:	4b8e      	ldr	r3, [pc, #568]	; (800503c <HAL_RCC_OscConfig+0x4f8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d118      	bne.n	8004e40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e0e:	4b8b      	ldr	r3, [pc, #556]	; (800503c <HAL_RCC_OscConfig+0x4f8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a8a      	ldr	r2, [pc, #552]	; (800503c <HAL_RCC_OscConfig+0x4f8>)
 8004e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e1a:	f7fd fe45 	bl	8002aa8 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e22:	f7fd fe41 	bl	8002aa8 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b64      	cmp	r3, #100	; 0x64
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e0fd      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e34:	4b81      	ldr	r3, [pc, #516]	; (800503c <HAL_RCC_OscConfig+0x4f8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d106      	bne.n	8004e56 <HAL_RCC_OscConfig+0x312>
 8004e48:	4b7b      	ldr	r3, [pc, #492]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	4a7a      	ldr	r2, [pc, #488]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	6213      	str	r3, [r2, #32]
 8004e54:	e02d      	b.n	8004eb2 <HAL_RCC_OscConfig+0x36e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x334>
 8004e5e:	4b76      	ldr	r3, [pc, #472]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	4a75      	ldr	r2, [pc, #468]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	6213      	str	r3, [r2, #32]
 8004e6a:	4b73      	ldr	r3, [pc, #460]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	4a72      	ldr	r2, [pc, #456]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e70:	f023 0304 	bic.w	r3, r3, #4
 8004e74:	6213      	str	r3, [r2, #32]
 8004e76:	e01c      	b.n	8004eb2 <HAL_RCC_OscConfig+0x36e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b05      	cmp	r3, #5
 8004e7e:	d10c      	bne.n	8004e9a <HAL_RCC_OscConfig+0x356>
 8004e80:	4b6d      	ldr	r3, [pc, #436]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	4a6c      	ldr	r2, [pc, #432]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e86:	f043 0304 	orr.w	r3, r3, #4
 8004e8a:	6213      	str	r3, [r2, #32]
 8004e8c:	4b6a      	ldr	r3, [pc, #424]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	4a69      	ldr	r2, [pc, #420]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6213      	str	r3, [r2, #32]
 8004e98:	e00b      	b.n	8004eb2 <HAL_RCC_OscConfig+0x36e>
 8004e9a:	4b67      	ldr	r3, [pc, #412]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	4a66      	ldr	r2, [pc, #408]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	6213      	str	r3, [r2, #32]
 8004ea6:	4b64      	ldr	r3, [pc, #400]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	4a63      	ldr	r2, [pc, #396]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004eac:	f023 0304 	bic.w	r3, r3, #4
 8004eb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d015      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eba:	f7fd fdf5 	bl	8002aa8 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec0:	e00a      	b.n	8004ed8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec2:	f7fd fdf1 	bl	8002aa8 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e0ab      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed8:	4b57      	ldr	r3, [pc, #348]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0ee      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x37e>
 8004ee4:	e014      	b.n	8004f10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee6:	f7fd fddf 	bl	8002aa8 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eec:	e00a      	b.n	8004f04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eee:	f7fd fddb 	bl	8002aa8 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e095      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f04:	4b4c      	ldr	r3, [pc, #304]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ee      	bne.n	8004eee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d105      	bne.n	8004f22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f16:	4b48      	ldr	r3, [pc, #288]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	4a47      	ldr	r2, [pc, #284]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 8081 	beq.w	800502e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f2c:	4b42      	ldr	r3, [pc, #264]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 030c 	and.w	r3, r3, #12
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d061      	beq.n	8004ffc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d146      	bne.n	8004fce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f40:	4b3f      	ldr	r3, [pc, #252]	; (8005040 <HAL_RCC_OscConfig+0x4fc>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f46:	f7fd fdaf 	bl	8002aa8 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4e:	f7fd fdab 	bl	8002aa8 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e067      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f60:	4b35      	ldr	r3, [pc, #212]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f74:	d108      	bne.n	8004f88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f76:	4b30      	ldr	r3, [pc, #192]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	492d      	ldr	r1, [pc, #180]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f88:	4b2b      	ldr	r3, [pc, #172]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a19      	ldr	r1, [r3, #32]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	4927      	ldr	r1, [pc, #156]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa0:	4b27      	ldr	r3, [pc, #156]	; (8005040 <HAL_RCC_OscConfig+0x4fc>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa6:	f7fd fd7f 	bl	8002aa8 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fae:	f7fd fd7b 	bl	8002aa8 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e037      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fc0:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCC_OscConfig+0x46a>
 8004fcc:	e02f      	b.n	800502e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fce:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <HAL_RCC_OscConfig+0x4fc>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd4:	f7fd fd68 	bl	8002aa8 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fdc:	f7fd fd64 	bl	8002aa8 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e020      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fee:	4b12      	ldr	r3, [pc, #72]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x498>
 8004ffa:	e018      	b.n	800502e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e013      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005008:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <HAL_RCC_OscConfig+0x4f4>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	429a      	cmp	r2, r3
 800501a:	d106      	bne.n	800502a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005026:	429a      	cmp	r2, r3
 8005028:	d001      	beq.n	800502e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40021000 	.word	0x40021000
 800503c:	40007000 	.word	0x40007000
 8005040:	42420060 	.word	0x42420060

08005044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0d0      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005058:	4b6a      	ldr	r3, [pc, #424]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d910      	bls.n	8005088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005066:	4b67      	ldr	r3, [pc, #412]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f023 0207 	bic.w	r2, r3, #7
 800506e:	4965      	ldr	r1, [pc, #404]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	4313      	orrs	r3, r2
 8005074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005076:	4b63      	ldr	r3, [pc, #396]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d001      	beq.n	8005088 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0b8      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d020      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050a0:	4b59      	ldr	r3, [pc, #356]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4a58      	ldr	r2, [pc, #352]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050b8:	4b53      	ldr	r3, [pc, #332]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	4a52      	ldr	r2, [pc, #328]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80050c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c4:	4b50      	ldr	r3, [pc, #320]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	494d      	ldr	r1, [pc, #308]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d040      	beq.n	8005164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d107      	bne.n	80050fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ea:	4b47      	ldr	r3, [pc, #284]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d115      	bne.n	8005122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e07f      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d107      	bne.n	8005112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005102:	4b41      	ldr	r3, [pc, #260]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d109      	bne.n	8005122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e073      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005112:	4b3d      	ldr	r3, [pc, #244]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e06b      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005122:	4b39      	ldr	r3, [pc, #228]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f023 0203 	bic.w	r2, r3, #3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4936      	ldr	r1, [pc, #216]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 8005130:	4313      	orrs	r3, r2
 8005132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005134:	f7fd fcb8 	bl	8002aa8 <HAL_GetTick>
 8005138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513a:	e00a      	b.n	8005152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800513c:	f7fd fcb4 	bl	8002aa8 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f241 3288 	movw	r2, #5000	; 0x1388
 800514a:	4293      	cmp	r3, r2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e053      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005152:	4b2d      	ldr	r3, [pc, #180]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f003 020c 	and.w	r2, r3, #12
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	429a      	cmp	r2, r3
 8005162:	d1eb      	bne.n	800513c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005164:	4b27      	ldr	r3, [pc, #156]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d210      	bcs.n	8005194 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005172:	4b24      	ldr	r3, [pc, #144]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 0207 	bic.w	r2, r3, #7
 800517a:	4922      	ldr	r1, [pc, #136]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	4313      	orrs	r3, r2
 8005180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005182:	4b20      	ldr	r3, [pc, #128]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d001      	beq.n	8005194 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e032      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a0:	4b19      	ldr	r3, [pc, #100]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4916      	ldr	r1, [pc, #88]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d009      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	490e      	ldr	r1, [pc, #56]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051d2:	f000 f821 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 80051d6:	4602      	mov	r2, r0
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	490a      	ldr	r1, [pc, #40]	; (800520c <HAL_RCC_ClockConfig+0x1c8>)
 80051e4:	5ccb      	ldrb	r3, [r1, r3]
 80051e6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ea:	4a09      	ldr	r2, [pc, #36]	; (8005210 <HAL_RCC_ClockConfig+0x1cc>)
 80051ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051ee:	4b09      	ldr	r3, [pc, #36]	; (8005214 <HAL_RCC_ClockConfig+0x1d0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fd faf8 	bl	80027e8 <HAL_InitTick>

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40022000 	.word	0x40022000
 8005208:	40021000 	.word	0x40021000
 800520c:	0800e34c 	.word	0x0800e34c
 8005210:	20000010 	.word	0x20000010
 8005214:	20000014 	.word	0x20000014

08005218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005218:	b490      	push	{r4, r7}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800521e:	4b2a      	ldr	r3, [pc, #168]	; (80052c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005220:	1d3c      	adds	r4, r7, #4
 8005222:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005224:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005228:	f240 2301 	movw	r3, #513	; 0x201
 800522c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
 8005232:	2300      	movs	r3, #0
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	2300      	movs	r3, #0
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005242:	4b22      	ldr	r3, [pc, #136]	; (80052cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b04      	cmp	r3, #4
 8005250:	d002      	beq.n	8005258 <HAL_RCC_GetSysClockFreq+0x40>
 8005252:	2b08      	cmp	r3, #8
 8005254:	d003      	beq.n	800525e <HAL_RCC_GetSysClockFreq+0x46>
 8005256:	e02d      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005258:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800525a:	623b      	str	r3, [r7, #32]
      break;
 800525c:	e02d      	b.n	80052ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	0c9b      	lsrs	r3, r3, #18
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800526a:	4413      	add	r3, r2
 800526c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005270:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d013      	beq.n	80052a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800527c:	4b13      	ldr	r3, [pc, #76]	; (80052cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	0c5b      	lsrs	r3, r3, #17
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800528a:	4413      	add	r3, r2
 800528c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005290:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	4a0e      	ldr	r2, [pc, #56]	; (80052d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005296:	fb02 f203 	mul.w	r2, r2, r3
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
 80052a2:	e004      	b.n	80052ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	4a0b      	ldr	r2, [pc, #44]	; (80052d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052a8:	fb02 f303 	mul.w	r3, r2, r3
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	623b      	str	r3, [r7, #32]
      break;
 80052b2:	e002      	b.n	80052ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052b6:	623b      	str	r3, [r7, #32]
      break;
 80052b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052ba:	6a3b      	ldr	r3, [r7, #32]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3728      	adds	r7, #40	; 0x28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc90      	pop	{r4, r7}
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	0800dddc 	.word	0x0800dddc
 80052cc:	40021000 	.word	0x40021000
 80052d0:	00f42400 	.word	0x00f42400
 80052d4:	003d0900 	.word	0x003d0900
 80052d8:	007a1200 	.word	0x007a1200

080052dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e0:	4b02      	ldr	r3, [pc, #8]	; (80052ec <HAL_RCC_GetHCLKFreq+0x10>)
 80052e2:	681b      	ldr	r3, [r3, #0]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	20000010 	.word	0x20000010

080052f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052f4:	f7ff fff2 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 80052f8:	4602      	mov	r2, r0
 80052fa:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	0a1b      	lsrs	r3, r3, #8
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	4903      	ldr	r1, [pc, #12]	; (8005314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005306:	5ccb      	ldrb	r3, [r1, r3]
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40021000 	.word	0x40021000
 8005314:	0800e35c 	.word	0x0800e35c

08005318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800531c:	f7ff ffde 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 8005320:	4602      	mov	r2, r0
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	0adb      	lsrs	r3, r3, #11
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	4903      	ldr	r1, [pc, #12]	; (800533c <HAL_RCC_GetPCLK2Freq+0x24>)
 800532e:	5ccb      	ldrb	r3, [r1, r3]
 8005330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005334:	4618      	mov	r0, r3
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40021000 	.word	0x40021000
 800533c:	0800e35c 	.word	0x0800e35c

08005340 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	220f      	movs	r2, #15
 800534e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005350:	4b11      	ldr	r3, [pc, #68]	; (8005398 <HAL_RCC_GetClockConfig+0x58>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f003 0203 	and.w	r2, r3, #3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <HAL_RCC_GetClockConfig+0x58>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <HAL_RCC_GetClockConfig+0x58>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005374:	4b08      	ldr	r3, [pc, #32]	; (8005398 <HAL_RCC_GetClockConfig+0x58>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	08db      	lsrs	r3, r3, #3
 800537a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005382:	4b06      	ldr	r3, [pc, #24]	; (800539c <HAL_RCC_GetClockConfig+0x5c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0207 	and.w	r2, r3, #7
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr
 8005398:	40021000 	.word	0x40021000
 800539c:	40022000 	.word	0x40022000

080053a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80053a8:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <RCC_Delay+0x34>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a0a      	ldr	r2, [pc, #40]	; (80053d8 <RCC_Delay+0x38>)
 80053ae:	fba2 2303 	umull	r2, r3, r2, r3
 80053b2:	0a5b      	lsrs	r3, r3, #9
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	fb02 f303 	mul.w	r3, r2, r3
 80053ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80053bc:	bf00      	nop
  }
  while (Delay --);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1e5a      	subs	r2, r3, #1
 80053c2:	60fa      	str	r2, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1f9      	bne.n	80053bc <RCC_Delay+0x1c>
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr
 80053d4:	20000010 	.word	0x20000010
 80053d8:	10624dd3 	.word	0x10624dd3

080053dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d07d      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80053f8:	2300      	movs	r3, #0
 80053fa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053fc:	4b4f      	ldr	r3, [pc, #316]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10d      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005408:	4b4c      	ldr	r3, [pc, #304]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	4a4b      	ldr	r2, [pc, #300]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005412:	61d3      	str	r3, [r2, #28]
 8005414:	4b49      	ldr	r3, [pc, #292]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005420:	2301      	movs	r3, #1
 8005422:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005424:	4b46      	ldr	r3, [pc, #280]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542c:	2b00      	cmp	r3, #0
 800542e:	d118      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005430:	4b43      	ldr	r3, [pc, #268]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a42      	ldr	r2, [pc, #264]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800543c:	f7fd fb34 	bl	8002aa8 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005442:	e008      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005444:	f7fd fb30 	bl	8002aa8 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b64      	cmp	r3, #100	; 0x64
 8005450:	d901      	bls.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e06d      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005456:	4b3a      	ldr	r3, [pc, #232]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0f0      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005462:	4b36      	ldr	r3, [pc, #216]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d02e      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	429a      	cmp	r2, r3
 800547e:	d027      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005480:	4b2e      	ldr	r3, [pc, #184]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005488:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800548a:	4b2e      	ldr	r3, [pc, #184]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800548c:	2201      	movs	r2, #1
 800548e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005490:	4b2c      	ldr	r3, [pc, #176]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005496:	4a29      	ldr	r2, [pc, #164]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d014      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a6:	f7fd faff 	bl	8002aa8 <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ac:	e00a      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ae:	f7fd fafb 	bl	8002aa8 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054bc:	4293      	cmp	r3, r2
 80054be:	d901      	bls.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e036      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c4:	4b1d      	ldr	r3, [pc, #116]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0ee      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054d0:	4b1a      	ldr	r3, [pc, #104]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	4917      	ldr	r1, [pc, #92]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d105      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054e8:	4b14      	ldr	r3, [pc, #80]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	4a13      	ldr	r2, [pc, #76]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d008      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005500:	4b0e      	ldr	r3, [pc, #56]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	490b      	ldr	r1, [pc, #44]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800550e:	4313      	orrs	r3, r2
 8005510:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0310 	and.w	r3, r3, #16
 800551a:	2b00      	cmp	r3, #0
 800551c:	d008      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800551e:	4b07      	ldr	r3, [pc, #28]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	4904      	ldr	r1, [pc, #16]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800552c:	4313      	orrs	r3, r2
 800552e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
 8005540:	40007000 	.word	0x40007000
 8005544:	42420440 	.word	0x42420440

08005548 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e076      	b.n	8005648 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	2b00      	cmp	r3, #0
 8005560:	d108      	bne.n	8005574 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800556a:	d009      	beq.n	8005580 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	61da      	str	r2, [r3, #28]
 8005572:	e005      	b.n	8005580 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fd f8a0 	bl	80026e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005604:	ea42 0103 	orr.w	r1, r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	0c1a      	lsrs	r2, r3, #16
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f002 0204 	and.w	r2, r2, #4
 8005626:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69da      	ldr	r2, [r3, #28]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005636:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	4613      	mov	r3, r2
 800565e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_SPI_Transmit+0x22>
 800566e:	2302      	movs	r3, #2
 8005670:	e126      	b.n	80058c0 <HAL_SPI_Transmit+0x270>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800567a:	f7fd fa15 	bl	8002aa8 <HAL_GetTick>
 800567e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	d002      	beq.n	8005696 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005690:	2302      	movs	r3, #2
 8005692:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005694:	e10b      	b.n	80058ae <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <HAL_SPI_Transmit+0x52>
 800569c:	88fb      	ldrh	r3, [r7, #6]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d102      	bne.n	80056a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056a6:	e102      	b.n	80058ae <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2203      	movs	r2, #3
 80056ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	88fa      	ldrh	r2, [r7, #6]
 80056c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	88fa      	ldrh	r2, [r7, #6]
 80056c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ee:	d10f      	bne.n	8005710 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800570e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d007      	beq.n	800572e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800572c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005736:	d14b      	bne.n	80057d0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_SPI_Transmit+0xf6>
 8005740:	8afb      	ldrh	r3, [r7, #22]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d13e      	bne.n	80057c4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	881a      	ldrh	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	1c9a      	adds	r2, r3, #2
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800576a:	e02b      	b.n	80057c4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b02      	cmp	r3, #2
 8005778:	d112      	bne.n	80057a0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	881a      	ldrh	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578a:	1c9a      	adds	r2, r3, #2
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	86da      	strh	r2, [r3, #54]	; 0x36
 800579e:	e011      	b.n	80057c4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057a0:	f7fd f982 	bl	8002aa8 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d803      	bhi.n	80057b8 <HAL_SPI_Transmit+0x168>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d102      	bne.n	80057be <HAL_SPI_Transmit+0x16e>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057c2:	e074      	b.n	80058ae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1ce      	bne.n	800576c <HAL_SPI_Transmit+0x11c>
 80057ce:	e04c      	b.n	800586a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_SPI_Transmit+0x18e>
 80057d8:	8afb      	ldrh	r3, [r7, #22]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d140      	bne.n	8005860 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	330c      	adds	r3, #12
 80057e8:	7812      	ldrb	r2, [r2, #0]
 80057ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005804:	e02c      	b.n	8005860 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b02      	cmp	r3, #2
 8005812:	d113      	bne.n	800583c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	330c      	adds	r3, #12
 800581e:	7812      	ldrb	r2, [r2, #0]
 8005820:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	86da      	strh	r2, [r3, #54]	; 0x36
 800583a:	e011      	b.n	8005860 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800583c:	f7fd f934 	bl	8002aa8 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d803      	bhi.n	8005854 <HAL_SPI_Transmit+0x204>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d102      	bne.n	800585a <HAL_SPI_Transmit+0x20a>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d102      	bne.n	8005860 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800585e:	e026      	b.n	80058ae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1cd      	bne.n	8005806 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	6839      	ldr	r1, [r7, #0]
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 f8b2 	bl	80059d8 <SPI_EndRxTxTransaction>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2220      	movs	r2, #32
 800587e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005888:	2300      	movs	r3, #0
 800588a:	613b      	str	r3, [r7, #16]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	77fb      	strb	r3, [r7, #31]
 80058aa:	e000      	b.n	80058ae <HAL_SPI_Transmit+0x25e>
  }

error:
 80058ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058be:	7ffb      	ldrb	r3, [r7, #31]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3720      	adds	r7, #32
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	603b      	str	r3, [r7, #0]
 80058d4:	4613      	mov	r3, r2
 80058d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058d8:	f7fd f8e6 	bl	8002aa8 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	4413      	add	r3, r2
 80058e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058e8:	f7fd f8de 	bl	8002aa8 <HAL_GetTick>
 80058ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058ee:	4b39      	ldr	r3, [pc, #228]	; (80059d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	015b      	lsls	r3, r3, #5
 80058f4:	0d1b      	lsrs	r3, r3, #20
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	fb02 f303 	mul.w	r3, r2, r3
 80058fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058fe:	e054      	b.n	80059aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d050      	beq.n	80059aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005908:	f7fd f8ce 	bl	8002aa8 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	429a      	cmp	r2, r3
 8005916:	d902      	bls.n	800591e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d13d      	bne.n	800599a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800592c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005936:	d111      	bne.n	800595c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005940:	d004      	beq.n	800594c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800594a:	d107      	bne.n	800595c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800595a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005964:	d10f      	bne.n	8005986 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005984:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e017      	b.n	80059ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4013      	ands	r3, r2
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	bf0c      	ite	eq
 80059ba:	2301      	moveq	r3, #1
 80059bc:	2300      	movne	r3, #0
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	461a      	mov	r2, r3
 80059c2:	79fb      	ldrb	r3, [r7, #7]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d19b      	bne.n	8005900 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000010 	.word	0x20000010

080059d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af02      	add	r7, sp, #8
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2200      	movs	r2, #0
 80059ec:	2180      	movs	r1, #128	; 0x80
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7ff ff6a 	bl	80058c8 <SPI_WaitFlagStateUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fe:	f043 0220 	orr.w	r2, r3, #32
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e000      	b.n	8005a0c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e041      	b.n	8005aaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f839 	bl	8005ab2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4619      	mov	r1, r3
 8005a52:	4610      	mov	r0, r2
 8005a54:	f000 f9b4 	bl	8005dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bc80      	pop	{r7}
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d001      	beq.n	8005adc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e03a      	b.n	8005b52 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0201 	orr.w	r2, r2, #1
 8005af2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a18      	ldr	r2, [pc, #96]	; (8005b5c <HAL_TIM_Base_Start_IT+0x98>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00e      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x58>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b06:	d009      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x58>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a14      	ldr	r2, [pc, #80]	; (8005b60 <HAL_TIM_Base_Start_IT+0x9c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x58>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <HAL_TIM_Base_Start_IT+0xa0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d111      	bne.n	8005b40 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d010      	beq.n	8005b50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0201 	orr.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b3e:	e007      	b.n	8005b50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0201 	orr.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800

08005b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d122      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d11b      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0202 	mvn.w	r2, #2
 8005b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f8ed 	bl	8005d8a <HAL_TIM_IC_CaptureCallback>
 8005bb0:	e005      	b.n	8005bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f8e0 	bl	8005d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f8ef 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d122      	bne.n	8005c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d11b      	bne.n	8005c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0204 	mvn.w	r2, #4
 8005be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2202      	movs	r2, #2
 8005bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f8c3 	bl	8005d8a <HAL_TIM_IC_CaptureCallback>
 8005c04:	e005      	b.n	8005c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f8b6 	bl	8005d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f8c5 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d122      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d11b      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0208 	mvn.w	r2, #8
 8005c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2204      	movs	r2, #4
 8005c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f899 	bl	8005d8a <HAL_TIM_IC_CaptureCallback>
 8005c58:	e005      	b.n	8005c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f88c 	bl	8005d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f89b 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0310 	and.w	r3, r3, #16
 8005c76:	2b10      	cmp	r3, #16
 8005c78:	d122      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b10      	cmp	r3, #16
 8005c86:	d11b      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0210 	mvn.w	r2, #16
 8005c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2208      	movs	r2, #8
 8005c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f86f 	bl	8005d8a <HAL_TIM_IC_CaptureCallback>
 8005cac:	e005      	b.n	8005cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f862 	bl	8005d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f871 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d10e      	bne.n	8005cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d107      	bne.n	8005cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f06f 0201 	mvn.w	r2, #1
 8005ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fa ff96 	bl	8000c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf6:	2b80      	cmp	r3, #128	; 0x80
 8005cf8:	d10e      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d04:	2b80      	cmp	r3, #128	; 0x80
 8005d06:	d107      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f8bf 	bl	8005e96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b40      	cmp	r3, #64	; 0x40
 8005d24:	d10e      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d30:	2b40      	cmp	r3, #64	; 0x40
 8005d32:	d107      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f835 	bl	8005dae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d10e      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d107      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0220 	mvn.w	r2, #32
 8005d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f88a 	bl	8005e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d70:	bf00      	nop
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr

08005d8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc80      	pop	{r7}
 8005dac:	4770      	bx	lr

08005dae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bc80      	pop	{r7}
 8005dbe:	4770      	bx	lr

08005dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a29      	ldr	r2, [pc, #164]	; (8005e78 <TIM_Base_SetConfig+0xb8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00b      	beq.n	8005df0 <TIM_Base_SetConfig+0x30>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dde:	d007      	beq.n	8005df0 <TIM_Base_SetConfig+0x30>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <TIM_Base_SetConfig+0xbc>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_Base_SetConfig+0x30>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <TIM_Base_SetConfig+0xc0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d108      	bne.n	8005e02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1c      	ldr	r2, [pc, #112]	; (8005e78 <TIM_Base_SetConfig+0xb8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00b      	beq.n	8005e22 <TIM_Base_SetConfig+0x62>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e10:	d007      	beq.n	8005e22 <TIM_Base_SetConfig+0x62>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a19      	ldr	r2, [pc, #100]	; (8005e7c <TIM_Base_SetConfig+0xbc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <TIM_Base_SetConfig+0x62>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a18      	ldr	r2, [pc, #96]	; (8005e80 <TIM_Base_SetConfig+0xc0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d108      	bne.n	8005e34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a07      	ldr	r2, [pc, #28]	; (8005e78 <TIM_Base_SetConfig+0xb8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d103      	bne.n	8005e68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	615a      	str	r2, [r3, #20]
}
 8005e6e:	bf00      	nop
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr
 8005e78:	40012c00 	.word	0x40012c00
 8005e7c:	40000400 	.word	0x40000400
 8005e80:	40000800 	.word	0x40000800

08005e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr

08005e96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e03f      	b.n	8005f3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7fc fd4a 	bl	8002968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2224      	movs	r2, #36	; 0x24
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fba9 	bl	8006644 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	691a      	ldr	r2, [r3, #16]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695a      	ldr	r2, [r3, #20]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d11d      	bne.n	8005f98 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_UART_Receive_IT+0x26>
 8005f62:	88fb      	ldrh	r3, [r7, #6]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e016      	b.n	8005f9a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d101      	bne.n	8005f7a <HAL_UART_Receive_IT+0x38>
 8005f76:	2302      	movs	r3, #2
 8005f78:	e00f      	b.n	8005f9a <HAL_UART_Receive_IT+0x58>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f9cf 	bl	8006332 <UART_Start_Receive_IT>
 8005f94:	4603      	mov	r3, r0
 8005f96:	e000      	b.n	8005f9a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
  }
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08a      	sub	sp, #40	; 0x28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10d      	bne.n	8005ff6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d008      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x52>
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fa7f 	bl	80064f2 <UART_Receive_IT>
      return;
 8005ff4:	e17b      	b.n	80062ee <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 80b1 	beq.w	8006160 <HAL_UART_IRQHandler+0x1bc>
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d105      	bne.n	8006014 <HAL_UART_IRQHandler+0x70>
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 80a6 	beq.w	8006160 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HAL_UART_IRQHandler+0x90>
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	f043 0201 	orr.w	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <HAL_UART_IRQHandler+0xb0>
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	f043 0202 	orr.w	r2, r3, #2
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <HAL_UART_IRQHandler+0xd0>
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	f043 0204 	orr.w	r2, r3, #4
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00f      	beq.n	800609e <HAL_UART_IRQHandler+0xfa>
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	f003 0320 	and.w	r3, r3, #32
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <HAL_UART_IRQHandler+0xee>
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f043 0208 	orr.w	r2, r3, #8
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 811e 	beq.w	80062e4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <HAL_UART_IRQHandler+0x11e>
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fa18 	bl	80064f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	bf14      	ite	ne
 80060d0:	2301      	movne	r3, #1
 80060d2:	2300      	moveq	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d102      	bne.n	80060ea <HAL_UART_IRQHandler+0x146>
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d031      	beq.n	800614e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f95a 	bl	80063a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d023      	beq.n	8006146 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800610c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006112:	2b00      	cmp	r3, #0
 8006114:	d013      	beq.n	800613e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	4a76      	ldr	r2, [pc, #472]	; (80062f4 <HAL_UART_IRQHandler+0x350>)
 800611c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	4618      	mov	r0, r3
 8006124:	f7fc fde4 	bl	8002cf0 <HAL_DMA_Abort_IT>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d016      	beq.n	800615c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006138:	4610      	mov	r0, r2
 800613a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800613c:	e00e      	b.n	800615c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f8e3 	bl	800630a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006144:	e00a      	b.n	800615c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f8df 	bl	800630a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800614c:	e006      	b.n	800615c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f8db 	bl	800630a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800615a:	e0c3      	b.n	80062e4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800615c:	bf00      	nop
    return;
 800615e:	e0c1      	b.n	80062e4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006164:	2b01      	cmp	r3, #1
 8006166:	f040 80a1 	bne.w	80062ac <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 809b 	beq.w	80062ac <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	f003 0310 	and.w	r3, r3, #16
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 8095 	beq.w	80062ac <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d04e      	beq.n	8006244 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80061b0:	8a3b      	ldrh	r3, [r7, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 8098 	beq.w	80062e8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061bc:	8a3a      	ldrh	r2, [r7, #16]
 80061be:	429a      	cmp	r2, r3
 80061c0:	f080 8092 	bcs.w	80062e8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8a3a      	ldrh	r2, [r7, #16]
 80061c8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d02b      	beq.n	800622c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061e2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695a      	ldr	r2, [r3, #20]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0201 	bic.w	r2, r2, #1
 80061f2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695a      	ldr	r2, [r3, #20]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006202:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0210 	bic.w	r2, r2, #16
 8006220:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006226:	4618      	mov	r0, r3
 8006228:	f7fc fd27 	bl	8002c7a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006234:	b29b      	uxth	r3, r3
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	b29b      	uxth	r3, r3
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f86d 	bl	800631c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006242:	e051      	b.n	80062e8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800624c:	b29b      	uxth	r3, r3
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d047      	beq.n	80062ec <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800625c:	8a7b      	ldrh	r3, [r7, #18]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d044      	beq.n	80062ec <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006270:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695a      	ldr	r2, [r3, #20]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0201 	bic.w	r2, r2, #1
 8006280:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0210 	bic.w	r2, r2, #16
 800629e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062a0:	8a7b      	ldrh	r3, [r7, #18]
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f839 	bl	800631c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80062aa:	e01f      	b.n	80062ec <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d008      	beq.n	80062c8 <HAL_UART_IRQHandler+0x324>
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f8af 	bl	8006424 <UART_Transmit_IT>
    return;
 80062c6:	e012      	b.n	80062ee <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00d      	beq.n	80062ee <HAL_UART_IRQHandler+0x34a>
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d008      	beq.n	80062ee <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f8f0 	bl	80064c2 <UART_EndTransmit_IT>
    return;
 80062e2:	e004      	b.n	80062ee <HAL_UART_IRQHandler+0x34a>
    return;
 80062e4:	bf00      	nop
 80062e6:	e002      	b.n	80062ee <HAL_UART_IRQHandler+0x34a>
      return;
 80062e8:	bf00      	nop
 80062ea:	e000      	b.n	80062ee <HAL_UART_IRQHandler+0x34a>
      return;
 80062ec:	bf00      	nop
  }
}
 80062ee:	3728      	adds	r7, #40	; 0x28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	080063fd 	.word	0x080063fd

080062f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	bc80      	pop	{r7}
 8006308:	4770      	bx	lr

0800630a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr

0800631c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	4770      	bx	lr

08006332 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006332:	b480      	push	{r7}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	4613      	mov	r3, r2
 800633e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	88fa      	ldrh	r2, [r7, #6]
 800634a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	88fa      	ldrh	r2, [r7, #6]
 8006350:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2222      	movs	r2, #34	; 0x22
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006376:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695a      	ldr	r2, [r3, #20]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0220 	orr.w	r2, r2, #32
 8006396:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	bc80      	pop	{r7}
 80063a2:	4770      	bx	lr

080063a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695a      	ldr	r2, [r3, #20]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0201 	bic.w	r2, r2, #1
 80063ca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d107      	bne.n	80063e4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0210 	bic.w	r2, r2, #16
 80063e2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr

080063fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff ff77 	bl	800630a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b21      	cmp	r3, #33	; 0x21
 8006436:	d13e      	bne.n	80064b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006440:	d114      	bne.n	800646c <UART_Transmit_IT+0x48>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d110      	bne.n	800646c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800645e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	1c9a      	adds	r2, r3, #2
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	621a      	str	r2, [r3, #32]
 800646a:	e008      	b.n	800647e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	1c59      	adds	r1, r3, #1
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6211      	str	r1, [r2, #32]
 8006476:	781a      	ldrb	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006482:	b29b      	uxth	r3, r3
 8006484:	3b01      	subs	r3, #1
 8006486:	b29b      	uxth	r3, r3
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	4619      	mov	r1, r3
 800648c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10f      	bne.n	80064b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	e000      	b.n	80064b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064b6:	2302      	movs	r3, #2
  }
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr

080064c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff ff08 	bl	80062f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b086      	sub	sp, #24
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b22      	cmp	r3, #34	; 0x22
 8006504:	f040 8099 	bne.w	800663a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006510:	d117      	bne.n	8006542 <UART_Receive_IT+0x50>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d113      	bne.n	8006542 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	b29b      	uxth	r3, r3
 800652c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006530:	b29a      	uxth	r2, r3
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653a:	1c9a      	adds	r2, r3, #2
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	629a      	str	r2, [r3, #40]	; 0x28
 8006540:	e026      	b.n	8006590 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006546:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006548:	2300      	movs	r3, #0
 800654a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006554:	d007      	beq.n	8006566 <UART_Receive_IT+0x74>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10a      	bne.n	8006574 <UART_Receive_IT+0x82>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	b2da      	uxtb	r2, r3
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	e008      	b.n	8006586 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006580:	b2da      	uxtb	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29b      	uxth	r3, r3
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	4619      	mov	r1, r3
 800659e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d148      	bne.n	8006636 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0220 	bic.w	r2, r2, #32
 80065b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	695a      	ldr	r2, [r3, #20]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0201 	bic.w	r2, r2, #1
 80065d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d123      	bne.n	800662c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0210 	bic.w	r2, r2, #16
 80065f8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0310 	and.w	r3, r3, #16
 8006604:	2b10      	cmp	r3, #16
 8006606:	d10a      	bne.n	800661e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006608:	2300      	movs	r3, #0
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff fe79 	bl	800631c <HAL_UARTEx_RxEventCallback>
 800662a:	e002      	b.n	8006632 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7fa f931 	bl	8000894 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	e002      	b.n	800663c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	e000      	b.n	800663c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800663a:	2302      	movs	r3, #2
  }
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800667e:	f023 030c 	bic.w	r3, r3, #12
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6812      	ldr	r2, [r2, #0]
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	430b      	orrs	r3, r1
 800668a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a2c      	ldr	r2, [pc, #176]	; (8006758 <UART_SetConfig+0x114>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d103      	bne.n	80066b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80066ac:	f7fe fe34 	bl	8005318 <HAL_RCC_GetPCLK2Freq>
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	e002      	b.n	80066ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80066b4:	f7fe fe1c 	bl	80052f0 <HAL_RCC_GetPCLK1Freq>
 80066b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4613      	mov	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	009a      	lsls	r2, r3, #2
 80066c4:	441a      	add	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d0:	4a22      	ldr	r2, [pc, #136]	; (800675c <UART_SetConfig+0x118>)
 80066d2:	fba2 2303 	umull	r2, r3, r2, r3
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	0119      	lsls	r1, r3, #4
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	009a      	lsls	r2, r3, #2
 80066e4:	441a      	add	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80066f0:	4b1a      	ldr	r3, [pc, #104]	; (800675c <UART_SetConfig+0x118>)
 80066f2:	fba3 0302 	umull	r0, r3, r3, r2
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	2064      	movs	r0, #100	; 0x64
 80066fa:	fb00 f303 	mul.w	r3, r0, r3
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	3332      	adds	r3, #50	; 0x32
 8006704:	4a15      	ldr	r2, [pc, #84]	; (800675c <UART_SetConfig+0x118>)
 8006706:	fba2 2303 	umull	r2, r3, r2, r3
 800670a:	095b      	lsrs	r3, r3, #5
 800670c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006710:	4419      	add	r1, r3
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	4613      	mov	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	009a      	lsls	r2, r3, #2
 800671c:	441a      	add	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	fbb2 f2f3 	udiv	r2, r2, r3
 8006728:	4b0c      	ldr	r3, [pc, #48]	; (800675c <UART_SetConfig+0x118>)
 800672a:	fba3 0302 	umull	r0, r3, r3, r2
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	2064      	movs	r0, #100	; 0x64
 8006732:	fb00 f303 	mul.w	r3, r0, r3
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	3332      	adds	r3, #50	; 0x32
 800673c:	4a07      	ldr	r2, [pc, #28]	; (800675c <UART_SetConfig+0x118>)
 800673e:	fba2 2303 	umull	r2, r3, r2, r3
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	f003 020f 	and.w	r2, r3, #15
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	440a      	add	r2, r1
 800674e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	40013800 	.word	0x40013800
 800675c:	51eb851f 	.word	0x51eb851f

08006760 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006760:	b084      	sub	sp, #16
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	f107 0014 	add.w	r0, r7, #20
 800676e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	b004      	add	sp, #16
 800677e:	4770      	bx	lr

08006780 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006790:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006794:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	b29a      	uxth	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bc80      	pop	{r7}
 80067aa:	4770      	bx	lr

080067ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80067b4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80067b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	43db      	mvns	r3, r3
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	4013      	ands	r3, r2
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc80      	pop	{r7}
 80067de:	4770      	bx	lr

080067e0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr

080067f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80067f8:	b084      	sub	sp, #16
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	f107 0014 	add.w	r0, r7, #20
 8006806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	b004      	add	sp, #16
 8006836:	4770      	bx	lr

08006838 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006838:	b480      	push	{r7}
 800683a:	b09b      	sub	sp, #108	; 0x6c
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800685a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	78db      	ldrb	r3, [r3, #3]
 8006866:	2b03      	cmp	r3, #3
 8006868:	d81f      	bhi.n	80068aa <USB_ActivateEndpoint+0x72>
 800686a:	a201      	add	r2, pc, #4	; (adr r2, 8006870 <USB_ActivateEndpoint+0x38>)
 800686c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006870:	08006881 	.word	0x08006881
 8006874:	0800689d 	.word	0x0800689d
 8006878:	080068b3 	.word	0x080068b3
 800687c:	0800688f 	.word	0x0800688f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006880:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006884:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006888:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800688c:	e012      	b.n	80068b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800688e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006892:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006896:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800689a:	e00b      	b.n	80068b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800689c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80068a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80068a8:	e004      	b.n	80068b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80068b0:	e000      	b.n	80068b4 <USB_ActivateEndpoint+0x7c>
      break;
 80068b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	441a      	add	r2, r3
 80068be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80068c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	4313      	orrs	r3, r2
 80068f6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	441a      	add	r2, r3
 8006904:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006918:	b29b      	uxth	r3, r3
 800691a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	7b1b      	ldrb	r3, [r3, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	f040 8149 	bne.w	8006bb8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	785b      	ldrb	r3, [r3, #1]
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 8084 	beq.w	8006a38 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693a:	b29b      	uxth	r3, r3
 800693c:	461a      	mov	r2, r3
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	4413      	add	r3, r2
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	011a      	lsls	r2, r3, #4
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006952:	613b      	str	r3, [r7, #16]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	88db      	ldrh	r3, [r3, #6]
 8006958:	085b      	lsrs	r3, r3, #1
 800695a:	b29b      	uxth	r3, r3
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	81fb      	strh	r3, [r7, #14]
 8006972:	89fb      	ldrh	r3, [r7, #14]
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01b      	beq.n	80069b4 <USB_ActivateEndpoint+0x17c>
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006992:	81bb      	strh	r3, [r7, #12]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	441a      	add	r2, r3
 800699e:	89bb      	ldrh	r3, [r7, #12]
 80069a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	78db      	ldrb	r3, [r3, #3]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d020      	beq.n	80069fe <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d2:	813b      	strh	r3, [r7, #8]
 80069d4:	893b      	ldrh	r3, [r7, #8]
 80069d6:	f083 0320 	eor.w	r3, r3, #32
 80069da:	813b      	strh	r3, [r7, #8]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	441a      	add	r2, r3
 80069e6:	893b      	ldrh	r3, [r7, #8]
 80069e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	8013      	strh	r3, [r2, #0]
 80069fc:	e27f      	b.n	8006efe <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a14:	817b      	strh	r3, [r7, #10]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	441a      	add	r2, r3
 8006a20:	897b      	ldrh	r3, [r7, #10]
 8006a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	8013      	strh	r3, [r2, #0]
 8006a36:	e262      	b.n	8006efe <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	461a      	mov	r2, r3
 8006a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a48:	4413      	add	r3, r2
 8006a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	011a      	lsls	r2, r3, #4
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	88db      	ldrh	r3, [r3, #6]
 8006a60:	085b      	lsrs	r3, r3, #1
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	4413      	add	r3, r2
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	011a      	lsls	r2, r3, #4
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	4413      	add	r3, r2
 8006a8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a8e:	623b      	str	r3, [r7, #32]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d112      	bne.n	8006abe <USB_ActivateEndpoint+0x286>
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	801a      	strh	r2, [r3, #0]
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	801a      	strh	r2, [r3, #0]
 8006abc:	e02f      	b.n	8006b1e <USB_ActivateEndpoint+0x2e6>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ac4:	d813      	bhi.n	8006aee <USB_ActivateEndpoint+0x2b6>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	663b      	str	r3, [r7, #96]	; 0x60
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <USB_ActivateEndpoint+0x2a8>
 8006ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006adc:	3301      	adds	r3, #1
 8006ade:	663b      	str	r3, [r7, #96]	; 0x60
 8006ae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	029b      	lsls	r3, r3, #10
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	801a      	strh	r2, [r3, #0]
 8006aec:	e017      	b.n	8006b1e <USB_ActivateEndpoint+0x2e6>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	095b      	lsrs	r3, r3, #5
 8006af4:	663b      	str	r3, [r7, #96]	; 0x60
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 031f 	and.w	r3, r3, #31
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d102      	bne.n	8006b08 <USB_ActivateEndpoint+0x2d0>
 8006b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b04:	3b01      	subs	r3, #1
 8006b06:	663b      	str	r3, [r7, #96]	; 0x60
 8006b08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	029b      	lsls	r3, r3, #10
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	83fb      	strh	r3, [r7, #30]
 8006b2c:	8bfb      	ldrh	r3, [r7, #30]
 8006b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d01b      	beq.n	8006b6e <USB_ActivateEndpoint+0x336>
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4c:	83bb      	strh	r3, [r7, #28]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	441a      	add	r2, r3
 8006b58:	8bbb      	ldrh	r3, [r7, #28]
 8006b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b84:	837b      	strh	r3, [r7, #26]
 8006b86:	8b7b      	ldrh	r3, [r7, #26]
 8006b88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b8c:	837b      	strh	r3, [r7, #26]
 8006b8e:	8b7b      	ldrh	r3, [r7, #26]
 8006b90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b94:	837b      	strh	r3, [r7, #26]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	441a      	add	r2, r3
 8006ba0:	8b7b      	ldrh	r3, [r7, #26]
 8006ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	8013      	strh	r3, [r2, #0]
 8006bb6:	e1a2      	b.n	8006efe <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bce:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	441a      	add	r2, r3
 8006bdc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	461a      	mov	r2, r3
 8006c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c04:	4413      	add	r3, r2
 8006c06:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	011a      	lsls	r2, r3, #4
 8006c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c16:	657b      	str	r3, [r7, #84]	; 0x54
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	891b      	ldrh	r3, [r3, #8]
 8006c1c:	085b      	lsrs	r3, r3, #1
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c26:	801a      	strh	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c38:	4413      	add	r3, r2
 8006c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	011a      	lsls	r2, r3, #4
 8006c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	895b      	ldrh	r3, [r3, #10]
 8006c50:	085b      	lsrs	r3, r3, #1
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f040 8091 	bne.w	8006d88 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006c74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d01b      	beq.n	8006cb6 <USB_ActivateEndpoint+0x47e>
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c94:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	441a      	add	r2, r3
 8006ca0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006caa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	873b      	strh	r3, [r7, #56]	; 0x38
 8006cc4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01b      	beq.n	8006d06 <USB_ActivateEndpoint+0x4ce>
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	441a      	add	r2, r3
 8006cf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006d1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d24:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006d26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	441a      	add	r2, r3
 8006d38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d64:	867b      	strh	r3, [r7, #50]	; 0x32
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	441a      	add	r2, r3
 8006d70:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	8013      	strh	r3, [r2, #0]
 8006d86:	e0ba      	b.n	8006efe <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006d98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d01d      	beq.n	8006de0 <USB_ActivateEndpoint+0x5a8>
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	441a      	add	r2, r3
 8006dc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006df0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01d      	beq.n	8006e38 <USB_ActivateEndpoint+0x600>
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	441a      	add	r2, r3
 8006e20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	78db      	ldrb	r3, [r3, #3]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d024      	beq.n	8006e8a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006e5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e5e:	f083 0320 	eor.w	r3, r3, #32
 8006e62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	441a      	add	r2, r3
 8006e70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	8013      	strh	r3, [r2, #0]
 8006e88:	e01d      	b.n	8006ec6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	441a      	add	r2, r3
 8006eae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006edc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	441a      	add	r2, r3
 8006ee8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006efe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	376c      	adds	r7, #108	; 0x6c
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr

08006f0c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b08d      	sub	sp, #52	; 0x34
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	7b1b      	ldrb	r3, [r3, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f040 808e 	bne.w	800703c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	785b      	ldrb	r3, [r3, #1]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d044      	beq.n	8006fb2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	81bb      	strh	r3, [r7, #12]
 8006f36:	89bb      	ldrh	r3, [r7, #12]
 8006f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01b      	beq.n	8006f78 <USB_DeactivateEndpoint+0x6c>
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f56:	817b      	strh	r3, [r7, #10]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	441a      	add	r2, r3
 8006f62:	897b      	ldrh	r3, [r7, #10]
 8006f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f8e:	813b      	strh	r3, [r7, #8]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	441a      	add	r2, r3
 8006f9a:	893b      	ldrh	r3, [r7, #8]
 8006f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	8013      	strh	r3, [r2, #0]
 8006fb0:	e192      	b.n	80072d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	827b      	strh	r3, [r7, #18]
 8006fc0:	8a7b      	ldrh	r3, [r7, #18]
 8006fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d01b      	beq.n	8007002 <USB_DeactivateEndpoint+0xf6>
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe0:	823b      	strh	r3, [r7, #16]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	441a      	add	r2, r3
 8006fec:	8a3b      	ldrh	r3, [r7, #16]
 8006fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007018:	81fb      	strh	r3, [r7, #14]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	441a      	add	r2, r3
 8007024:	89fb      	ldrh	r3, [r7, #14]
 8007026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800702a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800702e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007036:	b29b      	uxth	r3, r3
 8007038:	8013      	strh	r3, [r2, #0]
 800703a:	e14d      	b.n	80072d8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	2b00      	cmp	r3, #0
 8007042:	f040 80a5 	bne.w	8007190 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	843b      	strh	r3, [r7, #32]
 8007054:	8c3b      	ldrh	r3, [r7, #32]
 8007056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d01b      	beq.n	8007096 <USB_DeactivateEndpoint+0x18a>
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007074:	83fb      	strh	r3, [r7, #30]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	441a      	add	r2, r3
 8007080:	8bfb      	ldrh	r3, [r7, #30]
 8007082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800708a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800708e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007092:	b29b      	uxth	r3, r3
 8007094:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	83bb      	strh	r3, [r7, #28]
 80070a4:	8bbb      	ldrh	r3, [r7, #28]
 80070a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d01b      	beq.n	80070e6 <USB_DeactivateEndpoint+0x1da>
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c4:	837b      	strh	r3, [r7, #26]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	441a      	add	r2, r3
 80070d0:	8b7b      	ldrh	r3, [r7, #26]
 80070d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fc:	833b      	strh	r3, [r7, #24]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	441a      	add	r2, r3
 8007108:	8b3b      	ldrh	r3, [r7, #24]
 800710a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800710e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007116:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800711a:	b29b      	uxth	r3, r3
 800711c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29b      	uxth	r3, r3
 800712c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007134:	82fb      	strh	r3, [r7, #22]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	441a      	add	r2, r3
 8007140:	8afb      	ldrh	r3, [r7, #22]
 8007142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800714a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800714e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007152:	b29b      	uxth	r3, r3
 8007154:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	b29b      	uxth	r3, r3
 8007164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800716c:	82bb      	strh	r3, [r7, #20]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	441a      	add	r2, r3
 8007178:	8abb      	ldrh	r3, [r7, #20]
 800717a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800717e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800718a:	b29b      	uxth	r3, r3
 800718c:	8013      	strh	r3, [r2, #0]
 800718e:	e0a3      	b.n	80072d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800719e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01b      	beq.n	80071e0 <USB_DeactivateEndpoint+0x2d4>
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071be:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	441a      	add	r2, r3
 80071ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80071cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071dc:	b29b      	uxth	r3, r3
 80071de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 80071ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80071f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01b      	beq.n	8007230 <USB_DeactivateEndpoint+0x324>
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	b29b      	uxth	r3, r3
 8007206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800720a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	441a      	add	r2, r3
 800721a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800721c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007228:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800722c:	b29b      	uxth	r3, r3
 800722e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	b29b      	uxth	r3, r3
 800723e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007246:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	441a      	add	r2, r3
 8007252:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800725c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007264:	b29b      	uxth	r3, r3
 8007266:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	b29b      	uxth	r3, r3
 8007276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800727a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800727e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	441a      	add	r2, r3
 800728a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800728c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800729c:	b29b      	uxth	r3, r3
 800729e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	441a      	add	r2, r3
 80072c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3734      	adds	r7, #52	; 0x34
 80072de:	46bd      	mov	sp, r7
 80072e0:	bc80      	pop	{r7}
 80072e2:	4770      	bx	lr

080072e4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b0cc      	sub	sp, #304	; 0x130
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	1d3b      	adds	r3, r7, #4
 80072ec:	6018      	str	r0, [r3, #0]
 80072ee:	463b      	mov	r3, r7
 80072f0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072f2:	463b      	mov	r3, r7
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	785b      	ldrb	r3, [r3, #1]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	f040 872e 	bne.w	800815a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80072fe:	463b      	mov	r3, r7
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	699a      	ldr	r2, [r3, #24]
 8007304:	463b      	mov	r3, r7
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	429a      	cmp	r2, r3
 800730c:	d905      	bls.n	800731a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800730e:	463b      	mov	r3, r7
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007318:	e004      	b.n	8007324 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800731a:	463b      	mov	r3, r7
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007324:	463b      	mov	r3, r7
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	7b1b      	ldrb	r3, [r3, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d134      	bne.n	8007398 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800732e:	463b      	mov	r3, r7
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6959      	ldr	r1, [r3, #20]
 8007334:	463b      	mov	r3, r7
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	88da      	ldrh	r2, [r3, #6]
 800733a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800733e:	b29b      	uxth	r3, r3
 8007340:	1d38      	adds	r0, r7, #4
 8007342:	6800      	ldr	r0, [r0, #0]
 8007344:	f001 fc03 	bl	8008b4e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007348:	f107 0310 	add.w	r3, r7, #16
 800734c:	1d3a      	adds	r2, r7, #4
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	1d3b      	adds	r3, r7, #4
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735a:	b29b      	uxth	r3, r3
 800735c:	4619      	mov	r1, r3
 800735e:	f107 0310 	add.w	r3, r7, #16
 8007362:	f107 0210 	add.w	r2, r7, #16
 8007366:	6812      	ldr	r2, [r2, #0]
 8007368:	440a      	add	r2, r1
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	463b      	mov	r3, r7
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	011a      	lsls	r2, r3, #4
 8007374:	f107 0310 	add.w	r3, r7, #16
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4413      	add	r3, r2
 800737c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007380:	f107 030c 	add.w	r3, r7, #12
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800738a:	b29a      	uxth	r2, r3
 800738c:	f107 030c 	add.w	r3, r7, #12
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	801a      	strh	r2, [r3, #0]
 8007394:	f000 beac 	b.w	80080f0 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007398:	463b      	mov	r3, r7
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	78db      	ldrb	r3, [r3, #3]
 800739e:	2b02      	cmp	r3, #2
 80073a0:	f040 838c 	bne.w	8007abc <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80073a4:	463b      	mov	r3, r7
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6a1a      	ldr	r2, [r3, #32]
 80073aa:	463b      	mov	r3, r7
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	f240 8330 	bls.w	8007a16 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80073b6:	1d3b      	adds	r3, r7, #4
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	463b      	mov	r3, r7
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80073d4:	1d3b      	adds	r3, r7, #4
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	463b      	mov	r3, r7
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	441a      	add	r2, r3
 80073e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80073f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80073fa:	463b      	mov	r3, r7
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6a1a      	ldr	r2, [r3, #32]
 8007400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007404:	1ad2      	subs	r2, r2, r3
 8007406:	463b      	mov	r3, r7
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800740c:	1d3b      	adds	r3, r7, #4
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	463b      	mov	r3, r7
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	b29b      	uxth	r3, r3
 800741e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 819e 	beq.w	8007764 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007428:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800742c:	1d3a      	adds	r2, r7, #4
 800742e:	6812      	ldr	r2, [r2, #0]
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	463b      	mov	r3, r7
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d17a      	bne.n	8007532 <USB_EPStartXfer+0x24e>
 800743c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007440:	1d3a      	adds	r2, r7, #4
 8007442:	6812      	ldr	r2, [r2, #0]
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	1d3b      	adds	r3, r7, #4
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800744e:	b29b      	uxth	r3, r3
 8007450:	4619      	mov	r1, r3
 8007452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007456:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800745a:	6812      	ldr	r2, [r2, #0]
 800745c:	440a      	add	r2, r1
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	463b      	mov	r3, r7
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	011a      	lsls	r2, r3, #4
 8007468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4413      	add	r3, r2
 8007470:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007478:	601a      	str	r2, [r3, #0]
 800747a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d11a      	bne.n	80074b8 <USB_EPStartXfer+0x1d4>
 8007482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	b29b      	uxth	r3, r3
 800748c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007490:	b29a      	uxth	r2, r3
 8007492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	801a      	strh	r2, [r3, #0]
 800749a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	801a      	strh	r2, [r3, #0]
 80074b6:	e062      	b.n	800757e <USB_EPStartXfer+0x29a>
 80074b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074bc:	2b3e      	cmp	r3, #62	; 0x3e
 80074be:	d819      	bhi.n	80074f4 <USB_EPStartXfer+0x210>
 80074c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c4:	085b      	lsrs	r3, r3, #1
 80074c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80074ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d004      	beq.n	80074e0 <USB_EPStartXfer+0x1fc>
 80074d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074da:	3301      	adds	r3, #1
 80074dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80074e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	029b      	lsls	r3, r3, #10
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	801a      	strh	r2, [r3, #0]
 80074f2:	e044      	b.n	800757e <USB_EPStartXfer+0x29a>
 80074f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f8:	095b      	lsrs	r3, r3, #5
 80074fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80074fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007502:	f003 031f 	and.w	r3, r3, #31
 8007506:	2b00      	cmp	r3, #0
 8007508:	d104      	bne.n	8007514 <USB_EPStartXfer+0x230>
 800750a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800750e:	3b01      	subs	r3, #1
 8007510:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007514:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007518:	b29b      	uxth	r3, r3
 800751a:	029b      	lsls	r3, r3, #10
 800751c:	b29b      	uxth	r3, r3
 800751e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007526:	b29a      	uxth	r2, r3
 8007528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	801a      	strh	r2, [r3, #0]
 8007530:	e025      	b.n	800757e <USB_EPStartXfer+0x29a>
 8007532:	463b      	mov	r3, r7
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	785b      	ldrb	r3, [r3, #1]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d120      	bne.n	800757e <USB_EPStartXfer+0x29a>
 800753c:	1d3b      	adds	r3, r7, #4
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007544:	b29b      	uxth	r3, r3
 8007546:	4619      	mov	r1, r3
 8007548:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800754c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007550:	6812      	ldr	r2, [r2, #0]
 8007552:	440a      	add	r2, r1
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	463b      	mov	r3, r7
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	011a      	lsls	r2, r3, #4
 800755e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4413      	add	r3, r2
 8007566:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800756a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007574:	b29a      	uxth	r2, r3
 8007576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800757e:	463b      	mov	r3, r7
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	895b      	ldrh	r3, [r3, #10]
 8007584:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007588:	463b      	mov	r3, r7
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6959      	ldr	r1, [r3, #20]
 800758e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007592:	b29b      	uxth	r3, r3
 8007594:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007598:	1d38      	adds	r0, r7, #4
 800759a:	6800      	ldr	r0, [r0, #0]
 800759c:	f001 fad7 	bl	8008b4e <USB_WritePMA>
            ep->xfer_buff += len;
 80075a0:	463b      	mov	r3, r7
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	695a      	ldr	r2, [r3, #20]
 80075a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075aa:	441a      	add	r2, r3
 80075ac:	463b      	mov	r3, r7
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80075b2:	463b      	mov	r3, r7
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6a1a      	ldr	r2, [r3, #32]
 80075b8:	463b      	mov	r3, r7
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d909      	bls.n	80075d6 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80075c2:	463b      	mov	r3, r7
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6a1a      	ldr	r2, [r3, #32]
 80075c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075cc:	1ad2      	subs	r2, r2, r3
 80075ce:	463b      	mov	r3, r7
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	621a      	str	r2, [r3, #32]
 80075d4:	e008      	b.n	80075e8 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80075d6:	463b      	mov	r3, r7
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80075e0:	463b      	mov	r3, r7
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2200      	movs	r2, #0
 80075e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075e8:	463b      	mov	r3, r7
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	785b      	ldrb	r3, [r3, #1]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d17a      	bne.n	80076e8 <USB_EPStartXfer+0x404>
 80075f2:	f107 0318 	add.w	r3, r7, #24
 80075f6:	1d3a      	adds	r2, r7, #4
 80075f8:	6812      	ldr	r2, [r2, #0]
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	1d3b      	adds	r3, r7, #4
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007604:	b29b      	uxth	r3, r3
 8007606:	4619      	mov	r1, r3
 8007608:	f107 0318 	add.w	r3, r7, #24
 800760c:	f107 0218 	add.w	r2, r7, #24
 8007610:	6812      	ldr	r2, [r2, #0]
 8007612:	440a      	add	r2, r1
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	463b      	mov	r3, r7
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	011a      	lsls	r2, r3, #4
 800761e:	f107 0318 	add.w	r3, r7, #24
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4413      	add	r3, r2
 8007626:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800762a:	f107 0314 	add.w	r3, r7, #20
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007634:	2b00      	cmp	r3, #0
 8007636:	d11a      	bne.n	800766e <USB_EPStartXfer+0x38a>
 8007638:	f107 0314 	add.w	r3, r7, #20
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	b29b      	uxth	r3, r3
 8007642:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007646:	b29a      	uxth	r2, r3
 8007648:	f107 0314 	add.w	r3, r7, #20
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	801a      	strh	r2, [r3, #0]
 8007650:	f107 0314 	add.w	r3, r7, #20
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	b29b      	uxth	r3, r3
 800765a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007662:	b29a      	uxth	r2, r3
 8007664:	f107 0314 	add.w	r3, r7, #20
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	801a      	strh	r2, [r3, #0]
 800766c:	e067      	b.n	800773e <USB_EPStartXfer+0x45a>
 800766e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007672:	2b3e      	cmp	r3, #62	; 0x3e
 8007674:	d819      	bhi.n	80076aa <USB_EPStartXfer+0x3c6>
 8007676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800767a:	085b      	lsrs	r3, r3, #1
 800767c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	d004      	beq.n	8007696 <USB_EPStartXfer+0x3b2>
 800768c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007690:	3301      	adds	r3, #1
 8007692:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007696:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800769a:	b29b      	uxth	r3, r3
 800769c:	029b      	lsls	r3, r3, #10
 800769e:	b29a      	uxth	r2, r3
 80076a0:	f107 0314 	add.w	r3, r7, #20
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	801a      	strh	r2, [r3, #0]
 80076a8:	e049      	b.n	800773e <USB_EPStartXfer+0x45a>
 80076aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ae:	095b      	lsrs	r3, r3, #5
 80076b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80076b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b8:	f003 031f 	and.w	r3, r3, #31
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d104      	bne.n	80076ca <USB_EPStartXfer+0x3e6>
 80076c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80076c4:	3b01      	subs	r3, #1
 80076c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80076ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	029b      	lsls	r3, r3, #10
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076dc:	b29a      	uxth	r2, r3
 80076de:	f107 0314 	add.w	r3, r7, #20
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	801a      	strh	r2, [r3, #0]
 80076e6:	e02a      	b.n	800773e <USB_EPStartXfer+0x45a>
 80076e8:	463b      	mov	r3, r7
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	785b      	ldrb	r3, [r3, #1]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d125      	bne.n	800773e <USB_EPStartXfer+0x45a>
 80076f2:	f107 0320 	add.w	r3, r7, #32
 80076f6:	1d3a      	adds	r2, r7, #4
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	1d3b      	adds	r3, r7, #4
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007704:	b29b      	uxth	r3, r3
 8007706:	4619      	mov	r1, r3
 8007708:	f107 0320 	add.w	r3, r7, #32
 800770c:	f107 0220 	add.w	r2, r7, #32
 8007710:	6812      	ldr	r2, [r2, #0]
 8007712:	440a      	add	r2, r1
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	463b      	mov	r3, r7
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	011a      	lsls	r2, r3, #4
 800771e:	f107 0320 	add.w	r3, r7, #32
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4413      	add	r3, r2
 8007726:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800772a:	f107 031c 	add.w	r3, r7, #28
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007734:	b29a      	uxth	r2, r3
 8007736:	f107 031c 	add.w	r3, r7, #28
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800773e:	463b      	mov	r3, r7
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	891b      	ldrh	r3, [r3, #8]
 8007744:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007748:	463b      	mov	r3, r7
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6959      	ldr	r1, [r3, #20]
 800774e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007752:	b29b      	uxth	r3, r3
 8007754:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007758:	1d38      	adds	r0, r7, #4
 800775a:	6800      	ldr	r0, [r0, #0]
 800775c:	f001 f9f7 	bl	8008b4e <USB_WritePMA>
 8007760:	f000 bcc6 	b.w	80080f0 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007764:	463b      	mov	r3, r7
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	785b      	ldrb	r3, [r3, #1]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d164      	bne.n	8007838 <USB_EPStartXfer+0x554>
 800776e:	1d3b      	adds	r3, r7, #4
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	64bb      	str	r3, [r7, #72]	; 0x48
 8007774:	1d3b      	adds	r3, r7, #4
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800777c:	b29b      	uxth	r3, r3
 800777e:	461a      	mov	r2, r3
 8007780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007782:	4413      	add	r3, r2
 8007784:	64bb      	str	r3, [r7, #72]	; 0x48
 8007786:	463b      	mov	r3, r7
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	011a      	lsls	r2, r3, #4
 800778e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007790:	4413      	add	r3, r2
 8007792:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007796:	647b      	str	r3, [r7, #68]	; 0x44
 8007798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d112      	bne.n	80077c6 <USB_EPStartXfer+0x4e2>
 80077a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077ae:	801a      	strh	r2, [r3, #0]
 80077b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077be:	b29a      	uxth	r2, r3
 80077c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077c2:	801a      	strh	r2, [r3, #0]
 80077c4:	e057      	b.n	8007876 <USB_EPStartXfer+0x592>
 80077c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ca:	2b3e      	cmp	r3, #62	; 0x3e
 80077cc:	d817      	bhi.n	80077fe <USB_EPStartXfer+0x51a>
 80077ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077d2:	085b      	lsrs	r3, r3, #1
 80077d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80077d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d004      	beq.n	80077ee <USB_EPStartXfer+0x50a>
 80077e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80077e8:	3301      	adds	r3, #1
 80077ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80077ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	029b      	lsls	r3, r3, #10
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077fa:	801a      	strh	r2, [r3, #0]
 80077fc:	e03b      	b.n	8007876 <USB_EPStartXfer+0x592>
 80077fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007802:	095b      	lsrs	r3, r3, #5
 8007804:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800780c:	f003 031f 	and.w	r3, r3, #31
 8007810:	2b00      	cmp	r3, #0
 8007812:	d104      	bne.n	800781e <USB_EPStartXfer+0x53a>
 8007814:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007818:	3b01      	subs	r3, #1
 800781a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800781e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007822:	b29b      	uxth	r3, r3
 8007824:	029b      	lsls	r3, r3, #10
 8007826:	b29b      	uxth	r3, r3
 8007828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800782c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007830:	b29a      	uxth	r2, r3
 8007832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007834:	801a      	strh	r2, [r3, #0]
 8007836:	e01e      	b.n	8007876 <USB_EPStartXfer+0x592>
 8007838:	463b      	mov	r3, r7
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	785b      	ldrb	r3, [r3, #1]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d119      	bne.n	8007876 <USB_EPStartXfer+0x592>
 8007842:	1d3b      	adds	r3, r7, #4
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	653b      	str	r3, [r7, #80]	; 0x50
 8007848:	1d3b      	adds	r3, r7, #4
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007850:	b29b      	uxth	r3, r3
 8007852:	461a      	mov	r2, r3
 8007854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007856:	4413      	add	r3, r2
 8007858:	653b      	str	r3, [r7, #80]	; 0x50
 800785a:	463b      	mov	r3, r7
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	011a      	lsls	r2, r3, #4
 8007862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007864:	4413      	add	r3, r2
 8007866:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800786a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800786c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007870:	b29a      	uxth	r2, r3
 8007872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007874:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007876:	463b      	mov	r3, r7
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	891b      	ldrh	r3, [r3, #8]
 800787c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007880:	463b      	mov	r3, r7
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6959      	ldr	r1, [r3, #20]
 8007886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800788a:	b29b      	uxth	r3, r3
 800788c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007890:	1d38      	adds	r0, r7, #4
 8007892:	6800      	ldr	r0, [r0, #0]
 8007894:	f001 f95b 	bl	8008b4e <USB_WritePMA>
            ep->xfer_buff += len;
 8007898:	463b      	mov	r3, r7
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	695a      	ldr	r2, [r3, #20]
 800789e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078a2:	441a      	add	r2, r3
 80078a4:	463b      	mov	r3, r7
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80078aa:	463b      	mov	r3, r7
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6a1a      	ldr	r2, [r3, #32]
 80078b0:	463b      	mov	r3, r7
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d909      	bls.n	80078ce <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80078ba:	463b      	mov	r3, r7
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6a1a      	ldr	r2, [r3, #32]
 80078c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c4:	1ad2      	subs	r2, r2, r3
 80078c6:	463b      	mov	r3, r7
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	621a      	str	r2, [r3, #32]
 80078cc:	e008      	b.n	80078e0 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80078ce:	463b      	mov	r3, r7
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80078d8:	463b      	mov	r3, r7
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2200      	movs	r2, #0
 80078de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078e0:	1d3b      	adds	r3, r7, #4
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	643b      	str	r3, [r7, #64]	; 0x40
 80078e6:	463b      	mov	r3, r7
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	785b      	ldrb	r3, [r3, #1]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d164      	bne.n	80079ba <USB_EPStartXfer+0x6d6>
 80078f0:	1d3b      	adds	r3, r7, #4
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80078f6:	1d3b      	adds	r3, r7, #4
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078fe:	b29b      	uxth	r3, r3
 8007900:	461a      	mov	r2, r3
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	4413      	add	r3, r2
 8007906:	63bb      	str	r3, [r7, #56]	; 0x38
 8007908:	463b      	mov	r3, r7
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	011a      	lsls	r2, r3, #4
 8007910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007912:	4413      	add	r3, r2
 8007914:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007918:	637b      	str	r3, [r7, #52]	; 0x34
 800791a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800791e:	2b00      	cmp	r3, #0
 8007920:	d112      	bne.n	8007948 <USB_EPStartXfer+0x664>
 8007922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	b29b      	uxth	r3, r3
 8007928:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800792c:	b29a      	uxth	r2, r3
 800792e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007930:	801a      	strh	r2, [r3, #0]
 8007932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	b29b      	uxth	r3, r3
 8007938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800793c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007940:	b29a      	uxth	r2, r3
 8007942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007944:	801a      	strh	r2, [r3, #0]
 8007946:	e054      	b.n	80079f2 <USB_EPStartXfer+0x70e>
 8007948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800794c:	2b3e      	cmp	r3, #62	; 0x3e
 800794e:	d817      	bhi.n	8007980 <USB_EPStartXfer+0x69c>
 8007950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007954:	085b      	lsrs	r3, r3, #1
 8007956:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800795a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d004      	beq.n	8007970 <USB_EPStartXfer+0x68c>
 8007966:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800796a:	3301      	adds	r3, #1
 800796c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007970:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007974:	b29b      	uxth	r3, r3
 8007976:	029b      	lsls	r3, r3, #10
 8007978:	b29a      	uxth	r2, r3
 800797a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797c:	801a      	strh	r2, [r3, #0]
 800797e:	e038      	b.n	80079f2 <USB_EPStartXfer+0x70e>
 8007980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007984:	095b      	lsrs	r3, r3, #5
 8007986:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800798a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800798e:	f003 031f 	and.w	r3, r3, #31
 8007992:	2b00      	cmp	r3, #0
 8007994:	d104      	bne.n	80079a0 <USB_EPStartXfer+0x6bc>
 8007996:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800799a:	3b01      	subs	r3, #1
 800799c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80079a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	029b      	lsls	r3, r3, #10
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b6:	801a      	strh	r2, [r3, #0]
 80079b8:	e01b      	b.n	80079f2 <USB_EPStartXfer+0x70e>
 80079ba:	463b      	mov	r3, r7
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	785b      	ldrb	r3, [r3, #1]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d116      	bne.n	80079f2 <USB_EPStartXfer+0x70e>
 80079c4:	1d3b      	adds	r3, r7, #4
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	461a      	mov	r2, r3
 80079d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079d2:	4413      	add	r3, r2
 80079d4:	643b      	str	r3, [r7, #64]	; 0x40
 80079d6:	463b      	mov	r3, r7
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	011a      	lsls	r2, r3, #4
 80079de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079e0:	4413      	add	r3, r2
 80079e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80079f2:	463b      	mov	r3, r7
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	895b      	ldrh	r3, [r3, #10]
 80079f8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079fc:	463b      	mov	r3, r7
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6959      	ldr	r1, [r3, #20]
 8007a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a0c:	1d38      	adds	r0, r7, #4
 8007a0e:	6800      	ldr	r0, [r0, #0]
 8007a10:	f001 f89d 	bl	8008b4e <USB_WritePMA>
 8007a14:	e36c      	b.n	80080f0 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007a16:	463b      	mov	r3, r7
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007a20:	1d3b      	adds	r3, r7, #4
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	463b      	mov	r3, r7
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a3a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007a3e:	1d3b      	adds	r3, r7, #4
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	463b      	mov	r3, r7
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	441a      	add	r2, r3
 8007a4c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a64:	1d3b      	adds	r3, r7, #4
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a6a:	1d3b      	adds	r3, r7, #4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	461a      	mov	r2, r3
 8007a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a78:	4413      	add	r3, r2
 8007a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	011a      	lsls	r2, r3, #4
 8007a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a86:	4413      	add	r3, r2
 8007a88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a98:	463b      	mov	r3, r7
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	891b      	ldrh	r3, [r3, #8]
 8007a9e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aa2:	463b      	mov	r3, r7
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6959      	ldr	r1, [r3, #20]
 8007aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ab2:	1d38      	adds	r0, r7, #4
 8007ab4:	6800      	ldr	r0, [r0, #0]
 8007ab6:	f001 f84a 	bl	8008b4e <USB_WritePMA>
 8007aba:	e319      	b.n	80080f0 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007abc:	1d3b      	adds	r3, r7, #4
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	463b      	mov	r3, r7
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad6:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007ada:	1d3b      	adds	r3, r7, #4
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	463b      	mov	r3, r7
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	441a      	add	r2, r3
 8007ae8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007b00:	463b      	mov	r3, r7
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6a1a      	ldr	r2, [r3, #32]
 8007b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b0a:	1ad2      	subs	r2, r2, r3
 8007b0c:	463b      	mov	r3, r7
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007b12:	1d3b      	adds	r3, r7, #4
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	463b      	mov	r3, r7
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 8162 	beq.w	8007df2 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b2e:	1d3b      	adds	r3, r7, #4
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b36:	463b      	mov	r3, r7
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	785b      	ldrb	r3, [r3, #1]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d164      	bne.n	8007c0a <USB_EPStartXfer+0x926>
 8007b40:	1d3b      	adds	r3, r7, #4
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b46:	1d3b      	adds	r3, r7, #4
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b54:	4413      	add	r3, r2
 8007b56:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b58:	463b      	mov	r3, r7
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	011a      	lsls	r2, r3, #4
 8007b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b62:	4413      	add	r3, r2
 8007b64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b68:	677b      	str	r3, [r7, #116]	; 0x74
 8007b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d112      	bne.n	8007b98 <USB_EPStartXfer+0x8b4>
 8007b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b80:	801a      	strh	r2, [r3, #0]
 8007b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b94:	801a      	strh	r2, [r3, #0]
 8007b96:	e057      	b.n	8007c48 <USB_EPStartXfer+0x964>
 8007b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b9c:	2b3e      	cmp	r3, #62	; 0x3e
 8007b9e:	d817      	bhi.n	8007bd0 <USB_EPStartXfer+0x8ec>
 8007ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba4:	085b      	lsrs	r3, r3, #1
 8007ba6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d004      	beq.n	8007bc0 <USB_EPStartXfer+0x8dc>
 8007bb6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bba:	3301      	adds	r3, #1
 8007bbc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007bc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	029b      	lsls	r3, r3, #10
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bcc:	801a      	strh	r2, [r3, #0]
 8007bce:	e03b      	b.n	8007c48 <USB_EPStartXfer+0x964>
 8007bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd4:	095b      	lsrs	r3, r3, #5
 8007bd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bde:	f003 031f 	and.w	r3, r3, #31
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d104      	bne.n	8007bf0 <USB_EPStartXfer+0x90c>
 8007be6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bea:	3b01      	subs	r3, #1
 8007bec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007bf0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	029b      	lsls	r3, r3, #10
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c06:	801a      	strh	r2, [r3, #0]
 8007c08:	e01e      	b.n	8007c48 <USB_EPStartXfer+0x964>
 8007c0a:	463b      	mov	r3, r7
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	785b      	ldrb	r3, [r3, #1]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d119      	bne.n	8007c48 <USB_EPStartXfer+0x964>
 8007c14:	1d3b      	adds	r3, r7, #4
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c24:	4413      	add	r3, r2
 8007c26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c2a:	463b      	mov	r3, r7
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	011a      	lsls	r2, r3, #4
 8007c32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c36:	4413      	add	r3, r2
 8007c38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007c48:	463b      	mov	r3, r7
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	895b      	ldrh	r3, [r3, #10]
 8007c4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c52:	463b      	mov	r3, r7
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6959      	ldr	r1, [r3, #20]
 8007c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c62:	1d38      	adds	r0, r7, #4
 8007c64:	6800      	ldr	r0, [r0, #0]
 8007c66:	f000 ff72 	bl	8008b4e <USB_WritePMA>
          ep->xfer_buff += len;
 8007c6a:	463b      	mov	r3, r7
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	695a      	ldr	r2, [r3, #20]
 8007c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c74:	441a      	add	r2, r3
 8007c76:	463b      	mov	r3, r7
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007c7c:	463b      	mov	r3, r7
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6a1a      	ldr	r2, [r3, #32]
 8007c82:	463b      	mov	r3, r7
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d909      	bls.n	8007ca0 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8007c8c:	463b      	mov	r3, r7
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6a1a      	ldr	r2, [r3, #32]
 8007c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c96:	1ad2      	subs	r2, r2, r3
 8007c98:	463b      	mov	r3, r7
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	621a      	str	r2, [r3, #32]
 8007c9e:	e008      	b.n	8007cb2 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007ca0:	463b      	mov	r3, r7
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007caa:	463b      	mov	r3, r7
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 821a 	beq.w	80080f0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007cbc:	463b      	mov	r3, r7
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	785b      	ldrb	r3, [r3, #1]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d164      	bne.n	8007d90 <USB_EPStartXfer+0xaac>
 8007cc6:	1d3b      	adds	r3, r7, #4
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ccc:	1d3b      	adds	r3, r7, #4
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cda:	4413      	add	r3, r2
 8007cdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cde:	463b      	mov	r3, r7
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	011a      	lsls	r2, r3, #4
 8007ce6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ce8:	4413      	add	r3, r2
 8007cea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cee:	667b      	str	r3, [r7, #100]	; 0x64
 8007cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d112      	bne.n	8007d1e <USB_EPStartXfer+0xa3a>
 8007cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d06:	801a      	strh	r2, [r3, #0]
 8007d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d1a:	801a      	strh	r2, [r3, #0]
 8007d1c:	e057      	b.n	8007dce <USB_EPStartXfer+0xaea>
 8007d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d22:	2b3e      	cmp	r3, #62	; 0x3e
 8007d24:	d817      	bhi.n	8007d56 <USB_EPStartXfer+0xa72>
 8007d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d2a:	085b      	lsrs	r3, r3, #1
 8007d2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <USB_EPStartXfer+0xa62>
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d40:	3301      	adds	r3, #1
 8007d42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	029b      	lsls	r3, r3, #10
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d52:	801a      	strh	r2, [r3, #0]
 8007d54:	e03b      	b.n	8007dce <USB_EPStartXfer+0xaea>
 8007d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5a:	095b      	lsrs	r3, r3, #5
 8007d5c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d64:	f003 031f 	and.w	r3, r3, #31
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d104      	bne.n	8007d76 <USB_EPStartXfer+0xa92>
 8007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d70:	3b01      	subs	r3, #1
 8007d72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	029b      	lsls	r3, r3, #10
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d8c:	801a      	strh	r2, [r3, #0]
 8007d8e:	e01e      	b.n	8007dce <USB_EPStartXfer+0xaea>
 8007d90:	463b      	mov	r3, r7
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	785b      	ldrb	r3, [r3, #1]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d119      	bne.n	8007dce <USB_EPStartXfer+0xaea>
 8007d9a:	1d3b      	adds	r3, r7, #4
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	673b      	str	r3, [r7, #112]	; 0x70
 8007da0:	1d3b      	adds	r3, r7, #4
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	461a      	mov	r2, r3
 8007dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dae:	4413      	add	r3, r2
 8007db0:	673b      	str	r3, [r7, #112]	; 0x70
 8007db2:	463b      	mov	r3, r7
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	011a      	lsls	r2, r3, #4
 8007dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dcc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007dce:	463b      	mov	r3, r7
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	891b      	ldrh	r3, [r3, #8]
 8007dd4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dd8:	463b      	mov	r3, r7
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6959      	ldr	r1, [r3, #20]
 8007dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007de8:	1d38      	adds	r0, r7, #4
 8007dea:	6800      	ldr	r0, [r0, #0]
 8007dec:	f000 feaf 	bl	8008b4e <USB_WritePMA>
 8007df0:	e17e      	b.n	80080f0 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007df2:	463b      	mov	r3, r7
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	785b      	ldrb	r3, [r3, #1]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d16f      	bne.n	8007edc <USB_EPStartXfer+0xbf8>
 8007dfc:	1d3b      	adds	r3, r7, #4
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e04:	1d3b      	adds	r3, r7, #4
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e14:	4413      	add	r3, r2
 8007e16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	011a      	lsls	r2, r3, #4
 8007e22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e26:	4413      	add	r3, r2
 8007e28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d116      	bne.n	8007e66 <USB_EPStartXfer+0xb82>
 8007e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e4a:	801a      	strh	r2, [r3, #0]
 8007e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e62:	801a      	strh	r2, [r3, #0]
 8007e64:	e05f      	b.n	8007f26 <USB_EPStartXfer+0xc42>
 8007e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e6a:	2b3e      	cmp	r3, #62	; 0x3e
 8007e6c:	d818      	bhi.n	8007ea0 <USB_EPStartXfer+0xbbc>
 8007e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e72:	085b      	lsrs	r3, r3, #1
 8007e74:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <USB_EPStartXfer+0xbaa>
 8007e84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e88:	3301      	adds	r3, #1
 8007e8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	029b      	lsls	r3, r3, #10
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e9c:	801a      	strh	r2, [r3, #0]
 8007e9e:	e042      	b.n	8007f26 <USB_EPStartXfer+0xc42>
 8007ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea4:	095b      	lsrs	r3, r3, #5
 8007ea6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eae:	f003 031f 	and.w	r3, r3, #31
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d104      	bne.n	8007ec0 <USB_EPStartXfer+0xbdc>
 8007eb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007ec0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	029b      	lsls	r3, r3, #10
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ed8:	801a      	strh	r2, [r3, #0]
 8007eda:	e024      	b.n	8007f26 <USB_EPStartXfer+0xc42>
 8007edc:	463b      	mov	r3, r7
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	785b      	ldrb	r3, [r3, #1]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d11f      	bne.n	8007f26 <USB_EPStartXfer+0xc42>
 8007ee6:	1d3b      	adds	r3, r7, #4
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007eee:	1d3b      	adds	r3, r7, #4
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	461a      	mov	r2, r3
 8007efa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007efe:	4413      	add	r3, r2
 8007f00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f04:	463b      	mov	r3, r7
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	011a      	lsls	r2, r3, #4
 8007f0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f10:	4413      	add	r3, r2
 8007f12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f26:	463b      	mov	r3, r7
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	891b      	ldrh	r3, [r3, #8]
 8007f2c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f30:	463b      	mov	r3, r7
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6959      	ldr	r1, [r3, #20]
 8007f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f40:	1d38      	adds	r0, r7, #4
 8007f42:	6800      	ldr	r0, [r0, #0]
 8007f44:	f000 fe03 	bl	8008b4e <USB_WritePMA>
          ep->xfer_buff += len;
 8007f48:	463b      	mov	r3, r7
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	695a      	ldr	r2, [r3, #20]
 8007f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f52:	441a      	add	r2, r3
 8007f54:	463b      	mov	r3, r7
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007f5a:	463b      	mov	r3, r7
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6a1a      	ldr	r2, [r3, #32]
 8007f60:	463b      	mov	r3, r7
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d909      	bls.n	8007f7e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8007f6a:	463b      	mov	r3, r7
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6a1a      	ldr	r2, [r3, #32]
 8007f70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f74:	1ad2      	subs	r2, r2, r3
 8007f76:	463b      	mov	r3, r7
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	621a      	str	r2, [r3, #32]
 8007f7c:	e008      	b.n	8007f90 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8007f7e:	463b      	mov	r3, r7
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007f88:	463b      	mov	r3, r7
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 80ab 	beq.w	80080f0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f9a:	1d3b      	adds	r3, r7, #4
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fa2:	463b      	mov	r3, r7
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	785b      	ldrb	r3, [r3, #1]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d16f      	bne.n	800808c <USB_EPStartXfer+0xda8>
 8007fac:	1d3b      	adds	r3, r7, #4
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fb4:	1d3b      	adds	r3, r7, #4
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fca:	463b      	mov	r3, r7
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	011a      	lsls	r2, r3, #4
 8007fd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d116      	bne.n	8008016 <USB_EPStartXfer+0xd32>
 8007fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ffa:	801a      	strh	r2, [r3, #0]
 8007ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29b      	uxth	r3, r3
 8008004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800800c:	b29a      	uxth	r2, r3
 800800e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008012:	801a      	strh	r2, [r3, #0]
 8008014:	e05b      	b.n	80080ce <USB_EPStartXfer+0xdea>
 8008016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800801a:	2b3e      	cmp	r3, #62	; 0x3e
 800801c:	d818      	bhi.n	8008050 <USB_EPStartXfer+0xd6c>
 800801e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008022:	085b      	lsrs	r3, r3, #1
 8008024:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <USB_EPStartXfer+0xd5a>
 8008034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008038:	3301      	adds	r3, #1
 800803a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800803e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008042:	b29b      	uxth	r3, r3
 8008044:	029b      	lsls	r3, r3, #10
 8008046:	b29a      	uxth	r2, r3
 8008048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800804c:	801a      	strh	r2, [r3, #0]
 800804e:	e03e      	b.n	80080ce <USB_EPStartXfer+0xdea>
 8008050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008054:	095b      	lsrs	r3, r3, #5
 8008056:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800805a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800805e:	f003 031f 	and.w	r3, r3, #31
 8008062:	2b00      	cmp	r3, #0
 8008064:	d104      	bne.n	8008070 <USB_EPStartXfer+0xd8c>
 8008066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800806a:	3b01      	subs	r3, #1
 800806c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008074:	b29b      	uxth	r3, r3
 8008076:	029b      	lsls	r3, r3, #10
 8008078:	b29b      	uxth	r3, r3
 800807a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800807e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008082:	b29a      	uxth	r2, r3
 8008084:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008088:	801a      	strh	r2, [r3, #0]
 800808a:	e020      	b.n	80080ce <USB_EPStartXfer+0xdea>
 800808c:	463b      	mov	r3, r7
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	785b      	ldrb	r3, [r3, #1]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d11b      	bne.n	80080ce <USB_EPStartXfer+0xdea>
 8008096:	1d3b      	adds	r3, r7, #4
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800809e:	b29b      	uxth	r3, r3
 80080a0:	461a      	mov	r2, r3
 80080a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080a6:	4413      	add	r3, r2
 80080a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080ac:	463b      	mov	r3, r7
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	011a      	lsls	r2, r3, #4
 80080b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080b8:	4413      	add	r3, r2
 80080ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80080c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80080ce:	463b      	mov	r3, r7
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	895b      	ldrh	r3, [r3, #10]
 80080d4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080d8:	463b      	mov	r3, r7
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6959      	ldr	r1, [r3, #20]
 80080de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80080e8:	1d38      	adds	r0, r7, #4
 80080ea:	6800      	ldr	r0, [r0, #0]
 80080ec:	f000 fd2f 	bl	8008b4e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80080f0:	1d3b      	adds	r3, r7, #4
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	463b      	mov	r3, r7
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	b29b      	uxth	r3, r3
 8008102:	f107 020a 	add.w	r2, r7, #10
 8008106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800810a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800810e:	8013      	strh	r3, [r2, #0]
 8008110:	f107 030a 	add.w	r3, r7, #10
 8008114:	f107 020a 	add.w	r2, r7, #10
 8008118:	8812      	ldrh	r2, [r2, #0]
 800811a:	f082 0210 	eor.w	r2, r2, #16
 800811e:	801a      	strh	r2, [r3, #0]
 8008120:	f107 030a 	add.w	r3, r7, #10
 8008124:	f107 020a 	add.w	r2, r7, #10
 8008128:	8812      	ldrh	r2, [r2, #0]
 800812a:	f082 0220 	eor.w	r2, r2, #32
 800812e:	801a      	strh	r2, [r3, #0]
 8008130:	1d3b      	adds	r3, r7, #4
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	463b      	mov	r3, r7
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	441a      	add	r2, r3
 800813e:	f107 030a 	add.w	r3, r7, #10
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800814c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008154:	b29b      	uxth	r3, r3
 8008156:	8013      	strh	r3, [r2, #0]
 8008158:	e3b5      	b.n	80088c6 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800815a:	463b      	mov	r3, r7
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	7b1b      	ldrb	r3, [r3, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	f040 8090 	bne.w	8008286 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008166:	463b      	mov	r3, r7
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	699a      	ldr	r2, [r3, #24]
 800816c:	463b      	mov	r3, r7
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	429a      	cmp	r2, r3
 8008174:	d90e      	bls.n	8008194 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8008176:	463b      	mov	r3, r7
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008180:	463b      	mov	r3, r7
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	699a      	ldr	r2, [r3, #24]
 8008186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800818a:	1ad2      	subs	r2, r2, r3
 800818c:	463b      	mov	r3, r7
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	619a      	str	r2, [r3, #24]
 8008192:	e008      	b.n	80081a6 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8008194:	463b      	mov	r3, r7
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800819e:	463b      	mov	r3, r7
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2200      	movs	r2, #0
 80081a4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80081a6:	1d3b      	adds	r3, r7, #4
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081ae:	1d3b      	adds	r3, r7, #4
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	461a      	mov	r2, r3
 80081ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80081be:	4413      	add	r3, r2
 80081c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081c4:	463b      	mov	r3, r7
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	011a      	lsls	r2, r3, #4
 80081cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80081d0:	4413      	add	r3, r2
 80081d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d116      	bne.n	8008210 <USB_EPStartXfer+0xf2c>
 80081e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081f4:	801a      	strh	r2, [r3, #0]
 80081f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008206:	b29a      	uxth	r2, r3
 8008208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800820c:	801a      	strh	r2, [r3, #0]
 800820e:	e32c      	b.n	800886a <USB_EPStartXfer+0x1586>
 8008210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008214:	2b3e      	cmp	r3, #62	; 0x3e
 8008216:	d818      	bhi.n	800824a <USB_EPStartXfer+0xf66>
 8008218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800821c:	085b      	lsrs	r3, r3, #1
 800821e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <USB_EPStartXfer+0xf54>
 800822e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008232:	3301      	adds	r3, #1
 8008234:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008238:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800823c:	b29b      	uxth	r3, r3
 800823e:	029b      	lsls	r3, r3, #10
 8008240:	b29a      	uxth	r2, r3
 8008242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008246:	801a      	strh	r2, [r3, #0]
 8008248:	e30f      	b.n	800886a <USB_EPStartXfer+0x1586>
 800824a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800824e:	095b      	lsrs	r3, r3, #5
 8008250:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008254:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008258:	f003 031f 	and.w	r3, r3, #31
 800825c:	2b00      	cmp	r3, #0
 800825e:	d104      	bne.n	800826a <USB_EPStartXfer+0xf86>
 8008260:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008264:	3b01      	subs	r3, #1
 8008266:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800826a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800826e:	b29b      	uxth	r3, r3
 8008270:	029b      	lsls	r3, r3, #10
 8008272:	b29b      	uxth	r3, r3
 8008274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800827c:	b29a      	uxth	r2, r3
 800827e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008282:	801a      	strh	r2, [r3, #0]
 8008284:	e2f1      	b.n	800886a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008286:	463b      	mov	r3, r7
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	78db      	ldrb	r3, [r3, #3]
 800828c:	2b02      	cmp	r3, #2
 800828e:	f040 818f 	bne.w	80085b0 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008292:	463b      	mov	r3, r7
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	785b      	ldrb	r3, [r3, #1]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d175      	bne.n	8008388 <USB_EPStartXfer+0x10a4>
 800829c:	1d3b      	adds	r3, r7, #4
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80082a4:	1d3b      	adds	r3, r7, #4
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	461a      	mov	r2, r3
 80082b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80082b4:	4413      	add	r3, r2
 80082b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80082ba:	463b      	mov	r3, r7
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	011a      	lsls	r2, r3, #4
 80082c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80082c6:	4413      	add	r3, r2
 80082c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082d0:	463b      	mov	r3, r7
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d116      	bne.n	8008308 <USB_EPStartXfer+0x1024>
 80082da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082ec:	801a      	strh	r2, [r3, #0]
 80082ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082fe:	b29a      	uxth	r2, r3
 8008300:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008304:	801a      	strh	r2, [r3, #0]
 8008306:	e065      	b.n	80083d4 <USB_EPStartXfer+0x10f0>
 8008308:	463b      	mov	r3, r7
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	2b3e      	cmp	r3, #62	; 0x3e
 8008310:	d81a      	bhi.n	8008348 <USB_EPStartXfer+0x1064>
 8008312:	463b      	mov	r3, r7
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	085b      	lsrs	r3, r3, #1
 800831a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800831e:	463b      	mov	r3, r7
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	d004      	beq.n	8008336 <USB_EPStartXfer+0x1052>
 800832c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008330:	3301      	adds	r3, #1
 8008332:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800833a:	b29b      	uxth	r3, r3
 800833c:	029b      	lsls	r3, r3, #10
 800833e:	b29a      	uxth	r2, r3
 8008340:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008344:	801a      	strh	r2, [r3, #0]
 8008346:	e045      	b.n	80083d4 <USB_EPStartXfer+0x10f0>
 8008348:	463b      	mov	r3, r7
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	095b      	lsrs	r3, r3, #5
 8008350:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008354:	463b      	mov	r3, r7
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f003 031f 	and.w	r3, r3, #31
 800835e:	2b00      	cmp	r3, #0
 8008360:	d104      	bne.n	800836c <USB_EPStartXfer+0x1088>
 8008362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008366:	3b01      	subs	r3, #1
 8008368:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800836c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008370:	b29b      	uxth	r3, r3
 8008372:	029b      	lsls	r3, r3, #10
 8008374:	b29b      	uxth	r3, r3
 8008376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800837a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800837e:	b29a      	uxth	r2, r3
 8008380:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008384:	801a      	strh	r2, [r3, #0]
 8008386:	e025      	b.n	80083d4 <USB_EPStartXfer+0x10f0>
 8008388:	463b      	mov	r3, r7
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	785b      	ldrb	r3, [r3, #1]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d120      	bne.n	80083d4 <USB_EPStartXfer+0x10f0>
 8008392:	1d3b      	adds	r3, r7, #4
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800839a:	1d3b      	adds	r3, r7, #4
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	461a      	mov	r2, r3
 80083a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083aa:	4413      	add	r3, r2
 80083ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80083b0:	463b      	mov	r3, r7
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	011a      	lsls	r2, r3, #4
 80083b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083bc:	4413      	add	r3, r2
 80083be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083c6:	463b      	mov	r3, r7
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80083d2:	801a      	strh	r2, [r3, #0]
 80083d4:	1d3b      	adds	r3, r7, #4
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083dc:	463b      	mov	r3, r7
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	785b      	ldrb	r3, [r3, #1]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d175      	bne.n	80084d2 <USB_EPStartXfer+0x11ee>
 80083e6:	1d3b      	adds	r3, r7, #4
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80083ee:	1d3b      	adds	r3, r7, #4
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	461a      	mov	r2, r3
 80083fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80083fe:	4413      	add	r3, r2
 8008400:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008404:	463b      	mov	r3, r7
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	011a      	lsls	r2, r3, #4
 800840c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008410:	4413      	add	r3, r2
 8008412:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008416:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800841a:	463b      	mov	r3, r7
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d116      	bne.n	8008452 <USB_EPStartXfer+0x116e>
 8008424:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	b29b      	uxth	r3, r3
 800842c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008430:	b29a      	uxth	r2, r3
 8008432:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008436:	801a      	strh	r2, [r3, #0]
 8008438:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	b29b      	uxth	r3, r3
 8008440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008448:	b29a      	uxth	r2, r3
 800844a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800844e:	801a      	strh	r2, [r3, #0]
 8008450:	e061      	b.n	8008516 <USB_EPStartXfer+0x1232>
 8008452:	463b      	mov	r3, r7
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	2b3e      	cmp	r3, #62	; 0x3e
 800845a:	d81a      	bhi.n	8008492 <USB_EPStartXfer+0x11ae>
 800845c:	463b      	mov	r3, r7
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	085b      	lsrs	r3, r3, #1
 8008464:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008468:	463b      	mov	r3, r7
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b00      	cmp	r3, #0
 8008474:	d004      	beq.n	8008480 <USB_EPStartXfer+0x119c>
 8008476:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800847a:	3301      	adds	r3, #1
 800847c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008480:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008484:	b29b      	uxth	r3, r3
 8008486:	029b      	lsls	r3, r3, #10
 8008488:	b29a      	uxth	r2, r3
 800848a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800848e:	801a      	strh	r2, [r3, #0]
 8008490:	e041      	b.n	8008516 <USB_EPStartXfer+0x1232>
 8008492:	463b      	mov	r3, r7
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	095b      	lsrs	r3, r3, #5
 800849a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800849e:	463b      	mov	r3, r7
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	f003 031f 	and.w	r3, r3, #31
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <USB_EPStartXfer+0x11d2>
 80084ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80084b0:	3b01      	subs	r3, #1
 80084b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80084b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	029b      	lsls	r3, r3, #10
 80084be:	b29b      	uxth	r3, r3
 80084c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084ce:	801a      	strh	r2, [r3, #0]
 80084d0:	e021      	b.n	8008516 <USB_EPStartXfer+0x1232>
 80084d2:	463b      	mov	r3, r7
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	785b      	ldrb	r3, [r3, #1]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d11c      	bne.n	8008516 <USB_EPStartXfer+0x1232>
 80084dc:	1d3b      	adds	r3, r7, #4
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	461a      	mov	r2, r3
 80084e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80084ec:	4413      	add	r3, r2
 80084ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084f2:	463b      	mov	r3, r7
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	011a      	lsls	r2, r3, #4
 80084fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80084fe:	4413      	add	r3, r2
 8008500:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008504:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008508:	463b      	mov	r3, r7
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	b29a      	uxth	r2, r3
 8008510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008514:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008516:	463b      	mov	r3, r7
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 81a4 	beq.w	800886a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008522:	1d3b      	adds	r3, r7, #4
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	463b      	mov	r3, r7
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008536:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800853a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d005      	beq.n	800854e <USB_EPStartXfer+0x126a>
 8008542:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10d      	bne.n	800856a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800854e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008556:	2b00      	cmp	r3, #0
 8008558:	f040 8187 	bne.w	800886a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800855c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008564:	2b00      	cmp	r3, #0
 8008566:	f040 8180 	bne.w	800886a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800856a:	1d3b      	adds	r3, r7, #4
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	463b      	mov	r3, r7
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	b29b      	uxth	r3, r3
 800857c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008584:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008588:	1d3b      	adds	r3, r7, #4
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	463b      	mov	r3, r7
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	441a      	add	r2, r3
 8008596:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800859a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800859e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	8013      	strh	r3, [r2, #0]
 80085ae:	e15c      	b.n	800886a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80085b0:	463b      	mov	r3, r7
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	78db      	ldrb	r3, [r3, #3]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	f040 8155 	bne.w	8008866 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80085bc:	463b      	mov	r3, r7
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699a      	ldr	r2, [r3, #24]
 80085c2:	463b      	mov	r3, r7
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d90e      	bls.n	80085ea <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80085cc:	463b      	mov	r3, r7
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80085d6:	463b      	mov	r3, r7
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	699a      	ldr	r2, [r3, #24]
 80085dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085e0:	1ad2      	subs	r2, r2, r3
 80085e2:	463b      	mov	r3, r7
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	619a      	str	r2, [r3, #24]
 80085e8:	e008      	b.n	80085fc <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80085ea:	463b      	mov	r3, r7
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80085f4:	463b      	mov	r3, r7
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2200      	movs	r2, #0
 80085fa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80085fc:	463b      	mov	r3, r7
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	785b      	ldrb	r3, [r3, #1]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d16f      	bne.n	80086e6 <USB_EPStartXfer+0x1402>
 8008606:	1d3b      	adds	r3, r7, #4
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800860e:	1d3b      	adds	r3, r7, #4
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008616:	b29b      	uxth	r3, r3
 8008618:	461a      	mov	r2, r3
 800861a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800861e:	4413      	add	r3, r2
 8008620:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008624:	463b      	mov	r3, r7
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	011a      	lsls	r2, r3, #4
 800862c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008630:	4413      	add	r3, r2
 8008632:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008636:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800863a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800863e:	2b00      	cmp	r3, #0
 8008640:	d116      	bne.n	8008670 <USB_EPStartXfer+0x138c>
 8008642:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008646:	881b      	ldrh	r3, [r3, #0]
 8008648:	b29b      	uxth	r3, r3
 800864a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800864e:	b29a      	uxth	r2, r3
 8008650:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008654:	801a      	strh	r2, [r3, #0]
 8008656:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	b29b      	uxth	r3, r3
 800865e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008666:	b29a      	uxth	r2, r3
 8008668:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800866c:	801a      	strh	r2, [r3, #0]
 800866e:	e05f      	b.n	8008730 <USB_EPStartXfer+0x144c>
 8008670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008674:	2b3e      	cmp	r3, #62	; 0x3e
 8008676:	d818      	bhi.n	80086aa <USB_EPStartXfer+0x13c6>
 8008678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800867c:	085b      	lsrs	r3, r3, #1
 800867e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	d004      	beq.n	8008698 <USB_EPStartXfer+0x13b4>
 800868e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008692:	3301      	adds	r3, #1
 8008694:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800869c:	b29b      	uxth	r3, r3
 800869e:	029b      	lsls	r3, r3, #10
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086a6:	801a      	strh	r2, [r3, #0]
 80086a8:	e042      	b.n	8008730 <USB_EPStartXfer+0x144c>
 80086aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ae:	095b      	lsrs	r3, r3, #5
 80086b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b8:	f003 031f 	and.w	r3, r3, #31
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d104      	bne.n	80086ca <USB_EPStartXfer+0x13e6>
 80086c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086c4:	3b01      	subs	r3, #1
 80086c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	029b      	lsls	r3, r3, #10
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086dc:	b29a      	uxth	r2, r3
 80086de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086e2:	801a      	strh	r2, [r3, #0]
 80086e4:	e024      	b.n	8008730 <USB_EPStartXfer+0x144c>
 80086e6:	463b      	mov	r3, r7
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	785b      	ldrb	r3, [r3, #1]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d11f      	bne.n	8008730 <USB_EPStartXfer+0x144c>
 80086f0:	1d3b      	adds	r3, r7, #4
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80086f8:	1d3b      	adds	r3, r7, #4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008700:	b29b      	uxth	r3, r3
 8008702:	461a      	mov	r2, r3
 8008704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008708:	4413      	add	r3, r2
 800870a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800870e:	463b      	mov	r3, r7
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	011a      	lsls	r2, r3, #4
 8008716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800871a:	4413      	add	r3, r2
 800871c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008720:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008728:	b29a      	uxth	r2, r3
 800872a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800872e:	801a      	strh	r2, [r3, #0]
 8008730:	1d3b      	adds	r3, r7, #4
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008738:	463b      	mov	r3, r7
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	785b      	ldrb	r3, [r3, #1]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d16f      	bne.n	8008822 <USB_EPStartXfer+0x153e>
 8008742:	1d3b      	adds	r3, r7, #4
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800874a:	1d3b      	adds	r3, r7, #4
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008752:	b29b      	uxth	r3, r3
 8008754:	461a      	mov	r2, r3
 8008756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800875a:	4413      	add	r3, r2
 800875c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008760:	463b      	mov	r3, r7
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	011a      	lsls	r2, r3, #4
 8008768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800876c:	4413      	add	r3, r2
 800876e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800877a:	2b00      	cmp	r3, #0
 800877c:	d116      	bne.n	80087ac <USB_EPStartXfer+0x14c8>
 800877e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008782:	881b      	ldrh	r3, [r3, #0]
 8008784:	b29b      	uxth	r3, r3
 8008786:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800878a:	b29a      	uxth	r2, r3
 800878c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008790:	801a      	strh	r2, [r3, #0]
 8008792:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	b29b      	uxth	r3, r3
 800879a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800879e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087a8:	801a      	strh	r2, [r3, #0]
 80087aa:	e05e      	b.n	800886a <USB_EPStartXfer+0x1586>
 80087ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b0:	2b3e      	cmp	r3, #62	; 0x3e
 80087b2:	d818      	bhi.n	80087e6 <USB_EPStartXfer+0x1502>
 80087b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b8:	085b      	lsrs	r3, r3, #1
 80087ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d004      	beq.n	80087d4 <USB_EPStartXfer+0x14f0>
 80087ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087ce:	3301      	adds	r3, #1
 80087d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087d8:	b29b      	uxth	r3, r3
 80087da:	029b      	lsls	r3, r3, #10
 80087dc:	b29a      	uxth	r2, r3
 80087de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087e2:	801a      	strh	r2, [r3, #0]
 80087e4:	e041      	b.n	800886a <USB_EPStartXfer+0x1586>
 80087e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ea:	095b      	lsrs	r3, r3, #5
 80087ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087f4:	f003 031f 	and.w	r3, r3, #31
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d104      	bne.n	8008806 <USB_EPStartXfer+0x1522>
 80087fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008800:	3b01      	subs	r3, #1
 8008802:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008806:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800880a:	b29b      	uxth	r3, r3
 800880c:	029b      	lsls	r3, r3, #10
 800880e:	b29b      	uxth	r3, r3
 8008810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008818:	b29a      	uxth	r2, r3
 800881a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800881e:	801a      	strh	r2, [r3, #0]
 8008820:	e023      	b.n	800886a <USB_EPStartXfer+0x1586>
 8008822:	463b      	mov	r3, r7
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	785b      	ldrb	r3, [r3, #1]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d11e      	bne.n	800886a <USB_EPStartXfer+0x1586>
 800882c:	1d3b      	adds	r3, r7, #4
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008834:	b29b      	uxth	r3, r3
 8008836:	461a      	mov	r2, r3
 8008838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800883c:	4413      	add	r3, r2
 800883e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008842:	463b      	mov	r3, r7
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	011a      	lsls	r2, r3, #4
 800884a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800884e:	4413      	add	r3, r2
 8008850:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800885c:	b29a      	uxth	r2, r3
 800885e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008862:	801a      	strh	r2, [r3, #0]
 8008864:	e001      	b.n	800886a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e02e      	b.n	80088c8 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800886a:	1d3b      	adds	r3, r7, #4
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	463b      	mov	r3, r7
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	b29b      	uxth	r3, r3
 800887c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008884:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008888:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800888c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008890:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008894:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008898:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800889c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80088a0:	1d3b      	adds	r3, r7, #4
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	463b      	mov	r3, r7
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	441a      	add	r2, r3
 80088ae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80088b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	785b      	ldrb	r3, [r3, #1]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d020      	beq.n	8008926 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088fa:	81bb      	strh	r3, [r7, #12]
 80088fc:	89bb      	ldrh	r3, [r7, #12]
 80088fe:	f083 0310 	eor.w	r3, r3, #16
 8008902:	81bb      	strh	r3, [r7, #12]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	441a      	add	r2, r3
 800890e:	89bb      	ldrh	r3, [r7, #12]
 8008910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800891c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008920:	b29b      	uxth	r3, r3
 8008922:	8013      	strh	r3, [r2, #0]
 8008924:	e01f      	b.n	8008966 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	b29b      	uxth	r3, r3
 8008934:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893c:	81fb      	strh	r3, [r7, #14]
 800893e:	89fb      	ldrh	r3, [r7, #14]
 8008940:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008944:	81fb      	strh	r3, [r7, #14]
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	441a      	add	r2, r3
 8008950:	89fb      	ldrh	r3, [r7, #14]
 8008952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800895a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800895e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008962:	b29b      	uxth	r3, r3
 8008964:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	bc80      	pop	{r7}
 8008970:	4770      	bx	lr

08008972 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008972:	b480      	push	{r7}
 8008974:	b087      	sub	sp, #28
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	7b1b      	ldrb	r3, [r3, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	f040 809d 	bne.w	8008ac0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	785b      	ldrb	r3, [r3, #1]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d04c      	beq.n	8008a28 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	823b      	strh	r3, [r7, #16]
 800899c:	8a3b      	ldrh	r3, [r7, #16]
 800899e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d01b      	beq.n	80089de <USB_EPClearStall+0x6c>
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	881b      	ldrh	r3, [r3, #0]
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089bc:	81fb      	strh	r3, [r7, #14]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	441a      	add	r2, r3
 80089c8:	89fb      	ldrh	r3, [r7, #14]
 80089ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089da:	b29b      	uxth	r3, r3
 80089dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	78db      	ldrb	r3, [r3, #3]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d06c      	beq.n	8008ac0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089fc:	81bb      	strh	r3, [r7, #12]
 80089fe:	89bb      	ldrh	r3, [r7, #12]
 8008a00:	f083 0320 	eor.w	r3, r3, #32
 8008a04:	81bb      	strh	r3, [r7, #12]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	441a      	add	r2, r3
 8008a10:	89bb      	ldrh	r3, [r7, #12]
 8008a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	8013      	strh	r3, [r2, #0]
 8008a26:	e04b      	b.n	8008ac0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	82fb      	strh	r3, [r7, #22]
 8008a36:	8afb      	ldrh	r3, [r7, #22]
 8008a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d01b      	beq.n	8008a78 <USB_EPClearStall+0x106>
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a56:	82bb      	strh	r3, [r7, #20]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	441a      	add	r2, r3
 8008a62:	8abb      	ldrh	r3, [r7, #20]
 8008a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	881b      	ldrh	r3, [r3, #0]
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a8e:	827b      	strh	r3, [r7, #18]
 8008a90:	8a7b      	ldrh	r3, [r7, #18]
 8008a92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a96:	827b      	strh	r3, [r7, #18]
 8008a98:	8a7b      	ldrh	r3, [r7, #18]
 8008a9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008a9e:	827b      	strh	r3, [r7, #18]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	441a      	add	r2, r3
 8008aaa:	8a7b      	ldrh	r3, [r7, #18]
 8008aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bc80      	pop	{r7}
 8008aca:	4770      	bx	lr

08008acc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d103      	bne.n	8008ae6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2280      	movs	r2, #128	; 0x80
 8008ae2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bc80      	pop	{r7}
 8008af0:	4770      	bx	lr

08008af2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bc80      	pop	{r7}
 8008b04:	4770      	bx	lr

08008b06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b083      	sub	sp, #12
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bc80      	pop	{r7}
 8008b18:	4770      	bx	lr

08008b1a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bc80      	pop	{r7}
 8008b36:	4770      	bx	lr

08008b38 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc80      	pop	{r7}
 8008b4c:	4770      	bx	lr

08008b4e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b08d      	sub	sp, #52	; 0x34
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	4611      	mov	r1, r2
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	80fb      	strh	r3, [r7, #6]
 8008b60:	4613      	mov	r3, r2
 8008b62:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008b64:	88bb      	ldrh	r3, [r7, #4]
 8008b66:	3301      	adds	r3, #1
 8008b68:	085b      	lsrs	r3, r3, #1
 8008b6a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b74:	88fb      	ldrh	r3, [r7, #6]
 8008b76:	005a      	lsls	r2, r3, #1
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b80:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b86:	e01e      	b.n	8008bc6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b90:	3301      	adds	r3, #1
 8008b92:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	021b      	lsls	r3, r3, #8
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	3302      	adds	r3, #2
 8008bb2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	3302      	adds	r3, #2
 8008bb8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1dd      	bne.n	8008b88 <USB_WritePMA+0x3a>
  }
}
 8008bcc:	bf00      	nop
 8008bce:	bf00      	nop
 8008bd0:	3734      	adds	r7, #52	; 0x34
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bc80      	pop	{r7}
 8008bd6:	4770      	bx	lr

08008bd8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b08b      	sub	sp, #44	; 0x2c
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	4611      	mov	r1, r2
 8008be4:	461a      	mov	r2, r3
 8008be6:	460b      	mov	r3, r1
 8008be8:	80fb      	strh	r3, [r7, #6]
 8008bea:	4613      	mov	r3, r2
 8008bec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008bee:	88bb      	ldrh	r3, [r7, #4]
 8008bf0:	085b      	lsrs	r3, r3, #1
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bfe:	88fb      	ldrh	r3, [r7, #6]
 8008c00:	005a      	lsls	r2, r3, #1
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c0a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c10:	e01b      	b.n	8008c4a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	3302      	adds	r3, #2
 8008c1e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	0a1b      	lsrs	r3, r3, #8
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	3302      	adds	r3, #2
 8008c42:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	3b01      	subs	r3, #1
 8008c48:	627b      	str	r3, [r7, #36]	; 0x24
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1e0      	bne.n	8008c12 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008c50:	88bb      	ldrh	r3, [r7, #4]
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d007      	beq.n	8008c6c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	701a      	strb	r2, [r3, #0]
  }
}
 8008c6c:	bf00      	nop
 8008c6e:	372c      	adds	r7, #44	; 0x2c
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bc80      	pop	{r7}
 8008c74:	4770      	bx	lr

08008c76 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	7c1b      	ldrb	r3, [r3, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d115      	bne.n	8008cba <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c92:	2202      	movs	r2, #2
 8008c94:	2181      	movs	r1, #129	; 0x81
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f004 fdd7 	bl	800d84a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	2101      	movs	r1, #1
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f004 fdcd 	bl	800d84a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008cb8:	e012      	b.n	8008ce0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cba:	2340      	movs	r3, #64	; 0x40
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	2181      	movs	r1, #129	; 0x81
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f004 fdc2 	bl	800d84a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ccc:	2340      	movs	r3, #64	; 0x40
 8008cce:	2202      	movs	r2, #2
 8008cd0:	2101      	movs	r1, #1
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f004 fdb9 	bl	800d84a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ce0:	2308      	movs	r3, #8
 8008ce2:	2203      	movs	r2, #3
 8008ce4:	2182      	movs	r1, #130	; 0x82
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f004 fdaf 	bl	800d84a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008cf2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008cf6:	f004 fecf 	bl	800da98 <USBD_static_malloc>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d102      	bne.n	8008d12 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	73fb      	strb	r3, [r7, #15]
 8008d10:	e026      	b.n	8008d60 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d18:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	7c1b      	ldrb	r3, [r3, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d109      	bne.n	8008d50 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d46:	2101      	movs	r1, #1
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f004 fe6f 	bl	800da2c <USBD_LL_PrepareReceive>
 8008d4e:	e007      	b.n	8008d60 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d56:	2340      	movs	r3, #64	; 0x40
 8008d58:	2101      	movs	r1, #1
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f004 fe66 	bl	800da2c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	460b      	mov	r3, r1
 8008d74:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008d76:	2300      	movs	r3, #0
 8008d78:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008d7a:	2181      	movs	r1, #129	; 0x81
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f004 fd8a 	bl	800d896 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008d88:	2101      	movs	r1, #1
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f004 fd83 	bl	800d896 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008d98:	2182      	movs	r1, #130	; 0x82
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f004 fd7b 	bl	800d896 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00e      	beq.n	8008dce <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f004 fe75 	bl	800dab0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008de8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008dee:	2300      	movs	r3, #0
 8008df0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d039      	beq.n	8008e76 <USBD_CDC_Setup+0x9e>
 8008e02:	2b20      	cmp	r3, #32
 8008e04:	d17f      	bne.n	8008f06 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	88db      	ldrh	r3, [r3, #6]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d029      	beq.n	8008e62 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	b25b      	sxtb	r3, r3
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	da11      	bge.n	8008e3c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008e24:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	88d2      	ldrh	r2, [r2, #6]
 8008e2a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e2c:	6939      	ldr	r1, [r7, #16]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	88db      	ldrh	r3, [r3, #6]
 8008e32:	461a      	mov	r2, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 fa0a 	bl	800a24e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008e3a:	e06b      	b.n	8008f14 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	785a      	ldrb	r2, [r3, #1]
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	88db      	ldrh	r3, [r3, #6]
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e52:	6939      	ldr	r1, [r7, #16]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	88db      	ldrh	r3, [r3, #6]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 fa25 	bl	800a2aa <USBD_CtlPrepareRx>
      break;
 8008e60:	e058      	b.n	8008f14 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	7850      	ldrb	r0, [r2, #1]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	4798      	blx	r3
      break;
 8008e74:	e04e      	b.n	8008f14 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	785b      	ldrb	r3, [r3, #1]
 8008e7a:	2b0b      	cmp	r3, #11
 8008e7c:	d02e      	beq.n	8008edc <USBD_CDC_Setup+0x104>
 8008e7e:	2b0b      	cmp	r3, #11
 8008e80:	dc38      	bgt.n	8008ef4 <USBD_CDC_Setup+0x11c>
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <USBD_CDC_Setup+0xb4>
 8008e86:	2b0a      	cmp	r3, #10
 8008e88:	d014      	beq.n	8008eb4 <USBD_CDC_Setup+0xdc>
 8008e8a:	e033      	b.n	8008ef4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e92:	2b03      	cmp	r3, #3
 8008e94:	d107      	bne.n	8008ea6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008e96:	f107 030c 	add.w	r3, r7, #12
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f001 f9d5 	bl	800a24e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ea4:	e02e      	b.n	8008f04 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f001 f966 	bl	800a17a <USBD_CtlError>
            ret = USBD_FAIL;
 8008eae:	2302      	movs	r3, #2
 8008eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8008eb2:	e027      	b.n	8008f04 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d107      	bne.n	8008ece <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ebe:	f107 030f 	add.w	r3, r7, #15
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 f9c1 	bl	800a24e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ecc:	e01a      	b.n	8008f04 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f001 f952 	bl	800a17a <USBD_CtlError>
            ret = USBD_FAIL;
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8008eda:	e013      	b.n	8008f04 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d00d      	beq.n	8008f02 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f001 f946 	bl	800a17a <USBD_CtlError>
            ret = USBD_FAIL;
 8008eee:	2302      	movs	r3, #2
 8008ef0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ef2:	e006      	b.n	8008f02 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f001 f93f 	bl	800a17a <USBD_CtlError>
          ret = USBD_FAIL;
 8008efc:	2302      	movs	r3, #2
 8008efe:	75fb      	strb	r3, [r7, #23]
          break;
 8008f00:	e000      	b.n	8008f04 <USBD_CDC_Setup+0x12c>
          break;
 8008f02:	bf00      	nop
      }
      break;
 8008f04:	e006      	b.n	8008f14 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f001 f936 	bl	800a17a <USBD_CtlError>
      ret = USBD_FAIL;
 8008f0e:	2302      	movs	r3, #2
 8008f10:	75fb      	strb	r3, [r7, #23]
      break;
 8008f12:	bf00      	nop
  }

  return ret;
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3718      	adds	r7, #24
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	460b      	mov	r3, r1
 8008f28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f30:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f38:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d03a      	beq.n	8008fba <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f44:	78fa      	ldrb	r2, [r7, #3]
 8008f46:	6879      	ldr	r1, [r7, #4]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	440b      	add	r3, r1
 8008f52:	331c      	adds	r3, #28
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d029      	beq.n	8008fae <USBD_CDC_DataIn+0x90>
 8008f5a:	78fa      	ldrb	r2, [r7, #3]
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	440b      	add	r3, r1
 8008f68:	331c      	adds	r3, #28
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	78f9      	ldrb	r1, [r7, #3]
 8008f6e:	68b8      	ldr	r0, [r7, #8]
 8008f70:	460b      	mov	r3, r1
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	440b      	add	r3, r1
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	4403      	add	r3, r0
 8008f7a:	3338      	adds	r3, #56	; 0x38
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f82:	fb03 f301 	mul.w	r3, r3, r1
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d110      	bne.n	8008fae <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008f8c:	78fa      	ldrb	r2, [r7, #3]
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	4613      	mov	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	440b      	add	r3, r1
 8008f9a:	331c      	adds	r3, #28
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008fa0:	78f9      	ldrb	r1, [r7, #3]
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f004 fd1d 	bl	800d9e6 <USBD_LL_Transmit>
 8008fac:	e003      	b.n	8008fb6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e000      	b.n	8008fbc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008fba:	2302      	movs	r3, #2
  }
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008fd8:	78fb      	ldrb	r3, [r7, #3]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f004 fd48 	bl	800da72 <USBD_LL_GetRxDataSize>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00d      	beq.n	8009010 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009008:	4611      	mov	r1, r2
 800900a:	4798      	blx	r3

    return USBD_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	e000      	b.n	8009012 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009010:	2302      	movs	r3, #2
  }
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b084      	sub	sp, #16
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009028:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009030:	2b00      	cmp	r3, #0
 8009032:	d015      	beq.n	8009060 <USBD_CDC_EP0_RxReady+0x46>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800903a:	2bff      	cmp	r3, #255	; 0xff
 800903c:	d010      	beq.n	8009060 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800904c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009054:	b292      	uxth	r2, r2
 8009056:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	22ff      	movs	r2, #255	; 0xff
 800905c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2243      	movs	r2, #67	; 0x43
 8009078:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800907a:	4b03      	ldr	r3, [pc, #12]	; (8009088 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800907c:	4618      	mov	r0, r3
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	bc80      	pop	{r7}
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	200000a4 	.word	0x200000a4

0800908c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2243      	movs	r2, #67	; 0x43
 8009098:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800909a:	4b03      	ldr	r3, [pc, #12]	; (80090a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bc80      	pop	{r7}
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	20000060 	.word	0x20000060

080090ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2243      	movs	r2, #67	; 0x43
 80090b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80090ba:	4b03      	ldr	r3, [pc, #12]	; (80090c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	200000e8 	.word	0x200000e8

080090cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	220a      	movs	r2, #10
 80090d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80090da:	4b03      	ldr	r3, [pc, #12]	; (80090e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80090dc:	4618      	mov	r0, r3
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bc80      	pop	{r7}
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	2000001c 	.word	0x2000001c

080090ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80090f6:	2302      	movs	r3, #2
 80090f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d005      	beq.n	800910c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	683a      	ldr	r2, [r7, #0]
 8009104:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800910c:	7bfb      	ldrb	r3, [r7, #15]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	4613      	mov	r3, r2
 8009124:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009136:	88fa      	ldrh	r2, [r7, #6]
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	371c      	adds	r7, #28
 8009144:	46bd      	mov	sp, r7
 8009146:	bc80      	pop	{r7}
 8009148:	4770      	bx	lr

0800914a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800914a:	b480      	push	{r7}
 800914c:	b085      	sub	sp, #20
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	bc80      	pop	{r7}
 800916e:	4770      	bx	lr

08009170 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800917e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009186:	2b00      	cmp	r3, #0
 8009188:	d01c      	beq.n	80091c4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009190:	2b00      	cmp	r3, #0
 8009192:	d115      	bne.n	80091c0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2201      	movs	r2, #1
 8009198:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	2181      	movs	r1, #129	; 0x81
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f004 fc15 	bl	800d9e6 <USBD_LL_Transmit>

      return USBD_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	e002      	b.n	80091c6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e000      	b.n	80091c6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80091c4:	2302      	movs	r3, #2
  }
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b084      	sub	sp, #16
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d017      	beq.n	8009218 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	7c1b      	ldrb	r3, [r3, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d109      	bne.n	8009204 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091fa:	2101      	movs	r1, #1
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f004 fc15 	bl	800da2c <USBD_LL_PrepareReceive>
 8009202:	e007      	b.n	8009214 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800920a:	2340      	movs	r3, #64	; 0x40
 800920c:	2101      	movs	r1, #1
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f004 fc0c 	bl	800da2c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	e000      	b.n	800921a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009218:	2302      	movs	r3, #2
  }
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	4613      	mov	r3, r2
 800922e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d101      	bne.n	800923a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009236:	2302      	movs	r3, #2
 8009238:	e01a      	b.n	8009270 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d003      	beq.n	800925a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	79fa      	ldrb	r2, [r7, #7]
 8009266:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f004 fa79 	bl	800d760 <USBD_LL_Init>

  return USBD_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d006      	beq.n	800929a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]
 8009298:	e001      	b.n	800929e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800929a:	2302      	movs	r3, #2
 800929c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800929e:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3714      	adds	r7, #20
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bc80      	pop	{r7}
 80092a8:	4770      	bx	lr

080092aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b082      	sub	sp, #8
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f004 faae 	bl	800d814 <USBD_LL_Start>

  return USBD_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b083      	sub	sp, #12
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bc80      	pop	{r7}
 80092d4:	4770      	bx	lr

080092d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	460b      	mov	r3, r1
 80092e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80092e2:	2302      	movs	r3, #2
 80092e4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00c      	beq.n	800930a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	78fa      	ldrb	r2, [r7, #3]
 80092fa:	4611      	mov	r1, r2
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	4798      	blx	r3
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800930a:	7bfb      	ldrb	r3, [r7, #15]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	78fa      	ldrb	r2, [r7, #3]
 800932a:	4611      	mov	r1, r2
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	4798      	blx	r3

  return USBD_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	4618      	mov	r0, r3
 800934e:	f000 fed8 	bl	800a102 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009360:	461a      	mov	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800936e:	f003 031f 	and.w	r3, r3, #31
 8009372:	2b02      	cmp	r3, #2
 8009374:	d016      	beq.n	80093a4 <USBD_LL_SetupStage+0x6a>
 8009376:	2b02      	cmp	r3, #2
 8009378:	d81c      	bhi.n	80093b4 <USBD_LL_SetupStage+0x7a>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <USBD_LL_SetupStage+0x4a>
 800937e:	2b01      	cmp	r3, #1
 8009380:	d008      	beq.n	8009394 <USBD_LL_SetupStage+0x5a>
 8009382:	e017      	b.n	80093b4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800938a:	4619      	mov	r1, r3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f9cb 	bl	8009728 <USBD_StdDevReq>
      break;
 8009392:	e01a      	b.n	80093ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fa2d 	bl	80097fc <USBD_StdItfReq>
      break;
 80093a2:	e012      	b.n	80093ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fa6d 	bl	800988c <USBD_StdEPReq>
      break;
 80093b2:	e00a      	b.n	80093ca <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80093ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	4619      	mov	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f004 fa86 	bl	800d8d4 <USBD_LL_StallEP>
      break;
 80093c8:	bf00      	nop
  }

  return USBD_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	460b      	mov	r3, r1
 80093de:	607a      	str	r2, [r7, #4]
 80093e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093e2:	7afb      	ldrb	r3, [r7, #11]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d14b      	bne.n	8009480 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80093ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093f6:	2b03      	cmp	r3, #3
 80093f8:	d134      	bne.n	8009464 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	68da      	ldr	r2, [r3, #12]
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	429a      	cmp	r2, r3
 8009404:	d919      	bls.n	800943a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	68da      	ldr	r2, [r3, #12]
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	1ad2      	subs	r2, r2, r3
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800941c:	429a      	cmp	r2, r3
 800941e:	d203      	bcs.n	8009428 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009424:	b29b      	uxth	r3, r3
 8009426:	e002      	b.n	800942e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800942c:	b29b      	uxth	r3, r3
 800942e:	461a      	mov	r2, r3
 8009430:	6879      	ldr	r1, [r7, #4]
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 ff57 	bl	800a2e6 <USBD_CtlContinueRx>
 8009438:	e038      	b.n	80094ac <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00a      	beq.n	800945c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800944c:	2b03      	cmp	r3, #3
 800944e:	d105      	bne.n	800945c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f000 ff54 	bl	800a30a <USBD_CtlSendStatus>
 8009462:	e023      	b.n	80094ac <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800946a:	2b05      	cmp	r3, #5
 800946c:	d11e      	bne.n	80094ac <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009476:	2100      	movs	r1, #0
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f004 fa2b 	bl	800d8d4 <USBD_LL_StallEP>
 800947e:	e015      	b.n	80094ac <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00d      	beq.n	80094a8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009492:	2b03      	cmp	r3, #3
 8009494:	d108      	bne.n	80094a8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	7afa      	ldrb	r2, [r7, #11]
 80094a0:	4611      	mov	r1, r2
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	4798      	blx	r3
 80094a6:	e001      	b.n	80094ac <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80094a8:	2302      	movs	r3, #2
 80094aa:	e000      	b.n	80094ae <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b086      	sub	sp, #24
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	60f8      	str	r0, [r7, #12]
 80094be:	460b      	mov	r3, r1
 80094c0:	607a      	str	r2, [r7, #4]
 80094c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80094c4:	7afb      	ldrb	r3, [r7, #11]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d17f      	bne.n	80095ca <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3314      	adds	r3, #20
 80094ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d15c      	bne.n	8009594 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	68da      	ldr	r2, [r3, #12]
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d915      	bls.n	8009512 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	1ad2      	subs	r2, r2, r3
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	461a      	mov	r2, r3
 80094fc:	6879      	ldr	r1, [r7, #4]
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 fec1 	bl	800a286 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009504:	2300      	movs	r3, #0
 8009506:	2200      	movs	r2, #0
 8009508:	2100      	movs	r1, #0
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f004 fa8e 	bl	800da2c <USBD_LL_PrepareReceive>
 8009510:	e04e      	b.n	80095b0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	6912      	ldr	r2, [r2, #16]
 800951a:	fbb3 f1f2 	udiv	r1, r3, r2
 800951e:	fb02 f201 	mul.w	r2, r2, r1
 8009522:	1a9b      	subs	r3, r3, r2
 8009524:	2b00      	cmp	r3, #0
 8009526:	d11c      	bne.n	8009562 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009530:	429a      	cmp	r2, r3
 8009532:	d316      	bcc.n	8009562 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	689a      	ldr	r2, [r3, #8]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800953e:	429a      	cmp	r2, r3
 8009540:	d20f      	bcs.n	8009562 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009542:	2200      	movs	r2, #0
 8009544:	2100      	movs	r1, #0
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f000 fe9d 	bl	800a286 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009554:	2300      	movs	r3, #0
 8009556:	2200      	movs	r2, #0
 8009558:	2100      	movs	r1, #0
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f004 fa66 	bl	800da2c <USBD_LL_PrepareReceive>
 8009560:	e026      	b.n	80095b0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009574:	2b03      	cmp	r3, #3
 8009576:	d105      	bne.n	8009584 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009584:	2180      	movs	r1, #128	; 0x80
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f004 f9a4 	bl	800d8d4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 fecf 	bl	800a330 <USBD_CtlReceiveStatus>
 8009592:	e00d      	b.n	80095b0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800959a:	2b04      	cmp	r3, #4
 800959c:	d004      	beq.n	80095a8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d103      	bne.n	80095b0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80095a8:	2180      	movs	r1, #128	; 0x80
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f004 f992 	bl	800d8d4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d11d      	bne.n	80095f6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7ff fe81 	bl	80092c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80095c8:	e015      	b.n	80095f6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00d      	beq.n	80095f2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d108      	bne.n	80095f2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	7afa      	ldrb	r2, [r7, #11]
 80095ea:	4611      	mov	r1, r2
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	4798      	blx	r3
 80095f0:	e001      	b.n	80095f6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80095f2:	2302      	movs	r3, #2
 80095f4:	e000      	b.n	80095f8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3718      	adds	r7, #24
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009608:	2340      	movs	r3, #64	; 0x40
 800960a:	2200      	movs	r2, #0
 800960c:	2100      	movs	r1, #0
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f004 f91b 	bl	800d84a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2240      	movs	r2, #64	; 0x40
 8009620:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009624:	2340      	movs	r3, #64	; 0x40
 8009626:	2200      	movs	r2, #0
 8009628:	2180      	movs	r1, #128	; 0x80
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f004 f90d 	bl	800d84a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2240      	movs	r2, #64	; 0x40
 800963a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009660:	2b00      	cmp	r3, #0
 8009662:	d009      	beq.n	8009678 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	6852      	ldr	r2, [r2, #4]
 8009670:	b2d2      	uxtb	r2, r2
 8009672:	4611      	mov	r1, r2
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	4798      	blx	r3
  }

  return USBD_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	460b      	mov	r3, r1
 800968c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	78fa      	ldrb	r2, [r7, #3]
 8009692:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	bc80      	pop	{r7}
 800969e:	4770      	bx	lr

080096a0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2204      	movs	r2, #4
 80096b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bc80      	pop	{r7}
 80096c6:	4770      	bx	lr

080096c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d6:	2b04      	cmp	r3, #4
 80096d8:	d105      	bne.n	80096e6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bc80      	pop	{r7}
 80096f0:	4770      	bx	lr

080096f2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b082      	sub	sp, #8
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009700:	2b03      	cmp	r3, #3
 8009702:	d10b      	bne.n	800971c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d005      	beq.n	800971c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
	...

08009728 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800973e:	2b40      	cmp	r3, #64	; 0x40
 8009740:	d005      	beq.n	800974e <USBD_StdDevReq+0x26>
 8009742:	2b40      	cmp	r3, #64	; 0x40
 8009744:	d84f      	bhi.n	80097e6 <USBD_StdDevReq+0xbe>
 8009746:	2b00      	cmp	r3, #0
 8009748:	d009      	beq.n	800975e <USBD_StdDevReq+0x36>
 800974a:	2b20      	cmp	r3, #32
 800974c:	d14b      	bne.n	80097e6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	4798      	blx	r3
      break;
 800975c:	e048      	b.n	80097f0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	785b      	ldrb	r3, [r3, #1]
 8009762:	2b09      	cmp	r3, #9
 8009764:	d839      	bhi.n	80097da <USBD_StdDevReq+0xb2>
 8009766:	a201      	add	r2, pc, #4	; (adr r2, 800976c <USBD_StdDevReq+0x44>)
 8009768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976c:	080097bd 	.word	0x080097bd
 8009770:	080097d1 	.word	0x080097d1
 8009774:	080097db 	.word	0x080097db
 8009778:	080097c7 	.word	0x080097c7
 800977c:	080097db 	.word	0x080097db
 8009780:	0800979f 	.word	0x0800979f
 8009784:	08009795 	.word	0x08009795
 8009788:	080097db 	.word	0x080097db
 800978c:	080097b3 	.word	0x080097b3
 8009790:	080097a9 	.word	0x080097a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f9dc 	bl	8009b54 <USBD_GetDescriptor>
          break;
 800979c:	e022      	b.n	80097e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fb3f 	bl	8009e24 <USBD_SetAddress>
          break;
 80097a6:	e01d      	b.n	80097e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fb7e 	bl	8009eac <USBD_SetConfig>
          break;
 80097b0:	e018      	b.n	80097e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fc07 	bl	8009fc8 <USBD_GetConfig>
          break;
 80097ba:	e013      	b.n	80097e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fc37 	bl	800a032 <USBD_GetStatus>
          break;
 80097c4:	e00e      	b.n	80097e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fc65 	bl	800a098 <USBD_SetFeature>
          break;
 80097ce:	e009      	b.n	80097e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fc74 	bl	800a0c0 <USBD_ClrFeature>
          break;
 80097d8:	e004      	b.n	80097e4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fccc 	bl	800a17a <USBD_CtlError>
          break;
 80097e2:	bf00      	nop
      }
      break;
 80097e4:	e004      	b.n	80097f0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fcc6 	bl	800a17a <USBD_CtlError>
      break;
 80097ee:	bf00      	nop
  }

  return ret;
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop

080097fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009812:	2b40      	cmp	r3, #64	; 0x40
 8009814:	d005      	beq.n	8009822 <USBD_StdItfReq+0x26>
 8009816:	2b40      	cmp	r3, #64	; 0x40
 8009818:	d82e      	bhi.n	8009878 <USBD_StdItfReq+0x7c>
 800981a:	2b00      	cmp	r3, #0
 800981c:	d001      	beq.n	8009822 <USBD_StdItfReq+0x26>
 800981e:	2b20      	cmp	r3, #32
 8009820:	d12a      	bne.n	8009878 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009828:	3b01      	subs	r3, #1
 800982a:	2b02      	cmp	r3, #2
 800982c:	d81d      	bhi.n	800986a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	889b      	ldrh	r3, [r3, #4]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	2b01      	cmp	r3, #1
 8009836:	d813      	bhi.n	8009860 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	4798      	blx	r3
 8009846:	4603      	mov	r3, r0
 8009848:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	88db      	ldrh	r3, [r3, #6]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d110      	bne.n	8009874 <USBD_StdItfReq+0x78>
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10d      	bne.n	8009874 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fd56 	bl	800a30a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800985e:	e009      	b.n	8009874 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fc89 	bl	800a17a <USBD_CtlError>
          break;
 8009868:	e004      	b.n	8009874 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fc84 	bl	800a17a <USBD_CtlError>
          break;
 8009872:	e000      	b.n	8009876 <USBD_StdItfReq+0x7a>
          break;
 8009874:	bf00      	nop
      }
      break;
 8009876:	e004      	b.n	8009882 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fc7d 	bl	800a17a <USBD_CtlError>
      break;
 8009880:	bf00      	nop
  }

  return USBD_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	889b      	ldrh	r3, [r3, #4]
 800989e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098a8:	2b40      	cmp	r3, #64	; 0x40
 80098aa:	d007      	beq.n	80098bc <USBD_StdEPReq+0x30>
 80098ac:	2b40      	cmp	r3, #64	; 0x40
 80098ae:	f200 8146 	bhi.w	8009b3e <USBD_StdEPReq+0x2b2>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <USBD_StdEPReq+0x40>
 80098b6:	2b20      	cmp	r3, #32
 80098b8:	f040 8141 	bne.w	8009b3e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	4798      	blx	r3
      break;
 80098ca:	e13d      	b.n	8009b48 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098d4:	2b20      	cmp	r3, #32
 80098d6:	d10a      	bne.n	80098ee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	4798      	blx	r3
 80098e6:	4603      	mov	r3, r0
 80098e8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	e12d      	b.n	8009b4a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	785b      	ldrb	r3, [r3, #1]
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	d007      	beq.n	8009906 <USBD_StdEPReq+0x7a>
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	f300 811b 	bgt.w	8009b32 <USBD_StdEPReq+0x2a6>
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d072      	beq.n	80099e6 <USBD_StdEPReq+0x15a>
 8009900:	2b01      	cmp	r3, #1
 8009902:	d03a      	beq.n	800997a <USBD_StdEPReq+0xee>
 8009904:	e115      	b.n	8009b32 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800990c:	2b02      	cmp	r3, #2
 800990e:	d002      	beq.n	8009916 <USBD_StdEPReq+0x8a>
 8009910:	2b03      	cmp	r3, #3
 8009912:	d015      	beq.n	8009940 <USBD_StdEPReq+0xb4>
 8009914:	e02b      	b.n	800996e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009916:	7bbb      	ldrb	r3, [r7, #14]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00c      	beq.n	8009936 <USBD_StdEPReq+0xaa>
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	2b80      	cmp	r3, #128	; 0x80
 8009920:	d009      	beq.n	8009936 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	4619      	mov	r1, r3
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f003 ffd4 	bl	800d8d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800992c:	2180      	movs	r1, #128	; 0x80
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f003 ffd0 	bl	800d8d4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009934:	e020      	b.n	8009978 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fc1e 	bl	800a17a <USBD_CtlError>
              break;
 800993e:	e01b      	b.n	8009978 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	885b      	ldrh	r3, [r3, #2]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10e      	bne.n	8009966 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00b      	beq.n	8009966 <USBD_StdEPReq+0xda>
 800994e:	7bbb      	ldrb	r3, [r7, #14]
 8009950:	2b80      	cmp	r3, #128	; 0x80
 8009952:	d008      	beq.n	8009966 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	88db      	ldrh	r3, [r3, #6]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d104      	bne.n	8009966 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800995c:	7bbb      	ldrb	r3, [r7, #14]
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f003 ffb7 	bl	800d8d4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fccf 	bl	800a30a <USBD_CtlSendStatus>

              break;
 800996c:	e004      	b.n	8009978 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fc02 	bl	800a17a <USBD_CtlError>
              break;
 8009976:	bf00      	nop
          }
          break;
 8009978:	e0e0      	b.n	8009b3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009980:	2b02      	cmp	r3, #2
 8009982:	d002      	beq.n	800998a <USBD_StdEPReq+0xfe>
 8009984:	2b03      	cmp	r3, #3
 8009986:	d015      	beq.n	80099b4 <USBD_StdEPReq+0x128>
 8009988:	e026      	b.n	80099d8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00c      	beq.n	80099aa <USBD_StdEPReq+0x11e>
 8009990:	7bbb      	ldrb	r3, [r7, #14]
 8009992:	2b80      	cmp	r3, #128	; 0x80
 8009994:	d009      	beq.n	80099aa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009996:	7bbb      	ldrb	r3, [r7, #14]
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f003 ff9a 	bl	800d8d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80099a0:	2180      	movs	r1, #128	; 0x80
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f003 ff96 	bl	800d8d4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099a8:	e01c      	b.n	80099e4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fbe4 	bl	800a17a <USBD_CtlError>
              break;
 80099b2:	e017      	b.n	80099e4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	885b      	ldrh	r3, [r3, #2]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d112      	bne.n	80099e2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099bc:	7bbb      	ldrb	r3, [r7, #14]
 80099be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d004      	beq.n	80099d0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80099c6:	7bbb      	ldrb	r3, [r7, #14]
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f003 ffa1 	bl	800d912 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fc9a 	bl	800a30a <USBD_CtlSendStatus>
              }
              break;
 80099d6:	e004      	b.n	80099e2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fbcd 	bl	800a17a <USBD_CtlError>
              break;
 80099e0:	e000      	b.n	80099e4 <USBD_StdEPReq+0x158>
              break;
 80099e2:	bf00      	nop
          }
          break;
 80099e4:	e0aa      	b.n	8009b3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d002      	beq.n	80099f6 <USBD_StdEPReq+0x16a>
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d032      	beq.n	8009a5a <USBD_StdEPReq+0x1ce>
 80099f4:	e097      	b.n	8009b26 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d007      	beq.n	8009a0c <USBD_StdEPReq+0x180>
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
 80099fe:	2b80      	cmp	r3, #128	; 0x80
 8009a00:	d004      	beq.n	8009a0c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fbb8 	bl	800a17a <USBD_CtlError>
                break;
 8009a0a:	e091      	b.n	8009b30 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	da0b      	bge.n	8009a2c <USBD_StdEPReq+0x1a0>
 8009a14:	7bbb      	ldrb	r3, [r7, #14]
 8009a16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	3310      	adds	r3, #16
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	4413      	add	r3, r2
 8009a28:	3304      	adds	r3, #4
 8009a2a:	e00b      	b.n	8009a44 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a32:	4613      	mov	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	4413      	add	r3, r2
 8009a42:	3304      	adds	r3, #4
 8009a44:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2202      	movs	r2, #2
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fbfb 	bl	800a24e <USBD_CtlSendData>
              break;
 8009a58:	e06a      	b.n	8009b30 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	da11      	bge.n	8009a86 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
 8009a64:	f003 020f 	and.w	r2, r3, #15
 8009a68:	6879      	ldr	r1, [r7, #4]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	440b      	add	r3, r1
 8009a74:	3318      	adds	r3, #24
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d117      	bne.n	8009aac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fb7b 	bl	800a17a <USBD_CtlError>
                  break;
 8009a84:	e054      	b.n	8009b30 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a86:	7bbb      	ldrb	r3, [r7, #14]
 8009a88:	f003 020f 	and.w	r2, r3, #15
 8009a8c:	6879      	ldr	r1, [r7, #4]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	440b      	add	r3, r1
 8009a98:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d104      	bne.n	8009aac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fb68 	bl	800a17a <USBD_CtlError>
                  break;
 8009aaa:	e041      	b.n	8009b30 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	da0b      	bge.n	8009acc <USBD_StdEPReq+0x240>
 8009ab4:	7bbb      	ldrb	r3, [r7, #14]
 8009ab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009aba:	4613      	mov	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4413      	add	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	3310      	adds	r3, #16
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	3304      	adds	r3, #4
 8009aca:	e00b      	b.n	8009ae4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009acc:	7bbb      	ldrb	r3, [r7, #14]
 8009ace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <USBD_StdEPReq+0x266>
 8009aec:	7bbb      	ldrb	r3, [r7, #14]
 8009aee:	2b80      	cmp	r3, #128	; 0x80
 8009af0:	d103      	bne.n	8009afa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	e00e      	b.n	8009b18 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f003 ff26 	bl	800d950 <USBD_LL_IsStallEP>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	e002      	b.n	8009b18 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2200      	movs	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fb95 	bl	800a24e <USBD_CtlSendData>
              break;
 8009b24:	e004      	b.n	8009b30 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fb26 	bl	800a17a <USBD_CtlError>
              break;
 8009b2e:	bf00      	nop
          }
          break;
 8009b30:	e004      	b.n	8009b3c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fb20 	bl	800a17a <USBD_CtlError>
          break;
 8009b3a:	bf00      	nop
      }
      break;
 8009b3c:	e004      	b.n	8009b48 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fb1a 	bl	800a17a <USBD_CtlError>
      break;
 8009b46:	bf00      	nop
  }

  return ret;
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
	...

08009b54 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	885b      	ldrh	r3, [r3, #2]
 8009b6e:	0a1b      	lsrs	r3, r3, #8
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	3b01      	subs	r3, #1
 8009b74:	2b06      	cmp	r3, #6
 8009b76:	f200 8128 	bhi.w	8009dca <USBD_GetDescriptor+0x276>
 8009b7a:	a201      	add	r2, pc, #4	; (adr r2, 8009b80 <USBD_GetDescriptor+0x2c>)
 8009b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b80:	08009b9d 	.word	0x08009b9d
 8009b84:	08009bb5 	.word	0x08009bb5
 8009b88:	08009bf5 	.word	0x08009bf5
 8009b8c:	08009dcb 	.word	0x08009dcb
 8009b90:	08009dcb 	.word	0x08009dcb
 8009b94:	08009d6b 	.word	0x08009d6b
 8009b98:	08009d97 	.word	0x08009d97
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	7c12      	ldrb	r2, [r2, #16]
 8009ba8:	f107 0108 	add.w	r1, r7, #8
 8009bac:	4610      	mov	r0, r2
 8009bae:	4798      	blx	r3
 8009bb0:	60f8      	str	r0, [r7, #12]
      break;
 8009bb2:	e112      	b.n	8009dda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	7c1b      	ldrb	r3, [r3, #16]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10d      	bne.n	8009bd8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc4:	f107 0208 	add.w	r2, r7, #8
 8009bc8:	4610      	mov	r0, r2
 8009bca:	4798      	blx	r3
 8009bcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009bd6:	e100      	b.n	8009dda <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be0:	f107 0208 	add.w	r2, r7, #8
 8009be4:	4610      	mov	r0, r2
 8009be6:	4798      	blx	r3
 8009be8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3301      	adds	r3, #1
 8009bee:	2202      	movs	r2, #2
 8009bf0:	701a      	strb	r2, [r3, #0]
      break;
 8009bf2:	e0f2      	b.n	8009dda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	885b      	ldrh	r3, [r3, #2]
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b05      	cmp	r3, #5
 8009bfc:	f200 80ac 	bhi.w	8009d58 <USBD_GetDescriptor+0x204>
 8009c00:	a201      	add	r2, pc, #4	; (adr r2, 8009c08 <USBD_GetDescriptor+0xb4>)
 8009c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c06:	bf00      	nop
 8009c08:	08009c21 	.word	0x08009c21
 8009c0c:	08009c55 	.word	0x08009c55
 8009c10:	08009c89 	.word	0x08009c89
 8009c14:	08009cbd 	.word	0x08009cbd
 8009c18:	08009cf1 	.word	0x08009cf1
 8009c1c:	08009d25 	.word	0x08009d25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00b      	beq.n	8009c44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	7c12      	ldrb	r2, [r2, #16]
 8009c38:	f107 0108 	add.w	r1, r7, #8
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	4798      	blx	r3
 8009c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c42:	e091      	b.n	8009d68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fa97 	bl	800a17a <USBD_CtlError>
            err++;
 8009c4c:	7afb      	ldrb	r3, [r7, #11]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	72fb      	strb	r3, [r7, #11]
          break;
 8009c52:	e089      	b.n	8009d68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00b      	beq.n	8009c78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	7c12      	ldrb	r2, [r2, #16]
 8009c6c:	f107 0108 	add.w	r1, r7, #8
 8009c70:	4610      	mov	r0, r2
 8009c72:	4798      	blx	r3
 8009c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c76:	e077      	b.n	8009d68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fa7d 	bl	800a17a <USBD_CtlError>
            err++;
 8009c80:	7afb      	ldrb	r3, [r7, #11]
 8009c82:	3301      	adds	r3, #1
 8009c84:	72fb      	strb	r3, [r7, #11]
          break;
 8009c86:	e06f      	b.n	8009d68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00b      	beq.n	8009cac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	7c12      	ldrb	r2, [r2, #16]
 8009ca0:	f107 0108 	add.w	r1, r7, #8
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	4798      	blx	r3
 8009ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009caa:	e05d      	b.n	8009d68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fa63 	bl	800a17a <USBD_CtlError>
            err++;
 8009cb4:	7afb      	ldrb	r3, [r7, #11]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cba:	e055      	b.n	8009d68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00b      	beq.n	8009ce0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	7c12      	ldrb	r2, [r2, #16]
 8009cd4:	f107 0108 	add.w	r1, r7, #8
 8009cd8:	4610      	mov	r0, r2
 8009cda:	4798      	blx	r3
 8009cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cde:	e043      	b.n	8009d68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fa49 	bl	800a17a <USBD_CtlError>
            err++;
 8009ce8:	7afb      	ldrb	r3, [r7, #11]
 8009cea:	3301      	adds	r3, #1
 8009cec:	72fb      	strb	r3, [r7, #11]
          break;
 8009cee:	e03b      	b.n	8009d68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00b      	beq.n	8009d14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d02:	695b      	ldr	r3, [r3, #20]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	7c12      	ldrb	r2, [r2, #16]
 8009d08:	f107 0108 	add.w	r1, r7, #8
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	4798      	blx	r3
 8009d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d12:	e029      	b.n	8009d68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fa2f 	bl	800a17a <USBD_CtlError>
            err++;
 8009d1c:	7afb      	ldrb	r3, [r7, #11]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	72fb      	strb	r3, [r7, #11]
          break;
 8009d22:	e021      	b.n	8009d68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00b      	beq.n	8009d48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d36:	699b      	ldr	r3, [r3, #24]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	7c12      	ldrb	r2, [r2, #16]
 8009d3c:	f107 0108 	add.w	r1, r7, #8
 8009d40:	4610      	mov	r0, r2
 8009d42:	4798      	blx	r3
 8009d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d46:	e00f      	b.n	8009d68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fa15 	bl	800a17a <USBD_CtlError>
            err++;
 8009d50:	7afb      	ldrb	r3, [r7, #11]
 8009d52:	3301      	adds	r3, #1
 8009d54:	72fb      	strb	r3, [r7, #11]
          break;
 8009d56:	e007      	b.n	8009d68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fa0d 	bl	800a17a <USBD_CtlError>
          err++;
 8009d60:	7afb      	ldrb	r3, [r7, #11]
 8009d62:	3301      	adds	r3, #1
 8009d64:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009d66:	e038      	b.n	8009dda <USBD_GetDescriptor+0x286>
 8009d68:	e037      	b.n	8009dda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	7c1b      	ldrb	r3, [r3, #16]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d109      	bne.n	8009d86 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d7a:	f107 0208 	add.w	r2, r7, #8
 8009d7e:	4610      	mov	r0, r2
 8009d80:	4798      	blx	r3
 8009d82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d84:	e029      	b.n	8009dda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f9f6 	bl	800a17a <USBD_CtlError>
        err++;
 8009d8e:	7afb      	ldrb	r3, [r7, #11]
 8009d90:	3301      	adds	r3, #1
 8009d92:	72fb      	strb	r3, [r7, #11]
      break;
 8009d94:	e021      	b.n	8009dda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	7c1b      	ldrb	r3, [r3, #16]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10d      	bne.n	8009dba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da6:	f107 0208 	add.w	r2, r7, #8
 8009daa:	4610      	mov	r0, r2
 8009dac:	4798      	blx	r3
 8009dae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	3301      	adds	r3, #1
 8009db4:	2207      	movs	r2, #7
 8009db6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009db8:	e00f      	b.n	8009dda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f9dc 	bl	800a17a <USBD_CtlError>
        err++;
 8009dc2:	7afb      	ldrb	r3, [r7, #11]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	72fb      	strb	r3, [r7, #11]
      break;
 8009dc8:	e007      	b.n	8009dda <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f9d4 	bl	800a17a <USBD_CtlError>
      err++;
 8009dd2:	7afb      	ldrb	r3, [r7, #11]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	72fb      	strb	r3, [r7, #11]
      break;
 8009dd8:	bf00      	nop
  }

  if (err != 0U)
 8009dda:	7afb      	ldrb	r3, [r7, #11]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d11c      	bne.n	8009e1a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009de0:	893b      	ldrh	r3, [r7, #8]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d011      	beq.n	8009e0a <USBD_GetDescriptor+0x2b6>
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	88db      	ldrh	r3, [r3, #6]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00d      	beq.n	8009e0a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	88da      	ldrh	r2, [r3, #6]
 8009df2:	893b      	ldrh	r3, [r7, #8]
 8009df4:	4293      	cmp	r3, r2
 8009df6:	bf28      	it	cs
 8009df8:	4613      	movcs	r3, r2
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009dfe:	893b      	ldrh	r3, [r7, #8]
 8009e00:	461a      	mov	r2, r3
 8009e02:	68f9      	ldr	r1, [r7, #12]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fa22 	bl	800a24e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	88db      	ldrh	r3, [r3, #6]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d104      	bne.n	8009e1c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fa79 	bl	800a30a <USBD_CtlSendStatus>
 8009e18:	e000      	b.n	8009e1c <USBD_GetDescriptor+0x2c8>
    return;
 8009e1a:	bf00      	nop
    }
  }
}
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop

08009e24 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	889b      	ldrh	r3, [r3, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d130      	bne.n	8009e98 <USBD_SetAddress+0x74>
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	88db      	ldrh	r3, [r3, #6]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d12c      	bne.n	8009e98 <USBD_SetAddress+0x74>
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	885b      	ldrh	r3, [r3, #2]
 8009e42:	2b7f      	cmp	r3, #127	; 0x7f
 8009e44:	d828      	bhi.n	8009e98 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	885b      	ldrh	r3, [r3, #2]
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d104      	bne.n	8009e66 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f98b 	bl	800a17a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e64:	e01d      	b.n	8009ea2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	7bfa      	ldrb	r2, [r7, #15]
 8009e6a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	4619      	mov	r1, r3
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f003 fd98 	bl	800d9a8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fa46 	bl	800a30a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d004      	beq.n	8009e8e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2202      	movs	r2, #2
 8009e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e8c:	e009      	b.n	8009ea2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e96:	e004      	b.n	8009ea2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f96d 	bl	800a17a <USBD_CtlError>
  }
}
 8009ea0:	bf00      	nop
 8009ea2:	bf00      	nop
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
	...

08009eac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	885b      	ldrh	r3, [r3, #2]
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	4b41      	ldr	r3, [pc, #260]	; (8009fc4 <USBD_SetConfig+0x118>)
 8009ebe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ec0:	4b40      	ldr	r3, [pc, #256]	; (8009fc4 <USBD_SetConfig+0x118>)
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d904      	bls.n	8009ed2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ec8:	6839      	ldr	r1, [r7, #0]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f955 	bl	800a17a <USBD_CtlError>
 8009ed0:	e075      	b.n	8009fbe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d002      	beq.n	8009ee2 <USBD_SetConfig+0x36>
 8009edc:	2b03      	cmp	r3, #3
 8009ede:	d023      	beq.n	8009f28 <USBD_SetConfig+0x7c>
 8009ee0:	e062      	b.n	8009fa8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009ee2:	4b38      	ldr	r3, [pc, #224]	; (8009fc4 <USBD_SetConfig+0x118>)
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d01a      	beq.n	8009f20 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009eea:	4b36      	ldr	r3, [pc, #216]	; (8009fc4 <USBD_SetConfig+0x118>)
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2203      	movs	r2, #3
 8009ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009efc:	4b31      	ldr	r3, [pc, #196]	; (8009fc4 <USBD_SetConfig+0x118>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff f9e7 	bl	80092d6 <USBD_SetClassConfig>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d104      	bne.n	8009f18 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f932 	bl	800a17a <USBD_CtlError>
            return;
 8009f16:	e052      	b.n	8009fbe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f9f6 	bl	800a30a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f1e:	e04e      	b.n	8009fbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f9f2 	bl	800a30a <USBD_CtlSendStatus>
        break;
 8009f26:	e04a      	b.n	8009fbe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009f28:	4b26      	ldr	r3, [pc, #152]	; (8009fc4 <USBD_SetConfig+0x118>)
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d112      	bne.n	8009f56 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2202      	movs	r2, #2
 8009f34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009f38:	4b22      	ldr	r3, [pc, #136]	; (8009fc4 <USBD_SetConfig+0x118>)
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009f42:	4b20      	ldr	r3, [pc, #128]	; (8009fc4 <USBD_SetConfig+0x118>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7ff f9e3 	bl	8009314 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f9db 	bl	800a30a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f54:	e033      	b.n	8009fbe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009f56:	4b1b      	ldr	r3, [pc, #108]	; (8009fc4 <USBD_SetConfig+0x118>)
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d01d      	beq.n	8009fa0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7ff f9d1 	bl	8009314 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009f72:	4b14      	ldr	r3, [pc, #80]	; (8009fc4 <USBD_SetConfig+0x118>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	461a      	mov	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f7c:	4b11      	ldr	r3, [pc, #68]	; (8009fc4 <USBD_SetConfig+0x118>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	4619      	mov	r1, r3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7ff f9a7 	bl	80092d6 <USBD_SetClassConfig>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d104      	bne.n	8009f98 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f8f2 	bl	800a17a <USBD_CtlError>
            return;
 8009f96:	e012      	b.n	8009fbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f9b6 	bl	800a30a <USBD_CtlSendStatus>
        break;
 8009f9e:	e00e      	b.n	8009fbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f9b2 	bl	800a30a <USBD_CtlSendStatus>
        break;
 8009fa6:	e00a      	b.n	8009fbe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009fa8:	6839      	ldr	r1, [r7, #0]
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f8e5 	bl	800a17a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009fb0:	4b04      	ldr	r3, [pc, #16]	; (8009fc4 <USBD_SetConfig+0x118>)
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7ff f9ac 	bl	8009314 <USBD_ClrClassConfig>
        break;
 8009fbc:	bf00      	nop
    }
  }
}
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	200001b1 	.word	0x200001b1

08009fc8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	88db      	ldrh	r3, [r3, #6]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d004      	beq.n	8009fe4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009fda:	6839      	ldr	r1, [r7, #0]
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f8cc 	bl	800a17a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009fe2:	e022      	b.n	800a02a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	dc02      	bgt.n	8009ff4 <USBD_GetConfig+0x2c>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	dc03      	bgt.n	8009ffa <USBD_GetConfig+0x32>
 8009ff2:	e015      	b.n	800a020 <USBD_GetConfig+0x58>
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	d00b      	beq.n	800a010 <USBD_GetConfig+0x48>
 8009ff8:	e012      	b.n	800a020 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3308      	adds	r3, #8
 800a004:	2201      	movs	r2, #1
 800a006:	4619      	mov	r1, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f920 	bl	800a24e <USBD_CtlSendData>
        break;
 800a00e:	e00c      	b.n	800a02a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	3304      	adds	r3, #4
 800a014:	2201      	movs	r2, #1
 800a016:	4619      	mov	r1, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f918 	bl	800a24e <USBD_CtlSendData>
        break;
 800a01e:	e004      	b.n	800a02a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f8a9 	bl	800a17a <USBD_CtlError>
        break;
 800a028:	bf00      	nop
}
 800a02a:	bf00      	nop
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b082      	sub	sp, #8
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a042:	3b01      	subs	r3, #1
 800a044:	2b02      	cmp	r3, #2
 800a046:	d81e      	bhi.n	800a086 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	88db      	ldrh	r3, [r3, #6]
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d004      	beq.n	800a05a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f891 	bl	800a17a <USBD_CtlError>
        break;
 800a058:	e01a      	b.n	800a090 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a066:	2b00      	cmp	r3, #0
 800a068:	d005      	beq.n	800a076 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	f043 0202 	orr.w	r2, r3, #2
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	330c      	adds	r3, #12
 800a07a:	2202      	movs	r2, #2
 800a07c:	4619      	mov	r1, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f8e5 	bl	800a24e <USBD_CtlSendData>
      break;
 800a084:	e004      	b.n	800a090 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f876 	bl	800a17a <USBD_CtlError>
      break;
 800a08e:	bf00      	nop
  }
}
 800a090:	bf00      	nop
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	885b      	ldrh	r3, [r3, #2]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d106      	bne.n	800a0b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f929 	bl	800a30a <USBD_CtlSendStatus>
  }
}
 800a0b8:	bf00      	nop
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d80b      	bhi.n	800a0ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	885b      	ldrh	r3, [r3, #2]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d10c      	bne.n	800a0f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f90f 	bl	800a30a <USBD_CtlSendStatus>
      }
      break;
 800a0ec:	e004      	b.n	800a0f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a0ee:	6839      	ldr	r1, [r7, #0]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f842 	bl	800a17a <USBD_CtlError>
      break;
 800a0f6:	e000      	b.n	800a0fa <USBD_ClrFeature+0x3a>
      break;
 800a0f8:	bf00      	nop
  }
}
 800a0fa:	bf00      	nop
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a102:	b480      	push	{r7}
 800a104:	b083      	sub	sp, #12
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	781a      	ldrb	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	785a      	ldrb	r2, [r3, #1]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	3302      	adds	r3, #2
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	b29a      	uxth	r2, r3
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	3303      	adds	r3, #3
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	021b      	lsls	r3, r3, #8
 800a12e:	b29b      	uxth	r3, r3
 800a130:	4413      	add	r3, r2
 800a132:	b29a      	uxth	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	3304      	adds	r3, #4
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	b29a      	uxth	r2, r3
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	3305      	adds	r3, #5
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	b29b      	uxth	r3, r3
 800a148:	021b      	lsls	r3, r3, #8
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	4413      	add	r3, r2
 800a14e:	b29a      	uxth	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	3306      	adds	r3, #6
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	3307      	adds	r3, #7
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	b29b      	uxth	r3, r3
 800a164:	021b      	lsls	r3, r3, #8
 800a166:	b29b      	uxth	r3, r3
 800a168:	4413      	add	r3, r2
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	80da      	strh	r2, [r3, #6]

}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	bc80      	pop	{r7}
 800a178:	4770      	bx	lr

0800a17a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a184:	2180      	movs	r1, #128	; 0x80
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f003 fba4 	bl	800d8d4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a18c:	2100      	movs	r1, #0
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f003 fba0 	bl	800d8d4 <USBD_LL_StallEP>
}
 800a194:	bf00      	nop
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b086      	sub	sp, #24
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d032      	beq.n	800a218 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 f834 	bl	800a220 <USBD_GetLen>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a1c6:	7dfb      	ldrb	r3, [r7, #23]
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	75fa      	strb	r2, [r7, #23]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	7812      	ldrb	r2, [r2, #0]
 800a1d6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a1d8:	7dfb      	ldrb	r3, [r7, #23]
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	75fa      	strb	r2, [r7, #23]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	2203      	movs	r2, #3
 800a1e6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a1e8:	e012      	b.n	800a210 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	1c5a      	adds	r2, r3, #1
 800a1ee:	60fa      	str	r2, [r7, #12]
 800a1f0:	7dfa      	ldrb	r2, [r7, #23]
 800a1f2:	1c51      	adds	r1, r2, #1
 800a1f4:	75f9      	strb	r1, [r7, #23]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	440a      	add	r2, r1
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a200:	7dfb      	ldrb	r3, [r7, #23]
 800a202:	1c5a      	adds	r2, r3, #1
 800a204:	75fa      	strb	r2, [r7, #23]
 800a206:	461a      	mov	r2, r3
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	4413      	add	r3, r2
 800a20c:	2200      	movs	r2, #0
 800a20e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1e8      	bne.n	800a1ea <USBD_GetString+0x4e>
    }
  }
}
 800a218:	bf00      	nop
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a228:	2300      	movs	r3, #0
 800a22a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a22c:	e005      	b.n	800a23a <USBD_GetLen+0x1a>
  {
    len++;
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
 800a230:	3301      	adds	r3, #1
 800a232:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	3301      	adds	r3, #1
 800a238:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1f5      	bne.n	800a22e <USBD_GetLen+0xe>
  }

  return len;
 800a242:	7bfb      	ldrb	r3, [r7, #15]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3714      	adds	r7, #20
 800a248:	46bd      	mov	sp, r7
 800a24a:	bc80      	pop	{r7}
 800a24c:	4770      	bx	lr

0800a24e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	60f8      	str	r0, [r7, #12]
 800a256:	60b9      	str	r1, [r7, #8]
 800a258:	4613      	mov	r3, r2
 800a25a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2202      	movs	r2, #2
 800a260:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a264:	88fa      	ldrh	r2, [r7, #6]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a26a:	88fa      	ldrh	r2, [r7, #6]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a270:	88fb      	ldrh	r3, [r7, #6]
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	2100      	movs	r1, #0
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f003 fbb5 	bl	800d9e6 <USBD_LL_Transmit>

  return USBD_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b084      	sub	sp, #16
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	60f8      	str	r0, [r7, #12]
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	4613      	mov	r3, r2
 800a292:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a294:	88fb      	ldrh	r3, [r7, #6]
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	2100      	movs	r1, #0
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f003 fba3 	bl	800d9e6 <USBD_LL_Transmit>

  return USBD_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	60f8      	str	r0, [r7, #12]
 800a2b2:	60b9      	str	r1, [r7, #8]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2203      	movs	r2, #3
 800a2bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a2c0:	88fa      	ldrh	r2, [r7, #6]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a2c8:	88fa      	ldrh	r2, [r7, #6]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2d0:	88fb      	ldrh	r3, [r7, #6]
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f003 fba8 	bl	800da2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b084      	sub	sp, #16
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	60f8      	str	r0, [r7, #12]
 800a2ee:	60b9      	str	r1, [r7, #8]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2f4:	88fb      	ldrh	r3, [r7, #6]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f003 fb96 	bl	800da2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b082      	sub	sp, #8
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2204      	movs	r2, #4
 800a316:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a31a:	2300      	movs	r3, #0
 800a31c:	2200      	movs	r2, #0
 800a31e:	2100      	movs	r1, #0
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f003 fb60 	bl	800d9e6 <USBD_LL_Transmit>

  return USBD_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2205      	movs	r2, #5
 800a33c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a340:	2300      	movs	r3, #0
 800a342:	2200      	movs	r2, #0
 800a344:	2100      	movs	r1, #0
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f003 fb70 	bl	800da2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
	...

0800a358 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a35e:	f3ef 8305 	mrs	r3, IPSR
 800a362:	60bb      	str	r3, [r7, #8]
  return(result);
 800a364:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10f      	bne.n	800a38a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a36a:	f3ef 8310 	mrs	r3, PRIMASK
 800a36e:	607b      	str	r3, [r7, #4]
  return(result);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d109      	bne.n	800a38a <osKernelInitialize+0x32>
 800a376:	4b10      	ldr	r3, [pc, #64]	; (800a3b8 <osKernelInitialize+0x60>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d109      	bne.n	800a392 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a37e:	f3ef 8311 	mrs	r3, BASEPRI
 800a382:	603b      	str	r3, [r7, #0]
  return(result);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a38a:	f06f 0305 	mvn.w	r3, #5
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	e00c      	b.n	800a3ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a392:	4b09      	ldr	r3, [pc, #36]	; (800a3b8 <osKernelInitialize+0x60>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d105      	bne.n	800a3a6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800a39a:	4b07      	ldr	r3, [pc, #28]	; (800a3b8 <osKernelInitialize+0x60>)
 800a39c:	2201      	movs	r2, #1
 800a39e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	e002      	b.n	800a3ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bc80      	pop	{r7}
 800a3b6:	4770      	bx	lr
 800a3b8:	200001b4 	.word	0x200001b4

0800a3bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3c2:	f3ef 8305 	mrs	r3, IPSR
 800a3c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10f      	bne.n	800a3ee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a3d2:	607b      	str	r3, [r7, #4]
  return(result);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d109      	bne.n	800a3ee <osKernelStart+0x32>
 800a3da:	4b11      	ldr	r3, [pc, #68]	; (800a420 <osKernelStart+0x64>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d109      	bne.n	800a3f6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a3e2:	f3ef 8311 	mrs	r3, BASEPRI
 800a3e6:	603b      	str	r3, [r7, #0]
  return(result);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d003      	beq.n	800a3f6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a3ee:	f06f 0305 	mvn.w	r3, #5
 800a3f2:	60fb      	str	r3, [r7, #12]
 800a3f4:	e00e      	b.n	800a414 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800a3f6:	4b0a      	ldr	r3, [pc, #40]	; (800a420 <osKernelStart+0x64>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d107      	bne.n	800a40e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800a3fe:	4b08      	ldr	r3, [pc, #32]	; (800a420 <osKernelStart+0x64>)
 800a400:	2202      	movs	r2, #2
 800a402:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a404:	f001 f9ba 	bl	800b77c <vTaskStartScheduler>
      stat = osOK;
 800a408:	2300      	movs	r3, #0
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	e002      	b.n	800a414 <osKernelStart+0x58>
    } else {
      stat = osError;
 800a40e:	f04f 33ff 	mov.w	r3, #4294967295
 800a412:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a414:	68fb      	ldr	r3, [r7, #12]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	200001b4 	.word	0x200001b4

0800a424 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a424:	b580      	push	{r7, lr}
 800a426:	b092      	sub	sp, #72	; 0x48
 800a428:	af04      	add	r7, sp, #16
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a430:	2300      	movs	r3, #0
 800a432:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a434:	f3ef 8305 	mrs	r3, IPSR
 800a438:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f040 8094 	bne.w	800a56a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a442:	f3ef 8310 	mrs	r3, PRIMASK
 800a446:	623b      	str	r3, [r7, #32]
  return(result);
 800a448:	6a3b      	ldr	r3, [r7, #32]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f040 808d 	bne.w	800a56a <osThreadNew+0x146>
 800a450:	4b48      	ldr	r3, [pc, #288]	; (800a574 <osThreadNew+0x150>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b02      	cmp	r3, #2
 800a456:	d106      	bne.n	800a466 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a458:	f3ef 8311 	mrs	r3, BASEPRI
 800a45c:	61fb      	str	r3, [r7, #28]
  return(result);
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	2b00      	cmp	r3, #0
 800a462:	f040 8082 	bne.w	800a56a <osThreadNew+0x146>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d07e      	beq.n	800a56a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800a46c:	2380      	movs	r3, #128	; 0x80
 800a46e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800a470:	2318      	movs	r3, #24
 800a472:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800a474:	2300      	movs	r3, #0
 800a476:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800a478:	f107 031b 	add.w	r3, r7, #27
 800a47c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800a47e:	f04f 33ff 	mov.w	r3, #4294967295
 800a482:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d045      	beq.n	800a516 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <osThreadNew+0x74>
        name = attr->name;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d002      	beq.n	800a4a6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d008      	beq.n	800a4be <osThreadNew+0x9a>
 800a4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ae:	2b38      	cmp	r3, #56	; 0x38
 800a4b0:	d805      	bhi.n	800a4be <osThreadNew+0x9a>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <osThreadNew+0x9e>
        return (NULL);
 800a4be:	2300      	movs	r3, #0
 800a4c0:	e054      	b.n	800a56c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	695b      	ldr	r3, [r3, #20]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d003      	beq.n	800a4d2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	695b      	ldr	r3, [r3, #20]
 800a4ce:	089b      	lsrs	r3, r3, #2
 800a4d0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00e      	beq.n	800a4f8 <osThreadNew+0xd4>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	2b5b      	cmp	r3, #91	; 0x5b
 800a4e0:	d90a      	bls.n	800a4f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d006      	beq.n	800a4f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	695b      	ldr	r3, [r3, #20]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d002      	beq.n	800a4f8 <osThreadNew+0xd4>
        mem = 1;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4f6:	e010      	b.n	800a51a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10c      	bne.n	800a51a <osThreadNew+0xf6>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d108      	bne.n	800a51a <osThreadNew+0xf6>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d104      	bne.n	800a51a <osThreadNew+0xf6>
          mem = 0;
 800a510:	2300      	movs	r3, #0
 800a512:	62bb      	str	r3, [r7, #40]	; 0x28
 800a514:	e001      	b.n	800a51a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800a516:	2300      	movs	r3, #0
 800a518:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800a51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d110      	bne.n	800a542 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a528:	9202      	str	r2, [sp, #8]
 800a52a:	9301      	str	r3, [sp, #4]
 800a52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a534:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f000 fed6 	bl	800b2e8 <xTaskCreateStatic>
 800a53c:	4603      	mov	r3, r0
 800a53e:	617b      	str	r3, [r7, #20]
 800a540:	e013      	b.n	800a56a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a544:	2b00      	cmp	r3, #0
 800a546:	d110      	bne.n	800a56a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	f107 0314 	add.w	r3, r7, #20
 800a550:	9301      	str	r3, [sp, #4]
 800a552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f000 ff20 	bl	800b3a0 <xTaskCreate>
 800a560:	4603      	mov	r3, r0
 800a562:	2b01      	cmp	r3, #1
 800a564:	d001      	beq.n	800a56a <osThreadNew+0x146>
          hTask = NULL;
 800a566:	2300      	movs	r3, #0
 800a568:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a56a:	697b      	ldr	r3, [r7, #20]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3738      	adds	r7, #56	; 0x38
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	200001b4 	.word	0x200001b4

0800a578 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a580:	f3ef 8305 	mrs	r3, IPSR
 800a584:	613b      	str	r3, [r7, #16]
  return(result);
 800a586:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10f      	bne.n	800a5ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a58c:	f3ef 8310 	mrs	r3, PRIMASK
 800a590:	60fb      	str	r3, [r7, #12]
  return(result);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d109      	bne.n	800a5ac <osDelay+0x34>
 800a598:	4b0d      	ldr	r3, [pc, #52]	; (800a5d0 <osDelay+0x58>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	d109      	bne.n	800a5b4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a5a0:	f3ef 8311 	mrs	r3, BASEPRI
 800a5a4:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d003      	beq.n	800a5b4 <osDelay+0x3c>
    stat = osErrorISR;
 800a5ac:	f06f 0305 	mvn.w	r3, #5
 800a5b0:	617b      	str	r3, [r7, #20]
 800a5b2:	e007      	b.n	800a5c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f001 f8a8 	bl	800b714 <vTaskDelay>
    }
  }

  return (stat);
 800a5c4:	697b      	ldr	r3, [r7, #20]
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3718      	adds	r7, #24
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	200001b4 	.word	0x200001b4

0800a5d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b08c      	sub	sp, #48	; 0x30
 800a5d8:	af02      	add	r7, sp, #8
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5e4:	f3ef 8305 	mrs	r3, IPSR
 800a5e8:	61bb      	str	r3, [r7, #24]
  return(result);
 800a5ea:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d16f      	bne.n	800a6d0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a5f4:	617b      	str	r3, [r7, #20]
  return(result);
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d169      	bne.n	800a6d0 <osMessageQueueNew+0xfc>
 800a5fc:	4b37      	ldr	r3, [pc, #220]	; (800a6dc <osMessageQueueNew+0x108>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2b02      	cmp	r3, #2
 800a602:	d105      	bne.n	800a610 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a604:	f3ef 8311 	mrs	r3, BASEPRI
 800a608:	613b      	str	r3, [r7, #16]
  return(result);
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d15f      	bne.n	800a6d0 <osMessageQueueNew+0xfc>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d05c      	beq.n	800a6d0 <osMessageQueueNew+0xfc>
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d059      	beq.n	800a6d0 <osMessageQueueNew+0xfc>
    mem = -1;
 800a61c:	f04f 33ff 	mov.w	r3, #4294967295
 800a620:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d029      	beq.n	800a67c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d012      	beq.n	800a656 <osMessageQueueNew+0x82>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	2b4f      	cmp	r3, #79	; 0x4f
 800a636:	d90e      	bls.n	800a656 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00a      	beq.n	800a656 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	695a      	ldr	r2, [r3, #20]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	68b9      	ldr	r1, [r7, #8]
 800a648:	fb01 f303 	mul.w	r3, r1, r3
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d302      	bcc.n	800a656 <osMessageQueueNew+0x82>
        mem = 1;
 800a650:	2301      	movs	r3, #1
 800a652:	623b      	str	r3, [r7, #32]
 800a654:	e014      	b.n	800a680 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d110      	bne.n	800a680 <osMessageQueueNew+0xac>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d10c      	bne.n	800a680 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d108      	bne.n	800a680 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	695b      	ldr	r3, [r3, #20]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d104      	bne.n	800a680 <osMessageQueueNew+0xac>
          mem = 0;
 800a676:	2300      	movs	r3, #0
 800a678:	623b      	str	r3, [r7, #32]
 800a67a:	e001      	b.n	800a680 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d10b      	bne.n	800a69e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	691a      	ldr	r2, [r3, #16]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	2100      	movs	r1, #0
 800a690:	9100      	str	r1, [sp, #0]
 800a692:	68b9      	ldr	r1, [r7, #8]
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 f96d 	bl	800a974 <xQueueGenericCreateStatic>
 800a69a:	6278      	str	r0, [r7, #36]	; 0x24
 800a69c:	e008      	b.n	800a6b0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d105      	bne.n	800a6b0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	68b9      	ldr	r1, [r7, #8]
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f000 f9da 	bl	800aa62 <xQueueGenericCreate>
 800a6ae:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00c      	beq.n	800a6d0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d003      	beq.n	800a6c4 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	61fb      	str	r3, [r7, #28]
 800a6c2:	e001      	b.n	800a6c8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a6c8:	69f9      	ldr	r1, [r7, #28]
 800a6ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6cc:	f000 fdb0 	bl	800b230 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3728      	adds	r7, #40	; 0x28
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	200001b4 	.word	0x200001b4

0800a6e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	4a06      	ldr	r2, [pc, #24]	; (800a708 <vApplicationGetIdleTaskMemory+0x28>)
 800a6f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	4a05      	ldr	r2, [pc, #20]	; (800a70c <vApplicationGetIdleTaskMemory+0x2c>)
 800a6f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2280      	movs	r2, #128	; 0x80
 800a6fc:	601a      	str	r2, [r3, #0]
}
 800a6fe:	bf00      	nop
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	bc80      	pop	{r7}
 800a706:	4770      	bx	lr
 800a708:	200001b8 	.word	0x200001b8
 800a70c:	20000214 	.word	0x20000214

0800a710 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4a07      	ldr	r2, [pc, #28]	; (800a73c <vApplicationGetTimerTaskMemory+0x2c>)
 800a720:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	4a06      	ldr	r2, [pc, #24]	; (800a740 <vApplicationGetTimerTaskMemory+0x30>)
 800a726:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a72e:	601a      	str	r2, [r3, #0]
}
 800a730:	bf00      	nop
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	bc80      	pop	{r7}
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	20000414 	.word	0x20000414
 800a740:	20000470 	.word	0x20000470

0800a744 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f103 0208 	add.w	r2, r3, #8
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f04f 32ff 	mov.w	r2, #4294967295
 800a75c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f103 0208 	add.w	r2, r3, #8
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f103 0208 	add.w	r2, r3, #8
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bc80      	pop	{r7}
 800a780:	4770      	bx	lr

0800a782 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a782:	b480      	push	{r7}
 800a784:	b083      	sub	sp, #12
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	bc80      	pop	{r7}
 800a798:	4770      	bx	lr

0800a79a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a79a:	b480      	push	{r7}
 800a79c:	b085      	sub	sp, #20
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	689a      	ldr	r2, [r3, #8]
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	1c5a      	adds	r2, r3, #1
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	601a      	str	r2, [r3, #0]
}
 800a7d6:	bf00      	nop
 800a7d8:	3714      	adds	r7, #20
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bc80      	pop	{r7}
 800a7de:	4770      	bx	lr

0800a7e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f6:	d103      	bne.n	800a800 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	60fb      	str	r3, [r7, #12]
 800a7fe:	e00c      	b.n	800a81a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3308      	adds	r3, #8
 800a804:	60fb      	str	r3, [r7, #12]
 800a806:	e002      	b.n	800a80e <vListInsert+0x2e>
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	429a      	cmp	r2, r3
 800a818:	d2f6      	bcs.n	800a808 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	685a      	ldr	r2, [r3, #4]
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	683a      	ldr	r2, [r7, #0]
 800a828:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	1c5a      	adds	r2, r3, #1
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	601a      	str	r2, [r3, #0]
}
 800a846:	bf00      	nop
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bc80      	pop	{r7}
 800a84e:	4770      	bx	lr

0800a850 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6892      	ldr	r2, [r2, #8]
 800a866:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	6852      	ldr	r2, [r2, #4]
 800a870:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d103      	bne.n	800a884 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	689a      	ldr	r2, [r3, #8]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	1e5a      	subs	r2, r3, #1
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bc80      	pop	{r7}
 800a8a0:	4770      	bx	lr
	...

0800a8a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10a      	bne.n	800a8ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a8ca:	bf00      	nop
 800a8cc:	e7fe      	b.n	800a8cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a8ce:	f002 f995 	bl	800cbfc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8da:	68f9      	ldr	r1, [r7, #12]
 800a8dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a8de:	fb01 f303 	mul.w	r3, r1, r3
 800a8e2:	441a      	add	r2, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fe:	3b01      	subs	r3, #1
 800a900:	68f9      	ldr	r1, [r7, #12]
 800a902:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a904:	fb01 f303 	mul.w	r3, r1, r3
 800a908:	441a      	add	r2, r3
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	22ff      	movs	r2, #255	; 0xff
 800a912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	22ff      	movs	r2, #255	; 0xff
 800a91a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d114      	bne.n	800a94e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d01a      	beq.n	800a962 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	3310      	adds	r3, #16
 800a930:	4618      	mov	r0, r3
 800a932:	f001 f9ad 	bl	800bc90 <xTaskRemoveFromEventList>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d012      	beq.n	800a962 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a93c:	4b0c      	ldr	r3, [pc, #48]	; (800a970 <xQueueGenericReset+0xcc>)
 800a93e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a942:	601a      	str	r2, [r3, #0]
 800a944:	f3bf 8f4f 	dsb	sy
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	e009      	b.n	800a962 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	3310      	adds	r3, #16
 800a952:	4618      	mov	r0, r3
 800a954:	f7ff fef6 	bl	800a744 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	3324      	adds	r3, #36	; 0x24
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7ff fef1 	bl	800a744 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a962:	f002 f97b 	bl	800cc5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a966:	2301      	movs	r3, #1
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	e000ed04 	.word	0xe000ed04

0800a974 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a974:	b580      	push	{r7, lr}
 800a976:	b08e      	sub	sp, #56	; 0x38
 800a978:	af02      	add	r7, sp, #8
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
 800a980:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10a      	bne.n	800a99e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98c:	f383 8811 	msr	BASEPRI, r3
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a99a:	bf00      	nop
 800a99c:	e7fe      	b.n	800a99c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10a      	bne.n	800a9ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a9b6:	bf00      	nop
 800a9b8:	e7fe      	b.n	800a9b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d002      	beq.n	800a9c6 <xQueueGenericCreateStatic+0x52>
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <xQueueGenericCreateStatic+0x56>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e000      	b.n	800a9cc <xQueueGenericCreateStatic+0x58>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10a      	bne.n	800a9e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d4:	f383 8811 	msr	BASEPRI, r3
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	623b      	str	r3, [r7, #32]
}
 800a9e2:	bf00      	nop
 800a9e4:	e7fe      	b.n	800a9e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d102      	bne.n	800a9f2 <xQueueGenericCreateStatic+0x7e>
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d101      	bne.n	800a9f6 <xQueueGenericCreateStatic+0x82>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e000      	b.n	800a9f8 <xQueueGenericCreateStatic+0x84>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d10a      	bne.n	800aa12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa00:	f383 8811 	msr	BASEPRI, r3
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	61fb      	str	r3, [r7, #28]
}
 800aa0e:	bf00      	nop
 800aa10:	e7fe      	b.n	800aa10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa12:	2350      	movs	r3, #80	; 0x50
 800aa14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b50      	cmp	r3, #80	; 0x50
 800aa1a:	d00a      	beq.n	800aa32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	61bb      	str	r3, [r7, #24]
}
 800aa2e:	bf00      	nop
 800aa30:	e7fe      	b.n	800aa30 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aa36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00d      	beq.n	800aa58 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aa3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa44:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aa48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	68b9      	ldr	r1, [r7, #8]
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f000 f843 	bl	800aade <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800aa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3730      	adds	r7, #48	; 0x30
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b08a      	sub	sp, #40	; 0x28
 800aa66:	af02      	add	r7, sp, #8
 800aa68:	60f8      	str	r0, [r7, #12]
 800aa6a:	60b9      	str	r1, [r7, #8]
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10a      	bne.n	800aa8c <xQueueGenericCreate+0x2a>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	613b      	str	r3, [r7, #16]
}
 800aa88:	bf00      	nop
 800aa8a:	e7fe      	b.n	800aa8a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d102      	bne.n	800aa98 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800aa92:	2300      	movs	r3, #0
 800aa94:	61fb      	str	r3, [r7, #28]
 800aa96:	e004      	b.n	800aaa2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	fb02 f303 	mul.w	r3, r2, r3
 800aaa0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	3350      	adds	r3, #80	; 0x50
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f002 f9a8 	bl	800cdfc <pvPortMalloc>
 800aaac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00f      	beq.n	800aad4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	3350      	adds	r3, #80	; 0x50
 800aab8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aac2:	79fa      	ldrb	r2, [r7, #7]
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	4613      	mov	r3, r2
 800aaca:	697a      	ldr	r2, [r7, #20]
 800aacc:	68b9      	ldr	r1, [r7, #8]
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f000 f805 	bl	800aade <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800aad4:	69bb      	ldr	r3, [r7, #24]
	}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3720      	adds	r7, #32
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b084      	sub	sp, #16
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	60f8      	str	r0, [r7, #12]
 800aae6:	60b9      	str	r1, [r7, #8]
 800aae8:	607a      	str	r2, [r7, #4]
 800aaea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d103      	bne.n	800aafa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	69ba      	ldr	r2, [r7, #24]
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	e002      	b.n	800ab00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab0c:	2101      	movs	r1, #1
 800ab0e:	69b8      	ldr	r0, [r7, #24]
 800ab10:	f7ff fec8 	bl	800a8a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	78fa      	ldrb	r2, [r7, #3]
 800ab18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab1c:	bf00      	nop
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b08e      	sub	sp, #56	; 0x38
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
 800ab30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ab32:	2300      	movs	r3, #0
 800ab34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10a      	bne.n	800ab56 <xQueueGenericSend+0x32>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab52:	bf00      	nop
 800ab54:	e7fe      	b.n	800ab54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d103      	bne.n	800ab64 <xQueueGenericSend+0x40>
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <xQueueGenericSend+0x44>
 800ab64:	2301      	movs	r3, #1
 800ab66:	e000      	b.n	800ab6a <xQueueGenericSend+0x46>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10a      	bne.n	800ab84 <xQueueGenericSend+0x60>
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab80:	bf00      	nop
 800ab82:	e7fe      	b.n	800ab82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d103      	bne.n	800ab92 <xQueueGenericSend+0x6e>
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d101      	bne.n	800ab96 <xQueueGenericSend+0x72>
 800ab92:	2301      	movs	r3, #1
 800ab94:	e000      	b.n	800ab98 <xQueueGenericSend+0x74>
 800ab96:	2300      	movs	r3, #0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10a      	bne.n	800abb2 <xQueueGenericSend+0x8e>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	623b      	str	r3, [r7, #32]
}
 800abae:	bf00      	nop
 800abb0:	e7fe      	b.n	800abb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abb2:	f001 fa67 	bl	800c084 <xTaskGetSchedulerState>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d102      	bne.n	800abc2 <xQueueGenericSend+0x9e>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <xQueueGenericSend+0xa2>
 800abc2:	2301      	movs	r3, #1
 800abc4:	e000      	b.n	800abc8 <xQueueGenericSend+0xa4>
 800abc6:	2300      	movs	r3, #0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10a      	bne.n	800abe2 <xQueueGenericSend+0xbe>
	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	61fb      	str	r3, [r7, #28]
}
 800abde:	bf00      	nop
 800abe0:	e7fe      	b.n	800abe0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abe2:	f002 f80b 	bl	800cbfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abee:	429a      	cmp	r2, r3
 800abf0:	d302      	bcc.n	800abf8 <xQueueGenericSend+0xd4>
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	d129      	bne.n	800ac4c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abf8:	683a      	ldr	r2, [r7, #0]
 800abfa:	68b9      	ldr	r1, [r7, #8]
 800abfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abfe:	f000 fa07 	bl	800b010 <prvCopyDataToQueue>
 800ac02:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d010      	beq.n	800ac2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0e:	3324      	adds	r3, #36	; 0x24
 800ac10:	4618      	mov	r0, r3
 800ac12:	f001 f83d 	bl	800bc90 <xTaskRemoveFromEventList>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d013      	beq.n	800ac44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ac1c:	4b3f      	ldr	r3, [pc, #252]	; (800ad1c <xQueueGenericSend+0x1f8>)
 800ac1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac22:	601a      	str	r2, [r3, #0]
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	e00a      	b.n	800ac44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ac2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d007      	beq.n	800ac44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ac34:	4b39      	ldr	r3, [pc, #228]	; (800ad1c <xQueueGenericSend+0x1f8>)
 800ac36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac3a:	601a      	str	r2, [r3, #0]
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ac44:	f002 f80a 	bl	800cc5c <vPortExitCritical>
				return pdPASS;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e063      	b.n	800ad14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d103      	bne.n	800ac5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac52:	f002 f803 	bl	800cc5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	e05c      	b.n	800ad14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d106      	bne.n	800ac6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac60:	f107 0314 	add.w	r3, r7, #20
 800ac64:	4618      	mov	r0, r3
 800ac66:	f001 f877 	bl	800bd58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac6e:	f001 fff5 	bl	800cc5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac72:	f000 fde9 	bl	800b848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac76:	f001 ffc1 	bl	800cbfc <vPortEnterCritical>
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac80:	b25b      	sxtb	r3, r3
 800ac82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac86:	d103      	bne.n	800ac90 <xQueueGenericSend+0x16c>
 800ac88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac96:	b25b      	sxtb	r3, r3
 800ac98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9c:	d103      	bne.n	800aca6 <xQueueGenericSend+0x182>
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aca6:	f001 ffd9 	bl	800cc5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acaa:	1d3a      	adds	r2, r7, #4
 800acac:	f107 0314 	add.w	r3, r7, #20
 800acb0:	4611      	mov	r1, r2
 800acb2:	4618      	mov	r0, r3
 800acb4:	f001 f866 	bl	800bd84 <xTaskCheckForTimeOut>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d124      	bne.n	800ad08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800acbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acc0:	f000 fa9e 	bl	800b200 <prvIsQueueFull>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d018      	beq.n	800acfc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800acca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800accc:	3310      	adds	r3, #16
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	4611      	mov	r1, r2
 800acd2:	4618      	mov	r0, r3
 800acd4:	f000 ff8c 	bl	800bbf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800acd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acda:	f000 fa29 	bl	800b130 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800acde:	f000 fdc1 	bl	800b864 <xTaskResumeAll>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f47f af7c 	bne.w	800abe2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800acea:	4b0c      	ldr	r3, [pc, #48]	; (800ad1c <xQueueGenericSend+0x1f8>)
 800acec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acf0:	601a      	str	r2, [r3, #0]
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	e772      	b.n	800abe2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800acfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acfe:	f000 fa17 	bl	800b130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad02:	f000 fdaf 	bl	800b864 <xTaskResumeAll>
 800ad06:	e76c      	b.n	800abe2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ad08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad0a:	f000 fa11 	bl	800b130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad0e:	f000 fda9 	bl	800b864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ad12:	2300      	movs	r3, #0
		}
	}
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3738      	adds	r7, #56	; 0x38
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	e000ed04 	.word	0xe000ed04

0800ad20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b08e      	sub	sp, #56	; 0x38
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
 800ad2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10a      	bne.n	800ad4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ad38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3c:	f383 8811 	msr	BASEPRI, r3
 800ad40:	f3bf 8f6f 	isb	sy
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad4a:	bf00      	nop
 800ad4c:	e7fe      	b.n	800ad4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d103      	bne.n	800ad5c <xQueueGenericSendFromISR+0x3c>
 800ad54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <xQueueGenericSendFromISR+0x40>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e000      	b.n	800ad62 <xQueueGenericSendFromISR+0x42>
 800ad60:	2300      	movs	r3, #0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10a      	bne.n	800ad7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ad66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6a:	f383 8811 	msr	BASEPRI, r3
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	623b      	str	r3, [r7, #32]
}
 800ad78:	bf00      	nop
 800ad7a:	e7fe      	b.n	800ad7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d103      	bne.n	800ad8a <xQueueGenericSendFromISR+0x6a>
 800ad82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d101      	bne.n	800ad8e <xQueueGenericSendFromISR+0x6e>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e000      	b.n	800ad90 <xQueueGenericSendFromISR+0x70>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10a      	bne.n	800adaa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ad94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad98:	f383 8811 	msr	BASEPRI, r3
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	61fb      	str	r3, [r7, #28]
}
 800ada6:	bf00      	nop
 800ada8:	e7fe      	b.n	800ada8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800adaa:	f001 ffe9 	bl	800cd80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800adae:	f3ef 8211 	mrs	r2, BASEPRI
 800adb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb6:	f383 8811 	msr	BASEPRI, r3
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	61ba      	str	r2, [r7, #24]
 800adc4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800adc6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800adc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add2:	429a      	cmp	r2, r3
 800add4:	d302      	bcc.n	800addc <xQueueGenericSendFromISR+0xbc>
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	2b02      	cmp	r3, #2
 800adda:	d12c      	bne.n	800ae36 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ade2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ade6:	683a      	ldr	r2, [r7, #0]
 800ade8:	68b9      	ldr	r1, [r7, #8]
 800adea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adec:	f000 f910 	bl	800b010 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800adf0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800adf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf8:	d112      	bne.n	800ae20 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d016      	beq.n	800ae30 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae04:	3324      	adds	r3, #36	; 0x24
 800ae06:	4618      	mov	r0, r3
 800ae08:	f000 ff42 	bl	800bc90 <xTaskRemoveFromEventList>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00e      	beq.n	800ae30 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00b      	beq.n	800ae30 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	e007      	b.n	800ae30 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ae20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae24:	3301      	adds	r3, #1
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	b25a      	sxtb	r2, r3
 800ae2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ae30:	2301      	movs	r3, #1
 800ae32:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ae34:	e001      	b.n	800ae3a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ae36:	2300      	movs	r3, #0
 800ae38:	637b      	str	r3, [r7, #52]	; 0x34
 800ae3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ae44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3738      	adds	r7, #56	; 0x38
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b08c      	sub	sp, #48	; 0x30
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10a      	bne.n	800ae80 <xQueueReceive+0x30>
	__asm volatile
 800ae6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6e:	f383 8811 	msr	BASEPRI, r3
 800ae72:	f3bf 8f6f 	isb	sy
 800ae76:	f3bf 8f4f 	dsb	sy
 800ae7a:	623b      	str	r3, [r7, #32]
}
 800ae7c:	bf00      	nop
 800ae7e:	e7fe      	b.n	800ae7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d103      	bne.n	800ae8e <xQueueReceive+0x3e>
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d101      	bne.n	800ae92 <xQueueReceive+0x42>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e000      	b.n	800ae94 <xQueueReceive+0x44>
 800ae92:	2300      	movs	r3, #0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10a      	bne.n	800aeae <xQueueReceive+0x5e>
	__asm volatile
 800ae98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9c:	f383 8811 	msr	BASEPRI, r3
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	61fb      	str	r3, [r7, #28]
}
 800aeaa:	bf00      	nop
 800aeac:	e7fe      	b.n	800aeac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aeae:	f001 f8e9 	bl	800c084 <xTaskGetSchedulerState>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d102      	bne.n	800aebe <xQueueReceive+0x6e>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d101      	bne.n	800aec2 <xQueueReceive+0x72>
 800aebe:	2301      	movs	r3, #1
 800aec0:	e000      	b.n	800aec4 <xQueueReceive+0x74>
 800aec2:	2300      	movs	r3, #0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10a      	bne.n	800aede <xQueueReceive+0x8e>
	__asm volatile
 800aec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	61bb      	str	r3, [r7, #24]
}
 800aeda:	bf00      	nop
 800aedc:	e7fe      	b.n	800aedc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800aede:	f001 fe8d 	bl	800cbfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d01f      	beq.n	800af2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aeee:	68b9      	ldr	r1, [r7, #8]
 800aef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aef2:	f000 f8f7 	bl	800b0e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef8:	1e5a      	subs	r2, r3, #1
 800aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00f      	beq.n	800af26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af08:	3310      	adds	r3, #16
 800af0a:	4618      	mov	r0, r3
 800af0c:	f000 fec0 	bl	800bc90 <xTaskRemoveFromEventList>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d007      	beq.n	800af26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af16:	4b3d      	ldr	r3, [pc, #244]	; (800b00c <xQueueReceive+0x1bc>)
 800af18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af26:	f001 fe99 	bl	800cc5c <vPortExitCritical>
				return pdPASS;
 800af2a:	2301      	movs	r3, #1
 800af2c:	e069      	b.n	800b002 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d103      	bne.n	800af3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af34:	f001 fe92 	bl	800cc5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af38:	2300      	movs	r3, #0
 800af3a:	e062      	b.n	800b002 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d106      	bne.n	800af50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af42:	f107 0310 	add.w	r3, r7, #16
 800af46:	4618      	mov	r0, r3
 800af48:	f000 ff06 	bl	800bd58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af4c:	2301      	movs	r3, #1
 800af4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af50:	f001 fe84 	bl	800cc5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af54:	f000 fc78 	bl	800b848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af58:	f001 fe50 	bl	800cbfc <vPortEnterCritical>
 800af5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af62:	b25b      	sxtb	r3, r3
 800af64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af68:	d103      	bne.n	800af72 <xQueueReceive+0x122>
 800af6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6c:	2200      	movs	r2, #0
 800af6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af78:	b25b      	sxtb	r3, r3
 800af7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7e:	d103      	bne.n	800af88 <xQueueReceive+0x138>
 800af80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af82:	2200      	movs	r2, #0
 800af84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af88:	f001 fe68 	bl	800cc5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af8c:	1d3a      	adds	r2, r7, #4
 800af8e:	f107 0310 	add.w	r3, r7, #16
 800af92:	4611      	mov	r1, r2
 800af94:	4618      	mov	r0, r3
 800af96:	f000 fef5 	bl	800bd84 <xTaskCheckForTimeOut>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d123      	bne.n	800afe8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afa2:	f000 f917 	bl	800b1d4 <prvIsQueueEmpty>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d017      	beq.n	800afdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800afac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afae:	3324      	adds	r3, #36	; 0x24
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	4611      	mov	r1, r2
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 fe1b 	bl	800bbf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800afba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afbc:	f000 f8b8 	bl	800b130 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800afc0:	f000 fc50 	bl	800b864 <xTaskResumeAll>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d189      	bne.n	800aede <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800afca:	4b10      	ldr	r3, [pc, #64]	; (800b00c <xQueueReceive+0x1bc>)
 800afcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	e780      	b.n	800aede <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800afdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afde:	f000 f8a7 	bl	800b130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afe2:	f000 fc3f 	bl	800b864 <xTaskResumeAll>
 800afe6:	e77a      	b.n	800aede <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800afe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afea:	f000 f8a1 	bl	800b130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afee:	f000 fc39 	bl	800b864 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aff4:	f000 f8ee 	bl	800b1d4 <prvIsQueueEmpty>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	f43f af6f 	beq.w	800aede <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b000:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b002:	4618      	mov	r0, r3
 800b004:	3730      	adds	r7, #48	; 0x30
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	e000ed04 	.word	0xe000ed04

0800b010 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b01c:	2300      	movs	r3, #0
 800b01e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b024:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d10d      	bne.n	800b04a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d14d      	bne.n	800b0d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f001 f840 	bl	800c0c0 <xTaskPriorityDisinherit>
 800b040:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	605a      	str	r2, [r3, #4]
 800b048:	e043      	b.n	800b0d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d119      	bne.n	800b084 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	6898      	ldr	r0, [r3, #8]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b058:	461a      	mov	r2, r3
 800b05a:	68b9      	ldr	r1, [r7, #8]
 800b05c:	f002 fd8c 	bl	800db78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	689a      	ldr	r2, [r3, #8]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b068:	441a      	add	r2, r3
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	689a      	ldr	r2, [r3, #8]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	429a      	cmp	r2, r3
 800b078:	d32b      	bcc.n	800b0d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	609a      	str	r2, [r3, #8]
 800b082:	e026      	b.n	800b0d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	68d8      	ldr	r0, [r3, #12]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08c:	461a      	mov	r2, r3
 800b08e:	68b9      	ldr	r1, [r7, #8]
 800b090:	f002 fd72 	bl	800db78 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	68da      	ldr	r2, [r3, #12]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09c:	425b      	negs	r3, r3
 800b09e:	441a      	add	r2, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	68da      	ldr	r2, [r3, #12]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d207      	bcs.n	800b0c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	685a      	ldr	r2, [r3, #4]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b8:	425b      	negs	r3, r3
 800b0ba:	441a      	add	r2, r3
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	d105      	bne.n	800b0d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d002      	beq.n	800b0d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	1c5a      	adds	r2, r3, #1
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0da:	697b      	ldr	r3, [r7, #20]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3718      	adds	r7, #24
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d018      	beq.n	800b128 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	68da      	ldr	r2, [r3, #12]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fe:	441a      	add	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	68da      	ldr	r2, [r3, #12]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d303      	bcc.n	800b118 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	68d9      	ldr	r1, [r3, #12]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b120:	461a      	mov	r2, r3
 800b122:	6838      	ldr	r0, [r7, #0]
 800b124:	f002 fd28 	bl	800db78 <memcpy>
	}
}
 800b128:	bf00      	nop
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b138:	f001 fd60 	bl	800cbfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b142:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b144:	e011      	b.n	800b16a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d012      	beq.n	800b174 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	3324      	adds	r3, #36	; 0x24
 800b152:	4618      	mov	r0, r3
 800b154:	f000 fd9c 	bl	800bc90 <xTaskRemoveFromEventList>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d001      	beq.n	800b162 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b15e:	f000 fe73 	bl	800be48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	3b01      	subs	r3, #1
 800b166:	b2db      	uxtb	r3, r3
 800b168:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b16a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	dce9      	bgt.n	800b146 <prvUnlockQueue+0x16>
 800b172:	e000      	b.n	800b176 <prvUnlockQueue+0x46>
					break;
 800b174:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	22ff      	movs	r2, #255	; 0xff
 800b17a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b17e:	f001 fd6d 	bl	800cc5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b182:	f001 fd3b 	bl	800cbfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b18c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b18e:	e011      	b.n	800b1b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	691b      	ldr	r3, [r3, #16]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d012      	beq.n	800b1be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3310      	adds	r3, #16
 800b19c:	4618      	mov	r0, r3
 800b19e:	f000 fd77 	bl	800bc90 <xTaskRemoveFromEventList>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b1a8:	f000 fe4e 	bl	800be48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	dce9      	bgt.n	800b190 <prvUnlockQueue+0x60>
 800b1bc:	e000      	b.n	800b1c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	22ff      	movs	r2, #255	; 0xff
 800b1c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b1c8:	f001 fd48 	bl	800cc5c <vPortExitCritical>
}
 800b1cc:	bf00      	nop
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1dc:	f001 fd0e 	bl	800cbfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d102      	bne.n	800b1ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	60fb      	str	r3, [r7, #12]
 800b1ec:	e001      	b.n	800b1f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1f2:	f001 fd33 	bl	800cc5c <vPortExitCritical>

	return xReturn;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b208:	f001 fcf8 	bl	800cbfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b214:	429a      	cmp	r2, r3
 800b216:	d102      	bne.n	800b21e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b218:	2301      	movs	r3, #1
 800b21a:	60fb      	str	r3, [r7, #12]
 800b21c:	e001      	b.n	800b222 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b21e:	2300      	movs	r3, #0
 800b220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b222:	f001 fd1b 	bl	800cc5c <vPortExitCritical>

	return xReturn;
 800b226:	68fb      	ldr	r3, [r7, #12]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3710      	adds	r7, #16
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b230:	b480      	push	{r7}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b23a:	2300      	movs	r3, #0
 800b23c:	60fb      	str	r3, [r7, #12]
 800b23e:	e014      	b.n	800b26a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b240:	4a0e      	ldr	r2, [pc, #56]	; (800b27c <vQueueAddToRegistry+0x4c>)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10b      	bne.n	800b264 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b24c:	490b      	ldr	r1, [pc, #44]	; (800b27c <vQueueAddToRegistry+0x4c>)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	683a      	ldr	r2, [r7, #0]
 800b252:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b256:	4a09      	ldr	r2, [pc, #36]	; (800b27c <vQueueAddToRegistry+0x4c>)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	00db      	lsls	r3, r3, #3
 800b25c:	4413      	add	r3, r2
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b262:	e006      	b.n	800b272 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	3301      	adds	r3, #1
 800b268:	60fb      	str	r3, [r7, #12]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2b07      	cmp	r3, #7
 800b26e:	d9e7      	bls.n	800b240 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b270:	bf00      	nop
 800b272:	bf00      	nop
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	bc80      	pop	{r7}
 800b27a:	4770      	bx	lr
 800b27c:	20002658 	.word	0x20002658

0800b280 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b280:	b580      	push	{r7, lr}
 800b282:	b086      	sub	sp, #24
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b290:	f001 fcb4 	bl	800cbfc <vPortEnterCritical>
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b29a:	b25b      	sxtb	r3, r3
 800b29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a0:	d103      	bne.n	800b2aa <vQueueWaitForMessageRestricted+0x2a>
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2b0:	b25b      	sxtb	r3, r3
 800b2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b6:	d103      	bne.n	800b2c0 <vQueueWaitForMessageRestricted+0x40>
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2c0:	f001 fccc 	bl	800cc5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d106      	bne.n	800b2da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	3324      	adds	r3, #36	; 0x24
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	68b9      	ldr	r1, [r7, #8]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f000 fcaf 	bl	800bc38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b2da:	6978      	ldr	r0, [r7, #20]
 800b2dc:	f7ff ff28 	bl	800b130 <prvUnlockQueue>
	}
 800b2e0:	bf00      	nop
 800b2e2:	3718      	adds	r7, #24
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b08e      	sub	sp, #56	; 0x38
 800b2ec:	af04      	add	r7, sp, #16
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
 800b2f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10a      	bne.n	800b312 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b300:	f383 8811 	msr	BASEPRI, r3
 800b304:	f3bf 8f6f 	isb	sy
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	623b      	str	r3, [r7, #32]
}
 800b30e:	bf00      	nop
 800b310:	e7fe      	b.n	800b310 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b314:	2b00      	cmp	r3, #0
 800b316:	d10a      	bne.n	800b32e <xTaskCreateStatic+0x46>
	__asm volatile
 800b318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31c:	f383 8811 	msr	BASEPRI, r3
 800b320:	f3bf 8f6f 	isb	sy
 800b324:	f3bf 8f4f 	dsb	sy
 800b328:	61fb      	str	r3, [r7, #28]
}
 800b32a:	bf00      	nop
 800b32c:	e7fe      	b.n	800b32c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b32e:	235c      	movs	r3, #92	; 0x5c
 800b330:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	2b5c      	cmp	r3, #92	; 0x5c
 800b336:	d00a      	beq.n	800b34e <xTaskCreateStatic+0x66>
	__asm volatile
 800b338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33c:	f383 8811 	msr	BASEPRI, r3
 800b340:	f3bf 8f6f 	isb	sy
 800b344:	f3bf 8f4f 	dsb	sy
 800b348:	61bb      	str	r3, [r7, #24]
}
 800b34a:	bf00      	nop
 800b34c:	e7fe      	b.n	800b34c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b350:	2b00      	cmp	r3, #0
 800b352:	d01e      	beq.n	800b392 <xTaskCreateStatic+0xaa>
 800b354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b356:	2b00      	cmp	r3, #0
 800b358:	d01b      	beq.n	800b392 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b362:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b366:	2202      	movs	r2, #2
 800b368:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b36c:	2300      	movs	r3, #0
 800b36e:	9303      	str	r3, [sp, #12]
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	9302      	str	r3, [sp, #8]
 800b374:	f107 0314 	add.w	r3, r7, #20
 800b378:	9301      	str	r3, [sp, #4]
 800b37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37c:	9300      	str	r3, [sp, #0]
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	68b9      	ldr	r1, [r7, #8]
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f000 f850 	bl	800b42a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b38a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b38c:	f000 f8d4 	bl	800b538 <prvAddNewTaskToReadyList>
 800b390:	e001      	b.n	800b396 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b392:	2300      	movs	r3, #0
 800b394:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b396:	697b      	ldr	r3, [r7, #20]
	}
 800b398:	4618      	mov	r0, r3
 800b39a:	3728      	adds	r7, #40	; 0x28
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b08c      	sub	sp, #48	; 0x30
 800b3a4:	af04      	add	r7, sp, #16
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	603b      	str	r3, [r7, #0]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3b0:	88fb      	ldrh	r3, [r7, #6]
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f001 fd21 	bl	800cdfc <pvPortMalloc>
 800b3ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00e      	beq.n	800b3e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b3c2:	205c      	movs	r0, #92	; 0x5c
 800b3c4:	f001 fd1a 	bl	800cdfc <pvPortMalloc>
 800b3c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d003      	beq.n	800b3d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	697a      	ldr	r2, [r7, #20]
 800b3d4:	631a      	str	r2, [r3, #48]	; 0x30
 800b3d6:	e005      	b.n	800b3e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3d8:	6978      	ldr	r0, [r7, #20]
 800b3da:	f001 fdd3 	bl	800cf84 <vPortFree>
 800b3de:	e001      	b.n	800b3e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d017      	beq.n	800b41a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3f2:	88fa      	ldrh	r2, [r7, #6]
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	9303      	str	r3, [sp, #12]
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	9302      	str	r3, [sp, #8]
 800b3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fe:	9301      	str	r3, [sp, #4]
 800b400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	68b9      	ldr	r1, [r7, #8]
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f000 f80e 	bl	800b42a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b40e:	69f8      	ldr	r0, [r7, #28]
 800b410:	f000 f892 	bl	800b538 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b414:	2301      	movs	r3, #1
 800b416:	61bb      	str	r3, [r7, #24]
 800b418:	e002      	b.n	800b420 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b41a:	f04f 33ff 	mov.w	r3, #4294967295
 800b41e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b420:	69bb      	ldr	r3, [r7, #24]
	}
 800b422:	4618      	mov	r0, r3
 800b424:	3720      	adds	r7, #32
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b088      	sub	sp, #32
 800b42e:	af00      	add	r7, sp, #0
 800b430:	60f8      	str	r0, [r7, #12]
 800b432:	60b9      	str	r1, [r7, #8]
 800b434:	607a      	str	r2, [r7, #4]
 800b436:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	461a      	mov	r2, r3
 800b442:	21a5      	movs	r1, #165	; 0xa5
 800b444:	f002 fbc0 	bl	800dbc8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b452:	3b01      	subs	r3, #1
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	4413      	add	r3, r2
 800b458:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	f023 0307 	bic.w	r3, r3, #7
 800b460:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	f003 0307 	and.w	r3, r3, #7
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00a      	beq.n	800b482 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b470:	f383 8811 	msr	BASEPRI, r3
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	617b      	str	r3, [r7, #20]
}
 800b47e:	bf00      	nop
 800b480:	e7fe      	b.n	800b480 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b482:	2300      	movs	r3, #0
 800b484:	61fb      	str	r3, [r7, #28]
 800b486:	e012      	b.n	800b4ae <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	4413      	add	r3, r2
 800b48e:	7819      	ldrb	r1, [r3, #0]
 800b490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	4413      	add	r3, r2
 800b496:	3334      	adds	r3, #52	; 0x34
 800b498:	460a      	mov	r2, r1
 800b49a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d006      	beq.n	800b4b6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	61fb      	str	r3, [r7, #28]
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	2b0f      	cmp	r3, #15
 800b4b2:	d9e9      	bls.n	800b488 <prvInitialiseNewTask+0x5e>
 800b4b4:	e000      	b.n	800b4b8 <prvInitialiseNewTask+0x8e>
		{
			break;
 800b4b6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c2:	2b37      	cmp	r3, #55	; 0x37
 800b4c4:	d901      	bls.n	800b4ca <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b4c6:	2337      	movs	r3, #55	; 0x37
 800b4c8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	2200      	movs	r2, #0
 800b4da:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4de:	3304      	adds	r3, #4
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7ff f94e 	bl	800a782 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e8:	3318      	adds	r3, #24
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7ff f949 	bl	800a782 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b504:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	2200      	movs	r2, #0
 800b50a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50e:	2200      	movs	r2, #0
 800b510:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	68f9      	ldr	r1, [r7, #12]
 800b518:	69b8      	ldr	r0, [r7, #24]
 800b51a:	f001 fa81 	bl	800ca20 <pxPortInitialiseStack>
 800b51e:	4602      	mov	r2, r0
 800b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b522:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b52e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b530:	bf00      	nop
 800b532:	3720      	adds	r7, #32
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b540:	f001 fb5c 	bl	800cbfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b544:	4b2d      	ldr	r3, [pc, #180]	; (800b5fc <prvAddNewTaskToReadyList+0xc4>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3301      	adds	r3, #1
 800b54a:	4a2c      	ldr	r2, [pc, #176]	; (800b5fc <prvAddNewTaskToReadyList+0xc4>)
 800b54c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b54e:	4b2c      	ldr	r3, [pc, #176]	; (800b600 <prvAddNewTaskToReadyList+0xc8>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d109      	bne.n	800b56a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b556:	4a2a      	ldr	r2, [pc, #168]	; (800b600 <prvAddNewTaskToReadyList+0xc8>)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b55c:	4b27      	ldr	r3, [pc, #156]	; (800b5fc <prvAddNewTaskToReadyList+0xc4>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d110      	bne.n	800b586 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b564:	f000 fc94 	bl	800be90 <prvInitialiseTaskLists>
 800b568:	e00d      	b.n	800b586 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b56a:	4b26      	ldr	r3, [pc, #152]	; (800b604 <prvAddNewTaskToReadyList+0xcc>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d109      	bne.n	800b586 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b572:	4b23      	ldr	r3, [pc, #140]	; (800b600 <prvAddNewTaskToReadyList+0xc8>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d802      	bhi.n	800b586 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b580:	4a1f      	ldr	r2, [pc, #124]	; (800b600 <prvAddNewTaskToReadyList+0xc8>)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b586:	4b20      	ldr	r3, [pc, #128]	; (800b608 <prvAddNewTaskToReadyList+0xd0>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3301      	adds	r3, #1
 800b58c:	4a1e      	ldr	r2, [pc, #120]	; (800b608 <prvAddNewTaskToReadyList+0xd0>)
 800b58e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b590:	4b1d      	ldr	r3, [pc, #116]	; (800b608 <prvAddNewTaskToReadyList+0xd0>)
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b59c:	4b1b      	ldr	r3, [pc, #108]	; (800b60c <prvAddNewTaskToReadyList+0xd4>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d903      	bls.n	800b5ac <prvAddNewTaskToReadyList+0x74>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a8:	4a18      	ldr	r2, [pc, #96]	; (800b60c <prvAddNewTaskToReadyList+0xd4>)
 800b5aa:	6013      	str	r3, [r2, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	4413      	add	r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	4a15      	ldr	r2, [pc, #84]	; (800b610 <prvAddNewTaskToReadyList+0xd8>)
 800b5ba:	441a      	add	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	3304      	adds	r3, #4
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	4610      	mov	r0, r2
 800b5c4:	f7ff f8e9 	bl	800a79a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5c8:	f001 fb48 	bl	800cc5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5cc:	4b0d      	ldr	r3, [pc, #52]	; (800b604 <prvAddNewTaskToReadyList+0xcc>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00e      	beq.n	800b5f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5d4:	4b0a      	ldr	r3, [pc, #40]	; (800b600 <prvAddNewTaskToReadyList+0xc8>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d207      	bcs.n	800b5f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b5e2:	4b0c      	ldr	r3, [pc, #48]	; (800b614 <prvAddNewTaskToReadyList+0xdc>)
 800b5e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5e8:	601a      	str	r2, [r3, #0]
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5f2:	bf00      	nop
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	20000d44 	.word	0x20000d44
 800b600:	20000870 	.word	0x20000870
 800b604:	20000d50 	.word	0x20000d50
 800b608:	20000d60 	.word	0x20000d60
 800b60c:	20000d4c 	.word	0x20000d4c
 800b610:	20000874 	.word	0x20000874
 800b614:	e000ed04 	.word	0xe000ed04

0800b618 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08a      	sub	sp, #40	; 0x28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b622:	2300      	movs	r3, #0
 800b624:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10a      	bne.n	800b642 <vTaskDelayUntil+0x2a>
	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	617b      	str	r3, [r7, #20]
}
 800b63e:	bf00      	nop
 800b640:	e7fe      	b.n	800b640 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10a      	bne.n	800b65e <vTaskDelayUntil+0x46>
	__asm volatile
 800b648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	613b      	str	r3, [r7, #16]
}
 800b65a:	bf00      	nop
 800b65c:	e7fe      	b.n	800b65c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b65e:	4b2a      	ldr	r3, [pc, #168]	; (800b708 <vTaskDelayUntil+0xf0>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00a      	beq.n	800b67c <vTaskDelayUntil+0x64>
	__asm volatile
 800b666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66a:	f383 8811 	msr	BASEPRI, r3
 800b66e:	f3bf 8f6f 	isb	sy
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	60fb      	str	r3, [r7, #12]
}
 800b678:	bf00      	nop
 800b67a:	e7fe      	b.n	800b67a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b67c:	f000 f8e4 	bl	800b848 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b680:	4b22      	ldr	r3, [pc, #136]	; (800b70c <vTaskDelayUntil+0xf4>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	683a      	ldr	r2, [r7, #0]
 800b68c:	4413      	add	r3, r2
 800b68e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6a3a      	ldr	r2, [r7, #32]
 800b696:	429a      	cmp	r2, r3
 800b698:	d20b      	bcs.n	800b6b2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	69fa      	ldr	r2, [r7, #28]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d211      	bcs.n	800b6c8 <vTaskDelayUntil+0xb0>
 800b6a4:	69fa      	ldr	r2, [r7, #28]
 800b6a6:	6a3b      	ldr	r3, [r7, #32]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d90d      	bls.n	800b6c8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	627b      	str	r3, [r7, #36]	; 0x24
 800b6b0:	e00a      	b.n	800b6c8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	69fa      	ldr	r2, [r7, #28]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d303      	bcc.n	800b6c4 <vTaskDelayUntil+0xac>
 800b6bc:	69fa      	ldr	r2, [r7, #28]
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d901      	bls.n	800b6c8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	69fa      	ldr	r2, [r7, #28]
 800b6cc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d006      	beq.n	800b6e2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b6d4:	69fa      	ldr	r2, [r7, #28]
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	2100      	movs	r1, #0
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f000 fe39 	bl	800c354 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b6e2:	f000 f8bf 	bl	800b864 <xTaskResumeAll>
 800b6e6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d107      	bne.n	800b6fe <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b6ee:	4b08      	ldr	r3, [pc, #32]	; (800b710 <vTaskDelayUntil+0xf8>)
 800b6f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6f4:	601a      	str	r2, [r3, #0]
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6fe:	bf00      	nop
 800b700:	3728      	adds	r7, #40	; 0x28
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	20000d6c 	.word	0x20000d6c
 800b70c:	20000d48 	.word	0x20000d48
 800b710:	e000ed04 	.word	0xe000ed04

0800b714 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b71c:	2300      	movs	r3, #0
 800b71e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d017      	beq.n	800b756 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b726:	4b13      	ldr	r3, [pc, #76]	; (800b774 <vTaskDelay+0x60>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00a      	beq.n	800b744 <vTaskDelay+0x30>
	__asm volatile
 800b72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	60bb      	str	r3, [r7, #8]
}
 800b740:	bf00      	nop
 800b742:	e7fe      	b.n	800b742 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b744:	f000 f880 	bl	800b848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b748:	2100      	movs	r1, #0
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 fe02 	bl	800c354 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b750:	f000 f888 	bl	800b864 <xTaskResumeAll>
 800b754:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d107      	bne.n	800b76c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b75c:	4b06      	ldr	r3, [pc, #24]	; (800b778 <vTaskDelay+0x64>)
 800b75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b76c:	bf00      	nop
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	20000d6c 	.word	0x20000d6c
 800b778:	e000ed04 	.word	0xe000ed04

0800b77c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b08a      	sub	sp, #40	; 0x28
 800b780:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b782:	2300      	movs	r3, #0
 800b784:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b786:	2300      	movs	r3, #0
 800b788:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b78a:	463a      	mov	r2, r7
 800b78c:	1d39      	adds	r1, r7, #4
 800b78e:	f107 0308 	add.w	r3, r7, #8
 800b792:	4618      	mov	r0, r3
 800b794:	f7fe ffa4 	bl	800a6e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b798:	6839      	ldr	r1, [r7, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	9202      	str	r2, [sp, #8]
 800b7a0:	9301      	str	r3, [sp, #4]
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	460a      	mov	r2, r1
 800b7aa:	4921      	ldr	r1, [pc, #132]	; (800b830 <vTaskStartScheduler+0xb4>)
 800b7ac:	4821      	ldr	r0, [pc, #132]	; (800b834 <vTaskStartScheduler+0xb8>)
 800b7ae:	f7ff fd9b 	bl	800b2e8 <xTaskCreateStatic>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	4a20      	ldr	r2, [pc, #128]	; (800b838 <vTaskStartScheduler+0xbc>)
 800b7b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b7b8:	4b1f      	ldr	r3, [pc, #124]	; (800b838 <vTaskStartScheduler+0xbc>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d002      	beq.n	800b7c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	617b      	str	r3, [r7, #20]
 800b7c4:	e001      	b.n	800b7ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d102      	bne.n	800b7d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b7d0:	f000 fe14 	bl	800c3fc <xTimerCreateTimerTask>
 800b7d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d116      	bne.n	800b80a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e0:	f383 8811 	msr	BASEPRI, r3
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	613b      	str	r3, [r7, #16]
}
 800b7ee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b7f0:	4b12      	ldr	r3, [pc, #72]	; (800b83c <vTaskStartScheduler+0xc0>)
 800b7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b7f8:	4b11      	ldr	r3, [pc, #68]	; (800b840 <vTaskStartScheduler+0xc4>)
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b7fe:	4b11      	ldr	r3, [pc, #68]	; (800b844 <vTaskStartScheduler+0xc8>)
 800b800:	2200      	movs	r2, #0
 800b802:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b804:	f001 f988 	bl	800cb18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b808:	e00e      	b.n	800b828 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b810:	d10a      	bne.n	800b828 <vTaskStartScheduler+0xac>
	__asm volatile
 800b812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b816:	f383 8811 	msr	BASEPRI, r3
 800b81a:	f3bf 8f6f 	isb	sy
 800b81e:	f3bf 8f4f 	dsb	sy
 800b822:	60fb      	str	r3, [r7, #12]
}
 800b824:	bf00      	nop
 800b826:	e7fe      	b.n	800b826 <vTaskStartScheduler+0xaa>
}
 800b828:	bf00      	nop
 800b82a:	3718      	adds	r7, #24
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	0800ddec 	.word	0x0800ddec
 800b834:	0800be61 	.word	0x0800be61
 800b838:	20000d68 	.word	0x20000d68
 800b83c:	20000d64 	.word	0x20000d64
 800b840:	20000d50 	.word	0x20000d50
 800b844:	20000d48 	.word	0x20000d48

0800b848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b848:	b480      	push	{r7}
 800b84a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b84c:	4b04      	ldr	r3, [pc, #16]	; (800b860 <vTaskSuspendAll+0x18>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	3301      	adds	r3, #1
 800b852:	4a03      	ldr	r2, [pc, #12]	; (800b860 <vTaskSuspendAll+0x18>)
 800b854:	6013      	str	r3, [r2, #0]
}
 800b856:	bf00      	nop
 800b858:	46bd      	mov	sp, r7
 800b85a:	bc80      	pop	{r7}
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	20000d6c 	.word	0x20000d6c

0800b864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b86a:	2300      	movs	r3, #0
 800b86c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b86e:	2300      	movs	r3, #0
 800b870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b872:	4b42      	ldr	r3, [pc, #264]	; (800b97c <xTaskResumeAll+0x118>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d10a      	bne.n	800b890 <xTaskResumeAll+0x2c>
	__asm volatile
 800b87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87e:	f383 8811 	msr	BASEPRI, r3
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	603b      	str	r3, [r7, #0]
}
 800b88c:	bf00      	nop
 800b88e:	e7fe      	b.n	800b88e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b890:	f001 f9b4 	bl	800cbfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b894:	4b39      	ldr	r3, [pc, #228]	; (800b97c <xTaskResumeAll+0x118>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	3b01      	subs	r3, #1
 800b89a:	4a38      	ldr	r2, [pc, #224]	; (800b97c <xTaskResumeAll+0x118>)
 800b89c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b89e:	4b37      	ldr	r3, [pc, #220]	; (800b97c <xTaskResumeAll+0x118>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d162      	bne.n	800b96c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b8a6:	4b36      	ldr	r3, [pc, #216]	; (800b980 <xTaskResumeAll+0x11c>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d05e      	beq.n	800b96c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8ae:	e02f      	b.n	800b910 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b8b0:	4b34      	ldr	r3, [pc, #208]	; (800b984 <xTaskResumeAll+0x120>)
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	3318      	adds	r3, #24
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7fe ffc7 	bl	800a850 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fe ffc2 	bl	800a850 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d0:	4b2d      	ldr	r3, [pc, #180]	; (800b988 <xTaskResumeAll+0x124>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d903      	bls.n	800b8e0 <xTaskResumeAll+0x7c>
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8dc:	4a2a      	ldr	r2, [pc, #168]	; (800b988 <xTaskResumeAll+0x124>)
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4413      	add	r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	4a27      	ldr	r2, [pc, #156]	; (800b98c <xTaskResumeAll+0x128>)
 800b8ee:	441a      	add	r2, r3
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4610      	mov	r0, r2
 800b8f8:	f7fe ff4f 	bl	800a79a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b900:	4b23      	ldr	r3, [pc, #140]	; (800b990 <xTaskResumeAll+0x12c>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b906:	429a      	cmp	r2, r3
 800b908:	d302      	bcc.n	800b910 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b90a:	4b22      	ldr	r3, [pc, #136]	; (800b994 <xTaskResumeAll+0x130>)
 800b90c:	2201      	movs	r2, #1
 800b90e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b910:	4b1c      	ldr	r3, [pc, #112]	; (800b984 <xTaskResumeAll+0x120>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1cb      	bne.n	800b8b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d001      	beq.n	800b922 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b91e:	f000 fb8d 	bl	800c03c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b922:	4b1d      	ldr	r3, [pc, #116]	; (800b998 <xTaskResumeAll+0x134>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d010      	beq.n	800b950 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b92e:	f000 f845 	bl	800b9bc <xTaskIncrementTick>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b938:	4b16      	ldr	r3, [pc, #88]	; (800b994 <xTaskResumeAll+0x130>)
 800b93a:	2201      	movs	r2, #1
 800b93c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	3b01      	subs	r3, #1
 800b942:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1f1      	bne.n	800b92e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b94a:	4b13      	ldr	r3, [pc, #76]	; (800b998 <xTaskResumeAll+0x134>)
 800b94c:	2200      	movs	r2, #0
 800b94e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b950:	4b10      	ldr	r3, [pc, #64]	; (800b994 <xTaskResumeAll+0x130>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d009      	beq.n	800b96c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b958:	2301      	movs	r3, #1
 800b95a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b95c:	4b0f      	ldr	r3, [pc, #60]	; (800b99c <xTaskResumeAll+0x138>)
 800b95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	f3bf 8f4f 	dsb	sy
 800b968:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b96c:	f001 f976 	bl	800cc5c <vPortExitCritical>

	return xAlreadyYielded;
 800b970:	68bb      	ldr	r3, [r7, #8]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	20000d6c 	.word	0x20000d6c
 800b980:	20000d44 	.word	0x20000d44
 800b984:	20000d04 	.word	0x20000d04
 800b988:	20000d4c 	.word	0x20000d4c
 800b98c:	20000874 	.word	0x20000874
 800b990:	20000870 	.word	0x20000870
 800b994:	20000d58 	.word	0x20000d58
 800b998:	20000d54 	.word	0x20000d54
 800b99c:	e000ed04 	.word	0xe000ed04

0800b9a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b9a6:	4b04      	ldr	r3, [pc, #16]	; (800b9b8 <xTaskGetTickCount+0x18>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b9ac:	687b      	ldr	r3, [r7, #4]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	370c      	adds	r7, #12
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bc80      	pop	{r7}
 800b9b6:	4770      	bx	lr
 800b9b8:	20000d48 	.word	0x20000d48

0800b9bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9c6:	4b51      	ldr	r3, [pc, #324]	; (800bb0c <xTaskIncrementTick+0x150>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f040 808e 	bne.w	800baec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9d0:	4b4f      	ldr	r3, [pc, #316]	; (800bb10 <xTaskIncrementTick+0x154>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9d8:	4a4d      	ldr	r2, [pc, #308]	; (800bb10 <xTaskIncrementTick+0x154>)
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d120      	bne.n	800ba26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b9e4:	4b4b      	ldr	r3, [pc, #300]	; (800bb14 <xTaskIncrementTick+0x158>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00a      	beq.n	800ba04 <xTaskIncrementTick+0x48>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	603b      	str	r3, [r7, #0]
}
 800ba00:	bf00      	nop
 800ba02:	e7fe      	b.n	800ba02 <xTaskIncrementTick+0x46>
 800ba04:	4b43      	ldr	r3, [pc, #268]	; (800bb14 <xTaskIncrementTick+0x158>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	60fb      	str	r3, [r7, #12]
 800ba0a:	4b43      	ldr	r3, [pc, #268]	; (800bb18 <xTaskIncrementTick+0x15c>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a41      	ldr	r2, [pc, #260]	; (800bb14 <xTaskIncrementTick+0x158>)
 800ba10:	6013      	str	r3, [r2, #0]
 800ba12:	4a41      	ldr	r2, [pc, #260]	; (800bb18 <xTaskIncrementTick+0x15c>)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6013      	str	r3, [r2, #0]
 800ba18:	4b40      	ldr	r3, [pc, #256]	; (800bb1c <xTaskIncrementTick+0x160>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	4a3f      	ldr	r2, [pc, #252]	; (800bb1c <xTaskIncrementTick+0x160>)
 800ba20:	6013      	str	r3, [r2, #0]
 800ba22:	f000 fb0b 	bl	800c03c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba26:	4b3e      	ldr	r3, [pc, #248]	; (800bb20 <xTaskIncrementTick+0x164>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	693a      	ldr	r2, [r7, #16]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d34e      	bcc.n	800bace <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba30:	4b38      	ldr	r3, [pc, #224]	; (800bb14 <xTaskIncrementTick+0x158>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d101      	bne.n	800ba3e <xTaskIncrementTick+0x82>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e000      	b.n	800ba40 <xTaskIncrementTick+0x84>
 800ba3e:	2300      	movs	r3, #0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d004      	beq.n	800ba4e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba44:	4b36      	ldr	r3, [pc, #216]	; (800bb20 <xTaskIncrementTick+0x164>)
 800ba46:	f04f 32ff 	mov.w	r2, #4294967295
 800ba4a:	601a      	str	r2, [r3, #0]
					break;
 800ba4c:	e03f      	b.n	800bace <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ba4e:	4b31      	ldr	r3, [pc, #196]	; (800bb14 <xTaskIncrementTick+0x158>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba5e:	693a      	ldr	r2, [r7, #16]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d203      	bcs.n	800ba6e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba66:	4a2e      	ldr	r2, [pc, #184]	; (800bb20 <xTaskIncrementTick+0x164>)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6013      	str	r3, [r2, #0]
						break;
 800ba6c:	e02f      	b.n	800bace <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	3304      	adds	r3, #4
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fe feec 	bl	800a850 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d004      	beq.n	800ba8a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	3318      	adds	r3, #24
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fe fee3 	bl	800a850 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8e:	4b25      	ldr	r3, [pc, #148]	; (800bb24 <xTaskIncrementTick+0x168>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d903      	bls.n	800ba9e <xTaskIncrementTick+0xe2>
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9a:	4a22      	ldr	r2, [pc, #136]	; (800bb24 <xTaskIncrementTick+0x168>)
 800ba9c:	6013      	str	r3, [r2, #0]
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa2:	4613      	mov	r3, r2
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	4413      	add	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4a1f      	ldr	r2, [pc, #124]	; (800bb28 <xTaskIncrementTick+0x16c>)
 800baac:	441a      	add	r2, r3
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	3304      	adds	r3, #4
 800bab2:	4619      	mov	r1, r3
 800bab4:	4610      	mov	r0, r2
 800bab6:	f7fe fe70 	bl	800a79a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800babe:	4b1b      	ldr	r3, [pc, #108]	; (800bb2c <xTaskIncrementTick+0x170>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d3b3      	bcc.n	800ba30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bac8:	2301      	movs	r3, #1
 800baca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bacc:	e7b0      	b.n	800ba30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bace:	4b17      	ldr	r3, [pc, #92]	; (800bb2c <xTaskIncrementTick+0x170>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad4:	4914      	ldr	r1, [pc, #80]	; (800bb28 <xTaskIncrementTick+0x16c>)
 800bad6:	4613      	mov	r3, r2
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	4413      	add	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	440b      	add	r3, r1
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d907      	bls.n	800baf6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bae6:	2301      	movs	r3, #1
 800bae8:	617b      	str	r3, [r7, #20]
 800baea:	e004      	b.n	800baf6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800baec:	4b10      	ldr	r3, [pc, #64]	; (800bb30 <xTaskIncrementTick+0x174>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3301      	adds	r3, #1
 800baf2:	4a0f      	ldr	r2, [pc, #60]	; (800bb30 <xTaskIncrementTick+0x174>)
 800baf4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800baf6:	4b0f      	ldr	r3, [pc, #60]	; (800bb34 <xTaskIncrementTick+0x178>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d001      	beq.n	800bb02 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800bafe:	2301      	movs	r3, #1
 800bb00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bb02:	697b      	ldr	r3, [r7, #20]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3718      	adds	r7, #24
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	20000d6c 	.word	0x20000d6c
 800bb10:	20000d48 	.word	0x20000d48
 800bb14:	20000cfc 	.word	0x20000cfc
 800bb18:	20000d00 	.word	0x20000d00
 800bb1c:	20000d5c 	.word	0x20000d5c
 800bb20:	20000d64 	.word	0x20000d64
 800bb24:	20000d4c 	.word	0x20000d4c
 800bb28:	20000874 	.word	0x20000874
 800bb2c:	20000870 	.word	0x20000870
 800bb30:	20000d54 	.word	0x20000d54
 800bb34:	20000d58 	.word	0x20000d58

0800bb38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb3e:	4b27      	ldr	r3, [pc, #156]	; (800bbdc <vTaskSwitchContext+0xa4>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d003      	beq.n	800bb4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb46:	4b26      	ldr	r3, [pc, #152]	; (800bbe0 <vTaskSwitchContext+0xa8>)
 800bb48:	2201      	movs	r2, #1
 800bb4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb4c:	e041      	b.n	800bbd2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bb4e:	4b24      	ldr	r3, [pc, #144]	; (800bbe0 <vTaskSwitchContext+0xa8>)
 800bb50:	2200      	movs	r2, #0
 800bb52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800bb54:	4b23      	ldr	r3, [pc, #140]	; (800bbe4 <vTaskSwitchContext+0xac>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	60fb      	str	r3, [r7, #12]
 800bb5a:	e010      	b.n	800bb7e <vTaskSwitchContext+0x46>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d10a      	bne.n	800bb78 <vTaskSwitchContext+0x40>
	__asm volatile
 800bb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb66:	f383 8811 	msr	BASEPRI, r3
 800bb6a:	f3bf 8f6f 	isb	sy
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	607b      	str	r3, [r7, #4]
}
 800bb74:	bf00      	nop
 800bb76:	e7fe      	b.n	800bb76 <vTaskSwitchContext+0x3e>
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	60fb      	str	r3, [r7, #12]
 800bb7e:	491a      	ldr	r1, [pc, #104]	; (800bbe8 <vTaskSwitchContext+0xb0>)
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	4613      	mov	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4413      	add	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	440b      	add	r3, r1
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d0e4      	beq.n	800bb5c <vTaskSwitchContext+0x24>
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	4613      	mov	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4413      	add	r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	4a12      	ldr	r2, [pc, #72]	; (800bbe8 <vTaskSwitchContext+0xb0>)
 800bb9e:	4413      	add	r3, r2
 800bba0:	60bb      	str	r3, [r7, #8]
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	685a      	ldr	r2, [r3, #4]
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	605a      	str	r2, [r3, #4]
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	685a      	ldr	r2, [r3, #4]
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	3308      	adds	r3, #8
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d104      	bne.n	800bbc2 <vTaskSwitchContext+0x8a>
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	685a      	ldr	r2, [r3, #4]
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	605a      	str	r2, [r3, #4]
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	4a08      	ldr	r2, [pc, #32]	; (800bbec <vTaskSwitchContext+0xb4>)
 800bbca:	6013      	str	r3, [r2, #0]
 800bbcc:	4a05      	ldr	r2, [pc, #20]	; (800bbe4 <vTaskSwitchContext+0xac>)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6013      	str	r3, [r2, #0]
}
 800bbd2:	bf00      	nop
 800bbd4:	3714      	adds	r7, #20
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bc80      	pop	{r7}
 800bbda:	4770      	bx	lr
 800bbdc:	20000d6c 	.word	0x20000d6c
 800bbe0:	20000d58 	.word	0x20000d58
 800bbe4:	20000d4c 	.word	0x20000d4c
 800bbe8:	20000874 	.word	0x20000874
 800bbec:	20000870 	.word	0x20000870

0800bbf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d10a      	bne.n	800bc16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc04:	f383 8811 	msr	BASEPRI, r3
 800bc08:	f3bf 8f6f 	isb	sy
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	60fb      	str	r3, [r7, #12]
}
 800bc12:	bf00      	nop
 800bc14:	e7fe      	b.n	800bc14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc16:	4b07      	ldr	r3, [pc, #28]	; (800bc34 <vTaskPlaceOnEventList+0x44>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3318      	adds	r3, #24
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f7fe fdde 	bl	800a7e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc24:	2101      	movs	r1, #1
 800bc26:	6838      	ldr	r0, [r7, #0]
 800bc28:	f000 fb94 	bl	800c354 <prvAddCurrentTaskToDelayedList>
}
 800bc2c:	bf00      	nop
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	20000870 	.word	0x20000870

0800bc38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b086      	sub	sp, #24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10a      	bne.n	800bc60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	617b      	str	r3, [r7, #20]
}
 800bc5c:	bf00      	nop
 800bc5e:	e7fe      	b.n	800bc5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc60:	4b0a      	ldr	r3, [pc, #40]	; (800bc8c <vTaskPlaceOnEventListRestricted+0x54>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	3318      	adds	r3, #24
 800bc66:	4619      	mov	r1, r3
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f7fe fd96 	bl	800a79a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d002      	beq.n	800bc7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bc74:	f04f 33ff 	mov.w	r3, #4294967295
 800bc78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bc7a:	6879      	ldr	r1, [r7, #4]
 800bc7c:	68b8      	ldr	r0, [r7, #8]
 800bc7e:	f000 fb69 	bl	800c354 <prvAddCurrentTaskToDelayedList>
	}
 800bc82:	bf00      	nop
 800bc84:	3718      	adds	r7, #24
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	20000870 	.word	0x20000870

0800bc90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10a      	bne.n	800bcbc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	60fb      	str	r3, [r7, #12]
}
 800bcb8:	bf00      	nop
 800bcba:	e7fe      	b.n	800bcba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	3318      	adds	r3, #24
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7fe fdc5 	bl	800a850 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcc6:	4b1e      	ldr	r3, [pc, #120]	; (800bd40 <xTaskRemoveFromEventList+0xb0>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d11d      	bne.n	800bd0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fe fdbc 	bl	800a850 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcdc:	4b19      	ldr	r3, [pc, #100]	; (800bd44 <xTaskRemoveFromEventList+0xb4>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d903      	bls.n	800bcec <xTaskRemoveFromEventList+0x5c>
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce8:	4a16      	ldr	r2, [pc, #88]	; (800bd44 <xTaskRemoveFromEventList+0xb4>)
 800bcea:	6013      	str	r3, [r2, #0]
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	4413      	add	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	4a13      	ldr	r2, [pc, #76]	; (800bd48 <xTaskRemoveFromEventList+0xb8>)
 800bcfa:	441a      	add	r2, r3
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	3304      	adds	r3, #4
 800bd00:	4619      	mov	r1, r3
 800bd02:	4610      	mov	r0, r2
 800bd04:	f7fe fd49 	bl	800a79a <vListInsertEnd>
 800bd08:	e005      	b.n	800bd16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	3318      	adds	r3, #24
 800bd0e:	4619      	mov	r1, r3
 800bd10:	480e      	ldr	r0, [pc, #56]	; (800bd4c <xTaskRemoveFromEventList+0xbc>)
 800bd12:	f7fe fd42 	bl	800a79a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1a:	4b0d      	ldr	r3, [pc, #52]	; (800bd50 <xTaskRemoveFromEventList+0xc0>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d905      	bls.n	800bd30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd24:	2301      	movs	r3, #1
 800bd26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd28:	4b0a      	ldr	r3, [pc, #40]	; (800bd54 <xTaskRemoveFromEventList+0xc4>)
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	601a      	str	r2, [r3, #0]
 800bd2e:	e001      	b.n	800bd34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bd30:	2300      	movs	r3, #0
 800bd32:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bd34:	697b      	ldr	r3, [r7, #20]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3718      	adds	r7, #24
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	20000d6c 	.word	0x20000d6c
 800bd44:	20000d4c 	.word	0x20000d4c
 800bd48:	20000874 	.word	0x20000874
 800bd4c:	20000d04 	.word	0x20000d04
 800bd50:	20000870 	.word	0x20000870
 800bd54:	20000d58 	.word	0x20000d58

0800bd58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd60:	4b06      	ldr	r3, [pc, #24]	; (800bd7c <vTaskInternalSetTimeOutState+0x24>)
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd68:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <vTaskInternalSetTimeOutState+0x28>)
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	605a      	str	r2, [r3, #4]
}
 800bd70:	bf00      	nop
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bc80      	pop	{r7}
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	20000d5c 	.word	0x20000d5c
 800bd80:	20000d48 	.word	0x20000d48

0800bd84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b088      	sub	sp, #32
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10a      	bne.n	800bdaa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	613b      	str	r3, [r7, #16]
}
 800bda6:	bf00      	nop
 800bda8:	e7fe      	b.n	800bda8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10a      	bne.n	800bdc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	60fb      	str	r3, [r7, #12]
}
 800bdc2:	bf00      	nop
 800bdc4:	e7fe      	b.n	800bdc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bdc6:	f000 ff19 	bl	800cbfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bdca:	4b1d      	ldr	r3, [pc, #116]	; (800be40 <xTaskCheckForTimeOut+0xbc>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	69ba      	ldr	r2, [r7, #24]
 800bdd6:	1ad3      	subs	r3, r2, r3
 800bdd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde2:	d102      	bne.n	800bdea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bde4:	2300      	movs	r3, #0
 800bde6:	61fb      	str	r3, [r7, #28]
 800bde8:	e023      	b.n	800be32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	4b15      	ldr	r3, [pc, #84]	; (800be44 <xTaskCheckForTimeOut+0xc0>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d007      	beq.n	800be06 <xTaskCheckForTimeOut+0x82>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	69ba      	ldr	r2, [r7, #24]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d302      	bcc.n	800be06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be00:	2301      	movs	r3, #1
 800be02:	61fb      	str	r3, [r7, #28]
 800be04:	e015      	b.n	800be32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	697a      	ldr	r2, [r7, #20]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d20b      	bcs.n	800be28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	1ad2      	subs	r2, r2, r3
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f7ff ff9b 	bl	800bd58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be22:	2300      	movs	r3, #0
 800be24:	61fb      	str	r3, [r7, #28]
 800be26:	e004      	b.n	800be32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	2200      	movs	r2, #0
 800be2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be2e:	2301      	movs	r3, #1
 800be30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be32:	f000 ff13 	bl	800cc5c <vPortExitCritical>

	return xReturn;
 800be36:	69fb      	ldr	r3, [r7, #28]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3720      	adds	r7, #32
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	20000d48 	.word	0x20000d48
 800be44:	20000d5c 	.word	0x20000d5c

0800be48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be48:	b480      	push	{r7}
 800be4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be4c:	4b03      	ldr	r3, [pc, #12]	; (800be5c <vTaskMissedYield+0x14>)
 800be4e:	2201      	movs	r2, #1
 800be50:	601a      	str	r2, [r3, #0]
}
 800be52:	bf00      	nop
 800be54:	46bd      	mov	sp, r7
 800be56:	bc80      	pop	{r7}
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop
 800be5c:	20000d58 	.word	0x20000d58

0800be60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be68:	f000 f852 	bl	800bf10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be6c:	4b06      	ldr	r3, [pc, #24]	; (800be88 <prvIdleTask+0x28>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b01      	cmp	r3, #1
 800be72:	d9f9      	bls.n	800be68 <prvIdleTask+0x8>
			{
				taskYIELD();
 800be74:	4b05      	ldr	r3, [pc, #20]	; (800be8c <prvIdleTask+0x2c>)
 800be76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be7a:	601a      	str	r2, [r3, #0]
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800be84:	e7f0      	b.n	800be68 <prvIdleTask+0x8>
 800be86:	bf00      	nop
 800be88:	20000874 	.word	0x20000874
 800be8c:	e000ed04 	.word	0xe000ed04

0800be90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be96:	2300      	movs	r3, #0
 800be98:	607b      	str	r3, [r7, #4]
 800be9a:	e00c      	b.n	800beb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	4613      	mov	r3, r2
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	4413      	add	r3, r2
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	4a12      	ldr	r2, [pc, #72]	; (800bef0 <prvInitialiseTaskLists+0x60>)
 800bea8:	4413      	add	r3, r2
 800beaa:	4618      	mov	r0, r3
 800beac:	f7fe fc4a 	bl	800a744 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	3301      	adds	r3, #1
 800beb4:	607b      	str	r3, [r7, #4]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2b37      	cmp	r3, #55	; 0x37
 800beba:	d9ef      	bls.n	800be9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bebc:	480d      	ldr	r0, [pc, #52]	; (800bef4 <prvInitialiseTaskLists+0x64>)
 800bebe:	f7fe fc41 	bl	800a744 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bec2:	480d      	ldr	r0, [pc, #52]	; (800bef8 <prvInitialiseTaskLists+0x68>)
 800bec4:	f7fe fc3e 	bl	800a744 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bec8:	480c      	ldr	r0, [pc, #48]	; (800befc <prvInitialiseTaskLists+0x6c>)
 800beca:	f7fe fc3b 	bl	800a744 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bece:	480c      	ldr	r0, [pc, #48]	; (800bf00 <prvInitialiseTaskLists+0x70>)
 800bed0:	f7fe fc38 	bl	800a744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bed4:	480b      	ldr	r0, [pc, #44]	; (800bf04 <prvInitialiseTaskLists+0x74>)
 800bed6:	f7fe fc35 	bl	800a744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800beda:	4b0b      	ldr	r3, [pc, #44]	; (800bf08 <prvInitialiseTaskLists+0x78>)
 800bedc:	4a05      	ldr	r2, [pc, #20]	; (800bef4 <prvInitialiseTaskLists+0x64>)
 800bede:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bee0:	4b0a      	ldr	r3, [pc, #40]	; (800bf0c <prvInitialiseTaskLists+0x7c>)
 800bee2:	4a05      	ldr	r2, [pc, #20]	; (800bef8 <prvInitialiseTaskLists+0x68>)
 800bee4:	601a      	str	r2, [r3, #0]
}
 800bee6:	bf00      	nop
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	20000874 	.word	0x20000874
 800bef4:	20000cd4 	.word	0x20000cd4
 800bef8:	20000ce8 	.word	0x20000ce8
 800befc:	20000d04 	.word	0x20000d04
 800bf00:	20000d18 	.word	0x20000d18
 800bf04:	20000d30 	.word	0x20000d30
 800bf08:	20000cfc 	.word	0x20000cfc
 800bf0c:	20000d00 	.word	0x20000d00

0800bf10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf16:	e019      	b.n	800bf4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf18:	f000 fe70 	bl	800cbfc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bf1c:	4b10      	ldr	r3, [pc, #64]	; (800bf60 <prvCheckTasksWaitingTermination+0x50>)
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	3304      	adds	r3, #4
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7fe fc91 	bl	800a850 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf2e:	4b0d      	ldr	r3, [pc, #52]	; (800bf64 <prvCheckTasksWaitingTermination+0x54>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	3b01      	subs	r3, #1
 800bf34:	4a0b      	ldr	r2, [pc, #44]	; (800bf64 <prvCheckTasksWaitingTermination+0x54>)
 800bf36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf38:	4b0b      	ldr	r3, [pc, #44]	; (800bf68 <prvCheckTasksWaitingTermination+0x58>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	4a0a      	ldr	r2, [pc, #40]	; (800bf68 <prvCheckTasksWaitingTermination+0x58>)
 800bf40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf42:	f000 fe8b 	bl	800cc5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f848 	bl	800bfdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf4c:	4b06      	ldr	r3, [pc, #24]	; (800bf68 <prvCheckTasksWaitingTermination+0x58>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d1e1      	bne.n	800bf18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf54:	bf00      	nop
 800bf56:	bf00      	nop
 800bf58:	3708      	adds	r7, #8
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	20000d18 	.word	0x20000d18
 800bf64:	20000d44 	.word	0x20000d44
 800bf68:	20000d2c 	.word	0x20000d2c

0800bf6c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b085      	sub	sp, #20
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800bf74:	2300      	movs	r3, #0
 800bf76:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bf78:	e005      	b.n	800bf86 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	3301      	adds	r3, #1
 800bf84:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	2ba5      	cmp	r3, #165	; 0xa5
 800bf8c:	d0f5      	beq.n	800bf7a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	089b      	lsrs	r3, r3, #2
 800bf92:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	b29b      	uxth	r3, r3
	}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3714      	adds	r7, #20
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bc80      	pop	{r7}
 800bfa0:	4770      	bx	lr
	...

0800bfa4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d102      	bne.n	800bfb8 <uxTaskGetStackHighWaterMark+0x14>
 800bfb2:	4b09      	ldr	r3, [pc, #36]	; (800bfd8 <uxTaskGetStackHighWaterMark+0x34>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	e000      	b.n	800bfba <uxTaskGetStackHighWaterMark+0x16>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc0:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800bfc2:	6938      	ldr	r0, [r7, #16]
 800bfc4:	f7ff ffd2 	bl	800bf6c <prvTaskCheckFreeStackSpace>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
	}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3718      	adds	r7, #24
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	20000870 	.word	0x20000870

0800bfdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d108      	bne.n	800c000 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff2:	4618      	mov	r0, r3
 800bff4:	f000 ffc6 	bl	800cf84 <vPortFree>
				vPortFree( pxTCB );
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 ffc3 	bl	800cf84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bffe:	e018      	b.n	800c032 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c006:	2b01      	cmp	r3, #1
 800c008:	d103      	bne.n	800c012 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 ffba 	bl	800cf84 <vPortFree>
	}
 800c010:	e00f      	b.n	800c032 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c018:	2b02      	cmp	r3, #2
 800c01a:	d00a      	beq.n	800c032 <prvDeleteTCB+0x56>
	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	60fb      	str	r3, [r7, #12]
}
 800c02e:	bf00      	nop
 800c030:	e7fe      	b.n	800c030 <prvDeleteTCB+0x54>
	}
 800c032:	bf00      	nop
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
	...

0800c03c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c042:	4b0e      	ldr	r3, [pc, #56]	; (800c07c <prvResetNextTaskUnblockTime+0x40>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d101      	bne.n	800c050 <prvResetNextTaskUnblockTime+0x14>
 800c04c:	2301      	movs	r3, #1
 800c04e:	e000      	b.n	800c052 <prvResetNextTaskUnblockTime+0x16>
 800c050:	2300      	movs	r3, #0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d004      	beq.n	800c060 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c056:	4b0a      	ldr	r3, [pc, #40]	; (800c080 <prvResetNextTaskUnblockTime+0x44>)
 800c058:	f04f 32ff 	mov.w	r2, #4294967295
 800c05c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c05e:	e008      	b.n	800c072 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c060:	4b06      	ldr	r3, [pc, #24]	; (800c07c <prvResetNextTaskUnblockTime+0x40>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	4a04      	ldr	r2, [pc, #16]	; (800c080 <prvResetNextTaskUnblockTime+0x44>)
 800c070:	6013      	str	r3, [r2, #0]
}
 800c072:	bf00      	nop
 800c074:	370c      	adds	r7, #12
 800c076:	46bd      	mov	sp, r7
 800c078:	bc80      	pop	{r7}
 800c07a:	4770      	bx	lr
 800c07c:	20000cfc 	.word	0x20000cfc
 800c080:	20000d64 	.word	0x20000d64

0800c084 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c08a:	4b0b      	ldr	r3, [pc, #44]	; (800c0b8 <xTaskGetSchedulerState+0x34>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d102      	bne.n	800c098 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c092:	2301      	movs	r3, #1
 800c094:	607b      	str	r3, [r7, #4]
 800c096:	e008      	b.n	800c0aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c098:	4b08      	ldr	r3, [pc, #32]	; (800c0bc <xTaskGetSchedulerState+0x38>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d102      	bne.n	800c0a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c0a0:	2302      	movs	r3, #2
 800c0a2:	607b      	str	r3, [r7, #4]
 800c0a4:	e001      	b.n	800c0aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c0aa:	687b      	ldr	r3, [r7, #4]
	}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bc80      	pop	{r7}
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop
 800c0b8:	20000d50 	.word	0x20000d50
 800c0bc:	20000d6c 	.word	0x20000d6c

0800c0c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b086      	sub	sp, #24
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d056      	beq.n	800c184 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c0d6:	4b2e      	ldr	r3, [pc, #184]	; (800c190 <xTaskPriorityDisinherit+0xd0>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	693a      	ldr	r2, [r7, #16]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d00a      	beq.n	800c0f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	60fb      	str	r3, [r7, #12]
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d10a      	bne.n	800c114 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	60bb      	str	r3, [r7, #8]
}
 800c110:	bf00      	nop
 800c112:	e7fe      	b.n	800c112 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c118:	1e5a      	subs	r2, r3, #1
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c126:	429a      	cmp	r2, r3
 800c128:	d02c      	beq.n	800c184 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d128      	bne.n	800c184 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	3304      	adds	r3, #4
 800c136:	4618      	mov	r0, r3
 800c138:	f7fe fb8a 	bl	800a850 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c148:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c154:	4b0f      	ldr	r3, [pc, #60]	; (800c194 <xTaskPriorityDisinherit+0xd4>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d903      	bls.n	800c164 <xTaskPriorityDisinherit+0xa4>
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c160:	4a0c      	ldr	r2, [pc, #48]	; (800c194 <xTaskPriorityDisinherit+0xd4>)
 800c162:	6013      	str	r3, [r2, #0]
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c168:	4613      	mov	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4413      	add	r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	4a09      	ldr	r2, [pc, #36]	; (800c198 <xTaskPriorityDisinherit+0xd8>)
 800c172:	441a      	add	r2, r3
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	3304      	adds	r3, #4
 800c178:	4619      	mov	r1, r3
 800c17a:	4610      	mov	r0, r2
 800c17c:	f7fe fb0d 	bl	800a79a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c180:	2301      	movs	r3, #1
 800c182:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c184:	697b      	ldr	r3, [r7, #20]
	}
 800c186:	4618      	mov	r0, r3
 800c188:	3718      	adds	r7, #24
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	20000870 	.word	0x20000870
 800c194:	20000d4c 	.word	0x20000d4c
 800c198:	20000874 	.word	0x20000874

0800c19c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c1a6:	f000 fd29 	bl	800cbfc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c1aa:	4b1e      	ldr	r3, [pc, #120]	; (800c224 <ulTaskNotifyTake+0x88>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d113      	bne.n	800c1dc <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c1b4:	4b1b      	ldr	r3, [pc, #108]	; (800c224 <ulTaskNotifyTake+0x88>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d00b      	beq.n	800c1dc <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c1c4:	2101      	movs	r1, #1
 800c1c6:	6838      	ldr	r0, [r7, #0]
 800c1c8:	f000 f8c4 	bl	800c354 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c1cc:	4b16      	ldr	r3, [pc, #88]	; (800c228 <ulTaskNotifyTake+0x8c>)
 800c1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	f3bf 8f4f 	dsb	sy
 800c1d8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c1dc:	f000 fd3e 	bl	800cc5c <vPortExitCritical>

		taskENTER_CRITICAL();
 800c1e0:	f000 fd0c 	bl	800cbfc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c1e4:	4b0f      	ldr	r3, [pc, #60]	; (800c224 <ulTaskNotifyTake+0x88>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ea:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00c      	beq.n	800c20c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d004      	beq.n	800c202 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c1f8:	4b0a      	ldr	r3, [pc, #40]	; (800c224 <ulTaskNotifyTake+0x88>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	655a      	str	r2, [r3, #84]	; 0x54
 800c200:	e004      	b.n	800c20c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c202:	4b08      	ldr	r3, [pc, #32]	; (800c224 <ulTaskNotifyTake+0x88>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	3a01      	subs	r2, #1
 800c20a:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c20c:	4b05      	ldr	r3, [pc, #20]	; (800c224 <ulTaskNotifyTake+0x88>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c216:	f000 fd21 	bl	800cc5c <vPortExitCritical>

		return ulReturn;
 800c21a:	68fb      	ldr	r3, [r7, #12]
	}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	20000870 	.word	0x20000870
 800c228:	e000ed04 	.word	0xe000ed04

0800c22c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b08a      	sub	sp, #40	; 0x28
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10a      	bne.n	800c252 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	61bb      	str	r3, [r7, #24]
}
 800c24e:	bf00      	nop
 800c250:	e7fe      	b.n	800c250 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c252:	f000 fd95 	bl	800cd80 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800c25a:	f3ef 8211 	mrs	r2, BASEPRI
 800c25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	617a      	str	r2, [r7, #20]
 800c270:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c272:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c274:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c278:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c27c:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c280:	2202      	movs	r2, #2
 800c282:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c28a:	1c5a      	adds	r2, r3, #1
 800c28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28e:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c290:	7ffb      	ldrb	r3, [r7, #31]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d147      	bne.n	800c326 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00a      	beq.n	800c2b4 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800c29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	60fb      	str	r3, [r7, #12]
}
 800c2b0:	bf00      	nop
 800c2b2:	e7fe      	b.n	800c2b2 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2b4:	4b21      	ldr	r3, [pc, #132]	; (800c33c <vTaskNotifyGiveFromISR+0x110>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d11d      	bne.n	800c2f8 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2be:	3304      	adds	r3, #4
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7fe fac5 	bl	800a850 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ca:	4b1d      	ldr	r3, [pc, #116]	; (800c340 <vTaskNotifyGiveFromISR+0x114>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d903      	bls.n	800c2da <vTaskNotifyGiveFromISR+0xae>
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d6:	4a1a      	ldr	r2, [pc, #104]	; (800c340 <vTaskNotifyGiveFromISR+0x114>)
 800c2d8:	6013      	str	r3, [r2, #0]
 800c2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2de:	4613      	mov	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4413      	add	r3, r2
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	4a17      	ldr	r2, [pc, #92]	; (800c344 <vTaskNotifyGiveFromISR+0x118>)
 800c2e8:	441a      	add	r2, r3
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	f7fe fa52 	bl	800a79a <vListInsertEnd>
 800c2f6:	e005      	b.n	800c304 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fa:	3318      	adds	r3, #24
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	4812      	ldr	r0, [pc, #72]	; (800c348 <vTaskNotifyGiveFromISR+0x11c>)
 800c300:	f7fe fa4b 	bl	800a79a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c308:	4b10      	ldr	r3, [pc, #64]	; (800c34c <vTaskNotifyGiveFromISR+0x120>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30e:	429a      	cmp	r2, r3
 800c310:	d909      	bls.n	800c326 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d003      	beq.n	800c320 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	2201      	movs	r2, #1
 800c31c:	601a      	str	r2, [r3, #0]
 800c31e:	e002      	b.n	800c326 <vTaskNotifyGiveFromISR+0xfa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800c320:	4b0b      	ldr	r3, [pc, #44]	; (800c350 <vTaskNotifyGiveFromISR+0x124>)
 800c322:	2201      	movs	r2, #1
 800c324:	601a      	str	r2, [r3, #0]
 800c326:	6a3b      	ldr	r3, [r7, #32]
 800c328:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	f383 8811 	msr	BASEPRI, r3
}
 800c330:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c332:	bf00      	nop
 800c334:	3728      	adds	r7, #40	; 0x28
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	20000d6c 	.word	0x20000d6c
 800c340:	20000d4c 	.word	0x20000d4c
 800c344:	20000874 	.word	0x20000874
 800c348:	20000d04 	.word	0x20000d04
 800c34c:	20000870 	.word	0x20000870
 800c350:	20000d58 	.word	0x20000d58

0800c354 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c35e:	4b21      	ldr	r3, [pc, #132]	; (800c3e4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c364:	4b20      	ldr	r3, [pc, #128]	; (800c3e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	3304      	adds	r3, #4
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fe fa70 	bl	800a850 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c376:	d10a      	bne.n	800c38e <prvAddCurrentTaskToDelayedList+0x3a>
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d007      	beq.n	800c38e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c37e:	4b1a      	ldr	r3, [pc, #104]	; (800c3e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	3304      	adds	r3, #4
 800c384:	4619      	mov	r1, r3
 800c386:	4819      	ldr	r0, [pc, #100]	; (800c3ec <prvAddCurrentTaskToDelayedList+0x98>)
 800c388:	f7fe fa07 	bl	800a79a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c38c:	e026      	b.n	800c3dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4413      	add	r3, r2
 800c394:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c396:	4b14      	ldr	r3, [pc, #80]	; (800c3e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68ba      	ldr	r2, [r7, #8]
 800c39c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c39e:	68ba      	ldr	r2, [r7, #8]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d209      	bcs.n	800c3ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3a6:	4b12      	ldr	r3, [pc, #72]	; (800c3f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	4b0f      	ldr	r3, [pc, #60]	; (800c3e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	3304      	adds	r3, #4
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	4610      	mov	r0, r2
 800c3b4:	f7fe fa14 	bl	800a7e0 <vListInsert>
}
 800c3b8:	e010      	b.n	800c3dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3ba:	4b0e      	ldr	r3, [pc, #56]	; (800c3f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	4b0a      	ldr	r3, [pc, #40]	; (800c3e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	f7fe fa0a 	bl	800a7e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c3cc:	4b0a      	ldr	r3, [pc, #40]	; (800c3f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d202      	bcs.n	800c3dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c3d6:	4a08      	ldr	r2, [pc, #32]	; (800c3f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	6013      	str	r3, [r2, #0]
}
 800c3dc:	bf00      	nop
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	20000d48 	.word	0x20000d48
 800c3e8:	20000870 	.word	0x20000870
 800c3ec:	20000d30 	.word	0x20000d30
 800c3f0:	20000d00 	.word	0x20000d00
 800c3f4:	20000cfc 	.word	0x20000cfc
 800c3f8:	20000d64 	.word	0x20000d64

0800c3fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b08a      	sub	sp, #40	; 0x28
 800c400:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c402:	2300      	movs	r3, #0
 800c404:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c406:	f000 facb 	bl	800c9a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c40a:	4b1c      	ldr	r3, [pc, #112]	; (800c47c <xTimerCreateTimerTask+0x80>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d021      	beq.n	800c456 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c412:	2300      	movs	r3, #0
 800c414:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c416:	2300      	movs	r3, #0
 800c418:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c41a:	1d3a      	adds	r2, r7, #4
 800c41c:	f107 0108 	add.w	r1, r7, #8
 800c420:	f107 030c 	add.w	r3, r7, #12
 800c424:	4618      	mov	r0, r3
 800c426:	f7fe f973 	bl	800a710 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c42a:	6879      	ldr	r1, [r7, #4]
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	68fa      	ldr	r2, [r7, #12]
 800c430:	9202      	str	r2, [sp, #8]
 800c432:	9301      	str	r3, [sp, #4]
 800c434:	2302      	movs	r3, #2
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	2300      	movs	r3, #0
 800c43a:	460a      	mov	r2, r1
 800c43c:	4910      	ldr	r1, [pc, #64]	; (800c480 <xTimerCreateTimerTask+0x84>)
 800c43e:	4811      	ldr	r0, [pc, #68]	; (800c484 <xTimerCreateTimerTask+0x88>)
 800c440:	f7fe ff52 	bl	800b2e8 <xTaskCreateStatic>
 800c444:	4603      	mov	r3, r0
 800c446:	4a10      	ldr	r2, [pc, #64]	; (800c488 <xTimerCreateTimerTask+0x8c>)
 800c448:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c44a:	4b0f      	ldr	r3, [pc, #60]	; (800c488 <xTimerCreateTimerTask+0x8c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d001      	beq.n	800c456 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c452:	2301      	movs	r3, #1
 800c454:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10a      	bne.n	800c472 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	613b      	str	r3, [r7, #16]
}
 800c46e:	bf00      	nop
 800c470:	e7fe      	b.n	800c470 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c472:	697b      	ldr	r3, [r7, #20]
}
 800c474:	4618      	mov	r0, r3
 800c476:	3718      	adds	r7, #24
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	20000da0 	.word	0x20000da0
 800c480:	0800ddf4 	.word	0x0800ddf4
 800c484:	0800c5a9 	.word	0x0800c5a9
 800c488:	20000da4 	.word	0x20000da4

0800c48c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b08a      	sub	sp, #40	; 0x28
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c49a:	2300      	movs	r3, #0
 800c49c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10a      	bne.n	800c4ba <xTimerGenericCommand+0x2e>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	623b      	str	r3, [r7, #32]
}
 800c4b6:	bf00      	nop
 800c4b8:	e7fe      	b.n	800c4b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c4ba:	4b1a      	ldr	r3, [pc, #104]	; (800c524 <xTimerGenericCommand+0x98>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d02a      	beq.n	800c518 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	2b05      	cmp	r3, #5
 800c4d2:	dc18      	bgt.n	800c506 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c4d4:	f7ff fdd6 	bl	800c084 <xTaskGetSchedulerState>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d109      	bne.n	800c4f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c4de:	4b11      	ldr	r3, [pc, #68]	; (800c524 <xTimerGenericCommand+0x98>)
 800c4e0:	6818      	ldr	r0, [r3, #0]
 800c4e2:	f107 0110 	add.w	r1, r7, #16
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ea:	f7fe fb1b 	bl	800ab24 <xQueueGenericSend>
 800c4ee:	6278      	str	r0, [r7, #36]	; 0x24
 800c4f0:	e012      	b.n	800c518 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c4f2:	4b0c      	ldr	r3, [pc, #48]	; (800c524 <xTimerGenericCommand+0x98>)
 800c4f4:	6818      	ldr	r0, [r3, #0]
 800c4f6:	f107 0110 	add.w	r1, r7, #16
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f7fe fb11 	bl	800ab24 <xQueueGenericSend>
 800c502:	6278      	str	r0, [r7, #36]	; 0x24
 800c504:	e008      	b.n	800c518 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c506:	4b07      	ldr	r3, [pc, #28]	; (800c524 <xTimerGenericCommand+0x98>)
 800c508:	6818      	ldr	r0, [r3, #0]
 800c50a:	f107 0110 	add.w	r1, r7, #16
 800c50e:	2300      	movs	r3, #0
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	f7fe fc05 	bl	800ad20 <xQueueGenericSendFromISR>
 800c516:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3728      	adds	r7, #40	; 0x28
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	20000da0 	.word	0x20000da0

0800c528 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b088      	sub	sp, #32
 800c52c:	af02      	add	r7, sp, #8
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c532:	4b1c      	ldr	r3, [pc, #112]	; (800c5a4 <prvProcessExpiredTimer+0x7c>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	3304      	adds	r3, #4
 800c540:	4618      	mov	r0, r3
 800c542:	f7fe f985 	bl	800a850 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	69db      	ldr	r3, [r3, #28]
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d122      	bne.n	800c594 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	699a      	ldr	r2, [r3, #24]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	18d1      	adds	r1, r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	683a      	ldr	r2, [r7, #0]
 800c55a:	6978      	ldr	r0, [r7, #20]
 800c55c:	f000 f8c8 	bl	800c6f0 <prvInsertTimerInActiveList>
 800c560:	4603      	mov	r3, r0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d016      	beq.n	800c594 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c566:	2300      	movs	r3, #0
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	2300      	movs	r3, #0
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	2100      	movs	r1, #0
 800c570:	6978      	ldr	r0, [r7, #20]
 800c572:	f7ff ff8b 	bl	800c48c <xTimerGenericCommand>
 800c576:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10a      	bne.n	800c594 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	60fb      	str	r3, [r7, #12]
}
 800c590:	bf00      	nop
 800c592:	e7fe      	b.n	800c592 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c598:	6978      	ldr	r0, [r7, #20]
 800c59a:	4798      	blx	r3
}
 800c59c:	bf00      	nop
 800c59e:	3718      	adds	r7, #24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	20000d98 	.word	0x20000d98

0800c5a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5b0:	f107 0308 	add.w	r3, r7, #8
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f000 f857 	bl	800c668 <prvGetNextExpireTime>
 800c5ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	4619      	mov	r1, r3
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f000 f803 	bl	800c5cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c5c6:	f000 f8d5 	bl	800c774 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5ca:	e7f1      	b.n	800c5b0 <prvTimerTask+0x8>

0800c5cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c5d6:	f7ff f937 	bl	800b848 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5da:	f107 0308 	add.w	r3, r7, #8
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f000 f866 	bl	800c6b0 <prvSampleTimeNow>
 800c5e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d130      	bne.n	800c64e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d10a      	bne.n	800c608 <prvProcessTimerOrBlockTask+0x3c>
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d806      	bhi.n	800c608 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c5fa:	f7ff f933 	bl	800b864 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c5fe:	68f9      	ldr	r1, [r7, #12]
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f7ff ff91 	bl	800c528 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c606:	e024      	b.n	800c652 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d008      	beq.n	800c620 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c60e:	4b13      	ldr	r3, [pc, #76]	; (800c65c <prvProcessTimerOrBlockTask+0x90>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	bf0c      	ite	eq
 800c618:	2301      	moveq	r3, #1
 800c61a:	2300      	movne	r3, #0
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c620:	4b0f      	ldr	r3, [pc, #60]	; (800c660 <prvProcessTimerOrBlockTask+0x94>)
 800c622:	6818      	ldr	r0, [r3, #0]
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	1ad3      	subs	r3, r2, r3
 800c62a:	683a      	ldr	r2, [r7, #0]
 800c62c:	4619      	mov	r1, r3
 800c62e:	f7fe fe27 	bl	800b280 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c632:	f7ff f917 	bl	800b864 <xTaskResumeAll>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10a      	bne.n	800c652 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c63c:	4b09      	ldr	r3, [pc, #36]	; (800c664 <prvProcessTimerOrBlockTask+0x98>)
 800c63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	f3bf 8f4f 	dsb	sy
 800c648:	f3bf 8f6f 	isb	sy
}
 800c64c:	e001      	b.n	800c652 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c64e:	f7ff f909 	bl	800b864 <xTaskResumeAll>
}
 800c652:	bf00      	nop
 800c654:	3710      	adds	r7, #16
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	20000d9c 	.word	0x20000d9c
 800c660:	20000da0 	.word	0x20000da0
 800c664:	e000ed04 	.word	0xe000ed04

0800c668 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c670:	4b0e      	ldr	r3, [pc, #56]	; (800c6ac <prvGetNextExpireTime+0x44>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	bf0c      	ite	eq
 800c67a:	2301      	moveq	r3, #1
 800c67c:	2300      	movne	r3, #0
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	461a      	mov	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d105      	bne.n	800c69a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c68e:	4b07      	ldr	r3, [pc, #28]	; (800c6ac <prvGetNextExpireTime+0x44>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	60fb      	str	r3, [r7, #12]
 800c698:	e001      	b.n	800c69e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c69a:	2300      	movs	r3, #0
 800c69c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c69e:	68fb      	ldr	r3, [r7, #12]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3714      	adds	r7, #20
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bc80      	pop	{r7}
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	20000d98 	.word	0x20000d98

0800c6b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c6b8:	f7ff f972 	bl	800b9a0 <xTaskGetTickCount>
 800c6bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c6be:	4b0b      	ldr	r3, [pc, #44]	; (800c6ec <prvSampleTimeNow+0x3c>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d205      	bcs.n	800c6d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c6c8:	f000 f908 	bl	800c8dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	601a      	str	r2, [r3, #0]
 800c6d2:	e002      	b.n	800c6da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c6da:	4a04      	ldr	r2, [pc, #16]	; (800c6ec <prvSampleTimeNow+0x3c>)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	20000da8 	.word	0x20000da8

0800c6f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b086      	sub	sp, #24
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	607a      	str	r2, [r7, #4]
 800c6fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c6fe:	2300      	movs	r3, #0
 800c700:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	68ba      	ldr	r2, [r7, #8]
 800c706:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	68fa      	ldr	r2, [r7, #12]
 800c70c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c70e:	68ba      	ldr	r2, [r7, #8]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	429a      	cmp	r2, r3
 800c714:	d812      	bhi.n	800c73c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	1ad2      	subs	r2, r2, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	699b      	ldr	r3, [r3, #24]
 800c720:	429a      	cmp	r2, r3
 800c722:	d302      	bcc.n	800c72a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c724:	2301      	movs	r3, #1
 800c726:	617b      	str	r3, [r7, #20]
 800c728:	e01b      	b.n	800c762 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c72a:	4b10      	ldr	r3, [pc, #64]	; (800c76c <prvInsertTimerInActiveList+0x7c>)
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	3304      	adds	r3, #4
 800c732:	4619      	mov	r1, r3
 800c734:	4610      	mov	r0, r2
 800c736:	f7fe f853 	bl	800a7e0 <vListInsert>
 800c73a:	e012      	b.n	800c762 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	429a      	cmp	r2, r3
 800c742:	d206      	bcs.n	800c752 <prvInsertTimerInActiveList+0x62>
 800c744:	68ba      	ldr	r2, [r7, #8]
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d302      	bcc.n	800c752 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c74c:	2301      	movs	r3, #1
 800c74e:	617b      	str	r3, [r7, #20]
 800c750:	e007      	b.n	800c762 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c752:	4b07      	ldr	r3, [pc, #28]	; (800c770 <prvInsertTimerInActiveList+0x80>)
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	3304      	adds	r3, #4
 800c75a:	4619      	mov	r1, r3
 800c75c:	4610      	mov	r0, r2
 800c75e:	f7fe f83f 	bl	800a7e0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c762:	697b      	ldr	r3, [r7, #20]
}
 800c764:	4618      	mov	r0, r3
 800c766:	3718      	adds	r7, #24
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	20000d9c 	.word	0x20000d9c
 800c770:	20000d98 	.word	0x20000d98

0800c774 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b08e      	sub	sp, #56	; 0x38
 800c778:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c77a:	e09d      	b.n	800c8b8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	da18      	bge.n	800c7b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c782:	1d3b      	adds	r3, r7, #4
 800c784:	3304      	adds	r3, #4
 800c786:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10a      	bne.n	800c7a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	61fb      	str	r3, [r7, #28]
}
 800c7a0:	bf00      	nop
 800c7a2:	e7fe      	b.n	800c7a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7aa:	6850      	ldr	r0, [r2, #4]
 800c7ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7ae:	6892      	ldr	r2, [r2, #8]
 800c7b0:	4611      	mov	r1, r2
 800c7b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	db7d      	blt.n	800c8b6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d004      	beq.n	800c7d0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fe f840 	bl	800a850 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7d0:	463b      	mov	r3, r7
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7ff ff6c 	bl	800c6b0 <prvSampleTimeNow>
 800c7d8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2b09      	cmp	r3, #9
 800c7de:	d86b      	bhi.n	800c8b8 <prvProcessReceivedCommands+0x144>
 800c7e0:	a201      	add	r2, pc, #4	; (adr r2, 800c7e8 <prvProcessReceivedCommands+0x74>)
 800c7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e6:	bf00      	nop
 800c7e8:	0800c811 	.word	0x0800c811
 800c7ec:	0800c811 	.word	0x0800c811
 800c7f0:	0800c811 	.word	0x0800c811
 800c7f4:	0800c8b9 	.word	0x0800c8b9
 800c7f8:	0800c86d 	.word	0x0800c86d
 800c7fc:	0800c8a5 	.word	0x0800c8a5
 800c800:	0800c811 	.word	0x0800c811
 800c804:	0800c811 	.word	0x0800c811
 800c808:	0800c8b9 	.word	0x0800c8b9
 800c80c:	0800c86d 	.word	0x0800c86d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c814:	699b      	ldr	r3, [r3, #24]
 800c816:	18d1      	adds	r1, r2, r3
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c81c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c81e:	f7ff ff67 	bl	800c6f0 <prvInsertTimerInActiveList>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d047      	beq.n	800c8b8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c82c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c82e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c832:	69db      	ldr	r3, [r3, #28]
 800c834:	2b01      	cmp	r3, #1
 800c836:	d13f      	bne.n	800c8b8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	699b      	ldr	r3, [r3, #24]
 800c83e:	441a      	add	r2, r3
 800c840:	2300      	movs	r3, #0
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	2300      	movs	r3, #0
 800c846:	2100      	movs	r1, #0
 800c848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c84a:	f7ff fe1f 	bl	800c48c <xTimerGenericCommand>
 800c84e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c850:	6a3b      	ldr	r3, [r7, #32]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d130      	bne.n	800c8b8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	61bb      	str	r3, [r7, #24]
}
 800c868:	bf00      	nop
 800c86a:	e7fe      	b.n	800c86a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c86c:	68ba      	ldr	r2, [r7, #8]
 800c86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c870:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c874:	699b      	ldr	r3, [r3, #24]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d10a      	bne.n	800c890 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	617b      	str	r3, [r7, #20]
}
 800c88c:	bf00      	nop
 800c88e:	e7fe      	b.n	800c88e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c892:	699a      	ldr	r2, [r3, #24]
 800c894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c896:	18d1      	adds	r1, r2, r3
 800c898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c89c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c89e:	f7ff ff27 	bl	800c6f0 <prvInsertTimerInActiveList>
					break;
 800c8a2:	e009      	b.n	800c8b8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d104      	bne.n	800c8b8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800c8ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8b0:	f000 fb68 	bl	800cf84 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c8b4:	e000      	b.n	800c8b8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c8b6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8b8:	4b07      	ldr	r3, [pc, #28]	; (800c8d8 <prvProcessReceivedCommands+0x164>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	1d39      	adds	r1, r7, #4
 800c8be:	2200      	movs	r2, #0
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fe fac5 	bl	800ae50 <xQueueReceive>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	f47f af57 	bne.w	800c77c <prvProcessReceivedCommands+0x8>
	}
}
 800c8ce:	bf00      	nop
 800c8d0:	bf00      	nop
 800c8d2:	3730      	adds	r7, #48	; 0x30
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	20000da0 	.word	0x20000da0

0800c8dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b088      	sub	sp, #32
 800c8e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8e2:	e045      	b.n	800c970 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8e4:	4b2c      	ldr	r3, [pc, #176]	; (800c998 <prvSwitchTimerLists+0xbc>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8ee:	4b2a      	ldr	r3, [pc, #168]	; (800c998 <prvSwitchTimerLists+0xbc>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	3304      	adds	r3, #4
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fd ffa7 	bl	800a850 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	69db      	ldr	r3, [r3, #28]
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d12e      	bne.n	800c970 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	699b      	ldr	r3, [r3, #24]
 800c916:	693a      	ldr	r2, [r7, #16]
 800c918:	4413      	add	r3, r2
 800c91a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c91c:	68ba      	ldr	r2, [r7, #8]
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	429a      	cmp	r2, r3
 800c922:	d90e      	bls.n	800c942 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c930:	4b19      	ldr	r3, [pc, #100]	; (800c998 <prvSwitchTimerLists+0xbc>)
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	3304      	adds	r3, #4
 800c938:	4619      	mov	r1, r3
 800c93a:	4610      	mov	r0, r2
 800c93c:	f7fd ff50 	bl	800a7e0 <vListInsert>
 800c940:	e016      	b.n	800c970 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c942:	2300      	movs	r3, #0
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	2300      	movs	r3, #0
 800c948:	693a      	ldr	r2, [r7, #16]
 800c94a:	2100      	movs	r1, #0
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f7ff fd9d 	bl	800c48c <xTimerGenericCommand>
 800c952:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d10a      	bne.n	800c970 <prvSwitchTimerLists+0x94>
	__asm volatile
 800c95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	603b      	str	r3, [r7, #0]
}
 800c96c:	bf00      	nop
 800c96e:	e7fe      	b.n	800c96e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c970:	4b09      	ldr	r3, [pc, #36]	; (800c998 <prvSwitchTimerLists+0xbc>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1b4      	bne.n	800c8e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c97a:	4b07      	ldr	r3, [pc, #28]	; (800c998 <prvSwitchTimerLists+0xbc>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c980:	4b06      	ldr	r3, [pc, #24]	; (800c99c <prvSwitchTimerLists+0xc0>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a04      	ldr	r2, [pc, #16]	; (800c998 <prvSwitchTimerLists+0xbc>)
 800c986:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c988:	4a04      	ldr	r2, [pc, #16]	; (800c99c <prvSwitchTimerLists+0xc0>)
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	6013      	str	r3, [r2, #0]
}
 800c98e:	bf00      	nop
 800c990:	3718      	adds	r7, #24
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	20000d98 	.word	0x20000d98
 800c99c:	20000d9c 	.word	0x20000d9c

0800c9a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c9a6:	f000 f929 	bl	800cbfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c9aa:	4b15      	ldr	r3, [pc, #84]	; (800ca00 <prvCheckForValidListAndQueue+0x60>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d120      	bne.n	800c9f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c9b2:	4814      	ldr	r0, [pc, #80]	; (800ca04 <prvCheckForValidListAndQueue+0x64>)
 800c9b4:	f7fd fec6 	bl	800a744 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c9b8:	4813      	ldr	r0, [pc, #76]	; (800ca08 <prvCheckForValidListAndQueue+0x68>)
 800c9ba:	f7fd fec3 	bl	800a744 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c9be:	4b13      	ldr	r3, [pc, #76]	; (800ca0c <prvCheckForValidListAndQueue+0x6c>)
 800c9c0:	4a10      	ldr	r2, [pc, #64]	; (800ca04 <prvCheckForValidListAndQueue+0x64>)
 800c9c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c9c4:	4b12      	ldr	r3, [pc, #72]	; (800ca10 <prvCheckForValidListAndQueue+0x70>)
 800c9c6:	4a10      	ldr	r2, [pc, #64]	; (800ca08 <prvCheckForValidListAndQueue+0x68>)
 800c9c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	4b11      	ldr	r3, [pc, #68]	; (800ca14 <prvCheckForValidListAndQueue+0x74>)
 800c9d0:	4a11      	ldr	r2, [pc, #68]	; (800ca18 <prvCheckForValidListAndQueue+0x78>)
 800c9d2:	2110      	movs	r1, #16
 800c9d4:	200a      	movs	r0, #10
 800c9d6:	f7fd ffcd 	bl	800a974 <xQueueGenericCreateStatic>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	4a08      	ldr	r2, [pc, #32]	; (800ca00 <prvCheckForValidListAndQueue+0x60>)
 800c9de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c9e0:	4b07      	ldr	r3, [pc, #28]	; (800ca00 <prvCheckForValidListAndQueue+0x60>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d005      	beq.n	800c9f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9e8:	4b05      	ldr	r3, [pc, #20]	; (800ca00 <prvCheckForValidListAndQueue+0x60>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	490b      	ldr	r1, [pc, #44]	; (800ca1c <prvCheckForValidListAndQueue+0x7c>)
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fe fc1e 	bl	800b230 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9f4:	f000 f932 	bl	800cc5c <vPortExitCritical>
}
 800c9f8:	bf00      	nop
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20000da0 	.word	0x20000da0
 800ca04:	20000d70 	.word	0x20000d70
 800ca08:	20000d84 	.word	0x20000d84
 800ca0c:	20000d98 	.word	0x20000d98
 800ca10:	20000d9c 	.word	0x20000d9c
 800ca14:	20000e4c 	.word	0x20000e4c
 800ca18:	20000dac 	.word	0x20000dac
 800ca1c:	0800ddfc 	.word	0x0800ddfc

0800ca20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	3b04      	subs	r3, #4
 800ca30:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	3b04      	subs	r3, #4
 800ca3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	f023 0201 	bic.w	r2, r3, #1
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	3b04      	subs	r3, #4
 800ca4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca50:	4a08      	ldr	r2, [pc, #32]	; (800ca74 <pxPortInitialiseStack+0x54>)
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	3b14      	subs	r3, #20
 800ca5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	3b20      	subs	r3, #32
 800ca66:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca68:	68fb      	ldr	r3, [r7, #12]
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3714      	adds	r7, #20
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bc80      	pop	{r7}
 800ca72:	4770      	bx	lr
 800ca74:	0800ca79 	.word	0x0800ca79

0800ca78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca82:	4b12      	ldr	r3, [pc, #72]	; (800cacc <prvTaskExitError+0x54>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8a:	d00a      	beq.n	800caa2 <prvTaskExitError+0x2a>
	__asm volatile
 800ca8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca90:	f383 8811 	msr	BASEPRI, r3
 800ca94:	f3bf 8f6f 	isb	sy
 800ca98:	f3bf 8f4f 	dsb	sy
 800ca9c:	60fb      	str	r3, [r7, #12]
}
 800ca9e:	bf00      	nop
 800caa0:	e7fe      	b.n	800caa0 <prvTaskExitError+0x28>
	__asm volatile
 800caa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa6:	f383 8811 	msr	BASEPRI, r3
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	60bb      	str	r3, [r7, #8]
}
 800cab4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cab6:	bf00      	nop
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d0fc      	beq.n	800cab8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cabe:	bf00      	nop
 800cac0:	bf00      	nop
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bc80      	pop	{r7}
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	2000012c 	.word	0x2000012c

0800cad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cad0:	4b07      	ldr	r3, [pc, #28]	; (800caf0 <pxCurrentTCBConst2>)
 800cad2:	6819      	ldr	r1, [r3, #0]
 800cad4:	6808      	ldr	r0, [r1, #0]
 800cad6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cada:	f380 8809 	msr	PSP, r0
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f04f 0000 	mov.w	r0, #0
 800cae6:	f380 8811 	msr	BASEPRI, r0
 800caea:	f04e 0e0d 	orr.w	lr, lr, #13
 800caee:	4770      	bx	lr

0800caf0 <pxCurrentTCBConst2>:
 800caf0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop

0800caf8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800caf8:	4806      	ldr	r0, [pc, #24]	; (800cb14 <prvPortStartFirstTask+0x1c>)
 800cafa:	6800      	ldr	r0, [r0, #0]
 800cafc:	6800      	ldr	r0, [r0, #0]
 800cafe:	f380 8808 	msr	MSP, r0
 800cb02:	b662      	cpsie	i
 800cb04:	b661      	cpsie	f
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	df00      	svc	0
 800cb10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb12:	bf00      	nop
 800cb14:	e000ed08 	.word	0xe000ed08

0800cb18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb1e:	4b32      	ldr	r3, [pc, #200]	; (800cbe8 <xPortStartScheduler+0xd0>)
 800cb20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	22ff      	movs	r2, #255	; 0xff
 800cb2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb38:	78fb      	ldrb	r3, [r7, #3]
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb40:	b2da      	uxtb	r2, r3
 800cb42:	4b2a      	ldr	r3, [pc, #168]	; (800cbec <xPortStartScheduler+0xd4>)
 800cb44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb46:	4b2a      	ldr	r3, [pc, #168]	; (800cbf0 <xPortStartScheduler+0xd8>)
 800cb48:	2207      	movs	r2, #7
 800cb4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb4c:	e009      	b.n	800cb62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cb4e:	4b28      	ldr	r3, [pc, #160]	; (800cbf0 <xPortStartScheduler+0xd8>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	3b01      	subs	r3, #1
 800cb54:	4a26      	ldr	r2, [pc, #152]	; (800cbf0 <xPortStartScheduler+0xd8>)
 800cb56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb58:	78fb      	ldrb	r3, [r7, #3]
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	005b      	lsls	r3, r3, #1
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb62:	78fb      	ldrb	r3, [r7, #3]
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb6a:	2b80      	cmp	r3, #128	; 0x80
 800cb6c:	d0ef      	beq.n	800cb4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb6e:	4b20      	ldr	r3, [pc, #128]	; (800cbf0 <xPortStartScheduler+0xd8>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f1c3 0307 	rsb	r3, r3, #7
 800cb76:	2b04      	cmp	r3, #4
 800cb78:	d00a      	beq.n	800cb90 <xPortStartScheduler+0x78>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	60bb      	str	r3, [r7, #8]
}
 800cb8c:	bf00      	nop
 800cb8e:	e7fe      	b.n	800cb8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb90:	4b17      	ldr	r3, [pc, #92]	; (800cbf0 <xPortStartScheduler+0xd8>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	021b      	lsls	r3, r3, #8
 800cb96:	4a16      	ldr	r2, [pc, #88]	; (800cbf0 <xPortStartScheduler+0xd8>)
 800cb98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb9a:	4b15      	ldr	r3, [pc, #84]	; (800cbf0 <xPortStartScheduler+0xd8>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cba2:	4a13      	ldr	r2, [pc, #76]	; (800cbf0 <xPortStartScheduler+0xd8>)
 800cba4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbae:	4b11      	ldr	r3, [pc, #68]	; (800cbf4 <xPortStartScheduler+0xdc>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4a10      	ldr	r2, [pc, #64]	; (800cbf4 <xPortStartScheduler+0xdc>)
 800cbb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cbb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cbba:	4b0e      	ldr	r3, [pc, #56]	; (800cbf4 <xPortStartScheduler+0xdc>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a0d      	ldr	r2, [pc, #52]	; (800cbf4 <xPortStartScheduler+0xdc>)
 800cbc0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cbc4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cbc6:	f000 f8b9 	bl	800cd3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cbca:	4b0b      	ldr	r3, [pc, #44]	; (800cbf8 <xPortStartScheduler+0xe0>)
 800cbcc:	2200      	movs	r2, #0
 800cbce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cbd0:	f7ff ff92 	bl	800caf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cbd4:	f7fe ffb0 	bl	800bb38 <vTaskSwitchContext>
	prvTaskExitError();
 800cbd8:	f7ff ff4e 	bl	800ca78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	e000e400 	.word	0xe000e400
 800cbec:	20000e9c 	.word	0x20000e9c
 800cbf0:	20000ea0 	.word	0x20000ea0
 800cbf4:	e000ed20 	.word	0xe000ed20
 800cbf8:	2000012c 	.word	0x2000012c

0800cbfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b083      	sub	sp, #12
 800cc00:	af00      	add	r7, sp, #0
	__asm volatile
 800cc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	607b      	str	r3, [r7, #4]
}
 800cc14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc16:	4b0f      	ldr	r3, [pc, #60]	; (800cc54 <vPortEnterCritical+0x58>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	4a0d      	ldr	r2, [pc, #52]	; (800cc54 <vPortEnterCritical+0x58>)
 800cc1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc20:	4b0c      	ldr	r3, [pc, #48]	; (800cc54 <vPortEnterCritical+0x58>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d10f      	bne.n	800cc48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc28:	4b0b      	ldr	r3, [pc, #44]	; (800cc58 <vPortEnterCritical+0x5c>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	b2db      	uxtb	r3, r3
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00a      	beq.n	800cc48 <vPortEnterCritical+0x4c>
	__asm volatile
 800cc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc36:	f383 8811 	msr	BASEPRI, r3
 800cc3a:	f3bf 8f6f 	isb	sy
 800cc3e:	f3bf 8f4f 	dsb	sy
 800cc42:	603b      	str	r3, [r7, #0]
}
 800cc44:	bf00      	nop
 800cc46:	e7fe      	b.n	800cc46 <vPortEnterCritical+0x4a>
	}
}
 800cc48:	bf00      	nop
 800cc4a:	370c      	adds	r7, #12
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bc80      	pop	{r7}
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	2000012c 	.word	0x2000012c
 800cc58:	e000ed04 	.word	0xe000ed04

0800cc5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b083      	sub	sp, #12
 800cc60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc62:	4b11      	ldr	r3, [pc, #68]	; (800cca8 <vPortExitCritical+0x4c>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10a      	bne.n	800cc80 <vPortExitCritical+0x24>
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	607b      	str	r3, [r7, #4]
}
 800cc7c:	bf00      	nop
 800cc7e:	e7fe      	b.n	800cc7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc80:	4b09      	ldr	r3, [pc, #36]	; (800cca8 <vPortExitCritical+0x4c>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	3b01      	subs	r3, #1
 800cc86:	4a08      	ldr	r2, [pc, #32]	; (800cca8 <vPortExitCritical+0x4c>)
 800cc88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc8a:	4b07      	ldr	r3, [pc, #28]	; (800cca8 <vPortExitCritical+0x4c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d105      	bne.n	800cc9e <vPortExitCritical+0x42>
 800cc92:	2300      	movs	r3, #0
 800cc94:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	f383 8811 	msr	BASEPRI, r3
}
 800cc9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc9e:	bf00      	nop
 800cca0:	370c      	adds	r7, #12
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bc80      	pop	{r7}
 800cca6:	4770      	bx	lr
 800cca8:	2000012c 	.word	0x2000012c
 800ccac:	00000000 	.word	0x00000000

0800ccb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ccb0:	f3ef 8009 	mrs	r0, PSP
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	4b0d      	ldr	r3, [pc, #52]	; (800ccf0 <pxCurrentTCBConst>)
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ccc0:	6010      	str	r0, [r2, #0]
 800ccc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ccc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ccca:	f380 8811 	msr	BASEPRI, r0
 800ccce:	f7fe ff33 	bl	800bb38 <vTaskSwitchContext>
 800ccd2:	f04f 0000 	mov.w	r0, #0
 800ccd6:	f380 8811 	msr	BASEPRI, r0
 800ccda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ccde:	6819      	ldr	r1, [r3, #0]
 800cce0:	6808      	ldr	r0, [r1, #0]
 800cce2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cce6:	f380 8809 	msr	PSP, r0
 800ccea:	f3bf 8f6f 	isb	sy
 800ccee:	4770      	bx	lr

0800ccf0 <pxCurrentTCBConst>:
 800ccf0:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ccf4:	bf00      	nop
 800ccf6:	bf00      	nop

0800ccf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
	__asm volatile
 800ccfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd02:	f383 8811 	msr	BASEPRI, r3
 800cd06:	f3bf 8f6f 	isb	sy
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	607b      	str	r3, [r7, #4]
}
 800cd10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd12:	f7fe fe53 	bl	800b9bc <xTaskIncrementTick>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d003      	beq.n	800cd24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd1c:	4b06      	ldr	r3, [pc, #24]	; (800cd38 <SysTick_Handler+0x40>)
 800cd1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd22:	601a      	str	r2, [r3, #0]
 800cd24:	2300      	movs	r3, #0
 800cd26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	f383 8811 	msr	BASEPRI, r3
}
 800cd2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd30:	bf00      	nop
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	e000ed04 	.word	0xe000ed04

0800cd3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd40:	4b0a      	ldr	r3, [pc, #40]	; (800cd6c <vPortSetupTimerInterrupt+0x30>)
 800cd42:	2200      	movs	r2, #0
 800cd44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd46:	4b0a      	ldr	r3, [pc, #40]	; (800cd70 <vPortSetupTimerInterrupt+0x34>)
 800cd48:	2200      	movs	r2, #0
 800cd4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd4c:	4b09      	ldr	r3, [pc, #36]	; (800cd74 <vPortSetupTimerInterrupt+0x38>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a09      	ldr	r2, [pc, #36]	; (800cd78 <vPortSetupTimerInterrupt+0x3c>)
 800cd52:	fba2 2303 	umull	r2, r3, r2, r3
 800cd56:	099b      	lsrs	r3, r3, #6
 800cd58:	4a08      	ldr	r2, [pc, #32]	; (800cd7c <vPortSetupTimerInterrupt+0x40>)
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd5e:	4b03      	ldr	r3, [pc, #12]	; (800cd6c <vPortSetupTimerInterrupt+0x30>)
 800cd60:	2207      	movs	r2, #7
 800cd62:	601a      	str	r2, [r3, #0]
}
 800cd64:	bf00      	nop
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bc80      	pop	{r7}
 800cd6a:	4770      	bx	lr
 800cd6c:	e000e010 	.word	0xe000e010
 800cd70:	e000e018 	.word	0xe000e018
 800cd74:	20000010 	.word	0x20000010
 800cd78:	10624dd3 	.word	0x10624dd3
 800cd7c:	e000e014 	.word	0xe000e014

0800cd80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cd80:	b480      	push	{r7}
 800cd82:	b085      	sub	sp, #20
 800cd84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cd86:	f3ef 8305 	mrs	r3, IPSR
 800cd8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2b0f      	cmp	r3, #15
 800cd90:	d914      	bls.n	800cdbc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd92:	4a16      	ldr	r2, [pc, #88]	; (800cdec <vPortValidateInterruptPriority+0x6c>)
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	4413      	add	r3, r2
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd9c:	4b14      	ldr	r3, [pc, #80]	; (800cdf0 <vPortValidateInterruptPriority+0x70>)
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	7afa      	ldrb	r2, [r7, #11]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d20a      	bcs.n	800cdbc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdaa:	f383 8811 	msr	BASEPRI, r3
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	607b      	str	r3, [r7, #4]
}
 800cdb8:	bf00      	nop
 800cdba:	e7fe      	b.n	800cdba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cdbc:	4b0d      	ldr	r3, [pc, #52]	; (800cdf4 <vPortValidateInterruptPriority+0x74>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cdc4:	4b0c      	ldr	r3, [pc, #48]	; (800cdf8 <vPortValidateInterruptPriority+0x78>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d90a      	bls.n	800cde2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd0:	f383 8811 	msr	BASEPRI, r3
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	603b      	str	r3, [r7, #0]
}
 800cdde:	bf00      	nop
 800cde0:	e7fe      	b.n	800cde0 <vPortValidateInterruptPriority+0x60>
	}
 800cde2:	bf00      	nop
 800cde4:	3714      	adds	r7, #20
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bc80      	pop	{r7}
 800cdea:	4770      	bx	lr
 800cdec:	e000e3f0 	.word	0xe000e3f0
 800cdf0:	20000e9c 	.word	0x20000e9c
 800cdf4:	e000ed0c 	.word	0xe000ed0c
 800cdf8:	20000ea0 	.word	0x20000ea0

0800cdfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b08a      	sub	sp, #40	; 0x28
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce04:	2300      	movs	r3, #0
 800ce06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce08:	f7fe fd1e 	bl	800b848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce0c:	4b58      	ldr	r3, [pc, #352]	; (800cf70 <pvPortMalloc+0x174>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d101      	bne.n	800ce18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce14:	f000 f910 	bl	800d038 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce18:	4b56      	ldr	r3, [pc, #344]	; (800cf74 <pvPortMalloc+0x178>)
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	4013      	ands	r3, r2
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f040 808e 	bne.w	800cf42 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d01d      	beq.n	800ce68 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ce2c:	2208      	movs	r2, #8
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4413      	add	r3, r2
 800ce32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f003 0307 	and.w	r3, r3, #7
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d014      	beq.n	800ce68 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f023 0307 	bic.w	r3, r3, #7
 800ce44:	3308      	adds	r3, #8
 800ce46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f003 0307 	and.w	r3, r3, #7
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d00a      	beq.n	800ce68 <pvPortMalloc+0x6c>
	__asm volatile
 800ce52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce56:	f383 8811 	msr	BASEPRI, r3
 800ce5a:	f3bf 8f6f 	isb	sy
 800ce5e:	f3bf 8f4f 	dsb	sy
 800ce62:	617b      	str	r3, [r7, #20]
}
 800ce64:	bf00      	nop
 800ce66:	e7fe      	b.n	800ce66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d069      	beq.n	800cf42 <pvPortMalloc+0x146>
 800ce6e:	4b42      	ldr	r3, [pc, #264]	; (800cf78 <pvPortMalloc+0x17c>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d864      	bhi.n	800cf42 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce78:	4b40      	ldr	r3, [pc, #256]	; (800cf7c <pvPortMalloc+0x180>)
 800ce7a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce7c:	4b3f      	ldr	r3, [pc, #252]	; (800cf7c <pvPortMalloc+0x180>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce82:	e004      	b.n	800ce8e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ce84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce86:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d903      	bls.n	800cea0 <pvPortMalloc+0xa4>
 800ce98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1f1      	bne.n	800ce84 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cea0:	4b33      	ldr	r3, [pc, #204]	; (800cf70 <pvPortMalloc+0x174>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d04b      	beq.n	800cf42 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ceaa:	6a3b      	ldr	r3, [r7, #32]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2208      	movs	r2, #8
 800ceb0:	4413      	add	r3, r2
 800ceb2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	6a3b      	ldr	r3, [r7, #32]
 800ceba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebe:	685a      	ldr	r2, [r3, #4]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	1ad2      	subs	r2, r2, r3
 800cec4:	2308      	movs	r3, #8
 800cec6:	005b      	lsls	r3, r3, #1
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d91f      	bls.n	800cf0c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4413      	add	r3, r2
 800ced2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ced4:	69bb      	ldr	r3, [r7, #24]
 800ced6:	f003 0307 	and.w	r3, r3, #7
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00a      	beq.n	800cef4 <pvPortMalloc+0xf8>
	__asm volatile
 800cede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	613b      	str	r3, [r7, #16]
}
 800cef0:	bf00      	nop
 800cef2:	e7fe      	b.n	800cef2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef6:	685a      	ldr	r2, [r3, #4]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	1ad2      	subs	r2, r2, r3
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf06:	69b8      	ldr	r0, [r7, #24]
 800cf08:	f000 f8f8 	bl	800d0fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf0c:	4b1a      	ldr	r3, [pc, #104]	; (800cf78 <pvPortMalloc+0x17c>)
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	1ad3      	subs	r3, r2, r3
 800cf16:	4a18      	ldr	r2, [pc, #96]	; (800cf78 <pvPortMalloc+0x17c>)
 800cf18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf1a:	4b17      	ldr	r3, [pc, #92]	; (800cf78 <pvPortMalloc+0x17c>)
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	4b18      	ldr	r3, [pc, #96]	; (800cf80 <pvPortMalloc+0x184>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d203      	bcs.n	800cf2e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf26:	4b14      	ldr	r3, [pc, #80]	; (800cf78 <pvPortMalloc+0x17c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a15      	ldr	r2, [pc, #84]	; (800cf80 <pvPortMalloc+0x184>)
 800cf2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf30:	685a      	ldr	r2, [r3, #4]
 800cf32:	4b10      	ldr	r3, [pc, #64]	; (800cf74 <pvPortMalloc+0x178>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	431a      	orrs	r2, r3
 800cf38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	2200      	movs	r2, #0
 800cf40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf42:	f7fe fc8f 	bl	800b864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf46:	69fb      	ldr	r3, [r7, #28]
 800cf48:	f003 0307 	and.w	r3, r3, #7
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00a      	beq.n	800cf66 <pvPortMalloc+0x16a>
	__asm volatile
 800cf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf54:	f383 8811 	msr	BASEPRI, r3
 800cf58:	f3bf 8f6f 	isb	sy
 800cf5c:	f3bf 8f4f 	dsb	sy
 800cf60:	60fb      	str	r3, [r7, #12]
}
 800cf62:	bf00      	nop
 800cf64:	e7fe      	b.n	800cf64 <pvPortMalloc+0x168>
	return pvReturn;
 800cf66:	69fb      	ldr	r3, [r7, #28]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3728      	adds	r7, #40	; 0x28
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	20002248 	.word	0x20002248
 800cf74:	20002254 	.word	0x20002254
 800cf78:	2000224c 	.word	0x2000224c
 800cf7c:	20002240 	.word	0x20002240
 800cf80:	20002250 	.word	0x20002250

0800cf84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b086      	sub	sp, #24
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d048      	beq.n	800d028 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf96:	2308      	movs	r3, #8
 800cf98:	425b      	negs	r3, r3
 800cf9a:	697a      	ldr	r2, [r7, #20]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	685a      	ldr	r2, [r3, #4]
 800cfa8:	4b21      	ldr	r3, [pc, #132]	; (800d030 <vPortFree+0xac>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4013      	ands	r3, r2
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d10a      	bne.n	800cfc8 <vPortFree+0x44>
	__asm volatile
 800cfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	60fb      	str	r3, [r7, #12]
}
 800cfc4:	bf00      	nop
 800cfc6:	e7fe      	b.n	800cfc6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d00a      	beq.n	800cfe6 <vPortFree+0x62>
	__asm volatile
 800cfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd4:	f383 8811 	msr	BASEPRI, r3
 800cfd8:	f3bf 8f6f 	isb	sy
 800cfdc:	f3bf 8f4f 	dsb	sy
 800cfe0:	60bb      	str	r3, [r7, #8]
}
 800cfe2:	bf00      	nop
 800cfe4:	e7fe      	b.n	800cfe4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	685a      	ldr	r2, [r3, #4]
 800cfea:	4b11      	ldr	r3, [pc, #68]	; (800d030 <vPortFree+0xac>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4013      	ands	r3, r2
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d019      	beq.n	800d028 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d115      	bne.n	800d028 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	685a      	ldr	r2, [r3, #4]
 800d000:	4b0b      	ldr	r3, [pc, #44]	; (800d030 <vPortFree+0xac>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	43db      	mvns	r3, r3
 800d006:	401a      	ands	r2, r3
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d00c:	f7fe fc1c 	bl	800b848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	685a      	ldr	r2, [r3, #4]
 800d014:	4b07      	ldr	r3, [pc, #28]	; (800d034 <vPortFree+0xb0>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4413      	add	r3, r2
 800d01a:	4a06      	ldr	r2, [pc, #24]	; (800d034 <vPortFree+0xb0>)
 800d01c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d01e:	6938      	ldr	r0, [r7, #16]
 800d020:	f000 f86c 	bl	800d0fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d024:	f7fe fc1e 	bl	800b864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d028:	bf00      	nop
 800d02a:	3718      	adds	r7, #24
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}
 800d030:	20002254 	.word	0x20002254
 800d034:	2000224c 	.word	0x2000224c

0800d038 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d038:	b480      	push	{r7}
 800d03a:	b085      	sub	sp, #20
 800d03c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d03e:	f241 339c 	movw	r3, #5020	; 0x139c
 800d042:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d044:	4b27      	ldr	r3, [pc, #156]	; (800d0e4 <prvHeapInit+0xac>)
 800d046:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f003 0307 	and.w	r3, r3, #7
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d00c      	beq.n	800d06c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	3307      	adds	r3, #7
 800d056:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f023 0307 	bic.w	r3, r3, #7
 800d05e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d060:	68ba      	ldr	r2, [r7, #8]
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	1ad3      	subs	r3, r2, r3
 800d066:	4a1f      	ldr	r2, [pc, #124]	; (800d0e4 <prvHeapInit+0xac>)
 800d068:	4413      	add	r3, r2
 800d06a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d070:	4a1d      	ldr	r2, [pc, #116]	; (800d0e8 <prvHeapInit+0xb0>)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d076:	4b1c      	ldr	r3, [pc, #112]	; (800d0e8 <prvHeapInit+0xb0>)
 800d078:	2200      	movs	r2, #0
 800d07a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	4413      	add	r3, r2
 800d082:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d084:	2208      	movs	r2, #8
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	1a9b      	subs	r3, r3, r2
 800d08a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f023 0307 	bic.w	r3, r3, #7
 800d092:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	4a15      	ldr	r2, [pc, #84]	; (800d0ec <prvHeapInit+0xb4>)
 800d098:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d09a:	4b14      	ldr	r3, [pc, #80]	; (800d0ec <prvHeapInit+0xb4>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d0a2:	4b12      	ldr	r3, [pc, #72]	; (800d0ec <prvHeapInit+0xb4>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	1ad2      	subs	r2, r2, r3
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d0b8:	4b0c      	ldr	r3, [pc, #48]	; (800d0ec <prvHeapInit+0xb4>)
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	4a0a      	ldr	r2, [pc, #40]	; (800d0f0 <prvHeapInit+0xb8>)
 800d0c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	4a09      	ldr	r2, [pc, #36]	; (800d0f4 <prvHeapInit+0xbc>)
 800d0ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d0d0:	4b09      	ldr	r3, [pc, #36]	; (800d0f8 <prvHeapInit+0xc0>)
 800d0d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0d6:	601a      	str	r2, [r3, #0]
}
 800d0d8:	bf00      	nop
 800d0da:	3714      	adds	r7, #20
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bc80      	pop	{r7}
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	20000ea4 	.word	0x20000ea4
 800d0e8:	20002240 	.word	0x20002240
 800d0ec:	20002248 	.word	0x20002248
 800d0f0:	20002250 	.word	0x20002250
 800d0f4:	2000224c 	.word	0x2000224c
 800d0f8:	20002254 	.word	0x20002254

0800d0fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b085      	sub	sp, #20
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d104:	4b27      	ldr	r3, [pc, #156]	; (800d1a4 <prvInsertBlockIntoFreeList+0xa8>)
 800d106:	60fb      	str	r3, [r7, #12]
 800d108:	e002      	b.n	800d110 <prvInsertBlockIntoFreeList+0x14>
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	60fb      	str	r3, [r7, #12]
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	429a      	cmp	r2, r3
 800d118:	d8f7      	bhi.n	800d10a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	68ba      	ldr	r2, [r7, #8]
 800d124:	4413      	add	r3, r2
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d108      	bne.n	800d13e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	685a      	ldr	r2, [r3, #4]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	441a      	add	r2, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	68ba      	ldr	r2, [r7, #8]
 800d148:	441a      	add	r2, r3
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d118      	bne.n	800d184 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	4b14      	ldr	r3, [pc, #80]	; (800d1a8 <prvInsertBlockIntoFreeList+0xac>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d00d      	beq.n	800d17a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	685a      	ldr	r2, [r3, #4]
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	441a      	add	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	601a      	str	r2, [r3, #0]
 800d178:	e008      	b.n	800d18c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d17a:	4b0b      	ldr	r3, [pc, #44]	; (800d1a8 <prvInsertBlockIntoFreeList+0xac>)
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	601a      	str	r2, [r3, #0]
 800d182:	e003      	b.n	800d18c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d18c:	68fa      	ldr	r2, [r7, #12]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	429a      	cmp	r2, r3
 800d192:	d002      	beq.n	800d19a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d19a:	bf00      	nop
 800d19c:	3714      	adds	r7, #20
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bc80      	pop	{r7}
 800d1a2:	4770      	bx	lr
 800d1a4:	20002240 	.word	0x20002240
 800d1a8:	20002248 	.word	0x20002248

0800d1ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	4912      	ldr	r1, [pc, #72]	; (800d1fc <MX_USB_DEVICE_Init+0x50>)
 800d1b4:	4812      	ldr	r0, [pc, #72]	; (800d200 <MX_USB_DEVICE_Init+0x54>)
 800d1b6:	f7fc f834 	bl	8009222 <USBD_Init>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d001      	beq.n	800d1c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d1c0:	f7f3 fd3c 	bl	8000c3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d1c4:	490f      	ldr	r1, [pc, #60]	; (800d204 <MX_USB_DEVICE_Init+0x58>)
 800d1c6:	480e      	ldr	r0, [pc, #56]	; (800d200 <MX_USB_DEVICE_Init+0x54>)
 800d1c8:	f7fc f856 	bl	8009278 <USBD_RegisterClass>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d001      	beq.n	800d1d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d1d2:	f7f3 fd33 	bl	8000c3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d1d6:	490c      	ldr	r1, [pc, #48]	; (800d208 <MX_USB_DEVICE_Init+0x5c>)
 800d1d8:	4809      	ldr	r0, [pc, #36]	; (800d200 <MX_USB_DEVICE_Init+0x54>)
 800d1da:	f7fb ff87 	bl	80090ec <USBD_CDC_RegisterInterface>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d001      	beq.n	800d1e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d1e4:	f7f3 fd2a 	bl	8000c3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d1e8:	4805      	ldr	r0, [pc, #20]	; (800d200 <MX_USB_DEVICE_Init+0x54>)
 800d1ea:	f7fc f85e 	bl	80092aa <USBD_Start>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d001      	beq.n	800d1f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d1f4:	f7f3 fd22 	bl	8000c3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d1f8:	bf00      	nop
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	20000140 	.word	0x20000140
 800d200:	20002698 	.word	0x20002698
 800d204:	20000028 	.word	0x20000028
 800d208:	20000130 	.word	0x20000130

0800d20c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d210:	2200      	movs	r2, #0
 800d212:	4905      	ldr	r1, [pc, #20]	; (800d228 <CDC_Init_FS+0x1c>)
 800d214:	4805      	ldr	r0, [pc, #20]	; (800d22c <CDC_Init_FS+0x20>)
 800d216:	f7fb ff7f 	bl	8009118 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d21a:	4905      	ldr	r1, [pc, #20]	; (800d230 <CDC_Init_FS+0x24>)
 800d21c:	4803      	ldr	r0, [pc, #12]	; (800d22c <CDC_Init_FS+0x20>)
 800d21e:	f7fb ff94 	bl	800914a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d222:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d224:	4618      	mov	r0, r3
 800d226:	bd80      	pop	{r7, pc}
 800d228:	20002d44 	.word	0x20002d44
 800d22c:	20002698 	.word	0x20002698
 800d230:	2000295c 	.word	0x2000295c

0800d234 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d234:	b480      	push	{r7}
 800d236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d238:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bc80      	pop	{r7}
 800d240:	4770      	bx	lr
	...

0800d244 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	4603      	mov	r3, r0
 800d24c:	6039      	str	r1, [r7, #0]
 800d24e:	71fb      	strb	r3, [r7, #7]
 800d250:	4613      	mov	r3, r2
 800d252:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d254:	79fb      	ldrb	r3, [r7, #7]
 800d256:	2b23      	cmp	r3, #35	; 0x23
 800d258:	d84a      	bhi.n	800d2f0 <CDC_Control_FS+0xac>
 800d25a:	a201      	add	r2, pc, #4	; (adr r2, 800d260 <CDC_Control_FS+0x1c>)
 800d25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d260:	0800d2f1 	.word	0x0800d2f1
 800d264:	0800d2f1 	.word	0x0800d2f1
 800d268:	0800d2f1 	.word	0x0800d2f1
 800d26c:	0800d2f1 	.word	0x0800d2f1
 800d270:	0800d2f1 	.word	0x0800d2f1
 800d274:	0800d2f1 	.word	0x0800d2f1
 800d278:	0800d2f1 	.word	0x0800d2f1
 800d27c:	0800d2f1 	.word	0x0800d2f1
 800d280:	0800d2f1 	.word	0x0800d2f1
 800d284:	0800d2f1 	.word	0x0800d2f1
 800d288:	0800d2f1 	.word	0x0800d2f1
 800d28c:	0800d2f1 	.word	0x0800d2f1
 800d290:	0800d2f1 	.word	0x0800d2f1
 800d294:	0800d2f1 	.word	0x0800d2f1
 800d298:	0800d2f1 	.word	0x0800d2f1
 800d29c:	0800d2f1 	.word	0x0800d2f1
 800d2a0:	0800d2f1 	.word	0x0800d2f1
 800d2a4:	0800d2f1 	.word	0x0800d2f1
 800d2a8:	0800d2f1 	.word	0x0800d2f1
 800d2ac:	0800d2f1 	.word	0x0800d2f1
 800d2b0:	0800d2f1 	.word	0x0800d2f1
 800d2b4:	0800d2f1 	.word	0x0800d2f1
 800d2b8:	0800d2f1 	.word	0x0800d2f1
 800d2bc:	0800d2f1 	.word	0x0800d2f1
 800d2c0:	0800d2f1 	.word	0x0800d2f1
 800d2c4:	0800d2f1 	.word	0x0800d2f1
 800d2c8:	0800d2f1 	.word	0x0800d2f1
 800d2cc:	0800d2f1 	.word	0x0800d2f1
 800d2d0:	0800d2f1 	.word	0x0800d2f1
 800d2d4:	0800d2f1 	.word	0x0800d2f1
 800d2d8:	0800d2f1 	.word	0x0800d2f1
 800d2dc:	0800d2f1 	.word	0x0800d2f1
 800d2e0:	0800d2f1 	.word	0x0800d2f1
 800d2e4:	0800d2f1 	.word	0x0800d2f1
 800d2e8:	0800d2f1 	.word	0x0800d2f1
 800d2ec:	0800d2f1 	.word	0x0800d2f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d2f0:	bf00      	nop
  }

  return (USBD_OK);
 800d2f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	370c      	adds	r7, #12
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bc80      	pop	{r7}
 800d2fc:	4770      	bx	lr
 800d2fe:	bf00      	nop

0800d300 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800d30a:	2300      	movs	r3, #0
 800d30c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800d30e:	2300      	movs	r3, #0
 800d310:	60fb      	str	r3, [r7, #12]
 800d312:	e00c      	b.n	800d32e <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800d314:	4b14      	ldr	r3, [pc, #80]	; (800d368 <CDC_Receive_FS+0x68>)
 800d316:	6818      	ldr	r0, [r3, #0]
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	18d1      	adds	r1, r2, r3
 800d31e:	f107 0208 	add.w	r2, r7, #8
 800d322:	2300      	movs	r3, #0
 800d324:	f7fd fcfc 	bl	800ad20 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	3301      	adds	r3, #1
 800d32c:	60fb      	str	r3, [r7, #12]
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	429a      	cmp	r2, r3
 800d336:	d3ed      	bcc.n	800d314 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d338:	6879      	ldr	r1, [r7, #4]
 800d33a:	480c      	ldr	r0, [pc, #48]	; (800d36c <CDC_Receive_FS+0x6c>)
 800d33c:	f7fb ff05 	bl	800914a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d340:	480a      	ldr	r0, [pc, #40]	; (800d36c <CDC_Receive_FS+0x6c>)
 800d342:	f7fb ff44 	bl	80091ce <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d007      	beq.n	800d35c <CDC_Receive_FS+0x5c>
 800d34c:	4b08      	ldr	r3, [pc, #32]	; (800d370 <CDC_Receive_FS+0x70>)
 800d34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d352:	601a      	str	r2, [r3, #0]
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800d35c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3710      	adds	r7, #16
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	2000248c 	.word	0x2000248c
 800d36c:	20002698 	.word	0x20002698
 800d370:	e000ed04 	.word	0xe000ed04

0800d374 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	460b      	mov	r3, r1
 800d37e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d380:	2300      	movs	r3, #0
 800d382:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d384:	4b0d      	ldr	r3, [pc, #52]	; (800d3bc <CDC_Transmit_FS+0x48>)
 800d386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d38a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d392:	2b00      	cmp	r3, #0
 800d394:	d001      	beq.n	800d39a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d396:	2301      	movs	r3, #1
 800d398:	e00b      	b.n	800d3b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d39a:	887b      	ldrh	r3, [r7, #2]
 800d39c:	461a      	mov	r2, r3
 800d39e:	6879      	ldr	r1, [r7, #4]
 800d3a0:	4806      	ldr	r0, [pc, #24]	; (800d3bc <CDC_Transmit_FS+0x48>)
 800d3a2:	f7fb feb9 	bl	8009118 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d3a6:	4805      	ldr	r0, [pc, #20]	; (800d3bc <CDC_Transmit_FS+0x48>)
 800d3a8:	f7fb fee2 	bl	8009170 <USBD_CDC_TransmitPacket>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20002698 	.word	0x20002698

0800d3c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	6039      	str	r1, [r7, #0]
 800d3ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	2212      	movs	r2, #18
 800d3d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d3d2:	4b03      	ldr	r3, [pc, #12]	; (800d3e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bc80      	pop	{r7}
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop
 800d3e0:	2000015c 	.word	0x2000015c

0800d3e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	6039      	str	r1, [r7, #0]
 800d3ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	2204      	movs	r2, #4
 800d3f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d3f6:	4b03      	ldr	r3, [pc, #12]	; (800d404 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bc80      	pop	{r7}
 800d400:	4770      	bx	lr
 800d402:	bf00      	nop
 800d404:	20000170 	.word	0x20000170

0800d408 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	4603      	mov	r3, r0
 800d410:	6039      	str	r1, [r7, #0]
 800d412:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d414:	79fb      	ldrb	r3, [r7, #7]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d105      	bne.n	800d426 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d41a:	683a      	ldr	r2, [r7, #0]
 800d41c:	4907      	ldr	r1, [pc, #28]	; (800d43c <USBD_FS_ProductStrDescriptor+0x34>)
 800d41e:	4808      	ldr	r0, [pc, #32]	; (800d440 <USBD_FS_ProductStrDescriptor+0x38>)
 800d420:	f7fc febc 	bl	800a19c <USBD_GetString>
 800d424:	e004      	b.n	800d430 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	4904      	ldr	r1, [pc, #16]	; (800d43c <USBD_FS_ProductStrDescriptor+0x34>)
 800d42a:	4805      	ldr	r0, [pc, #20]	; (800d440 <USBD_FS_ProductStrDescriptor+0x38>)
 800d42c:	f7fc feb6 	bl	800a19c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d430:	4b02      	ldr	r3, [pc, #8]	; (800d43c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d432:	4618      	mov	r0, r3
 800d434:	3708      	adds	r7, #8
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	2000312c 	.word	0x2000312c
 800d440:	0800de04 	.word	0x0800de04

0800d444 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	4603      	mov	r3, r0
 800d44c:	6039      	str	r1, [r7, #0]
 800d44e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d450:	683a      	ldr	r2, [r7, #0]
 800d452:	4904      	ldr	r1, [pc, #16]	; (800d464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d454:	4804      	ldr	r0, [pc, #16]	; (800d468 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d456:	f7fc fea1 	bl	800a19c <USBD_GetString>
  return USBD_StrDesc;
 800d45a:	4b02      	ldr	r3, [pc, #8]	; (800d464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3708      	adds	r7, #8
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	2000312c 	.word	0x2000312c
 800d468:	0800de10 	.word	0x0800de10

0800d46c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	4603      	mov	r3, r0
 800d474:	6039      	str	r1, [r7, #0]
 800d476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	221a      	movs	r2, #26
 800d47c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d47e:	f000 f843 	bl	800d508 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d482:	4b02      	ldr	r3, [pc, #8]	; (800d48c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d484:	4618      	mov	r0, r3
 800d486:	3708      	adds	r7, #8
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	20000174 	.word	0x20000174

0800d490 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	4603      	mov	r3, r0
 800d498:	6039      	str	r1, [r7, #0]
 800d49a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d49c:	79fb      	ldrb	r3, [r7, #7]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d105      	bne.n	800d4ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d4a2:	683a      	ldr	r2, [r7, #0]
 800d4a4:	4907      	ldr	r1, [pc, #28]	; (800d4c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d4a6:	4808      	ldr	r0, [pc, #32]	; (800d4c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d4a8:	f7fc fe78 	bl	800a19c <USBD_GetString>
 800d4ac:	e004      	b.n	800d4b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d4ae:	683a      	ldr	r2, [r7, #0]
 800d4b0:	4904      	ldr	r1, [pc, #16]	; (800d4c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d4b2:	4805      	ldr	r0, [pc, #20]	; (800d4c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d4b4:	f7fc fe72 	bl	800a19c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d4b8:	4b02      	ldr	r3, [pc, #8]	; (800d4c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3708      	adds	r7, #8
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	2000312c 	.word	0x2000312c
 800d4c8:	0800de24 	.word	0x0800de24

0800d4cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	6039      	str	r1, [r7, #0]
 800d4d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d4d8:	79fb      	ldrb	r3, [r7, #7]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d105      	bne.n	800d4ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	4907      	ldr	r1, [pc, #28]	; (800d500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d4e2:	4808      	ldr	r0, [pc, #32]	; (800d504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d4e4:	f7fc fe5a 	bl	800a19c <USBD_GetString>
 800d4e8:	e004      	b.n	800d4f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d4ea:	683a      	ldr	r2, [r7, #0]
 800d4ec:	4904      	ldr	r1, [pc, #16]	; (800d500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d4ee:	4805      	ldr	r0, [pc, #20]	; (800d504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d4f0:	f7fc fe54 	bl	800a19c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d4f4:	4b02      	ldr	r3, [pc, #8]	; (800d500 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3708      	adds	r7, #8
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	2000312c 	.word	0x2000312c
 800d504:	0800de30 	.word	0x0800de30

0800d508 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d50e:	4b0f      	ldr	r3, [pc, #60]	; (800d54c <Get_SerialNum+0x44>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d514:	4b0e      	ldr	r3, [pc, #56]	; (800d550 <Get_SerialNum+0x48>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d51a:	4b0e      	ldr	r3, [pc, #56]	; (800d554 <Get_SerialNum+0x4c>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d520:	68fa      	ldr	r2, [r7, #12]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	4413      	add	r3, r2
 800d526:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d009      	beq.n	800d542 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d52e:	2208      	movs	r2, #8
 800d530:	4909      	ldr	r1, [pc, #36]	; (800d558 <Get_SerialNum+0x50>)
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f000 f814 	bl	800d560 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d538:	2204      	movs	r2, #4
 800d53a:	4908      	ldr	r1, [pc, #32]	; (800d55c <Get_SerialNum+0x54>)
 800d53c:	68b8      	ldr	r0, [r7, #8]
 800d53e:	f000 f80f 	bl	800d560 <IntToUnicode>
  }
}
 800d542:	bf00      	nop
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	1ffff7e8 	.word	0x1ffff7e8
 800d550:	1ffff7ec 	.word	0x1ffff7ec
 800d554:	1ffff7f0 	.word	0x1ffff7f0
 800d558:	20000176 	.word	0x20000176
 800d55c:	20000186 	.word	0x20000186

0800d560 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d560:	b480      	push	{r7}
 800d562:	b087      	sub	sp, #28
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	4613      	mov	r3, r2
 800d56c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d56e:	2300      	movs	r3, #0
 800d570:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d572:	2300      	movs	r3, #0
 800d574:	75fb      	strb	r3, [r7, #23]
 800d576:	e027      	b.n	800d5c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	0f1b      	lsrs	r3, r3, #28
 800d57c:	2b09      	cmp	r3, #9
 800d57e:	d80b      	bhi.n	800d598 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	0f1b      	lsrs	r3, r3, #28
 800d584:	b2da      	uxtb	r2, r3
 800d586:	7dfb      	ldrb	r3, [r7, #23]
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	4619      	mov	r1, r3
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	440b      	add	r3, r1
 800d590:	3230      	adds	r2, #48	; 0x30
 800d592:	b2d2      	uxtb	r2, r2
 800d594:	701a      	strb	r2, [r3, #0]
 800d596:	e00a      	b.n	800d5ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	0f1b      	lsrs	r3, r3, #28
 800d59c:	b2da      	uxtb	r2, r3
 800d59e:	7dfb      	ldrb	r3, [r7, #23]
 800d5a0:	005b      	lsls	r3, r3, #1
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	440b      	add	r3, r1
 800d5a8:	3237      	adds	r2, #55	; 0x37
 800d5aa:	b2d2      	uxtb	r2, r2
 800d5ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	011b      	lsls	r3, r3, #4
 800d5b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d5b4:	7dfb      	ldrb	r3, [r7, #23]
 800d5b6:	005b      	lsls	r3, r3, #1
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	68ba      	ldr	r2, [r7, #8]
 800d5bc:	4413      	add	r3, r2
 800d5be:	2200      	movs	r2, #0
 800d5c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d5c2:	7dfb      	ldrb	r3, [r7, #23]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	75fb      	strb	r3, [r7, #23]
 800d5c8:	7dfa      	ldrb	r2, [r7, #23]
 800d5ca:	79fb      	ldrb	r3, [r7, #7]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d3d3      	bcc.n	800d578 <IntToUnicode+0x18>
  }
}
 800d5d0:	bf00      	nop
 800d5d2:	bf00      	nop
 800d5d4:	371c      	adds	r7, #28
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bc80      	pop	{r7}
 800d5da:	4770      	bx	lr

0800d5dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4a0d      	ldr	r2, [pc, #52]	; (800d620 <HAL_PCD_MspInit+0x44>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d113      	bne.n	800d616 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d5ee:	4b0d      	ldr	r3, [pc, #52]	; (800d624 <HAL_PCD_MspInit+0x48>)
 800d5f0:	69db      	ldr	r3, [r3, #28]
 800d5f2:	4a0c      	ldr	r2, [pc, #48]	; (800d624 <HAL_PCD_MspInit+0x48>)
 800d5f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d5f8:	61d3      	str	r3, [r2, #28]
 800d5fa:	4b0a      	ldr	r3, [pc, #40]	; (800d624 <HAL_PCD_MspInit+0x48>)
 800d5fc:	69db      	ldr	r3, [r3, #28]
 800d5fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d602:	60fb      	str	r3, [r7, #12]
 800d604:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800d606:	2200      	movs	r2, #0
 800d608:	2105      	movs	r1, #5
 800d60a:	2014      	movs	r0, #20
 800d60c:	f7f5 fb0b 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d610:	2014      	movs	r0, #20
 800d612:	f7f5 fb24 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d616:	bf00      	nop
 800d618:	3710      	adds	r7, #16
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	40005c00 	.word	0x40005c00
 800d624:	40021000 	.word	0x40021000

0800d628 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d63c:	4619      	mov	r1, r3
 800d63e:	4610      	mov	r0, r2
 800d640:	f7fb fe7b 	bl	800933a <USBD_LL_SetupStage>
}
 800d644:	bf00      	nop
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	460b      	mov	r3, r1
 800d656:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d65e:	78fa      	ldrb	r2, [r7, #3]
 800d660:	6879      	ldr	r1, [r7, #4]
 800d662:	4613      	mov	r3, r2
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	4413      	add	r3, r2
 800d668:	00db      	lsls	r3, r3, #3
 800d66a:	440b      	add	r3, r1
 800d66c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	78fb      	ldrb	r3, [r7, #3]
 800d674:	4619      	mov	r1, r3
 800d676:	f7fb fead 	bl	80093d4 <USBD_LL_DataOutStage>
}
 800d67a:	bf00      	nop
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b082      	sub	sp, #8
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]
 800d68a:	460b      	mov	r3, r1
 800d68c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d694:	78fa      	ldrb	r2, [r7, #3]
 800d696:	6879      	ldr	r1, [r7, #4]
 800d698:	4613      	mov	r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	4413      	add	r3, r2
 800d69e:	00db      	lsls	r3, r3, #3
 800d6a0:	440b      	add	r3, r1
 800d6a2:	333c      	adds	r3, #60	; 0x3c
 800d6a4:	681a      	ldr	r2, [r3, #0]
 800d6a6:	78fb      	ldrb	r3, [r7, #3]
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	f7fb ff04 	bl	80094b6 <USBD_LL_DataInStage>
}
 800d6ae:	bf00      	nop
 800d6b0:	3708      	adds	r7, #8
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b082      	sub	sp, #8
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7fc f814 	bl	80096f2 <USBD_LL_SOF>
}
 800d6ca:	bf00      	nop
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}

0800d6d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6d2:	b580      	push	{r7, lr}
 800d6d4:	b084      	sub	sp, #16
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	689b      	ldr	r3, [r3, #8]
 800d6e2:	2b02      	cmp	r3, #2
 800d6e4:	d001      	beq.n	800d6ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d6e6:	f7f3 faa9 	bl	8000c3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d6f0:	7bfa      	ldrb	r2, [r7, #15]
 800d6f2:	4611      	mov	r1, r2
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fb ffc4 	bl	8009682 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d700:	4618      	mov	r0, r3
 800d702:	f7fb ff7d 	bl	8009600 <USBD_LL_Reset>
}
 800d706:	bf00      	nop
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
	...

0800d710 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fb ffbe 	bl	80096a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	699b      	ldr	r3, [r3, #24]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d005      	beq.n	800d738 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d72c:	4b04      	ldr	r3, [pc, #16]	; (800d740 <HAL_PCD_SuspendCallback+0x30>)
 800d72e:	691b      	ldr	r3, [r3, #16]
 800d730:	4a03      	ldr	r2, [pc, #12]	; (800d740 <HAL_PCD_SuspendCallback+0x30>)
 800d732:	f043 0306 	orr.w	r3, r3, #6
 800d736:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d738:	bf00      	nop
 800d73a:	3708      	adds	r7, #8
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	e000ed00 	.word	0xe000ed00

0800d744 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d752:	4618      	mov	r0, r3
 800d754:	f7fb ffb8 	bl	80096c8 <USBD_LL_Resume>
}
 800d758:	bf00      	nop
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d768:	4a28      	ldr	r2, [pc, #160]	; (800d80c <USBD_LL_Init+0xac>)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	4a26      	ldr	r2, [pc, #152]	; (800d80c <USBD_LL_Init+0xac>)
 800d774:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d778:	4b24      	ldr	r3, [pc, #144]	; (800d80c <USBD_LL_Init+0xac>)
 800d77a:	4a25      	ldr	r2, [pc, #148]	; (800d810 <USBD_LL_Init+0xb0>)
 800d77c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d77e:	4b23      	ldr	r3, [pc, #140]	; (800d80c <USBD_LL_Init+0xac>)
 800d780:	2208      	movs	r2, #8
 800d782:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d784:	4b21      	ldr	r3, [pc, #132]	; (800d80c <USBD_LL_Init+0xac>)
 800d786:	2202      	movs	r2, #2
 800d788:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d78a:	4b20      	ldr	r3, [pc, #128]	; (800d80c <USBD_LL_Init+0xac>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d790:	4b1e      	ldr	r3, [pc, #120]	; (800d80c <USBD_LL_Init+0xac>)
 800d792:	2200      	movs	r2, #0
 800d794:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d796:	4b1d      	ldr	r3, [pc, #116]	; (800d80c <USBD_LL_Init+0xac>)
 800d798:	2200      	movs	r2, #0
 800d79a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d79c:	481b      	ldr	r0, [pc, #108]	; (800d80c <USBD_LL_Init+0xac>)
 800d79e:	f7f5 fd0b 	bl	80031b8 <HAL_PCD_Init>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d001      	beq.n	800d7ac <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d7a8:	f7f3 fa48 	bl	8000c3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d7b2:	2318      	movs	r3, #24
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	2100      	movs	r1, #0
 800d7b8:	f7f7 f981 	bl	8004abe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d7c2:	2358      	movs	r3, #88	; 0x58
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	2180      	movs	r1, #128	; 0x80
 800d7c8:	f7f7 f979 	bl	8004abe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d7d2:	23c0      	movs	r3, #192	; 0xc0
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	2181      	movs	r1, #129	; 0x81
 800d7d8:	f7f7 f971 	bl	8004abe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d7e2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	2101      	movs	r1, #1
 800d7ea:	f7f7 f968 	bl	8004abe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d7f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	2182      	movs	r1, #130	; 0x82
 800d7fc:	f7f7 f95f 	bl	8004abe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d800:	2300      	movs	r3, #0
}
 800d802:	4618      	mov	r0, r3
 800d804:	3708      	adds	r7, #8
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	2000332c 	.word	0x2000332c
 800d810:	40005c00 	.word	0x40005c00

0800d814 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d81c:	2300      	movs	r3, #0
 800d81e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d820:	2300      	movs	r3, #0
 800d822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7f5 fdcf 	bl	80033ce <HAL_PCD_Start>
 800d830:	4603      	mov	r3, r0
 800d832:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d834:	7bfb      	ldrb	r3, [r7, #15]
 800d836:	4618      	mov	r0, r3
 800d838:	f000 f94e 	bl	800dad8 <USBD_Get_USB_Status>
 800d83c:	4603      	mov	r3, r0
 800d83e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d840:	7bbb      	ldrb	r3, [r7, #14]
}
 800d842:	4618      	mov	r0, r3
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d84a:	b580      	push	{r7, lr}
 800d84c:	b084      	sub	sp, #16
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
 800d852:	4608      	mov	r0, r1
 800d854:	4611      	mov	r1, r2
 800d856:	461a      	mov	r2, r3
 800d858:	4603      	mov	r3, r0
 800d85a:	70fb      	strb	r3, [r7, #3]
 800d85c:	460b      	mov	r3, r1
 800d85e:	70bb      	strb	r3, [r7, #2]
 800d860:	4613      	mov	r3, r2
 800d862:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d864:	2300      	movs	r3, #0
 800d866:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d868:	2300      	movs	r3, #0
 800d86a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d872:	78bb      	ldrb	r3, [r7, #2]
 800d874:	883a      	ldrh	r2, [r7, #0]
 800d876:	78f9      	ldrb	r1, [r7, #3]
 800d878:	f7f5 ff49 	bl	800370e <HAL_PCD_EP_Open>
 800d87c:	4603      	mov	r3, r0
 800d87e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d880:	7bfb      	ldrb	r3, [r7, #15]
 800d882:	4618      	mov	r0, r3
 800d884:	f000 f928 	bl	800dad8 <USBD_Get_USB_Status>
 800d888:	4603      	mov	r3, r0
 800d88a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d88c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3710      	adds	r7, #16
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b084      	sub	sp, #16
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
 800d89e:	460b      	mov	r3, r1
 800d8a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d8b0:	78fa      	ldrb	r2, [r7, #3]
 800d8b2:	4611      	mov	r1, r2
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7f5 ff90 	bl	80037da <HAL_PCD_EP_Close>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8be:	7bfb      	ldrb	r3, [r7, #15]
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f000 f909 	bl	800dad8 <USBD_Get_USB_Status>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3710      	adds	r7, #16
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	460b      	mov	r3, r1
 800d8de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d8ee:	78fa      	ldrb	r2, [r7, #3]
 800d8f0:	4611      	mov	r1, r2
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7f6 f850 	bl	8003998 <HAL_PCD_EP_SetStall>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8fc:	7bfb      	ldrb	r3, [r7, #15]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f000 f8ea 	bl	800dad8 <USBD_Get_USB_Status>
 800d904:	4603      	mov	r3, r0
 800d906:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d908:	7bbb      	ldrb	r3, [r7, #14]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b084      	sub	sp, #16
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
 800d91a:	460b      	mov	r3, r1
 800d91c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d91e:	2300      	movs	r3, #0
 800d920:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d922:	2300      	movs	r3, #0
 800d924:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d92c:	78fa      	ldrb	r2, [r7, #3]
 800d92e:	4611      	mov	r1, r2
 800d930:	4618      	mov	r0, r3
 800d932:	f7f6 f891 	bl	8003a58 <HAL_PCD_EP_ClrStall>
 800d936:	4603      	mov	r3, r0
 800d938:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d93a:	7bfb      	ldrb	r3, [r7, #15]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f000 f8cb 	bl	800dad8 <USBD_Get_USB_Status>
 800d942:	4603      	mov	r3, r0
 800d944:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d946:	7bbb      	ldrb	r3, [r7, #14]
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3710      	adds	r7, #16
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d950:	b480      	push	{r7}
 800d952:	b085      	sub	sp, #20
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	460b      	mov	r3, r1
 800d95a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d962:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d964:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	da0c      	bge.n	800d986 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d96c:	78fb      	ldrb	r3, [r7, #3]
 800d96e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d972:	68f9      	ldr	r1, [r7, #12]
 800d974:	1c5a      	adds	r2, r3, #1
 800d976:	4613      	mov	r3, r2
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	4413      	add	r3, r2
 800d97c:	00db      	lsls	r3, r3, #3
 800d97e:	440b      	add	r3, r1
 800d980:	3302      	adds	r3, #2
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	e00b      	b.n	800d99e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d986:	78fb      	ldrb	r3, [r7, #3]
 800d988:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d98c:	68f9      	ldr	r1, [r7, #12]
 800d98e:	4613      	mov	r3, r2
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	4413      	add	r3, r2
 800d994:	00db      	lsls	r3, r3, #3
 800d996:	440b      	add	r3, r1
 800d998:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d99c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3714      	adds	r7, #20
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bc80      	pop	{r7}
 800d9a6:	4770      	bx	lr

0800d9a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d9c2:	78fa      	ldrb	r2, [r7, #3]
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7f5 fe7c 	bl	80036c4 <HAL_PCD_SetAddress>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9d0:	7bfb      	ldrb	r3, [r7, #15]
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f000 f880 	bl	800dad8 <USBD_Get_USB_Status>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3710      	adds	r7, #16
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b086      	sub	sp, #24
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	60f8      	str	r0, [r7, #12]
 800d9ee:	607a      	str	r2, [r7, #4]
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	72fb      	strb	r3, [r7, #11]
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9fe:	2300      	movs	r3, #0
 800da00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da08:	893b      	ldrh	r3, [r7, #8]
 800da0a:	7af9      	ldrb	r1, [r7, #11]
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	f7f5 ff80 	bl	8003912 <HAL_PCD_EP_Transmit>
 800da12:	4603      	mov	r3, r0
 800da14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da16:	7dfb      	ldrb	r3, [r7, #23]
 800da18:	4618      	mov	r0, r3
 800da1a:	f000 f85d 	bl	800dad8 <USBD_Get_USB_Status>
 800da1e:	4603      	mov	r3, r0
 800da20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da22:	7dbb      	ldrb	r3, [r7, #22]
}
 800da24:	4618      	mov	r0, r3
 800da26:	3718      	adds	r7, #24
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	607a      	str	r2, [r7, #4]
 800da36:	461a      	mov	r2, r3
 800da38:	460b      	mov	r3, r1
 800da3a:	72fb      	strb	r3, [r7, #11]
 800da3c:	4613      	mov	r3, r2
 800da3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da40:	2300      	movs	r3, #0
 800da42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da44:	2300      	movs	r3, #0
 800da46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da4e:	893b      	ldrh	r3, [r7, #8]
 800da50:	7af9      	ldrb	r1, [r7, #11]
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	f7f5 ff09 	bl	800386a <HAL_PCD_EP_Receive>
 800da58:	4603      	mov	r3, r0
 800da5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da5c:	7dfb      	ldrb	r3, [r7, #23]
 800da5e:	4618      	mov	r0, r3
 800da60:	f000 f83a 	bl	800dad8 <USBD_Get_USB_Status>
 800da64:	4603      	mov	r3, r0
 800da66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da68:	7dbb      	ldrb	r3, [r7, #22]
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3718      	adds	r7, #24
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da72:	b580      	push	{r7, lr}
 800da74:	b082      	sub	sp, #8
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
 800da7a:	460b      	mov	r3, r1
 800da7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da84:	78fa      	ldrb	r2, [r7, #3]
 800da86:	4611      	mov	r1, r2
 800da88:	4618      	mov	r0, r3
 800da8a:	f7f5 ff2b 	bl	80038e4 <HAL_PCD_EP_GetRxCount>
 800da8e:	4603      	mov	r3, r0
}
 800da90:	4618      	mov	r0, r3
 800da92:	3708      	adds	r7, #8
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800daa0:	4b02      	ldr	r3, [pc, #8]	; (800daac <USBD_static_malloc+0x14>)
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	370c      	adds	r7, #12
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bc80      	pop	{r7}
 800daaa:	4770      	bx	lr
 800daac:	20002258 	.word	0x20002258

0800dab0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b083      	sub	sp, #12
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]

}
 800dab8:	bf00      	nop
 800daba:	370c      	adds	r7, #12
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bc80      	pop	{r7}
 800dac0:	4770      	bx	lr

0800dac2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dac2:	b480      	push	{r7}
 800dac4:	b083      	sub	sp, #12
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
 800daca:	460b      	mov	r3, r1
 800dacc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800dace:	bf00      	nop
 800dad0:	370c      	adds	r7, #12
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bc80      	pop	{r7}
 800dad6:	4770      	bx	lr

0800dad8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
 800dade:	4603      	mov	r3, r0
 800dae0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dae2:	2300      	movs	r3, #0
 800dae4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dae6:	79fb      	ldrb	r3, [r7, #7]
 800dae8:	2b03      	cmp	r3, #3
 800daea:	d817      	bhi.n	800db1c <USBD_Get_USB_Status+0x44>
 800daec:	a201      	add	r2, pc, #4	; (adr r2, 800daf4 <USBD_Get_USB_Status+0x1c>)
 800daee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf2:	bf00      	nop
 800daf4:	0800db05 	.word	0x0800db05
 800daf8:	0800db0b 	.word	0x0800db0b
 800dafc:	0800db11 	.word	0x0800db11
 800db00:	0800db17 	.word	0x0800db17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db04:	2300      	movs	r3, #0
 800db06:	73fb      	strb	r3, [r7, #15]
    break;
 800db08:	e00b      	b.n	800db22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db0a:	2302      	movs	r3, #2
 800db0c:	73fb      	strb	r3, [r7, #15]
    break;
 800db0e:	e008      	b.n	800db22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db10:	2301      	movs	r3, #1
 800db12:	73fb      	strb	r3, [r7, #15]
    break;
 800db14:	e005      	b.n	800db22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db16:	2302      	movs	r3, #2
 800db18:	73fb      	strb	r3, [r7, #15]
    break;
 800db1a:	e002      	b.n	800db22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db1c:	2302      	movs	r3, #2
 800db1e:	73fb      	strb	r3, [r7, #15]
    break;
 800db20:	bf00      	nop
  }
  return usb_status;
 800db22:	7bfb      	ldrb	r3, [r7, #15]
}
 800db24:	4618      	mov	r0, r3
 800db26:	3714      	adds	r7, #20
 800db28:	46bd      	mov	sp, r7
 800db2a:	bc80      	pop	{r7}
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop

0800db30 <__libc_init_array>:
 800db30:	b570      	push	{r4, r5, r6, lr}
 800db32:	2600      	movs	r6, #0
 800db34:	4d0c      	ldr	r5, [pc, #48]	; (800db68 <__libc_init_array+0x38>)
 800db36:	4c0d      	ldr	r4, [pc, #52]	; (800db6c <__libc_init_array+0x3c>)
 800db38:	1b64      	subs	r4, r4, r5
 800db3a:	10a4      	asrs	r4, r4, #2
 800db3c:	42a6      	cmp	r6, r4
 800db3e:	d109      	bne.n	800db54 <__libc_init_array+0x24>
 800db40:	f000 f862 	bl	800dc08 <_init>
 800db44:	2600      	movs	r6, #0
 800db46:	4d0a      	ldr	r5, [pc, #40]	; (800db70 <__libc_init_array+0x40>)
 800db48:	4c0a      	ldr	r4, [pc, #40]	; (800db74 <__libc_init_array+0x44>)
 800db4a:	1b64      	subs	r4, r4, r5
 800db4c:	10a4      	asrs	r4, r4, #2
 800db4e:	42a6      	cmp	r6, r4
 800db50:	d105      	bne.n	800db5e <__libc_init_array+0x2e>
 800db52:	bd70      	pop	{r4, r5, r6, pc}
 800db54:	f855 3b04 	ldr.w	r3, [r5], #4
 800db58:	4798      	blx	r3
 800db5a:	3601      	adds	r6, #1
 800db5c:	e7ee      	b.n	800db3c <__libc_init_array+0xc>
 800db5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800db62:	4798      	blx	r3
 800db64:	3601      	adds	r6, #1
 800db66:	e7f2      	b.n	800db4e <__libc_init_array+0x1e>
 800db68:	0800e364 	.word	0x0800e364
 800db6c:	0800e364 	.word	0x0800e364
 800db70:	0800e364 	.word	0x0800e364
 800db74:	0800e368 	.word	0x0800e368

0800db78 <memcpy>:
 800db78:	440a      	add	r2, r1
 800db7a:	4291      	cmp	r1, r2
 800db7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800db80:	d100      	bne.n	800db84 <memcpy+0xc>
 800db82:	4770      	bx	lr
 800db84:	b510      	push	{r4, lr}
 800db86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db8a:	4291      	cmp	r1, r2
 800db8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db90:	d1f9      	bne.n	800db86 <memcpy+0xe>
 800db92:	bd10      	pop	{r4, pc}

0800db94 <memmove>:
 800db94:	4288      	cmp	r0, r1
 800db96:	b510      	push	{r4, lr}
 800db98:	eb01 0402 	add.w	r4, r1, r2
 800db9c:	d902      	bls.n	800dba4 <memmove+0x10>
 800db9e:	4284      	cmp	r4, r0
 800dba0:	4623      	mov	r3, r4
 800dba2:	d807      	bhi.n	800dbb4 <memmove+0x20>
 800dba4:	1e43      	subs	r3, r0, #1
 800dba6:	42a1      	cmp	r1, r4
 800dba8:	d008      	beq.n	800dbbc <memmove+0x28>
 800dbaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbb2:	e7f8      	b.n	800dba6 <memmove+0x12>
 800dbb4:	4601      	mov	r1, r0
 800dbb6:	4402      	add	r2, r0
 800dbb8:	428a      	cmp	r2, r1
 800dbba:	d100      	bne.n	800dbbe <memmove+0x2a>
 800dbbc:	bd10      	pop	{r4, pc}
 800dbbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbc6:	e7f7      	b.n	800dbb8 <memmove+0x24>

0800dbc8 <memset>:
 800dbc8:	4603      	mov	r3, r0
 800dbca:	4402      	add	r2, r0
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d100      	bne.n	800dbd2 <memset+0xa>
 800dbd0:	4770      	bx	lr
 800dbd2:	f803 1b01 	strb.w	r1, [r3], #1
 800dbd6:	e7f9      	b.n	800dbcc <memset+0x4>

0800dbd8 <strstr>:
 800dbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbda:	780c      	ldrb	r4, [r1, #0]
 800dbdc:	b164      	cbz	r4, 800dbf8 <strstr+0x20>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	781a      	ldrb	r2, [r3, #0]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	1c5e      	adds	r6, r3, #1
 800dbe6:	b90a      	cbnz	r2, 800dbec <strstr+0x14>
 800dbe8:	4610      	mov	r0, r2
 800dbea:	e005      	b.n	800dbf8 <strstr+0x20>
 800dbec:	4294      	cmp	r4, r2
 800dbee:	d108      	bne.n	800dc02 <strstr+0x2a>
 800dbf0:	460d      	mov	r5, r1
 800dbf2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800dbf6:	b902      	cbnz	r2, 800dbfa <strstr+0x22>
 800dbf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbfa:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800dbfe:	4297      	cmp	r7, r2
 800dc00:	d0f7      	beq.n	800dbf2 <strstr+0x1a>
 800dc02:	4633      	mov	r3, r6
 800dc04:	e7ec      	b.n	800dbe0 <strstr+0x8>
	...

0800dc08 <_init>:
 800dc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc0a:	bf00      	nop
 800dc0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc0e:	bc08      	pop	{r3}
 800dc10:	469e      	mov	lr, r3
 800dc12:	4770      	bx	lr

0800dc14 <_fini>:
 800dc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc16:	bf00      	nop
 800dc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc1a:	bc08      	pop	{r3}
 800dc1c:	469e      	mov	lr, r3
 800dc1e:	4770      	bx	lr
