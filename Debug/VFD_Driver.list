
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a094  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800a1a4  0800a1a4  0001a1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a284  0800a284  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800a284  0800a284  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a284  0800a284  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a284  0800a284  0001a284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a288  0800a288  0001a288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800a28c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b5c  20000180  0800a40c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002cdc  0800a40c  00022cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000232f5  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b4a  00000000  00000000  0004349e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  00047fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001560  00000000  00000000  00049750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c708  00000000  00000000  0004acb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c05c  00000000  00000000  000673b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096d9e  00000000  00000000  00083414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a1b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fc8  00000000  00000000  0011a208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a18c 	.word	0x0800a18c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800a18c 	.word	0x0800a18c

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000154:	4a08      	ldr	r2, [pc, #32]	; (8000178 <MX_FREERTOS_Init+0x28>)
 8000156:	2100      	movs	r1, #0
 8000158:	4808      	ldr	r0, [pc, #32]	; (800017c <MX_FREERTOS_Init+0x2c>)
 800015a:	f006 fef7 	bl	8006f4c <osThreadNew>
 800015e:	4603      	mov	r3, r0
 8000160:	4a07      	ldr	r2, [pc, #28]	; (8000180 <MX_FREERTOS_Init+0x30>)
 8000162:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 8000164:	4a07      	ldr	r2, [pc, #28]	; (8000184 <MX_FREERTOS_Init+0x34>)
 8000166:	2100      	movs	r1, #0
 8000168:	4807      	ldr	r0, [pc, #28]	; (8000188 <MX_FREERTOS_Init+0x38>)
 800016a:	f006 feef 	bl	8006f4c <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a06      	ldr	r2, [pc, #24]	; (800018c <MX_FREERTOS_Init+0x3c>)
 8000172:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	0800a224 	.word	0x0800a224
 800017c:	08000191 	.word	0x08000191
 8000180:	20001cc8 	.word	0x20001cc8
 8000184:	0800a248 	.word	0x0800a248
 8000188:	080001b5 	.word	0x080001b5
 800018c:	20001ccc 	.word	0x20001ccc

08000190 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000198:	f009 fb48 	bl	800982c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 800019c:	2201      	movs	r2, #1
 800019e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001a2:	4803      	ldr	r0, [pc, #12]	; (80001b0 <StartDefaultTask+0x20>)
 80001a4:	f000 fc74 	bl	8000a90 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80001a8:	2001      	movs	r0, #1
 80001aa:	f006 ff79 	bl	80070a0 <osDelay>
 80001ae:	e7fb      	b.n	80001a8 <StartDefaultTask+0x18>
 80001b0:	40010800 	.word	0x40010800

080001b4 <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <StartLEDheartbeat+0x1c>)
 80001c2:	f000 fc7d 	bl	8000ac0 <HAL_GPIO_TogglePin>
	  osDelay(500);
 80001c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001ca:	f006 ff69 	bl	80070a0 <osDelay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001ce:	e7f5      	b.n	80001bc <StartLEDheartbeat+0x8>
 80001d0:	40011000 	.word	0x40011000

080001d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 0310 	add.w	r3, r7, #16
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e8:	4b28      	ldr	r3, [pc, #160]	; (800028c <MX_GPIO_Init+0xb8>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <MX_GPIO_Init+0xb8>)
 80001ee:	f043 0310 	orr.w	r3, r3, #16
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b25      	ldr	r3, [pc, #148]	; (800028c <MX_GPIO_Init+0xb8>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f003 0310 	and.w	r3, r3, #16
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000200:	4b22      	ldr	r3, [pc, #136]	; (800028c <MX_GPIO_Init+0xb8>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a21      	ldr	r2, [pc, #132]	; (800028c <MX_GPIO_Init+0xb8>)
 8000206:	f043 0320 	orr.w	r3, r3, #32
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b1f      	ldr	r3, [pc, #124]	; (800028c <MX_GPIO_Init+0xb8>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0320 	and.w	r3, r3, #32
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000218:	4b1c      	ldr	r3, [pc, #112]	; (800028c <MX_GPIO_Init+0xb8>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a1b      	ldr	r2, [pc, #108]	; (800028c <MX_GPIO_Init+0xb8>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6193      	str	r3, [r2, #24]
 8000224:	4b19      	ldr	r3, [pc, #100]	; (800028c <MX_GPIO_Init+0xb8>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	f003 0304 	and.w	r3, r3, #4
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000236:	4816      	ldr	r0, [pc, #88]	; (8000290 <MX_GPIO_Init+0xbc>)
 8000238:	f000 fc2a 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 800023c:	2200      	movs	r2, #0
 800023e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <MX_GPIO_Init+0xc0>)
 8000244:	f000 fc24 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800024c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024e:	2301      	movs	r3, #1
 8000250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000252:	2300      	movs	r3, #0
 8000254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000256:	2302      	movs	r3, #2
 8000258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	4619      	mov	r1, r3
 8000260:	480b      	ldr	r0, [pc, #44]	; (8000290 <MX_GPIO_Init+0xbc>)
 8000262:	f000 fa91 	bl	8000788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800026a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026c:	2301      	movs	r3, #1
 800026e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000270:	2300      	movs	r3, #0
 8000272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000274:	2302      	movs	r3, #2
 8000276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000278:	f107 0310 	add.w	r3, r7, #16
 800027c:	4619      	mov	r1, r3
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <MX_GPIO_Init+0xc0>)
 8000280:	f000 fa82 	bl	8000788 <HAL_GPIO_Init>

}
 8000284:	bf00      	nop
 8000286:	3720      	adds	r7, #32
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40021000 	.word	0x40021000
 8000290:	40011000 	.word	0x40011000
 8000294:	40010800 	.word	0x40010800

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f000 f962 	bl	8000564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f809 	bl	80002b6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f7ff ff96 	bl	80001d4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80002a8:	f006 fdea 	bl	8006e80 <osKernelInitialize>
  MX_FREERTOS_Init();
 80002ac:	f7ff ff50 	bl	8000150 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80002b0:	f006 fe18 	bl	8006ee4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b4:	e7fe      	b.n	80002b4 <main+0x1c>

080002b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b6:	b580      	push	{r7, lr}
 80002b8:	b094      	sub	sp, #80	; 0x50
 80002ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c0:	2228      	movs	r2, #40	; 0x28
 80002c2:	2100      	movs	r1, #0
 80002c4:	4618      	mov	r0, r3
 80002c6:	f009 ff59 	bl	800a17c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ca:	f107 0314 	add.w	r3, r7, #20
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e6:	2301      	movs	r3, #1
 80002e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f4:	2301      	movs	r3, #1
 80002f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f8:	2302      	movs	r3, #2
 80002fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000300:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000302:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000306:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800030c:	4618      	mov	r0, r3
 800030e:	f002 f8b5 	bl	800247c <HAL_RCC_OscConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000318:	f000 f83a 	bl	8000390 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	230f      	movs	r3, #15
 800031e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000320:	2302      	movs	r3, #2
 8000322:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800032c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000332:	f107 0314 	add.w	r3, r7, #20
 8000336:	2101      	movs	r1, #1
 8000338:	4618      	mov	r0, r3
 800033a:	f002 fb1f 	bl	800297c <HAL_RCC_ClockConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000344:	f000 f824 	bl	8000390 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000348:	2310      	movs	r3, #16
 800034a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800034c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000350:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f002 fcc7 	bl	8002ce8 <HAL_RCCEx_PeriphCLKConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000360:	f000 f816 	bl	8000390 <Error_Handler>
  }
}
 8000364:	bf00      	nop
 8000366:	3750      	adds	r7, #80	; 0x50
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a04      	ldr	r2, [pc, #16]	; (800038c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d101      	bne.n	8000382 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800037e:	f000 f907 	bl	8000590 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40012c00 	.word	0x40012c00

08000390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000394:	b672      	cpsid	i
}
 8000396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000398:	e7fe      	b.n	8000398 <Error_Handler+0x8>
	...

0800039c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003a2:	4b18      	ldr	r3, [pc, #96]	; (8000404 <HAL_MspInit+0x68>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a17      	ldr	r2, [pc, #92]	; (8000404 <HAL_MspInit+0x68>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <HAL_MspInit+0x68>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <HAL_MspInit+0x68>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	4a11      	ldr	r2, [pc, #68]	; (8000404 <HAL_MspInit+0x68>)
 80003c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c4:	61d3      	str	r3, [r2, #28]
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <HAL_MspInit+0x68>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	210f      	movs	r1, #15
 80003d6:	f06f 0001 	mvn.w	r0, #1
 80003da:	f000 f9aa 	bl	8000732 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003de:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <HAL_MspInit+0x6c>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	4a04      	ldr	r2, [pc, #16]	; (8000408 <HAL_MspInit+0x6c>)
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fa:	bf00      	nop
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000
 8000408:	40010000 	.word	0x40010000

0800040c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08c      	sub	sp, #48	; 0x30
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800041c:	2200      	movs	r2, #0
 800041e:	6879      	ldr	r1, [r7, #4]
 8000420:	2019      	movs	r0, #25
 8000422:	f000 f986 	bl	8000732 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000426:	2019      	movs	r0, #25
 8000428:	f000 f99f 	bl	800076a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800042c:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <HAL_InitTick+0x9c>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a1d      	ldr	r2, [pc, #116]	; (80004a8 <HAL_InitTick+0x9c>)
 8000432:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <HAL_InitTick+0x9c>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000444:	f107 0210 	add.w	r2, r7, #16
 8000448:	f107 0314 	add.w	r3, r7, #20
 800044c:	4611      	mov	r1, r2
 800044e:	4618      	mov	r0, r3
 8000450:	f002 fbfc 	bl	8002c4c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000454:	f002 fbe6 	bl	8002c24 <HAL_RCC_GetPCLK2Freq>
 8000458:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800045a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800045c:	4a13      	ldr	r2, [pc, #76]	; (80004ac <HAL_InitTick+0xa0>)
 800045e:	fba2 2303 	umull	r2, r3, r2, r3
 8000462:	0c9b      	lsrs	r3, r3, #18
 8000464:	3b01      	subs	r3, #1
 8000466:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <HAL_InitTick+0xa4>)
 800046a:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <HAL_InitTick+0xa8>)
 800046c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800046e:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <HAL_InitTick+0xa4>)
 8000470:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000474:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <HAL_InitTick+0xa4>)
 8000478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800047a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <HAL_InitTick+0xa4>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <HAL_InitTick+0xa4>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000488:	4809      	ldr	r0, [pc, #36]	; (80004b0 <HAL_InitTick+0xa4>)
 800048a:	f002 fce3 	bl	8002e54 <HAL_TIM_Base_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d104      	bne.n	800049e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000494:	4806      	ldr	r0, [pc, #24]	; (80004b0 <HAL_InitTick+0xa4>)
 8000496:	f002 fd35 	bl	8002f04 <HAL_TIM_Base_Start_IT>
 800049a:	4603      	mov	r3, r0
 800049c:	e000      	b.n	80004a0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800049e:	2301      	movs	r3, #1
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3730      	adds	r7, #48	; 0x30
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40021000 	.word	0x40021000
 80004ac:	431bde83 	.word	0x431bde83
 80004b0:	20001cd0 	.word	0x20001cd0
 80004b4:	40012c00 	.word	0x40012c00

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <NMI_Handler+0x4>

080004be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <HardFault_Handler+0x4>

080004c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <MemManage_Handler+0x4>

080004ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <BusFault_Handler+0x4>

080004d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <UsageFault_Handler+0x4>

080004d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
	...

080004e4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004e8:	4802      	ldr	r0, [pc, #8]	; (80004f4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004ea:	f000 fc33 	bl	8000d54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200029f0 	.word	0x200029f0

080004f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <TIM1_UP_IRQHandler+0x10>)
 80004fe:	f002 fd53 	bl	8002fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20001cd0 	.word	0x20001cd0

0800050c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr

08000518 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800051a:	490d      	ldr	r1, [pc, #52]	; (8000550 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000520:	e002      	b.n	8000528 <LoopCopyDataInit>

08000522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000526:	3304      	adds	r3, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800052c:	d3f9      	bcc.n	8000522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052e:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000530:	4c0a      	ldr	r4, [pc, #40]	; (800055c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000534:	e001      	b.n	800053a <LoopFillZerobss>

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000538:	3204      	adds	r2, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800053e:	f7ff ffe5 	bl	800050c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000542:	f009 fde9 	bl	800a118 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000546:	f7ff fea7 	bl	8000298 <main>
  bx lr
 800054a:	4770      	bx	lr
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000554:	0800a28c 	.word	0x0800a28c
  ldr r2, =_sbss
 8000558:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800055c:	20002cdc 	.word	0x20002cdc

08000560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC1_2_IRQHandler>
	...

08000564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_Init+0x28>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <HAL_Init+0x28>)
 800056e:	f043 0310 	orr.w	r3, r3, #16
 8000572:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000574:	2003      	movs	r0, #3
 8000576:	f000 f8d1 	bl	800071c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800057a:	2000      	movs	r0, #0
 800057c:	f7ff ff46 	bl	800040c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000580:	f7ff ff0c 	bl	800039c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40022000 	.word	0x40022000

08000590 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <HAL_IncTick+0x1c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <HAL_IncTick+0x20>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a03      	ldr	r2, [pc, #12]	; (80005b0 <HAL_IncTick+0x20>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	20000008 	.word	0x20000008
 80005b0:	20001d18 	.word	0x20001d18

080005b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return uwTick;
 80005b8:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <HAL_GetTick+0x10>)
 80005ba:	681b      	ldr	r3, [r3, #0]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	20001d18 	.word	0x20001d18

080005c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <__NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	2b00      	cmp	r3, #0
 800063c:	db0b      	blt.n	8000656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	f003 021f 	and.w	r2, r3, #31
 8000644:	4906      	ldr	r1, [pc, #24]	; (8000660 <__NVIC_EnableIRQ+0x34>)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	095b      	lsrs	r3, r3, #5
 800064c:	2001      	movs	r0, #1
 800064e:	fa00 f202 	lsl.w	r2, r0, r2
 8000652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	e000e100 	.word	0xe000e100

08000664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	db0a      	blt.n	800068e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	b2da      	uxtb	r2, r3
 800067c:	490c      	ldr	r1, [pc, #48]	; (80006b0 <__NVIC_SetPriority+0x4c>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800068c:	e00a      	b.n	80006a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <__NVIC_SetPriority+0x50>)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	f003 030f 	and.w	r3, r3, #15
 800069a:	3b04      	subs	r3, #4
 800069c:	0112      	lsls	r2, r2, #4
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	440b      	add	r3, r1
 80006a2:	761a      	strb	r2, [r3, #24]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000e100 	.word	0xe000e100
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	f1c3 0307 	rsb	r3, r3, #7
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	bf28      	it	cs
 80006d6:	2304      	movcs	r3, #4
 80006d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3304      	adds	r3, #4
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d902      	bls.n	80006e8 <NVIC_EncodePriority+0x30>
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3b03      	subs	r3, #3
 80006e6:	e000      	b.n	80006ea <NVIC_EncodePriority+0x32>
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	f04f 32ff 	mov.w	r2, #4294967295
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43da      	mvns	r2, r3
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	401a      	ands	r2, r3
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	f04f 31ff 	mov.w	r1, #4294967295
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	43d9      	mvns	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	4313      	orrs	r3, r2
         );
}
 8000712:	4618      	mov	r0, r3
 8000714:	3724      	adds	r7, #36	; 0x24
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff4f 	bl	80005c8 <__NVIC_SetPriorityGrouping>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000732:	b580      	push	{r7, lr}
 8000734:	b086      	sub	sp, #24
 8000736:	af00      	add	r7, sp, #0
 8000738:	4603      	mov	r3, r0
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000744:	f7ff ff64 	bl	8000610 <__NVIC_GetPriorityGrouping>
 8000748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	68b9      	ldr	r1, [r7, #8]
 800074e:	6978      	ldr	r0, [r7, #20]
 8000750:	f7ff ffb2 	bl	80006b8 <NVIC_EncodePriority>
 8000754:	4602      	mov	r2, r0
 8000756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff81 	bl	8000664 <__NVIC_SetPriority>
}
 8000762:	bf00      	nop
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff57 	bl	800062c <__NVIC_EnableIRQ>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000788:	b480      	push	{r7}
 800078a:	b08b      	sub	sp, #44	; 0x2c
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800079a:	e169      	b.n	8000a70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800079c:	2201      	movs	r2, #1
 800079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	69fa      	ldr	r2, [r7, #28]
 80007ac:	4013      	ands	r3, r2
 80007ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007b0:	69ba      	ldr	r2, [r7, #24]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	f040 8158 	bne.w	8000a6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	4a9a      	ldr	r2, [pc, #616]	; (8000a28 <HAL_GPIO_Init+0x2a0>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d05e      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
 80007c4:	4a98      	ldr	r2, [pc, #608]	; (8000a28 <HAL_GPIO_Init+0x2a0>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d875      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 80007ca:	4a98      	ldr	r2, [pc, #608]	; (8000a2c <HAL_GPIO_Init+0x2a4>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d058      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
 80007d0:	4a96      	ldr	r2, [pc, #600]	; (8000a2c <HAL_GPIO_Init+0x2a4>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d86f      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 80007d6:	4a96      	ldr	r2, [pc, #600]	; (8000a30 <HAL_GPIO_Init+0x2a8>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d052      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
 80007dc:	4a94      	ldr	r2, [pc, #592]	; (8000a30 <HAL_GPIO_Init+0x2a8>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d869      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 80007e2:	4a94      	ldr	r2, [pc, #592]	; (8000a34 <HAL_GPIO_Init+0x2ac>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d04c      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
 80007e8:	4a92      	ldr	r2, [pc, #584]	; (8000a34 <HAL_GPIO_Init+0x2ac>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d863      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 80007ee:	4a92      	ldr	r2, [pc, #584]	; (8000a38 <HAL_GPIO_Init+0x2b0>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d046      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
 80007f4:	4a90      	ldr	r2, [pc, #576]	; (8000a38 <HAL_GPIO_Init+0x2b0>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d85d      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 80007fa:	2b12      	cmp	r3, #18
 80007fc:	d82a      	bhi.n	8000854 <HAL_GPIO_Init+0xcc>
 80007fe:	2b12      	cmp	r3, #18
 8000800:	d859      	bhi.n	80008b6 <HAL_GPIO_Init+0x12e>
 8000802:	a201      	add	r2, pc, #4	; (adr r2, 8000808 <HAL_GPIO_Init+0x80>)
 8000804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000808:	08000883 	.word	0x08000883
 800080c:	0800085d 	.word	0x0800085d
 8000810:	0800086f 	.word	0x0800086f
 8000814:	080008b1 	.word	0x080008b1
 8000818:	080008b7 	.word	0x080008b7
 800081c:	080008b7 	.word	0x080008b7
 8000820:	080008b7 	.word	0x080008b7
 8000824:	080008b7 	.word	0x080008b7
 8000828:	080008b7 	.word	0x080008b7
 800082c:	080008b7 	.word	0x080008b7
 8000830:	080008b7 	.word	0x080008b7
 8000834:	080008b7 	.word	0x080008b7
 8000838:	080008b7 	.word	0x080008b7
 800083c:	080008b7 	.word	0x080008b7
 8000840:	080008b7 	.word	0x080008b7
 8000844:	080008b7 	.word	0x080008b7
 8000848:	080008b7 	.word	0x080008b7
 800084c:	08000865 	.word	0x08000865
 8000850:	08000879 	.word	0x08000879
 8000854:	4a79      	ldr	r2, [pc, #484]	; (8000a3c <HAL_GPIO_Init+0x2b4>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d013      	beq.n	8000882 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800085a:	e02c      	b.n	80008b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	623b      	str	r3, [r7, #32]
          break;
 8000862:	e029      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	3304      	adds	r3, #4
 800086a:	623b      	str	r3, [r7, #32]
          break;
 800086c:	e024      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	3308      	adds	r3, #8
 8000874:	623b      	str	r3, [r7, #32]
          break;
 8000876:	e01f      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	330c      	adds	r3, #12
 800087e:	623b      	str	r3, [r7, #32]
          break;
 8000880:	e01a      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d102      	bne.n	8000890 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800088a:	2304      	movs	r3, #4
 800088c:	623b      	str	r3, [r7, #32]
          break;
 800088e:	e013      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d105      	bne.n	80008a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000898:	2308      	movs	r3, #8
 800089a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	69fa      	ldr	r2, [r7, #28]
 80008a0:	611a      	str	r2, [r3, #16]
          break;
 80008a2:	e009      	b.n	80008b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008a4:	2308      	movs	r3, #8
 80008a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69fa      	ldr	r2, [r7, #28]
 80008ac:	615a      	str	r2, [r3, #20]
          break;
 80008ae:	e003      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
          break;
 80008b4:	e000      	b.n	80008b8 <HAL_GPIO_Init+0x130>
          break;
 80008b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	2bff      	cmp	r3, #255	; 0xff
 80008bc:	d801      	bhi.n	80008c2 <HAL_GPIO_Init+0x13a>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	e001      	b.n	80008c6 <HAL_GPIO_Init+0x13e>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3304      	adds	r3, #4
 80008c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2bff      	cmp	r3, #255	; 0xff
 80008cc:	d802      	bhi.n	80008d4 <HAL_GPIO_Init+0x14c>
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	e002      	b.n	80008da <HAL_GPIO_Init+0x152>
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	3b08      	subs	r3, #8
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	210f      	movs	r1, #15
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	fa01 f303 	lsl.w	r3, r1, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	401a      	ands	r2, r3
 80008ec:	6a39      	ldr	r1, [r7, #32]
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	431a      	orrs	r2, r3
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	2b00      	cmp	r3, #0
 8000904:	f000 80b1 	beq.w	8000a6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000908:	4b4d      	ldr	r3, [pc, #308]	; (8000a40 <HAL_GPIO_Init+0x2b8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a4c      	ldr	r2, [pc, #304]	; (8000a40 <HAL_GPIO_Init+0x2b8>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b4a      	ldr	r3, [pc, #296]	; (8000a40 <HAL_GPIO_Init+0x2b8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000920:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <HAL_GPIO_Init+0x2bc>)
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000924:	089b      	lsrs	r3, r3, #2
 8000926:	3302      	adds	r3, #2
 8000928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	220f      	movs	r2, #15
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	4013      	ands	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a40      	ldr	r2, [pc, #256]	; (8000a48 <HAL_GPIO_Init+0x2c0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d013      	beq.n	8000974 <HAL_GPIO_Init+0x1ec>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a3f      	ldr	r2, [pc, #252]	; (8000a4c <HAL_GPIO_Init+0x2c4>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d00d      	beq.n	8000970 <HAL_GPIO_Init+0x1e8>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a3e      	ldr	r2, [pc, #248]	; (8000a50 <HAL_GPIO_Init+0x2c8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d007      	beq.n	800096c <HAL_GPIO_Init+0x1e4>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a3d      	ldr	r2, [pc, #244]	; (8000a54 <HAL_GPIO_Init+0x2cc>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d101      	bne.n	8000968 <HAL_GPIO_Init+0x1e0>
 8000964:	2303      	movs	r3, #3
 8000966:	e006      	b.n	8000976 <HAL_GPIO_Init+0x1ee>
 8000968:	2304      	movs	r3, #4
 800096a:	e004      	b.n	8000976 <HAL_GPIO_Init+0x1ee>
 800096c:	2302      	movs	r3, #2
 800096e:	e002      	b.n	8000976 <HAL_GPIO_Init+0x1ee>
 8000970:	2301      	movs	r3, #1
 8000972:	e000      	b.n	8000976 <HAL_GPIO_Init+0x1ee>
 8000974:	2300      	movs	r3, #0
 8000976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000978:	f002 0203 	and.w	r2, r2, #3
 800097c:	0092      	lsls	r2, r2, #2
 800097e:	4093      	lsls	r3, r2
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	4313      	orrs	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000986:	492f      	ldr	r1, [pc, #188]	; (8000a44 <HAL_GPIO_Init+0x2bc>)
 8000988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	3302      	adds	r3, #2
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d006      	beq.n	80009ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	492c      	ldr	r1, [pc, #176]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	600b      	str	r3, [r1, #0]
 80009ac:	e006      	b.n	80009bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	43db      	mvns	r3, r3
 80009b6:	4928      	ldr	r1, [pc, #160]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009b8:	4013      	ands	r3, r2
 80009ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d006      	beq.n	80009d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009c8:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009ca:	685a      	ldr	r2, [r3, #4]
 80009cc:	4922      	ldr	r1, [pc, #136]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	604b      	str	r3, [r1, #4]
 80009d4:	e006      	b.n	80009e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009d8:	685a      	ldr	r2, [r3, #4]
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	43db      	mvns	r3, r3
 80009de:	491e      	ldr	r1, [pc, #120]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009e0:	4013      	ands	r3, r2
 80009e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d006      	beq.n	80009fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	4918      	ldr	r1, [pc, #96]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	608b      	str	r3, [r1, #8]
 80009fc:	e006      	b.n	8000a0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	43db      	mvns	r3, r3
 8000a06:	4914      	ldr	r1, [pc, #80]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 8000a08:	4013      	ands	r3, r2
 8000a0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d021      	beq.n	8000a5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 8000a1a:	68da      	ldr	r2, [r3, #12]
 8000a1c:	490e      	ldr	r1, [pc, #56]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	60cb      	str	r3, [r1, #12]
 8000a24:	e021      	b.n	8000a6a <HAL_GPIO_Init+0x2e2>
 8000a26:	bf00      	nop
 8000a28:	10320000 	.word	0x10320000
 8000a2c:	10310000 	.word	0x10310000
 8000a30:	10220000 	.word	0x10220000
 8000a34:	10210000 	.word	0x10210000
 8000a38:	10120000 	.word	0x10120000
 8000a3c:	10110000 	.word	0x10110000
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010000 	.word	0x40010000
 8000a48:	40010800 	.word	0x40010800
 8000a4c:	40010c00 	.word	0x40010c00
 8000a50:	40011000 	.word	0x40011000
 8000a54:	40011400 	.word	0x40011400
 8000a58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_GPIO_Init+0x304>)
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	4909      	ldr	r1, [pc, #36]	; (8000a8c <HAL_GPIO_Init+0x304>)
 8000a66:	4013      	ands	r3, r2
 8000a68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	fa22 f303 	lsr.w	r3, r2, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f47f ae8e 	bne.w	800079c <HAL_GPIO_Init+0x14>
  }
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	372c      	adds	r7, #44	; 0x2c
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	40010400 	.word	0x40010400

08000a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000aa0:	787b      	ldrb	r3, [r7, #1]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aa6:	887a      	ldrh	r2, [r7, #2]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000aac:	e003      	b.n	8000ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	041a      	lsls	r2, r3, #16
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	611a      	str	r2, [r3, #16]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ad2:	887a      	ldrh	r2, [r7, #2]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	041a      	lsls	r2, r3, #16
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	43d9      	mvns	r1, r3
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	400b      	ands	r3, r1
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	611a      	str	r2, [r3, #16]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr

08000af2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af4:	b08b      	sub	sp, #44	; 0x2c
 8000af6:	af06      	add	r7, sp, #24
 8000af8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	e0fd      	b.n	8000d00 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d106      	bne.n	8000b1e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f009 f853 	bl	8009bc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2203      	movs	r2, #3
 8000b22:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f002 fc02 	bl	8003334 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	687e      	ldr	r6, [r7, #4]
 8000b38:	466d      	mov	r5, sp
 8000b3a:	f106 0410 	add.w	r4, r6, #16
 8000b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b42:	6823      	ldr	r3, [r4, #0]
 8000b44:	602b      	str	r3, [r5, #0]
 8000b46:	1d33      	adds	r3, r6, #4
 8000b48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b4a:	6838      	ldr	r0, [r7, #0]
 8000b4c:	f002 fbcc 	bl	80032e8 <USB_CoreInit>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d005      	beq.n	8000b62 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2202      	movs	r2, #2
 8000b5a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e0ce      	b.n	8000d00 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fbfd 	bl	8003368 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	e04c      	b.n	8000c0e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	4413      	add	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	440b      	add	r3, r1
 8000b84:	3301      	adds	r3, #1
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	440b      	add	r3, r1
 8000b9a:	7bfa      	ldrb	r2, [r7, #15]
 8000b9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	b298      	uxth	r0, r3
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	440b      	add	r3, r1
 8000bb0:	3336      	adds	r3, #54	; 0x36
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	440b      	add	r3, r1
 8000bc6:	3303      	adds	r3, #3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000bcc:	7bfa      	ldrb	r2, [r7, #15]
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	440b      	add	r3, r1
 8000bda:	3338      	adds	r3, #56	; 0x38
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	4613      	mov	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	440b      	add	r3, r1
 8000bee:	333c      	adds	r3, #60	; 0x3c
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bf4:	7bfa      	ldrb	r2, [r7, #15]
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	440b      	add	r3, r1
 8000c02:	3340      	adds	r3, #64	; 0x40
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	7bfa      	ldrb	r2, [r7, #15]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d3ad      	bcc.n	8000b74 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e044      	b.n	8000ca8 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c1e:	7bfa      	ldrb	r2, [r7, #15]
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c34:	7bfa      	ldrb	r2, [r7, #15]
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	440b      	add	r3, r1
 8000c42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c46:	7bfa      	ldrb	r2, [r7, #15]
 8000c48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c4a:	7bfa      	ldrb	r2, [r7, #15]
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	440b      	add	r3, r1
 8000c6e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c76:	7bfa      	ldrb	r2, [r7, #15]
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
 8000c84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c8c:	7bfa      	ldrb	r2, [r7, #15]
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	440b      	add	r3, r1
 8000c9a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	7bfa      	ldrb	r2, [r7, #15]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d3b5      	bcc.n	8000c1e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	687e      	ldr	r6, [r7, #4]
 8000cba:	466d      	mov	r5, sp
 8000cbc:	f106 0410 	add.w	r4, r6, #16
 8000cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc4:	6823      	ldr	r3, [r4, #0]
 8000cc6:	602b      	str	r3, [r5, #0]
 8000cc8:	1d33      	adds	r3, r6, #4
 8000cca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ccc:	6838      	ldr	r0, [r7, #0]
 8000cce:	f002 fb57 	bl	8003380 <USB_DevInit>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d005      	beq.n	8000ce4 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2202      	movs	r2, #2
 8000cdc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e00d      	b.n	8000d00 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f004 fcc8 	bl	800568e <USB_DevDisconnect>

  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d101      	bne.n	8000d1e <HAL_PCD_Start+0x16>
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	e016      	b.n	8000d4c <HAL_PCD_Start+0x44>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f002 faec 	bl	8003308 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d30:	2101      	movs	r1, #1
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f009 f9b9 	bl	800a0aa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f004 fc9c 	bl	800567a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f004 fc9e 	bl	80056a2 <USB_ReadInterrupts>
 8000d66:	4603      	mov	r3, r0
 8000d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d70:	d102      	bne.n	8000d78 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 fb61 	bl	800143a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 fc90 	bl	80056a2 <USB_ReadInterrupts>
 8000d82:	4603      	mov	r3, r0
 8000d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d8c:	d112      	bne.n	8000db4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000da0:	b292      	uxth	r2, r2
 8000da2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f008 ff87 	bl	8009cba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000dac:	2100      	movs	r1, #0
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 f925 	bl	8000ffe <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f004 fc72 	bl	80056a2 <USB_ReadInterrupts>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dc8:	d10b      	bne.n	8000de2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ddc:	b292      	uxth	r2, r2
 8000dde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f004 fc5b 	bl	80056a2 <USB_ReadInterrupts>
 8000dec:	4603      	mov	r3, r0
 8000dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000df6:	d10b      	bne.n	8000e10 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e0a:	b292      	uxth	r2, r2
 8000e0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f004 fc44 	bl	80056a2 <USB_ReadInterrupts>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e24:	d126      	bne.n	8000e74 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 0204 	bic.w	r2, r2, #4
 8000e38:	b292      	uxth	r2, r2
 8000e3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0208 	bic.w	r2, r2, #8
 8000e50:	b292      	uxth	r2, r2
 8000e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f008 ff68 	bl	8009d2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f004 fc12 	bl	80056a2 <USB_ReadInterrupts>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e88:	f040 8084 	bne.w	8000f94 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	77fb      	strb	r3, [r7, #31]
 8000e90:	e011      	b.n	8000eb6 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	7ffb      	ldrb	r3, [r7, #31]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	441a      	add	r2, r3
 8000e9e:	7ffb      	ldrb	r3, [r7, #31]
 8000ea0:	8812      	ldrh	r2, [r2, #0]
 8000ea2:	b292      	uxth	r2, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	f107 0120 	add.w	r1, r7, #32
 8000eaa:	440b      	add	r3, r1
 8000eac:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000eb0:	7ffb      	ldrb	r3, [r7, #31]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	77fb      	strb	r3, [r7, #31]
 8000eb6:	7ffb      	ldrb	r3, [r7, #31]
 8000eb8:	2b07      	cmp	r3, #7
 8000eba:	d9ea      	bls.n	8000e92 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0201 	orr.w	r2, r2, #1
 8000ece:	b292      	uxth	r2, r2
 8000ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0201 	bic.w	r2, r2, #1
 8000ee6:	b292      	uxth	r2, r2
 8000ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000eec:	bf00      	nop
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0f6      	beq.n	8000eee <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f12:	b292      	uxth	r2, r2
 8000f14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	77fb      	strb	r3, [r7, #31]
 8000f1c:	e010      	b.n	8000f40 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000f1e:	7ffb      	ldrb	r3, [r7, #31]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	4611      	mov	r1, r2
 8000f26:	7ffa      	ldrb	r2, [r7, #31]
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	440a      	add	r2, r1
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	f107 0120 	add.w	r1, r7, #32
 8000f32:	440b      	add	r3, r1
 8000f34:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000f38:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000f3a:	7ffb      	ldrb	r3, [r7, #31]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	77fb      	strb	r3, [r7, #31]
 8000f40:	7ffb      	ldrb	r3, [r7, #31]
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	d9eb      	bls.n	8000f1e <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f042 0208 	orr.w	r2, r2, #8
 8000f58:	b292      	uxth	r2, r2
 8000f5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f70:	b292      	uxth	r2, r2
 8000f72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f042 0204 	orr.w	r2, r2, #4
 8000f88:	b292      	uxth	r2, r2
 8000f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f008 feb2 	bl	8009cf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f004 fb82 	bl	80056a2 <USB_ReadInterrupts>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fa8:	d10e      	bne.n	8000fc8 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fbc:	b292      	uxth	r2, r2
 8000fbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f008 fe6b 	bl	8009c9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f004 fb68 	bl	80056a2 <USB_ReadInterrupts>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fdc:	d10b      	bne.n	8000ff6 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ff0:	b292      	uxth	r2, r2
 8000ff2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3720      	adds	r7, #32
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001010:	2b01      	cmp	r3, #1
 8001012:	d101      	bne.n	8001018 <HAL_PCD_SetAddress+0x1a>
 8001014:	2302      	movs	r3, #2
 8001016:	e013      	b.n	8001040 <HAL_PCD_SetAddress+0x42>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	78fa      	ldrb	r2, [r7, #3]
 8001024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	78fa      	ldrb	r2, [r7, #3]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f004 fb0f 	bl	8005654 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	4608      	mov	r0, r1
 8001052:	4611      	mov	r1, r2
 8001054:	461a      	mov	r2, r3
 8001056:	4603      	mov	r3, r0
 8001058:	70fb      	strb	r3, [r7, #3]
 800105a:	460b      	mov	r3, r1
 800105c:	803b      	strh	r3, [r7, #0]
 800105e:	4613      	mov	r3, r2
 8001060:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800106a:	2b00      	cmp	r3, #0
 800106c:	da0e      	bge.n	800108c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2201      	movs	r2, #1
 8001088:	705a      	strb	r2, [r3, #1]
 800108a:	e00e      	b.n	80010aa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	f003 0207 	and.w	r2, r3, #7
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2200      	movs	r2, #0
 80010a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010b6:	883a      	ldrh	r2, [r7, #0]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	78ba      	ldrb	r2, [r7, #2]
 80010c0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	785b      	ldrb	r3, [r3, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d004      	beq.n	80010d4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80010d4:	78bb      	ldrb	r3, [r7, #2]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d102      	bne.n	80010e0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2200      	movs	r2, #0
 80010de:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_PCD_EP_Open+0xa6>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e00e      	b.n	800110c <HAL_PCD_EP_Open+0xc4>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68f9      	ldr	r1, [r7, #12]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 f95f 	bl	80033c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800110a:	7afb      	ldrb	r3, [r7, #11]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001124:	2b00      	cmp	r3, #0
 8001126:	da0e      	bge.n	8001146 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2201      	movs	r2, #1
 8001142:	705a      	strb	r2, [r3, #1]
 8001144:	e00e      	b.n	8001164 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	f003 0207 	and.w	r2, r3, #7
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2200      	movs	r2, #0
 8001162:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	b2da      	uxtb	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <HAL_PCD_EP_Close+0x6a>
 800117a:	2302      	movs	r3, #2
 800117c:	e00e      	b.n	800119c <HAL_PCD_EP_Close+0x88>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68f9      	ldr	r1, [r7, #12]
 800118c:	4618      	mov	r0, r3
 800118e:	f002 fc81 	bl	8003a94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	460b      	mov	r3, r1
 80011b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011b4:	7afb      	ldrb	r3, [r7, #11]
 80011b6:	f003 0207 	and.w	r2, r3, #7
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4413      	add	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2200      	movs	r2, #0
 80011e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011f0:	7afb      	ldrb	r3, [r7, #11]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d106      	bne.n	8001208 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6979      	ldr	r1, [r7, #20]
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fe33 	bl	8003e6c <USB_EPStartXfer>
 8001206:	e005      	b.n	8001214 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6979      	ldr	r1, [r7, #20]
 800120e:	4618      	mov	r0, r3
 8001210:	f002 fe2c 	bl	8003e6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	f003 0207 	and.w	r2, r3, #7
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001240:	681b      	ldr	r3, [r3, #0]
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	460b      	mov	r3, r1
 800125a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2201      	movs	r2, #1
 8001296:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001298:	7afb      	ldrb	r3, [r7, #11]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012a4:	7afb      	ldrb	r3, [r7, #11]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d106      	bne.n	80012bc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6979      	ldr	r1, [r7, #20]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f002 fdd9 	bl	8003e6c <USB_EPStartXfer>
 80012ba:	e005      	b.n	80012c8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6979      	ldr	r1, [r7, #20]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fdd2 	bl	8003e6c <USB_EPStartXfer>
  }

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	f003 0207 	and.w	r2, r3, #7
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d901      	bls.n	80012f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e04c      	b.n	800138a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	da0e      	bge.n	8001316 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2201      	movs	r2, #1
 8001312:	705a      	strb	r2, [r3, #1]
 8001314:	e00c      	b.n	8001330 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001316:	78fa      	ldrb	r2, [r7, #3]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2200      	movs	r2, #0
 800132e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2201      	movs	r2, #1
 8001334:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	b2da      	uxtb	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_PCD_EP_SetStall+0x7e>
 800134c:	2302      	movs	r3, #2
 800134e:	e01c      	b.n	800138a <HAL_PCD_EP_SetStall+0xb8>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68f9      	ldr	r1, [r7, #12]
 800135e:	4618      	mov	r0, r3
 8001360:	f004 f87b 	bl	800545a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	2b00      	cmp	r3, #0
 800136c:	d108      	bne.n	8001380 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001378:	4619      	mov	r1, r3
 800137a:	4610      	mov	r0, r2
 800137c:	f004 f9a0 	bl	80056c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	f003 020f 	and.w	r2, r3, #15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d901      	bls.n	80013b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e040      	b.n	8001432 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	da0e      	bge.n	80013d6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	4413      	add	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2201      	movs	r2, #1
 80013d2:	705a      	strb	r2, [r3, #1]
 80013d4:	e00e      	b.n	80013f4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	f003 0207 	and.w	r2, r3, #7
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	b2da      	uxtb	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <HAL_PCD_EP_ClrStall+0x82>
 8001410:	2302      	movs	r3, #2
 8001412:	e00e      	b.n	8001432 <HAL_PCD_EP_ClrStall+0xa0>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68f9      	ldr	r1, [r7, #12]
 8001422:	4618      	mov	r0, r3
 8001424:	f004 f869 	bl	80054fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b08e      	sub	sp, #56	; 0x38
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001442:	e2ec      	b.n	8001a1e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800144c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800144e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800145a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800145e:	2b00      	cmp	r3, #0
 8001460:	f040 8161 	bne.w	8001726 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001464:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	2b00      	cmp	r3, #0
 800146c:	d152      	bne.n	8001514 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	b29b      	uxth	r3, r3
 8001476:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800147a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800147e:	81fb      	strh	r3, [r7, #14]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	89fb      	ldrh	r3, [r7, #14]
 8001486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800148a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800148e:	b29b      	uxth	r3, r3
 8001490:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3328      	adds	r3, #40	; 0x28
 8001496:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4413      	add	r3, r2
 80014ac:	3302      	adds	r3, #2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	4413      	add	r3, r2
 80014b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	441a      	add	r2, r3
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80014d2:	2100      	movs	r1, #0
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f008 fbc8 	bl	8009c6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 829b 	beq.w	8001a1e <PCD_EP_ISR_Handler+0x5e4>
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f040 8296 	bne.w	8001a1e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	b292      	uxth	r2, r2
 8001506:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001512:	e284      	b.n	8001a1e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001524:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800152a:	2b00      	cmp	r3, #0
 800152c:	d034      	beq.n	8001598 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001536:	b29b      	uxth	r3, r3
 8001538:	461a      	mov	r2, r3
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4413      	add	r3, r2
 8001542:	3306      	adds	r3, #6
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	4413      	add	r3, r2
 800154c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800156c:	b29b      	uxth	r3, r3
 800156e:	f004 f8f7 	bl	8005760 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	b29a      	uxth	r2, r3
 800157a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800157e:	4013      	ands	r3, r2
 8001580:	823b      	strh	r3, [r7, #16]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	8a3a      	ldrh	r2, [r7, #16]
 8001588:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800158c:	b292      	uxth	r2, r2
 800158e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f008 fb3d 	bl	8009c10 <HAL_PCD_SetupStageCallback>
 8001596:	e242      	b.n	8001a1e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001598:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800159c:	2b00      	cmp	r3, #0
 800159e:	f280 823e 	bge.w	8001a1e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80015ae:	4013      	ands	r3, r2
 80015b0:	83bb      	strh	r3, [r7, #28]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	8bba      	ldrh	r2, [r7, #28]
 80015b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015bc:	b292      	uxth	r2, r2
 80015be:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	3306      	adds	r3, #6
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d019      	beq.n	8001628 <PCD_EP_ISR_Handler+0x1ee>
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d015      	beq.n	8001628 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	6959      	ldr	r1, [r3, #20]
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800160c:	b29b      	uxth	r3, r3
 800160e:	f004 f8a7 	bl	8005760 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	441a      	add	r2, r3
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001620:	2100      	movs	r1, #0
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f008 fb06 	bl	8009c34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001634:	2b00      	cmp	r3, #0
 8001636:	f040 81f2 	bne.w	8001a1e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001648:	b29b      	uxth	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	4413      	add	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d112      	bne.n	8001688 <PCD_EP_ISR_Handler+0x24e>
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800166c:	b29a      	uxth	r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	801a      	strh	r2, [r3, #0]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800167c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001680:	b29a      	uxth	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	801a      	strh	r2, [r3, #0]
 8001686:	e02f      	b.n	80016e8 <PCD_EP_ISR_Handler+0x2ae>
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	2b3e      	cmp	r3, #62	; 0x3e
 800168e:	d813      	bhi.n	80016b8 <PCD_EP_ISR_Handler+0x27e>
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	085b      	lsrs	r3, r3, #1
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <PCD_EP_ISR_Handler+0x270>
 80016a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a6:	3301      	adds	r3, #1
 80016a8:	633b      	str	r3, [r7, #48]	; 0x30
 80016aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	029b      	lsls	r3, r3, #10
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	801a      	strh	r2, [r3, #0]
 80016b6:	e017      	b.n	80016e8 <PCD_EP_ISR_Handler+0x2ae>
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	095b      	lsrs	r3, r3, #5
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <PCD_EP_ISR_Handler+0x298>
 80016cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ce:	3b01      	subs	r3, #1
 80016d0:	633b      	str	r3, [r7, #48]	; 0x30
 80016d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	029b      	lsls	r3, r3, #10
 80016d8:	b29b      	uxth	r3, r3
 80016da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016f8:	827b      	strh	r3, [r7, #18]
 80016fa:	8a7b      	ldrh	r3, [r7, #18]
 80016fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001700:	827b      	strh	r3, [r7, #18]
 8001702:	8a7b      	ldrh	r3, [r7, #18]
 8001704:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001708:	827b      	strh	r3, [r7, #18]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	8a7b      	ldrh	r3, [r7, #18]
 8001710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001720:	b29b      	uxth	r3, r3
 8001722:	8013      	strh	r3, [r2, #0]
 8001724:	e17b      	b.n	8001a1e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001738:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800173c:	2b00      	cmp	r3, #0
 800173e:	f280 80ea 	bge.w	8001916 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b29a      	uxth	r2, r3
 8001754:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001758:	4013      	ands	r3, r2
 800175a:	853b      	strh	r3, [r7, #40]	; 0x28
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800176c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001770:	b292      	uxth	r2, r2
 8001772:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001774:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	7b1b      	ldrb	r3, [r3, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d122      	bne.n	80017d8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800179a:	b29b      	uxth	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4413      	add	r3, r2
 80017a6:	3306      	adds	r3, #6
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017ba:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80017bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8087 	beq.w	80018d2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	6959      	ldr	r1, [r3, #20]
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	88da      	ldrh	r2, [r3, #6]
 80017d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017d2:	f003 ffc5 	bl	8005760 <USB_ReadPMA>
 80017d6:	e07c      	b.n	80018d2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	78db      	ldrb	r3, [r3, #3]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d108      	bne.n	80017f2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80017e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017e2:	461a      	mov	r2, r3
 80017e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f927 	bl	8001a3a <HAL_PCD_EP_DB_Receive>
 80017ec:	4603      	mov	r3, r0
 80017ee:	86fb      	strh	r3, [r7, #54]	; 0x36
 80017f0:	e06f      	b.n	80018d2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	b29b      	uxth	r3, r3
 8001804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800180c:	847b      	strh	r3, [r7, #34]	; 0x22
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	441a      	add	r2, r3
 800181c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800181e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800182a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800182e:	b29b      	uxth	r3, r3
 8001830:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d021      	beq.n	8001890 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001854:	b29b      	uxth	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4413      	add	r3, r2
 8001860:	3302      	adds	r3, #2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	4413      	add	r3, r2
 800186a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001874:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001876:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001878:	2b00      	cmp	r3, #0
 800187a:	d02a      	beq.n	80018d2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	6959      	ldr	r1, [r3, #20]
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	891a      	ldrh	r2, [r3, #8]
 8001888:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800188a:	f003 ff69 	bl	8005760 <USB_ReadPMA>
 800188e:	e020      	b.n	80018d2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001898:	b29b      	uxth	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	3306      	adds	r3, #6
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018b8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80018ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	6959      	ldr	r1, [r3, #20]
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	895a      	ldrh	r2, [r3, #10]
 80018cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018ce:	f003 ff47 	bl	8005760 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	69da      	ldr	r2, [r3, #28]
 80018d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018d8:	441a      	add	r2, r3
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018e4:	441a      	add	r2, r3
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d004      	beq.n	80018fc <PCD_EP_ISR_Handler+0x4c2>
 80018f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d206      	bcs.n	800190a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f008 f996 	bl	8009c34 <HAL_PCD_DataOutStageCallback>
 8001908:	e005      	b.n	8001916 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001910:	4618      	mov	r0, r3
 8001912:	f002 faab 	bl	8003e6c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001916:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191c:	2b00      	cmp	r3, #0
 800191e:	d07e      	beq.n	8001a1e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001920:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800194a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800194e:	843b      	strh	r3, [r7, #32]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	441a      	add	r2, r3
 800195e:	8c3b      	ldrh	r3, [r7, #32]
 8001960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001968:	b29b      	uxth	r3, r3
 800196a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	78db      	ldrb	r3, [r3, #3]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d00c      	beq.n	800198e <PCD_EP_ISR_Handler+0x554>
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	78db      	ldrb	r3, [r3, #3]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001980:	2b02      	cmp	r3, #2
 8001982:	d146      	bne.n	8001a12 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001984:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198a:	2b00      	cmp	r3, #0
 800198c:	d141      	bne.n	8001a12 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001996:	b29b      	uxth	r3, r3
 8001998:	461a      	mov	r2, r3
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4413      	add	r3, r2
 80019a2:	3302      	adds	r3, #2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019b6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	699a      	ldr	r2, [r3, #24]
 80019bc:	8bfb      	ldrh	r3, [r7, #30]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d906      	bls.n	80019d0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	699a      	ldr	r2, [r3, #24]
 80019c6:	8bfb      	ldrh	r3, [r7, #30]
 80019c8:	1ad2      	subs	r2, r2, r3
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	619a      	str	r2, [r3, #24]
 80019ce:	e002      	b.n	80019d6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	4619      	mov	r1, r3
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f008 f940 	bl	8009c6a <HAL_PCD_DataInStageCallback>
 80019ea:	e018      	b.n	8001a1e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	8bfb      	ldrh	r3, [r7, #30]
 80019f2:	441a      	add	r2, r3
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	69da      	ldr	r2, [r3, #28]
 80019fc:	8bfb      	ldrh	r3, [r7, #30]
 80019fe:	441a      	add	r2, r3
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 fa2e 	bl	8003e6c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001a10:	e005      	b.n	8001a1e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a14:	461a      	mov	r2, r3
 8001a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f91b 	bl	8001c54 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f6ff ad0a 	blt.w	8001444 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3738      	adds	r7, #56	; 0x38
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b088      	sub	sp, #32
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	4613      	mov	r3, r2
 8001a46:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d07e      	beq.n	8001b50 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	3302      	adds	r3, #2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a7a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	699a      	ldr	r2, [r3, #24]
 8001a80:	8b7b      	ldrh	r3, [r7, #26]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d306      	bcc.n	8001a94 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	699a      	ldr	r2, [r3, #24]
 8001a8a:	8b7b      	ldrh	r3, [r7, #26]
 8001a8c:	1ad2      	subs	r2, r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	619a      	str	r2, [r3, #24]
 8001a92:	e002      	b.n	8001a9a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d123      	bne.n	8001aea <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001abc:	833b      	strh	r3, [r7, #24]
 8001abe:	8b3b      	ldrh	r3, [r7, #24]
 8001ac0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ac4:	833b      	strh	r3, [r7, #24]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	441a      	add	r2, r3
 8001ad4:	8b3b      	ldrh	r3, [r7, #24]
 8001ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d01f      	beq.n	8001b34 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b0e:	82fb      	strh	r3, [r7, #22]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	441a      	add	r2, r3
 8001b1e:	8afb      	ldrh	r3, [r7, #22]
 8001b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b34:	8b7b      	ldrh	r3, [r7, #26]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8087 	beq.w	8001c4a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	6959      	ldr	r1, [r3, #20]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	891a      	ldrh	r2, [r3, #8]
 8001b48:	8b7b      	ldrh	r3, [r7, #26]
 8001b4a:	f003 fe09 	bl	8005760 <USB_ReadPMA>
 8001b4e:	e07c      	b.n	8001c4a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	3306      	adds	r3, #6
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b78:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	699a      	ldr	r2, [r3, #24]
 8001b7e:	8b7b      	ldrh	r3, [r7, #26]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d306      	bcc.n	8001b92 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	699a      	ldr	r2, [r3, #24]
 8001b88:	8b7b      	ldrh	r3, [r7, #26]
 8001b8a:	1ad2      	subs	r2, r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	619a      	str	r2, [r3, #24]
 8001b90:	e002      	b.n	8001b98 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d123      	bne.n	8001be8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bba:	83fb      	strh	r3, [r7, #30]
 8001bbc:	8bfb      	ldrh	r3, [r7, #30]
 8001bbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bc2:	83fb      	strh	r3, [r7, #30]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	441a      	add	r2, r3
 8001bd2:	8bfb      	ldrh	r3, [r7, #30]
 8001bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d11f      	bne.n	8001c32 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c0c:	83bb      	strh	r3, [r7, #28]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	441a      	add	r2, r3
 8001c1c:	8bbb      	ldrh	r3, [r7, #28]
 8001c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c32:	8b7b      	ldrh	r3, [r7, #26]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	6959      	ldr	r1, [r3, #20]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	895a      	ldrh	r2, [r3, #10]
 8001c44:	8b7b      	ldrh	r3, [r7, #26]
 8001c46:	f003 fd8b 	bl	8005760 <USB_ReadPMA>
    }
  }

  return count;
 8001c4a:	8b7b      	ldrh	r3, [r7, #26]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3720      	adds	r7, #32
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b0a2      	sub	sp, #136	; 0x88
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 81c7 	beq.w	8001ffc <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4413      	add	r3, r2
 8001c82:	3302      	adds	r3, #2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d907      	bls.n	8001cb6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001cae:	1ad2      	subs	r2, r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	619a      	str	r2, [r3, #24]
 8001cb4:	e002      	b.n	8001cbc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f040 80b9 	bne.w	8001e38 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	785b      	ldrb	r3, [r3, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d126      	bne.n	8001d1c <HAL_PCD_EP_DB_Transmit+0xc8>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce2:	4413      	add	r3, r2
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	011a      	lsls	r2, r3, #4
 8001cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cee:	4413      	add	r3, r2
 8001cf0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	801a      	strh	r2, [r3, #0]
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	801a      	strh	r2, [r3, #0]
 8001d1a:	e01a      	b.n	8001d52 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	785b      	ldrb	r3, [r3, #1]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d116      	bne.n	8001d52 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d38:	4413      	add	r3, r2
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	011a      	lsls	r2, r3, #4
 8001d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d44:	4413      	add	r3, r2
 8001d46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4e:	2200      	movs	r2, #0
 8001d50:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	623b      	str	r3, [r7, #32]
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	785b      	ldrb	r3, [r3, #1]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d126      	bne.n	8001dae <HAL_PCD_EP_DB_Transmit+0x15a>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	4413      	add	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	011a      	lsls	r2, r3, #4
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4413      	add	r3, r2
 8001d82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	801a      	strh	r2, [r3, #0]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	801a      	strh	r2, [r3, #0]
 8001dac:	e017      	b.n	8001dde <HAL_PCD_EP_DB_Transmit+0x18a>
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	785b      	ldrb	r3, [r3, #1]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d113      	bne.n	8001dde <HAL_PCD_EP_DB_Transmit+0x18a>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	623b      	str	r3, [r7, #32]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	011a      	lsls	r2, r3, #4
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	4619      	mov	r1, r3
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f007 ff40 	bl	8009c6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 82d4 	beq.w	800239e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e10:	827b      	strh	r3, [r7, #18]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	441a      	add	r2, r3
 8001e20:	8a7b      	ldrh	r3, [r7, #18]
 8001e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	8013      	strh	r3, [r2, #0]
 8001e36:	e2b2      	b.n	800239e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d021      	beq.n	8001e86 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e5c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	441a      	add	r2, r3
 8001e6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	f040 8286 	bne.w	800239e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e9a:	441a      	add	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	69da      	ldr	r2, [r3, #28]
 8001ea4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ea8:	441a      	add	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	6a1a      	ldr	r2, [r3, #32]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d309      	bcc.n	8001ece <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	6a1a      	ldr	r2, [r3, #32]
 8001ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ec6:	1ad2      	subs	r2, r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	621a      	str	r2, [r3, #32]
 8001ecc:	e015      	b.n	8001efa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d107      	bne.n	8001ee6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001ed6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001eda:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ee4:	e009      	b.n	8001efa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	785b      	ldrb	r3, [r3, #1]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d155      	bne.n	8001fae <HAL_PCD_EP_DB_Transmit+0x35a>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f16:	4413      	add	r3, r2
 8001f18:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	011a      	lsls	r2, r3, #4
 8001f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f22:	4413      	add	r3, r2
 8001f24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
 8001f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d112      	bne.n	8001f56 <HAL_PCD_EP_DB_Transmit+0x302>
 8001f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3e:	801a      	strh	r2, [r3, #0]
 8001f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f52:	801a      	strh	r2, [r3, #0]
 8001f54:	e047      	b.n	8001fe6 <HAL_PCD_EP_DB_Transmit+0x392>
 8001f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f58:	2b3e      	cmp	r3, #62	; 0x3e
 8001f5a:	d811      	bhi.n	8001f80 <HAL_PCD_EP_DB_Transmit+0x32c>
 8001f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f5e:	085b      	lsrs	r3, r3, #1
 8001f60:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_PCD_EP_DB_Transmit+0x31e>
 8001f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f6e:	3301      	adds	r3, #1
 8001f70:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	029b      	lsls	r3, r3, #10
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7c:	801a      	strh	r2, [r3, #0]
 8001f7e:	e032      	b.n	8001fe6 <HAL_PCD_EP_DB_Transmit+0x392>
 8001f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <HAL_PCD_EP_DB_Transmit+0x342>
 8001f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f92:	3b01      	subs	r3, #1
 8001f94:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	029b      	lsls	r3, r3, #10
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001faa:	801a      	strh	r2, [r3, #0]
 8001fac:	e01b      	b.n	8001fe6 <HAL_PCD_EP_DB_Transmit+0x392>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	785b      	ldrb	r3, [r3, #1]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d117      	bne.n	8001fe6 <HAL_PCD_EP_DB_Transmit+0x392>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	643b      	str	r3, [r7, #64]	; 0x40
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fca:	4413      	add	r3, r2
 8001fcc:	643b      	str	r3, [r7, #64]	; 0x40
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	011a      	lsls	r2, r3, #4
 8001fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fe4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	6959      	ldr	r1, [r3, #20]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	891a      	ldrh	r2, [r3, #8]
 8001ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	f003 fb6e 	bl	80056d6 <USB_WritePMA>
 8001ffa:	e1d0      	b.n	800239e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002004:	b29b      	uxth	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	3306      	adds	r3, #6
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002024:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002030:	429a      	cmp	r2, r3
 8002032:	d307      	bcc.n	8002044 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800203c:	1ad2      	subs	r2, r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	619a      	str	r2, [r3, #24]
 8002042:	e002      	b.n	800204a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2200      	movs	r2, #0
 8002048:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 80c4 	bne.w	80021dc <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	785b      	ldrb	r3, [r3, #1]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d126      	bne.n	80020aa <HAL_PCD_EP_DB_Transmit+0x456>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800206a:	b29b      	uxth	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002070:	4413      	add	r3, r2
 8002072:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	011a      	lsls	r2, r3, #4
 800207a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800207c:	4413      	add	r3, r2
 800207e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002082:	66bb      	str	r3, [r7, #104]	; 0x68
 8002084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800208e:	b29a      	uxth	r2, r3
 8002090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002092:	801a      	strh	r2, [r3, #0]
 8002094:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800209e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020a6:	801a      	strh	r2, [r3, #0]
 80020a8:	e01a      	b.n	80020e0 <HAL_PCD_EP_DB_Transmit+0x48c>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	785b      	ldrb	r3, [r3, #1]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d116      	bne.n	80020e0 <HAL_PCD_EP_DB_Transmit+0x48c>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	677b      	str	r3, [r7, #116]	; 0x74
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c6:	4413      	add	r3, r2
 80020c8:	677b      	str	r3, [r7, #116]	; 0x74
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	011a      	lsls	r2, r3, #4
 80020d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020d2:	4413      	add	r3, r2
 80020d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020d8:	673b      	str	r3, [r7, #112]	; 0x70
 80020da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020dc:	2200      	movs	r2, #0
 80020de:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d12f      	bne.n	800214e <HAL_PCD_EP_DB_Transmit+0x4fa>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020fe:	b29b      	uxth	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002106:	4413      	add	r3, r2
 8002108:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	011a      	lsls	r2, r3, #4
 8002112:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002116:	4413      	add	r3, r2
 8002118:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800211c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800212c:	b29a      	uxth	r2, r3
 800212e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002132:	801a      	strh	r2, [r3, #0]
 8002134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002144:	b29a      	uxth	r2, r3
 8002146:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800214a:	801a      	strh	r2, [r3, #0]
 800214c:	e017      	b.n	800217e <HAL_PCD_EP_DB_Transmit+0x52a>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	785b      	ldrb	r3, [r3, #1]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d113      	bne.n	800217e <HAL_PCD_EP_DB_Transmit+0x52a>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800215e:	b29b      	uxth	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002164:	4413      	add	r3, r2
 8002166:	67bb      	str	r3, [r7, #120]	; 0x78
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	011a      	lsls	r2, r3, #4
 800216e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002170:	4413      	add	r3, r2
 8002172:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002176:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002178:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800217a:	2200      	movs	r2, #0
 800217c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	4619      	mov	r1, r3
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f007 fd70 	bl	8009c6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002190:	2b00      	cmp	r3, #0
 8002192:	f040 8104 	bne.w	800239e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	441a      	add	r2, r3
 80021c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80021c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	8013      	strh	r3, [r2, #0]
 80021da:	e0e0      	b.n	800239e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d121      	bne.n	800222a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002200:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	441a      	add	r2, r3
 8002212:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800221a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800221e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002226:	b29b      	uxth	r3, r3
 8002228:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002230:	2b01      	cmp	r3, #1
 8002232:	f040 80b4 	bne.w	800239e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800223e:	441a      	add	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	69da      	ldr	r2, [r3, #28]
 8002248:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800224c:	441a      	add	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	6a1a      	ldr	r2, [r3, #32]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	429a      	cmp	r2, r3
 800225c:	d309      	bcc.n	8002272 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	6a1a      	ldr	r2, [r3, #32]
 8002268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800226a:	1ad2      	subs	r2, r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	621a      	str	r2, [r3, #32]
 8002270:	e015      	b.n	800229e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d107      	bne.n	800228a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800227a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800227e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002288:	e009      	b.n	800229e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2200      	movs	r2, #0
 8002294:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	667b      	str	r3, [r7, #100]	; 0x64
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	785b      	ldrb	r3, [r3, #1]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d155      	bne.n	8002358 <HAL_PCD_EP_DB_Transmit+0x704>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c0:	4413      	add	r3, r2
 80022c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	011a      	lsls	r2, r3, #4
 80022ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022cc:	4413      	add	r3, r2
 80022ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80022d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d112      	bne.n	8002300 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80022da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022e8:	801a      	strh	r2, [r3, #0]
 80022ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022fc:	801a      	strh	r2, [r3, #0]
 80022fe:	e044      	b.n	800238a <HAL_PCD_EP_DB_Transmit+0x736>
 8002300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002302:	2b3e      	cmp	r3, #62	; 0x3e
 8002304:	d811      	bhi.n	800232a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	657b      	str	r3, [r7, #84]	; 0x54
 800230c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002318:	3301      	adds	r3, #1
 800231a:	657b      	str	r3, [r7, #84]	; 0x54
 800231c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800231e:	b29b      	uxth	r3, r3
 8002320:	029b      	lsls	r3, r3, #10
 8002322:	b29a      	uxth	r2, r3
 8002324:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002326:	801a      	strh	r2, [r3, #0]
 8002328:	e02f      	b.n	800238a <HAL_PCD_EP_DB_Transmit+0x736>
 800232a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800232c:	095b      	lsrs	r3, r3, #5
 800232e:	657b      	str	r3, [r7, #84]	; 0x54
 8002330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800233a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233c:	3b01      	subs	r3, #1
 800233e:	657b      	str	r3, [r7, #84]	; 0x54
 8002340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002342:	b29b      	uxth	r3, r3
 8002344:	029b      	lsls	r3, r3, #10
 8002346:	b29b      	uxth	r3, r3
 8002348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800234c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002350:	b29a      	uxth	r2, r3
 8002352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002354:	801a      	strh	r2, [r3, #0]
 8002356:	e018      	b.n	800238a <HAL_PCD_EP_DB_Transmit+0x736>
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	785b      	ldrb	r3, [r3, #1]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d114      	bne.n	800238a <HAL_PCD_EP_DB_Transmit+0x736>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002368:	b29b      	uxth	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800236e:	4413      	add	r3, r2
 8002370:	667b      	str	r3, [r7, #100]	; 0x64
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	011a      	lsls	r2, r3, #4
 8002378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800237a:	4413      	add	r3, r2
 800237c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002380:	663b      	str	r3, [r7, #96]	; 0x60
 8002382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002384:	b29a      	uxth	r2, r3
 8002386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002388:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	6959      	ldr	r1, [r3, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	895a      	ldrh	r2, [r3, #10]
 8002396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002398:	b29b      	uxth	r3, r3
 800239a:	f003 f99c 	bl	80056d6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023b8:	823b      	strh	r3, [r7, #16]
 80023ba:	8a3b      	ldrh	r3, [r7, #16]
 80023bc:	f083 0310 	eor.w	r3, r3, #16
 80023c0:	823b      	strh	r3, [r7, #16]
 80023c2:	8a3b      	ldrh	r3, [r7, #16]
 80023c4:	f083 0320 	eor.w	r3, r3, #32
 80023c8:	823b      	strh	r3, [r7, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	441a      	add	r2, r3
 80023d8:	8a3b      	ldrh	r3, [r7, #16]
 80023da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3788      	adds	r7, #136	; 0x88
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	817b      	strh	r3, [r7, #10]
 8002406:	4613      	mov	r3, r2
 8002408:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800240a:	897b      	ldrh	r3, [r7, #10]
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002416:	897b      	ldrh	r3, [r7, #10]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4413      	add	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e009      	b.n	8002442 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800242e:	897a      	ldrh	r2, [r7, #10]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002442:	893b      	ldrh	r3, [r7, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d107      	bne.n	8002458 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2200      	movs	r2, #0
 800244c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	b29a      	uxth	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	80da      	strh	r2, [r3, #6]
 8002456:	e00b      	b.n	8002470 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2201      	movs	r2, #1
 800245c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	b29a      	uxth	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	b29a      	uxth	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	371c      	adds	r7, #28
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e26c      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 8087 	beq.w	80025aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800249c:	4b92      	ldr	r3, [pc, #584]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d00c      	beq.n	80024c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024a8:	4b8f      	ldr	r3, [pc, #572]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d112      	bne.n	80024da <HAL_RCC_OscConfig+0x5e>
 80024b4:	4b8c      	ldr	r3, [pc, #560]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c0:	d10b      	bne.n	80024da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c2:	4b89      	ldr	r3, [pc, #548]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d06c      	beq.n	80025a8 <HAL_RCC_OscConfig+0x12c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d168      	bne.n	80025a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e246      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x76>
 80024e4:	4b80      	ldr	r3, [pc, #512]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a7f      	ldr	r2, [pc, #508]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	e02e      	b.n	8002550 <HAL_RCC_OscConfig+0xd4>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x98>
 80024fa:	4b7b      	ldr	r3, [pc, #492]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7a      	ldr	r2, [pc, #488]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b78      	ldr	r3, [pc, #480]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a77      	ldr	r2, [pc, #476]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800250c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e01d      	b.n	8002550 <HAL_RCC_OscConfig+0xd4>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0xbc>
 800251e:	4b72      	ldr	r3, [pc, #456]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a71      	ldr	r2, [pc, #452]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b6f      	ldr	r3, [pc, #444]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6e      	ldr	r2, [pc, #440]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e00b      	b.n	8002550 <HAL_RCC_OscConfig+0xd4>
 8002538:	4b6b      	ldr	r3, [pc, #428]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6a      	ldr	r2, [pc, #424]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800253e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b68      	ldr	r3, [pc, #416]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a67      	ldr	r2, [pc, #412]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800254a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7fe f82c 	bl	80005b4 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002560:	f7fe f828 	bl	80005b4 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e1fa      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b5d      	ldr	r3, [pc, #372]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0xe4>
 800257e:	e014      	b.n	80025aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe f818 	bl	80005b4 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002588:	f7fe f814 	bl	80005b4 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1e6      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x10c>
 80025a6:	e000      	b.n	80025aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d063      	beq.n	800267e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025b6:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025c2:	4b49      	ldr	r3, [pc, #292]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d11c      	bne.n	8002608 <HAL_RCC_OscConfig+0x18c>
 80025ce:	4b46      	ldr	r3, [pc, #280]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d116      	bne.n	8002608 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	4b43      	ldr	r3, [pc, #268]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_RCC_OscConfig+0x176>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e1ba      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	4b3d      	ldr	r3, [pc, #244]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4939      	ldr	r1, [pc, #228]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	e03a      	b.n	800267e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002610:	4b36      	ldr	r3, [pc, #216]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7fd ffcd 	bl	80005b4 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261e:	f7fd ffc9 	bl	80005b4 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e19b      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263c:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4927      	ldr	r1, [pc, #156]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fd ffac 	bl	80005b4 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002660:	f7fd ffa8 	bl	80005b4 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e17a      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d03a      	beq.n	8002700 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d019      	beq.n	80026c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002698:	f7fd ff8c 	bl	80005b4 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a0:	f7fd ff88 	bl	80005b4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e15a      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026be:	2001      	movs	r0, #1
 80026c0:	f000 faf4 	bl	8002cac <RCC_Delay>
 80026c4:	e01c      	b.n	8002700 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026cc:	f7fd ff72 	bl	80005b4 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d2:	e00f      	b.n	80026f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d4:	f7fd ff6e 	bl	80005b4 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d908      	bls.n	80026f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e140      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	42420000 	.word	0x42420000
 80026f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	4b9e      	ldr	r3, [pc, #632]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1e9      	bne.n	80026d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80a6 	beq.w	800285a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002712:	4b97      	ldr	r3, [pc, #604]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10d      	bne.n	800273a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	4b94      	ldr	r3, [pc, #592]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	4a93      	ldr	r2, [pc, #588]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	61d3      	str	r3, [r2, #28]
 800272a:	4b91      	ldr	r3, [pc, #580]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002736:	2301      	movs	r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273a:	4b8e      	ldr	r3, [pc, #568]	; (8002974 <HAL_RCC_OscConfig+0x4f8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d118      	bne.n	8002778 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002746:	4b8b      	ldr	r3, [pc, #556]	; (8002974 <HAL_RCC_OscConfig+0x4f8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a8a      	ldr	r2, [pc, #552]	; (8002974 <HAL_RCC_OscConfig+0x4f8>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002752:	f7fd ff2f 	bl	80005b4 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275a:	f7fd ff2b 	bl	80005b4 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b64      	cmp	r3, #100	; 0x64
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e0fd      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	4b81      	ldr	r3, [pc, #516]	; (8002974 <HAL_RCC_OscConfig+0x4f8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x312>
 8002780:	4b7b      	ldr	r3, [pc, #492]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4a7a      	ldr	r2, [pc, #488]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6213      	str	r3, [r2, #32]
 800278c:	e02d      	b.n	80027ea <HAL_RCC_OscConfig+0x36e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x334>
 8002796:	4b76      	ldr	r3, [pc, #472]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a75      	ldr	r2, [pc, #468]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6213      	str	r3, [r2, #32]
 80027a2:	4b73      	ldr	r3, [pc, #460]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4a72      	ldr	r2, [pc, #456]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6213      	str	r3, [r2, #32]
 80027ae:	e01c      	b.n	80027ea <HAL_RCC_OscConfig+0x36e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d10c      	bne.n	80027d2 <HAL_RCC_OscConfig+0x356>
 80027b8:	4b6d      	ldr	r3, [pc, #436]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4a6c      	ldr	r2, [pc, #432]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027be:	f043 0304 	orr.w	r3, r3, #4
 80027c2:	6213      	str	r3, [r2, #32]
 80027c4:	4b6a      	ldr	r3, [pc, #424]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	4a69      	ldr	r2, [pc, #420]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6213      	str	r3, [r2, #32]
 80027d0:	e00b      	b.n	80027ea <HAL_RCC_OscConfig+0x36e>
 80027d2:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4a66      	ldr	r2, [pc, #408]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	6213      	str	r3, [r2, #32]
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	4a63      	ldr	r2, [pc, #396]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	f023 0304 	bic.w	r3, r3, #4
 80027e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d015      	beq.n	800281e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f2:	f7fd fedf 	bl	80005b4 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7fd fedb 	bl	80005b4 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	; 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0ab      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002810:	4b57      	ldr	r3, [pc, #348]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ee      	beq.n	80027fa <HAL_RCC_OscConfig+0x37e>
 800281c:	e014      	b.n	8002848 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7fd fec9 	bl	80005b4 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002824:	e00a      	b.n	800283c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7fd fec5 	bl	80005b4 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	; 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e095      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283c:	4b4c      	ldr	r3, [pc, #304]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ee      	bne.n	8002826 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002848:	7dfb      	ldrb	r3, [r7, #23]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d105      	bne.n	800285a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284e:	4b48      	ldr	r3, [pc, #288]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4a47      	ldr	r2, [pc, #284]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002858:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8081 	beq.w	8002966 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002864:	4b42      	ldr	r3, [pc, #264]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d061      	beq.n	8002934 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d146      	bne.n	8002906 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002878:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <HAL_RCC_OscConfig+0x4fc>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fd fe99 	bl	80005b4 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7fd fe95 	bl	80005b4 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e067      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002898:	4b35      	ldr	r3, [pc, #212]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ac:	d108      	bne.n	80028c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ae:	4b30      	ldr	r3, [pc, #192]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	492d      	ldr	r1, [pc, #180]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c0:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a19      	ldr	r1, [r3, #32]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	430b      	orrs	r3, r1
 80028d2:	4927      	ldr	r1, [pc, #156]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_RCC_OscConfig+0x4fc>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fd fe69 	bl	80005b4 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fd fe65 	bl	80005b4 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e037      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f8:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x46a>
 8002904:	e02f      	b.n	8002966 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <HAL_RCC_OscConfig+0x4fc>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fd fe52 	bl	80005b4 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002914:	f7fd fe4e 	bl	80005b4 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e020      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x498>
 8002932:	e018      	b.n	8002966 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e013      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	429a      	cmp	r2, r3
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	40007000 	.word	0x40007000
 8002978:	42420060 	.word	0x42420060

0800297c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0d0      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002990:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d910      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b67      	ldr	r3, [pc, #412]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 0207 	bic.w	r2, r3, #7
 80029a6:	4965      	ldr	r1, [pc, #404]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b63      	ldr	r3, [pc, #396]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0b8      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d8:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f0:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a52      	ldr	r2, [pc, #328]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	494d      	ldr	r1, [pc, #308]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d040      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d115      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e07f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3a:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e073      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e06b      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5a:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4936      	ldr	r1, [pc, #216]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a6c:	f7fd fda2 	bl	80005b4 <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7fd fd9e 	bl	80005b4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e053      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 020c 	and.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d1eb      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d210      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 0207 	bic.w	r2, r3, #7
 8002ab2:	4922      	ldr	r1, [pc, #136]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e032      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4916      	ldr	r1, [pc, #88]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	490e      	ldr	r1, [pc, #56]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b0a:	f000 f821 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	490a      	ldr	r1, [pc, #40]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <HAL_RCC_ClockConfig+0x1cc>)
 8002b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1d0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fc6e 	bl	800040c <HAL_InitTick>

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	40021000 	.word	0x40021000
 8002b44:	0800a26c 	.word	0x0800a26c
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	20000004 	.word	0x20000004

08002b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b50:	b490      	push	{r4, r7}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b56:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b58:	1d3c      	adds	r4, r7, #4
 8002b5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b60:	f240 2301 	movw	r3, #513	; 0x201
 8002b64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b7a:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d002      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x40>
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d003      	beq.n	8002b96 <HAL_RCC_GetSysClockFreq+0x46>
 8002b8e:	e02d      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b92:	623b      	str	r3, [r7, #32]
      break;
 8002b94:	e02d      	b.n	8002bf2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	0c9b      	lsrs	r3, r3, #18
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ba8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d013      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	0c5b      	lsrs	r3, r3, #17
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bc8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	4a0e      	ldr	r2, [pc, #56]	; (8002c08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bce:	fb02 f203 	mul.w	r2, r2, r3
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bda:	e004      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	4a0b      	ldr	r2, [pc, #44]	; (8002c0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002be0:	fb02 f303 	mul.w	r3, r2, r3
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	623b      	str	r3, [r7, #32]
      break;
 8002bea:	e002      	b.n	8002bf2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bee:	623b      	str	r3, [r7, #32]
      break;
 8002bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3728      	adds	r7, #40	; 0x28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc90      	pop	{r4, r7}
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	0800a1c0 	.word	0x0800a1c0
 8002c04:	40021000 	.word	0x40021000
 8002c08:	007a1200 	.word	0x007a1200
 8002c0c:	003d0900 	.word	0x003d0900

08002c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c14:	4b02      	ldr	r3, [pc, #8]	; (8002c20 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	20000000 	.word	0x20000000

08002c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c28:	f7ff fff2 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	0adb      	lsrs	r3, r3, #11
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	4903      	ldr	r1, [pc, #12]	; (8002c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c3a:	5ccb      	ldrb	r3, [r1, r3]
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000
 8002c48:	0800a27c 	.word	0x0800a27c

08002c4c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	220f      	movs	r2, #15
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_RCC_GetClockConfig+0x58>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c68:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_RCC_GetClockConfig+0x58>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_GetClockConfig+0x58>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_RCC_GetClockConfig+0x58>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	08db      	lsrs	r3, r3, #3
 8002c86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0207 	and.w	r2, r3, #7
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40022000 	.word	0x40022000

08002cac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <RCC_Delay+0x34>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <RCC_Delay+0x38>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	0a5b      	lsrs	r3, r3, #9
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cc8:	bf00      	nop
  }
  while (Delay --);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1e5a      	subs	r2, r3, #1
 8002cce:	60fa      	str	r2, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f9      	bne.n	8002cc8 <RCC_Delay+0x1c>
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	10624dd3 	.word	0x10624dd3

08002ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d07d      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d04:	2300      	movs	r3, #0
 8002d06:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d08:	4b4f      	ldr	r3, [pc, #316]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10d      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d14:	4b4c      	ldr	r3, [pc, #304]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	4a4b      	ldr	r2, [pc, #300]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	61d3      	str	r3, [r2, #28]
 8002d20:	4b49      	ldr	r3, [pc, #292]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d30:	4b46      	ldr	r3, [pc, #280]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d118      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3c:	4b43      	ldr	r3, [pc, #268]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a42      	ldr	r2, [pc, #264]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d48:	f7fd fc34 	bl	80005b4 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4e:	e008      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d50:	f7fd fc30 	bl	80005b4 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e06d      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d62:	4b3a      	ldr	r3, [pc, #232]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d6e:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d02e      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d027      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d8c:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d96:	4b2e      	ldr	r3, [pc, #184]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d9c:	4b2c      	ldr	r3, [pc, #176]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002da2:	4a29      	ldr	r2, [pc, #164]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d014      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fd fbff 	bl	80005b4 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fd fbfb 	bl	80005b4 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e036      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0ee      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ddc:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4917      	ldr	r1, [pc, #92]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df4:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e0c:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	490b      	ldr	r1, [pc, #44]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e2a:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	4904      	ldr	r1, [pc, #16]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	42420440 	.word	0x42420440

08002e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e041      	b.n	8002eea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f839 	bl	8002ef2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f000 f9b4 	bl	8003200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d001      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e03a      	b.n	8002f92 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <HAL_TIM_Base_Start_IT+0x98>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00e      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x58>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f46:	d009      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x58>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d004      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x58>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d111      	bne.n	8002f80 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d010      	beq.n	8002f90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7e:	e007      	b.n	8002f90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40000800 	.word	0x40000800

08002fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d122      	bne.n	8003004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d11b      	bne.n	8003004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0202 	mvn.w	r2, #2
 8002fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f8ed 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 8002ff0:	e005      	b.n	8002ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f8e0 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f8ef 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d122      	bne.n	8003058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b04      	cmp	r3, #4
 800301e:	d11b      	bne.n	8003058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0204 	mvn.w	r2, #4
 8003028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f8c3 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 8003044:	e005      	b.n	8003052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f8b6 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f8c5 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b08      	cmp	r3, #8
 8003064:	d122      	bne.n	80030ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b08      	cmp	r3, #8
 8003072:	d11b      	bne.n	80030ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0208 	mvn.w	r2, #8
 800307c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2204      	movs	r2, #4
 8003082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f899 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 8003098:	e005      	b.n	80030a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f88c 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f89b 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d122      	bne.n	8003100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d11b      	bne.n	8003100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0210 	mvn.w	r2, #16
 80030d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2208      	movs	r2, #8
 80030d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f86f 	bl	80031ca <HAL_TIM_IC_CaptureCallback>
 80030ec:	e005      	b.n	80030fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f862 	bl	80031b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f871 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b01      	cmp	r3, #1
 800310c:	d10e      	bne.n	800312c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d107      	bne.n	800312c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0201 	mvn.w	r2, #1
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd f920 	bl	800036c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b80      	cmp	r3, #128	; 0x80
 8003138:	d10e      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	2b80      	cmp	r3, #128	; 0x80
 8003146:	d107      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f8bf 	bl	80032d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d10e      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b40      	cmp	r3, #64	; 0x40
 8003172:	d107      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800317c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f835 	bl	80031ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b20      	cmp	r3, #32
 8003190:	d10e      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b20      	cmp	r3, #32
 800319e:	d107      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0220 	mvn.w	r2, #32
 80031a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f88a 	bl	80032c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <TIM_Base_SetConfig+0xb8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00b      	beq.n	8003230 <TIM_Base_SetConfig+0x30>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321e:	d007      	beq.n	8003230 <TIM_Base_SetConfig+0x30>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a26      	ldr	r2, [pc, #152]	; (80032bc <TIM_Base_SetConfig+0xbc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_Base_SetConfig+0x30>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a25      	ldr	r2, [pc, #148]	; (80032c0 <TIM_Base_SetConfig+0xc0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d108      	bne.n	8003242 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <TIM_Base_SetConfig+0xb8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00b      	beq.n	8003262 <TIM_Base_SetConfig+0x62>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d007      	beq.n	8003262 <TIM_Base_SetConfig+0x62>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a19      	ldr	r2, [pc, #100]	; (80032bc <TIM_Base_SetConfig+0xbc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d003      	beq.n	8003262 <TIM_Base_SetConfig+0x62>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <TIM_Base_SetConfig+0xc0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d108      	bne.n	8003274 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a07      	ldr	r2, [pc, #28]	; (80032b8 <TIM_Base_SetConfig+0xb8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d103      	bne.n	80032a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	615a      	str	r2, [r3, #20]
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40000800 	.word	0x40000800

080032c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032e8:	b084      	sub	sp, #16
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	f107 0014 	add.w	r0, r7, #20
 80032f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	b004      	add	sp, #16
 8003306:	4770      	bx	lr

08003308 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003318:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800331c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	b29a      	uxth	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800333c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003340:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	b29b      	uxth	r3, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	b29b      	uxth	r3, r3
 8003352:	4013      	ands	r3, r2
 8003354:	b29a      	uxth	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003380:	b084      	sub	sp, #16
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	f107 0014 	add.w	r0, r7, #20
 800338e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	b004      	add	sp, #16
 80033be:	4770      	bx	lr

080033c0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b09b      	sub	sp, #108	; 0x6c
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80033e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	78db      	ldrb	r3, [r3, #3]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d81f      	bhi.n	8003432 <USB_ActivateEndpoint+0x72>
 80033f2:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <USB_ActivateEndpoint+0x38>)
 80033f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f8:	08003409 	.word	0x08003409
 80033fc:	08003425 	.word	0x08003425
 8003400:	0800343b 	.word	0x0800343b
 8003404:	08003417 	.word	0x08003417
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003408:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800340c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003410:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003414:	e012      	b.n	800343c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003416:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800341a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800341e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003422:	e00b      	b.n	800343c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003424:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800342c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003430:	e004      	b.n	800343c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003438:	e000      	b.n	800343c <USB_ActivateEndpoint+0x7c>
      break;
 800343a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	441a      	add	r2, r3
 8003446:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800344a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800344e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345a:	b29b      	uxth	r3, r3
 800345c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003474:	b29a      	uxth	r2, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	4313      	orrs	r3, r2
 800347e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	441a      	add	r2, r3
 800348c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	7b1b      	ldrb	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f040 8149 	bne.w	8003740 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	785b      	ldrb	r3, [r3, #1]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 8084 	beq.w	80035c0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	4413      	add	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	011a      	lsls	r2, r3, #4
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	88db      	ldrh	r3, [r3, #6]
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	81fb      	strh	r3, [r7, #14]
 80034fa:	89fb      	ldrh	r3, [r7, #14]
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01b      	beq.n	800353c <USB_ActivateEndpoint+0x17c>
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	81bb      	strh	r3, [r7, #12]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	441a      	add	r2, r3
 8003526:	89bb      	ldrh	r3, [r7, #12]
 8003528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800352c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003534:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003538:	b29b      	uxth	r3, r3
 800353a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	78db      	ldrb	r3, [r3, #3]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d020      	beq.n	8003586 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800355a:	813b      	strh	r3, [r7, #8]
 800355c:	893b      	ldrh	r3, [r7, #8]
 800355e:	f083 0320 	eor.w	r3, r3, #32
 8003562:	813b      	strh	r3, [r7, #8]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	441a      	add	r2, r3
 800356e:	893b      	ldrh	r3, [r7, #8]
 8003570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003580:	b29b      	uxth	r3, r3
 8003582:	8013      	strh	r3, [r2, #0]
 8003584:	e27f      	b.n	8003a86 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800359c:	817b      	strh	r3, [r7, #10]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	441a      	add	r2, r3
 80035a8:	897b      	ldrh	r3, [r7, #10]
 80035aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	8013      	strh	r3, [r2, #0]
 80035be:	e262      	b.n	8003a86 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	4413      	add	r3, r2
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	011a      	lsls	r2, r3, #4
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	88db      	ldrh	r3, [r3, #6]
 80035e8:	085b      	lsrs	r3, r3, #1
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035fe:	b29b      	uxth	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	4413      	add	r3, r2
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	011a      	lsls	r2, r3, #4
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	4413      	add	r3, r2
 8003612:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003616:	623b      	str	r3, [r7, #32]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d112      	bne.n	8003646 <USB_ActivateEndpoint+0x286>
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800362a:	b29a      	uxth	r2, r3
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	b29b      	uxth	r3, r3
 8003636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800363a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800363e:	b29a      	uxth	r2, r3
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	801a      	strh	r2, [r3, #0]
 8003644:	e02f      	b.n	80036a6 <USB_ActivateEndpoint+0x2e6>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b3e      	cmp	r3, #62	; 0x3e
 800364c:	d813      	bhi.n	8003676 <USB_ActivateEndpoint+0x2b6>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	085b      	lsrs	r3, r3, #1
 8003654:	663b      	str	r3, [r7, #96]	; 0x60
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <USB_ActivateEndpoint+0x2a8>
 8003662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003664:	3301      	adds	r3, #1
 8003666:	663b      	str	r3, [r7, #96]	; 0x60
 8003668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800366a:	b29b      	uxth	r3, r3
 800366c:	029b      	lsls	r3, r3, #10
 800366e:	b29a      	uxth	r2, r3
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	e017      	b.n	80036a6 <USB_ActivateEndpoint+0x2e6>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	663b      	str	r3, [r7, #96]	; 0x60
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <USB_ActivateEndpoint+0x2d0>
 800368a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800368c:	3b01      	subs	r3, #1
 800368e:	663b      	str	r3, [r7, #96]	; 0x60
 8003690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003692:	b29b      	uxth	r3, r3
 8003694:	029b      	lsls	r3, r3, #10
 8003696:	b29b      	uxth	r3, r3
 8003698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	83fb      	strh	r3, [r7, #30]
 80036b4:	8bfb      	ldrh	r3, [r7, #30]
 80036b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d01b      	beq.n	80036f6 <USB_ActivateEndpoint+0x336>
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d4:	83bb      	strh	r3, [r7, #28]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	441a      	add	r2, r3
 80036e0:	8bbb      	ldrh	r3, [r7, #28]
 80036e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	b29b      	uxth	r3, r3
 8003704:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370c:	837b      	strh	r3, [r7, #26]
 800370e:	8b7b      	ldrh	r3, [r7, #26]
 8003710:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003714:	837b      	strh	r3, [r7, #26]
 8003716:	8b7b      	ldrh	r3, [r7, #26]
 8003718:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800371c:	837b      	strh	r3, [r7, #26]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	441a      	add	r2, r3
 8003728:	8b7b      	ldrh	r3, [r7, #26]
 800372a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800372e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800373a:	b29b      	uxth	r3, r3
 800373c:	8013      	strh	r3, [r2, #0]
 800373e:	e1a2      	b.n	8003a86 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003756:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	441a      	add	r2, r3
 8003764:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800376c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003770:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003778:	b29b      	uxth	r3, r3
 800377a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003786:	b29b      	uxth	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800378c:	4413      	add	r3, r2
 800378e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	011a      	lsls	r2, r3, #4
 8003796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003798:	4413      	add	r3, r2
 800379a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800379e:	657b      	str	r3, [r7, #84]	; 0x54
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	891b      	ldrh	r3, [r3, #8]
 80037a4:	085b      	lsrs	r3, r3, #1
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ae:	801a      	strh	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	653b      	str	r3, [r7, #80]	; 0x50
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c0:	4413      	add	r3, r2
 80037c2:	653b      	str	r3, [r7, #80]	; 0x50
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	011a      	lsls	r2, r3, #4
 80037ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80037d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	895b      	ldrh	r3, [r3, #10]
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	b29b      	uxth	r3, r3
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f040 8091 	bne.w	8003910 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80037fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80037fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01b      	beq.n	800383e <USB_ActivateEndpoint+0x47e>
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	441a      	add	r2, r3
 8003828:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800382a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800382e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383a:	b29b      	uxth	r3, r3
 800383c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	873b      	strh	r3, [r7, #56]	; 0x38
 800384c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800384e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01b      	beq.n	800388e <USB_ActivateEndpoint+0x4ce>
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	441a      	add	r2, r3
 8003878:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800387a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800387e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003886:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800388a:	b29b      	uxth	r3, r3
 800388c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80038a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80038a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80038ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80038ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80038b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	441a      	add	r2, r3
 80038c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80038c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ec:	867b      	strh	r3, [r7, #50]	; 0x32
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	441a      	add	r2, r3
 80038f8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80038fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800390a:	b29b      	uxth	r3, r3
 800390c:	8013      	strh	r3, [r2, #0]
 800390e:	e0ba      	b.n	8003a86 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003920:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01d      	beq.n	8003968 <USB_ActivateEndpoint+0x5a8>
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	b29b      	uxth	r3, r3
 800393a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003942:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003964:	b29b      	uxth	r3, r3
 8003966:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003978:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800397c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01d      	beq.n	80039c0 <USB_ActivateEndpoint+0x600>
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	b29b      	uxth	r3, r3
 8003992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	441a      	add	r2, r3
 80039a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80039ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039bc:	b29b      	uxth	r3, r3
 80039be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	78db      	ldrb	r3, [r3, #3]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d024      	beq.n	8003a12 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80039e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80039e6:	f083 0320 	eor.w	r3, r3, #32
 80039ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	441a      	add	r2, r3
 80039f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80039fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	8013      	strh	r3, [r2, #0]
 8003a10:	e01d      	b.n	8003a4e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	441a      	add	r2, r3
 8003a36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a64:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	441a      	add	r2, r3
 8003a70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003a86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	376c      	adds	r7, #108	; 0x6c
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b08d      	sub	sp, #52	; 0x34
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	7b1b      	ldrb	r3, [r3, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f040 808e 	bne.w	8003bc4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	785b      	ldrb	r3, [r3, #1]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d044      	beq.n	8003b3a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	81bb      	strh	r3, [r7, #12]
 8003abe:	89bb      	ldrh	r3, [r7, #12]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01b      	beq.n	8003b00 <USB_DeactivateEndpoint+0x6c>
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ade:	817b      	strh	r3, [r7, #10]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	441a      	add	r2, r3
 8003aea:	897b      	ldrh	r3, [r7, #10]
 8003aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b16:	813b      	strh	r3, [r7, #8]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	441a      	add	r2, r3
 8003b22:	893b      	ldrh	r3, [r7, #8]
 8003b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	8013      	strh	r3, [r2, #0]
 8003b38:	e192      	b.n	8003e60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	827b      	strh	r3, [r7, #18]
 8003b48:	8a7b      	ldrh	r3, [r7, #18]
 8003b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d01b      	beq.n	8003b8a <USB_DeactivateEndpoint+0xf6>
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b68:	823b      	strh	r3, [r7, #16]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	441a      	add	r2, r3
 8003b74:	8a3b      	ldrh	r3, [r7, #16]
 8003b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba0:	81fb      	strh	r3, [r7, #14]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	441a      	add	r2, r3
 8003bac:	89fb      	ldrh	r3, [r7, #14]
 8003bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	8013      	strh	r3, [r2, #0]
 8003bc2:	e14d      	b.n	8003e60 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	785b      	ldrb	r3, [r3, #1]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f040 80a5 	bne.w	8003d18 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	843b      	strh	r3, [r7, #32]
 8003bdc:	8c3b      	ldrh	r3, [r7, #32]
 8003bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01b      	beq.n	8003c1e <USB_DeactivateEndpoint+0x18a>
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfc:	83fb      	strh	r3, [r7, #30]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	441a      	add	r2, r3
 8003c08:	8bfb      	ldrh	r3, [r7, #30]
 8003c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	83bb      	strh	r3, [r7, #28]
 8003c2c:	8bbb      	ldrh	r3, [r7, #28]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01b      	beq.n	8003c6e <USB_DeactivateEndpoint+0x1da>
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4c:	837b      	strh	r3, [r7, #26]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	441a      	add	r2, r3
 8003c58:	8b7b      	ldrh	r3, [r7, #26]
 8003c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c84:	833b      	strh	r3, [r7, #24]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	441a      	add	r2, r3
 8003c90:	8b3b      	ldrh	r3, [r7, #24]
 8003c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbc:	82fb      	strh	r3, [r7, #22]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	441a      	add	r2, r3
 8003cc8:	8afb      	ldrh	r3, [r7, #22]
 8003cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf4:	82bb      	strh	r3, [r7, #20]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	441a      	add	r2, r3
 8003d00:	8abb      	ldrh	r3, [r7, #20]
 8003d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	8013      	strh	r3, [r2, #0]
 8003d16:	e0a3      	b.n	8003e60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003d26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01b      	beq.n	8003d68 <USB_DeactivateEndpoint+0x2d4>
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d46:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	441a      	add	r2, r3
 8003d52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003d76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01b      	beq.n	8003db8 <USB_DeactivateEndpoint+0x324>
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d96:	853b      	strh	r3, [r7, #40]	; 0x28
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	441a      	add	r2, r3
 8003da2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	441a      	add	r2, r3
 8003dda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	441a      	add	r2, r3
 8003e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	441a      	add	r2, r3
 8003e4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3734      	adds	r7, #52	; 0x34
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b0cc      	sub	sp, #304	; 0x130
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	1d3b      	adds	r3, r7, #4
 8003e74:	6018      	str	r0, [r3, #0]
 8003e76:	463b      	mov	r3, r7
 8003e78:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e7a:	463b      	mov	r3, r7
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	785b      	ldrb	r3, [r3, #1]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	f040 872e 	bne.w	8004ce2 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003e86:	463b      	mov	r3, r7
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699a      	ldr	r2, [r3, #24]
 8003e8c:	463b      	mov	r3, r7
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d905      	bls.n	8003ea2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003e96:	463b      	mov	r3, r7
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003ea0:	e004      	b.n	8003eac <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003ea2:	463b      	mov	r3, r7
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003eac:	463b      	mov	r3, r7
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	7b1b      	ldrb	r3, [r3, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d134      	bne.n	8003f20 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003eb6:	463b      	mov	r3, r7
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6959      	ldr	r1, [r3, #20]
 8003ebc:	463b      	mov	r3, r7
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	88da      	ldrh	r2, [r3, #6]
 8003ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	1d38      	adds	r0, r7, #4
 8003eca:	6800      	ldr	r0, [r0, #0]
 8003ecc:	f001 fc03 	bl	80056d6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003ed0:	f107 0310 	add.w	r3, r7, #16
 8003ed4:	1d3a      	adds	r2, r7, #4
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	1d3b      	adds	r3, r7, #4
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f107 0310 	add.w	r3, r7, #16
 8003eea:	f107 0210 	add.w	r2, r7, #16
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	463b      	mov	r3, r7
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	011a      	lsls	r2, r3, #4
 8003efc:	f107 0310 	add.w	r3, r7, #16
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4413      	add	r3, r2
 8003f04:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003f08:	f107 030c 	add.w	r3, r7, #12
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	f107 030c 	add.w	r3, r7, #12
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	801a      	strh	r2, [r3, #0]
 8003f1c:	f000 beac 	b.w	8004c78 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003f20:	463b      	mov	r3, r7
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	78db      	ldrb	r3, [r3, #3]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	f040 838c 	bne.w	8004644 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003f2c:	463b      	mov	r3, r7
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6a1a      	ldr	r2, [r3, #32]
 8003f32:	463b      	mov	r3, r7
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	f240 8330 	bls.w	800459e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003f3e:	1d3b      	adds	r3, r7, #4
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	463b      	mov	r3, r7
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f58:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003f5c:	1d3b      	adds	r3, r7, #4
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	463b      	mov	r3, r7
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	441a      	add	r2, r3
 8003f6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f76:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003f82:	463b      	mov	r3, r7
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6a1a      	ldr	r2, [r3, #32]
 8003f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f8c:	1ad2      	subs	r2, r2, r3
 8003f8e:	463b      	mov	r3, r7
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003f94:	1d3b      	adds	r3, r7, #4
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	463b      	mov	r3, r7
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 819e 	beq.w	80042ec <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003fb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fb4:	1d3a      	adds	r2, r7, #4
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	463b      	mov	r3, r7
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d17a      	bne.n	80040ba <USB_EPStartXfer+0x24e>
 8003fc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fc8:	1d3a      	adds	r2, r7, #4
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	1d3b      	adds	r3, r7, #4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	4619      	mov	r1, r3
 8003fda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	440a      	add	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	463b      	mov	r3, r7
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	011a      	lsls	r2, r3, #4
 8003ff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d11a      	bne.n	8004040 <USB_EPStartXfer+0x1d4>
 800400a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	b29b      	uxth	r3, r3
 8004014:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004018:	b29a      	uxth	r2, r3
 800401a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	801a      	strh	r2, [r3, #0]
 8004022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004034:	b29a      	uxth	r2, r3
 8004036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	801a      	strh	r2, [r3, #0]
 800403e:	e062      	b.n	8004106 <USB_EPStartXfer+0x29a>
 8004040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004044:	2b3e      	cmp	r3, #62	; 0x3e
 8004046:	d819      	bhi.n	800407c <USB_EPStartXfer+0x210>
 8004048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d004      	beq.n	8004068 <USB_EPStartXfer+0x1fc>
 800405e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004062:	3301      	adds	r3, #1
 8004064:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004068:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800406c:	b29b      	uxth	r3, r3
 800406e:	029b      	lsls	r3, r3, #10
 8004070:	b29a      	uxth	r2, r3
 8004072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	801a      	strh	r2, [r3, #0]
 800407a:	e044      	b.n	8004106 <USB_EPStartXfer+0x29a>
 800407c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	2b00      	cmp	r3, #0
 8004090:	d104      	bne.n	800409c <USB_EPStartXfer+0x230>
 8004092:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004096:	3b01      	subs	r3, #1
 8004098:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800409c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	029b      	lsls	r3, r3, #10
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	801a      	strh	r2, [r3, #0]
 80040b8:	e025      	b.n	8004106 <USB_EPStartXfer+0x29a>
 80040ba:	463b      	mov	r3, r7
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	785b      	ldrb	r3, [r3, #1]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d120      	bne.n	8004106 <USB_EPStartXfer+0x29a>
 80040c4:	1d3b      	adds	r3, r7, #4
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	4619      	mov	r1, r3
 80040d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	440a      	add	r2, r1
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	463b      	mov	r3, r7
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	011a      	lsls	r2, r3, #4
 80040e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4413      	add	r3, r2
 80040ee:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80040f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004106:	463b      	mov	r3, r7
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	895b      	ldrh	r3, [r3, #10]
 800410c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004110:	463b      	mov	r3, r7
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6959      	ldr	r1, [r3, #20]
 8004116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800411a:	b29b      	uxth	r3, r3
 800411c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004120:	1d38      	adds	r0, r7, #4
 8004122:	6800      	ldr	r0, [r0, #0]
 8004124:	f001 fad7 	bl	80056d6 <USB_WritePMA>
            ep->xfer_buff += len;
 8004128:	463b      	mov	r3, r7
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004132:	441a      	add	r2, r3
 8004134:	463b      	mov	r3, r7
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800413a:	463b      	mov	r3, r7
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6a1a      	ldr	r2, [r3, #32]
 8004140:	463b      	mov	r3, r7
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	429a      	cmp	r2, r3
 8004148:	d909      	bls.n	800415e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800414a:	463b      	mov	r3, r7
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6a1a      	ldr	r2, [r3, #32]
 8004150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004154:	1ad2      	subs	r2, r2, r3
 8004156:	463b      	mov	r3, r7
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	621a      	str	r2, [r3, #32]
 800415c:	e008      	b.n	8004170 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800415e:	463b      	mov	r3, r7
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004168:	463b      	mov	r3, r7
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2200      	movs	r2, #0
 800416e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004170:	463b      	mov	r3, r7
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	785b      	ldrb	r3, [r3, #1]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d17a      	bne.n	8004270 <USB_EPStartXfer+0x404>
 800417a:	f107 0318 	add.w	r3, r7, #24
 800417e:	1d3a      	adds	r2, r7, #4
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	1d3b      	adds	r3, r7, #4
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800418c:	b29b      	uxth	r3, r3
 800418e:	4619      	mov	r1, r3
 8004190:	f107 0318 	add.w	r3, r7, #24
 8004194:	f107 0218 	add.w	r2, r7, #24
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	440a      	add	r2, r1
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	463b      	mov	r3, r7
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	011a      	lsls	r2, r3, #4
 80041a6:	f107 0318 	add.w	r3, r7, #24
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4413      	add	r3, r2
 80041ae:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80041b2:	f107 0314 	add.w	r3, r7, #20
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d11a      	bne.n	80041f6 <USB_EPStartXfer+0x38a>
 80041c0:	f107 0314 	add.w	r3, r7, #20
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	f107 0314 	add.w	r3, r7, #20
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	801a      	strh	r2, [r3, #0]
 80041d8:	f107 0314 	add.w	r3, r7, #20
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	801a      	strh	r2, [r3, #0]
 80041f4:	e067      	b.n	80042c6 <USB_EPStartXfer+0x45a>
 80041f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041fa:	2b3e      	cmp	r3, #62	; 0x3e
 80041fc:	d819      	bhi.n	8004232 <USB_EPStartXfer+0x3c6>
 80041fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <USB_EPStartXfer+0x3b2>
 8004214:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004218:	3301      	adds	r3, #1
 800421a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800421e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004222:	b29b      	uxth	r3, r3
 8004224:	029b      	lsls	r3, r3, #10
 8004226:	b29a      	uxth	r2, r3
 8004228:	f107 0314 	add.w	r3, r7, #20
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	801a      	strh	r2, [r3, #0]
 8004230:	e049      	b.n	80042c6 <USB_EPStartXfer+0x45a>
 8004232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800423c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2b00      	cmp	r3, #0
 8004246:	d104      	bne.n	8004252 <USB_EPStartXfer+0x3e6>
 8004248:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800424c:	3b01      	subs	r3, #1
 800424e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004252:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004256:	b29b      	uxth	r3, r3
 8004258:	029b      	lsls	r3, r3, #10
 800425a:	b29b      	uxth	r3, r3
 800425c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004264:	b29a      	uxth	r2, r3
 8004266:	f107 0314 	add.w	r3, r7, #20
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	801a      	strh	r2, [r3, #0]
 800426e:	e02a      	b.n	80042c6 <USB_EPStartXfer+0x45a>
 8004270:	463b      	mov	r3, r7
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d125      	bne.n	80042c6 <USB_EPStartXfer+0x45a>
 800427a:	f107 0320 	add.w	r3, r7, #32
 800427e:	1d3a      	adds	r2, r7, #4
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	1d3b      	adds	r3, r7, #4
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800428c:	b29b      	uxth	r3, r3
 800428e:	4619      	mov	r1, r3
 8004290:	f107 0320 	add.w	r3, r7, #32
 8004294:	f107 0220 	add.w	r2, r7, #32
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	440a      	add	r2, r1
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	463b      	mov	r3, r7
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	011a      	lsls	r2, r3, #4
 80042a6:	f107 0320 	add.w	r3, r7, #32
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4413      	add	r3, r2
 80042ae:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80042b2:	f107 031c 	add.w	r3, r7, #28
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042bc:	b29a      	uxth	r2, r3
 80042be:	f107 031c 	add.w	r3, r7, #28
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80042c6:	463b      	mov	r3, r7
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	891b      	ldrh	r3, [r3, #8]
 80042cc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042d0:	463b      	mov	r3, r7
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6959      	ldr	r1, [r3, #20]
 80042d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80042e0:	1d38      	adds	r0, r7, #4
 80042e2:	6800      	ldr	r0, [r0, #0]
 80042e4:	f001 f9f7 	bl	80056d6 <USB_WritePMA>
 80042e8:	f000 bcc6 	b.w	8004c78 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042ec:	463b      	mov	r3, r7
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	785b      	ldrb	r3, [r3, #1]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d164      	bne.n	80043c0 <USB_EPStartXfer+0x554>
 80042f6:	1d3b      	adds	r3, r7, #4
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80042fc:	1d3b      	adds	r3, r7, #4
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004304:	b29b      	uxth	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800430a:	4413      	add	r3, r2
 800430c:	64bb      	str	r3, [r7, #72]	; 0x48
 800430e:	463b      	mov	r3, r7
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	011a      	lsls	r2, r3, #4
 8004316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004318:	4413      	add	r3, r2
 800431a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800431e:	647b      	str	r3, [r7, #68]	; 0x44
 8004320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d112      	bne.n	800434e <USB_EPStartXfer+0x4e2>
 8004328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	b29b      	uxth	r3, r3
 800432e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004332:	b29a      	uxth	r2, r3
 8004334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004336:	801a      	strh	r2, [r3, #0]
 8004338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004346:	b29a      	uxth	r2, r3
 8004348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800434a:	801a      	strh	r2, [r3, #0]
 800434c:	e057      	b.n	80043fe <USB_EPStartXfer+0x592>
 800434e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004352:	2b3e      	cmp	r3, #62	; 0x3e
 8004354:	d817      	bhi.n	8004386 <USB_EPStartXfer+0x51a>
 8004356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d004      	beq.n	8004376 <USB_EPStartXfer+0x50a>
 800436c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004370:	3301      	adds	r3, #1
 8004372:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004376:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800437a:	b29b      	uxth	r3, r3
 800437c:	029b      	lsls	r3, r3, #10
 800437e:	b29a      	uxth	r2, r3
 8004380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004382:	801a      	strh	r2, [r3, #0]
 8004384:	e03b      	b.n	80043fe <USB_EPStartXfer+0x592>
 8004386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	2b00      	cmp	r3, #0
 800439a:	d104      	bne.n	80043a6 <USB_EPStartXfer+0x53a>
 800439c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80043a0:	3b01      	subs	r3, #1
 80043a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80043a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	029b      	lsls	r3, r3, #10
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043bc:	801a      	strh	r2, [r3, #0]
 80043be:	e01e      	b.n	80043fe <USB_EPStartXfer+0x592>
 80043c0:	463b      	mov	r3, r7
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	785b      	ldrb	r3, [r3, #1]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d119      	bne.n	80043fe <USB_EPStartXfer+0x592>
 80043ca:	1d3b      	adds	r3, r7, #4
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	653b      	str	r3, [r7, #80]	; 0x50
 80043d0:	1d3b      	adds	r3, r7, #4
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d8:	b29b      	uxth	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043de:	4413      	add	r3, r2
 80043e0:	653b      	str	r3, [r7, #80]	; 0x50
 80043e2:	463b      	mov	r3, r7
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	011a      	lsls	r2, r3, #4
 80043ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ec:	4413      	add	r3, r2
 80043ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80043fe:	463b      	mov	r3, r7
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	891b      	ldrh	r3, [r3, #8]
 8004404:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004408:	463b      	mov	r3, r7
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6959      	ldr	r1, [r3, #20]
 800440e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004412:	b29b      	uxth	r3, r3
 8004414:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004418:	1d38      	adds	r0, r7, #4
 800441a:	6800      	ldr	r0, [r0, #0]
 800441c:	f001 f95b 	bl	80056d6 <USB_WritePMA>
            ep->xfer_buff += len;
 8004420:	463b      	mov	r3, r7
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800442a:	441a      	add	r2, r3
 800442c:	463b      	mov	r3, r7
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004432:	463b      	mov	r3, r7
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6a1a      	ldr	r2, [r3, #32]
 8004438:	463b      	mov	r3, r7
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	429a      	cmp	r2, r3
 8004440:	d909      	bls.n	8004456 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8004442:	463b      	mov	r3, r7
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800444c:	1ad2      	subs	r2, r2, r3
 800444e:	463b      	mov	r3, r7
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	621a      	str	r2, [r3, #32]
 8004454:	e008      	b.n	8004468 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004456:	463b      	mov	r3, r7
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004460:	463b      	mov	r3, r7
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2200      	movs	r2, #0
 8004466:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004468:	1d3b      	adds	r3, r7, #4
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	643b      	str	r3, [r7, #64]	; 0x40
 800446e:	463b      	mov	r3, r7
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	785b      	ldrb	r3, [r3, #1]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d164      	bne.n	8004542 <USB_EPStartXfer+0x6d6>
 8004478:	1d3b      	adds	r3, r7, #4
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	63bb      	str	r3, [r7, #56]	; 0x38
 800447e:	1d3b      	adds	r3, r7, #4
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004486:	b29b      	uxth	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	4413      	add	r3, r2
 800448e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004490:	463b      	mov	r3, r7
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	011a      	lsls	r2, r3, #4
 8004498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449a:	4413      	add	r3, r2
 800449c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044a0:	637b      	str	r3, [r7, #52]	; 0x34
 80044a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d112      	bne.n	80044d0 <USB_EPStartXfer+0x664>
 80044aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b8:	801a      	strh	r2, [r3, #0]
 80044ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044cc:	801a      	strh	r2, [r3, #0]
 80044ce:	e054      	b.n	800457a <USB_EPStartXfer+0x70e>
 80044d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044d4:	2b3e      	cmp	r3, #62	; 0x3e
 80044d6:	d817      	bhi.n	8004508 <USB_EPStartXfer+0x69c>
 80044d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044dc:	085b      	lsrs	r3, r3, #1
 80044de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80044e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d004      	beq.n	80044f8 <USB_EPStartXfer+0x68c>
 80044ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044f2:	3301      	adds	r3, #1
 80044f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80044f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	029b      	lsls	r3, r3, #10
 8004500:	b29a      	uxth	r2, r3
 8004502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004504:	801a      	strh	r2, [r3, #0]
 8004506:	e038      	b.n	800457a <USB_EPStartXfer+0x70e>
 8004508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	2b00      	cmp	r3, #0
 800451c:	d104      	bne.n	8004528 <USB_EPStartXfer+0x6bc>
 800451e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004522:	3b01      	subs	r3, #1
 8004524:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004528:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800452c:	b29b      	uxth	r3, r3
 800452e:	029b      	lsls	r3, r3, #10
 8004530:	b29b      	uxth	r3, r3
 8004532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800453a:	b29a      	uxth	r2, r3
 800453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453e:	801a      	strh	r2, [r3, #0]
 8004540:	e01b      	b.n	800457a <USB_EPStartXfer+0x70e>
 8004542:	463b      	mov	r3, r7
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	785b      	ldrb	r3, [r3, #1]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d116      	bne.n	800457a <USB_EPStartXfer+0x70e>
 800454c:	1d3b      	adds	r3, r7, #4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004554:	b29b      	uxth	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800455a:	4413      	add	r3, r2
 800455c:	643b      	str	r3, [r7, #64]	; 0x40
 800455e:	463b      	mov	r3, r7
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	011a      	lsls	r2, r3, #4
 8004566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004568:	4413      	add	r3, r2
 800456a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800456e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004574:	b29a      	uxth	r2, r3
 8004576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004578:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800457a:	463b      	mov	r3, r7
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	895b      	ldrh	r3, [r3, #10]
 8004580:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004584:	463b      	mov	r3, r7
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6959      	ldr	r1, [r3, #20]
 800458a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800458e:	b29b      	uxth	r3, r3
 8004590:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004594:	1d38      	adds	r0, r7, #4
 8004596:	6800      	ldr	r0, [r0, #0]
 8004598:	f001 f89d 	bl	80056d6 <USB_WritePMA>
 800459c:	e36c      	b.n	8004c78 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800459e:	463b      	mov	r3, r7
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80045a8:	1d3b      	adds	r3, r7, #4
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	463b      	mov	r3, r7
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80045be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80045c6:	1d3b      	adds	r3, r7, #4
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	463b      	mov	r3, r7
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	441a      	add	r2, r3
 80045d4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80045d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80045ec:	1d3b      	adds	r3, r7, #4
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045f2:	1d3b      	adds	r3, r7, #4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004600:	4413      	add	r3, r2
 8004602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004604:	463b      	mov	r3, r7
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	011a      	lsls	r2, r3, #4
 800460c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800460e:	4413      	add	r3, r2
 8004610:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004614:	65bb      	str	r3, [r7, #88]	; 0x58
 8004616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800461a:	b29a      	uxth	r2, r3
 800461c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800461e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004620:	463b      	mov	r3, r7
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	891b      	ldrh	r3, [r3, #8]
 8004626:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800462a:	463b      	mov	r3, r7
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6959      	ldr	r1, [r3, #20]
 8004630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004634:	b29b      	uxth	r3, r3
 8004636:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800463a:	1d38      	adds	r0, r7, #4
 800463c:	6800      	ldr	r0, [r0, #0]
 800463e:	f001 f84a 	bl	80056d6 <USB_WritePMA>
 8004642:	e319      	b.n	8004c78 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004644:	1d3b      	adds	r3, r7, #4
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	463b      	mov	r3, r7
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004662:	1d3b      	adds	r3, r7, #4
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	463b      	mov	r3, r7
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	441a      	add	r2, r3
 8004670:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004684:	b29b      	uxth	r3, r3
 8004686:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004688:	463b      	mov	r3, r7
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6a1a      	ldr	r2, [r3, #32]
 800468e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004692:	1ad2      	subs	r2, r2, r3
 8004694:	463b      	mov	r3, r7
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800469a:	1d3b      	adds	r3, r7, #4
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	463b      	mov	r3, r7
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8162 	beq.w	800497a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80046b6:	1d3b      	adds	r3, r7, #4
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046be:	463b      	mov	r3, r7
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	785b      	ldrb	r3, [r3, #1]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d164      	bne.n	8004792 <USB_EPStartXfer+0x926>
 80046c8:	1d3b      	adds	r3, r7, #4
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80046ce:	1d3b      	adds	r3, r7, #4
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046dc:	4413      	add	r3, r2
 80046de:	67bb      	str	r3, [r7, #120]	; 0x78
 80046e0:	463b      	mov	r3, r7
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	011a      	lsls	r2, r3, #4
 80046e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ea:	4413      	add	r3, r2
 80046ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046f0:	677b      	str	r3, [r7, #116]	; 0x74
 80046f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d112      	bne.n	8004720 <USB_EPStartXfer+0x8b4>
 80046fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004704:	b29a      	uxth	r2, r3
 8004706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004708:	801a      	strh	r2, [r3, #0]
 800470a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004718:	b29a      	uxth	r2, r3
 800471a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	e057      	b.n	80047d0 <USB_EPStartXfer+0x964>
 8004720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004724:	2b3e      	cmp	r3, #62	; 0x3e
 8004726:	d817      	bhi.n	8004758 <USB_EPStartXfer+0x8ec>
 8004728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d004      	beq.n	8004748 <USB_EPStartXfer+0x8dc>
 800473e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004742:	3301      	adds	r3, #1
 8004744:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004748:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800474c:	b29b      	uxth	r3, r3
 800474e:	029b      	lsls	r3, r3, #10
 8004750:	b29a      	uxth	r2, r3
 8004752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004754:	801a      	strh	r2, [r3, #0]
 8004756:	e03b      	b.n	80047d0 <USB_EPStartXfer+0x964>
 8004758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004766:	f003 031f 	and.w	r3, r3, #31
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <USB_EPStartXfer+0x90c>
 800476e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004772:	3b01      	subs	r3, #1
 8004774:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004778:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800477c:	b29b      	uxth	r3, r3
 800477e:	029b      	lsls	r3, r3, #10
 8004780:	b29b      	uxth	r3, r3
 8004782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800478a:	b29a      	uxth	r2, r3
 800478c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800478e:	801a      	strh	r2, [r3, #0]
 8004790:	e01e      	b.n	80047d0 <USB_EPStartXfer+0x964>
 8004792:	463b      	mov	r3, r7
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	785b      	ldrb	r3, [r3, #1]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d119      	bne.n	80047d0 <USB_EPStartXfer+0x964>
 800479c:	1d3b      	adds	r3, r7, #4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047ac:	4413      	add	r3, r2
 80047ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047b2:	463b      	mov	r3, r7
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	011a      	lsls	r2, r3, #4
 80047ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047be:	4413      	add	r3, r2
 80047c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80047d0:	463b      	mov	r3, r7
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	895b      	ldrh	r3, [r3, #10]
 80047d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047da:	463b      	mov	r3, r7
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6959      	ldr	r1, [r3, #20]
 80047e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80047ea:	1d38      	adds	r0, r7, #4
 80047ec:	6800      	ldr	r0, [r0, #0]
 80047ee:	f000 ff72 	bl	80056d6 <USB_WritePMA>
          ep->xfer_buff += len;
 80047f2:	463b      	mov	r3, r7
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695a      	ldr	r2, [r3, #20]
 80047f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047fc:	441a      	add	r2, r3
 80047fe:	463b      	mov	r3, r7
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004804:	463b      	mov	r3, r7
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6a1a      	ldr	r2, [r3, #32]
 800480a:	463b      	mov	r3, r7
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	429a      	cmp	r2, r3
 8004812:	d909      	bls.n	8004828 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8004814:	463b      	mov	r3, r7
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6a1a      	ldr	r2, [r3, #32]
 800481a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800481e:	1ad2      	subs	r2, r2, r3
 8004820:	463b      	mov	r3, r7
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	621a      	str	r2, [r3, #32]
 8004826:	e008      	b.n	800483a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8004828:	463b      	mov	r3, r7
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004832:	463b      	mov	r3, r7
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2200      	movs	r2, #0
 8004838:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800483a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 821a 	beq.w	8004c78 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004844:	463b      	mov	r3, r7
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	785b      	ldrb	r3, [r3, #1]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d164      	bne.n	8004918 <USB_EPStartXfer+0xaac>
 800484e:	1d3b      	adds	r3, r7, #4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	66bb      	str	r3, [r7, #104]	; 0x68
 8004854:	1d3b      	adds	r3, r7, #4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800485c:	b29b      	uxth	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004862:	4413      	add	r3, r2
 8004864:	66bb      	str	r3, [r7, #104]	; 0x68
 8004866:	463b      	mov	r3, r7
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	011a      	lsls	r2, r3, #4
 800486e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004870:	4413      	add	r3, r2
 8004872:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004876:	667b      	str	r3, [r7, #100]	; 0x64
 8004878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d112      	bne.n	80048a6 <USB_EPStartXfer+0xa3a>
 8004880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800488a:	b29a      	uxth	r2, r3
 800488c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800488e:	801a      	strh	r2, [r3, #0]
 8004890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	b29b      	uxth	r3, r3
 8004896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800489a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489e:	b29a      	uxth	r2, r3
 80048a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048a2:	801a      	strh	r2, [r3, #0]
 80048a4:	e057      	b.n	8004956 <USB_EPStartXfer+0xaea>
 80048a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048aa:	2b3e      	cmp	r3, #62	; 0x3e
 80048ac:	d817      	bhi.n	80048de <USB_EPStartXfer+0xa72>
 80048ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80048b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d004      	beq.n	80048ce <USB_EPStartXfer+0xa62>
 80048c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c8:	3301      	adds	r3, #1
 80048ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80048ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	029b      	lsls	r3, r3, #10
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048da:	801a      	strh	r2, [r3, #0]
 80048dc:	e03b      	b.n	8004956 <USB_EPStartXfer+0xaea>
 80048de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80048e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d104      	bne.n	80048fe <USB_EPStartXfer+0xa92>
 80048f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f8:	3b01      	subs	r3, #1
 80048fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004902:	b29b      	uxth	r3, r3
 8004904:	029b      	lsls	r3, r3, #10
 8004906:	b29b      	uxth	r3, r3
 8004908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800490c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004910:	b29a      	uxth	r2, r3
 8004912:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004914:	801a      	strh	r2, [r3, #0]
 8004916:	e01e      	b.n	8004956 <USB_EPStartXfer+0xaea>
 8004918:	463b      	mov	r3, r7
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	785b      	ldrb	r3, [r3, #1]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d119      	bne.n	8004956 <USB_EPStartXfer+0xaea>
 8004922:	1d3b      	adds	r3, r7, #4
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	673b      	str	r3, [r7, #112]	; 0x70
 8004928:	1d3b      	adds	r3, r7, #4
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004930:	b29b      	uxth	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004936:	4413      	add	r3, r2
 8004938:	673b      	str	r3, [r7, #112]	; 0x70
 800493a:	463b      	mov	r3, r7
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	011a      	lsls	r2, r3, #4
 8004942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004944:	4413      	add	r3, r2
 8004946:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800494a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800494c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004950:	b29a      	uxth	r2, r3
 8004952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004954:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004956:	463b      	mov	r3, r7
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	891b      	ldrh	r3, [r3, #8]
 800495c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004960:	463b      	mov	r3, r7
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6959      	ldr	r1, [r3, #20]
 8004966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800496a:	b29b      	uxth	r3, r3
 800496c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004970:	1d38      	adds	r0, r7, #4
 8004972:	6800      	ldr	r0, [r0, #0]
 8004974:	f000 feaf 	bl	80056d6 <USB_WritePMA>
 8004978:	e17e      	b.n	8004c78 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800497a:	463b      	mov	r3, r7
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	785b      	ldrb	r3, [r3, #1]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d16f      	bne.n	8004a64 <USB_EPStartXfer+0xbf8>
 8004984:	1d3b      	adds	r3, r7, #4
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800498c:	1d3b      	adds	r3, r7, #4
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004994:	b29b      	uxth	r3, r3
 8004996:	461a      	mov	r2, r3
 8004998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800499c:	4413      	add	r3, r2
 800499e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049a2:	463b      	mov	r3, r7
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	011a      	lsls	r2, r3, #4
 80049aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049ae:	4413      	add	r3, r2
 80049b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d116      	bne.n	80049ee <USB_EPStartXfer+0xb82>
 80049c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049d2:	801a      	strh	r2, [r3, #0]
 80049d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049ea:	801a      	strh	r2, [r3, #0]
 80049ec:	e05f      	b.n	8004aae <USB_EPStartXfer+0xc42>
 80049ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049f2:	2b3e      	cmp	r3, #62	; 0x3e
 80049f4:	d818      	bhi.n	8004a28 <USB_EPStartXfer+0xbbc>
 80049f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <USB_EPStartXfer+0xbaa>
 8004a0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a10:	3301      	adds	r3, #1
 8004a12:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004a16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	029b      	lsls	r3, r3, #10
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	e042      	b.n	8004aae <USB_EPStartXfer+0xc42>
 8004a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d104      	bne.n	8004a48 <USB_EPStartXfer+0xbdc>
 8004a3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a42:	3b01      	subs	r3, #1
 8004a44:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004a48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	029b      	lsls	r3, r3, #10
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a60:	801a      	strh	r2, [r3, #0]
 8004a62:	e024      	b.n	8004aae <USB_EPStartXfer+0xc42>
 8004a64:	463b      	mov	r3, r7
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d11f      	bne.n	8004aae <USB_EPStartXfer+0xc42>
 8004a6e:	1d3b      	adds	r3, r7, #4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a76:	1d3b      	adds	r3, r7, #4
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	461a      	mov	r2, r3
 8004a82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a86:	4413      	add	r3, r2
 8004a88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a8c:	463b      	mov	r3, r7
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	011a      	lsls	r2, r3, #4
 8004a94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a98:	4413      	add	r3, r2
 8004a9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004aac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004aae:	463b      	mov	r3, r7
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	891b      	ldrh	r3, [r3, #8]
 8004ab4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ab8:	463b      	mov	r3, r7
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6959      	ldr	r1, [r3, #20]
 8004abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ac8:	1d38      	adds	r0, r7, #4
 8004aca:	6800      	ldr	r0, [r0, #0]
 8004acc:	f000 fe03 	bl	80056d6 <USB_WritePMA>
          ep->xfer_buff += len;
 8004ad0:	463b      	mov	r3, r7
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695a      	ldr	r2, [r3, #20]
 8004ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ada:	441a      	add	r2, r3
 8004adc:	463b      	mov	r3, r7
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004ae2:	463b      	mov	r3, r7
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6a1a      	ldr	r2, [r3, #32]
 8004ae8:	463b      	mov	r3, r7
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d909      	bls.n	8004b06 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8004af2:	463b      	mov	r3, r7
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6a1a      	ldr	r2, [r3, #32]
 8004af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004afc:	1ad2      	subs	r2, r2, r3
 8004afe:	463b      	mov	r3, r7
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	621a      	str	r2, [r3, #32]
 8004b04:	e008      	b.n	8004b18 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8004b06:	463b      	mov	r3, r7
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004b10:	463b      	mov	r3, r7
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2200      	movs	r2, #0
 8004b16:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 80ab 	beq.w	8004c78 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b22:	1d3b      	adds	r3, r7, #4
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b2a:	463b      	mov	r3, r7
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	785b      	ldrb	r3, [r3, #1]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d16f      	bne.n	8004c14 <USB_EPStartXfer+0xda8>
 8004b34:	1d3b      	adds	r3, r7, #4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b3c:	1d3b      	adds	r3, r7, #4
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b52:	463b      	mov	r3, r7
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	011a      	lsls	r2, r3, #4
 8004b5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b5e:	4413      	add	r3, r2
 8004b60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d116      	bne.n	8004b9e <USB_EPStartXfer+0xd32>
 8004b70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b82:	801a      	strh	r2, [r3, #0]
 8004b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b9a:	801a      	strh	r2, [r3, #0]
 8004b9c:	e05b      	b.n	8004c56 <USB_EPStartXfer+0xdea>
 8004b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ba2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ba4:	d818      	bhi.n	8004bd8 <USB_EPStartXfer+0xd6c>
 8004ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <USB_EPStartXfer+0xd5a>
 8004bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	029b      	lsls	r3, r3, #10
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bd4:	801a      	strh	r2, [r3, #0]
 8004bd6:	e03e      	b.n	8004c56 <USB_EPStartXfer+0xdea>
 8004bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d104      	bne.n	8004bf8 <USB_EPStartXfer+0xd8c>
 8004bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	029b      	lsls	r3, r3, #10
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c10:	801a      	strh	r2, [r3, #0]
 8004c12:	e020      	b.n	8004c56 <USB_EPStartXfer+0xdea>
 8004c14:	463b      	mov	r3, r7
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	785b      	ldrb	r3, [r3, #1]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d11b      	bne.n	8004c56 <USB_EPStartXfer+0xdea>
 8004c1e:	1d3b      	adds	r3, r7, #4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c2e:	4413      	add	r3, r2
 8004c30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c34:	463b      	mov	r3, r7
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	011a      	lsls	r2, r3, #4
 8004c3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c40:	4413      	add	r3, r2
 8004c42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004c56:	463b      	mov	r3, r7
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	895b      	ldrh	r3, [r3, #10]
 8004c5c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c60:	463b      	mov	r3, r7
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6959      	ldr	r1, [r3, #20]
 8004c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c70:	1d38      	adds	r0, r7, #4
 8004c72:	6800      	ldr	r0, [r0, #0]
 8004c74:	f000 fd2f 	bl	80056d6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004c78:	1d3b      	adds	r3, r7, #4
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	463b      	mov	r3, r7
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f107 020a 	add.w	r2, r7, #10
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c96:	8013      	strh	r3, [r2, #0]
 8004c98:	f107 030a 	add.w	r3, r7, #10
 8004c9c:	f107 020a 	add.w	r2, r7, #10
 8004ca0:	8812      	ldrh	r2, [r2, #0]
 8004ca2:	f082 0210 	eor.w	r2, r2, #16
 8004ca6:	801a      	strh	r2, [r3, #0]
 8004ca8:	f107 030a 	add.w	r3, r7, #10
 8004cac:	f107 020a 	add.w	r2, r7, #10
 8004cb0:	8812      	ldrh	r2, [r2, #0]
 8004cb2:	f082 0220 	eor.w	r2, r2, #32
 8004cb6:	801a      	strh	r2, [r3, #0]
 8004cb8:	1d3b      	adds	r3, r7, #4
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	463b      	mov	r3, r7
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	441a      	add	r2, r3
 8004cc6:	f107 030a 	add.w	r3, r7, #10
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8013      	strh	r3, [r2, #0]
 8004ce0:	e3b5      	b.n	800544e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004ce2:	463b      	mov	r3, r7
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	7b1b      	ldrb	r3, [r3, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f040 8090 	bne.w	8004e0e <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004cee:	463b      	mov	r3, r7
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	699a      	ldr	r2, [r3, #24]
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d90e      	bls.n	8004d1c <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8004cfe:	463b      	mov	r3, r7
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8004d08:	463b      	mov	r3, r7
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d12:	1ad2      	subs	r2, r2, r3
 8004d14:	463b      	mov	r3, r7
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	619a      	str	r2, [r3, #24]
 8004d1a:	e008      	b.n	8004d2e <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8004d1c:	463b      	mov	r3, r7
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8004d26:	463b      	mov	r3, r7
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004d2e:	1d3b      	adds	r3, r7, #4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d46:	4413      	add	r3, r2
 8004d48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d4c:	463b      	mov	r3, r7
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	011a      	lsls	r2, r3, #4
 8004d54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d58:	4413      	add	r3, r2
 8004d5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d116      	bne.n	8004d98 <USB_EPStartXfer+0xf2c>
 8004d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d7c:	801a      	strh	r2, [r3, #0]
 8004d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d94:	801a      	strh	r2, [r3, #0]
 8004d96:	e32c      	b.n	80053f2 <USB_EPStartXfer+0x1586>
 8004d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d9c:	2b3e      	cmp	r3, #62	; 0x3e
 8004d9e:	d818      	bhi.n	8004dd2 <USB_EPStartXfer+0xf66>
 8004da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004da4:	085b      	lsrs	r3, r3, #1
 8004da6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d004      	beq.n	8004dc0 <USB_EPStartXfer+0xf54>
 8004db6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dba:	3301      	adds	r3, #1
 8004dbc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004dc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	029b      	lsls	r3, r3, #10
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dce:	801a      	strh	r2, [r3, #0]
 8004dd0:	e30f      	b.n	80053f2 <USB_EPStartXfer+0x1586>
 8004dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d104      	bne.n	8004df2 <USB_EPStartXfer+0xf86>
 8004de8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dec:	3b01      	subs	r3, #1
 8004dee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004df2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	029b      	lsls	r3, r3, #10
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e0a:	801a      	strh	r2, [r3, #0]
 8004e0c:	e2f1      	b.n	80053f2 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004e0e:	463b      	mov	r3, r7
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	78db      	ldrb	r3, [r3, #3]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	f040 818f 	bne.w	8005138 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004e1a:	463b      	mov	r3, r7
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d175      	bne.n	8004f10 <USB_EPStartXfer+0x10a4>
 8004e24:	1d3b      	adds	r3, r7, #4
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e2c:	1d3b      	adds	r3, r7, #4
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e42:	463b      	mov	r3, r7
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	011a      	lsls	r2, r3, #4
 8004e4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e4e:	4413      	add	r3, r2
 8004e50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e58:	463b      	mov	r3, r7
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d116      	bne.n	8004e90 <USB_EPStartXfer+0x1024>
 8004e62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e74:	801a      	strh	r2, [r3, #0]
 8004e76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e8c:	801a      	strh	r2, [r3, #0]
 8004e8e:	e065      	b.n	8004f5c <USB_EPStartXfer+0x10f0>
 8004e90:	463b      	mov	r3, r7
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b3e      	cmp	r3, #62	; 0x3e
 8004e98:	d81a      	bhi.n	8004ed0 <USB_EPStartXfer+0x1064>
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	085b      	lsrs	r3, r3, #1
 8004ea2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d004      	beq.n	8004ebe <USB_EPStartXfer+0x1052>
 8004eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eb8:	3301      	adds	r3, #1
 8004eba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	029b      	lsls	r3, r3, #10
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ecc:	801a      	strh	r2, [r3, #0]
 8004ece:	e045      	b.n	8004f5c <USB_EPStartXfer+0x10f0>
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004edc:	463b      	mov	r3, r7
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d104      	bne.n	8004ef4 <USB_EPStartXfer+0x1088>
 8004eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	029b      	lsls	r3, r3, #10
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f0c:	801a      	strh	r2, [r3, #0]
 8004f0e:	e025      	b.n	8004f5c <USB_EPStartXfer+0x10f0>
 8004f10:	463b      	mov	r3, r7
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	785b      	ldrb	r3, [r3, #1]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d120      	bne.n	8004f5c <USB_EPStartXfer+0x10f0>
 8004f1a:	1d3b      	adds	r3, r7, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004f22:	1d3b      	adds	r3, r7, #4
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f32:	4413      	add	r3, r2
 8004f34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004f38:	463b      	mov	r3, r7
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	011a      	lsls	r2, r3, #4
 8004f40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f44:	4413      	add	r3, r2
 8004f46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f4e:	463b      	mov	r3, r7
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	1d3b      	adds	r3, r7, #4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f64:	463b      	mov	r3, r7
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	785b      	ldrb	r3, [r3, #1]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d175      	bne.n	800505a <USB_EPStartXfer+0x11ee>
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f76:	1d3b      	adds	r3, r7, #4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f86:	4413      	add	r3, r2
 8004f88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f8c:	463b      	mov	r3, r7
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	011a      	lsls	r2, r3, #4
 8004f94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f98:	4413      	add	r3, r2
 8004f9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fa2:	463b      	mov	r3, r7
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d116      	bne.n	8004fda <USB_EPStartXfer+0x116e>
 8004fac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fbe:	801a      	strh	r2, [r3, #0]
 8004fc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fd6:	801a      	strh	r2, [r3, #0]
 8004fd8:	e061      	b.n	800509e <USB_EPStartXfer+0x1232>
 8004fda:	463b      	mov	r3, r7
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	2b3e      	cmp	r3, #62	; 0x3e
 8004fe2:	d81a      	bhi.n	800501a <USB_EPStartXfer+0x11ae>
 8004fe4:	463b      	mov	r3, r7
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	085b      	lsrs	r3, r3, #1
 8004fec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ff0:	463b      	mov	r3, r7
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d004      	beq.n	8005008 <USB_EPStartXfer+0x119c>
 8004ffe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005002:	3301      	adds	r3, #1
 8005004:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005008:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800500c:	b29b      	uxth	r3, r3
 800500e:	029b      	lsls	r3, r3, #10
 8005010:	b29a      	uxth	r2, r3
 8005012:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005016:	801a      	strh	r2, [r3, #0]
 8005018:	e041      	b.n	800509e <USB_EPStartXfer+0x1232>
 800501a:	463b      	mov	r3, r7
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005026:	463b      	mov	r3, r7
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	2b00      	cmp	r3, #0
 8005032:	d104      	bne.n	800503e <USB_EPStartXfer+0x11d2>
 8005034:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005038:	3b01      	subs	r3, #1
 800503a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800503e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005042:	b29b      	uxth	r3, r3
 8005044:	029b      	lsls	r3, r3, #10
 8005046:	b29b      	uxth	r3, r3
 8005048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800504c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005050:	b29a      	uxth	r2, r3
 8005052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005056:	801a      	strh	r2, [r3, #0]
 8005058:	e021      	b.n	800509e <USB_EPStartXfer+0x1232>
 800505a:	463b      	mov	r3, r7
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	785b      	ldrb	r3, [r3, #1]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d11c      	bne.n	800509e <USB_EPStartXfer+0x1232>
 8005064:	1d3b      	adds	r3, r7, #4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800506c:	b29b      	uxth	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005074:	4413      	add	r3, r2
 8005076:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800507a:	463b      	mov	r3, r7
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	011a      	lsls	r2, r3, #4
 8005082:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005086:	4413      	add	r3, r2
 8005088:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800508c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005090:	463b      	mov	r3, r7
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	b29a      	uxth	r2, r3
 8005098:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800509c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800509e:	463b      	mov	r3, r7
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 81a4 	beq.w	80053f2 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80050aa:	1d3b      	adds	r3, r7, #4
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	463b      	mov	r3, r7
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80050be:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80050c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <USB_EPStartXfer+0x126a>
 80050ca:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80050ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10d      	bne.n	80050f2 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80050d6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80050da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f040 8187 	bne.w	80053f2 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80050e4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80050e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f040 8180 	bne.w	80053f2 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80050f2:	1d3b      	adds	r3, r7, #4
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	463b      	mov	r3, r7
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005110:	1d3b      	adds	r3, r7, #4
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	463b      	mov	r3, r7
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	441a      	add	r2, r3
 800511e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800512e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005132:	b29b      	uxth	r3, r3
 8005134:	8013      	strh	r3, [r2, #0]
 8005136:	e15c      	b.n	80053f2 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005138:	463b      	mov	r3, r7
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	78db      	ldrb	r3, [r3, #3]
 800513e:	2b01      	cmp	r3, #1
 8005140:	f040 8155 	bne.w	80053ee <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005144:	463b      	mov	r3, r7
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	463b      	mov	r3, r7
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	429a      	cmp	r2, r3
 8005152:	d90e      	bls.n	8005172 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8005154:	463b      	mov	r3, r7
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800515e:	463b      	mov	r3, r7
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005168:	1ad2      	subs	r2, r2, r3
 800516a:	463b      	mov	r3, r7
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	619a      	str	r2, [r3, #24]
 8005170:	e008      	b.n	8005184 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8005172:	463b      	mov	r3, r7
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800517c:	463b      	mov	r3, r7
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2200      	movs	r2, #0
 8005182:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005184:	463b      	mov	r3, r7
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	785b      	ldrb	r3, [r3, #1]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d16f      	bne.n	800526e <USB_EPStartXfer+0x1402>
 800518e:	1d3b      	adds	r3, r7, #4
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005196:	1d3b      	adds	r3, r7, #4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519e:	b29b      	uxth	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80051a6:	4413      	add	r3, r2
 80051a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80051ac:	463b      	mov	r3, r7
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	011a      	lsls	r2, r3, #4
 80051b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80051b8:	4413      	add	r3, r2
 80051ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d116      	bne.n	80051f8 <USB_EPStartXfer+0x138c>
 80051ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	e05f      	b.n	80052b8 <USB_EPStartXfer+0x144c>
 80051f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051fc:	2b3e      	cmp	r3, #62	; 0x3e
 80051fe:	d818      	bhi.n	8005232 <USB_EPStartXfer+0x13c6>
 8005200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800520a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <USB_EPStartXfer+0x13b4>
 8005216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800521a:	3301      	adds	r3, #1
 800521c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005224:	b29b      	uxth	r3, r3
 8005226:	029b      	lsls	r3, r3, #10
 8005228:	b29a      	uxth	r2, r3
 800522a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	e042      	b.n	80052b8 <USB_EPStartXfer+0x144c>
 8005232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800523c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005240:	f003 031f 	and.w	r3, r3, #31
 8005244:	2b00      	cmp	r3, #0
 8005246:	d104      	bne.n	8005252 <USB_EPStartXfer+0x13e6>
 8005248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800524c:	3b01      	subs	r3, #1
 800524e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005256:	b29b      	uxth	r3, r3
 8005258:	029b      	lsls	r3, r3, #10
 800525a:	b29b      	uxth	r3, r3
 800525c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005264:	b29a      	uxth	r2, r3
 8005266:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800526a:	801a      	strh	r2, [r3, #0]
 800526c:	e024      	b.n	80052b8 <USB_EPStartXfer+0x144c>
 800526e:	463b      	mov	r3, r7
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	785b      	ldrb	r3, [r3, #1]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d11f      	bne.n	80052b8 <USB_EPStartXfer+0x144c>
 8005278:	1d3b      	adds	r3, r7, #4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005280:	1d3b      	adds	r3, r7, #4
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005288:	b29b      	uxth	r3, r3
 800528a:	461a      	mov	r2, r3
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005290:	4413      	add	r3, r2
 8005292:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005296:	463b      	mov	r3, r7
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	011a      	lsls	r2, r3, #4
 800529e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a2:	4413      	add	r3, r2
 80052a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80052ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80052b6:	801a      	strh	r2, [r3, #0]
 80052b8:	1d3b      	adds	r3, r7, #4
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052c0:	463b      	mov	r3, r7
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	785b      	ldrb	r3, [r3, #1]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d16f      	bne.n	80053aa <USB_EPStartXfer+0x153e>
 80052ca:	1d3b      	adds	r3, r7, #4
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052d2:	1d3b      	adds	r3, r7, #4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052da:	b29b      	uxth	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e2:	4413      	add	r3, r2
 80052e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052e8:	463b      	mov	r3, r7
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	011a      	lsls	r2, r3, #4
 80052f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052f4:	4413      	add	r3, r2
 80052f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d116      	bne.n	8005334 <USB_EPStartXfer+0x14c8>
 8005306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005312:	b29a      	uxth	r2, r3
 8005314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532a:	b29a      	uxth	r2, r3
 800532c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	e05e      	b.n	80053f2 <USB_EPStartXfer+0x1586>
 8005334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005338:	2b3e      	cmp	r3, #62	; 0x3e
 800533a:	d818      	bhi.n	800536e <USB_EPStartXfer+0x1502>
 800533c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005340:	085b      	lsrs	r3, r3, #1
 8005342:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <USB_EPStartXfer+0x14f0>
 8005352:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005356:	3301      	adds	r3, #1
 8005358:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800535c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005360:	b29b      	uxth	r3, r3
 8005362:	029b      	lsls	r3, r3, #10
 8005364:	b29a      	uxth	r2, r3
 8005366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800536a:	801a      	strh	r2, [r3, #0]
 800536c:	e041      	b.n	80053f2 <USB_EPStartXfer+0x1586>
 800536e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <USB_EPStartXfer+0x1522>
 8005384:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005388:	3b01      	subs	r3, #1
 800538a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800538e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005392:	b29b      	uxth	r3, r3
 8005394:	029b      	lsls	r3, r3, #10
 8005396:	b29b      	uxth	r3, r3
 8005398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	e023      	b.n	80053f2 <USB_EPStartXfer+0x1586>
 80053aa:	463b      	mov	r3, r7
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	785b      	ldrb	r3, [r3, #1]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d11e      	bne.n	80053f2 <USB_EPStartXfer+0x1586>
 80053b4:	1d3b      	adds	r3, r7, #4
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053bc:	b29b      	uxth	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c4:	4413      	add	r3, r2
 80053c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053ca:	463b      	mov	r3, r7
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	011a      	lsls	r2, r3, #4
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	4413      	add	r3, r2
 80053d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	e001      	b.n	80053f2 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e02e      	b.n	8005450 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053f2:	1d3b      	adds	r3, r7, #4
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	463b      	mov	r3, r7
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	b29b      	uxth	r3, r3
 8005404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005410:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005414:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005418:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800541c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005420:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005424:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005428:	1d3b      	adds	r3, r7, #4
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	463b      	mov	r3, r7
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800543a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800543e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544a:	b29b      	uxth	r3, r3
 800544c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800545a:	b480      	push	{r7}
 800545c:	b085      	sub	sp, #20
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	785b      	ldrb	r3, [r3, #1]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d020      	beq.n	80054ae <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29b      	uxth	r3, r3
 800547a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005482:	81bb      	strh	r3, [r7, #12]
 8005484:	89bb      	ldrh	r3, [r7, #12]
 8005486:	f083 0310 	eor.w	r3, r3, #16
 800548a:	81bb      	strh	r3, [r7, #12]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	441a      	add	r2, r3
 8005496:	89bb      	ldrh	r3, [r7, #12]
 8005498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800549c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	8013      	strh	r3, [r2, #0]
 80054ac:	e01f      	b.n	80054ee <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c4:	81fb      	strh	r3, [r7, #14]
 80054c6:	89fb      	ldrh	r3, [r7, #14]
 80054c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054cc:	81fb      	strh	r3, [r7, #14]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	441a      	add	r2, r3
 80054d8:	89fb      	ldrh	r3, [r7, #14]
 80054da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr

080054fa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b087      	sub	sp, #28
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	7b1b      	ldrb	r3, [r3, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	f040 809d 	bne.w	8005648 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	785b      	ldrb	r3, [r3, #1]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d04c      	beq.n	80055b0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	823b      	strh	r3, [r7, #16]
 8005524:	8a3b      	ldrh	r3, [r7, #16]
 8005526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d01b      	beq.n	8005566 <USB_EPClearStall+0x6c>
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005544:	81fb      	strh	r3, [r7, #14]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	441a      	add	r2, r3
 8005550:	89fb      	ldrh	r3, [r7, #14]
 8005552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800555a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800555e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005562:	b29b      	uxth	r3, r3
 8005564:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	78db      	ldrb	r3, [r3, #3]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d06c      	beq.n	8005648 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	b29b      	uxth	r3, r3
 800557c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005584:	81bb      	strh	r3, [r7, #12]
 8005586:	89bb      	ldrh	r3, [r7, #12]
 8005588:	f083 0320 	eor.w	r3, r3, #32
 800558c:	81bb      	strh	r3, [r7, #12]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	441a      	add	r2, r3
 8005598:	89bb      	ldrh	r3, [r7, #12]
 800559a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	8013      	strh	r3, [r2, #0]
 80055ae:	e04b      	b.n	8005648 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	82fb      	strh	r3, [r7, #22]
 80055be:	8afb      	ldrh	r3, [r7, #22]
 80055c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01b      	beq.n	8005600 <USB_EPClearStall+0x106>
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055de:	82bb      	strh	r3, [r7, #20]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	441a      	add	r2, r3
 80055ea:	8abb      	ldrh	r3, [r7, #20]
 80055ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005616:	827b      	strh	r3, [r7, #18]
 8005618:	8a7b      	ldrh	r3, [r7, #18]
 800561a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800561e:	827b      	strh	r3, [r7, #18]
 8005620:	8a7b      	ldrh	r3, [r7, #18]
 8005622:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005626:	827b      	strh	r3, [r7, #18]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	441a      	add	r2, r3
 8005632:	8a7b      	ldrh	r3, [r7, #18]
 8005634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800563c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005644:	b29b      	uxth	r3, r3
 8005646:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr

08005654 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d103      	bne.n	800566e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2280      	movs	r2, #128	; 0x80
 800566a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr

0800567a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	bc80      	pop	{r7}
 800568c:	4770      	bx	lr

0800568e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr

080056a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80056b4:	68fb      	ldr	r3, [r7, #12]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr

080056c0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bc80      	pop	{r7}
 80056d4:	4770      	bx	lr

080056d6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b08d      	sub	sp, #52	; 0x34
 80056da:	af00      	add	r7, sp, #0
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	4611      	mov	r1, r2
 80056e2:	461a      	mov	r2, r3
 80056e4:	460b      	mov	r3, r1
 80056e6:	80fb      	strh	r3, [r7, #6]
 80056e8:	4613      	mov	r3, r2
 80056ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80056ec:	88bb      	ldrh	r3, [r7, #4]
 80056ee:	3301      	adds	r3, #1
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056fc:	88fb      	ldrh	r3, [r7, #6]
 80056fe:	005a      	lsls	r2, r3, #1
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005708:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800570e:	e01e      	b.n	800574e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	3301      	adds	r3, #1
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	b29b      	uxth	r3, r3
 8005726:	461a      	mov	r2, r3
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	b29a      	uxth	r2, r3
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	3302      	adds	r3, #2
 800573a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	3302      	adds	r3, #2
 8005740:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	3301      	adds	r3, #1
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574a:	3b01      	subs	r3, #1
 800574c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1dd      	bne.n	8005710 <USB_WritePMA+0x3a>
  }
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	3734      	adds	r7, #52	; 0x34
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr

08005760 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005760:	b480      	push	{r7}
 8005762:	b08b      	sub	sp, #44	; 0x2c
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	4611      	mov	r1, r2
 800576c:	461a      	mov	r2, r3
 800576e:	460b      	mov	r3, r1
 8005770:	80fb      	strh	r3, [r7, #6]
 8005772:	4613      	mov	r3, r2
 8005774:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005776:	88bb      	ldrh	r3, [r7, #4]
 8005778:	085b      	lsrs	r3, r3, #1
 800577a:	b29b      	uxth	r3, r3
 800577c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	005a      	lsls	r2, r3, #1
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005792:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
 8005798:	e01b      	b.n	80057d2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	3302      	adds	r3, #2
 80057a6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	3301      	adds	r3, #1
 80057b4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	0a1b      	lsrs	r3, r3, #8
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	3301      	adds	r3, #1
 80057c4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	3302      	adds	r3, #2
 80057ca:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	3b01      	subs	r3, #1
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e0      	bne.n	800579a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80057d8:	88bb      	ldrh	r3, [r7, #4]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d007      	beq.n	80057f4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	701a      	strb	r2, [r3, #0]
  }
}
 80057f4:	bf00      	nop
 80057f6:	372c      	adds	r7, #44	; 0x2c
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bc80      	pop	{r7}
 80057fc:	4770      	bx	lr

080057fe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	460b      	mov	r3, r1
 8005808:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	7c1b      	ldrb	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d115      	bne.n	8005842 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800581a:	2202      	movs	r2, #2
 800581c:	2181      	movs	r1, #129	; 0x81
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f004 fb07 	bl	8009e32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800582a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800582e:	2202      	movs	r2, #2
 8005830:	2101      	movs	r1, #1
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f004 fafd 	bl	8009e32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005840:	e012      	b.n	8005868 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005842:	2340      	movs	r3, #64	; 0x40
 8005844:	2202      	movs	r2, #2
 8005846:	2181      	movs	r1, #129	; 0x81
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f004 faf2 	bl	8009e32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005854:	2340      	movs	r3, #64	; 0x40
 8005856:	2202      	movs	r2, #2
 8005858:	2101      	movs	r1, #1
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f004 fae9 	bl	8009e32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005868:	2308      	movs	r3, #8
 800586a:	2203      	movs	r2, #3
 800586c:	2182      	movs	r1, #130	; 0x82
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f004 fadf 	bl	8009e32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800587a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800587e:	f004 fbff 	bl	800a080 <USBD_static_malloc>
 8005882:	4602      	mov	r2, r0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
 8005898:	e026      	b.n	80058e8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	7c1b      	ldrb	r3, [r3, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d109      	bne.n	80058d8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058ce:	2101      	movs	r1, #1
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f004 fb9f 	bl	800a014 <USBD_LL_PrepareReceive>
 80058d6:	e007      	b.n	80058e8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058de:	2340      	movs	r3, #64	; 0x40
 80058e0:	2101      	movs	r1, #1
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f004 fb96 	bl	800a014 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	460b      	mov	r3, r1
 80058fc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005902:	2181      	movs	r1, #129	; 0x81
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f004 faba 	bl	8009e7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005910:	2101      	movs	r1, #1
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f004 fab3 	bl	8009e7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005920:	2182      	movs	r1, #130	; 0x82
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f004 faab 	bl	8009e7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00e      	beq.n	8005956 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005948:	4618      	mov	r0, r3
 800594a:	f004 fba5 	bl	800a098 <USBD_static_free>
    pdev->pClassData = NULL;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005956:	7bfb      	ldrb	r3, [r7, #15]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005970:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005986:	2b00      	cmp	r3, #0
 8005988:	d039      	beq.n	80059fe <USBD_CDC_Setup+0x9e>
 800598a:	2b20      	cmp	r3, #32
 800598c:	d17f      	bne.n	8005a8e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	88db      	ldrh	r3, [r3, #6]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d029      	beq.n	80059ea <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	b25b      	sxtb	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	da11      	bge.n	80059c4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80059ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	88d2      	ldrh	r2, [r2, #6]
 80059b2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80059b4:	6939      	ldr	r1, [r7, #16]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	88db      	ldrh	r3, [r3, #6]
 80059ba:	461a      	mov	r2, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 f9da 	bl	8006d76 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80059c2:	e06b      	b.n	8005a9c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	785a      	ldrb	r2, [r3, #1]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	88db      	ldrh	r3, [r3, #6]
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80059da:	6939      	ldr	r1, [r7, #16]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	88db      	ldrh	r3, [r3, #6]
 80059e0:	461a      	mov	r2, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f001 f9f5 	bl	8006dd2 <USBD_CtlPrepareRx>
      break;
 80059e8:	e058      	b.n	8005a9c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	7850      	ldrb	r0, [r2, #1]
 80059f6:	2200      	movs	r2, #0
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	4798      	blx	r3
      break;
 80059fc:	e04e      	b.n	8005a9c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	785b      	ldrb	r3, [r3, #1]
 8005a02:	2b0b      	cmp	r3, #11
 8005a04:	d02e      	beq.n	8005a64 <USBD_CDC_Setup+0x104>
 8005a06:	2b0b      	cmp	r3, #11
 8005a08:	dc38      	bgt.n	8005a7c <USBD_CDC_Setup+0x11c>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <USBD_CDC_Setup+0xb4>
 8005a0e:	2b0a      	cmp	r3, #10
 8005a10:	d014      	beq.n	8005a3c <USBD_CDC_Setup+0xdc>
 8005a12:	e033      	b.n	8005a7c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d107      	bne.n	8005a2e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005a1e:	f107 030c 	add.w	r3, r7, #12
 8005a22:	2202      	movs	r2, #2
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f001 f9a5 	bl	8006d76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a2c:	e02e      	b.n	8005a8c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005a2e:	6839      	ldr	r1, [r7, #0]
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 f936 	bl	8006ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a36:	2302      	movs	r3, #2
 8005a38:	75fb      	strb	r3, [r7, #23]
          break;
 8005a3a:	e027      	b.n	8005a8c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d107      	bne.n	8005a56 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a46:	f107 030f 	add.w	r3, r7, #15
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f001 f991 	bl	8006d76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a54:	e01a      	b.n	8005a8c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 f922 	bl	8006ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a5e:	2302      	movs	r3, #2
 8005a60:	75fb      	strb	r3, [r7, #23]
          break;
 8005a62:	e013      	b.n	8005a8c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d00d      	beq.n	8005a8a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005a6e:	6839      	ldr	r1, [r7, #0]
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f001 f916 	bl	8006ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a76:	2302      	movs	r3, #2
 8005a78:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005a7a:	e006      	b.n	8005a8a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 f90f 	bl	8006ca2 <USBD_CtlError>
          ret = USBD_FAIL;
 8005a84:	2302      	movs	r3, #2
 8005a86:	75fb      	strb	r3, [r7, #23]
          break;
 8005a88:	e000      	b.n	8005a8c <USBD_CDC_Setup+0x12c>
          break;
 8005a8a:	bf00      	nop
      }
      break;
 8005a8c:	e006      	b.n	8005a9c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 f906 	bl	8006ca2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005a96:	2302      	movs	r3, #2
 8005a98:	75fb      	strb	r3, [r7, #23]
      break;
 8005a9a:	bf00      	nop
  }

  return ret;
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ac0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d03a      	beq.n	8005b42 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005acc:	78fa      	ldrb	r2, [r7, #3]
 8005ace:	6879      	ldr	r1, [r7, #4]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	440b      	add	r3, r1
 8005ada:	331c      	adds	r3, #28
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d029      	beq.n	8005b36 <USBD_CDC_DataIn+0x90>
 8005ae2:	78fa      	ldrb	r2, [r7, #3]
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	440b      	add	r3, r1
 8005af0:	331c      	adds	r3, #28
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	78f9      	ldrb	r1, [r7, #3]
 8005af6:	68b8      	ldr	r0, [r7, #8]
 8005af8:	460b      	mov	r3, r1
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	4403      	add	r3, r0
 8005b02:	3338      	adds	r3, #56	; 0x38
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b0a:	fb03 f301 	mul.w	r3, r3, r1
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d110      	bne.n	8005b36 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005b14:	78fa      	ldrb	r2, [r7, #3]
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	331c      	adds	r3, #28
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b28:	78f9      	ldrb	r1, [r7, #3]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f004 fa4d 	bl	8009fce <USBD_LL_Transmit>
 8005b34:	e003      	b.n	8005b3e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e000      	b.n	8005b44 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005b42:	2302      	movs	r3, #2
  }
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f004 fa78 	bl	800a05a <USBD_LL_GetRxDataSize>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00d      	beq.n	8005b98 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b90:	4611      	mov	r1, r2
 8005b92:	4798      	blx	r3

    return USBD_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e000      	b.n	8005b9a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005b98:	2302      	movs	r3, #2
  }
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d015      	beq.n	8005be8 <USBD_CDC_EP0_RxReady+0x46>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005bc2:	2bff      	cmp	r3, #255	; 0xff
 8005bc4:	d010      	beq.n	8005be8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005bd4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005bdc:	b292      	uxth	r2, r2
 8005bde:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	22ff      	movs	r2, #255	; 0xff
 8005be4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2243      	movs	r2, #67	; 0x43
 8005c00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005c02:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bc80      	pop	{r7}
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	20000094 	.word	0x20000094

08005c14 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2243      	movs	r2, #67	; 0x43
 8005c20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005c22:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	20000050 	.word	0x20000050

08005c34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2243      	movs	r2, #67	; 0x43
 8005c40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005c42:	4b03      	ldr	r3, [pc, #12]	; (8005c50 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	200000d8 	.word	0x200000d8

08005c54 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	220a      	movs	r2, #10
 8005c60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005c62:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bc80      	pop	{r7}
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	2000000c 	.word	0x2000000c

08005c74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005c7e:	2302      	movs	r3, #2
 8005c80:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr

08005ca0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005cbe:	88fa      	ldrh	r2, [r7, #6]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bc80      	pop	{r7}
 8005cd0:	4770      	bx	lr

08005cd2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr

08005cf8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d017      	beq.n	8005d42 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	7c1b      	ldrb	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d24:	2101      	movs	r1, #1
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f004 f974 	bl	800a014 <USBD_LL_PrepareReceive>
 8005d2c:	e007      	b.n	8005d3e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d34:	2340      	movs	r3, #64	; 0x40
 8005d36:	2101      	movs	r1, #1
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f004 f96b 	bl	800a014 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e000      	b.n	8005d44 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005d42:	2302      	movs	r3, #2
  }
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	4613      	mov	r3, r2
 8005d58:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d60:	2302      	movs	r3, #2
 8005d62:	e01a      	b.n	8005d9a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	79fa      	ldrb	r2, [r7, #7]
 8005d90:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f003 ffd8 	bl	8009d48 <USBD_LL_Init>

  return USBD_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d006      	beq.n	8005dc4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	73fb      	strb	r3, [r7, #15]
 8005dc2:	e001      	b.n	8005dc8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr

08005dd4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f004 f80d 	bl	8009dfc <USBD_LL_Start>

  return USBD_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bc80      	pop	{r7}
 8005dfe:	4770      	bx	lr

08005e00 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00c      	beq.n	8005e34 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	78fa      	ldrb	r2, [r7, #3]
 8005e24:	4611      	mov	r1, r2
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	4798      	blx	r3
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	460b      	mov	r3, r1
 8005e48:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	4611      	mov	r1, r2
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	4798      	blx	r3

  return USBD_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fed7 	bl	8006c2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e98:	f003 031f 	and.w	r3, r3, #31
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d016      	beq.n	8005ece <USBD_LL_SetupStage+0x6a>
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d81c      	bhi.n	8005ede <USBD_LL_SetupStage+0x7a>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <USBD_LL_SetupStage+0x4a>
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d008      	beq.n	8005ebe <USBD_LL_SetupStage+0x5a>
 8005eac:	e017      	b.n	8005ede <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f9ca 	bl	8006250 <USBD_StdDevReq>
      break;
 8005ebc:	e01a      	b.n	8005ef4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fa2c 	bl	8006324 <USBD_StdItfReq>
      break;
 8005ecc:	e012      	b.n	8005ef4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fa6c 	bl	80063b4 <USBD_StdEPReq>
      break;
 8005edc:	e00a      	b.n	8005ef4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ee4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f003 ffe5 	bl	8009ebc <USBD_LL_StallEP>
      break;
 8005ef2:	bf00      	nop
  }

  return USBD_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b086      	sub	sp, #24
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	460b      	mov	r3, r1
 8005f08:	607a      	str	r2, [r7, #4]
 8005f0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f0c:	7afb      	ldrb	r3, [r7, #11]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d14b      	bne.n	8005faa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f18:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d134      	bne.n	8005f8e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d919      	bls.n	8005f64 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	1ad2      	subs	r2, r2, r3
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d203      	bcs.n	8005f52 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	e002      	b.n	8005f58 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 ff56 	bl	8006e0e <USBD_CtlContinueRx>
 8005f62:	e038      	b.n	8005fd6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00a      	beq.n	8005f86 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d105      	bne.n	8005f86 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 ff53 	bl	8006e32 <USBD_CtlSendStatus>
 8005f8c:	e023      	b.n	8005fd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f94:	2b05      	cmp	r3, #5
 8005f96:	d11e      	bne.n	8005fd6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f003 ff8a 	bl	8009ebc <USBD_LL_StallEP>
 8005fa8:	e015      	b.n	8005fd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00d      	beq.n	8005fd2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d108      	bne.n	8005fd2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	7afa      	ldrb	r2, [r7, #11]
 8005fca:	4611      	mov	r1, r2
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	4798      	blx	r3
 8005fd0:	e001      	b.n	8005fd6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e000      	b.n	8005fd8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005fee:	7afb      	ldrb	r3, [r7, #11]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d17f      	bne.n	80060f4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3314      	adds	r3, #20
 8005ff8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006000:	2b02      	cmp	r3, #2
 8006002:	d15c      	bne.n	80060be <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	429a      	cmp	r2, r3
 800600e:	d915      	bls.n	800603c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	1ad2      	subs	r2, r2, r3
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	b29b      	uxth	r3, r3
 8006024:	461a      	mov	r2, r3
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 fec0 	bl	8006dae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800602e:	2300      	movs	r3, #0
 8006030:	2200      	movs	r2, #0
 8006032:	2100      	movs	r1, #0
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f003 ffed 	bl	800a014 <USBD_LL_PrepareReceive>
 800603a:	e04e      	b.n	80060da <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	6912      	ldr	r2, [r2, #16]
 8006044:	fbb3 f1f2 	udiv	r1, r3, r2
 8006048:	fb02 f201 	mul.w	r2, r2, r1
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d11c      	bne.n	800608c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800605a:	429a      	cmp	r2, r3
 800605c:	d316      	bcc.n	800608c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006068:	429a      	cmp	r2, r3
 800606a:	d20f      	bcs.n	800608c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800606c:	2200      	movs	r2, #0
 800606e:	2100      	movs	r1, #0
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 fe9c 	bl	8006dae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800607e:	2300      	movs	r3, #0
 8006080:	2200      	movs	r2, #0
 8006082:	2100      	movs	r1, #0
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f003 ffc5 	bl	800a014 <USBD_LL_PrepareReceive>
 800608a:	e026      	b.n	80060da <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00a      	beq.n	80060ae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d105      	bne.n	80060ae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80060ae:	2180      	movs	r1, #128	; 0x80
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f003 ff03 	bl	8009ebc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fece 	bl	8006e58 <USBD_CtlReceiveStatus>
 80060bc:	e00d      	b.n	80060da <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d004      	beq.n	80060d2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80060d2:	2180      	movs	r1, #128	; 0x80
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f003 fef1 	bl	8009ebc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d11d      	bne.n	8006120 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff fe81 	bl	8005dec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060f2:	e015      	b.n	8006120 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00d      	beq.n	800611c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006106:	2b03      	cmp	r3, #3
 8006108:	d108      	bne.n	800611c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	7afa      	ldrb	r2, [r7, #11]
 8006114:	4611      	mov	r1, r2
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	4798      	blx	r3
 800611a:	e001      	b.n	8006120 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800611c:	2302      	movs	r3, #2
 800611e:	e000      	b.n	8006122 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006132:	2340      	movs	r3, #64	; 0x40
 8006134:	2200      	movs	r2, #0
 8006136:	2100      	movs	r1, #0
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f003 fe7a 	bl	8009e32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2240      	movs	r2, #64	; 0x40
 800614a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800614e:	2340      	movs	r3, #64	; 0x40
 8006150:	2200      	movs	r2, #0
 8006152:	2180      	movs	r1, #128	; 0x80
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f003 fe6c 	bl	8009e32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2240      	movs	r2, #64	; 0x40
 8006164:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6852      	ldr	r2, [r2, #4]
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	4611      	mov	r1, r2
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	4798      	blx	r3
  }

  return USBD_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	78fa      	ldrb	r2, [r7, #3]
 80061bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	4770      	bx	lr

080061ca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2204      	movs	r2, #4
 80061e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr

080061f2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006200:	2b04      	cmp	r3, #4
 8006202:	d105      	bne.n	8006210 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	bc80      	pop	{r7}
 800621a:	4770      	bx	lr

0800621c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800622a:	2b03      	cmp	r3, #3
 800622c:	d10b      	bne.n	8006246 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006266:	2b40      	cmp	r3, #64	; 0x40
 8006268:	d005      	beq.n	8006276 <USBD_StdDevReq+0x26>
 800626a:	2b40      	cmp	r3, #64	; 0x40
 800626c:	d84f      	bhi.n	800630e <USBD_StdDevReq+0xbe>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d009      	beq.n	8006286 <USBD_StdDevReq+0x36>
 8006272:	2b20      	cmp	r3, #32
 8006274:	d14b      	bne.n	800630e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	4798      	blx	r3
      break;
 8006284:	e048      	b.n	8006318 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	785b      	ldrb	r3, [r3, #1]
 800628a:	2b09      	cmp	r3, #9
 800628c:	d839      	bhi.n	8006302 <USBD_StdDevReq+0xb2>
 800628e:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <USBD_StdDevReq+0x44>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062e5 	.word	0x080062e5
 8006298:	080062f9 	.word	0x080062f9
 800629c:	08006303 	.word	0x08006303
 80062a0:	080062ef 	.word	0x080062ef
 80062a4:	08006303 	.word	0x08006303
 80062a8:	080062c7 	.word	0x080062c7
 80062ac:	080062bd 	.word	0x080062bd
 80062b0:	08006303 	.word	0x08006303
 80062b4:	080062db 	.word	0x080062db
 80062b8:	080062d1 	.word	0x080062d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f9dc 	bl	800667c <USBD_GetDescriptor>
          break;
 80062c4:	e022      	b.n	800630c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fb3f 	bl	800694c <USBD_SetAddress>
          break;
 80062ce:	e01d      	b.n	800630c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fb7e 	bl	80069d4 <USBD_SetConfig>
          break;
 80062d8:	e018      	b.n	800630c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fc07 	bl	8006af0 <USBD_GetConfig>
          break;
 80062e2:	e013      	b.n	800630c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fc37 	bl	8006b5a <USBD_GetStatus>
          break;
 80062ec:	e00e      	b.n	800630c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fc65 	bl	8006bc0 <USBD_SetFeature>
          break;
 80062f6:	e009      	b.n	800630c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fc74 	bl	8006be8 <USBD_ClrFeature>
          break;
 8006300:	e004      	b.n	800630c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fccc 	bl	8006ca2 <USBD_CtlError>
          break;
 800630a:	bf00      	nop
      }
      break;
 800630c:	e004      	b.n	8006318 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fcc6 	bl	8006ca2 <USBD_CtlError>
      break;
 8006316:	bf00      	nop
  }

  return ret;
 8006318:	7bfb      	ldrb	r3, [r7, #15]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop

08006324 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800633a:	2b40      	cmp	r3, #64	; 0x40
 800633c:	d005      	beq.n	800634a <USBD_StdItfReq+0x26>
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d82e      	bhi.n	80063a0 <USBD_StdItfReq+0x7c>
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <USBD_StdItfReq+0x26>
 8006346:	2b20      	cmp	r3, #32
 8006348:	d12a      	bne.n	80063a0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006350:	3b01      	subs	r3, #1
 8006352:	2b02      	cmp	r3, #2
 8006354:	d81d      	bhi.n	8006392 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	889b      	ldrh	r3, [r3, #4]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b01      	cmp	r3, #1
 800635e:	d813      	bhi.n	8006388 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	4798      	blx	r3
 800636e:	4603      	mov	r3, r0
 8006370:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	88db      	ldrh	r3, [r3, #6]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d110      	bne.n	800639c <USBD_StdItfReq+0x78>
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10d      	bne.n	800639c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fd56 	bl	8006e32 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006386:	e009      	b.n	800639c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fc89 	bl	8006ca2 <USBD_CtlError>
          break;
 8006390:	e004      	b.n	800639c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fc84 	bl	8006ca2 <USBD_CtlError>
          break;
 800639a:	e000      	b.n	800639e <USBD_StdItfReq+0x7a>
          break;
 800639c:	bf00      	nop
      }
      break;
 800639e:	e004      	b.n	80063aa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fc7d 	bl	8006ca2 <USBD_CtlError>
      break;
 80063a8:	bf00      	nop
  }

  return USBD_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	889b      	ldrh	r3, [r3, #4]
 80063c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063d0:	2b40      	cmp	r3, #64	; 0x40
 80063d2:	d007      	beq.n	80063e4 <USBD_StdEPReq+0x30>
 80063d4:	2b40      	cmp	r3, #64	; 0x40
 80063d6:	f200 8146 	bhi.w	8006666 <USBD_StdEPReq+0x2b2>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <USBD_StdEPReq+0x40>
 80063de:	2b20      	cmp	r3, #32
 80063e0:	f040 8141 	bne.w	8006666 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
      break;
 80063f2:	e13d      	b.n	8006670 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	d10a      	bne.n	8006416 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	4798      	blx	r3
 800640e:	4603      	mov	r3, r0
 8006410:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	e12d      	b.n	8006672 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	785b      	ldrb	r3, [r3, #1]
 800641a:	2b03      	cmp	r3, #3
 800641c:	d007      	beq.n	800642e <USBD_StdEPReq+0x7a>
 800641e:	2b03      	cmp	r3, #3
 8006420:	f300 811b 	bgt.w	800665a <USBD_StdEPReq+0x2a6>
 8006424:	2b00      	cmp	r3, #0
 8006426:	d072      	beq.n	800650e <USBD_StdEPReq+0x15a>
 8006428:	2b01      	cmp	r3, #1
 800642a:	d03a      	beq.n	80064a2 <USBD_StdEPReq+0xee>
 800642c:	e115      	b.n	800665a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006434:	2b02      	cmp	r3, #2
 8006436:	d002      	beq.n	800643e <USBD_StdEPReq+0x8a>
 8006438:	2b03      	cmp	r3, #3
 800643a:	d015      	beq.n	8006468 <USBD_StdEPReq+0xb4>
 800643c:	e02b      	b.n	8006496 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800643e:	7bbb      	ldrb	r3, [r7, #14]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00c      	beq.n	800645e <USBD_StdEPReq+0xaa>
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	2b80      	cmp	r3, #128	; 0x80
 8006448:	d009      	beq.n	800645e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800644a:	7bbb      	ldrb	r3, [r7, #14]
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f003 fd34 	bl	8009ebc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006454:	2180      	movs	r1, #128	; 0x80
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f003 fd30 	bl	8009ebc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800645c:	e020      	b.n	80064a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fc1e 	bl	8006ca2 <USBD_CtlError>
              break;
 8006466:	e01b      	b.n	80064a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	885b      	ldrh	r3, [r3, #2]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10e      	bne.n	800648e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00b      	beq.n	800648e <USBD_StdEPReq+0xda>
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	2b80      	cmp	r3, #128	; 0x80
 800647a:	d008      	beq.n	800648e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	88db      	ldrh	r3, [r3, #6]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d104      	bne.n	800648e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f003 fd17 	bl	8009ebc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fccf 	bl	8006e32 <USBD_CtlSendStatus>

              break;
 8006494:	e004      	b.n	80064a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fc02 	bl	8006ca2 <USBD_CtlError>
              break;
 800649e:	bf00      	nop
          }
          break;
 80064a0:	e0e0      	b.n	8006664 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d002      	beq.n	80064b2 <USBD_StdEPReq+0xfe>
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d015      	beq.n	80064dc <USBD_StdEPReq+0x128>
 80064b0:	e026      	b.n	8006500 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00c      	beq.n	80064d2 <USBD_StdEPReq+0x11e>
 80064b8:	7bbb      	ldrb	r3, [r7, #14]
 80064ba:	2b80      	cmp	r3, #128	; 0x80
 80064bc:	d009      	beq.n	80064d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80064be:	7bbb      	ldrb	r3, [r7, #14]
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f003 fcfa 	bl	8009ebc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80064c8:	2180      	movs	r1, #128	; 0x80
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f003 fcf6 	bl	8009ebc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064d0:	e01c      	b.n	800650c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fbe4 	bl	8006ca2 <USBD_CtlError>
              break;
 80064da:	e017      	b.n	800650c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	885b      	ldrh	r3, [r3, #2]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d112      	bne.n	800650a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
 80064e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d004      	beq.n	80064f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80064ee:	7bbb      	ldrb	r3, [r7, #14]
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f003 fd01 	bl	8009efa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fc9a 	bl	8006e32 <USBD_CtlSendStatus>
              }
              break;
 80064fe:	e004      	b.n	800650a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fbcd 	bl	8006ca2 <USBD_CtlError>
              break;
 8006508:	e000      	b.n	800650c <USBD_StdEPReq+0x158>
              break;
 800650a:	bf00      	nop
          }
          break;
 800650c:	e0aa      	b.n	8006664 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006514:	2b02      	cmp	r3, #2
 8006516:	d002      	beq.n	800651e <USBD_StdEPReq+0x16a>
 8006518:	2b03      	cmp	r3, #3
 800651a:	d032      	beq.n	8006582 <USBD_StdEPReq+0x1ce>
 800651c:	e097      	b.n	800664e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800651e:	7bbb      	ldrb	r3, [r7, #14]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d007      	beq.n	8006534 <USBD_StdEPReq+0x180>
 8006524:	7bbb      	ldrb	r3, [r7, #14]
 8006526:	2b80      	cmp	r3, #128	; 0x80
 8006528:	d004      	beq.n	8006534 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fbb8 	bl	8006ca2 <USBD_CtlError>
                break;
 8006532:	e091      	b.n	8006658 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006538:	2b00      	cmp	r3, #0
 800653a:	da0b      	bge.n	8006554 <USBD_StdEPReq+0x1a0>
 800653c:	7bbb      	ldrb	r3, [r7, #14]
 800653e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	3310      	adds	r3, #16
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	4413      	add	r3, r2
 8006550:	3304      	adds	r3, #4
 8006552:	e00b      	b.n	800656c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	4413      	add	r3, r2
 800656a:	3304      	adds	r3, #4
 800656c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2202      	movs	r2, #2
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fbfb 	bl	8006d76 <USBD_CtlSendData>
              break;
 8006580:	e06a      	b.n	8006658 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006582:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006586:	2b00      	cmp	r3, #0
 8006588:	da11      	bge.n	80065ae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	f003 020f 	and.w	r2, r3, #15
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	440b      	add	r3, r1
 800659c:	3318      	adds	r3, #24
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d117      	bne.n	80065d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fb7b 	bl	8006ca2 <USBD_CtlError>
                  break;
 80065ac:	e054      	b.n	8006658 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065ae:	7bbb      	ldrb	r3, [r7, #14]
 80065b0:	f003 020f 	and.w	r2, r3, #15
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fb68 	bl	8006ca2 <USBD_CtlError>
                  break;
 80065d2:	e041      	b.n	8006658 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	da0b      	bge.n	80065f4 <USBD_StdEPReq+0x240>
 80065dc:	7bbb      	ldrb	r3, [r7, #14]
 80065de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	3310      	adds	r3, #16
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	4413      	add	r3, r2
 80065f0:	3304      	adds	r3, #4
 80065f2:	e00b      	b.n	800660c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065fa:	4613      	mov	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	4413      	add	r3, r2
 800660a:	3304      	adds	r3, #4
 800660c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800660e:	7bbb      	ldrb	r3, [r7, #14]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <USBD_StdEPReq+0x266>
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b80      	cmp	r3, #128	; 0x80
 8006618:	d103      	bne.n	8006622 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	e00e      	b.n	8006640 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f003 fc86 	bl	8009f38 <USBD_LL_IsStallEP>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2201      	movs	r2, #1
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	e002      	b.n	8006640 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2202      	movs	r2, #2
 8006644:	4619      	mov	r1, r3
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fb95 	bl	8006d76 <USBD_CtlSendData>
              break;
 800664c:	e004      	b.n	8006658 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fb26 	bl	8006ca2 <USBD_CtlError>
              break;
 8006656:	bf00      	nop
          }
          break;
 8006658:	e004      	b.n	8006664 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fb20 	bl	8006ca2 <USBD_CtlError>
          break;
 8006662:	bf00      	nop
      }
      break;
 8006664:	e004      	b.n	8006670 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fb1a 	bl	8006ca2 <USBD_CtlError>
      break;
 800666e:	bf00      	nop
  }

  return ret;
 8006670:	7bfb      	ldrb	r3, [r7, #15]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	885b      	ldrh	r3, [r3, #2]
 8006696:	0a1b      	lsrs	r3, r3, #8
 8006698:	b29b      	uxth	r3, r3
 800669a:	3b01      	subs	r3, #1
 800669c:	2b06      	cmp	r3, #6
 800669e:	f200 8128 	bhi.w	80068f2 <USBD_GetDescriptor+0x276>
 80066a2:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <USBD_GetDescriptor+0x2c>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066c5 	.word	0x080066c5
 80066ac:	080066dd 	.word	0x080066dd
 80066b0:	0800671d 	.word	0x0800671d
 80066b4:	080068f3 	.word	0x080068f3
 80066b8:	080068f3 	.word	0x080068f3
 80066bc:	08006893 	.word	0x08006893
 80066c0:	080068bf 	.word	0x080068bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	7c12      	ldrb	r2, [r2, #16]
 80066d0:	f107 0108 	add.w	r1, r7, #8
 80066d4:	4610      	mov	r0, r2
 80066d6:	4798      	blx	r3
 80066d8:	60f8      	str	r0, [r7, #12]
      break;
 80066da:	e112      	b.n	8006902 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	7c1b      	ldrb	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10d      	bne.n	8006700 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ec:	f107 0208 	add.w	r2, r7, #8
 80066f0:	4610      	mov	r0, r2
 80066f2:	4798      	blx	r3
 80066f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3301      	adds	r3, #1
 80066fa:	2202      	movs	r2, #2
 80066fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80066fe:	e100      	b.n	8006902 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	f107 0208 	add.w	r2, r7, #8
 800670c:	4610      	mov	r0, r2
 800670e:	4798      	blx	r3
 8006710:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3301      	adds	r3, #1
 8006716:	2202      	movs	r2, #2
 8006718:	701a      	strb	r2, [r3, #0]
      break;
 800671a:	e0f2      	b.n	8006902 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	885b      	ldrh	r3, [r3, #2]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b05      	cmp	r3, #5
 8006724:	f200 80ac 	bhi.w	8006880 <USBD_GetDescriptor+0x204>
 8006728:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <USBD_GetDescriptor+0xb4>)
 800672a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672e:	bf00      	nop
 8006730:	08006749 	.word	0x08006749
 8006734:	0800677d 	.word	0x0800677d
 8006738:	080067b1 	.word	0x080067b1
 800673c:	080067e5 	.word	0x080067e5
 8006740:	08006819 	.word	0x08006819
 8006744:	0800684d 	.word	0x0800684d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00b      	beq.n	800676c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	7c12      	ldrb	r2, [r2, #16]
 8006760:	f107 0108 	add.w	r1, r7, #8
 8006764:	4610      	mov	r0, r2
 8006766:	4798      	blx	r3
 8006768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800676a:	e091      	b.n	8006890 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fa97 	bl	8006ca2 <USBD_CtlError>
            err++;
 8006774:	7afb      	ldrb	r3, [r7, #11]
 8006776:	3301      	adds	r3, #1
 8006778:	72fb      	strb	r3, [r7, #11]
          break;
 800677a:	e089      	b.n	8006890 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00b      	beq.n	80067a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	7c12      	ldrb	r2, [r2, #16]
 8006794:	f107 0108 	add.w	r1, r7, #8
 8006798:	4610      	mov	r0, r2
 800679a:	4798      	blx	r3
 800679c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800679e:	e077      	b.n	8006890 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fa7d 	bl	8006ca2 <USBD_CtlError>
            err++;
 80067a8:	7afb      	ldrb	r3, [r7, #11]
 80067aa:	3301      	adds	r3, #1
 80067ac:	72fb      	strb	r3, [r7, #11]
          break;
 80067ae:	e06f      	b.n	8006890 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00b      	beq.n	80067d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	7c12      	ldrb	r2, [r2, #16]
 80067c8:	f107 0108 	add.w	r1, r7, #8
 80067cc:	4610      	mov	r0, r2
 80067ce:	4798      	blx	r3
 80067d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067d2:	e05d      	b.n	8006890 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fa63 	bl	8006ca2 <USBD_CtlError>
            err++;
 80067dc:	7afb      	ldrb	r3, [r7, #11]
 80067de:	3301      	adds	r3, #1
 80067e0:	72fb      	strb	r3, [r7, #11]
          break;
 80067e2:	e055      	b.n	8006890 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	7c12      	ldrb	r2, [r2, #16]
 80067fc:	f107 0108 	add.w	r1, r7, #8
 8006800:	4610      	mov	r0, r2
 8006802:	4798      	blx	r3
 8006804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006806:	e043      	b.n	8006890 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fa49 	bl	8006ca2 <USBD_CtlError>
            err++;
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	3301      	adds	r3, #1
 8006814:	72fb      	strb	r3, [r7, #11]
          break;
 8006816:	e03b      	b.n	8006890 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00b      	beq.n	800683c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	7c12      	ldrb	r2, [r2, #16]
 8006830:	f107 0108 	add.w	r1, r7, #8
 8006834:	4610      	mov	r0, r2
 8006836:	4798      	blx	r3
 8006838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800683a:	e029      	b.n	8006890 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa2f 	bl	8006ca2 <USBD_CtlError>
            err++;
 8006844:	7afb      	ldrb	r3, [r7, #11]
 8006846:	3301      	adds	r3, #1
 8006848:	72fb      	strb	r3, [r7, #11]
          break;
 800684a:	e021      	b.n	8006890 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	7c12      	ldrb	r2, [r2, #16]
 8006864:	f107 0108 	add.w	r1, r7, #8
 8006868:	4610      	mov	r0, r2
 800686a:	4798      	blx	r3
 800686c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800686e:	e00f      	b.n	8006890 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fa15 	bl	8006ca2 <USBD_CtlError>
            err++;
 8006878:	7afb      	ldrb	r3, [r7, #11]
 800687a:	3301      	adds	r3, #1
 800687c:	72fb      	strb	r3, [r7, #11]
          break;
 800687e:	e007      	b.n	8006890 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa0d 	bl	8006ca2 <USBD_CtlError>
          err++;
 8006888:	7afb      	ldrb	r3, [r7, #11]
 800688a:	3301      	adds	r3, #1
 800688c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800688e:	e038      	b.n	8006902 <USBD_GetDescriptor+0x286>
 8006890:	e037      	b.n	8006902 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	7c1b      	ldrb	r3, [r3, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d109      	bne.n	80068ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a2:	f107 0208 	add.w	r2, r7, #8
 80068a6:	4610      	mov	r0, r2
 80068a8:	4798      	blx	r3
 80068aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068ac:	e029      	b.n	8006902 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f9f6 	bl	8006ca2 <USBD_CtlError>
        err++;
 80068b6:	7afb      	ldrb	r3, [r7, #11]
 80068b8:	3301      	adds	r3, #1
 80068ba:	72fb      	strb	r3, [r7, #11]
      break;
 80068bc:	e021      	b.n	8006902 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	7c1b      	ldrb	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10d      	bne.n	80068e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ce:	f107 0208 	add.w	r2, r7, #8
 80068d2:	4610      	mov	r0, r2
 80068d4:	4798      	blx	r3
 80068d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3301      	adds	r3, #1
 80068dc:	2207      	movs	r2, #7
 80068de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068e0:	e00f      	b.n	8006902 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f9dc 	bl	8006ca2 <USBD_CtlError>
        err++;
 80068ea:	7afb      	ldrb	r3, [r7, #11]
 80068ec:	3301      	adds	r3, #1
 80068ee:	72fb      	strb	r3, [r7, #11]
      break;
 80068f0:	e007      	b.n	8006902 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f9d4 	bl	8006ca2 <USBD_CtlError>
      err++;
 80068fa:	7afb      	ldrb	r3, [r7, #11]
 80068fc:	3301      	adds	r3, #1
 80068fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006900:	bf00      	nop
  }

  if (err != 0U)
 8006902:	7afb      	ldrb	r3, [r7, #11]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11c      	bne.n	8006942 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006908:	893b      	ldrh	r3, [r7, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d011      	beq.n	8006932 <USBD_GetDescriptor+0x2b6>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	88db      	ldrh	r3, [r3, #6]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00d      	beq.n	8006932 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	88da      	ldrh	r2, [r3, #6]
 800691a:	893b      	ldrh	r3, [r7, #8]
 800691c:	4293      	cmp	r3, r2
 800691e:	bf28      	it	cs
 8006920:	4613      	movcs	r3, r2
 8006922:	b29b      	uxth	r3, r3
 8006924:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006926:	893b      	ldrh	r3, [r7, #8]
 8006928:	461a      	mov	r2, r3
 800692a:	68f9      	ldr	r1, [r7, #12]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fa22 	bl	8006d76 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	88db      	ldrh	r3, [r3, #6]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d104      	bne.n	8006944 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fa79 	bl	8006e32 <USBD_CtlSendStatus>
 8006940:	e000      	b.n	8006944 <USBD_GetDescriptor+0x2c8>
    return;
 8006942:	bf00      	nop
    }
  }
}
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop

0800694c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	889b      	ldrh	r3, [r3, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d130      	bne.n	80069c0 <USBD_SetAddress+0x74>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	88db      	ldrh	r3, [r3, #6]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d12c      	bne.n	80069c0 <USBD_SetAddress+0x74>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	885b      	ldrh	r3, [r3, #2]
 800696a:	2b7f      	cmp	r3, #127	; 0x7f
 800696c:	d828      	bhi.n	80069c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	885b      	ldrh	r3, [r3, #2]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006978:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006980:	2b03      	cmp	r3, #3
 8006982:	d104      	bne.n	800698e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f98b 	bl	8006ca2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800698c:	e01d      	b.n	80069ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	7bfa      	ldrb	r2, [r7, #15]
 8006992:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f003 faf8 	bl	8009f90 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fa46 	bl	8006e32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d004      	beq.n	80069b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b4:	e009      	b.n	80069ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069be:	e004      	b.n	80069ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f96d 	bl	8006ca2 <USBD_CtlError>
  }
}
 80069c8:	bf00      	nop
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	885b      	ldrh	r3, [r3, #2]
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	4b41      	ldr	r3, [pc, #260]	; (8006aec <USBD_SetConfig+0x118>)
 80069e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80069e8:	4b40      	ldr	r3, [pc, #256]	; (8006aec <USBD_SetConfig+0x118>)
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d904      	bls.n	80069fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f955 	bl	8006ca2 <USBD_CtlError>
 80069f8:	e075      	b.n	8006ae6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d002      	beq.n	8006a0a <USBD_SetConfig+0x36>
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d023      	beq.n	8006a50 <USBD_SetConfig+0x7c>
 8006a08:	e062      	b.n	8006ad0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006a0a:	4b38      	ldr	r3, [pc, #224]	; (8006aec <USBD_SetConfig+0x118>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01a      	beq.n	8006a48 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006a12:	4b36      	ldr	r3, [pc, #216]	; (8006aec <USBD_SetConfig+0x118>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2203      	movs	r2, #3
 8006a20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a24:	4b31      	ldr	r3, [pc, #196]	; (8006aec <USBD_SetConfig+0x118>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff f9e8 	bl	8005e00 <USBD_SetClassConfig>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d104      	bne.n	8006a40 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f932 	bl	8006ca2 <USBD_CtlError>
            return;
 8006a3e:	e052      	b.n	8006ae6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f9f6 	bl	8006e32 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a46:	e04e      	b.n	8006ae6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f9f2 	bl	8006e32 <USBD_CtlSendStatus>
        break;
 8006a4e:	e04a      	b.n	8006ae6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006a50:	4b26      	ldr	r3, [pc, #152]	; (8006aec <USBD_SetConfig+0x118>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d112      	bne.n	8006a7e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006a60:	4b22      	ldr	r3, [pc, #136]	; (8006aec <USBD_SetConfig+0x118>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006a6a:	4b20      	ldr	r3, [pc, #128]	; (8006aec <USBD_SetConfig+0x118>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff f9e4 	bl	8005e3e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f9db 	bl	8006e32 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a7c:	e033      	b.n	8006ae6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006a7e:	4b1b      	ldr	r3, [pc, #108]	; (8006aec <USBD_SetConfig+0x118>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d01d      	beq.n	8006ac8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff f9d2 	bl	8005e3e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006a9a:	4b14      	ldr	r3, [pc, #80]	; (8006aec <USBD_SetConfig+0x118>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006aa4:	4b11      	ldr	r3, [pc, #68]	; (8006aec <USBD_SetConfig+0x118>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7ff f9a8 	bl	8005e00 <USBD_SetClassConfig>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d104      	bne.n	8006ac0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f8f2 	bl	8006ca2 <USBD_CtlError>
            return;
 8006abe:	e012      	b.n	8006ae6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f9b6 	bl	8006e32 <USBD_CtlSendStatus>
        break;
 8006ac6:	e00e      	b.n	8006ae6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f9b2 	bl	8006e32 <USBD_CtlSendStatus>
        break;
 8006ace:	e00a      	b.n	8006ae6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f8e5 	bl	8006ca2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006ad8:	4b04      	ldr	r3, [pc, #16]	; (8006aec <USBD_SetConfig+0x118>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff f9ad 	bl	8005e3e <USBD_ClrClassConfig>
        break;
 8006ae4:	bf00      	nop
    }
  }
}
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	2000019c 	.word	0x2000019c

08006af0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	88db      	ldrh	r3, [r3, #6]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d004      	beq.n	8006b0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f8cc 	bl	8006ca2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b0a:	e022      	b.n	8006b52 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	dc02      	bgt.n	8006b1c <USBD_GetConfig+0x2c>
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	dc03      	bgt.n	8006b22 <USBD_GetConfig+0x32>
 8006b1a:	e015      	b.n	8006b48 <USBD_GetConfig+0x58>
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d00b      	beq.n	8006b38 <USBD_GetConfig+0x48>
 8006b20:	e012      	b.n	8006b48 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f920 	bl	8006d76 <USBD_CtlSendData>
        break;
 8006b36:	e00c      	b.n	8006b52 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f918 	bl	8006d76 <USBD_CtlSendData>
        break;
 8006b46:	e004      	b.n	8006b52 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f8a9 	bl	8006ca2 <USBD_CtlError>
        break;
 8006b50:	bf00      	nop
}
 8006b52:	bf00      	nop
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b082      	sub	sp, #8
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d81e      	bhi.n	8006bae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	88db      	ldrh	r3, [r3, #6]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d004      	beq.n	8006b82 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f891 	bl	8006ca2 <USBD_CtlError>
        break;
 8006b80:	e01a      	b.n	8006bb8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d005      	beq.n	8006b9e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f043 0202 	orr.w	r2, r3, #2
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	330c      	adds	r3, #12
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f8e5 	bl	8006d76 <USBD_CtlSendData>
      break;
 8006bac:	e004      	b.n	8006bb8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f876 	bl	8006ca2 <USBD_CtlError>
      break;
 8006bb6:	bf00      	nop
  }
}
 8006bb8:	bf00      	nop
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	885b      	ldrh	r3, [r3, #2]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d106      	bne.n	8006be0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f929 	bl	8006e32 <USBD_CtlSendStatus>
  }
}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d80b      	bhi.n	8006c16 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	885b      	ldrh	r3, [r3, #2]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d10c      	bne.n	8006c20 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f90f 	bl	8006e32 <USBD_CtlSendStatus>
      }
      break;
 8006c14:	e004      	b.n	8006c20 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f842 	bl	8006ca2 <USBD_CtlError>
      break;
 8006c1e:	e000      	b.n	8006c22 <USBD_ClrFeature+0x3a>
      break;
 8006c20:	bf00      	nop
  }
}
 8006c22:	bf00      	nop
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781a      	ldrb	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	785a      	ldrb	r2, [r3, #1]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	3302      	adds	r3, #2
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	3303      	adds	r3, #3
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	021b      	lsls	r3, r3, #8
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	4413      	add	r3, r2
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	3304      	adds	r3, #4
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	3305      	adds	r3, #5
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	4413      	add	r3, r2
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	3306      	adds	r3, #6
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	3307      	adds	r3, #7
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	021b      	lsls	r3, r3, #8
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	4413      	add	r3, r2
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	80da      	strh	r2, [r3, #6]

}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr

08006ca2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006cac:	2180      	movs	r1, #128	; 0x80
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f003 f904 	bl	8009ebc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f003 f900 	bl	8009ebc <USBD_LL_StallEP>
}
 8006cbc:	bf00      	nop
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d032      	beq.n	8006d40 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 f834 	bl	8006d48 <USBD_GetLen>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006cee:	7dfb      	ldrb	r3, [r7, #23]
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	75fa      	strb	r2, [r7, #23]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	7812      	ldrb	r2, [r2, #0]
 8006cfe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	75fa      	strb	r2, [r7, #23]
 8006d06:	461a      	mov	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006d10:	e012      	b.n	8006d38 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	60fa      	str	r2, [r7, #12]
 8006d18:	7dfa      	ldrb	r2, [r7, #23]
 8006d1a:	1c51      	adds	r1, r2, #1
 8006d1c:	75f9      	strb	r1, [r7, #23]
 8006d1e:	4611      	mov	r1, r2
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	440a      	add	r2, r1
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	75fa      	strb	r2, [r7, #23]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4413      	add	r3, r2
 8006d34:	2200      	movs	r2, #0
 8006d36:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e8      	bne.n	8006d12 <USBD_GetString+0x4e>
    }
  }
}
 8006d40:	bf00      	nop
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006d54:	e005      	b.n	8006d62 <USBD_GetLen+0x1a>
  {
    len++;
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1f5      	bne.n	8006d56 <USBD_GetLen+0xe>
  }

  return len;
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr

08006d76 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	4613      	mov	r3, r2
 8006d82:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d8c:	88fa      	ldrh	r2, [r7, #6]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006d92:	88fa      	ldrh	r2, [r7, #6]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d98:	88fb      	ldrh	r3, [r7, #6]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f003 f915 	bl	8009fce <USBD_LL_Transmit>

  return USBD_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	4613      	mov	r3, r2
 8006dba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dbc:	88fb      	ldrh	r3, [r7, #6]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f003 f903 	bl	8009fce <USBD_LL_Transmit>

  return USBD_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	60f8      	str	r0, [r7, #12]
 8006dda:	60b9      	str	r1, [r7, #8]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2203      	movs	r2, #3
 8006de4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006de8:	88fa      	ldrh	r2, [r7, #6]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006df0:	88fa      	ldrh	r2, [r7, #6]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006df8:	88fb      	ldrh	r3, [r7, #6]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f003 f908 	bl	800a014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e1c:	88fb      	ldrh	r3, [r7, #6]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	2100      	movs	r1, #0
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f003 f8f6 	bl	800a014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2204      	movs	r2, #4
 8006e3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e42:	2300      	movs	r3, #0
 8006e44:	2200      	movs	r2, #0
 8006e46:	2100      	movs	r1, #0
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f003 f8c0 	bl	8009fce <USBD_LL_Transmit>

  return USBD_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2205      	movs	r2, #5
 8006e64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e68:	2300      	movs	r3, #0
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f003 f8d0 	bl	800a014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e86:	f3ef 8305 	mrs	r3, IPSR
 8006e8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10f      	bne.n	8006eb2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e92:	f3ef 8310 	mrs	r3, PRIMASK
 8006e96:	607b      	str	r3, [r7, #4]
  return(result);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d109      	bne.n	8006eb2 <osKernelInitialize+0x32>
 8006e9e:	4b10      	ldr	r3, [pc, #64]	; (8006ee0 <osKernelInitialize+0x60>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d109      	bne.n	8006eba <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ea6:	f3ef 8311 	mrs	r3, BASEPRI
 8006eaa:	603b      	str	r3, [r7, #0]
  return(result);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006eb2:	f06f 0305 	mvn.w	r3, #5
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	e00c      	b.n	8006ed4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006eba:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <osKernelInitialize+0x60>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d105      	bne.n	8006ece <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006ec2:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <osKernelInitialize+0x60>)
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	e002      	b.n	8006ed4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006ece:	f04f 33ff 	mov.w	r3, #4294967295
 8006ed2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr
 8006ee0:	200001a0 	.word	0x200001a0

08006ee4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eea:	f3ef 8305 	mrs	r3, IPSR
 8006eee:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ef0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10f      	bne.n	8006f16 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8006efa:	607b      	str	r3, [r7, #4]
  return(result);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d109      	bne.n	8006f16 <osKernelStart+0x32>
 8006f02:	4b11      	ldr	r3, [pc, #68]	; (8006f48 <osKernelStart+0x64>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d109      	bne.n	8006f1e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f0e:	603b      	str	r3, [r7, #0]
  return(result);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006f16:	f06f 0305 	mvn.w	r3, #5
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	e00e      	b.n	8006f3c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006f1e:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <osKernelStart+0x64>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d107      	bne.n	8006f36 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006f26:	4b08      	ldr	r3, [pc, #32]	; (8006f48 <osKernelStart+0x64>)
 8006f28:	2202      	movs	r2, #2
 8006f2a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006f2c:	f001 f878 	bl	8008020 <vTaskStartScheduler>
      stat = osOK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	e002      	b.n	8006f3c <osKernelStart+0x58>
    } else {
      stat = osError;
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	200001a0 	.word	0x200001a0

08006f4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b092      	sub	sp, #72	; 0x48
 8006f50:	af04      	add	r7, sp, #16
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f5c:	f3ef 8305 	mrs	r3, IPSR
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f040 8094 	bne.w	8007092 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f6e:	623b      	str	r3, [r7, #32]
  return(result);
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f040 808d 	bne.w	8007092 <osThreadNew+0x146>
 8006f78:	4b48      	ldr	r3, [pc, #288]	; (800709c <osThreadNew+0x150>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d106      	bne.n	8006f8e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f80:	f3ef 8311 	mrs	r3, BASEPRI
 8006f84:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f040 8082 	bne.w	8007092 <osThreadNew+0x146>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d07e      	beq.n	8007092 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006f94:	2380      	movs	r3, #128	; 0x80
 8006f96:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006f98:	2318      	movs	r3, #24
 8006f9a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006fa0:	f107 031b 	add.w	r3, r7, #27
 8006fa4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8006faa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d045      	beq.n	800703e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <osThreadNew+0x74>
        name = attr->name;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d008      	beq.n	8006fe6 <osThreadNew+0x9a>
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	2b38      	cmp	r3, #56	; 0x38
 8006fd8:	d805      	bhi.n	8006fe6 <osThreadNew+0x9a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <osThreadNew+0x9e>
        return (NULL);
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e054      	b.n	8007094 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	089b      	lsrs	r3, r3, #2
 8006ff8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00e      	beq.n	8007020 <osThreadNew+0xd4>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	2b5b      	cmp	r3, #91	; 0x5b
 8007008:	d90a      	bls.n	8007020 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800700e:	2b00      	cmp	r3, #0
 8007010:	d006      	beq.n	8007020 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <osThreadNew+0xd4>
        mem = 1;
 800701a:	2301      	movs	r3, #1
 800701c:	62bb      	str	r3, [r7, #40]	; 0x28
 800701e:	e010      	b.n	8007042 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10c      	bne.n	8007042 <osThreadNew+0xf6>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d108      	bne.n	8007042 <osThreadNew+0xf6>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d104      	bne.n	8007042 <osThreadNew+0xf6>
          mem = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	62bb      	str	r3, [r7, #40]	; 0x28
 800703c:	e001      	b.n	8007042 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800703e:	2300      	movs	r3, #0
 8007040:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	2b01      	cmp	r3, #1
 8007046:	d110      	bne.n	800706a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007050:	9202      	str	r2, [sp, #8]
 8007052:	9301      	str	r3, [sp, #4]
 8007054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800705c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fe12 	bl	8007c88 <xTaskCreateStatic>
 8007064:	4603      	mov	r3, r0
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	e013      	b.n	8007092 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	2b00      	cmp	r3, #0
 800706e:	d110      	bne.n	8007092 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	b29a      	uxth	r2, r3
 8007074:	f107 0314 	add.w	r3, r7, #20
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 fe5c 	bl	8007d40 <xTaskCreate>
 8007088:	4603      	mov	r3, r0
 800708a:	2b01      	cmp	r3, #1
 800708c:	d001      	beq.n	8007092 <osThreadNew+0x146>
          hTask = NULL;
 800708e:	2300      	movs	r3, #0
 8007090:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007092:	697b      	ldr	r3, [r7, #20]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3738      	adds	r7, #56	; 0x38
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	200001a0 	.word	0x200001a0

080070a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070a8:	f3ef 8305 	mrs	r3, IPSR
 80070ac:	613b      	str	r3, [r7, #16]
  return(result);
 80070ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10f      	bne.n	80070d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070b4:	f3ef 8310 	mrs	r3, PRIMASK
 80070b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d109      	bne.n	80070d4 <osDelay+0x34>
 80070c0:	4b0d      	ldr	r3, [pc, #52]	; (80070f8 <osDelay+0x58>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d109      	bne.n	80070dc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070c8:	f3ef 8311 	mrs	r3, BASEPRI
 80070cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <osDelay+0x3c>
    stat = osErrorISR;
 80070d4:	f06f 0305 	mvn.w	r3, #5
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	e007      	b.n	80070ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 ff66 	bl	8007fb8 <vTaskDelay>
    }
  }

  return (stat);
 80070ec:	697b      	ldr	r3, [r7, #20]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	200001a0 	.word	0x200001a0

080070fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4a06      	ldr	r2, [pc, #24]	; (8007124 <vApplicationGetIdleTaskMemory+0x28>)
 800710c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	4a05      	ldr	r2, [pc, #20]	; (8007128 <vApplicationGetIdleTaskMemory+0x2c>)
 8007112:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2280      	movs	r2, #128	; 0x80
 8007118:	601a      	str	r2, [r3, #0]
}
 800711a:	bf00      	nop
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr
 8007124:	200001a4 	.word	0x200001a4
 8007128:	20000200 	.word	0x20000200

0800712c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4a07      	ldr	r2, [pc, #28]	; (8007158 <vApplicationGetTimerTaskMemory+0x2c>)
 800713c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4a06      	ldr	r2, [pc, #24]	; (800715c <vApplicationGetTimerTaskMemory+0x30>)
 8007142:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f44f 7280 	mov.w	r2, #256	; 0x100
 800714a:	601a      	str	r2, [r3, #0]
}
 800714c:	bf00      	nop
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	bc80      	pop	{r7}
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	20000400 	.word	0x20000400
 800715c:	2000045c 	.word	0x2000045c

08007160 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f103 0208 	add.w	r2, r3, #8
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f04f 32ff 	mov.w	r2, #4294967295
 8007178:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f103 0208 	add.w	r2, r3, #8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f103 0208 	add.w	r2, r3, #8
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	bc80      	pop	{r7}
 800719c:	4770      	bx	lr

0800719e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bc80      	pop	{r7}
 80071b4:	4770      	bx	lr

080071b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071b6:	b480      	push	{r7}
 80071b8:	b085      	sub	sp, #20
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	601a      	str	r2, [r3, #0]
}
 80071f2:	bf00      	nop
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc80      	pop	{r7}
 80071fa:	4770      	bx	lr

080071fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007212:	d103      	bne.n	800721c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	e00c      	b.n	8007236 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3308      	adds	r3, #8
 8007220:	60fb      	str	r3, [r7, #12]
 8007222:	e002      	b.n	800722a <vListInsert+0x2e>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	429a      	cmp	r2, r3
 8007234:	d2f6      	bcs.n	8007224 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	601a      	str	r2, [r3, #0]
}
 8007262:	bf00      	nop
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr

0800726c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6892      	ldr	r2, [r2, #8]
 8007282:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6852      	ldr	r2, [r2, #4]
 800728c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	429a      	cmp	r2, r3
 8007296:	d103      	bne.n	80072a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	1e5a      	subs	r2, r3, #1
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bc80      	pop	{r7}
 80072bc:	4770      	bx	lr
	...

080072c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10a      	bne.n	80072ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80072ea:	f001 ffc7 	bl	800927c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f6:	68f9      	ldr	r1, [r7, #12]
 80072f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072fa:	fb01 f303 	mul.w	r3, r1, r3
 80072fe:	441a      	add	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731a:	3b01      	subs	r3, #1
 800731c:	68f9      	ldr	r1, [r7, #12]
 800731e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007320:	fb01 f303 	mul.w	r3, r1, r3
 8007324:	441a      	add	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	22ff      	movs	r2, #255	; 0xff
 800732e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	22ff      	movs	r2, #255	; 0xff
 8007336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d114      	bne.n	800736a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01a      	beq.n	800737e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3310      	adds	r3, #16
 800734c:	4618      	mov	r0, r3
 800734e:	f001 f8f1 	bl	8008534 <xTaskRemoveFromEventList>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d012      	beq.n	800737e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007358:	4b0c      	ldr	r3, [pc, #48]	; (800738c <xQueueGenericReset+0xcc>)
 800735a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	e009      	b.n	800737e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3310      	adds	r3, #16
 800736e:	4618      	mov	r0, r3
 8007370:	f7ff fef6 	bl	8007160 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3324      	adds	r3, #36	; 0x24
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff fef1 	bl	8007160 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800737e:	f001 ffad 	bl	80092dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007382:	2301      	movs	r3, #1
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	e000ed04 	.word	0xe000ed04

08007390 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08e      	sub	sp, #56	; 0x38
 8007394:	af02      	add	r7, sp, #8
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <xQueueGenericCreateStatic+0x52>
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <xQueueGenericCreateStatic+0x56>
 80073e2:	2301      	movs	r3, #1
 80073e4:	e000      	b.n	80073e8 <xQueueGenericCreateStatic+0x58>
 80073e6:	2300      	movs	r3, #0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	623b      	str	r3, [r7, #32]
}
 80073fe:	bf00      	nop
 8007400:	e7fe      	b.n	8007400 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <xQueueGenericCreateStatic+0x7e>
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <xQueueGenericCreateStatic+0x82>
 800740e:	2301      	movs	r3, #1
 8007410:	e000      	b.n	8007414 <xQueueGenericCreateStatic+0x84>
 8007412:	2300      	movs	r3, #0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10a      	bne.n	800742e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	61fb      	str	r3, [r7, #28]
}
 800742a:	bf00      	nop
 800742c:	e7fe      	b.n	800742c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800742e:	2350      	movs	r3, #80	; 0x50
 8007430:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2b50      	cmp	r3, #80	; 0x50
 8007436:	d00a      	beq.n	800744e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	61bb      	str	r3, [r7, #24]
}
 800744a:	bf00      	nop
 800744c:	e7fe      	b.n	800744c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00d      	beq.n	8007474 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007460:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	4613      	mov	r3, r2
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 f805 	bl	800747e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007476:	4618      	mov	r0, r3
 8007478:	3730      	adds	r7, #48	; 0x30
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	607a      	str	r2, [r7, #4]
 800748a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d103      	bne.n	800749a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	69ba      	ldr	r2, [r7, #24]
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	e002      	b.n	80074a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074ac:	2101      	movs	r1, #1
 80074ae:	69b8      	ldr	r0, [r7, #24]
 80074b0:	f7ff ff06 	bl	80072c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	78fa      	ldrb	r2, [r7, #3]
 80074b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074bc:	bf00      	nop
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08e      	sub	sp, #56	; 0x38
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074d2:	2300      	movs	r3, #0
 80074d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <xQueueGenericSend+0x32>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d103      	bne.n	8007504 <xQueueGenericSend+0x40>
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <xQueueGenericSend+0x44>
 8007504:	2301      	movs	r3, #1
 8007506:	e000      	b.n	800750a <xQueueGenericSend+0x46>
 8007508:	2300      	movs	r3, #0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10a      	bne.n	8007524 <xQueueGenericSend+0x60>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	2b02      	cmp	r3, #2
 8007528:	d103      	bne.n	8007532 <xQueueGenericSend+0x6e>
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <xQueueGenericSend+0x72>
 8007532:	2301      	movs	r3, #1
 8007534:	e000      	b.n	8007538 <xQueueGenericSend+0x74>
 8007536:	2300      	movs	r3, #0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10a      	bne.n	8007552 <xQueueGenericSend+0x8e>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	623b      	str	r3, [r7, #32]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007552:	f001 f9b1 	bl	80088b8 <xTaskGetSchedulerState>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d102      	bne.n	8007562 <xQueueGenericSend+0x9e>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <xQueueGenericSend+0xa2>
 8007562:	2301      	movs	r3, #1
 8007564:	e000      	b.n	8007568 <xQueueGenericSend+0xa4>
 8007566:	2300      	movs	r3, #0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <xQueueGenericSend+0xbe>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	61fb      	str	r3, [r7, #28]
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007582:	f001 fe7b 	bl	800927c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758e:	429a      	cmp	r2, r3
 8007590:	d302      	bcc.n	8007598 <xQueueGenericSend+0xd4>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d129      	bne.n	80075ec <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	68b9      	ldr	r1, [r7, #8]
 800759c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800759e:	f000 fa07 	bl	80079b0 <prvCopyDataToQueue>
 80075a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d010      	beq.n	80075ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	3324      	adds	r3, #36	; 0x24
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 ffbf 	bl	8008534 <xTaskRemoveFromEventList>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d013      	beq.n	80075e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075bc:	4b3f      	ldr	r3, [pc, #252]	; (80076bc <xQueueGenericSend+0x1f8>)
 80075be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	e00a      	b.n	80075e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d007      	beq.n	80075e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075d4:	4b39      	ldr	r3, [pc, #228]	; (80076bc <xQueueGenericSend+0x1f8>)
 80075d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075e4:	f001 fe7a 	bl	80092dc <vPortExitCritical>
				return pdPASS;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e063      	b.n	80076b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d103      	bne.n	80075fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075f2:	f001 fe73 	bl	80092dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	e05c      	b.n	80076b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d106      	bne.n	800760e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007600:	f107 0314 	add.w	r3, r7, #20
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fff9 	bl	80085fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800760a:	2301      	movs	r3, #1
 800760c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800760e:	f001 fe65 	bl	80092dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007612:	f000 fd6b 	bl	80080ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007616:	f001 fe31 	bl	800927c <vPortEnterCritical>
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007620:	b25b      	sxtb	r3, r3
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007626:	d103      	bne.n	8007630 <xQueueGenericSend+0x16c>
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007636:	b25b      	sxtb	r3, r3
 8007638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763c:	d103      	bne.n	8007646 <xQueueGenericSend+0x182>
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007646:	f001 fe49 	bl	80092dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800764a:	1d3a      	adds	r2, r7, #4
 800764c:	f107 0314 	add.w	r3, r7, #20
 8007650:	4611      	mov	r1, r2
 8007652:	4618      	mov	r0, r3
 8007654:	f000 ffe8 	bl	8008628 <xTaskCheckForTimeOut>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d124      	bne.n	80076a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800765e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007660:	f000 fa9e 	bl	8007ba0 <prvIsQueueFull>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d018      	beq.n	800769c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	3310      	adds	r3, #16
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	4611      	mov	r1, r2
 8007672:	4618      	mov	r0, r3
 8007674:	f000 ff0e 	bl	8008494 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800767a:	f000 fa29 	bl	8007ad0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800767e:	f000 fd43 	bl	8008108 <xTaskResumeAll>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	f47f af7c 	bne.w	8007582 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800768a:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <xQueueGenericSend+0x1f8>)
 800768c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	e772      	b.n	8007582 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800769c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800769e:	f000 fa17 	bl	8007ad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076a2:	f000 fd31 	bl	8008108 <xTaskResumeAll>
 80076a6:	e76c      	b.n	8007582 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076aa:	f000 fa11 	bl	8007ad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076ae:	f000 fd2b 	bl	8008108 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076b2:	2300      	movs	r3, #0
		}
	}
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3738      	adds	r7, #56	; 0x38
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08e      	sub	sp, #56	; 0x38
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10a      	bne.n	80076ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076ea:	bf00      	nop
 80076ec:	e7fe      	b.n	80076ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d103      	bne.n	80076fc <xQueueGenericSendFromISR+0x3c>
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <xQueueGenericSendFromISR+0x40>
 80076fc:	2301      	movs	r3, #1
 80076fe:	e000      	b.n	8007702 <xQueueGenericSendFromISR+0x42>
 8007700:	2300      	movs	r3, #0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10a      	bne.n	800771c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	623b      	str	r3, [r7, #32]
}
 8007718:	bf00      	nop
 800771a:	e7fe      	b.n	800771a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2b02      	cmp	r3, #2
 8007720:	d103      	bne.n	800772a <xQueueGenericSendFromISR+0x6a>
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007726:	2b01      	cmp	r3, #1
 8007728:	d101      	bne.n	800772e <xQueueGenericSendFromISR+0x6e>
 800772a:	2301      	movs	r3, #1
 800772c:	e000      	b.n	8007730 <xQueueGenericSendFromISR+0x70>
 800772e:	2300      	movs	r3, #0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10a      	bne.n	800774a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	61fb      	str	r3, [r7, #28]
}
 8007746:	bf00      	nop
 8007748:	e7fe      	b.n	8007748 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800774a:	f001 fe59 	bl	8009400 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800774e:	f3ef 8211 	mrs	r2, BASEPRI
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	61ba      	str	r2, [r7, #24]
 8007764:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007766:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007768:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007772:	429a      	cmp	r2, r3
 8007774:	d302      	bcc.n	800777c <xQueueGenericSendFromISR+0xbc>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b02      	cmp	r3, #2
 800777a:	d12c      	bne.n	80077d6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	68b9      	ldr	r1, [r7, #8]
 800778a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800778c:	f000 f910 	bl	80079b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007790:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007798:	d112      	bne.n	80077c0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d016      	beq.n	80077d0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	3324      	adds	r3, #36	; 0x24
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fec4 	bl	8008534 <xTaskRemoveFromEventList>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00e      	beq.n	80077d0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00b      	beq.n	80077d0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	e007      	b.n	80077d0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077c4:	3301      	adds	r3, #1
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	b25a      	sxtb	r2, r3
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077d0:	2301      	movs	r3, #1
 80077d2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80077d4:	e001      	b.n	80077da <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3738      	adds	r7, #56	; 0x38
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08c      	sub	sp, #48	; 0x30
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077fc:	2300      	movs	r3, #0
 80077fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10a      	bne.n	8007820 <xQueueReceive+0x30>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	623b      	str	r3, [r7, #32]
}
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d103      	bne.n	800782e <xQueueReceive+0x3e>
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <xQueueReceive+0x42>
 800782e:	2301      	movs	r3, #1
 8007830:	e000      	b.n	8007834 <xQueueReceive+0x44>
 8007832:	2300      	movs	r3, #0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <xQueueReceive+0x5e>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	61fb      	str	r3, [r7, #28]
}
 800784a:	bf00      	nop
 800784c:	e7fe      	b.n	800784c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800784e:	f001 f833 	bl	80088b8 <xTaskGetSchedulerState>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d102      	bne.n	800785e <xQueueReceive+0x6e>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <xQueueReceive+0x72>
 800785e:	2301      	movs	r3, #1
 8007860:	e000      	b.n	8007864 <xQueueReceive+0x74>
 8007862:	2300      	movs	r3, #0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10a      	bne.n	800787e <xQueueReceive+0x8e>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	61bb      	str	r3, [r7, #24]
}
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800787e:	f001 fcfd 	bl	800927c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	2b00      	cmp	r3, #0
 800788c:	d01f      	beq.n	80078ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800788e:	68b9      	ldr	r1, [r7, #8]
 8007890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007892:	f000 f8f7 	bl	8007a84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	1e5a      	subs	r2, r3, #1
 800789a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00f      	beq.n	80078c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	3310      	adds	r3, #16
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 fe42 	bl	8008534 <xTaskRemoveFromEventList>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d007      	beq.n	80078c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078b6:	4b3d      	ldr	r3, [pc, #244]	; (80079ac <xQueueReceive+0x1bc>)
 80078b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078c6:	f001 fd09 	bl	80092dc <vPortExitCritical>
				return pdPASS;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e069      	b.n	80079a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d103      	bne.n	80078dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078d4:	f001 fd02 	bl	80092dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078d8:	2300      	movs	r3, #0
 80078da:	e062      	b.n	80079a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d106      	bne.n	80078f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078e2:	f107 0310 	add.w	r3, r7, #16
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 fe88 	bl	80085fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078ec:	2301      	movs	r3, #1
 80078ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078f0:	f001 fcf4 	bl	80092dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078f4:	f000 fbfa 	bl	80080ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078f8:	f001 fcc0 	bl	800927c <vPortEnterCritical>
 80078fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007902:	b25b      	sxtb	r3, r3
 8007904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007908:	d103      	bne.n	8007912 <xQueueReceive+0x122>
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007918:	b25b      	sxtb	r3, r3
 800791a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791e:	d103      	bne.n	8007928 <xQueueReceive+0x138>
 8007920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007928:	f001 fcd8 	bl	80092dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800792c:	1d3a      	adds	r2, r7, #4
 800792e:	f107 0310 	add.w	r3, r7, #16
 8007932:	4611      	mov	r1, r2
 8007934:	4618      	mov	r0, r3
 8007936:	f000 fe77 	bl	8008628 <xTaskCheckForTimeOut>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d123      	bne.n	8007988 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007942:	f000 f917 	bl	8007b74 <prvIsQueueEmpty>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d017      	beq.n	800797c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	3324      	adds	r3, #36	; 0x24
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	4611      	mov	r1, r2
 8007954:	4618      	mov	r0, r3
 8007956:	f000 fd9d 	bl	8008494 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800795a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800795c:	f000 f8b8 	bl	8007ad0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007960:	f000 fbd2 	bl	8008108 <xTaskResumeAll>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d189      	bne.n	800787e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800796a:	4b10      	ldr	r3, [pc, #64]	; (80079ac <xQueueReceive+0x1bc>)
 800796c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	e780      	b.n	800787e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800797c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800797e:	f000 f8a7 	bl	8007ad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007982:	f000 fbc1 	bl	8008108 <xTaskResumeAll>
 8007986:	e77a      	b.n	800787e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800798a:	f000 f8a1 	bl	8007ad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800798e:	f000 fbbb 	bl	8008108 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007994:	f000 f8ee 	bl	8007b74 <prvIsQueueEmpty>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	f43f af6f 	beq.w	800787e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3730      	adds	r7, #48	; 0x30
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	e000ed04 	.word	0xe000ed04

080079b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079bc:	2300      	movs	r3, #0
 80079be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10d      	bne.n	80079ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d14d      	bne.n	8007a72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 ff8a 	bl	80088f4 <xTaskPriorityDisinherit>
 80079e0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	605a      	str	r2, [r3, #4]
 80079e8:	e043      	b.n	8007a72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d119      	bne.n	8007a24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6898      	ldr	r0, [r3, #8]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f8:	461a      	mov	r2, r3
 80079fa:	68b9      	ldr	r1, [r7, #8]
 80079fc:	f002 fbb0 	bl	800a160 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a08:	441a      	add	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	689a      	ldr	r2, [r3, #8]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d32b      	bcc.n	8007a72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	609a      	str	r2, [r3, #8]
 8007a22:	e026      	b.n	8007a72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	68d8      	ldr	r0, [r3, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	68b9      	ldr	r1, [r7, #8]
 8007a30:	f002 fb96 	bl	800a160 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3c:	425b      	negs	r3, r3
 8007a3e:	441a      	add	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d207      	bcs.n	8007a60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a58:	425b      	negs	r3, r3
 8007a5a:	441a      	add	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d105      	bne.n	8007a72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a7a:	697b      	ldr	r3, [r7, #20]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d018      	beq.n	8007ac8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9e:	441a      	add	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68da      	ldr	r2, [r3, #12]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d303      	bcc.n	8007ab8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68d9      	ldr	r1, [r3, #12]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6838      	ldr	r0, [r7, #0]
 8007ac4:	f002 fb4c 	bl	800a160 <memcpy>
	}
}
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ad8:	f001 fbd0 	bl	800927c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ae2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ae4:	e011      	b.n	8007b0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d012      	beq.n	8007b14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3324      	adds	r3, #36	; 0x24
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fd1e 	bl	8008534 <xTaskRemoveFromEventList>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007afe:	f000 fdf5 	bl	80086ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	dce9      	bgt.n	8007ae6 <prvUnlockQueue+0x16>
 8007b12:	e000      	b.n	8007b16 <prvUnlockQueue+0x46>
					break;
 8007b14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	22ff      	movs	r2, #255	; 0xff
 8007b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b1e:	f001 fbdd 	bl	80092dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b22:	f001 fbab 	bl	800927c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b2e:	e011      	b.n	8007b54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d012      	beq.n	8007b5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3310      	adds	r3, #16
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 fcf9 	bl	8008534 <xTaskRemoveFromEventList>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b48:	f000 fdd0 	bl	80086ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	dce9      	bgt.n	8007b30 <prvUnlockQueue+0x60>
 8007b5c:	e000      	b.n	8007b60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	22ff      	movs	r2, #255	; 0xff
 8007b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b68:	f001 fbb8 	bl	80092dc <vPortExitCritical>
}
 8007b6c:	bf00      	nop
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b7c:	f001 fb7e 	bl	800927c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d102      	bne.n	8007b8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	e001      	b.n	8007b92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b92:	f001 fba3 	bl	80092dc <vPortExitCritical>

	return xReturn;
 8007b96:	68fb      	ldr	r3, [r7, #12]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ba8:	f001 fb68 	bl	800927c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d102      	bne.n	8007bbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	e001      	b.n	8007bc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bc2:	f001 fb8b 	bl	80092dc <vPortExitCritical>

	return xReturn;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	e014      	b.n	8007c0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007be0:	4a0e      	ldr	r2, [pc, #56]	; (8007c1c <vQueueAddToRegistry+0x4c>)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10b      	bne.n	8007c04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007bec:	490b      	ldr	r1, [pc, #44]	; (8007c1c <vQueueAddToRegistry+0x4c>)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007bf6:	4a09      	ldr	r2, [pc, #36]	; (8007c1c <vQueueAddToRegistry+0x4c>)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	4413      	add	r3, r2
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c02:	e006      	b.n	8007c12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3301      	adds	r3, #1
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b07      	cmp	r3, #7
 8007c0e:	d9e7      	bls.n	8007be0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c10:	bf00      	nop
 8007c12:	bf00      	nop
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bc80      	pop	{r7}
 8007c1a:	4770      	bx	lr
 8007c1c:	20001d1c 	.word	0x20001d1c

08007c20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c30:	f001 fb24 	bl	800927c <vPortEnterCritical>
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c3a:	b25b      	sxtb	r3, r3
 8007c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c40:	d103      	bne.n	8007c4a <vQueueWaitForMessageRestricted+0x2a>
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c50:	b25b      	sxtb	r3, r3
 8007c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c56:	d103      	bne.n	8007c60 <vQueueWaitForMessageRestricted+0x40>
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c60:	f001 fb3c 	bl	80092dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d106      	bne.n	8007c7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	3324      	adds	r3, #36	; 0x24
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	68b9      	ldr	r1, [r7, #8]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 fc31 	bl	80084dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c7a:	6978      	ldr	r0, [r7, #20]
 8007c7c:	f7ff ff28 	bl	8007ad0 <prvUnlockQueue>
	}
 8007c80:	bf00      	nop
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08e      	sub	sp, #56	; 0x38
 8007c8c:	af04      	add	r7, sp, #16
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10a      	bne.n	8007cb2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	623b      	str	r3, [r7, #32]
}
 8007cae:	bf00      	nop
 8007cb0:	e7fe      	b.n	8007cb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <xTaskCreateStatic+0x46>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	61fb      	str	r3, [r7, #28]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cce:	235c      	movs	r3, #92	; 0x5c
 8007cd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2b5c      	cmp	r3, #92	; 0x5c
 8007cd6:	d00a      	beq.n	8007cee <xTaskCreateStatic+0x66>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	61bb      	str	r3, [r7, #24]
}
 8007cea:	bf00      	nop
 8007cec:	e7fe      	b.n	8007cec <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d01e      	beq.n	8007d32 <xTaskCreateStatic+0xaa>
 8007cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d01b      	beq.n	8007d32 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d02:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9303      	str	r3, [sp, #12]
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	9302      	str	r3, [sp, #8]
 8007d14:	f107 0314 	add.w	r3, r7, #20
 8007d18:	9301      	str	r3, [sp, #4]
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	68b9      	ldr	r1, [r7, #8]
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 f850 	bl	8007dca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d2c:	f000 f8d4 	bl	8007ed8 <prvAddNewTaskToReadyList>
 8007d30:	e001      	b.n	8007d36 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d36:	697b      	ldr	r3, [r7, #20]
	}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3728      	adds	r7, #40	; 0x28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08c      	sub	sp, #48	; 0x30
 8007d44:	af04      	add	r7, sp, #16
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d50:	88fb      	ldrh	r3, [r7, #6]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f001 fb91 	bl	800947c <pvPortMalloc>
 8007d5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00e      	beq.n	8007d80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007d62:	205c      	movs	r0, #92	; 0x5c
 8007d64:	f001 fb8a 	bl	800947c <pvPortMalloc>
 8007d68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	631a      	str	r2, [r3, #48]	; 0x30
 8007d76:	e005      	b.n	8007d84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d78:	6978      	ldr	r0, [r7, #20]
 8007d7a:	f001 fc43 	bl	8009604 <vPortFree>
 8007d7e:	e001      	b.n	8007d84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d80:	2300      	movs	r3, #0
 8007d82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d017      	beq.n	8007dba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d92:	88fa      	ldrh	r2, [r7, #6]
 8007d94:	2300      	movs	r3, #0
 8007d96:	9303      	str	r3, [sp, #12]
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	9302      	str	r3, [sp, #8]
 8007d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	68b9      	ldr	r1, [r7, #8]
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 f80e 	bl	8007dca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dae:	69f8      	ldr	r0, [r7, #28]
 8007db0:	f000 f892 	bl	8007ed8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007db4:	2301      	movs	r3, #1
 8007db6:	61bb      	str	r3, [r7, #24]
 8007db8:	e002      	b.n	8007dc0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007dba:	f04f 33ff 	mov.w	r3, #4294967295
 8007dbe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007dc0:	69bb      	ldr	r3, [r7, #24]
	}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3720      	adds	r7, #32
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b088      	sub	sp, #32
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	607a      	str	r2, [r7, #4]
 8007dd6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	461a      	mov	r2, r3
 8007de2:	21a5      	movs	r1, #165	; 0xa5
 8007de4:	f002 f9ca 	bl	800a17c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007df2:	3b01      	subs	r3, #1
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	f023 0307 	bic.w	r3, r3, #7
 8007e00:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	f003 0307 	and.w	r3, r3, #7
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00a      	beq.n	8007e22 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	617b      	str	r3, [r7, #20]
}
 8007e1e:	bf00      	nop
 8007e20:	e7fe      	b.n	8007e20 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e22:	2300      	movs	r3, #0
 8007e24:	61fb      	str	r3, [r7, #28]
 8007e26:	e012      	b.n	8007e4e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	7819      	ldrb	r1, [r3, #0]
 8007e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	3334      	adds	r3, #52	; 0x34
 8007e38:	460a      	mov	r2, r1
 8007e3a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	4413      	add	r3, r2
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d006      	beq.n	8007e56 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	61fb      	str	r3, [r7, #28]
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	2b0f      	cmp	r3, #15
 8007e52:	d9e9      	bls.n	8007e28 <prvInitialiseNewTask+0x5e>
 8007e54:	e000      	b.n	8007e58 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007e56:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e62:	2b37      	cmp	r3, #55	; 0x37
 8007e64:	d901      	bls.n	8007e6a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e66:	2337      	movs	r3, #55	; 0x37
 8007e68:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e6e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e74:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	2200      	movs	r2, #0
 8007e7a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	3304      	adds	r3, #4
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7ff f98c 	bl	800719e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e88:	3318      	adds	r3, #24
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff f987 	bl	800719e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e94:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ea4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	68f9      	ldr	r1, [r7, #12]
 8007eb8:	69b8      	ldr	r0, [r7, #24]
 8007eba:	f001 f8ef 	bl	800909c <pxPortInitialiseStack>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ece:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ed0:	bf00      	nop
 8007ed2:	3720      	adds	r7, #32
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ee0:	f001 f9cc 	bl	800927c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ee4:	4b2d      	ldr	r3, [pc, #180]	; (8007f9c <prvAddNewTaskToReadyList+0xc4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	4a2c      	ldr	r2, [pc, #176]	; (8007f9c <prvAddNewTaskToReadyList+0xc4>)
 8007eec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007eee:	4b2c      	ldr	r3, [pc, #176]	; (8007fa0 <prvAddNewTaskToReadyList+0xc8>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d109      	bne.n	8007f0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ef6:	4a2a      	ldr	r2, [pc, #168]	; (8007fa0 <prvAddNewTaskToReadyList+0xc8>)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007efc:	4b27      	ldr	r3, [pc, #156]	; (8007f9c <prvAddNewTaskToReadyList+0xc4>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d110      	bne.n	8007f26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f04:	f000 fc16 	bl	8008734 <prvInitialiseTaskLists>
 8007f08:	e00d      	b.n	8007f26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f0a:	4b26      	ldr	r3, [pc, #152]	; (8007fa4 <prvAddNewTaskToReadyList+0xcc>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d109      	bne.n	8007f26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f12:	4b23      	ldr	r3, [pc, #140]	; (8007fa0 <prvAddNewTaskToReadyList+0xc8>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d802      	bhi.n	8007f26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f20:	4a1f      	ldr	r2, [pc, #124]	; (8007fa0 <prvAddNewTaskToReadyList+0xc8>)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f26:	4b20      	ldr	r3, [pc, #128]	; (8007fa8 <prvAddNewTaskToReadyList+0xd0>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	4a1e      	ldr	r2, [pc, #120]	; (8007fa8 <prvAddNewTaskToReadyList+0xd0>)
 8007f2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f30:	4b1d      	ldr	r3, [pc, #116]	; (8007fa8 <prvAddNewTaskToReadyList+0xd0>)
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f3c:	4b1b      	ldr	r3, [pc, #108]	; (8007fac <prvAddNewTaskToReadyList+0xd4>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d903      	bls.n	8007f4c <prvAddNewTaskToReadyList+0x74>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f48:	4a18      	ldr	r2, [pc, #96]	; (8007fac <prvAddNewTaskToReadyList+0xd4>)
 8007f4a:	6013      	str	r3, [r2, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f50:	4613      	mov	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4a15      	ldr	r2, [pc, #84]	; (8007fb0 <prvAddNewTaskToReadyList+0xd8>)
 8007f5a:	441a      	add	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	4619      	mov	r1, r3
 8007f62:	4610      	mov	r0, r2
 8007f64:	f7ff f927 	bl	80071b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f68:	f001 f9b8 	bl	80092dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <prvAddNewTaskToReadyList+0xcc>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00e      	beq.n	8007f92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f74:	4b0a      	ldr	r3, [pc, #40]	; (8007fa0 <prvAddNewTaskToReadyList+0xc8>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d207      	bcs.n	8007f92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f82:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <prvAddNewTaskToReadyList+0xdc>)
 8007f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f92:	bf00      	nop
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20000d30 	.word	0x20000d30
 8007fa0:	2000085c 	.word	0x2000085c
 8007fa4:	20000d3c 	.word	0x20000d3c
 8007fa8:	20000d4c 	.word	0x20000d4c
 8007fac:	20000d38 	.word	0x20000d38
 8007fb0:	20000860 	.word	0x20000860
 8007fb4:	e000ed04 	.word	0xe000ed04

08007fb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d017      	beq.n	8007ffa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fca:	4b13      	ldr	r3, [pc, #76]	; (8008018 <vTaskDelay+0x60>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00a      	beq.n	8007fe8 <vTaskDelay+0x30>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	60bb      	str	r3, [r7, #8]
}
 8007fe4:	bf00      	nop
 8007fe6:	e7fe      	b.n	8007fe6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007fe8:	f000 f880 	bl	80080ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fec:	2100      	movs	r1, #0
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fcee 	bl	80089d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ff4:	f000 f888 	bl	8008108 <xTaskResumeAll>
 8007ff8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d107      	bne.n	8008010 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008000:	4b06      	ldr	r3, [pc, #24]	; (800801c <vTaskDelay+0x64>)
 8008002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008010:	bf00      	nop
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	20000d58 	.word	0x20000d58
 800801c:	e000ed04 	.word	0xe000ed04

08008020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08a      	sub	sp, #40	; 0x28
 8008024:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008026:	2300      	movs	r3, #0
 8008028:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800802a:	2300      	movs	r3, #0
 800802c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800802e:	463a      	mov	r2, r7
 8008030:	1d39      	adds	r1, r7, #4
 8008032:	f107 0308 	add.w	r3, r7, #8
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff f860 	bl	80070fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	9202      	str	r2, [sp, #8]
 8008044:	9301      	str	r3, [sp, #4]
 8008046:	2300      	movs	r3, #0
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	2300      	movs	r3, #0
 800804c:	460a      	mov	r2, r1
 800804e:	4921      	ldr	r1, [pc, #132]	; (80080d4 <vTaskStartScheduler+0xb4>)
 8008050:	4821      	ldr	r0, [pc, #132]	; (80080d8 <vTaskStartScheduler+0xb8>)
 8008052:	f7ff fe19 	bl	8007c88 <xTaskCreateStatic>
 8008056:	4603      	mov	r3, r0
 8008058:	4a20      	ldr	r2, [pc, #128]	; (80080dc <vTaskStartScheduler+0xbc>)
 800805a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800805c:	4b1f      	ldr	r3, [pc, #124]	; (80080dc <vTaskStartScheduler+0xbc>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008064:	2301      	movs	r3, #1
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	e001      	b.n	800806e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800806a:	2300      	movs	r3, #0
 800806c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d102      	bne.n	800807a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008074:	f000 fd00 	bl	8008a78 <xTimerCreateTimerTask>
 8008078:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d116      	bne.n	80080ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	613b      	str	r3, [r7, #16]
}
 8008092:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008094:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <vTaskStartScheduler+0xc0>)
 8008096:	f04f 32ff 	mov.w	r2, #4294967295
 800809a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800809c:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <vTaskStartScheduler+0xc4>)
 800809e:	2201      	movs	r2, #1
 80080a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80080a2:	4b11      	ldr	r3, [pc, #68]	; (80080e8 <vTaskStartScheduler+0xc8>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080a8:	f001 f876 	bl	8009198 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080ac:	e00e      	b.n	80080cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b4:	d10a      	bne.n	80080cc <vTaskStartScheduler+0xac>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	60fb      	str	r3, [r7, #12]
}
 80080c8:	bf00      	nop
 80080ca:	e7fe      	b.n	80080ca <vTaskStartScheduler+0xaa>
}
 80080cc:	bf00      	nop
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	0800a1d0 	.word	0x0800a1d0
 80080d8:	08008705 	.word	0x08008705
 80080dc:	20000d54 	.word	0x20000d54
 80080e0:	20000d50 	.word	0x20000d50
 80080e4:	20000d3c 	.word	0x20000d3c
 80080e8:	20000d34 	.word	0x20000d34

080080ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080ec:	b480      	push	{r7}
 80080ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80080f0:	4b04      	ldr	r3, [pc, #16]	; (8008104 <vTaskSuspendAll+0x18>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3301      	adds	r3, #1
 80080f6:	4a03      	ldr	r2, [pc, #12]	; (8008104 <vTaskSuspendAll+0x18>)
 80080f8:	6013      	str	r3, [r2, #0]
}
 80080fa:	bf00      	nop
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bc80      	pop	{r7}
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	20000d58 	.word	0x20000d58

08008108 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800810e:	2300      	movs	r3, #0
 8008110:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008112:	2300      	movs	r3, #0
 8008114:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008116:	4b42      	ldr	r3, [pc, #264]	; (8008220 <xTaskResumeAll+0x118>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10a      	bne.n	8008134 <xTaskResumeAll+0x2c>
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	603b      	str	r3, [r7, #0]
}
 8008130:	bf00      	nop
 8008132:	e7fe      	b.n	8008132 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008134:	f001 f8a2 	bl	800927c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008138:	4b39      	ldr	r3, [pc, #228]	; (8008220 <xTaskResumeAll+0x118>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3b01      	subs	r3, #1
 800813e:	4a38      	ldr	r2, [pc, #224]	; (8008220 <xTaskResumeAll+0x118>)
 8008140:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008142:	4b37      	ldr	r3, [pc, #220]	; (8008220 <xTaskResumeAll+0x118>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d162      	bne.n	8008210 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800814a:	4b36      	ldr	r3, [pc, #216]	; (8008224 <xTaskResumeAll+0x11c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d05e      	beq.n	8008210 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008152:	e02f      	b.n	80081b4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008154:	4b34      	ldr	r3, [pc, #208]	; (8008228 <xTaskResumeAll+0x120>)
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3318      	adds	r3, #24
 8008160:	4618      	mov	r0, r3
 8008162:	f7ff f883 	bl	800726c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3304      	adds	r3, #4
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff f87e 	bl	800726c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008174:	4b2d      	ldr	r3, [pc, #180]	; (800822c <xTaskResumeAll+0x124>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	429a      	cmp	r2, r3
 800817a:	d903      	bls.n	8008184 <xTaskResumeAll+0x7c>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008180:	4a2a      	ldr	r2, [pc, #168]	; (800822c <xTaskResumeAll+0x124>)
 8008182:	6013      	str	r3, [r2, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4a27      	ldr	r2, [pc, #156]	; (8008230 <xTaskResumeAll+0x128>)
 8008192:	441a      	add	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3304      	adds	r3, #4
 8008198:	4619      	mov	r1, r3
 800819a:	4610      	mov	r0, r2
 800819c:	f7ff f80b 	bl	80071b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a4:	4b23      	ldr	r3, [pc, #140]	; (8008234 <xTaskResumeAll+0x12c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d302      	bcc.n	80081b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80081ae:	4b22      	ldr	r3, [pc, #136]	; (8008238 <xTaskResumeAll+0x130>)
 80081b0:	2201      	movs	r2, #1
 80081b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081b4:	4b1c      	ldr	r3, [pc, #112]	; (8008228 <xTaskResumeAll+0x120>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1cb      	bne.n	8008154 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081c2:	f000 fb55 	bl	8008870 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80081c6:	4b1d      	ldr	r3, [pc, #116]	; (800823c <xTaskResumeAll+0x134>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d010      	beq.n	80081f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081d2:	f000 f845 	bl	8008260 <xTaskIncrementTick>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80081dc:	4b16      	ldr	r3, [pc, #88]	; (8008238 <xTaskResumeAll+0x130>)
 80081de:	2201      	movs	r2, #1
 80081e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f1      	bne.n	80081d2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80081ee:	4b13      	ldr	r3, [pc, #76]	; (800823c <xTaskResumeAll+0x134>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081f4:	4b10      	ldr	r3, [pc, #64]	; (8008238 <xTaskResumeAll+0x130>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d009      	beq.n	8008210 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081fc:	2301      	movs	r3, #1
 80081fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008200:	4b0f      	ldr	r3, [pc, #60]	; (8008240 <xTaskResumeAll+0x138>)
 8008202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008210:	f001 f864 	bl	80092dc <vPortExitCritical>

	return xAlreadyYielded;
 8008214:	68bb      	ldr	r3, [r7, #8]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	20000d58 	.word	0x20000d58
 8008224:	20000d30 	.word	0x20000d30
 8008228:	20000cf0 	.word	0x20000cf0
 800822c:	20000d38 	.word	0x20000d38
 8008230:	20000860 	.word	0x20000860
 8008234:	2000085c 	.word	0x2000085c
 8008238:	20000d44 	.word	0x20000d44
 800823c:	20000d40 	.word	0x20000d40
 8008240:	e000ed04 	.word	0xe000ed04

08008244 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800824a:	4b04      	ldr	r3, [pc, #16]	; (800825c <xTaskGetTickCount+0x18>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008250:	687b      	ldr	r3, [r7, #4]
}
 8008252:	4618      	mov	r0, r3
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	bc80      	pop	{r7}
 800825a:	4770      	bx	lr
 800825c:	20000d34 	.word	0x20000d34

08008260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008266:	2300      	movs	r3, #0
 8008268:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800826a:	4b51      	ldr	r3, [pc, #324]	; (80083b0 <xTaskIncrementTick+0x150>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f040 808e 	bne.w	8008390 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008274:	4b4f      	ldr	r3, [pc, #316]	; (80083b4 <xTaskIncrementTick+0x154>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3301      	adds	r3, #1
 800827a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800827c:	4a4d      	ldr	r2, [pc, #308]	; (80083b4 <xTaskIncrementTick+0x154>)
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d120      	bne.n	80082ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008288:	4b4b      	ldr	r3, [pc, #300]	; (80083b8 <xTaskIncrementTick+0x158>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	603b      	str	r3, [r7, #0]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <xTaskIncrementTick+0x46>
 80082a8:	4b43      	ldr	r3, [pc, #268]	; (80083b8 <xTaskIncrementTick+0x158>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	4b43      	ldr	r3, [pc, #268]	; (80083bc <xTaskIncrementTick+0x15c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a41      	ldr	r2, [pc, #260]	; (80083b8 <xTaskIncrementTick+0x158>)
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	4a41      	ldr	r2, [pc, #260]	; (80083bc <xTaskIncrementTick+0x15c>)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	4b40      	ldr	r3, [pc, #256]	; (80083c0 <xTaskIncrementTick+0x160>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3301      	adds	r3, #1
 80082c2:	4a3f      	ldr	r2, [pc, #252]	; (80083c0 <xTaskIncrementTick+0x160>)
 80082c4:	6013      	str	r3, [r2, #0]
 80082c6:	f000 fad3 	bl	8008870 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082ca:	4b3e      	ldr	r3, [pc, #248]	; (80083c4 <xTaskIncrementTick+0x164>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d34e      	bcc.n	8008372 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082d4:	4b38      	ldr	r3, [pc, #224]	; (80083b8 <xTaskIncrementTick+0x158>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <xTaskIncrementTick+0x82>
 80082de:	2301      	movs	r3, #1
 80082e0:	e000      	b.n	80082e4 <xTaskIncrementTick+0x84>
 80082e2:	2300      	movs	r3, #0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d004      	beq.n	80082f2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082e8:	4b36      	ldr	r3, [pc, #216]	; (80083c4 <xTaskIncrementTick+0x164>)
 80082ea:	f04f 32ff 	mov.w	r2, #4294967295
 80082ee:	601a      	str	r2, [r3, #0]
					break;
 80082f0:	e03f      	b.n	8008372 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80082f2:	4b31      	ldr	r3, [pc, #196]	; (80083b8 <xTaskIncrementTick+0x158>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	429a      	cmp	r2, r3
 8008308:	d203      	bcs.n	8008312 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800830a:	4a2e      	ldr	r2, [pc, #184]	; (80083c4 <xTaskIncrementTick+0x164>)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6013      	str	r3, [r2, #0]
						break;
 8008310:	e02f      	b.n	8008372 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	3304      	adds	r3, #4
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe ffa8 	bl	800726c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008320:	2b00      	cmp	r3, #0
 8008322:	d004      	beq.n	800832e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	3318      	adds	r3, #24
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe ff9f 	bl	800726c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008332:	4b25      	ldr	r3, [pc, #148]	; (80083c8 <xTaskIncrementTick+0x168>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d903      	bls.n	8008342 <xTaskIncrementTick+0xe2>
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833e:	4a22      	ldr	r2, [pc, #136]	; (80083c8 <xTaskIncrementTick+0x168>)
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008346:	4613      	mov	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4a1f      	ldr	r2, [pc, #124]	; (80083cc <xTaskIncrementTick+0x16c>)
 8008350:	441a      	add	r2, r3
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	3304      	adds	r3, #4
 8008356:	4619      	mov	r1, r3
 8008358:	4610      	mov	r0, r2
 800835a:	f7fe ff2c 	bl	80071b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008362:	4b1b      	ldr	r3, [pc, #108]	; (80083d0 <xTaskIncrementTick+0x170>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008368:	429a      	cmp	r2, r3
 800836a:	d3b3      	bcc.n	80082d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800836c:	2301      	movs	r3, #1
 800836e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008370:	e7b0      	b.n	80082d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008372:	4b17      	ldr	r3, [pc, #92]	; (80083d0 <xTaskIncrementTick+0x170>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008378:	4914      	ldr	r1, [pc, #80]	; (80083cc <xTaskIncrementTick+0x16c>)
 800837a:	4613      	mov	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d907      	bls.n	800839a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800838a:	2301      	movs	r3, #1
 800838c:	617b      	str	r3, [r7, #20]
 800838e:	e004      	b.n	800839a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008390:	4b10      	ldr	r3, [pc, #64]	; (80083d4 <xTaskIncrementTick+0x174>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3301      	adds	r3, #1
 8008396:	4a0f      	ldr	r2, [pc, #60]	; (80083d4 <xTaskIncrementTick+0x174>)
 8008398:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800839a:	4b0f      	ldr	r3, [pc, #60]	; (80083d8 <xTaskIncrementTick+0x178>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80083a2:	2301      	movs	r3, #1
 80083a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80083a6:	697b      	ldr	r3, [r7, #20]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3718      	adds	r7, #24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	20000d58 	.word	0x20000d58
 80083b4:	20000d34 	.word	0x20000d34
 80083b8:	20000ce8 	.word	0x20000ce8
 80083bc:	20000cec 	.word	0x20000cec
 80083c0:	20000d48 	.word	0x20000d48
 80083c4:	20000d50 	.word	0x20000d50
 80083c8:	20000d38 	.word	0x20000d38
 80083cc:	20000860 	.word	0x20000860
 80083d0:	2000085c 	.word	0x2000085c
 80083d4:	20000d40 	.word	0x20000d40
 80083d8:	20000d44 	.word	0x20000d44

080083dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083e2:	4b27      	ldr	r3, [pc, #156]	; (8008480 <vTaskSwitchContext+0xa4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083ea:	4b26      	ldr	r3, [pc, #152]	; (8008484 <vTaskSwitchContext+0xa8>)
 80083ec:	2201      	movs	r2, #1
 80083ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083f0:	e041      	b.n	8008476 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80083f2:	4b24      	ldr	r3, [pc, #144]	; (8008484 <vTaskSwitchContext+0xa8>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80083f8:	4b23      	ldr	r3, [pc, #140]	; (8008488 <vTaskSwitchContext+0xac>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	60fb      	str	r3, [r7, #12]
 80083fe:	e010      	b.n	8008422 <vTaskSwitchContext+0x46>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10a      	bne.n	800841c <vTaskSwitchContext+0x40>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	607b      	str	r3, [r7, #4]
}
 8008418:	bf00      	nop
 800841a:	e7fe      	b.n	800841a <vTaskSwitchContext+0x3e>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3b01      	subs	r3, #1
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	491a      	ldr	r1, [pc, #104]	; (800848c <vTaskSwitchContext+0xb0>)
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	4613      	mov	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	440b      	add	r3, r1
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d0e4      	beq.n	8008400 <vTaskSwitchContext+0x24>
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4a12      	ldr	r2, [pc, #72]	; (800848c <vTaskSwitchContext+0xb0>)
 8008442:	4413      	add	r3, r2
 8008444:	60bb      	str	r3, [r7, #8]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	605a      	str	r2, [r3, #4]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	3308      	adds	r3, #8
 8008458:	429a      	cmp	r2, r3
 800845a:	d104      	bne.n	8008466 <vTaskSwitchContext+0x8a>
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	605a      	str	r2, [r3, #4]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	4a08      	ldr	r2, [pc, #32]	; (8008490 <vTaskSwitchContext+0xb4>)
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	4a05      	ldr	r2, [pc, #20]	; (8008488 <vTaskSwitchContext+0xac>)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6013      	str	r3, [r2, #0]
}
 8008476:	bf00      	nop
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	bc80      	pop	{r7}
 800847e:	4770      	bx	lr
 8008480:	20000d58 	.word	0x20000d58
 8008484:	20000d44 	.word	0x20000d44
 8008488:	20000d38 	.word	0x20000d38
 800848c:	20000860 	.word	0x20000860
 8008490:	2000085c 	.word	0x2000085c

08008494 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	60fb      	str	r3, [r7, #12]
}
 80084b6:	bf00      	nop
 80084b8:	e7fe      	b.n	80084b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084ba:	4b07      	ldr	r3, [pc, #28]	; (80084d8 <vTaskPlaceOnEventList+0x44>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	3318      	adds	r3, #24
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7fe fe9a 	bl	80071fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084c8:	2101      	movs	r1, #1
 80084ca:	6838      	ldr	r0, [r7, #0]
 80084cc:	f000 fa80 	bl	80089d0 <prvAddCurrentTaskToDelayedList>
}
 80084d0:	bf00      	nop
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	2000085c 	.word	0x2000085c

080084dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10a      	bne.n	8008504 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	617b      	str	r3, [r7, #20]
}
 8008500:	bf00      	nop
 8008502:	e7fe      	b.n	8008502 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008504:	4b0a      	ldr	r3, [pc, #40]	; (8008530 <vTaskPlaceOnEventListRestricted+0x54>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3318      	adds	r3, #24
 800850a:	4619      	mov	r1, r3
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f7fe fe52 	bl	80071b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008518:	f04f 33ff 	mov.w	r3, #4294967295
 800851c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	68b8      	ldr	r0, [r7, #8]
 8008522:	f000 fa55 	bl	80089d0 <prvAddCurrentTaskToDelayedList>
	}
 8008526:	bf00      	nop
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	2000085c 	.word	0x2000085c

08008534 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10a      	bne.n	8008560 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	60fb      	str	r3, [r7, #12]
}
 800855c:	bf00      	nop
 800855e:	e7fe      	b.n	800855e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	3318      	adds	r3, #24
 8008564:	4618      	mov	r0, r3
 8008566:	f7fe fe81 	bl	800726c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800856a:	4b1e      	ldr	r3, [pc, #120]	; (80085e4 <xTaskRemoveFromEventList+0xb0>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d11d      	bne.n	80085ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	3304      	adds	r3, #4
 8008576:	4618      	mov	r0, r3
 8008578:	f7fe fe78 	bl	800726c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008580:	4b19      	ldr	r3, [pc, #100]	; (80085e8 <xTaskRemoveFromEventList+0xb4>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	429a      	cmp	r2, r3
 8008586:	d903      	bls.n	8008590 <xTaskRemoveFromEventList+0x5c>
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	4a16      	ldr	r2, [pc, #88]	; (80085e8 <xTaskRemoveFromEventList+0xb4>)
 800858e:	6013      	str	r3, [r2, #0]
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008594:	4613      	mov	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4a13      	ldr	r2, [pc, #76]	; (80085ec <xTaskRemoveFromEventList+0xb8>)
 800859e:	441a      	add	r2, r3
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	3304      	adds	r3, #4
 80085a4:	4619      	mov	r1, r3
 80085a6:	4610      	mov	r0, r2
 80085a8:	f7fe fe05 	bl	80071b6 <vListInsertEnd>
 80085ac:	e005      	b.n	80085ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	3318      	adds	r3, #24
 80085b2:	4619      	mov	r1, r3
 80085b4:	480e      	ldr	r0, [pc, #56]	; (80085f0 <xTaskRemoveFromEventList+0xbc>)
 80085b6:	f7fe fdfe 	bl	80071b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085be:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <xTaskRemoveFromEventList+0xc0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d905      	bls.n	80085d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085c8:	2301      	movs	r3, #1
 80085ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085cc:	4b0a      	ldr	r3, [pc, #40]	; (80085f8 <xTaskRemoveFromEventList+0xc4>)
 80085ce:	2201      	movs	r2, #1
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	e001      	b.n	80085d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80085d4:	2300      	movs	r3, #0
 80085d6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80085d8:	697b      	ldr	r3, [r7, #20]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000d58 	.word	0x20000d58
 80085e8:	20000d38 	.word	0x20000d38
 80085ec:	20000860 	.word	0x20000860
 80085f0:	20000cf0 	.word	0x20000cf0
 80085f4:	2000085c 	.word	0x2000085c
 80085f8:	20000d44 	.word	0x20000d44

080085fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008604:	4b06      	ldr	r3, [pc, #24]	; (8008620 <vTaskInternalSetTimeOutState+0x24>)
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800860c:	4b05      	ldr	r3, [pc, #20]	; (8008624 <vTaskInternalSetTimeOutState+0x28>)
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	605a      	str	r2, [r3, #4]
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	bc80      	pop	{r7}
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	20000d48 	.word	0x20000d48
 8008624:	20000d34 	.word	0x20000d34

08008628 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b088      	sub	sp, #32
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10a      	bne.n	800864e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	613b      	str	r3, [r7, #16]
}
 800864a:	bf00      	nop
 800864c:	e7fe      	b.n	800864c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10a      	bne.n	800866a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	60fb      	str	r3, [r7, #12]
}
 8008666:	bf00      	nop
 8008668:	e7fe      	b.n	8008668 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800866a:	f000 fe07 	bl	800927c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800866e:	4b1d      	ldr	r3, [pc, #116]	; (80086e4 <xTaskCheckForTimeOut+0xbc>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008686:	d102      	bne.n	800868e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008688:	2300      	movs	r3, #0
 800868a:	61fb      	str	r3, [r7, #28]
 800868c:	e023      	b.n	80086d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	4b15      	ldr	r3, [pc, #84]	; (80086e8 <xTaskCheckForTimeOut+0xc0>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d007      	beq.n	80086aa <xTaskCheckForTimeOut+0x82>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d302      	bcc.n	80086aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086a4:	2301      	movs	r3, #1
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	e015      	b.n	80086d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d20b      	bcs.n	80086cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	1ad2      	subs	r2, r2, r3
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff ff9b 	bl	80085fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	61fb      	str	r3, [r7, #28]
 80086ca:	e004      	b.n	80086d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2200      	movs	r2, #0
 80086d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086d2:	2301      	movs	r3, #1
 80086d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086d6:	f000 fe01 	bl	80092dc <vPortExitCritical>

	return xReturn;
 80086da:	69fb      	ldr	r3, [r7, #28]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3720      	adds	r7, #32
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	20000d34 	.word	0x20000d34
 80086e8:	20000d48 	.word	0x20000d48

080086ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80086ec:	b480      	push	{r7}
 80086ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80086f0:	4b03      	ldr	r3, [pc, #12]	; (8008700 <vTaskMissedYield+0x14>)
 80086f2:	2201      	movs	r2, #1
 80086f4:	601a      	str	r2, [r3, #0]
}
 80086f6:	bf00      	nop
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bc80      	pop	{r7}
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	20000d44 	.word	0x20000d44

08008704 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800870c:	f000 f852 	bl	80087b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008710:	4b06      	ldr	r3, [pc, #24]	; (800872c <prvIdleTask+0x28>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d9f9      	bls.n	800870c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008718:	4b05      	ldr	r3, [pc, #20]	; (8008730 <prvIdleTask+0x2c>)
 800871a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800871e:	601a      	str	r2, [r3, #0]
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008728:	e7f0      	b.n	800870c <prvIdleTask+0x8>
 800872a:	bf00      	nop
 800872c:	20000860 	.word	0x20000860
 8008730:	e000ed04 	.word	0xe000ed04

08008734 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800873a:	2300      	movs	r3, #0
 800873c:	607b      	str	r3, [r7, #4]
 800873e:	e00c      	b.n	800875a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4a12      	ldr	r2, [pc, #72]	; (8008794 <prvInitialiseTaskLists+0x60>)
 800874c:	4413      	add	r3, r2
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fd06 	bl	8007160 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	3301      	adds	r3, #1
 8008758:	607b      	str	r3, [r7, #4]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b37      	cmp	r3, #55	; 0x37
 800875e:	d9ef      	bls.n	8008740 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008760:	480d      	ldr	r0, [pc, #52]	; (8008798 <prvInitialiseTaskLists+0x64>)
 8008762:	f7fe fcfd 	bl	8007160 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008766:	480d      	ldr	r0, [pc, #52]	; (800879c <prvInitialiseTaskLists+0x68>)
 8008768:	f7fe fcfa 	bl	8007160 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800876c:	480c      	ldr	r0, [pc, #48]	; (80087a0 <prvInitialiseTaskLists+0x6c>)
 800876e:	f7fe fcf7 	bl	8007160 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008772:	480c      	ldr	r0, [pc, #48]	; (80087a4 <prvInitialiseTaskLists+0x70>)
 8008774:	f7fe fcf4 	bl	8007160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008778:	480b      	ldr	r0, [pc, #44]	; (80087a8 <prvInitialiseTaskLists+0x74>)
 800877a:	f7fe fcf1 	bl	8007160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800877e:	4b0b      	ldr	r3, [pc, #44]	; (80087ac <prvInitialiseTaskLists+0x78>)
 8008780:	4a05      	ldr	r2, [pc, #20]	; (8008798 <prvInitialiseTaskLists+0x64>)
 8008782:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008784:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <prvInitialiseTaskLists+0x7c>)
 8008786:	4a05      	ldr	r2, [pc, #20]	; (800879c <prvInitialiseTaskLists+0x68>)
 8008788:	601a      	str	r2, [r3, #0]
}
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20000860 	.word	0x20000860
 8008798:	20000cc0 	.word	0x20000cc0
 800879c:	20000cd4 	.word	0x20000cd4
 80087a0:	20000cf0 	.word	0x20000cf0
 80087a4:	20000d04 	.word	0x20000d04
 80087a8:	20000d1c 	.word	0x20000d1c
 80087ac:	20000ce8 	.word	0x20000ce8
 80087b0:	20000cec 	.word	0x20000cec

080087b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087ba:	e019      	b.n	80087f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087bc:	f000 fd5e 	bl	800927c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80087c0:	4b10      	ldr	r3, [pc, #64]	; (8008804 <prvCheckTasksWaitingTermination+0x50>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3304      	adds	r3, #4
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fe fd4d 	bl	800726c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087d2:	4b0d      	ldr	r3, [pc, #52]	; (8008808 <prvCheckTasksWaitingTermination+0x54>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	4a0b      	ldr	r2, [pc, #44]	; (8008808 <prvCheckTasksWaitingTermination+0x54>)
 80087da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087dc:	4b0b      	ldr	r3, [pc, #44]	; (800880c <prvCheckTasksWaitingTermination+0x58>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3b01      	subs	r3, #1
 80087e2:	4a0a      	ldr	r2, [pc, #40]	; (800880c <prvCheckTasksWaitingTermination+0x58>)
 80087e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087e6:	f000 fd79 	bl	80092dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f810 	bl	8008810 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087f0:	4b06      	ldr	r3, [pc, #24]	; (800880c <prvCheckTasksWaitingTermination+0x58>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1e1      	bne.n	80087bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000d04 	.word	0x20000d04
 8008808:	20000d30 	.word	0x20000d30
 800880c:	20000d18 	.word	0x20000d18

08008810 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800881e:	2b00      	cmp	r3, #0
 8008820:	d108      	bne.n	8008834 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008826:	4618      	mov	r0, r3
 8008828:	f000 feec 	bl	8009604 <vPortFree>
				vPortFree( pxTCB );
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fee9 	bl	8009604 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008832:	e018      	b.n	8008866 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800883a:	2b01      	cmp	r3, #1
 800883c:	d103      	bne.n	8008846 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fee0 	bl	8009604 <vPortFree>
	}
 8008844:	e00f      	b.n	8008866 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800884c:	2b02      	cmp	r3, #2
 800884e:	d00a      	beq.n	8008866 <prvDeleteTCB+0x56>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	60fb      	str	r3, [r7, #12]
}
 8008862:	bf00      	nop
 8008864:	e7fe      	b.n	8008864 <prvDeleteTCB+0x54>
	}
 8008866:	bf00      	nop
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008876:	4b0e      	ldr	r3, [pc, #56]	; (80088b0 <prvResetNextTaskUnblockTime+0x40>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <prvResetNextTaskUnblockTime+0x14>
 8008880:	2301      	movs	r3, #1
 8008882:	e000      	b.n	8008886 <prvResetNextTaskUnblockTime+0x16>
 8008884:	2300      	movs	r3, #0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d004      	beq.n	8008894 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800888a:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <prvResetNextTaskUnblockTime+0x44>)
 800888c:	f04f 32ff 	mov.w	r2, #4294967295
 8008890:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008892:	e008      	b.n	80088a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008894:	4b06      	ldr	r3, [pc, #24]	; (80088b0 <prvResetNextTaskUnblockTime+0x40>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	4a04      	ldr	r2, [pc, #16]	; (80088b4 <prvResetNextTaskUnblockTime+0x44>)
 80088a4:	6013      	str	r3, [r2, #0]
}
 80088a6:	bf00      	nop
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bc80      	pop	{r7}
 80088ae:	4770      	bx	lr
 80088b0:	20000ce8 	.word	0x20000ce8
 80088b4:	20000d50 	.word	0x20000d50

080088b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088be:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <xTaskGetSchedulerState+0x34>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d102      	bne.n	80088cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088c6:	2301      	movs	r3, #1
 80088c8:	607b      	str	r3, [r7, #4]
 80088ca:	e008      	b.n	80088de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088cc:	4b08      	ldr	r3, [pc, #32]	; (80088f0 <xTaskGetSchedulerState+0x38>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80088d4:	2302      	movs	r3, #2
 80088d6:	607b      	str	r3, [r7, #4]
 80088d8:	e001      	b.n	80088de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80088da:	2300      	movs	r3, #0
 80088dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80088de:	687b      	ldr	r3, [r7, #4]
	}
 80088e0:	4618      	mov	r0, r3
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bc80      	pop	{r7}
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	20000d3c 	.word	0x20000d3c
 80088f0:	20000d58 	.word	0x20000d58

080088f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008900:	2300      	movs	r3, #0
 8008902:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d056      	beq.n	80089b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800890a:	4b2e      	ldr	r3, [pc, #184]	; (80089c4 <xTaskPriorityDisinherit+0xd0>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	429a      	cmp	r2, r3
 8008912:	d00a      	beq.n	800892a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	60fb      	str	r3, [r7, #12]
}
 8008926:	bf00      	nop
 8008928:	e7fe      	b.n	8008928 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	60bb      	str	r3, [r7, #8]
}
 8008944:	bf00      	nop
 8008946:	e7fe      	b.n	8008946 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800894c:	1e5a      	subs	r2, r3, #1
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800895a:	429a      	cmp	r2, r3
 800895c:	d02c      	beq.n	80089b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008962:	2b00      	cmp	r3, #0
 8008964:	d128      	bne.n	80089b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	3304      	adds	r3, #4
 800896a:	4618      	mov	r0, r3
 800896c:	f7fe fc7e 	bl	800726c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008988:	4b0f      	ldr	r3, [pc, #60]	; (80089c8 <xTaskPriorityDisinherit+0xd4>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	429a      	cmp	r2, r3
 800898e:	d903      	bls.n	8008998 <xTaskPriorityDisinherit+0xa4>
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008994:	4a0c      	ldr	r2, [pc, #48]	; (80089c8 <xTaskPriorityDisinherit+0xd4>)
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4a09      	ldr	r2, [pc, #36]	; (80089cc <xTaskPriorityDisinherit+0xd8>)
 80089a6:	441a      	add	r2, r3
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	3304      	adds	r3, #4
 80089ac:	4619      	mov	r1, r3
 80089ae:	4610      	mov	r0, r2
 80089b0:	f7fe fc01 	bl	80071b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089b4:	2301      	movs	r3, #1
 80089b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089b8:	697b      	ldr	r3, [r7, #20]
	}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	2000085c 	.word	0x2000085c
 80089c8:	20000d38 	.word	0x20000d38
 80089cc:	20000860 	.word	0x20000860

080089d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80089da:	4b21      	ldr	r3, [pc, #132]	; (8008a60 <prvAddCurrentTaskToDelayedList+0x90>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089e0:	4b20      	ldr	r3, [pc, #128]	; (8008a64 <prvAddCurrentTaskToDelayedList+0x94>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3304      	adds	r3, #4
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe fc40 	bl	800726c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f2:	d10a      	bne.n	8008a0a <prvAddCurrentTaskToDelayedList+0x3a>
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d007      	beq.n	8008a0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089fa:	4b1a      	ldr	r3, [pc, #104]	; (8008a64 <prvAddCurrentTaskToDelayedList+0x94>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	3304      	adds	r3, #4
 8008a00:	4619      	mov	r1, r3
 8008a02:	4819      	ldr	r0, [pc, #100]	; (8008a68 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a04:	f7fe fbd7 	bl	80071b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a08:	e026      	b.n	8008a58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4413      	add	r3, r2
 8008a10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a12:	4b14      	ldr	r3, [pc, #80]	; (8008a64 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d209      	bcs.n	8008a36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a22:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f7fe fbe4 	bl	80071fc <vListInsert>
}
 8008a34:	e010      	b.n	8008a58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a36:	4b0e      	ldr	r3, [pc, #56]	; (8008a70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	4b0a      	ldr	r3, [pc, #40]	; (8008a64 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3304      	adds	r3, #4
 8008a40:	4619      	mov	r1, r3
 8008a42:	4610      	mov	r0, r2
 8008a44:	f7fe fbda 	bl	80071fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a48:	4b0a      	ldr	r3, [pc, #40]	; (8008a74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d202      	bcs.n	8008a58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008a52:	4a08      	ldr	r2, [pc, #32]	; (8008a74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	6013      	str	r3, [r2, #0]
}
 8008a58:	bf00      	nop
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	20000d34 	.word	0x20000d34
 8008a64:	2000085c 	.word	0x2000085c
 8008a68:	20000d1c 	.word	0x20000d1c
 8008a6c:	20000cec 	.word	0x20000cec
 8008a70:	20000ce8 	.word	0x20000ce8
 8008a74:	20000d50 	.word	0x20000d50

08008a78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b08a      	sub	sp, #40	; 0x28
 8008a7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a82:	f000 facb 	bl	800901c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a86:	4b1c      	ldr	r3, [pc, #112]	; (8008af8 <xTimerCreateTimerTask+0x80>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d021      	beq.n	8008ad2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a96:	1d3a      	adds	r2, r7, #4
 8008a98:	f107 0108 	add.w	r1, r7, #8
 8008a9c:	f107 030c 	add.w	r3, r7, #12
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fe fb43 	bl	800712c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008aa6:	6879      	ldr	r1, [r7, #4]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	9202      	str	r2, [sp, #8]
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	460a      	mov	r2, r1
 8008ab8:	4910      	ldr	r1, [pc, #64]	; (8008afc <xTimerCreateTimerTask+0x84>)
 8008aba:	4811      	ldr	r0, [pc, #68]	; (8008b00 <xTimerCreateTimerTask+0x88>)
 8008abc:	f7ff f8e4 	bl	8007c88 <xTaskCreateStatic>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	4a10      	ldr	r2, [pc, #64]	; (8008b04 <xTimerCreateTimerTask+0x8c>)
 8008ac4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008ac6:	4b0f      	ldr	r3, [pc, #60]	; (8008b04 <xTimerCreateTimerTask+0x8c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10a      	bne.n	8008aee <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	613b      	str	r3, [r7, #16]
}
 8008aea:	bf00      	nop
 8008aec:	e7fe      	b.n	8008aec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008aee:	697b      	ldr	r3, [r7, #20]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20000d8c 	.word	0x20000d8c
 8008afc:	0800a1d8 	.word	0x0800a1d8
 8008b00:	08008c25 	.word	0x08008c25
 8008b04:	20000d90 	.word	0x20000d90

08008b08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08a      	sub	sp, #40	; 0x28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b16:	2300      	movs	r3, #0
 8008b18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10a      	bne.n	8008b36 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b24:	f383 8811 	msr	BASEPRI, r3
 8008b28:	f3bf 8f6f 	isb	sy
 8008b2c:	f3bf 8f4f 	dsb	sy
 8008b30:	623b      	str	r3, [r7, #32]
}
 8008b32:	bf00      	nop
 8008b34:	e7fe      	b.n	8008b34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008b36:	4b1a      	ldr	r3, [pc, #104]	; (8008ba0 <xTimerGenericCommand+0x98>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d02a      	beq.n	8008b94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2b05      	cmp	r3, #5
 8008b4e:	dc18      	bgt.n	8008b82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b50:	f7ff feb2 	bl	80088b8 <xTaskGetSchedulerState>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d109      	bne.n	8008b6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b5a:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <xTimerGenericCommand+0x98>)
 8008b5c:	6818      	ldr	r0, [r3, #0]
 8008b5e:	f107 0110 	add.w	r1, r7, #16
 8008b62:	2300      	movs	r3, #0
 8008b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b66:	f7fe fcad 	bl	80074c4 <xQueueGenericSend>
 8008b6a:	6278      	str	r0, [r7, #36]	; 0x24
 8008b6c:	e012      	b.n	8008b94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ba0 <xTimerGenericCommand+0x98>)
 8008b70:	6818      	ldr	r0, [r3, #0]
 8008b72:	f107 0110 	add.w	r1, r7, #16
 8008b76:	2300      	movs	r3, #0
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f7fe fca3 	bl	80074c4 <xQueueGenericSend>
 8008b7e:	6278      	str	r0, [r7, #36]	; 0x24
 8008b80:	e008      	b.n	8008b94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b82:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <xTimerGenericCommand+0x98>)
 8008b84:	6818      	ldr	r0, [r3, #0]
 8008b86:	f107 0110 	add.w	r1, r7, #16
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	f7fe fd97 	bl	80076c0 <xQueueGenericSendFromISR>
 8008b92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3728      	adds	r7, #40	; 0x28
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20000d8c 	.word	0x20000d8c

08008ba4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b088      	sub	sp, #32
 8008ba8:	af02      	add	r7, sp, #8
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bae:	4b1c      	ldr	r3, [pc, #112]	; (8008c20 <prvProcessExpiredTimer+0x7c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	3304      	adds	r3, #4
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fe fb55 	bl	800726c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	69db      	ldr	r3, [r3, #28]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d122      	bne.n	8008c10 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	699a      	ldr	r2, [r3, #24]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	18d1      	adds	r1, r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	6978      	ldr	r0, [r7, #20]
 8008bd8:	f000 f8c8 	bl	8008d6c <prvInsertTimerInActiveList>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d016      	beq.n	8008c10 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008be2:	2300      	movs	r3, #0
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	2300      	movs	r3, #0
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	2100      	movs	r1, #0
 8008bec:	6978      	ldr	r0, [r7, #20]
 8008bee:	f7ff ff8b 	bl	8008b08 <xTimerGenericCommand>
 8008bf2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10a      	bne.n	8008c10 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	60fb      	str	r3, [r7, #12]
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	6978      	ldr	r0, [r7, #20]
 8008c16:	4798      	blx	r3
}
 8008c18:	bf00      	nop
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	20000d84 	.word	0x20000d84

08008c24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c2c:	f107 0308 	add.w	r3, r7, #8
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 f857 	bl	8008ce4 <prvGetNextExpireTime>
 8008c36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 f803 	bl	8008c48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008c42:	f000 f8d5 	bl	8008df0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c46:	e7f1      	b.n	8008c2c <prvTimerTask+0x8>

08008c48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008c52:	f7ff fa4b 	bl	80080ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c56:	f107 0308 	add.w	r3, r7, #8
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 f866 	bl	8008d2c <prvSampleTimeNow>
 8008c60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d130      	bne.n	8008cca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10a      	bne.n	8008c84 <prvProcessTimerOrBlockTask+0x3c>
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d806      	bhi.n	8008c84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008c76:	f7ff fa47 	bl	8008108 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008c7a:	68f9      	ldr	r1, [r7, #12]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7ff ff91 	bl	8008ba4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008c82:	e024      	b.n	8008cce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d008      	beq.n	8008c9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c8a:	4b13      	ldr	r3, [pc, #76]	; (8008cd8 <prvProcessTimerOrBlockTask+0x90>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	bf0c      	ite	eq
 8008c94:	2301      	moveq	r3, #1
 8008c96:	2300      	movne	r3, #0
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c9c:	4b0f      	ldr	r3, [pc, #60]	; (8008cdc <prvProcessTimerOrBlockTask+0x94>)
 8008c9e:	6818      	ldr	r0, [r3, #0]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	f7fe ffb9 	bl	8007c20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008cae:	f7ff fa2b 	bl	8008108 <xTaskResumeAll>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10a      	bne.n	8008cce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008cb8:	4b09      	ldr	r3, [pc, #36]	; (8008ce0 <prvProcessTimerOrBlockTask+0x98>)
 8008cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	f3bf 8f6f 	isb	sy
}
 8008cc8:	e001      	b.n	8008cce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008cca:	f7ff fa1d 	bl	8008108 <xTaskResumeAll>
}
 8008cce:	bf00      	nop
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20000d88 	.word	0x20000d88
 8008cdc:	20000d8c 	.word	0x20000d8c
 8008ce0:	e000ed04 	.word	0xe000ed04

08008ce4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008cec:	4b0e      	ldr	r3, [pc, #56]	; (8008d28 <prvGetNextExpireTime+0x44>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bf0c      	ite	eq
 8008cf6:	2301      	moveq	r3, #1
 8008cf8:	2300      	movne	r3, #0
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d105      	bne.n	8008d16 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d0a:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <prvGetNextExpireTime+0x44>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	e001      	b.n	8008d1a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bc80      	pop	{r7}
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	20000d84 	.word	0x20000d84

08008d2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008d34:	f7ff fa86 	bl	8008244 <xTaskGetTickCount>
 8008d38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008d3a:	4b0b      	ldr	r3, [pc, #44]	; (8008d68 <prvSampleTimeNow+0x3c>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d205      	bcs.n	8008d50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008d44:	f000 f908 	bl	8008f58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	e002      	b.n	8008d56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008d56:	4a04      	ldr	r2, [pc, #16]	; (8008d68 <prvSampleTimeNow+0x3c>)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20000d94 	.word	0x20000d94

08008d6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
 8008d78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d812      	bhi.n	8008db8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	1ad2      	subs	r2, r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d302      	bcc.n	8008da6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008da0:	2301      	movs	r3, #1
 8008da2:	617b      	str	r3, [r7, #20]
 8008da4:	e01b      	b.n	8008dde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008da6:	4b10      	ldr	r3, [pc, #64]	; (8008de8 <prvInsertTimerInActiveList+0x7c>)
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	3304      	adds	r3, #4
 8008dae:	4619      	mov	r1, r3
 8008db0:	4610      	mov	r0, r2
 8008db2:	f7fe fa23 	bl	80071fc <vListInsert>
 8008db6:	e012      	b.n	8008dde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d206      	bcs.n	8008dce <prvInsertTimerInActiveList+0x62>
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d302      	bcc.n	8008dce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	617b      	str	r3, [r7, #20]
 8008dcc:	e007      	b.n	8008dde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008dce:	4b07      	ldr	r3, [pc, #28]	; (8008dec <prvInsertTimerInActiveList+0x80>)
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	4610      	mov	r0, r2
 8008dda:	f7fe fa0f 	bl	80071fc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008dde:	697b      	ldr	r3, [r7, #20]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20000d88 	.word	0x20000d88
 8008dec:	20000d84 	.word	0x20000d84

08008df0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08e      	sub	sp, #56	; 0x38
 8008df4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008df6:	e09d      	b.n	8008f34 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	da18      	bge.n	8008e30 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008dfe:	1d3b      	adds	r3, r7, #4
 8008e00:	3304      	adds	r3, #4
 8008e02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10a      	bne.n	8008e20 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	f383 8811 	msr	BASEPRI, r3
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	61fb      	str	r3, [r7, #28]
}
 8008e1c:	bf00      	nop
 8008e1e:	e7fe      	b.n	8008e1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e26:	6850      	ldr	r0, [r2, #4]
 8008e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e2a:	6892      	ldr	r2, [r2, #8]
 8008e2c:	4611      	mov	r1, r2
 8008e2e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	db7d      	blt.n	8008f32 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d004      	beq.n	8008e4c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e44:	3304      	adds	r3, #4
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fe fa10 	bl	800726c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e4c:	463b      	mov	r3, r7
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7ff ff6c 	bl	8008d2c <prvSampleTimeNow>
 8008e54:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2b09      	cmp	r3, #9
 8008e5a:	d86b      	bhi.n	8008f34 <prvProcessReceivedCommands+0x144>
 8008e5c:	a201      	add	r2, pc, #4	; (adr r2, 8008e64 <prvProcessReceivedCommands+0x74>)
 8008e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e62:	bf00      	nop
 8008e64:	08008e8d 	.word	0x08008e8d
 8008e68:	08008e8d 	.word	0x08008e8d
 8008e6c:	08008e8d 	.word	0x08008e8d
 8008e70:	08008f35 	.word	0x08008f35
 8008e74:	08008ee9 	.word	0x08008ee9
 8008e78:	08008f21 	.word	0x08008f21
 8008e7c:	08008e8d 	.word	0x08008e8d
 8008e80:	08008e8d 	.word	0x08008e8d
 8008e84:	08008f35 	.word	0x08008f35
 8008e88:	08008ee9 	.word	0x08008ee9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	18d1      	adds	r1, r2, r3
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e9a:	f7ff ff67 	bl	8008d6c <prvInsertTimerInActiveList>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d047      	beq.n	8008f34 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eaa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d13f      	bne.n	8008f34 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	441a      	add	r2, r3
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ec6:	f7ff fe1f 	bl	8008b08 <xTimerGenericCommand>
 8008eca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d130      	bne.n	8008f34 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	61bb      	str	r3, [r7, #24]
}
 8008ee4:	bf00      	nop
 8008ee6:	e7fe      	b.n	8008ee6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10a      	bne.n	8008f0c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	617b      	str	r3, [r7, #20]
}
 8008f08:	bf00      	nop
 8008f0a:	e7fe      	b.n	8008f0a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0e:	699a      	ldr	r2, [r3, #24]
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	18d1      	adds	r1, r2, r3
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f1a:	f7ff ff27 	bl	8008d6c <prvInsertTimerInActiveList>
					break;
 8008f1e:	e009      	b.n	8008f34 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d104      	bne.n	8008f34 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f2c:	f000 fb6a 	bl	8009604 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008f30:	e000      	b.n	8008f34 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008f32:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f34:	4b07      	ldr	r3, [pc, #28]	; (8008f54 <prvProcessReceivedCommands+0x164>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	1d39      	adds	r1, r7, #4
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fe fc57 	bl	80077f0 <xQueueReceive>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f47f af57 	bne.w	8008df8 <prvProcessReceivedCommands+0x8>
	}
}
 8008f4a:	bf00      	nop
 8008f4c:	bf00      	nop
 8008f4e:	3730      	adds	r7, #48	; 0x30
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	20000d8c 	.word	0x20000d8c

08008f58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f5e:	e045      	b.n	8008fec <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f60:	4b2c      	ldr	r3, [pc, #176]	; (8009014 <prvSwitchTimerLists+0xbc>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f6a:	4b2a      	ldr	r3, [pc, #168]	; (8009014 <prvSwitchTimerLists+0xbc>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	3304      	adds	r3, #4
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7fe f977 	bl	800726c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d12e      	bne.n	8008fec <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	4413      	add	r3, r2
 8008f96:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d90e      	bls.n	8008fbe <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fac:	4b19      	ldr	r3, [pc, #100]	; (8009014 <prvSwitchTimerLists+0xbc>)
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	f7fe f920 	bl	80071fc <vListInsert>
 8008fbc:	e016      	b.n	8008fec <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f7ff fd9d 	bl	8008b08 <xTimerGenericCommand>
 8008fce:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10a      	bne.n	8008fec <prvSwitchTimerLists+0x94>
	__asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	603b      	str	r3, [r7, #0]
}
 8008fe8:	bf00      	nop
 8008fea:	e7fe      	b.n	8008fea <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fec:	4b09      	ldr	r3, [pc, #36]	; (8009014 <prvSwitchTimerLists+0xbc>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1b4      	bne.n	8008f60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ff6:	4b07      	ldr	r3, [pc, #28]	; (8009014 <prvSwitchTimerLists+0xbc>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ffc:	4b06      	ldr	r3, [pc, #24]	; (8009018 <prvSwitchTimerLists+0xc0>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a04      	ldr	r2, [pc, #16]	; (8009014 <prvSwitchTimerLists+0xbc>)
 8009002:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009004:	4a04      	ldr	r2, [pc, #16]	; (8009018 <prvSwitchTimerLists+0xc0>)
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	6013      	str	r3, [r2, #0]
}
 800900a:	bf00      	nop
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20000d84 	.word	0x20000d84
 8009018:	20000d88 	.word	0x20000d88

0800901c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009022:	f000 f92b 	bl	800927c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009026:	4b15      	ldr	r3, [pc, #84]	; (800907c <prvCheckForValidListAndQueue+0x60>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d120      	bne.n	8009070 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800902e:	4814      	ldr	r0, [pc, #80]	; (8009080 <prvCheckForValidListAndQueue+0x64>)
 8009030:	f7fe f896 	bl	8007160 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009034:	4813      	ldr	r0, [pc, #76]	; (8009084 <prvCheckForValidListAndQueue+0x68>)
 8009036:	f7fe f893 	bl	8007160 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800903a:	4b13      	ldr	r3, [pc, #76]	; (8009088 <prvCheckForValidListAndQueue+0x6c>)
 800903c:	4a10      	ldr	r2, [pc, #64]	; (8009080 <prvCheckForValidListAndQueue+0x64>)
 800903e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009040:	4b12      	ldr	r3, [pc, #72]	; (800908c <prvCheckForValidListAndQueue+0x70>)
 8009042:	4a10      	ldr	r2, [pc, #64]	; (8009084 <prvCheckForValidListAndQueue+0x68>)
 8009044:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009046:	2300      	movs	r3, #0
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	4b11      	ldr	r3, [pc, #68]	; (8009090 <prvCheckForValidListAndQueue+0x74>)
 800904c:	4a11      	ldr	r2, [pc, #68]	; (8009094 <prvCheckForValidListAndQueue+0x78>)
 800904e:	2110      	movs	r1, #16
 8009050:	200a      	movs	r0, #10
 8009052:	f7fe f99d 	bl	8007390 <xQueueGenericCreateStatic>
 8009056:	4603      	mov	r3, r0
 8009058:	4a08      	ldr	r2, [pc, #32]	; (800907c <prvCheckForValidListAndQueue+0x60>)
 800905a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800905c:	4b07      	ldr	r3, [pc, #28]	; (800907c <prvCheckForValidListAndQueue+0x60>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d005      	beq.n	8009070 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009064:	4b05      	ldr	r3, [pc, #20]	; (800907c <prvCheckForValidListAndQueue+0x60>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	490b      	ldr	r1, [pc, #44]	; (8009098 <prvCheckForValidListAndQueue+0x7c>)
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe fdb0 	bl	8007bd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009070:	f000 f934 	bl	80092dc <vPortExitCritical>
}
 8009074:	bf00      	nop
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	20000d8c 	.word	0x20000d8c
 8009080:	20000d5c 	.word	0x20000d5c
 8009084:	20000d70 	.word	0x20000d70
 8009088:	20000d84 	.word	0x20000d84
 800908c:	20000d88 	.word	0x20000d88
 8009090:	20000e38 	.word	0x20000e38
 8009094:	20000d98 	.word	0x20000d98
 8009098:	0800a1e0 	.word	0x0800a1e0

0800909c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	3b04      	subs	r3, #4
 80090ac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80090b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	3b04      	subs	r3, #4
 80090ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f023 0201 	bic.w	r2, r3, #1
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3b04      	subs	r3, #4
 80090ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090cc:	4a08      	ldr	r2, [pc, #32]	; (80090f0 <pxPortInitialiseStack+0x54>)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3b14      	subs	r3, #20
 80090d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3b20      	subs	r3, #32
 80090e2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090e4:	68fb      	ldr	r3, [r7, #12]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bc80      	pop	{r7}
 80090ee:	4770      	bx	lr
 80090f0:	080090f5 	.word	0x080090f5

080090f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090fe:	4b12      	ldr	r3, [pc, #72]	; (8009148 <prvTaskExitError+0x54>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009106:	d00a      	beq.n	800911e <prvTaskExitError+0x2a>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	60fb      	str	r3, [r7, #12]
}
 800911a:	bf00      	nop
 800911c:	e7fe      	b.n	800911c <prvTaskExitError+0x28>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	60bb      	str	r3, [r7, #8]
}
 8009130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009132:	bf00      	nop
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0fc      	beq.n	8009134 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800913a:	bf00      	nop
 800913c:	bf00      	nop
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	bc80      	pop	{r7}
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	2000011c 	.word	0x2000011c
 800914c:	00000000 	.word	0x00000000

08009150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009150:	4b07      	ldr	r3, [pc, #28]	; (8009170 <pxCurrentTCBConst2>)
 8009152:	6819      	ldr	r1, [r3, #0]
 8009154:	6808      	ldr	r0, [r1, #0]
 8009156:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800915a:	f380 8809 	msr	PSP, r0
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	f04f 0000 	mov.w	r0, #0
 8009166:	f380 8811 	msr	BASEPRI, r0
 800916a:	f04e 0e0d 	orr.w	lr, lr, #13
 800916e:	4770      	bx	lr

08009170 <pxCurrentTCBConst2>:
 8009170:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop

08009178 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009178:	4806      	ldr	r0, [pc, #24]	; (8009194 <prvPortStartFirstTask+0x1c>)
 800917a:	6800      	ldr	r0, [r0, #0]
 800917c:	6800      	ldr	r0, [r0, #0]
 800917e:	f380 8808 	msr	MSP, r0
 8009182:	b662      	cpsie	i
 8009184:	b661      	cpsie	f
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	df00      	svc	0
 8009190:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009192:	bf00      	nop
 8009194:	e000ed08 	.word	0xe000ed08

08009198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800919e:	4b32      	ldr	r3, [pc, #200]	; (8009268 <xPortStartScheduler+0xd0>)
 80091a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	22ff      	movs	r2, #255	; 0xff
 80091ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091b8:	78fb      	ldrb	r3, [r7, #3]
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	4b2a      	ldr	r3, [pc, #168]	; (800926c <xPortStartScheduler+0xd4>)
 80091c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091c6:	4b2a      	ldr	r3, [pc, #168]	; (8009270 <xPortStartScheduler+0xd8>)
 80091c8:	2207      	movs	r2, #7
 80091ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091cc:	e009      	b.n	80091e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80091ce:	4b28      	ldr	r3, [pc, #160]	; (8009270 <xPortStartScheduler+0xd8>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	4a26      	ldr	r2, [pc, #152]	; (8009270 <xPortStartScheduler+0xd8>)
 80091d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091d8:	78fb      	ldrb	r3, [r7, #3]
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091e2:	78fb      	ldrb	r3, [r7, #3]
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ea:	2b80      	cmp	r3, #128	; 0x80
 80091ec:	d0ef      	beq.n	80091ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091ee:	4b20      	ldr	r3, [pc, #128]	; (8009270 <xPortStartScheduler+0xd8>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f1c3 0307 	rsb	r3, r3, #7
 80091f6:	2b04      	cmp	r3, #4
 80091f8:	d00a      	beq.n	8009210 <xPortStartScheduler+0x78>
	__asm volatile
 80091fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	60bb      	str	r3, [r7, #8]
}
 800920c:	bf00      	nop
 800920e:	e7fe      	b.n	800920e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009210:	4b17      	ldr	r3, [pc, #92]	; (8009270 <xPortStartScheduler+0xd8>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	021b      	lsls	r3, r3, #8
 8009216:	4a16      	ldr	r2, [pc, #88]	; (8009270 <xPortStartScheduler+0xd8>)
 8009218:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800921a:	4b15      	ldr	r3, [pc, #84]	; (8009270 <xPortStartScheduler+0xd8>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009222:	4a13      	ldr	r2, [pc, #76]	; (8009270 <xPortStartScheduler+0xd8>)
 8009224:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	b2da      	uxtb	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800922e:	4b11      	ldr	r3, [pc, #68]	; (8009274 <xPortStartScheduler+0xdc>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a10      	ldr	r2, [pc, #64]	; (8009274 <xPortStartScheduler+0xdc>)
 8009234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009238:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800923a:	4b0e      	ldr	r3, [pc, #56]	; (8009274 <xPortStartScheduler+0xdc>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a0d      	ldr	r2, [pc, #52]	; (8009274 <xPortStartScheduler+0xdc>)
 8009240:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009244:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009246:	f000 f8b9 	bl	80093bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800924a:	4b0b      	ldr	r3, [pc, #44]	; (8009278 <xPortStartScheduler+0xe0>)
 800924c:	2200      	movs	r2, #0
 800924e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009250:	f7ff ff92 	bl	8009178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009254:	f7ff f8c2 	bl	80083dc <vTaskSwitchContext>
	prvTaskExitError();
 8009258:	f7ff ff4c 	bl	80090f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	e000e400 	.word	0xe000e400
 800926c:	20000e88 	.word	0x20000e88
 8009270:	20000e8c 	.word	0x20000e8c
 8009274:	e000ed20 	.word	0xe000ed20
 8009278:	2000011c 	.word	0x2000011c

0800927c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	607b      	str	r3, [r7, #4]
}
 8009294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009296:	4b0f      	ldr	r3, [pc, #60]	; (80092d4 <vPortEnterCritical+0x58>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3301      	adds	r3, #1
 800929c:	4a0d      	ldr	r2, [pc, #52]	; (80092d4 <vPortEnterCritical+0x58>)
 800929e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092a0:	4b0c      	ldr	r3, [pc, #48]	; (80092d4 <vPortEnterCritical+0x58>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d10f      	bne.n	80092c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092a8:	4b0b      	ldr	r3, [pc, #44]	; (80092d8 <vPortEnterCritical+0x5c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00a      	beq.n	80092c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	603b      	str	r3, [r7, #0]
}
 80092c4:	bf00      	nop
 80092c6:	e7fe      	b.n	80092c6 <vPortEnterCritical+0x4a>
	}
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bc80      	pop	{r7}
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	2000011c 	.word	0x2000011c
 80092d8:	e000ed04 	.word	0xe000ed04

080092dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80092e2:	4b11      	ldr	r3, [pc, #68]	; (8009328 <vPortExitCritical+0x4c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10a      	bne.n	8009300 <vPortExitCritical+0x24>
	__asm volatile
 80092ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	607b      	str	r3, [r7, #4]
}
 80092fc:	bf00      	nop
 80092fe:	e7fe      	b.n	80092fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009300:	4b09      	ldr	r3, [pc, #36]	; (8009328 <vPortExitCritical+0x4c>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3b01      	subs	r3, #1
 8009306:	4a08      	ldr	r2, [pc, #32]	; (8009328 <vPortExitCritical+0x4c>)
 8009308:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800930a:	4b07      	ldr	r3, [pc, #28]	; (8009328 <vPortExitCritical+0x4c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d105      	bne.n	800931e <vPortExitCritical+0x42>
 8009312:	2300      	movs	r3, #0
 8009314:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	f383 8811 	msr	BASEPRI, r3
}
 800931c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800931e:	bf00      	nop
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	bc80      	pop	{r7}
 8009326:	4770      	bx	lr
 8009328:	2000011c 	.word	0x2000011c
 800932c:	00000000 	.word	0x00000000

08009330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009330:	f3ef 8009 	mrs	r0, PSP
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	4b0d      	ldr	r3, [pc, #52]	; (8009370 <pxCurrentTCBConst>)
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009340:	6010      	str	r0, [r2, #0]
 8009342:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009346:	f04f 0050 	mov.w	r0, #80	; 0x50
 800934a:	f380 8811 	msr	BASEPRI, r0
 800934e:	f7ff f845 	bl	80083dc <vTaskSwitchContext>
 8009352:	f04f 0000 	mov.w	r0, #0
 8009356:	f380 8811 	msr	BASEPRI, r0
 800935a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800935e:	6819      	ldr	r1, [r3, #0]
 8009360:	6808      	ldr	r0, [r1, #0]
 8009362:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009366:	f380 8809 	msr	PSP, r0
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	4770      	bx	lr

08009370 <pxCurrentTCBConst>:
 8009370:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop

08009378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	607b      	str	r3, [r7, #4]
}
 8009390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009392:	f7fe ff65 	bl	8008260 <xTaskIncrementTick>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d003      	beq.n	80093a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800939c:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <SysTick_Handler+0x40>)
 800939e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	2300      	movs	r3, #0
 80093a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	f383 8811 	msr	BASEPRI, r3
}
 80093ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80093b0:	bf00      	nop
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	e000ed04 	.word	0xe000ed04

080093bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80093bc:	b480      	push	{r7}
 80093be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80093c0:	4b0a      	ldr	r3, [pc, #40]	; (80093ec <vPortSetupTimerInterrupt+0x30>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80093c6:	4b0a      	ldr	r3, [pc, #40]	; (80093f0 <vPortSetupTimerInterrupt+0x34>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80093cc:	4b09      	ldr	r3, [pc, #36]	; (80093f4 <vPortSetupTimerInterrupt+0x38>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a09      	ldr	r2, [pc, #36]	; (80093f8 <vPortSetupTimerInterrupt+0x3c>)
 80093d2:	fba2 2303 	umull	r2, r3, r2, r3
 80093d6:	099b      	lsrs	r3, r3, #6
 80093d8:	4a08      	ldr	r2, [pc, #32]	; (80093fc <vPortSetupTimerInterrupt+0x40>)
 80093da:	3b01      	subs	r3, #1
 80093dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80093de:	4b03      	ldr	r3, [pc, #12]	; (80093ec <vPortSetupTimerInterrupt+0x30>)
 80093e0:	2207      	movs	r2, #7
 80093e2:	601a      	str	r2, [r3, #0]
}
 80093e4:	bf00      	nop
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bc80      	pop	{r7}
 80093ea:	4770      	bx	lr
 80093ec:	e000e010 	.word	0xe000e010
 80093f0:	e000e018 	.word	0xe000e018
 80093f4:	20000000 	.word	0x20000000
 80093f8:	10624dd3 	.word	0x10624dd3
 80093fc:	e000e014 	.word	0xe000e014

08009400 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009406:	f3ef 8305 	mrs	r3, IPSR
 800940a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2b0f      	cmp	r3, #15
 8009410:	d914      	bls.n	800943c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009412:	4a16      	ldr	r2, [pc, #88]	; (800946c <vPortValidateInterruptPriority+0x6c>)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4413      	add	r3, r2
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800941c:	4b14      	ldr	r3, [pc, #80]	; (8009470 <vPortValidateInterruptPriority+0x70>)
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	7afa      	ldrb	r2, [r7, #11]
 8009422:	429a      	cmp	r2, r3
 8009424:	d20a      	bcs.n	800943c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	607b      	str	r3, [r7, #4]
}
 8009438:	bf00      	nop
 800943a:	e7fe      	b.n	800943a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800943c:	4b0d      	ldr	r3, [pc, #52]	; (8009474 <vPortValidateInterruptPriority+0x74>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009444:	4b0c      	ldr	r3, [pc, #48]	; (8009478 <vPortValidateInterruptPriority+0x78>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	429a      	cmp	r2, r3
 800944a:	d90a      	bls.n	8009462 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	603b      	str	r3, [r7, #0]
}
 800945e:	bf00      	nop
 8009460:	e7fe      	b.n	8009460 <vPortValidateInterruptPriority+0x60>
	}
 8009462:	bf00      	nop
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	bc80      	pop	{r7}
 800946a:	4770      	bx	lr
 800946c:	e000e3f0 	.word	0xe000e3f0
 8009470:	20000e88 	.word	0x20000e88
 8009474:	e000ed0c 	.word	0xe000ed0c
 8009478:	20000e8c 	.word	0x20000e8c

0800947c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b08a      	sub	sp, #40	; 0x28
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009484:	2300      	movs	r3, #0
 8009486:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009488:	f7fe fe30 	bl	80080ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800948c:	4b58      	ldr	r3, [pc, #352]	; (80095f0 <pvPortMalloc+0x174>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009494:	f000 f910 	bl	80096b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009498:	4b56      	ldr	r3, [pc, #344]	; (80095f4 <pvPortMalloc+0x178>)
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4013      	ands	r3, r2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f040 808e 	bne.w	80095c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d01d      	beq.n	80094e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80094ac:	2208      	movs	r2, #8
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4413      	add	r3, r2
 80094b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f003 0307 	and.w	r3, r3, #7
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d014      	beq.n	80094e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f023 0307 	bic.w	r3, r3, #7
 80094c4:	3308      	adds	r3, #8
 80094c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f003 0307 	and.w	r3, r3, #7
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00a      	beq.n	80094e8 <pvPortMalloc+0x6c>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	617b      	str	r3, [r7, #20]
}
 80094e4:	bf00      	nop
 80094e6:	e7fe      	b.n	80094e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d069      	beq.n	80095c2 <pvPortMalloc+0x146>
 80094ee:	4b42      	ldr	r3, [pc, #264]	; (80095f8 <pvPortMalloc+0x17c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d864      	bhi.n	80095c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80094f8:	4b40      	ldr	r3, [pc, #256]	; (80095fc <pvPortMalloc+0x180>)
 80094fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80094fc:	4b3f      	ldr	r3, [pc, #252]	; (80095fc <pvPortMalloc+0x180>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009502:	e004      	b.n	800950e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	429a      	cmp	r2, r3
 8009516:	d903      	bls.n	8009520 <pvPortMalloc+0xa4>
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1f1      	bne.n	8009504 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009520:	4b33      	ldr	r3, [pc, #204]	; (80095f0 <pvPortMalloc+0x174>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009526:	429a      	cmp	r2, r3
 8009528:	d04b      	beq.n	80095c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2208      	movs	r2, #8
 8009530:	4413      	add	r3, r2
 8009532:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	1ad2      	subs	r2, r2, r3
 8009544:	2308      	movs	r3, #8
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	429a      	cmp	r2, r3
 800954a:	d91f      	bls.n	800958c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800954c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4413      	add	r3, r2
 8009552:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	f003 0307 	and.w	r3, r3, #7
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00a      	beq.n	8009574 <pvPortMalloc+0xf8>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	613b      	str	r3, [r7, #16]
}
 8009570:	bf00      	nop
 8009572:	e7fe      	b.n	8009572 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	1ad2      	subs	r2, r2, r3
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009586:	69b8      	ldr	r0, [r7, #24]
 8009588:	f000 f8f8 	bl	800977c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800958c:	4b1a      	ldr	r3, [pc, #104]	; (80095f8 <pvPortMalloc+0x17c>)
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	4a18      	ldr	r2, [pc, #96]	; (80095f8 <pvPortMalloc+0x17c>)
 8009598:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800959a:	4b17      	ldr	r3, [pc, #92]	; (80095f8 <pvPortMalloc+0x17c>)
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	4b18      	ldr	r3, [pc, #96]	; (8009600 <pvPortMalloc+0x184>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d203      	bcs.n	80095ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80095a6:	4b14      	ldr	r3, [pc, #80]	; (80095f8 <pvPortMalloc+0x17c>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a15      	ldr	r2, [pc, #84]	; (8009600 <pvPortMalloc+0x184>)
 80095ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	4b10      	ldr	r3, [pc, #64]	; (80095f4 <pvPortMalloc+0x178>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	431a      	orrs	r2, r3
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	2200      	movs	r2, #0
 80095c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80095c2:	f7fe fda1 	bl	8008108 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	f003 0307 	and.w	r3, r3, #7
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00a      	beq.n	80095e6 <pvPortMalloc+0x16a>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	60fb      	str	r3, [r7, #12]
}
 80095e2:	bf00      	nop
 80095e4:	e7fe      	b.n	80095e4 <pvPortMalloc+0x168>
	return pvReturn;
 80095e6:	69fb      	ldr	r3, [r7, #28]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3728      	adds	r7, #40	; 0x28
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	20001a98 	.word	0x20001a98
 80095f4:	20001aa4 	.word	0x20001aa4
 80095f8:	20001a9c 	.word	0x20001a9c
 80095fc:	20001a90 	.word	0x20001a90
 8009600:	20001aa0 	.word	0x20001aa0

08009604 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d048      	beq.n	80096a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009616:	2308      	movs	r3, #8
 8009618:	425b      	negs	r3, r3
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	4413      	add	r3, r2
 800961e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	4b21      	ldr	r3, [pc, #132]	; (80096b0 <vPortFree+0xac>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4013      	ands	r3, r2
 800962e:	2b00      	cmp	r3, #0
 8009630:	d10a      	bne.n	8009648 <vPortFree+0x44>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	60fb      	str	r3, [r7, #12]
}
 8009644:	bf00      	nop
 8009646:	e7fe      	b.n	8009646 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00a      	beq.n	8009666 <vPortFree+0x62>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	60bb      	str	r3, [r7, #8]
}
 8009662:	bf00      	nop
 8009664:	e7fe      	b.n	8009664 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	685a      	ldr	r2, [r3, #4]
 800966a:	4b11      	ldr	r3, [pc, #68]	; (80096b0 <vPortFree+0xac>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4013      	ands	r3, r2
 8009670:	2b00      	cmp	r3, #0
 8009672:	d019      	beq.n	80096a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d115      	bne.n	80096a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	4b0b      	ldr	r3, [pc, #44]	; (80096b0 <vPortFree+0xac>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	43db      	mvns	r3, r3
 8009686:	401a      	ands	r2, r3
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800968c:	f7fe fd2e 	bl	80080ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	685a      	ldr	r2, [r3, #4]
 8009694:	4b07      	ldr	r3, [pc, #28]	; (80096b4 <vPortFree+0xb0>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4413      	add	r3, r2
 800969a:	4a06      	ldr	r2, [pc, #24]	; (80096b4 <vPortFree+0xb0>)
 800969c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800969e:	6938      	ldr	r0, [r7, #16]
 80096a0:	f000 f86c 	bl	800977c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80096a4:	f7fe fd30 	bl	8008108 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80096a8:	bf00      	nop
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	20001aa4 	.word	0x20001aa4
 80096b4:	20001a9c 	.word	0x20001a9c

080096b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80096be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80096c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80096c4:	4b27      	ldr	r3, [pc, #156]	; (8009764 <prvHeapInit+0xac>)
 80096c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f003 0307 	and.w	r3, r3, #7
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00c      	beq.n	80096ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3307      	adds	r3, #7
 80096d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f023 0307 	bic.w	r3, r3, #7
 80096de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	4a1f      	ldr	r2, [pc, #124]	; (8009764 <prvHeapInit+0xac>)
 80096e8:	4413      	add	r3, r2
 80096ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80096f0:	4a1d      	ldr	r2, [pc, #116]	; (8009768 <prvHeapInit+0xb0>)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80096f6:	4b1c      	ldr	r3, [pc, #112]	; (8009768 <prvHeapInit+0xb0>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	4413      	add	r3, r2
 8009702:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009704:	2208      	movs	r2, #8
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	1a9b      	subs	r3, r3, r2
 800970a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f023 0307 	bic.w	r3, r3, #7
 8009712:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4a15      	ldr	r2, [pc, #84]	; (800976c <prvHeapInit+0xb4>)
 8009718:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800971a:	4b14      	ldr	r3, [pc, #80]	; (800976c <prvHeapInit+0xb4>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2200      	movs	r2, #0
 8009720:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009722:	4b12      	ldr	r3, [pc, #72]	; (800976c <prvHeapInit+0xb4>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2200      	movs	r2, #0
 8009728:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	1ad2      	subs	r2, r2, r3
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009738:	4b0c      	ldr	r3, [pc, #48]	; (800976c <prvHeapInit+0xb4>)
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	4a0a      	ldr	r2, [pc, #40]	; (8009770 <prvHeapInit+0xb8>)
 8009746:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	4a09      	ldr	r2, [pc, #36]	; (8009774 <prvHeapInit+0xbc>)
 800974e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009750:	4b09      	ldr	r3, [pc, #36]	; (8009778 <prvHeapInit+0xc0>)
 8009752:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009756:	601a      	str	r2, [r3, #0]
}
 8009758:	bf00      	nop
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	bc80      	pop	{r7}
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	20000e90 	.word	0x20000e90
 8009768:	20001a90 	.word	0x20001a90
 800976c:	20001a98 	.word	0x20001a98
 8009770:	20001aa0 	.word	0x20001aa0
 8009774:	20001a9c 	.word	0x20001a9c
 8009778:	20001aa4 	.word	0x20001aa4

0800977c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009784:	4b27      	ldr	r3, [pc, #156]	; (8009824 <prvInsertBlockIntoFreeList+0xa8>)
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	e002      	b.n	8009790 <prvInsertBlockIntoFreeList+0x14>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	60fb      	str	r3, [r7, #12]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	429a      	cmp	r2, r3
 8009798:	d8f7      	bhi.n	800978a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	4413      	add	r3, r2
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d108      	bne.n	80097be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	441a      	add	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	441a      	add	r2, r3
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d118      	bne.n	8009804 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	4b14      	ldr	r3, [pc, #80]	; (8009828 <prvInsertBlockIntoFreeList+0xac>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d00d      	beq.n	80097fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	441a      	add	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	e008      	b.n	800980c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80097fa:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <prvInsertBlockIntoFreeList+0xac>)
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	e003      	b.n	800980c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	429a      	cmp	r2, r3
 8009812:	d002      	beq.n	800981a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800981a:	bf00      	nop
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	bc80      	pop	{r7}
 8009822:	4770      	bx	lr
 8009824:	20001a90 	.word	0x20001a90
 8009828:	20001a98 	.word	0x20001a98

0800982c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009830:	2200      	movs	r2, #0
 8009832:	4912      	ldr	r1, [pc, #72]	; (800987c <MX_USB_DEVICE_Init+0x50>)
 8009834:	4812      	ldr	r0, [pc, #72]	; (8009880 <MX_USB_DEVICE_Init+0x54>)
 8009836:	f7fc fa89 	bl	8005d4c <USBD_Init>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009840:	f7f6 fda6 	bl	8000390 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009844:	490f      	ldr	r1, [pc, #60]	; (8009884 <MX_USB_DEVICE_Init+0x58>)
 8009846:	480e      	ldr	r0, [pc, #56]	; (8009880 <MX_USB_DEVICE_Init+0x54>)
 8009848:	f7fc faab 	bl	8005da2 <USBD_RegisterClass>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d001      	beq.n	8009856 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009852:	f7f6 fd9d 	bl	8000390 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009856:	490c      	ldr	r1, [pc, #48]	; (8009888 <MX_USB_DEVICE_Init+0x5c>)
 8009858:	4809      	ldr	r0, [pc, #36]	; (8009880 <MX_USB_DEVICE_Init+0x54>)
 800985a:	f7fc fa0b 	bl	8005c74 <USBD_CDC_RegisterInterface>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009864:	f7f6 fd94 	bl	8000390 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009868:	4805      	ldr	r0, [pc, #20]	; (8009880 <MX_USB_DEVICE_Init+0x54>)
 800986a:	f7fc fab3 	bl	8005dd4 <USBD_Start>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009874:	f7f6 fd8c 	bl	8000390 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009878:	bf00      	nop
 800987a:	bd80      	pop	{r7, pc}
 800987c:	20000130 	.word	0x20000130
 8009880:	20001d5c 	.word	0x20001d5c
 8009884:	20000018 	.word	0x20000018
 8009888:	20000120 	.word	0x20000120

0800988c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009890:	2200      	movs	r2, #0
 8009892:	4905      	ldr	r1, [pc, #20]	; (80098a8 <CDC_Init_FS+0x1c>)
 8009894:	4805      	ldr	r0, [pc, #20]	; (80098ac <CDC_Init_FS+0x20>)
 8009896:	f7fc fa03 	bl	8005ca0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800989a:	4905      	ldr	r1, [pc, #20]	; (80098b0 <CDC_Init_FS+0x24>)
 800989c:	4803      	ldr	r0, [pc, #12]	; (80098ac <CDC_Init_FS+0x20>)
 800989e:	f7fc fa18 	bl	8005cd2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80098a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	20002408 	.word	0x20002408
 80098ac:	20001d5c 	.word	0x20001d5c
 80098b0:	20002020 	.word	0x20002020

080098b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80098b4:	b480      	push	{r7}
 80098b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80098b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	46bd      	mov	sp, r7
 80098be:	bc80      	pop	{r7}
 80098c0:	4770      	bx	lr
	...

080098c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4603      	mov	r3, r0
 80098cc:	6039      	str	r1, [r7, #0]
 80098ce:	71fb      	strb	r3, [r7, #7]
 80098d0:	4613      	mov	r3, r2
 80098d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80098d4:	79fb      	ldrb	r3, [r7, #7]
 80098d6:	2b23      	cmp	r3, #35	; 0x23
 80098d8:	d84a      	bhi.n	8009970 <CDC_Control_FS+0xac>
 80098da:	a201      	add	r2, pc, #4	; (adr r2, 80098e0 <CDC_Control_FS+0x1c>)
 80098dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e0:	08009971 	.word	0x08009971
 80098e4:	08009971 	.word	0x08009971
 80098e8:	08009971 	.word	0x08009971
 80098ec:	08009971 	.word	0x08009971
 80098f0:	08009971 	.word	0x08009971
 80098f4:	08009971 	.word	0x08009971
 80098f8:	08009971 	.word	0x08009971
 80098fc:	08009971 	.word	0x08009971
 8009900:	08009971 	.word	0x08009971
 8009904:	08009971 	.word	0x08009971
 8009908:	08009971 	.word	0x08009971
 800990c:	08009971 	.word	0x08009971
 8009910:	08009971 	.word	0x08009971
 8009914:	08009971 	.word	0x08009971
 8009918:	08009971 	.word	0x08009971
 800991c:	08009971 	.word	0x08009971
 8009920:	08009971 	.word	0x08009971
 8009924:	08009971 	.word	0x08009971
 8009928:	08009971 	.word	0x08009971
 800992c:	08009971 	.word	0x08009971
 8009930:	08009971 	.word	0x08009971
 8009934:	08009971 	.word	0x08009971
 8009938:	08009971 	.word	0x08009971
 800993c:	08009971 	.word	0x08009971
 8009940:	08009971 	.word	0x08009971
 8009944:	08009971 	.word	0x08009971
 8009948:	08009971 	.word	0x08009971
 800994c:	08009971 	.word	0x08009971
 8009950:	08009971 	.word	0x08009971
 8009954:	08009971 	.word	0x08009971
 8009958:	08009971 	.word	0x08009971
 800995c:	08009971 	.word	0x08009971
 8009960:	08009971 	.word	0x08009971
 8009964:	08009971 	.word	0x08009971
 8009968:	08009971 	.word	0x08009971
 800996c:	08009971 	.word	0x08009971
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009970:	bf00      	nop
  }

  return (USBD_OK);
 8009972:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009974:	4618      	mov	r0, r3
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	bc80      	pop	{r7}
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop

08009980 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800998a:	6879      	ldr	r1, [r7, #4]
 800998c:	4805      	ldr	r0, [pc, #20]	; (80099a4 <CDC_Receive_FS+0x24>)
 800998e:	f7fc f9a0 	bl	8005cd2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009992:	4804      	ldr	r0, [pc, #16]	; (80099a4 <CDC_Receive_FS+0x24>)
 8009994:	f7fc f9b0 	bl	8005cf8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009998:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	20001d5c 	.word	0x20001d5c

080099a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	4603      	mov	r3, r0
 80099b0:	6039      	str	r1, [r7, #0]
 80099b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	2212      	movs	r2, #18
 80099b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80099ba:	4b03      	ldr	r3, [pc, #12]	; (80099c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80099bc:	4618      	mov	r0, r3
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bc80      	pop	{r7}
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	2000014c 	.word	0x2000014c

080099cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	6039      	str	r1, [r7, #0]
 80099d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	2204      	movs	r2, #4
 80099dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80099de:	4b03      	ldr	r3, [pc, #12]	; (80099ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bc80      	pop	{r7}
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	20000160 	.word	0x20000160

080099f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4603      	mov	r3, r0
 80099f8:	6039      	str	r1, [r7, #0]
 80099fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d105      	bne.n	8009a0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	4907      	ldr	r1, [pc, #28]	; (8009a24 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a06:	4808      	ldr	r0, [pc, #32]	; (8009a28 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a08:	f7fd f95c 	bl	8006cc4 <USBD_GetString>
 8009a0c:	e004      	b.n	8009a18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	4904      	ldr	r1, [pc, #16]	; (8009a24 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a12:	4805      	ldr	r0, [pc, #20]	; (8009a28 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a14:	f7fd f956 	bl	8006cc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a18:	4b02      	ldr	r3, [pc, #8]	; (8009a24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	200027f0 	.word	0x200027f0
 8009a28:	0800a1e8 	.word	0x0800a1e8

08009a2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	6039      	str	r1, [r7, #0]
 8009a36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	4904      	ldr	r1, [pc, #16]	; (8009a4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a3c:	4804      	ldr	r0, [pc, #16]	; (8009a50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a3e:	f7fd f941 	bl	8006cc4 <USBD_GetString>
  return USBD_StrDesc;
 8009a42:	4b02      	ldr	r3, [pc, #8]	; (8009a4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	200027f0 	.word	0x200027f0
 8009a50:	0800a1f4 	.word	0x0800a1f4

08009a54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	6039      	str	r1, [r7, #0]
 8009a5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	221a      	movs	r2, #26
 8009a64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a66:	f000 f843 	bl	8009af0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a6a:	4b02      	ldr	r3, [pc, #8]	; (8009a74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	20000164 	.word	0x20000164

08009a78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	4603      	mov	r3, r0
 8009a80:	6039      	str	r1, [r7, #0]
 8009a82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a84:	79fb      	ldrb	r3, [r7, #7]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d105      	bne.n	8009a96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	4907      	ldr	r1, [pc, #28]	; (8009aac <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a8e:	4808      	ldr	r0, [pc, #32]	; (8009ab0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a90:	f7fd f918 	bl	8006cc4 <USBD_GetString>
 8009a94:	e004      	b.n	8009aa0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	4904      	ldr	r1, [pc, #16]	; (8009aac <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a9a:	4805      	ldr	r0, [pc, #20]	; (8009ab0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a9c:	f7fd f912 	bl	8006cc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009aa0:	4b02      	ldr	r3, [pc, #8]	; (8009aac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	200027f0 	.word	0x200027f0
 8009ab0:	0800a208 	.word	0x0800a208

08009ab4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	4603      	mov	r3, r0
 8009abc:	6039      	str	r1, [r7, #0]
 8009abe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ac0:	79fb      	ldrb	r3, [r7, #7]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d105      	bne.n	8009ad2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	4907      	ldr	r1, [pc, #28]	; (8009ae8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009aca:	4808      	ldr	r0, [pc, #32]	; (8009aec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009acc:	f7fd f8fa 	bl	8006cc4 <USBD_GetString>
 8009ad0:	e004      	b.n	8009adc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	4904      	ldr	r1, [pc, #16]	; (8009ae8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ad6:	4805      	ldr	r0, [pc, #20]	; (8009aec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ad8:	f7fd f8f4 	bl	8006cc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009adc:	4b02      	ldr	r3, [pc, #8]	; (8009ae8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	200027f0 	.word	0x200027f0
 8009aec:	0800a214 	.word	0x0800a214

08009af0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009af6:	4b0f      	ldr	r3, [pc, #60]	; (8009b34 <Get_SerialNum+0x44>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009afc:	4b0e      	ldr	r3, [pc, #56]	; (8009b38 <Get_SerialNum+0x48>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b02:	4b0e      	ldr	r3, [pc, #56]	; (8009b3c <Get_SerialNum+0x4c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d009      	beq.n	8009b2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b16:	2208      	movs	r2, #8
 8009b18:	4909      	ldr	r1, [pc, #36]	; (8009b40 <Get_SerialNum+0x50>)
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f000 f814 	bl	8009b48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b20:	2204      	movs	r2, #4
 8009b22:	4908      	ldr	r1, [pc, #32]	; (8009b44 <Get_SerialNum+0x54>)
 8009b24:	68b8      	ldr	r0, [r7, #8]
 8009b26:	f000 f80f 	bl	8009b48 <IntToUnicode>
  }
}
 8009b2a:	bf00      	nop
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	1ffff7e8 	.word	0x1ffff7e8
 8009b38:	1ffff7ec 	.word	0x1ffff7ec
 8009b3c:	1ffff7f0 	.word	0x1ffff7f0
 8009b40:	20000166 	.word	0x20000166
 8009b44:	20000176 	.word	0x20000176

08009b48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b087      	sub	sp, #28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	4613      	mov	r3, r2
 8009b54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	75fb      	strb	r3, [r7, #23]
 8009b5e:	e027      	b.n	8009bb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	0f1b      	lsrs	r3, r3, #28
 8009b64:	2b09      	cmp	r3, #9
 8009b66:	d80b      	bhi.n	8009b80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	0f1b      	lsrs	r3, r3, #28
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	7dfb      	ldrb	r3, [r7, #23]
 8009b70:	005b      	lsls	r3, r3, #1
 8009b72:	4619      	mov	r1, r3
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	440b      	add	r3, r1
 8009b78:	3230      	adds	r2, #48	; 0x30
 8009b7a:	b2d2      	uxtb	r2, r2
 8009b7c:	701a      	strb	r2, [r3, #0]
 8009b7e:	e00a      	b.n	8009b96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	0f1b      	lsrs	r3, r3, #28
 8009b84:	b2da      	uxtb	r2, r3
 8009b86:	7dfb      	ldrb	r3, [r7, #23]
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	440b      	add	r3, r1
 8009b90:	3237      	adds	r2, #55	; 0x37
 8009b92:	b2d2      	uxtb	r2, r2
 8009b94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	011b      	lsls	r3, r3, #4
 8009b9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b9c:	7dfb      	ldrb	r3, [r7, #23]
 8009b9e:	005b      	lsls	r3, r3, #1
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009baa:	7dfb      	ldrb	r3, [r7, #23]
 8009bac:	3301      	adds	r3, #1
 8009bae:	75fb      	strb	r3, [r7, #23]
 8009bb0:	7dfa      	ldrb	r2, [r7, #23]
 8009bb2:	79fb      	ldrb	r3, [r7, #7]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d3d3      	bcc.n	8009b60 <IntToUnicode+0x18>
  }
}
 8009bb8:	bf00      	nop
 8009bba:	bf00      	nop
 8009bbc:	371c      	adds	r7, #28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bc80      	pop	{r7}
 8009bc2:	4770      	bx	lr

08009bc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a0d      	ldr	r2, [pc, #52]	; (8009c08 <HAL_PCD_MspInit+0x44>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d113      	bne.n	8009bfe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009bd6:	4b0d      	ldr	r3, [pc, #52]	; (8009c0c <HAL_PCD_MspInit+0x48>)
 8009bd8:	69db      	ldr	r3, [r3, #28]
 8009bda:	4a0c      	ldr	r2, [pc, #48]	; (8009c0c <HAL_PCD_MspInit+0x48>)
 8009bdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009be0:	61d3      	str	r3, [r2, #28]
 8009be2:	4b0a      	ldr	r3, [pc, #40]	; (8009c0c <HAL_PCD_MspInit+0x48>)
 8009be4:	69db      	ldr	r3, [r3, #28]
 8009be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009bee:	2200      	movs	r2, #0
 8009bf0:	2105      	movs	r1, #5
 8009bf2:	2014      	movs	r0, #20
 8009bf4:	f7f6 fd9d 	bl	8000732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009bf8:	2014      	movs	r0, #20
 8009bfa:	f7f6 fdb6 	bl	800076a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009bfe:	bf00      	nop
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	40005c00 	.word	0x40005c00
 8009c0c:	40021000 	.word	0x40021000

08009c10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009c24:	4619      	mov	r1, r3
 8009c26:	4610      	mov	r0, r2
 8009c28:	f7fc f91c 	bl	8005e64 <USBD_LL_SetupStage>
}
 8009c2c:	bf00      	nop
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009c46:	78fa      	ldrb	r2, [r7, #3]
 8009c48:	6879      	ldr	r1, [r7, #4]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	00db      	lsls	r3, r3, #3
 8009c52:	440b      	add	r3, r1
 8009c54:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	78fb      	ldrb	r3, [r7, #3]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	f7fc f94e 	bl	8005efe <USBD_LL_DataOutStage>
}
 8009c62:	bf00      	nop
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	460b      	mov	r3, r1
 8009c74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009c7c:	78fa      	ldrb	r2, [r7, #3]
 8009c7e:	6879      	ldr	r1, [r7, #4]
 8009c80:	4613      	mov	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	440b      	add	r3, r1
 8009c8a:	333c      	adds	r3, #60	; 0x3c
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	78fb      	ldrb	r3, [r7, #3]
 8009c90:	4619      	mov	r1, r3
 8009c92:	f7fc f9a5 	bl	8005fe0 <USBD_LL_DataInStage>
}
 8009c96:	bf00      	nop
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fc fab5 	bl	800621c <USBD_LL_SOF>
}
 8009cb2:	bf00      	nop
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d001      	beq.n	8009cd2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009cce:	f7f6 fb5f 	bl	8000390 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cd8:	7bfa      	ldrb	r2, [r7, #15]
 8009cda:	4611      	mov	r1, r2
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fc fa65 	bl	80061ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fc fa1e 	bl	800612a <USBD_LL_Reset>
}
 8009cee:	bf00      	nop
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
	...

08009cf8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fc fa5f 	bl	80061ca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d005      	beq.n	8009d20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d14:	4b04      	ldr	r3, [pc, #16]	; (8009d28 <HAL_PCD_SuspendCallback+0x30>)
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	4a03      	ldr	r2, [pc, #12]	; (8009d28 <HAL_PCD_SuspendCallback+0x30>)
 8009d1a:	f043 0306 	orr.w	r3, r3, #6
 8009d1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d20:	bf00      	nop
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	e000ed00 	.word	0xe000ed00

08009d2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fc fa59 	bl	80061f2 <USBD_LL_Resume>
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009d50:	4a28      	ldr	r2, [pc, #160]	; (8009df4 <USBD_LL_Init+0xac>)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a26      	ldr	r2, [pc, #152]	; (8009df4 <USBD_LL_Init+0xac>)
 8009d5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009d60:	4b24      	ldr	r3, [pc, #144]	; (8009df4 <USBD_LL_Init+0xac>)
 8009d62:	4a25      	ldr	r2, [pc, #148]	; (8009df8 <USBD_LL_Init+0xb0>)
 8009d64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009d66:	4b23      	ldr	r3, [pc, #140]	; (8009df4 <USBD_LL_Init+0xac>)
 8009d68:	2208      	movs	r2, #8
 8009d6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009d6c:	4b21      	ldr	r3, [pc, #132]	; (8009df4 <USBD_LL_Init+0xac>)
 8009d6e:	2202      	movs	r2, #2
 8009d70:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009d72:	4b20      	ldr	r3, [pc, #128]	; (8009df4 <USBD_LL_Init+0xac>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009d78:	4b1e      	ldr	r3, [pc, #120]	; (8009df4 <USBD_LL_Init+0xac>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009d7e:	4b1d      	ldr	r3, [pc, #116]	; (8009df4 <USBD_LL_Init+0xac>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009d84:	481b      	ldr	r0, [pc, #108]	; (8009df4 <USBD_LL_Init+0xac>)
 8009d86:	f7f6 feb4 	bl	8000af2 <HAL_PCD_Init>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009d90:	f7f6 fafe 	bl	8000390 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d9a:	2318      	movs	r3, #24
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2100      	movs	r1, #0
 8009da0:	f7f8 fb2a 	bl	80023f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009daa:	2358      	movs	r3, #88	; 0x58
 8009dac:	2200      	movs	r2, #0
 8009dae:	2180      	movs	r1, #128	; 0x80
 8009db0:	f7f8 fb22 	bl	80023f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dba:	23c0      	movs	r3, #192	; 0xc0
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	2181      	movs	r1, #129	; 0x81
 8009dc0:	f7f8 fb1a 	bl	80023f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dca:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009dce:	2200      	movs	r2, #0
 8009dd0:	2101      	movs	r1, #1
 8009dd2:	f7f8 fb11 	bl	80023f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009de0:	2200      	movs	r2, #0
 8009de2:	2182      	movs	r1, #130	; 0x82
 8009de4:	f7f8 fb08 	bl	80023f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	200029f0 	.word	0x200029f0
 8009df8:	40005c00 	.word	0x40005c00

08009dfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7f6 ff78 	bl	8000d08 <HAL_PCD_Start>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 f94e 	bl	800a0c0 <USBD_Get_USB_Status>
 8009e24:	4603      	mov	r3, r0
 8009e26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	4608      	mov	r0, r1
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	461a      	mov	r2, r3
 8009e40:	4603      	mov	r3, r0
 8009e42:	70fb      	strb	r3, [r7, #3]
 8009e44:	460b      	mov	r3, r1
 8009e46:	70bb      	strb	r3, [r7, #2]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e5a:	78bb      	ldrb	r3, [r7, #2]
 8009e5c:	883a      	ldrh	r2, [r7, #0]
 8009e5e:	78f9      	ldrb	r1, [r7, #3]
 8009e60:	f7f7 f8f2 	bl	8001048 <HAL_PCD_EP_Open>
 8009e64:	4603      	mov	r3, r0
 8009e66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e68:	7bfb      	ldrb	r3, [r7, #15]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 f928 	bl	800a0c0 <USBD_Get_USB_Status>
 8009e70:	4603      	mov	r3, r0
 8009e72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e74:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	460b      	mov	r3, r1
 8009e88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e98:	78fa      	ldrb	r2, [r7, #3]
 8009e9a:	4611      	mov	r1, r2
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7f7 f939 	bl	8001114 <HAL_PCD_EP_Close>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 f909 	bl	800a0c0 <USBD_Get_USB_Status>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ed6:	78fa      	ldrb	r2, [r7, #3]
 8009ed8:	4611      	mov	r1, r2
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7f7 f9f9 	bl	80012d2 <HAL_PCD_EP_SetStall>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 f8ea 	bl	800a0c0 <USBD_Get_USB_Status>
 8009eec:	4603      	mov	r3, r0
 8009eee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ef0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	460b      	mov	r3, r1
 8009f04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f06:	2300      	movs	r3, #0
 8009f08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f14:	78fa      	ldrb	r2, [r7, #3]
 8009f16:	4611      	mov	r1, r2
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7f7 fa3a 	bl	8001392 <HAL_PCD_EP_ClrStall>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f000 f8cb 	bl	800a0c0 <USBD_Get_USB_Status>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	da0c      	bge.n	8009f6e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f5a:	68f9      	ldr	r1, [r7, #12]
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	4613      	mov	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	00db      	lsls	r3, r3, #3
 8009f66:	440b      	add	r3, r1
 8009f68:	3302      	adds	r3, #2
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	e00b      	b.n	8009f86 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f6e:	78fb      	ldrb	r3, [r7, #3]
 8009f70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f74:	68f9      	ldr	r1, [r7, #12]
 8009f76:	4613      	mov	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	00db      	lsls	r3, r3, #3
 8009f7e:	440b      	add	r3, r1
 8009f80:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009f84:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bc80      	pop	{r7}
 8009f8e:	4770      	bx	lr

08009f90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009faa:	78fa      	ldrb	r2, [r7, #3]
 8009fac:	4611      	mov	r1, r2
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7f7 f825 	bl	8000ffe <HAL_PCD_SetAddress>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 f880 	bl	800a0c0 <USBD_Get_USB_Status>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b086      	sub	sp, #24
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	460b      	mov	r3, r1
 8009fdc:	72fb      	strb	r3, [r7, #11]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ff0:	893b      	ldrh	r3, [r7, #8]
 8009ff2:	7af9      	ldrb	r1, [r7, #11]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	f7f7 f929 	bl	800124c <HAL_PCD_EP_Transmit>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
 800a000:	4618      	mov	r0, r3
 800a002:	f000 f85d 	bl	800a0c0 <USBD_Get_USB_Status>
 800a006:	4603      	mov	r3, r0
 800a008:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a00a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	607a      	str	r2, [r7, #4]
 800a01e:	461a      	mov	r2, r3
 800a020:	460b      	mov	r3, r1
 800a022:	72fb      	strb	r3, [r7, #11]
 800a024:	4613      	mov	r3, r2
 800a026:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a02c:	2300      	movs	r3, #0
 800a02e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a036:	893b      	ldrh	r3, [r7, #8]
 800a038:	7af9      	ldrb	r1, [r7, #11]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	f7f7 f8b2 	bl	80011a4 <HAL_PCD_EP_Receive>
 800a040:	4603      	mov	r3, r0
 800a042:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a044:	7dfb      	ldrb	r3, [r7, #23]
 800a046:	4618      	mov	r0, r3
 800a048:	f000 f83a 	bl	800a0c0 <USBD_Get_USB_Status>
 800a04c:	4603      	mov	r3, r0
 800a04e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a050:	7dbb      	ldrb	r3, [r7, #22]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3718      	adds	r7, #24
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b082      	sub	sp, #8
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	460b      	mov	r3, r1
 800a064:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a06c:	78fa      	ldrb	r2, [r7, #3]
 800a06e:	4611      	mov	r1, r2
 800a070:	4618      	mov	r0, r3
 800a072:	f7f7 f8d4 	bl	800121e <HAL_PCD_EP_GetRxCount>
 800a076:	4603      	mov	r3, r0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a088:	4b02      	ldr	r3, [pc, #8]	; (800a094 <USBD_static_malloc+0x14>)
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	370c      	adds	r7, #12
 800a08e:	46bd      	mov	sp, r7
 800a090:	bc80      	pop	{r7}
 800a092:	4770      	bx	lr
 800a094:	20001aa8 	.word	0x20001aa8

0800a098 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]

}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bc80      	pop	{r7}
 800a0a8:	4770      	bx	lr

0800a0aa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	b083      	sub	sp, #12
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a0b6:	bf00      	nop
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bc80      	pop	{r7}
 800a0be:	4770      	bx	lr

0800a0c0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d817      	bhi.n	800a104 <USBD_Get_USB_Status+0x44>
 800a0d4:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <USBD_Get_USB_Status+0x1c>)
 800a0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0da:	bf00      	nop
 800a0dc:	0800a0ed 	.word	0x0800a0ed
 800a0e0:	0800a0f3 	.word	0x0800a0f3
 800a0e4:	0800a0f9 	.word	0x0800a0f9
 800a0e8:	0800a0ff 	.word	0x0800a0ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f0:	e00b      	b.n	800a10a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0f2:	2302      	movs	r3, #2
 800a0f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f6:	e008      	b.n	800a10a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a0fc:	e005      	b.n	800a10a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0fe:	2302      	movs	r3, #2
 800a100:	73fb      	strb	r3, [r7, #15]
    break;
 800a102:	e002      	b.n	800a10a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a104:	2302      	movs	r3, #2
 800a106:	73fb      	strb	r3, [r7, #15]
    break;
 800a108:	bf00      	nop
  }
  return usb_status;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	bc80      	pop	{r7}
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop

0800a118 <__libc_init_array>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	2600      	movs	r6, #0
 800a11c:	4d0c      	ldr	r5, [pc, #48]	; (800a150 <__libc_init_array+0x38>)
 800a11e:	4c0d      	ldr	r4, [pc, #52]	; (800a154 <__libc_init_array+0x3c>)
 800a120:	1b64      	subs	r4, r4, r5
 800a122:	10a4      	asrs	r4, r4, #2
 800a124:	42a6      	cmp	r6, r4
 800a126:	d109      	bne.n	800a13c <__libc_init_array+0x24>
 800a128:	f000 f830 	bl	800a18c <_init>
 800a12c:	2600      	movs	r6, #0
 800a12e:	4d0a      	ldr	r5, [pc, #40]	; (800a158 <__libc_init_array+0x40>)
 800a130:	4c0a      	ldr	r4, [pc, #40]	; (800a15c <__libc_init_array+0x44>)
 800a132:	1b64      	subs	r4, r4, r5
 800a134:	10a4      	asrs	r4, r4, #2
 800a136:	42a6      	cmp	r6, r4
 800a138:	d105      	bne.n	800a146 <__libc_init_array+0x2e>
 800a13a:	bd70      	pop	{r4, r5, r6, pc}
 800a13c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a140:	4798      	blx	r3
 800a142:	3601      	adds	r6, #1
 800a144:	e7ee      	b.n	800a124 <__libc_init_array+0xc>
 800a146:	f855 3b04 	ldr.w	r3, [r5], #4
 800a14a:	4798      	blx	r3
 800a14c:	3601      	adds	r6, #1
 800a14e:	e7f2      	b.n	800a136 <__libc_init_array+0x1e>
 800a150:	0800a284 	.word	0x0800a284
 800a154:	0800a284 	.word	0x0800a284
 800a158:	0800a284 	.word	0x0800a284
 800a15c:	0800a288 	.word	0x0800a288

0800a160 <memcpy>:
 800a160:	440a      	add	r2, r1
 800a162:	4291      	cmp	r1, r2
 800a164:	f100 33ff 	add.w	r3, r0, #4294967295
 800a168:	d100      	bne.n	800a16c <memcpy+0xc>
 800a16a:	4770      	bx	lr
 800a16c:	b510      	push	{r4, lr}
 800a16e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a172:	4291      	cmp	r1, r2
 800a174:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a178:	d1f9      	bne.n	800a16e <memcpy+0xe>
 800a17a:	bd10      	pop	{r4, pc}

0800a17c <memset>:
 800a17c:	4603      	mov	r3, r0
 800a17e:	4402      	add	r2, r0
 800a180:	4293      	cmp	r3, r2
 800a182:	d100      	bne.n	800a186 <memset+0xa>
 800a184:	4770      	bx	lr
 800a186:	f803 1b01 	strb.w	r1, [r3], #1
 800a18a:	e7f9      	b.n	800a180 <memset+0x4>

0800a18c <_init>:
 800a18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18e:	bf00      	nop
 800a190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a192:	bc08      	pop	{r3}
 800a194:	469e      	mov	lr, r3
 800a196:	4770      	bx	lr

0800a198 <_fini>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	bf00      	nop
 800a19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19e:	bc08      	pop	{r3}
 800a1a0:	469e      	mov	lr, r3
 800a1a2:	4770      	bx	lr
