
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c708  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800c818  0800c818  0001c818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce18  0800ce18  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce18  0800ce18  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce18  0800ce18  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce18  0800ce18  0001ce18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce1c  0800ce1c  0001ce1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800ce20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c88  200001ec  0800d00c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e74  0800d00c  00022e74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026f66  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053fe  00000000  00000000  0004717b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  0004c580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f8  00000000  00000000  0004de80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1a1  00000000  00000000  0004f578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e6a3  00000000  00000000  0006b719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098e63  00000000  00000000  00089dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00122c1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a5c  00000000  00000000  00122c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c800 	.word	0x0800c800

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800c800 	.word	0x0800c800

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (64, sizeof(uint8_t), &qUSB_rcv_attributes);
 8000178:	4a12      	ldr	r2, [pc, #72]	; (80001c4 <MX_FREERTOS_Init+0x50>)
 800017a:	2101      	movs	r1, #1
 800017c:	2040      	movs	r0, #64	; 0x40
 800017e:	f008 fc73 	bl	8008a68 <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a10      	ldr	r2, [pc, #64]	; (80001c8 <MX_FREERTOS_Init+0x54>)
 8000186:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000188:	4a10      	ldr	r2, [pc, #64]	; (80001cc <MX_FREERTOS_Init+0x58>)
 800018a:	2100      	movs	r1, #0
 800018c:	4810      	ldr	r0, [pc, #64]	; (80001d0 <MX_FREERTOS_Init+0x5c>)
 800018e:	f008 fb93 	bl	80088b8 <osThreadNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a0f      	ldr	r2, [pc, #60]	; (80001d4 <MX_FREERTOS_Init+0x60>)
 8000196:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 8000198:	4a0f      	ldr	r2, [pc, #60]	; (80001d8 <MX_FREERTOS_Init+0x64>)
 800019a:	2100      	movs	r1, #0
 800019c:	480f      	ldr	r0, [pc, #60]	; (80001dc <MX_FREERTOS_Init+0x68>)
 800019e:	f008 fb8b 	bl	80088b8 <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a0e      	ldr	r2, [pc, #56]	; (80001e0 <MX_FREERTOS_Init+0x6c>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 80001a8:	4a0e      	ldr	r2, [pc, #56]	; (80001e4 <MX_FREERTOS_Init+0x70>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	480e      	ldr	r0, [pc, #56]	; (80001e8 <MX_FREERTOS_Init+0x74>)
 80001ae:	f008 fb83 	bl	80088b8 <osThreadNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a0d      	ldr	r2, [pc, #52]	; (80001ec <MX_FREERTOS_Init+0x78>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <MX_FREERTOS_Init+0x54>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a0c      	ldr	r2, [pc, #48]	; (80001f0 <MX_FREERTOS_Init+0x7c>)
 80001be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001c0:	bf00      	nop
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	0800ca74 	.word	0x0800ca74
 80001c8:	20001d50 	.word	0x20001d50
 80001cc:	0800ca08 	.word	0x0800ca08
 80001d0:	080001f5 	.word	0x080001f5
 80001d4:	20001d44 	.word	0x20001d44
 80001d8:	0800ca2c 	.word	0x0800ca2c
 80001dc:	0800022d 	.word	0x0800022d
 80001e0:	20001d48 	.word	0x20001d48
 80001e4:	0800ca50 	.word	0x0800ca50
 80001e8:	08000261 	.word	0x08000261
 80001ec:	20001d4c 	.word	0x20001d4c
 80001f0:	20001d54 	.word	0x20001d54

080001f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80001fc:	f00b f9b6 	bl	800b56c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000206:	4808      	ldr	r0, [pc, #32]	; (8000228 <StartDefaultTask+0x34>)
 8000208:	f002 f8c8 	bl	800239c <HAL_GPIO_WritePin>
  osDelay(10);
 800020c:	200a      	movs	r0, #10
 800020e:	f008 fbfd 	bl	8008a0c <osDelay>
  init_microrl();
 8000212:	f001 fc5d 	bl	8001ad0 <init_microrl>
  set_CDC_ready(); // allow to send
 8000216:	f001 fc95 	bl	8001b44 <set_CDC_ready>

  vTaskDelete(NULL);
 800021a:	2000      	movs	r0, #0
 800021c:	f009 fc46 	bl	8009aac <vTaskDelete>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000220:	2001      	movs	r0, #1
 8000222:	f008 fbf3 	bl	8008a0c <osDelay>
 8000226:	e7fb      	b.n	8000220 <StartDefaultTask+0x2c>
 8000228:	40010800 	.word	0x40010800

0800022c <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 8000234:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000238:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 800023a:	f009 fe6d 	bl	8009f18 <xTaskGetTickCount>
 800023e:	4603      	mov	r3, r0
 8000240:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	4805      	ldr	r0, [pc, #20]	; (800025c <StartLEDheartbeat+0x30>)
 8000248:	f002 f8c0 	bl	80023cc <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800024c:	f107 0308 	add.w	r3, r7, #8
 8000250:	68f9      	ldr	r1, [r7, #12]
 8000252:	4618      	mov	r0, r3
 8000254:	f009 fc9c 	bl	8009b90 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000258:	e7ef      	b.n	800023a <StartLEDheartbeat+0xe>
 800025a:	bf00      	nop
 800025c:	40011000 	.word	0x40011000

08000260 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8000268:	2000      	movs	r0, #0
 800026a:	f00a f957 	bl	800a51c <uxTaskGetStackHighWaterMark>
 800026e:	60f8      	str	r0, [r7, #12]
	//SEGGER_u32((uint32_t)uxHighWaterMark);

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <StartUSB_rcv+0x34>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f107 010b 	add.w	r1, r7, #11
 8000278:	f04f 32ff 	mov.w	r2, #4294967295
 800027c:	4618      	mov	r0, r3
 800027e:	f009 f831 	bl	80092e4 <xQueueReceive>
	  microrl_print_char(buf);
 8000282:	7afb      	ldrb	r3, [r7, #11]
 8000284:	4618      	mov	r0, r3
 8000286:	f001 f8e3 	bl	8001450 <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800028a:	2000      	movs	r0, #0
 800028c:	f00a f946 	bl	800a51c <uxTaskGetStackHighWaterMark>
 8000290:	60f8      	str	r0, [r7, #12]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000292:	e7ed      	b.n	8000270 <StartUSB_rcv+0x10>
 8000294:	20001d54 	.word	0x20001d54

08000298 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029e:	f107 0310 	add.w	r3, r7, #16
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ac:	4b28      	ldr	r3, [pc, #160]	; (8000350 <MX_GPIO_Init+0xb8>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a27      	ldr	r2, [pc, #156]	; (8000350 <MX_GPIO_Init+0xb8>)
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b25      	ldr	r3, [pc, #148]	; (8000350 <MX_GPIO_Init+0xb8>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0310 	and.w	r3, r3, #16
 80002c0:	60fb      	str	r3, [r7, #12]
 80002c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c4:	4b22      	ldr	r3, [pc, #136]	; (8000350 <MX_GPIO_Init+0xb8>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a21      	ldr	r2, [pc, #132]	; (8000350 <MX_GPIO_Init+0xb8>)
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b1f      	ldr	r3, [pc, #124]	; (8000350 <MX_GPIO_Init+0xb8>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0320 	and.w	r3, r3, #32
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002dc:	4b1c      	ldr	r3, [pc, #112]	; (8000350 <MX_GPIO_Init+0xb8>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a1b      	ldr	r2, [pc, #108]	; (8000350 <MX_GPIO_Init+0xb8>)
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b19      	ldr	r3, [pc, #100]	; (8000350 <MX_GPIO_Init+0xb8>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0304 	and.w	r3, r3, #4
 80002f0:	607b      	str	r3, [r7, #4]
 80002f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fa:	4816      	ldr	r0, [pc, #88]	; (8000354 <MX_GPIO_Init+0xbc>)
 80002fc:	f002 f84e 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000306:	4814      	ldr	r0, [pc, #80]	; (8000358 <MX_GPIO_Init+0xc0>)
 8000308:	f002 f848 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800030c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000312:	2301      	movs	r3, #1
 8000314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031a:	2302      	movs	r3, #2
 800031c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	4619      	mov	r1, r3
 8000324:	480b      	ldr	r0, [pc, #44]	; (8000354 <MX_GPIO_Init+0xbc>)
 8000326:	f001 feb5 	bl	8002094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 800032a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800032e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000330:	2301      	movs	r3, #1
 8000332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	2302      	movs	r3, #2
 800033a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 800033c:	f107 0310 	add.w	r3, r7, #16
 8000340:	4619      	mov	r1, r3
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_GPIO_Init+0xc0>)
 8000344:	f001 fea6 	bl	8002094 <HAL_GPIO_Init>

}
 8000348:	bf00      	nop
 800034a:	3720      	adds	r7, #32
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000
 8000354:	40011000 	.word	0x40011000
 8000358:	40010800 	.word	0x40010800

0800035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000360:	f001 fd86 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000364:	f000 f809 	bl	800037a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000368:	f7ff ff96 	bl	8000298 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800036c:	f008 fa3e 	bl	80087ec <osKernelInitialize>
  MX_FREERTOS_Init();
 8000370:	f7ff ff00 	bl	8000174 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000374:	f008 fa6c 	bl	8008850 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000378:	e7fe      	b.n	8000378 <main+0x1c>

0800037a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b094      	sub	sp, #80	; 0x50
 800037e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000380:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000384:	2228      	movs	r2, #40	; 0x28
 8000386:	2100      	movs	r1, #0
 8000388:	4618      	mov	r0, r3
 800038a:	f00b fdf5 	bl	800bf78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038e:	f107 0314 	add.w	r3, r7, #20
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003aa:	2301      	movs	r3, #1
 80003ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b8:	2301      	movs	r3, #1
 80003ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003bc:	2302      	movs	r3, #2
 80003be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003d0:	4618      	mov	r0, r3
 80003d2:	f003 fcd9 	bl	8003d88 <HAL_RCC_OscConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003dc:	f000 f83a 	bl	8000454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e0:	230f      	movs	r3, #15
 80003e2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e4:	2302      	movs	r3, #2
 80003e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003f6:	f107 0314 	add.w	r3, r7, #20
 80003fa:	2101      	movs	r1, #1
 80003fc:	4618      	mov	r0, r3
 80003fe:	f003 ff43 	bl	8004288 <HAL_RCC_ClockConfig>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000408:	f000 f824 	bl	8000454 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800040c:	2310      	movs	r3, #16
 800040e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000410:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000414:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	4618      	mov	r0, r3
 800041a:	f004 f8eb 	bl	80045f4 <HAL_RCCEx_PeriphCLKConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000424:	f000 f816 	bl	8000454 <Error_Handler>
  }
}
 8000428:	bf00      	nop
 800042a:	3750      	adds	r7, #80	; 0x50
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d101      	bne.n	8000446 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000442:	f001 fd2b 	bl	8001e9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40012c00 	.word	0x40012c00

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045c:	e7fe      	b.n	800045c <Error_Handler+0x8>

0800045e <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 800045e:	b480      	push	{r7}
 8000460:	b085      	sub	sp, #20
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800046e:	6879      	ldr	r1, [r7, #4]
 8000470:	5c8a      	ldrb	r2, [r1, r2]
 8000472:	4413      	add	r3, r2
 8000474:	3301      	adds	r3, #1
 8000476:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b3f      	cmp	r3, #63	; 0x3f
 800047c:	dd02      	ble.n	8000484 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	3b40      	subs	r3, #64	; 0x40
 8000482:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	68fa      	ldr	r2, [r7, #12]
 8000488:	641a      	str	r2, [r3, #64]	; 0x40
}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	5cd3      	ldrb	r3, [r2, r3]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d101      	bne.n	80004ae <hist_is_space_for_new+0x1a>
		return true;
 80004aa:	2301      	movs	r3, #1
 80004ac:	e01e      	b.n	80004ec <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004b6:	429a      	cmp	r2, r3
 80004b8:	db0c      	blt.n	80004d4 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004be:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004c6:	4413      	add	r3, r2
 80004c8:	3b01      	subs	r3, #1
 80004ca:	683a      	ldr	r2, [r7, #0]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	da0c      	bge.n	80004ea <hist_is_space_for_new+0x56>
			return true;
 80004d0:	2301      	movs	r3, #1
 80004d2:	e00b      	b.n	80004ec <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004dc:	1ad3      	subs	r3, r2, r3
 80004de:	3b01      	subs	r3, #1
 80004e0:	683a      	ldr	r2, [r7, #0]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	da01      	bge.n	80004ea <hist_is_space_for_new+0x56>
			return true;
 80004e6:	2301      	movs	r3, #1
 80004e8:	e000      	b.n	80004ec <hist_is_space_for_new+0x58>
	}
	return false;
 80004ea:	2300      	movs	r3, #0
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr

080004f6 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b086      	sub	sp, #24
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	60f8      	str	r0, [r7, #12]
 80004fe:	60b9      	str	r1, [r7, #8]
 8000500:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b3e      	cmp	r3, #62	; 0x3e
 8000506:	dc61      	bgt.n	80005cc <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8000508:	e002      	b.n	8000510 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f7ff ffa7 	bl	800045e <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8000510:	6879      	ldr	r1, [r7, #4]
 8000512:	68f8      	ldr	r0, [r7, #12]
 8000514:	f7ff ffbe 	bl	8000494 <hist_is_space_for_new>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d0f5      	beq.n	800050a <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	5cd3      	ldrb	r3, [r2, r3]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d105      	bne.n	8000536 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	b2d1      	uxtb	r1, r2
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800053a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	da0a      	bge.n	800055a <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800054a:	3301      	adds	r3, #1
 800054c:	4413      	add	r3, r2
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	68b9      	ldr	r1, [r7, #8]
 8000552:	4618      	mov	r0, r3
 8000554:	f00b fce8 	bl	800bf28 <memcpy>
 8000558:	e018      	b.n	800058c <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800055e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000562:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800056a:	3301      	adds	r3, #1
 800056c:	4413      	add	r3, r2
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	68b9      	ldr	r1, [r7, #8]
 8000572:	4618      	mov	r0, r3
 8000574:	f00b fcd8 	bl	800bf28 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	68ba      	ldr	r2, [r7, #8]
 800057e:	18d1      	adds	r1, r2, r3
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	461a      	mov	r2, r3
 8000588:	f00b fcce 	bl	800bf28 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	b2d1      	uxtb	r1, r2
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005aa:	2b3f      	cmp	r3, #63	; 0x3f
 80005ac:	dd05      	ble.n	80005ba <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b2:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	2100      	movs	r1, #0
 80005c2:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2200      	movs	r2, #0
 80005c8:	649a      	str	r2, [r3, #72]	; 0x48
 80005ca:	e000      	b.n	80005ce <hist_save_line+0xd8>
		return;
 80005cc:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	; 0x30
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 80005ea:	e010      	b.n	800060e <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005f0:	4413      	add	r3, r2
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005f8:	4413      	add	r3, r2
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 80005fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000600:	dd02      	ble.n	8000608 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8000602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000604:	3b40      	subs	r3, #64	; 0x40
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8000608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800060a:	3301      	adds	r3, #1
 800060c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000612:	4413      	add	r3, r2
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1e8      	bne.n	80005ec <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d176      	bne.n	800070e <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000626:	429a      	cmp	r2, r3
 8000628:	f2c0 80d6 	blt.w	80007d8 <hist_restore_line+0x204>
			int header = pThis->begin;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000636:	e010      	b.n	800065a <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063c:	4413      	add	r3, r2
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000644:	4413      	add	r3, r2
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8000648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064a:	2b3f      	cmp	r3, #63	; 0x3f
 800064c:	dd02      	ble.n	8000654 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 800064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000650:	3b40      	subs	r3, #64	; 0x40
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	3301      	adds	r3, #1
 8000658:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d007      	beq.n	8000676 <hist_restore_line+0xa2>
 8000666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000668:	6a3b      	ldr	r3, [r7, #32]
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	1e5a      	subs	r2, r3, #1
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000672:	429a      	cmp	r2, r3
 8000674:	d1e0      	bne.n	8000638 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067a:	4413      	add	r3, r2
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	f000 80aa 	beq.w	80007d8 <hist_restore_line+0x204>
					pThis->cur++;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000688:	1c5a      	adds	r2, r3, #1
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000692:	4413      	add	r3, r2
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069a:	4413      	add	r3, r2
 800069c:	2b3f      	cmp	r3, #63	; 0x3f
 800069e:	dc11      	bgt.n	80006c4 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 80006a0:	2265      	movs	r2, #101	; 0x65
 80006a2:	2100      	movs	r1, #0
 80006a4:	68b8      	ldr	r0, [r7, #8]
 80006a6:	f00b fc67 	bl	800bf78 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ae:	3301      	adds	r3, #1
 80006b0:	18d1      	adds	r1, r2, r3
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	4413      	add	r3, r2
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	68b8      	ldr	r0, [r7, #8]
 80006be:	f00b fc33 	bl	800bf28 <memcpy>
 80006c2:	e01f      	b.n	8000704 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 80006c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80006ca:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 80006cc:	2265      	movs	r2, #101	; 0x65
 80006ce:	2100      	movs	r1, #0
 80006d0:	68b8      	ldr	r0, [r7, #8]
 80006d2:	f00b fc51 	bl	800bf78 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	3301      	adds	r3, #1
 80006dc:	4413      	add	r3, r2
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	4619      	mov	r1, r3
 80006e2:	68b8      	ldr	r0, [r7, #8]
 80006e4:	f00b fc20 	bl	800bf28 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	18d0      	adds	r0, r2, r3
 80006ee:	68f9      	ldr	r1, [r7, #12]
 80006f0:	68fa      	ldr	r2, [r7, #12]
 80006f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	461a      	mov	r2, r3
 8000700:	f00b fc12 	bl	800bf28 <memcpy>
				}
				return pThis->ring_buf[header];
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	e066      	b.n	80007dc <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000712:	2b00      	cmp	r3, #0
 8000714:	dd5e      	ble.n	80007d4 <hist_restore_line+0x200>
				pThis->cur--;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800071a:	1e5a      	subs	r2, r3, #1
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 800072a:	e010      	b.n	800074e <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	69fa      	ldr	r2, [r7, #28]
 8000738:	4413      	add	r3, r2
 800073a:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	2b3f      	cmp	r3, #63	; 0x3f
 8000740:	dd02      	ble.n	8000748 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3b40      	subs	r3, #64	; 0x40
 8000746:	61fb      	str	r3, [r7, #28]
				j++;
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	3301      	adds	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	4413      	add	r3, r2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d006      	beq.n	8000768 <hist_restore_line+0x194>
 800075a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	1ad2      	subs	r2, r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000764:	429a      	cmp	r2, r3
 8000766:	d1e1      	bne.n	800072c <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8000768:	68fa      	ldr	r2, [r7, #12]
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	4413      	add	r3, r2
 8000776:	2b3f      	cmp	r3, #63	; 0x3f
 8000778:	dc0c      	bgt.n	8000794 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	3301      	adds	r3, #1
 8000780:	18d1      	adds	r1, r2, r3
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	4413      	add	r3, r2
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	461a      	mov	r2, r3
 800078c:	68b8      	ldr	r0, [r7, #8]
 800078e:	f00b fbcb 	bl	800bf28 <memcpy>
 8000792:	e01a      	b.n	80007ca <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800079a:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3301      	adds	r3, #1
 80007a2:	4413      	add	r3, r2
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	4619      	mov	r1, r3
 80007a8:	68b8      	ldr	r0, [r7, #8]
 80007aa:	f00b fbbd 	bl	800bf28 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	18d0      	adds	r0, r2, r3
 80007b4:	68f9      	ldr	r1, [r7, #12]
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	4413      	add	r3, r2
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	461a      	mov	r2, r3
 80007c6:	f00b fbaf 	bl	800bf28 <memcpy>
			}
			return pThis->ring_buf[header];
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	4413      	add	r3, r2
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	e003      	b.n	80007dc <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e001      	b.n	80007dc <hist_restore_line+0x208>
		}
	}
	return -1;
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3730      	adds	r7, #48	; 0x30
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
	int i = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
	int ind = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 80007f8:	e002      	b.n	8000800 <split+0x1c>
			ind++;
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	3301      	adds	r3, #1
 80007fe:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	4413      	add	r3, r2
 8000806:	3354      	adds	r3, #84	; 0x54
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d103      	bne.n	8000816 <split+0x32>
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	429a      	cmp	r2, r3
 8000814:	dbf1      	blt.n	80007fa <split+0x16>
		}
		if (!(ind < limit)) return i;
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	429a      	cmp	r2, r3
 800081c:	db01      	blt.n	8000822 <split+0x3e>
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	e024      	b.n	800086c <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	1c58      	adds	r0, r3, #1
 800082e:	6178      	str	r0, [r7, #20]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	4403      	add	r3, r0
 8000836:	440a      	add	r2, r1
 8000838:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	2b07      	cmp	r3, #7
 800083e:	dd05      	ble.n	800084c <split+0x68>
			return -1;
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	e012      	b.n	800086c <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	3301      	adds	r3, #1
 800084a:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	4413      	add	r3, r2
 8000852:	3354      	adds	r3, #84	; 0x54
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <split+0x7e>
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	429a      	cmp	r2, r3
 8000860:	dbf1      	blt.n	8000846 <split+0x62>
		}
		if (!(ind < limit)) return i;
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	429a      	cmp	r2, r3
 8000868:	dbca      	blt.n	8000800 <split+0x1c>
 800086a:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 800086c:	4618      	mov	r0, r3
 800086e:	371c      	adds	r7, #28
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr

08000876 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000888:	4610      	mov	r0, r2
 800088a:	4798      	blx	r3
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80008a2:	4803      	ldr	r0, [pc, #12]	; (80008b0 <terminal_backspace+0x1c>)
 80008a4:	4798      	blx	r3
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	0800c85c 	.word	0x0800c85c

080008b4 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80008c2:	4803      	ldr	r0, [pc, #12]	; (80008d0 <terminal_newline+0x1c>)
 80008c4:	4798      	blx	r3
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	0800c864 	.word	0x0800c864

080008d4 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
#ifdef _USE_LIBC_STDIO 
	if (offset > 0) {
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	dd07      	ble.n	8000904 <terminal_move_cursor+0x30>
		snprintf (str, 16, "\033[%dC", offset);
 80008f4:	f107 0008 	add.w	r0, r7, #8
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <terminal_move_cursor+0x5c>)
 80008fc:	2110      	movs	r1, #16
 80008fe:	f00b fb43 	bl	800bf88 <sniprintf>
 8000902:	e00a      	b.n	800091a <terminal_move_cursor+0x46>
	} else if (offset < 0) {
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	da07      	bge.n	800091a <terminal_move_cursor+0x46>
		snprintf (str, 16, "\033[%dD", -(offset));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	425b      	negs	r3, r3
 800090e:	f107 0008 	add.w	r0, r7, #8
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <terminal_move_cursor+0x60>)
 8000914:	2110      	movs	r1, #16
 8000916:	f00b fb37 	bl	800bf88 <sniprintf>
		endstr = u16bit_to_str (-(offset), str+2);
		strcpy (endstr, "D");
	} else
		return;
#endif	
	pThis->print (str);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000920:	f107 0208 	add.w	r2, r7, #8
 8000924:	4610      	mov	r0, r2
 8000926:	4798      	blx	r3
}
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	0800c868 	.word	0x0800c868
 8000934:	0800c870 	.word	0x0800c870

08000938 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af02      	add	r7, sp, #8
 800093e:	6078      	str	r0, [r7, #4]
	char str[16];
#ifdef _USE_LIBC_STDIO
	snprintf (str, 16, "\033[%dD\033[%dC", \
 8000940:	f107 0008 	add.w	r0, r7, #8
 8000944:	2305      	movs	r3, #5
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	236c      	movs	r3, #108	; 0x6c
 800094a:	4a07      	ldr	r2, [pc, #28]	; (8000968 <terminal_reset_cursor+0x30>)
 800094c:	2110      	movs	r1, #16
 800094e:	f00b fb1b 	bl	800bf88 <sniprintf>
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
	strcpy (endstr, "D\033["); endstr += 3;
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
	strcpy (endstr, "C");
#endif
	pThis->print (str);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000958:	f107 0208 	add.w	r2, r7, #8
 800095c:	4610      	mov	r0, r2
 800095e:	4798      	blx	r3
}
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	0800c878 	.word	0x0800c878

0800096c <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800097e:	4816      	ldr	r0, [pc, #88]	; (80009d8 <terminal_print_line+0x6c>)
 8000980:	4798      	blx	r3

	char nch [] = {0,0};
 8000982:	2300      	movs	r3, #0
 8000984:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	e014      	b.n	80009b6 <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	4413      	add	r3, r2
 8000992:	3354      	adds	r3, #84	; 0x54
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8000998:	7c3b      	ldrb	r3, [r7, #16]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d101      	bne.n	80009a2 <terminal_print_line+0x36>
			nch[0] = ' ';
 800099e:	2320      	movs	r3, #32
 80009a0:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80009a8:	f107 0210 	add.w	r2, r7, #16
 80009ac:	4610      	mov	r0, r2
 80009ae:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	3301      	adds	r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	429a      	cmp	r2, r3
 80009c0:	dbe4      	blt.n	800098c <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 80009c2:	68f8      	ldr	r0, [r7, #12]
 80009c4:	f7ff ffb8 	bl	8000938 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	68f8      	ldr	r0, [r7, #12]
 80009cc:	f7ff ff82 	bl	80008d4 <terminal_move_cursor>
}
 80009d0:	bf00      	nop
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	0800c884 	.word	0x0800c884

080009dc <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3354      	adds	r3, #84	; 0x54
 80009ea:	2265      	movs	r2, #101	; 0x65
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00b fac2 	bl	800bf78 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3304      	adds	r3, #4
 80009f8:	2240      	movs	r2, #64	; 0x40
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f00b fabb 	bl	800bf78 <memset>
	pThis->ring_hist.begin = 0;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	pThis->execute = NULL;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pThis->get_completion = NULL;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
	pThis->prompt_str = prompt_default;
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <microrl_init+0x78>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000000 	.word	0x20000000

08000a58 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	683a      	ldr	r2, [r7, #0]
 8000a82:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	1d18      	adds	r0, r3, #4
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3354      	adds	r3, #84	; 0x54
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f7ff fd87 	bl	80005d4 <hist_restore_line>
 8000ac6:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db1a      	blt.n	8000b04 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	3354      	adds	r3, #84	; 0x54
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		terminal_reset_cursor (pThis);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff ff22 	bl	8000938 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000afa:	461a      	mov	r2, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff ff34 	bl	800096c <terminal_print_line>
	}
}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	2b5b      	cmp	r3, #91	; 0x5b
 8000b1c:	d104      	bne.n	8000b28 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
		return 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	e07b      	b.n	8000c20 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d14f      	bne.n	8000bd0 <escape_process+0xc4>
		if (ch == 'A') {
 8000b30:	78fb      	ldrb	r3, [r7, #3]
 8000b32:	2b41      	cmp	r3, #65	; 0x41
 8000b34:	d105      	bne.n	8000b42 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 8000b36:	2100      	movs	r1, #0
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ffb7 	bl	8000aac <hist_search>
#endif
			return 1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e06e      	b.n	8000c20 <escape_process+0x114>
		} else if (ch == 'B') {
 8000b42:	78fb      	ldrb	r3, [r7, #3]
 8000b44:	2b42      	cmp	r3, #66	; 0x42
 8000b46:	d105      	bne.n	8000b54 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8000b48:	2101      	movs	r1, #1
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffae 	bl	8000aac <hist_search>
#endif
			return 1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e065      	b.n	8000c20 <escape_process+0x114>
		} else if (ch == 'C') {
 8000b54:	78fb      	ldrb	r3, [r7, #3]
 8000b56:	2b43      	cmp	r3, #67	; 0x43
 8000b58:	d114      	bne.n	8000b84 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000b66:	429a      	cmp	r2, r3
 8000b68:	da0a      	bge.n	8000b80 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff feb1 	bl	80008d4 <terminal_move_cursor>
				pThis->cursor++;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e04d      	b.n	8000c20 <escape_process+0x114>
		} else if (ch == 'D') {
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	2b44      	cmp	r3, #68	; 0x44
 8000b88:	d112      	bne.n	8000bb0 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	dd0b      	ble.n	8000bac <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fe9b 	bl	80008d4 <terminal_move_cursor>
				pThis->cursor--;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	e037      	b.n	8000c20 <escape_process+0x114>
		} else if (ch == '7') {
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	2b37      	cmp	r3, #55	; 0x37
 8000bb4:	d104      	bne.n	8000bc0 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2202      	movs	r2, #2
 8000bba:	701a      	strb	r2, [r3, #0]
			return 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e02f      	b.n	8000c20 <escape_process+0x114>
		} else if (ch == '8') {
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
 8000bc2:	2b38      	cmp	r3, #56	; 0x38
 8000bc4:	d12b      	bne.n	8000c1e <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2203      	movs	r2, #3
 8000bca:	701a      	strb	r2, [r3, #0]
			return 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e027      	b.n	8000c20 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	2b7e      	cmp	r3, #126	; 0x7e
 8000bd4:	d123      	bne.n	8000c1e <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d108      	bne.n	8000bf0 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff feaa 	bl	8000938 <terminal_reset_cursor>
			pThis->cursor = 0;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	e017      	b.n	8000c20 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d112      	bne.n	8000c1e <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	4619      	mov	r1, r3
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fe63 	bl	80008d4 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	2b64      	cmp	r3, #100	; 0x64
 8000c40:	dc60      	bgt.n	8000d04 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000c4e:	4619      	mov	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	440b      	add	r3, r1
 8000c54:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3354      	adds	r3, #84	; 0x54
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor + len,
 8000c60:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000c6e:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8000c70:	461a      	mov	r2, r3
 8000c72:	f00b f967 	bl	800bf44 <memmove>
		for (i = 0; i < len; i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	e025      	b.n	8000cc8 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	441a      	add	r2, r3
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	440b      	add	r3, r1
 8000c8c:	7811      	ldrb	r1, [r2, #0]
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4413      	add	r3, r2
 8000c92:	460a      	mov	r2, r1
 8000c94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000caa:	2b20      	cmp	r3, #32
 8000cac:	d109      	bne.n	8000cc2 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	4413      	add	r3, r2
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbd5      	blt.n	8000c7c <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	441a      	add	r2, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdlen += len;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	441a      	add	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pThis->cmdline [pThis->cmdlen] = '\0';
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <microrl_insert_text+0xde>
	}
	return false;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	dd31      	ble.n	8000d84 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff fdb7 	bl	8000894 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d32:	3b01      	subs	r3, #1
 8000d34:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3354      	adds	r3, #84	; 0x54
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor-1,
 8000d40:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8000d52:	461a      	mov	r2, r3
 8000d54:	f00b f8f6 	bl	800bf44 <memmove>
		pThis->cursor--;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d5e:	1e5a      	subs	r2, r3, #1
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdline [pThis->cmdlen] = '\0';
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	4413      	add	r3, r2
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000d7c:	1e5a      	subs	r2, r3, #1
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f7ff f9e2 	bl	8000164 <strlen>
 8000da0:	4603      	mov	r3, r0
 8000da2:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e019      	b.n	8000dde <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff f9d5 	bl	8000164 <strlen>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d20a      	bcs.n	8000dd8 <common_len+0x4c>
			shortest = arr[i];
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	f7ff f9c8 	bl	8000164 <strlen>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1de      	bne.n	8000daa <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e01f      	b.n	8000e32 <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	e012      	b.n	8000e1e <common_len+0x92>
			if (shortest[i] != arr[j][i])
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	781a      	ldrb	r2, [r3, #0]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	440b      	add	r3, r1
 8000e08:	6819      	ldr	r1, [r3, #0]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	440b      	add	r3, r1
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d001      	beq.n	8000e18 <common_len+0x8c>
				return i;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	e011      	b.n	8000e3c <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1e5      	bne.n	8000df8 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	dbdb      	blt.n	8000df2 <common_len+0x66>

	return i;
 8000e3a:	697b      	ldr	r3, [r7, #20]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8000e44:	b5b0      	push	{r4, r5, r7, lr}
 8000e46:	b08e      	sub	sp, #56	; 0x38
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 809c 	beq.w	8000f90 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000e5e:	f107 0208 	add.w	r2, r7, #8
 8000e62:	4619      	mov	r1, r3
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff fcbd 	bl	80007e4 <split>
 8000e6a:	6378      	str	r0, [r7, #52]	; 0x34
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000e72:	3b01      	subs	r3, #1
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d109      	bne.n	8000e94 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8000e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	637a      	str	r2, [r7, #52]	; 0x34
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a42      	ldr	r2, [pc, #264]	; (8000f98 <microrl_get_complite+0x154>)
 8000e90:	f843 2c30 	str.w	r2, [r3, #-48]
	compl_token = pThis->get_completion (status, tkn_arr);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000e9a:	f107 0208 	add.w	r2, r7, #8
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ea2:	4798      	blx	r3
 8000ea4:	62b8      	str	r0, [r7, #40]	; 0x28
	if (compl_token[0] != NULL) {
 8000ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d071      	beq.n	8000f92 <microrl_get_complite+0x14e>
		int i = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
		int len;

		if (compl_token[1] == NULL) {
 8000eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d107      	bne.n	8000ecc <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8000ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff f94f 	bl	8000164 <strlen>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eca:	e026      	b.n	8000f1a <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8000ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ece:	f7ff ff5d 	bl	8000d8c <common_len>
 8000ed2:	62f8      	str	r0, [r7, #44]	; 0x2c
			terminal_newline (pThis);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fced 	bl	80008b4 <terminal_newline>
			while (compl_token [i] != NULL) {
 8000eda:	e011      	b.n	8000f00 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ee8:	440a      	add	r2, r1
 8000eea:	6812      	ldr	r2, [r2, #0]
 8000eec:	4610      	mov	r0, r2
 8000eee:	4798      	blx	r3
				pThis->print (" ");
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000ef6:	4829      	ldr	r0, [pc, #164]	; (8000f9c <microrl_get_complite+0x158>)
 8000ef8:	4798      	blx	r3
				i++;
 8000efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000efc:	3301      	adds	r3, #1
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
			while (compl_token [i] != NULL) {
 8000f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f06:	4413      	add	r3, r2
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1e6      	bne.n	8000edc <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fcd0 	bl	80008b4 <terminal_newline>
			print_prompt (pThis);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff fcae 	bl	8000876 <print_prompt>
		}
		
		if (len) {
 8000f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d02b      	beq.n	8000f78 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8000f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f22:	681c      	ldr	r4, [r3, #0]
 8000f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f26:	3b01      	subs	r3, #1
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f2e:	4413      	add	r3, r2
 8000f30:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff f915 	bl	8000164 <strlen>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 8000f3e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8000f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f42:	3b01      	subs	r3, #1
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff f907 	bl	8000164 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4629      	mov	r1, r5
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff fe62 	bl	8000c28 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8000f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f66:	3304      	adds	r3, #4
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d104      	bne.n	8000f78 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	490a      	ldr	r1, [pc, #40]	; (8000f9c <microrl_get_complite+0x158>)
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fe58 	bl	8000c28 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff fcdd 	bl	8000938 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000f84:	461a      	mov	r2, r3
 8000f86:	2100      	movs	r1, #0
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff fcef 	bl	800096c <terminal_print_line>
 8000f8e:	e000      	b.n	8000f92 <microrl_get_complite+0x14e>
		return;
 8000f90:	bf00      	nop
	} 
}
 8000f92:	3738      	adds	r7, #56	; 0x38
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bdb0      	pop	{r4, r5, r7, pc}
 8000f98:	0800c888 	.word	0x0800c888
 8000f9c:	0800c88c 	.word	0x0800c88c

08000fa0 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08c      	sub	sp, #48	; 0x30
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff fc83 	bl	80008b4 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	dd0a      	ble.n	8000fce <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	1d18      	adds	r0, r3, #4
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f7ff fa94 	bl	80004f6 <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000fd4:	f107 020c 	add.w	r2, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fc02 	bl	80007e4 <split>
 8000fe0:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (status == -1){
 8000fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d109      	bne.n	8000ffe <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000ff0:	4817      	ldr	r0, [pc, #92]	; (8001050 <new_line_handler+0xb0>)
 8000ff2:	4798      	blx	r3
		pThis->print (ENDL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000ffa:	4816      	ldr	r0, [pc, #88]	; (8001054 <new_line_handler+0xb4>)
 8000ffc:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8000ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001000:	2b00      	cmp	r3, #0
 8001002:	dd0c      	ble.n	800101e <new_line_handler+0x7e>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800100a:	2b00      	cmp	r3, #0
 800100c:	d007      	beq.n	800101e <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001014:	f107 020c 	add.w	r2, r7, #12
 8001018:	4611      	mov	r1, r2
 800101a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800101c:	4798      	blx	r3
	print_prompt (pThis);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff fc29 	bl	8000876 <print_prompt>
	pThis->cmdlen = 0;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3354      	adds	r3, #84	; 0x54
 8001038:	2265      	movs	r2, #101	; 0x65
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f00a ff9b 	bl	800bf78 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8001048:	bf00      	nop
 800104a:	3730      	adds	r7, #48	; 0x30
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	0800c890 	.word	0x0800c890
 8001054:	0800c864 	.word	0x0800c864

08001058 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00d      	beq.n	8001086 <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4619      	mov	r1, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff fd4b 	bl	8000b0c <escape_process>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 81e3 	beq.w	8001444 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8001084:	e1de      	b.n	8001444 <microrl_insert_char+0x3ec>
		switch (ch) {
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	3b01      	subs	r3, #1
 800108a:	2b7e      	cmp	r3, #126	; 0x7e
 800108c:	f200 81af 	bhi.w	80013ee <microrl_insert_char+0x396>
 8001090:	a201      	add	r2, pc, #4	; (adr r2, 8001098 <microrl_insert_char+0x40>)
 8001092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001096:	bf00      	nop
 8001098:	0800132b 	.word	0x0800132b
 800109c:	08001363 	.word	0x08001363
 80010a0:	080013db 	.word	0x080013db
 80010a4:	080013ef 	.word	0x080013ef
 80010a8:	08001307 	.word	0x08001307
 80010ac:	0800133b 	.word	0x0800133b
 80010b0:	080013ef 	.word	0x080013ef
 80010b4:	0800139b 	.word	0x0800139b
 80010b8:	080012bd 	.word	0x080012bd
 80010bc:	08001295 	.word	0x08001295
 80010c0:	080012ef 	.word	0x080012ef
 80010c4:	080013ef 	.word	0x080013ef
 80010c8:	08001295 	.word	0x08001295
 80010cc:	08001391 	.word	0x08001391
 80010d0:	080013ef 	.word	0x080013ef
 80010d4:	08001387 	.word	0x08001387
 80010d8:	080013ef 	.word	0x080013ef
 80010dc:	080013b7 	.word	0x080013b7
 80010e0:	080013ef 	.word	0x080013ef
 80010e4:	080013ef 	.word	0x080013ef
 80010e8:	080012d3 	.word	0x080012d3
 80010ec:	080013ef 	.word	0x080013ef
 80010f0:	080013ef 	.word	0x080013ef
 80010f4:	080013ef 	.word	0x080013ef
 80010f8:	080013ef 	.word	0x080013ef
 80010fc:	080013ef 	.word	0x080013ef
 8001100:	080012c5 	.word	0x080012c5
 8001104:	080013ef 	.word	0x080013ef
 8001108:	080013ef 	.word	0x080013ef
 800110c:	080013ef 	.word	0x080013ef
 8001110:	080013ef 	.word	0x080013ef
 8001114:	080013ef 	.word	0x080013ef
 8001118:	080013ef 	.word	0x080013ef
 800111c:	080013ef 	.word	0x080013ef
 8001120:	080013ef 	.word	0x080013ef
 8001124:	080013ef 	.word	0x080013ef
 8001128:	080013ef 	.word	0x080013ef
 800112c:	080013ef 	.word	0x080013ef
 8001130:	080013ef 	.word	0x080013ef
 8001134:	080013ef 	.word	0x080013ef
 8001138:	080013ef 	.word	0x080013ef
 800113c:	080013ef 	.word	0x080013ef
 8001140:	080013ef 	.word	0x080013ef
 8001144:	080013ef 	.word	0x080013ef
 8001148:	080013ef 	.word	0x080013ef
 800114c:	080013ef 	.word	0x080013ef
 8001150:	080013ef 	.word	0x080013ef
 8001154:	080013ef 	.word	0x080013ef
 8001158:	080013ef 	.word	0x080013ef
 800115c:	080013ef 	.word	0x080013ef
 8001160:	080013ef 	.word	0x080013ef
 8001164:	080013ef 	.word	0x080013ef
 8001168:	080013ef 	.word	0x080013ef
 800116c:	080013ef 	.word	0x080013ef
 8001170:	080013ef 	.word	0x080013ef
 8001174:	080013ef 	.word	0x080013ef
 8001178:	080013ef 	.word	0x080013ef
 800117c:	080013ef 	.word	0x080013ef
 8001180:	080013ef 	.word	0x080013ef
 8001184:	080013ef 	.word	0x080013ef
 8001188:	080013ef 	.word	0x080013ef
 800118c:	080013ef 	.word	0x080013ef
 8001190:	080013ef 	.word	0x080013ef
 8001194:	080013ef 	.word	0x080013ef
 8001198:	080013ef 	.word	0x080013ef
 800119c:	080013ef 	.word	0x080013ef
 80011a0:	080013ef 	.word	0x080013ef
 80011a4:	080013ef 	.word	0x080013ef
 80011a8:	080013ef 	.word	0x080013ef
 80011ac:	080013ef 	.word	0x080013ef
 80011b0:	080013ef 	.word	0x080013ef
 80011b4:	080013ef 	.word	0x080013ef
 80011b8:	080013ef 	.word	0x080013ef
 80011bc:	080013ef 	.word	0x080013ef
 80011c0:	080013ef 	.word	0x080013ef
 80011c4:	080013ef 	.word	0x080013ef
 80011c8:	080013ef 	.word	0x080013ef
 80011cc:	080013ef 	.word	0x080013ef
 80011d0:	080013ef 	.word	0x080013ef
 80011d4:	080013ef 	.word	0x080013ef
 80011d8:	080013ef 	.word	0x080013ef
 80011dc:	080013ef 	.word	0x080013ef
 80011e0:	080013ef 	.word	0x080013ef
 80011e4:	080013ef 	.word	0x080013ef
 80011e8:	080013ef 	.word	0x080013ef
 80011ec:	080013ef 	.word	0x080013ef
 80011f0:	080013ef 	.word	0x080013ef
 80011f4:	080013ef 	.word	0x080013ef
 80011f8:	080013ef 	.word	0x080013ef
 80011fc:	080013ef 	.word	0x080013ef
 8001200:	080013ef 	.word	0x080013ef
 8001204:	080013ef 	.word	0x080013ef
 8001208:	080013ef 	.word	0x080013ef
 800120c:	080013ef 	.word	0x080013ef
 8001210:	080013ef 	.word	0x080013ef
 8001214:	080013ef 	.word	0x080013ef
 8001218:	080013ef 	.word	0x080013ef
 800121c:	080013ef 	.word	0x080013ef
 8001220:	080013ef 	.word	0x080013ef
 8001224:	080013ef 	.word	0x080013ef
 8001228:	080013ef 	.word	0x080013ef
 800122c:	080013ef 	.word	0x080013ef
 8001230:	080013ef 	.word	0x080013ef
 8001234:	080013ef 	.word	0x080013ef
 8001238:	080013ef 	.word	0x080013ef
 800123c:	080013ef 	.word	0x080013ef
 8001240:	080013ef 	.word	0x080013ef
 8001244:	080013ef 	.word	0x080013ef
 8001248:	080013ef 	.word	0x080013ef
 800124c:	080013ef 	.word	0x080013ef
 8001250:	080013ef 	.word	0x080013ef
 8001254:	080013ef 	.word	0x080013ef
 8001258:	080013ef 	.word	0x080013ef
 800125c:	080013ef 	.word	0x080013ef
 8001260:	080013ef 	.word	0x080013ef
 8001264:	080013ef 	.word	0x080013ef
 8001268:	080013ef 	.word	0x080013ef
 800126c:	080013ef 	.word	0x080013ef
 8001270:	080013ef 	.word	0x080013ef
 8001274:	080013ef 	.word	0x080013ef
 8001278:	080013ef 	.word	0x080013ef
 800127c:	080013ef 	.word	0x080013ef
 8001280:	080013ef 	.word	0x080013ef
 8001284:	080013ef 	.word	0x080013ef
 8001288:	080013ef 	.word	0x080013ef
 800128c:	080013ef 	.word	0x080013ef
 8001290:	0800139b 	.word	0x0800139b
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	789b      	ldrb	r3, [r3, #2]
 8001298:	461a      	mov	r2, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2b0d      	cmp	r3, #13
 800129e:	d101      	bne.n	80012a4 <microrl_insert_char+0x24c>
 80012a0:	230a      	movs	r3, #10
 80012a2:	e000      	b.n	80012a6 <microrl_insert_char+0x24e>
 80012a4:	230d      	movs	r3, #13
 80012a6:	4293      	cmp	r3, r2
 80012a8:	f000 80c1 	beq.w	800142e <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fe73 	bl	8000fa0 <new_line_handler>
				break;
 80012ba:	e0c3      	b.n	8001444 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff fdc1 	bl	8000e44 <microrl_get_complite>
			break;
 80012c2:	e0bf      	b.n	8001444 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	705a      	strb	r2, [r3, #1]
			break;
 80012ca:	e0bb      	b.n	8001444 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fd1e 	bl	8000d0e <microrl_backspace>
					while (pThis->cursor > 0) {
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	dcf7      	bgt.n	80012cc <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80012e2:	461a      	mov	r2, r3
 80012e4:	2100      	movs	r1, #0
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fb40 	bl	800096c <terminal_print_line>
			break;
 80012ec:	e0aa      	b.n	8001444 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80012f4:	4855      	ldr	r0, [pc, #340]	; (800144c <microrl_insert_char+0x3f4>)
 80012f6:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			break;
 8001304:	e09e      	b.n	8001444 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	4619      	mov	r1, r3
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fadc 	bl	80008d4 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8001328:	e08c      	b.n	8001444 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fb04 	bl	8000938 <terminal_reset_cursor>
				pThis->cursor = 0;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8001338:	e084      	b.n	8001444 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001346:	429a      	cmp	r2, r3
 8001348:	da73      	bge.n	8001432 <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 800134a:	2101      	movs	r1, #1
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fac1 	bl	80008d4 <terminal_move_cursor>
				pThis->cursor++;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8001360:	e067      	b.n	8001432 <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d064      	beq.n	8001436 <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff faaf 	bl	80008d4 <terminal_move_cursor>
				pThis->cursor--;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8001384:	e057      	b.n	8001436 <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 8001386:	2100      	movs	r1, #0
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fb8f 	bl	8000aac <hist_search>
			break;
 800138e:	e059      	b.n	8001444 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 8001390:	2101      	movs	r1, #1
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fb8a 	bl	8000aac <hist_search>
			break;
 8001398:	e054      	b.n	8001444 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fcb7 	bl	8000d0e <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013ac:	461a      	mov	r2, r3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fadc 	bl	800096c <terminal_print_line>
			break;
 80013b4:	e046      	b.n	8001444 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fa7c 	bl	80008b4 <terminal_newline>
				print_prompt (pThis);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fa5a 	bl	8000876 <print_prompt>
				terminal_reset_cursor (pThis);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff fab8 	bl	8000938 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013ce:	461a      	mov	r2, r3
 80013d0:	2100      	movs	r1, #0
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff faca 	bl	800096c <terminal_print_line>
			break;
 80013d8:	e034      	b.n	8001444 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d02a      	beq.n	800143a <microrl_insert_char+0x3e2>
				pThis->sigint();
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80013ea:	4798      	blx	r3
			break;
 80013ec:	e025      	b.n	800143a <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	2b20      	cmp	r3, #32
 80013f2:	d104      	bne.n	80013fe <microrl_insert_char+0x3a6>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d01f      	beq.n	800143e <microrl_insert_char+0x3e6>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2b1f      	cmp	r3, #31
 8001402:	dd1c      	ble.n	800143e <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8001404:	463b      	mov	r3, r7
 8001406:	2201      	movs	r2, #1
 8001408:	4619      	mov	r1, r3
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fc0c 	bl	8000c28 <microrl_insert_text>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d015      	beq.n	8001442 <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800141c:	1e59      	subs	r1, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001424:	461a      	mov	r2, r3
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff faa0 	bl	800096c <terminal_print_line>
			break;
 800142c:	e009      	b.n	8001442 <microrl_insert_char+0x3ea>
					break;
 800142e:	bf00      	nop
 8001430:	e008      	b.n	8001444 <microrl_insert_char+0x3ec>
			break;
 8001432:	bf00      	nop
 8001434:	e006      	b.n	8001444 <microrl_insert_char+0x3ec>
			break;
 8001436:	bf00      	nop
 8001438:	e004      	b.n	8001444 <microrl_insert_char+0x3ec>
			break;
 800143a:	bf00      	nop
 800143c:	e002      	b.n	8001444 <microrl_insert_char+0x3ec>
	}
 800143e:	bf00      	nop
 8001440:	e000      	b.n	8001444 <microrl_insert_char+0x3ec>
			break;
 8001442:	bf00      	nop
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	0800c884 	.word	0x0800c884

08001450 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <microrl_print_char+0x20>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	79fa      	ldrb	r2, [r7, #7]
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fdf8 	bl	8001058 <microrl_insert_char>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000004 	.word	0x20000004

08001474 <print>:

void print (const char * str)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <print+0x84>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	f083 0301 	eor.w	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <print+0x1e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b1b      	cmp	r3, #27
 8001490:	d02b      	beq.n	80014ea <print+0x76>
		return;
	if (!CDC_is_ready)
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <print+0x88>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	f083 0301 	eor.w	r3, r3, #1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d126      	bne.n	80014ee <print+0x7a>
		return;
	uint16_t len = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 80014a4:	89fb      	ldrh	r3, [r7, #14]
 80014a6:	3301      	adds	r3, #1
 80014a8:	81fb      	strh	r3, [r7, #14]
 80014aa:	89fb      	ldrh	r3, [r7, #14]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f6      	bne.n	80014a4 <print+0x30>
	uint32_t timeout = HAL_GetTick();
 80014b6:	f000 fd03 	bl	8001ec0 <HAL_GetTick>
 80014ba:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 80014bc:	e006      	b.n	80014cc <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 80014be:	f000 fcff 	bl	8001ec0 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d807      	bhi.n	80014dc <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <print+0x8c>)
 80014ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80014d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f1      	bne.n	80014be <print+0x4a>
 80014da:	e000      	b.n	80014de <print+0x6a>
			break;
 80014dc:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 80014de:	89fb      	ldrh	r3, [r7, #14]
 80014e0:	4619      	mov	r1, r3
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f00a f918 	bl	800b718 <CDC_Transmit_FS>
 80014e8:	e002      	b.n	80014f0 <print+0x7c>
		return;
 80014ea:	bf00      	nop
 80014ec:	e000      	b.n	80014f0 <print+0x7c>
		return;
 80014ee:	bf00      	nop
		len++;
	}
	test_str[i] = '\0';
	SEGGER_RTT_WriteString(0,test_str);
#endif
}
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000208 	.word	0x20000208
 80014fc:	20000209 	.word	0x20000209
 8001500:	20001ee4 	.word	0x20001ee4

08001504 <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	e010      	b.n	8001536 <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <find_color_by_name+0x44>)
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	440b      	add	r3, r1
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	79fa      	ldrb	r2, [r7, #7]
 8001528:	429a      	cmp	r2, r3
 800152a:	d101      	bne.n	8001530 <find_color_by_name+0x2c>
		{
			return i;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	e006      	b.n	800153e <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3301      	adds	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2b10      	cmp	r3, #16
 800153a:	d9eb      	bls.n	8001514 <find_color_by_name+0x10>
		}
	}
	return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	0800cd0c 	.word	0x0800cd0c

0800154c <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ffd2 	bl	8001504 <find_color_by_name>
 8001560:	4602      	mov	r2, r0
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	4a08      	ldr	r2, [pc, #32]	; (8001590 <print_color+0x44>)
 800156e:	4413      	add	r3, r2
 8001570:	3301      	adds	r3, #1
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff7e 	bl	8001474 <print>
	print(str);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff7b 	bl	8001474 <print>
	print(COLOR_NC);
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <print_color+0x48>)
 8001580:	f7ff ff78 	bl	8001474 <print>
	return 0;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	0800cd0c 	.word	0x0800cd0c
 8001594:	0800c8a8 	.word	0x0800c8a8

08001598 <str_length>:

int str_length(const char * str)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	int i = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
	while (str[i])
 80015a4:	e002      	b.n	80015ac <str_length+0x14>
		i++;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
	while (str[i])
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f6      	bne.n	80015a6 <str_length+0xe>
	return i;
 80015b8:	68fb      	ldr	r3, [r7, #12]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <print_help>:


int print_help(int argc, const char * const * argv)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
	print(_VER);
 80015ce:	4858      	ldr	r0, [pc, #352]	; (8001730 <print_help+0x16c>)
 80015d0:	f7ff ff50 	bl	8001474 <print>
	print(ENDL);
 80015d4:	4857      	ldr	r0, [pc, #348]	; (8001734 <print_help+0x170>)
 80015d6:	f7ff ff4d 	bl	8001474 <print>
	print ("Use ");
 80015da:	4857      	ldr	r0, [pc, #348]	; (8001738 <print_help+0x174>)
 80015dc:	f7ff ff4a 	bl	8001474 <print>
	print_color("TAB", C_GREEN);
 80015e0:	2105      	movs	r1, #5
 80015e2:	4856      	ldr	r0, [pc, #344]	; (800173c <print_help+0x178>)
 80015e4:	f7ff ffb2 	bl	800154c <print_color>
	print(" key for completion");
 80015e8:	4855      	ldr	r0, [pc, #340]	; (8001740 <print_help+0x17c>)
 80015ea:	f7ff ff43 	bl	8001474 <print>
	print (ENDL);
 80015ee:	4851      	ldr	r0, [pc, #324]	; (8001734 <print_help+0x170>)
 80015f0:	f7ff ff40 	bl	8001474 <print>
	print ("Available commands:");
 80015f4:	4853      	ldr	r0, [pc, #332]	; (8001744 <print_help+0x180>)
 80015f6:	f7ff ff3d 	bl	8001474 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	e08a      	b.n	8001716 <print_help+0x152>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8001600:	4a51      	ldr	r2, [pc, #324]	; (8001748 <print_help+0x184>)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	019b      	lsls	r3, r3, #6
 8001606:	4413      	add	r3, r2
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160e:	d11b      	bne.n	8001648 <print_help+0x84>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3b01      	subs	r3, #1
 8001614:	4a4c      	ldr	r2, [pc, #304]	; (8001748 <print_help+0x184>)
 8001616:	019b      	lsls	r3, r3, #6
 8001618:	4413      	add	r3, r2
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001620:	d004      	beq.n	800162c <print_help+0x68>
				print_color(" aka ", C_L_PURPLE);
 8001622:	210c      	movs	r1, #12
 8001624:	4849      	ldr	r0, [pc, #292]	; (800174c <print_help+0x188>)
 8001626:	f7ff ff91 	bl	800154c <print_color>
 800162a:	e003      	b.n	8001634 <print_help+0x70>
			else
				print_color("/", C_L_PURPLE);
 800162c:	210c      	movs	r1, #12
 800162e:	4848      	ldr	r0, [pc, #288]	; (8001750 <print_help+0x18c>)
 8001630:	f7ff ff8c 	bl	800154c <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	019b      	lsls	r3, r3, #6
 8001638:	4a43      	ldr	r2, [pc, #268]	; (8001748 <print_help+0x184>)
 800163a:	4413      	add	r3, r2
 800163c:	3304      	adds	r3, #4
 800163e:	210b      	movs	r1, #11
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff83 	bl	800154c <print_color>
 8001646:	e063      	b.n	8001710 <print_help+0x14c>
		}
		else
		{
			print(ENDL);
 8001648:	483a      	ldr	r0, [pc, #232]	; (8001734 <print_help+0x170>)
 800164a:	f7ff ff13 	bl	8001474 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 800164e:	f06f 0303 	mvn.w	r3, #3
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	e005      	b.n	8001662 <print_help+0x9e>
				print(" ");
 8001656:	483f      	ldr	r0, [pc, #252]	; (8001754 <print_help+0x190>)
 8001658:	f7ff ff0c 	bl	8001474 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	3301      	adds	r3, #1
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4a39      	ldr	r2, [pc, #228]	; (8001748 <print_help+0x184>)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	019b      	lsls	r3, r3, #6
 8001668:	4413      	add	r3, r2
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	429a      	cmp	r2, r3
 8001670:	dbf1      	blt.n	8001656 <print_help+0x92>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	019b      	lsls	r3, r3, #6
 8001676:	4a34      	ldr	r2, [pc, #208]	; (8001748 <print_help+0x184>)
 8001678:	4413      	add	r3, r2
 800167a:	1d1a      	adds	r2, r3, #4
 800167c:	4932      	ldr	r1, [pc, #200]	; (8001748 <print_help+0x184>)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	019b      	lsls	r3, r3, #6
 8001682:	440b      	add	r3, r1
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4934      	ldr	r1, [pc, #208]	; (8001758 <print_help+0x194>)
 8001688:	5ccb      	ldrb	r3, [r1, r3]
 800168a:	4619      	mov	r1, r3
 800168c:	4610      	mov	r0, r2
 800168e:	f7ff ff5d 	bl	800154c <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	e005      	b.n	80016a4 <print_help+0xe0>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 8001698:	482e      	ldr	r0, [pc, #184]	; (8001754 <print_help+0x190>)
 800169a:	f7ff feeb 	bl	8001474 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3301      	adds	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	4a28      	ldr	r2, [pc, #160]	; (8001748 <print_help+0x184>)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	4413      	add	r3, r2
 80016ac:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80016ae:	f1c3 040c 	rsb	r4, r3, #12
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	4a24      	ldr	r2, [pc, #144]	; (8001748 <print_help+0x184>)
 80016b8:	4413      	add	r3, r2
 80016ba:	3304      	adds	r3, #4
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff6b 	bl	8001598 <str_length>
 80016c2:	4603      	mov	r3, r0
 80016c4:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	dbe5      	blt.n	8001698 <print_help+0xd4>
			switch (microrl_actions[i].level){
 80016cc:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <print_help+0x184>)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	019b      	lsls	r3, r3, #6
 80016d2:	4413      	add	r3, r2
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <print_help+0x11c>
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d004      	beq.n	80016e8 <print_help+0x124>
 80016de:	e007      	b.n	80016f0 <print_help+0x12c>
			case 0:
				print ("-");
 80016e0:	481e      	ldr	r0, [pc, #120]	; (800175c <print_help+0x198>)
 80016e2:	f7ff fec7 	bl	8001474 <print>
				break;
 80016e6:	e007      	b.n	80016f8 <print_help+0x134>
			case 1:
				print ("^");
 80016e8:	481d      	ldr	r0, [pc, #116]	; (8001760 <print_help+0x19c>)
 80016ea:	f7ff fec3 	bl	8001474 <print>
				break;
 80016ee:	e003      	b.n	80016f8 <print_help+0x134>
			default:
				print ("#");
 80016f0:	481c      	ldr	r0, [pc, #112]	; (8001764 <print_help+0x1a0>)
 80016f2:	f7ff febf 	bl	8001474 <print>
				break;
 80016f6:	bf00      	nop
			}
			print (" ");
 80016f8:	4816      	ldr	r0, [pc, #88]	; (8001754 <print_help+0x190>)
 80016fa:	f7ff febb 	bl	8001474 <print>
			print (microrl_actions[i].help_msg);
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	019b      	lsls	r3, r3, #6
 8001702:	3308      	adds	r3, #8
 8001704:	4a10      	ldr	r2, [pc, #64]	; (8001748 <print_help+0x184>)
 8001706:	4413      	add	r3, r2
 8001708:	3306      	adds	r3, #6
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff feb2 	bl	8001474 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2b09      	cmp	r3, #9
 800171a:	f67f af71 	bls.w	8001600 <print_help+0x3c>
		}
	}
	print(ENDL);
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <print_help+0x170>)
 8001720:	f7ff fea8 	bl	8001474 <print>
	return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	371c      	adds	r7, #28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd90      	pop	{r4, r7, pc}
 800172e:	bf00      	nop
 8001730:	0800c8b0 	.word	0x0800c8b0
 8001734:	0800c8c0 	.word	0x0800c8c0
 8001738:	0800c8c4 	.word	0x0800c8c4
 800173c:	0800c8cc 	.word	0x0800c8cc
 8001740:	0800c8d0 	.word	0x0800c8d0
 8001744:	0800c8e4 	.word	0x0800c8e4
 8001748:	0800ca8c 	.word	0x0800ca8c
 800174c:	0800c8f8 	.word	0x0800c8f8
 8001750:	0800c900 	.word	0x0800c900
 8001754:	0800c904 	.word	0x0800c904
 8001758:	0800cdc8 	.word	0x0800cdc8
 800175c:	0800c908 	.word	0x0800c908
 8001760:	0800c90c 	.word	0x0800c90c
 8001764:	0800c910 	.word	0x0800c910

08001768 <execute>:



int execute (int argc, const char * const * argv)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 800177e:	2300      	movs	r3, #0
 8001780:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e050      	b.n	800182a <execute+0xc2>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	e03f      	b.n	800180e <execute+0xa6>
		{
			tokens_found = false;
 800178e:	2300      	movs	r3, #0
 8001790:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 8001792:	4a52      	ldr	r2, [pc, #328]	; (80018dc <execute+0x174>)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	019b      	lsls	r3, r3, #6
 8001798:	4413      	add	r3, r2
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d001      	beq.n	80017aa <execute+0x42>
				synonym_level = current_level; // save the synonym level
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b0:	d003      	beq.n	80017ba <execute+0x52>
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	db2d      	blt.n	8001816 <execute+0xae>
				break;
			if (current_level == i)
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d101      	bne.n	80017c6 <execute+0x5e>
				last_main_synonym = n;
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	4413      	add	r3, r2
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	019b      	lsls	r3, r3, #6
 80017d4:	4941      	ldr	r1, [pc, #260]	; (80018dc <execute+0x174>)
 80017d6:	440b      	add	r3, r1
 80017d8:	3304      	adds	r3, #4
 80017da:	4619      	mov	r1, r3
 80017dc:	4610      	mov	r0, r2
 80017de:	f7fe fcb7 	bl	8000150 <strcmp>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10f      	bne.n	8001808 <execute+0xa0>
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d10b      	bne.n	8001808 <execute+0xa0>
					(i == synonym_level))
			{
				tokens_found = true;
 80017f0:	2301      	movs	r3, #1
 80017f2:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	623a      	str	r2, [r7, #32]
 80017fa:	4a38      	ldr	r2, [pc, #224]	; (80018dc <execute+0x174>)
 80017fc:	019b      	lsls	r3, r3, #6
 80017fe:	4413      	add	r3, r2
 8001800:	333c      	adds	r3, #60	; 0x3c
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001806:	e007      	b.n	8001818 <execute+0xb0>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	3301      	adds	r3, #1
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	2b09      	cmp	r3, #9
 8001812:	d9bc      	bls.n	800178e <execute+0x26>
 8001814:	e000      	b.n	8001818 <execute+0xb0>
				break;
 8001816:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8001818:	7efb      	ldrb	r3, [r7, #27]
 800181a:	f083 0301 	eor.w	r3, r3, #1
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d107      	bne.n	8001834 <execute+0xcc>
	for (int i = 0; i < argc; i++)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	429a      	cmp	r2, r3
 8001830:	dbaa      	blt.n	8001788 <execute+0x20>
 8001832:	e000      	b.n	8001836 <execute+0xce>
			break;
 8001834:	bf00      	nop
	}

	if (func != NULL)
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <execute+0xe0>
	{
		return func(argc, argv); // function found
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	6839      	ldr	r1, [r7, #0]
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	4798      	blx	r3
 8001844:	4603      	mov	r3, r0
 8001846:	e045      	b.n	80018d4 <execute+0x16c>
	} else if (tokens_found)
 8001848:	7efb      	ldrb	r3, [r7, #27]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d021      	beq.n	8001892 <execute+0x12a>
	{
		print_color ("command: '", C_L_RED);
 800184e:	210a      	movs	r1, #10
 8001850:	4823      	ldr	r0, [pc, #140]	; (80018e0 <execute+0x178>)
 8001852:	f7ff fe7b 	bl	800154c <print_color>
		print_color ((char*)argv[0], C_L_RED);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	210a      	movs	r1, #10
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fe75 	bl	800154c <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 8001862:	210a      	movs	r1, #10
 8001864:	481f      	ldr	r0, [pc, #124]	; (80018e4 <execute+0x17c>)
 8001866:	f7ff fe71 	bl	800154c <print_color>
		print(ENDL);
 800186a:	481f      	ldr	r0, [pc, #124]	; (80018e8 <execute+0x180>)
 800186c:	f7ff fe02 	bl	8001474 <print>
		print_color ("use '", C_NC);
 8001870:	2100      	movs	r1, #0
 8001872:	481e      	ldr	r0, [pc, #120]	; (80018ec <execute+0x184>)
 8001874:	f7ff fe6a 	bl	800154c <print_color>
		print_color ("?", C_GREEN);
 8001878:	2105      	movs	r1, #5
 800187a:	481d      	ldr	r0, [pc, #116]	; (80018f0 <execute+0x188>)
 800187c:	f7ff fe66 	bl	800154c <print_color>
		print_color ("' for help", C_NC);
 8001880:	2100      	movs	r1, #0
 8001882:	481c      	ldr	r0, [pc, #112]	; (80018f4 <execute+0x18c>)
 8001884:	f7ff fe62 	bl	800154c <print_color>
		print (ENDL);
 8001888:	4817      	ldr	r0, [pc, #92]	; (80018e8 <execute+0x180>)
 800188a:	f7ff fdf3 	bl	8001474 <print>
		return 1;
 800188e:	2301      	movs	r3, #1
 8001890:	e020      	b.n	80018d4 <execute+0x16c>
	}
	else
	{
		print_color ("command: '", C_RED);
 8001892:	2109      	movs	r1, #9
 8001894:	4812      	ldr	r0, [pc, #72]	; (80018e0 <execute+0x178>)
 8001896:	f7ff fe59 	bl	800154c <print_color>
		print_color ((char*)argv[0], C_RED);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2109      	movs	r1, #9
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fe53 	bl	800154c <print_color>
		print_color ("' not found", C_RED);
 80018a6:	2109      	movs	r1, #9
 80018a8:	4813      	ldr	r0, [pc, #76]	; (80018f8 <execute+0x190>)
 80018aa:	f7ff fe4f 	bl	800154c <print_color>
		print(ENDL);
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <execute+0x180>)
 80018b0:	f7ff fde0 	bl	8001474 <print>
		print_color ("use '", C_NC);
 80018b4:	2100      	movs	r1, #0
 80018b6:	480d      	ldr	r0, [pc, #52]	; (80018ec <execute+0x184>)
 80018b8:	f7ff fe48 	bl	800154c <print_color>
		print_color ("?", C_GREEN);
 80018bc:	2105      	movs	r1, #5
 80018be:	480c      	ldr	r0, [pc, #48]	; (80018f0 <execute+0x188>)
 80018c0:	f7ff fe44 	bl	800154c <print_color>
		print_color ("' for help", C_NC);
 80018c4:	2100      	movs	r1, #0
 80018c6:	480b      	ldr	r0, [pc, #44]	; (80018f4 <execute+0x18c>)
 80018c8:	f7ff fe40 	bl	800154c <print_color>
		print (ENDL);
 80018cc:	4806      	ldr	r0, [pc, #24]	; (80018e8 <execute+0x180>)
 80018ce:	f7ff fdd1 	bl	8001474 <print>
		return 1;
 80018d2:	2301      	movs	r3, #1

	}
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3728      	adds	r7, #40	; 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	0800ca8c 	.word	0x0800ca8c
 80018e0:	0800c914 	.word	0x0800c914
 80018e4:	0800c920 	.word	0x0800c920
 80018e8:	0800c8c0 	.word	0x0800c8c0
 80018ec:	0800c940 	.word	0x0800c940
 80018f0:	0800c948 	.word	0x0800c948
 80018f4:	0800c94c 	.word	0x0800c94c
 80018f8:	0800c958 	.word	0x0800c958

080018fc <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	; 0x30
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
	int j = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 800190a:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <complet+0x17c>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d11b      	bne.n	800194e <complet+0x52>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
 800191a:	e014      	b.n	8001946 <complet+0x4a>
			if (microrl_actions[i].level == 0)
 800191c:	4a57      	ldr	r2, [pc, #348]	; (8001a7c <complet+0x180>)
 800191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001920:	019b      	lsls	r3, r3, #6
 8001922:	4413      	add	r3, r2
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10a      	bne.n	8001940 <complet+0x44>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 800192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001932:	0192      	lsls	r2, r2, #6
 8001934:	4951      	ldr	r1, [pc, #324]	; (8001a7c <complet+0x180>)
 8001936:	440a      	add	r2, r1
 8001938:	3204      	adds	r2, #4
 800193a:	494f      	ldr	r1, [pc, #316]	; (8001a78 <complet+0x17c>)
 800193c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 8001940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001942:	3301      	adds	r3, #1
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
 8001946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001948:	2b09      	cmp	r3, #9
 800194a:	d9e7      	bls.n	800191c <complet+0x20>
 800194c:	e08a      	b.n	8001a64 <complet+0x168>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001954:	3b01      	subs	r3, #1
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	4413      	add	r3, r2
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 8001968:	2300      	movs	r3, #0
 800196a:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	e072      	b.n	8001a58 <complet+0x15c>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	e061      	b.n	8001a3c <complet+0x140>
			{
				tokens_found = false;
 8001978:	2300      	movs	r3, #0
 800197a:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 800197c:	4a3f      	ldr	r2, [pc, #252]	; (8001a7c <complet+0x180>)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	019b      	lsls	r3, r3, #6
 8001982:	4413      	add	r3, r2
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198e:	d001      	beq.n	8001994 <complet+0x98>
					synonym_level = current_level; // save the synonym level
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199a:	d003      	beq.n	80019a4 <complet+0xa8>
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	db4f      	blt.n	8001a44 <complet+0x148>
					break;
				if (current_level == i)
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d101      	bne.n	80019b0 <complet+0xb4>
					last_main_synonym = n;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d122      	bne.n	8001a00 <complet+0x104>
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	019b      	lsls	r3, r3, #6
 80019be:	4a2f      	ldr	r2, [pc, #188]	; (8001a7c <complet+0x180>)
 80019c0:	4413      	add	r3, r2
 80019c2:	3304      	adds	r3, #4
 80019c4:	6939      	ldr	r1, [r7, #16]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f00a fb12 	bl	800bff0 <strstr>
 80019cc:	4602      	mov	r2, r0
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	019b      	lsls	r3, r3, #6
 80019d2:	492a      	ldr	r1, [pc, #168]	; (8001a7c <complet+0x180>)
 80019d4:	440b      	add	r3, r1
 80019d6:	3304      	adds	r3, #4
 80019d8:	429a      	cmp	r2, r3
 80019da:	d111      	bne.n	8001a00 <complet+0x104>
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d10d      	bne.n	8001a00 <complet+0x104>
										(i == synonym_level))
				{
					tokens_found = true;
 80019e4:	2301      	movs	r3, #1
 80019e6:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 80019e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	0192      	lsls	r2, r2, #6
 80019f2:	4922      	ldr	r1, [pc, #136]	; (8001a7c <complet+0x180>)
 80019f4:	440a      	add	r2, r1
 80019f6:	3204      	adds	r2, #4
 80019f8:	491f      	ldr	r1, [pc, #124]	; (8001a78 <complet+0x17c>)
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80019fe:	e01a      	b.n	8001a36 <complet+0x13a>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	019b      	lsls	r3, r3, #6
 8001a0e:	491b      	ldr	r1, [pc, #108]	; (8001a7c <complet+0x180>)
 8001a10:	440b      	add	r3, r1
 8001a12:	3304      	adds	r3, #4
 8001a14:	4619      	mov	r1, r3
 8001a16:	4610      	mov	r0, r2
 8001a18:	f7fe fb9a 	bl	8000150 <strcmp>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <complet+0x13a>
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d105      	bne.n	8001a36 <complet+0x13a>
				{
					last_main_synonym++;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 8001a30:	2301      	movs	r3, #1
 8001a32:	77fb      	strb	r3, [r7, #31]
					break;
 8001a34:	e007      	b.n	8001a46 <complet+0x14a>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2b09      	cmp	r3, #9
 8001a40:	d99a      	bls.n	8001978 <complet+0x7c>
 8001a42:	e000      	b.n	8001a46 <complet+0x14a>
					break;
 8001a44:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 8001a46:	7ffb      	ldrb	r3, [r7, #31]
 8001a48:	f083 0301 	eor.w	r3, r3, #1
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d107      	bne.n	8001a62 <complet+0x166>
		for (int i = 0; i < argc; i++)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	3301      	adds	r3, #1
 8001a56:	61bb      	str	r3, [r7, #24]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	db88      	blt.n	8001972 <complet+0x76>
 8001a60:	e000      	b.n	8001a64 <complet+0x168>
				break;
 8001a62:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <complet+0x17c>)
 8001a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a68:	2100      	movs	r1, #0
 8001a6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 8001a6e:	4b02      	ldr	r3, [pc, #8]	; (8001a78 <complet+0x17c>)
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3730      	adds	r7, #48	; 0x30
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20001d58 	.word	0x20001d58
 8001a7c:	0800ca8c 	.word	0x0800ca8c

08001a80 <sigint>:
#endif


void sigint (void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
	//TODO add functions
	print (ENDL);
 8001a86:	480f      	ldr	r0, [pc, #60]	; (8001ac4 <sigint+0x44>)
 8001a88:	f7ff fcf4 	bl	8001474 <print>
	print ("^C catched!");
 8001a8c:	480e      	ldr	r0, [pc, #56]	; (8001ac8 <sigint+0x48>)
 8001a8e:	f7ff fcf1 	bl	8001474 <print>
	int i = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 8001a96:	e009      	b.n	8001aac <sigint+0x2c>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <sigint+0x4c>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <sigint+0x44>)
 8001aa4:	5cd3      	ldrb	r3, [r2, r3]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7ff fad6 	bl	8001058 <microrl_insert_char>
	while (ENTER[i])
 8001aac:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <sigint+0x44>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ef      	bne.n	8001a98 <sigint+0x18>
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	0800c8c0 	.word	0x0800c8c0
 8001ac8:	0800c964 	.word	0x0800c964
 8001acc:	20000004 	.word	0x20000004

08001ad0 <init_microrl>:

void init_microrl(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <init_microrl+0x38>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	490c      	ldr	r1, [pc, #48]	; (8001b0c <init_microrl+0x3c>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe ff7e 	bl	80009dc <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <init_microrl+0x38>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	490a      	ldr	r1, [pc, #40]	; (8001b10 <init_microrl+0x40>)
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe ffc4 	bl	8000a74 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <init_microrl+0x38>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4908      	ldr	r1, [pc, #32]	; (8001b14 <init_microrl+0x44>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe ffb0 	bl	8000a58 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <init_microrl+0x38>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4906      	ldr	r1, [pc, #24]	; (8001b18 <init_microrl+0x48>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe ffc6 	bl	8000a90 <microrl_set_sigint_callback>
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000004 	.word	0x20000004
 8001b0c:	08001475 	.word	0x08001475
 8001b10:	08001769 	.word	0x08001769
 8001b14:	080018fd 	.word	0x080018fd
 8001b18:	08001a81 	.word	0x08001a81

08001b1c <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <clear_screen+0x20>)
 8001b28:	f7ff fca4 	bl	8001474 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8001b2c:	4804      	ldr	r0, [pc, #16]	; (8001b40 <clear_screen+0x24>)
 8001b2e:	f7ff fca1 	bl	8001474 <print>
	return 0;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	0800c970 	.word	0x0800c970
 8001b40:	0800c978 	.word	0x0800c978

08001b44 <set_CDC_ready>:


void set_CDC_ready(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <set_CDC_ready+0x14>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	701a      	strb	r2, [r3, #0]
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000209 	.word	0x20000209

08001b5c <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <color_toggle+0x30>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	f083 0301 	eor.w	r3, r3, #1
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf14      	ite	ne
 8001b74:	2301      	movne	r3, #1
 8001b76:	2300      	moveq	r3, #0
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <color_toggle+0x30>)
 8001b7c:	701a      	strb	r2, [r3, #0]
	return 0;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000208 	.word	0x20000208

08001b90 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	color_out = 1;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <color_on+0x28>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 8001ba0:	2105      	movs	r1, #5
 8001ba2:	4806      	ldr	r0, [pc, #24]	; (8001bbc <color_on+0x2c>)
 8001ba4:	f7ff fcd2 	bl	800154c <print_color>
	print(ENDL);
 8001ba8:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <color_on+0x30>)
 8001baa:	f7ff fc63 	bl	8001474 <print>
	return 0;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000208 	.word	0x20000208
 8001bbc:	0800c97c 	.word	0x0800c97c
 8001bc0:	0800c8c0 	.word	0x0800c8c0

08001bc4 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
	color_out = 0;
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <color_off+0x28>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8001bd4:	4806      	ldr	r0, [pc, #24]	; (8001bf0 <color_off+0x2c>)
 8001bd6:	f7ff fc4d 	bl	8001474 <print>
	print(ENDL);
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <color_off+0x30>)
 8001bdc:	f7ff fc4a 	bl	8001474 <print>
	return 0;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000208 	.word	0x20000208
 8001bf0:	0800c990 	.word	0x0800c990
 8001bf4:	0800c8c0 	.word	0x0800c8c0

08001bf8 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
	if (color_out)
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <color_show+0x34>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d004      	beq.n	8001c14 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8001c0a:	2105      	movs	r1, #5
 8001c0c:	4808      	ldr	r0, [pc, #32]	; (8001c30 <color_show+0x38>)
 8001c0e:	f7ff fc9d 	bl	800154c <print_color>
 8001c12:	e002      	b.n	8001c1a <color_show+0x22>
	else
		print ("Color output is OFF");
 8001c14:	4807      	ldr	r0, [pc, #28]	; (8001c34 <color_show+0x3c>)
 8001c16:	f7ff fc2d 	bl	8001474 <print>
	print(ENDL);
 8001c1a:	4807      	ldr	r0, [pc, #28]	; (8001c38 <color_show+0x40>)
 8001c1c:	f7ff fc2a 	bl	8001474 <print>
	return 0;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000208 	.word	0x20000208
 8001c30:	0800c97c 	.word	0x0800c97c
 8001c34:	0800c990 	.word	0x0800c990
 8001c38:	0800c8c0 	.word	0x0800c8c0

08001c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_MspInit+0x68>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_MspInit+0x68>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6193      	str	r3, [r2, #24]
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_MspInit+0x68>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_MspInit+0x68>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	4a11      	ldr	r2, [pc, #68]	; (8001ca4 <HAL_MspInit+0x68>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	61d3      	str	r3, [r2, #28]
 8001c66:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <HAL_MspInit+0x68>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	210f      	movs	r1, #15
 8001c76:	f06f 0001 	mvn.w	r0, #1
 8001c7a:	f000 f9e0 	bl	800203e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_MspInit+0x6c>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_MspInit+0x6c>)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010000 	.word	0x40010000

08001cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	; 0x30
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	2019      	movs	r0, #25
 8001cc2:	f000 f9bc 	bl	800203e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001cc6:	2019      	movs	r0, #25
 8001cc8:	f000 f9d5 	bl	8002076 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <HAL_InitTick+0x9c>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <HAL_InitTick+0x9c>)
 8001cd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_InitTick+0x9c>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ce4:	f107 0210 	add.w	r2, r7, #16
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 fc32 	bl	8004558 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001cf4:	f002 fc1c 	bl	8004530 <HAL_RCC_GetPCLK2Freq>
 8001cf8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfc:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <HAL_InitTick+0xa0>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0c9b      	lsrs	r3, r3, #18
 8001d04:	3b01      	subs	r3, #1
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_InitTick+0xa4>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <HAL_InitTick+0xa8>)
 8001d0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_InitTick+0xa4>)
 8001d10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d14:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <HAL_InitTick+0xa4>)
 8001d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_InitTick+0xa4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_InitTick+0xa4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d28:	4809      	ldr	r0, [pc, #36]	; (8001d50 <HAL_InitTick+0xa4>)
 8001d2a:	f002 fd19 	bl	8004760 <HAL_TIM_Base_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d104      	bne.n	8001d3e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001d34:	4806      	ldr	r0, [pc, #24]	; (8001d50 <HAL_InitTick+0xa4>)
 8001d36:	f002 fd6b 	bl	8004810 <HAL_TIM_Base_Start_IT>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	e000      	b.n	8001d40 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3730      	adds	r7, #48	; 0x30
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	431bde83 	.word	0x431bde83
 8001d50:	20001e58 	.word	0x20001e58
 8001d54:	40012c00 	.word	0x40012c00

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <NMI_Handler+0x4>

08001d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <HardFault_Handler+0x4>

08001d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <MemManage_Handler+0x4>

08001d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <BusFault_Handler+0x4>

08001d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <UsageFault_Handler+0x4>

08001d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
	...

08001d84 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d8a:	f000 fc69 	bl	8002660 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20002b78 	.word	0x20002b78

08001d98 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <TIM1_UP_IRQHandler+0x10>)
 8001d9e:	f002 fd89 	bl	80048b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20001e58 	.word	0x20001e58

08001dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <_sbrk+0x5c>)
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <_sbrk+0x60>)
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <_sbrk+0x64>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <_sbrk+0x64>)
 8001dca:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <_sbrk+0x68>)
 8001dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d207      	bcs.n	8001dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ddc:	f00a f87a 	bl	800bed4 <__errno>
 8001de0:	4603      	mov	r3, r0
 8001de2:	220c      	movs	r2, #12
 8001de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dea:	e009      	b.n	8001e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <_sbrk+0x64>)
 8001dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20005000 	.word	0x20005000
 8001e0c:	00000400 	.word	0x00000400
 8001e10:	2000020c 	.word	0x2000020c
 8001e14:	20002e78 	.word	0x20002e78

08001e18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e24:	480c      	ldr	r0, [pc, #48]	; (8001e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e26:	490d      	ldr	r1, [pc, #52]	; (8001e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e3c:	4c0a      	ldr	r4, [pc, #40]	; (8001e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e4a:	f7ff ffe5 	bl	8001e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4e:	f00a f847 	bl	800bee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e52:	f7fe fa83 	bl	800035c <main>
  bx lr
 8001e56:	4770      	bx	lr
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001e60:	0800ce20 	.word	0x0800ce20
  ldr r2, =_sbss
 8001e64:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001e68:	20002e74 	.word	0x20002e74

08001e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC1_2_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_Init+0x28>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <HAL_Init+0x28>)
 8001e7a:	f043 0310 	orr.w	r3, r3, #16
 8001e7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 f8d1 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff ff10 	bl	8001cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e8c:	f7ff fed6 	bl	8001c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40022000 	.word	0x40022000

08001e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_IncTick+0x1c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_IncTick+0x20>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a03      	ldr	r2, [pc, #12]	; (8001ebc <HAL_IncTick+0x20>)
 8001eae:	6013      	str	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	20000010 	.word	0x20000010
 8001ebc:	20001ea0 	.word	0x20001ea0

08001ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec4:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <HAL_GetTick+0x10>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	20001ea0 	.word	0x20001ea0

08001ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f06:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	60d3      	str	r3, [r2, #12]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <__NVIC_GetPriorityGrouping+0x18>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	f003 0307 	and.w	r3, r3, #7
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	db0b      	blt.n	8001f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	f003 021f 	and.w	r2, r3, #31
 8001f50:	4906      	ldr	r1, [pc, #24]	; (8001f6c <__NVIC_EnableIRQ+0x34>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	2001      	movs	r0, #1
 8001f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db0a      	blt.n	8001f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	490c      	ldr	r1, [pc, #48]	; (8001fbc <__NVIC_SetPriority+0x4c>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f98:	e00a      	b.n	8001fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <__NVIC_SetPriority+0x50>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	0112      	lsls	r2, r2, #4
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	440b      	add	r3, r1
 8001fae:	761a      	strb	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000e100 	.word	0xe000e100
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f1c3 0307 	rsb	r3, r3, #7
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf28      	it	cs
 8001fe2:	2304      	movcs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d902      	bls.n	8001ff4 <NVIC_EncodePriority+0x30>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3b03      	subs	r3, #3
 8001ff2:	e000      	b.n	8001ff6 <NVIC_EncodePriority+0x32>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43d9      	mvns	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	4313      	orrs	r3, r2
         );
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff4f 	bl	8001ed4 <__NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff64 	bl	8001f1c <__NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ffb2 	bl	8001fc4 <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff81 	bl	8001f70 <__NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff57 	bl	8001f38 <__NVIC_EnableIRQ>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002094:	b480      	push	{r7}
 8002096:	b08b      	sub	sp, #44	; 0x2c
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a6:	e169      	b.n	800237c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020a8:	2201      	movs	r2, #1
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	f040 8158 	bne.w	8002376 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4a9a      	ldr	r2, [pc, #616]	; (8002334 <HAL_GPIO_Init+0x2a0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d05e      	beq.n	800218e <HAL_GPIO_Init+0xfa>
 80020d0:	4a98      	ldr	r2, [pc, #608]	; (8002334 <HAL_GPIO_Init+0x2a0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d875      	bhi.n	80021c2 <HAL_GPIO_Init+0x12e>
 80020d6:	4a98      	ldr	r2, [pc, #608]	; (8002338 <HAL_GPIO_Init+0x2a4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d058      	beq.n	800218e <HAL_GPIO_Init+0xfa>
 80020dc:	4a96      	ldr	r2, [pc, #600]	; (8002338 <HAL_GPIO_Init+0x2a4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d86f      	bhi.n	80021c2 <HAL_GPIO_Init+0x12e>
 80020e2:	4a96      	ldr	r2, [pc, #600]	; (800233c <HAL_GPIO_Init+0x2a8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d052      	beq.n	800218e <HAL_GPIO_Init+0xfa>
 80020e8:	4a94      	ldr	r2, [pc, #592]	; (800233c <HAL_GPIO_Init+0x2a8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d869      	bhi.n	80021c2 <HAL_GPIO_Init+0x12e>
 80020ee:	4a94      	ldr	r2, [pc, #592]	; (8002340 <HAL_GPIO_Init+0x2ac>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d04c      	beq.n	800218e <HAL_GPIO_Init+0xfa>
 80020f4:	4a92      	ldr	r2, [pc, #584]	; (8002340 <HAL_GPIO_Init+0x2ac>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d863      	bhi.n	80021c2 <HAL_GPIO_Init+0x12e>
 80020fa:	4a92      	ldr	r2, [pc, #584]	; (8002344 <HAL_GPIO_Init+0x2b0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d046      	beq.n	800218e <HAL_GPIO_Init+0xfa>
 8002100:	4a90      	ldr	r2, [pc, #576]	; (8002344 <HAL_GPIO_Init+0x2b0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d85d      	bhi.n	80021c2 <HAL_GPIO_Init+0x12e>
 8002106:	2b12      	cmp	r3, #18
 8002108:	d82a      	bhi.n	8002160 <HAL_GPIO_Init+0xcc>
 800210a:	2b12      	cmp	r3, #18
 800210c:	d859      	bhi.n	80021c2 <HAL_GPIO_Init+0x12e>
 800210e:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <HAL_GPIO_Init+0x80>)
 8002110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002114:	0800218f 	.word	0x0800218f
 8002118:	08002169 	.word	0x08002169
 800211c:	0800217b 	.word	0x0800217b
 8002120:	080021bd 	.word	0x080021bd
 8002124:	080021c3 	.word	0x080021c3
 8002128:	080021c3 	.word	0x080021c3
 800212c:	080021c3 	.word	0x080021c3
 8002130:	080021c3 	.word	0x080021c3
 8002134:	080021c3 	.word	0x080021c3
 8002138:	080021c3 	.word	0x080021c3
 800213c:	080021c3 	.word	0x080021c3
 8002140:	080021c3 	.word	0x080021c3
 8002144:	080021c3 	.word	0x080021c3
 8002148:	080021c3 	.word	0x080021c3
 800214c:	080021c3 	.word	0x080021c3
 8002150:	080021c3 	.word	0x080021c3
 8002154:	080021c3 	.word	0x080021c3
 8002158:	08002171 	.word	0x08002171
 800215c:	08002185 	.word	0x08002185
 8002160:	4a79      	ldr	r2, [pc, #484]	; (8002348 <HAL_GPIO_Init+0x2b4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002166:	e02c      	b.n	80021c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	623b      	str	r3, [r7, #32]
          break;
 800216e:	e029      	b.n	80021c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	3304      	adds	r3, #4
 8002176:	623b      	str	r3, [r7, #32]
          break;
 8002178:	e024      	b.n	80021c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	3308      	adds	r3, #8
 8002180:	623b      	str	r3, [r7, #32]
          break;
 8002182:	e01f      	b.n	80021c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	330c      	adds	r3, #12
 800218a:	623b      	str	r3, [r7, #32]
          break;
 800218c:	e01a      	b.n	80021c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d102      	bne.n	800219c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002196:	2304      	movs	r3, #4
 8002198:	623b      	str	r3, [r7, #32]
          break;
 800219a:	e013      	b.n	80021c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d105      	bne.n	80021b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a4:	2308      	movs	r3, #8
 80021a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	611a      	str	r2, [r3, #16]
          break;
 80021ae:	e009      	b.n	80021c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b0:	2308      	movs	r3, #8
 80021b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	615a      	str	r2, [r3, #20]
          break;
 80021ba:	e003      	b.n	80021c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021bc:	2300      	movs	r3, #0
 80021be:	623b      	str	r3, [r7, #32]
          break;
 80021c0:	e000      	b.n	80021c4 <HAL_GPIO_Init+0x130>
          break;
 80021c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2bff      	cmp	r3, #255	; 0xff
 80021c8:	d801      	bhi.n	80021ce <HAL_GPIO_Init+0x13a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	e001      	b.n	80021d2 <HAL_GPIO_Init+0x13e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3304      	adds	r3, #4
 80021d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2bff      	cmp	r3, #255	; 0xff
 80021d8:	d802      	bhi.n	80021e0 <HAL_GPIO_Init+0x14c>
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	e002      	b.n	80021e6 <HAL_GPIO_Init+0x152>
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	3b08      	subs	r3, #8
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	210f      	movs	r1, #15
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	401a      	ands	r2, r3
 80021f8:	6a39      	ldr	r1, [r7, #32]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	431a      	orrs	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80b1 	beq.w	8002376 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002214:	4b4d      	ldr	r3, [pc, #308]	; (800234c <HAL_GPIO_Init+0x2b8>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a4c      	ldr	r2, [pc, #304]	; (800234c <HAL_GPIO_Init+0x2b8>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6193      	str	r3, [r2, #24]
 8002220:	4b4a      	ldr	r3, [pc, #296]	; (800234c <HAL_GPIO_Init+0x2b8>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800222c:	4a48      	ldr	r2, [pc, #288]	; (8002350 <HAL_GPIO_Init+0x2bc>)
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	220f      	movs	r2, #15
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4013      	ands	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a40      	ldr	r2, [pc, #256]	; (8002354 <HAL_GPIO_Init+0x2c0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d013      	beq.n	8002280 <HAL_GPIO_Init+0x1ec>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a3f      	ldr	r2, [pc, #252]	; (8002358 <HAL_GPIO_Init+0x2c4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d00d      	beq.n	800227c <HAL_GPIO_Init+0x1e8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a3e      	ldr	r2, [pc, #248]	; (800235c <HAL_GPIO_Init+0x2c8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d007      	beq.n	8002278 <HAL_GPIO_Init+0x1e4>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a3d      	ldr	r2, [pc, #244]	; (8002360 <HAL_GPIO_Init+0x2cc>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d101      	bne.n	8002274 <HAL_GPIO_Init+0x1e0>
 8002270:	2303      	movs	r3, #3
 8002272:	e006      	b.n	8002282 <HAL_GPIO_Init+0x1ee>
 8002274:	2304      	movs	r3, #4
 8002276:	e004      	b.n	8002282 <HAL_GPIO_Init+0x1ee>
 8002278:	2302      	movs	r3, #2
 800227a:	e002      	b.n	8002282 <HAL_GPIO_Init+0x1ee>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <HAL_GPIO_Init+0x1ee>
 8002280:	2300      	movs	r3, #0
 8002282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002284:	f002 0203 	and.w	r2, r2, #3
 8002288:	0092      	lsls	r2, r2, #2
 800228a:	4093      	lsls	r3, r2
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002292:	492f      	ldr	r1, [pc, #188]	; (8002350 <HAL_GPIO_Init+0x2bc>)
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	3302      	adds	r3, #2
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022ac:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	492c      	ldr	r1, [pc, #176]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022ba:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4928      	ldr	r1, [pc, #160]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d006      	beq.n	80022e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022d4:	4b23      	ldr	r3, [pc, #140]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	4922      	ldr	r1, [pc, #136]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
 80022e0:	e006      	b.n	80022f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	491e      	ldr	r1, [pc, #120]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d006      	beq.n	800230a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	4918      	ldr	r1, [pc, #96]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	608b      	str	r3, [r1, #8]
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	43db      	mvns	r3, r3
 8002312:	4914      	ldr	r1, [pc, #80]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 8002314:	4013      	ands	r3, r2
 8002316:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d021      	beq.n	8002368 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	490e      	ldr	r1, [pc, #56]	; (8002364 <HAL_GPIO_Init+0x2d0>)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	60cb      	str	r3, [r1, #12]
 8002330:	e021      	b.n	8002376 <HAL_GPIO_Init+0x2e2>
 8002332:	bf00      	nop
 8002334:	10320000 	.word	0x10320000
 8002338:	10310000 	.word	0x10310000
 800233c:	10220000 	.word	0x10220000
 8002340:	10210000 	.word	0x10210000
 8002344:	10120000 	.word	0x10120000
 8002348:	10110000 	.word	0x10110000
 800234c:	40021000 	.word	0x40021000
 8002350:	40010000 	.word	0x40010000
 8002354:	40010800 	.word	0x40010800
 8002358:	40010c00 	.word	0x40010c00
 800235c:	40011000 	.word	0x40011000
 8002360:	40011400 	.word	0x40011400
 8002364:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_GPIO_Init+0x304>)
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	43db      	mvns	r3, r3
 8002370:	4909      	ldr	r1, [pc, #36]	; (8002398 <HAL_GPIO_Init+0x304>)
 8002372:	4013      	ands	r3, r2
 8002374:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	3301      	adds	r3, #1
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	fa22 f303 	lsr.w	r3, r2, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	f47f ae8e 	bne.w	80020a8 <HAL_GPIO_Init+0x14>
  }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	372c      	adds	r7, #44	; 0x2c
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	40010400 	.word	0x40010400

0800239c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
 80023a8:	4613      	mov	r3, r2
 80023aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ac:	787b      	ldrb	r3, [r7, #1]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023b8:	e003      	b.n	80023c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	041a      	lsls	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	611a      	str	r2, [r3, #16]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4013      	ands	r3, r2
 80023e4:	041a      	lsls	r2, r3, #16
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43d9      	mvns	r1, r3
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	400b      	ands	r3, r1
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	611a      	str	r2, [r3, #16]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002400:	b08b      	sub	sp, #44	; 0x2c
 8002402:	af06      	add	r7, sp, #24
 8002404:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0fd      	b.n	800260c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d106      	bne.n	800242a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f009 faab 	bl	800b980 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2203      	movs	r2, #3
 800242e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f002 fc02 	bl	8004c40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	687e      	ldr	r6, [r7, #4]
 8002444:	466d      	mov	r5, sp
 8002446:	f106 0410 	add.w	r4, r6, #16
 800244a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800244c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	602b      	str	r3, [r5, #0]
 8002452:	1d33      	adds	r3, r6, #4
 8002454:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002456:	6838      	ldr	r0, [r7, #0]
 8002458:	f002 fbcc 	bl	8004bf4 <USB_CoreInit>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0ce      	b.n	800260c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f002 fbfd 	bl	8004c74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	e04c      	b.n	800251a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	3301      	adds	r3, #1
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	b298      	uxth	r0, r3
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	3336      	adds	r3, #54	; 0x36
 80024be:	4602      	mov	r2, r0
 80024c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	440b      	add	r3, r1
 80024d2:	3303      	adds	r3, #3
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	440b      	add	r3, r1
 80024e6:	3338      	adds	r3, #56	; 0x38
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	333c      	adds	r3, #60	; 0x3c
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	440b      	add	r3, r1
 800250e:	3340      	adds	r3, #64	; 0x40
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	3301      	adds	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	d3ad      	bcc.n	8002480 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e044      	b.n	80025b4 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	f203 1369 	addw	r3, r3, #361	; 0x169
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002552:	7bfa      	ldrb	r2, [r7, #15]
 8002554:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	440b      	add	r3, r1
 8002564:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	440b      	add	r3, r1
 800257a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	440b      	add	r3, r1
 8002590:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	440b      	add	r3, r1
 80025a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	3301      	adds	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d3b5      	bcc.n	800252a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	687e      	ldr	r6, [r7, #4]
 80025c6:	466d      	mov	r5, sp
 80025c8:	f106 0410 	add.w	r4, r6, #16
 80025cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	602b      	str	r3, [r5, #0]
 80025d4:	1d33      	adds	r3, r6, #4
 80025d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d8:	6838      	ldr	r0, [r7, #0]
 80025da:	f002 fb57 	bl	8004c8c <USB_DevInit>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e00d      	b.n	800260c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f004 fcc8 	bl	8006f9a <USB_DevDisconnect>

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002614 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_PCD_Start+0x16>
 8002626:	2302      	movs	r3, #2
 8002628:	e016      	b.n	8002658 <HAL_PCD_Start+0x44>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f002 faec 	bl	8004c14 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800263c:	2101      	movs	r1, #1
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f009 fc11 	bl	800be66 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f004 fc9c 	bl	8006f86 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f004 fc9e 	bl	8006fae <USB_ReadInterrupts>
 8002672:	4603      	mov	r3, r0
 8002674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800267c:	d102      	bne.n	8002684 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fb61 	bl	8002d46 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f004 fc90 	bl	8006fae <USB_ReadInterrupts>
 800268e:	4603      	mov	r3, r0
 8002690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002698:	d112      	bne.n	80026c0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ac:	b292      	uxth	r2, r2
 80026ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f009 f9df 	bl	800ba76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80026b8:	2100      	movs	r1, #0
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f925 	bl	800290a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f004 fc72 	bl	8006fae <USB_ReadInterrupts>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026d4:	d10b      	bne.n	80026ee <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026e8:	b292      	uxth	r2, r2
 80026ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 fc5b 	bl	8006fae <USB_ReadInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002702:	d10b      	bne.n	800271c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800270c:	b29a      	uxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002716:	b292      	uxth	r2, r2
 8002718:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f004 fc44 	bl	8006fae <USB_ReadInterrupts>
 8002726:	4603      	mov	r3, r0
 8002728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002730:	d126      	bne.n	8002780 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800273a:	b29a      	uxth	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0204 	bic.w	r2, r2, #4
 8002744:	b292      	uxth	r2, r2
 8002746:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002752:	b29a      	uxth	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0208 	bic.w	r2, r2, #8
 800275c:	b292      	uxth	r2, r2
 800275e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f009 f9c0 	bl	800bae8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002770:	b29a      	uxth	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800277a:	b292      	uxth	r2, r2
 800277c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f004 fc12 	bl	8006fae <USB_ReadInterrupts>
 800278a:	4603      	mov	r3, r0
 800278c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002794:	f040 8084 	bne.w	80028a0 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002798:	2300      	movs	r3, #0
 800279a:	77fb      	strb	r3, [r7, #31]
 800279c:	e011      	b.n	80027c2 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	7ffb      	ldrb	r3, [r7, #31]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	441a      	add	r2, r3
 80027aa:	7ffb      	ldrb	r3, [r7, #31]
 80027ac:	8812      	ldrh	r2, [r2, #0]
 80027ae:	b292      	uxth	r2, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	f107 0120 	add.w	r1, r7, #32
 80027b6:	440b      	add	r3, r1
 80027b8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80027bc:	7ffb      	ldrb	r3, [r7, #31]
 80027be:	3301      	adds	r3, #1
 80027c0:	77fb      	strb	r3, [r7, #31]
 80027c2:	7ffb      	ldrb	r3, [r7, #31]
 80027c4:	2b07      	cmp	r3, #7
 80027c6:	d9ea      	bls.n	800279e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	b292      	uxth	r2, r2
 80027dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	b292      	uxth	r2, r2
 80027f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80027f8:	bf00      	nop
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002802:	b29b      	uxth	r3, r3
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f6      	beq.n	80027fa <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002814:	b29a      	uxth	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800281e:	b292      	uxth	r2, r2
 8002820:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002824:	2300      	movs	r3, #0
 8002826:	77fb      	strb	r3, [r7, #31]
 8002828:	e010      	b.n	800284c <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800282a:	7ffb      	ldrb	r3, [r7, #31]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	4611      	mov	r1, r2
 8002832:	7ffa      	ldrb	r2, [r7, #31]
 8002834:	0092      	lsls	r2, r2, #2
 8002836:	440a      	add	r2, r1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	f107 0120 	add.w	r1, r7, #32
 800283e:	440b      	add	r3, r1
 8002840:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002844:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002846:	7ffb      	ldrb	r3, [r7, #31]
 8002848:	3301      	adds	r3, #1
 800284a:	77fb      	strb	r3, [r7, #31]
 800284c:	7ffb      	ldrb	r3, [r7, #31]
 800284e:	2b07      	cmp	r3, #7
 8002850:	d9eb      	bls.n	800282a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800285a:	b29a      	uxth	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0208 	orr.w	r2, r2, #8
 8002864:	b292      	uxth	r2, r2
 8002866:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002872:	b29a      	uxth	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800287c:	b292      	uxth	r2, r2
 800287e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800288a:	b29a      	uxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0204 	orr.w	r2, r2, #4
 8002894:	b292      	uxth	r2, r2
 8002896:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f009 f90a 	bl	800bab4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 fb82 	bl	8006fae <USB_ReadInterrupts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b4:	d10e      	bne.n	80028d4 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028be:	b29a      	uxth	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028c8:	b292      	uxth	r2, r2
 80028ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f009 f8c3 	bl	800ba5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f004 fb68 	bl	8006fae <USB_ReadInterrupts>
 80028de:	4603      	mov	r3, r0
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e8:	d10b      	bne.n	8002902 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028fc:	b292      	uxth	r2, r2
 80028fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002902:	bf00      	nop
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_PCD_SetAddress+0x1a>
 8002920:	2302      	movs	r3, #2
 8002922:	e013      	b.n	800294c <HAL_PCD_SetAddress+0x42>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f004 fb0f 	bl	8006f60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	4603      	mov	r3, r0
 8002964:	70fb      	strb	r3, [r7, #3]
 8002966:	460b      	mov	r3, r1
 8002968:	803b      	strh	r3, [r7, #0]
 800296a:	4613      	mov	r3, r2
 800296c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002976:	2b00      	cmp	r3, #0
 8002978:	da0e      	bge.n	8002998 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	705a      	strb	r2, [r3, #1]
 8002996:	e00e      	b.n	80029b6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	f003 0207 	and.w	r2, r3, #7
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029c2:	883a      	ldrh	r2, [r7, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	78ba      	ldrb	r2, [r7, #2]
 80029cc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	785b      	ldrb	r3, [r3, #1]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d004      	beq.n	80029e0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029e0:	78bb      	ldrb	r3, [r7, #2]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d102      	bne.n	80029ec <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_PCD_EP_Open+0xa6>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e00e      	b.n	8002a18 <HAL_PCD_EP_Open+0xc4>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68f9      	ldr	r1, [r7, #12]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 f95f 	bl	8004ccc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002a16:	7afb      	ldrb	r3, [r7, #11]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	da0e      	bge.n	8002a52 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	705a      	strb	r2, [r3, #1]
 8002a50:	e00e      	b.n	8002a70 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	f003 0207 	and.w	r2, r3, #7
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4413      	add	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_PCD_EP_Close+0x6a>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e00e      	b.n	8002aa8 <HAL_PCD_EP_Close+0x88>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68f9      	ldr	r1, [r7, #12]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f002 fc81 	bl	80053a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	460b      	mov	r3, r1
 8002abe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ac0:	7afb      	ldrb	r3, [r7, #11]
 8002ac2:	f003 0207 	and.w	r2, r3, #7
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2200      	movs	r2, #0
 8002aee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002af0:	7afb      	ldrb	r3, [r7, #11]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002afc:	7afb      	ldrb	r3, [r7, #11]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6979      	ldr	r1, [r7, #20]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f002 fe33 	bl	8005778 <USB_EPStartXfer>
 8002b12:	e005      	b.n	8002b20 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6979      	ldr	r1, [r7, #20]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f002 fe2c 	bl	8005778 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	f003 0207 	and.w	r2, r3, #7
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002b4c:	681b      	ldr	r3, [r3, #0]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	460b      	mov	r3, r1
 8002b66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b68:	7afb      	ldrb	r3, [r7, #11]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba4:	7afb      	ldrb	r3, [r7, #11]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bb0:	7afb      	ldrb	r3, [r7, #11]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6979      	ldr	r1, [r7, #20]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 fdd9 	bl	8005778 <USB_EPStartXfer>
 8002bc6:	e005      	b.n	8002bd4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6979      	ldr	r1, [r7, #20]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f002 fdd2 	bl	8005778 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	f003 0207 	and.w	r2, r3, #7
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d901      	bls.n	8002bfc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e04c      	b.n	8002c96 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	da0e      	bge.n	8002c22 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4413      	add	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	705a      	strb	r2, [r3, #1]
 8002c20:	e00c      	b.n	8002c3c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	4413      	add	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_PCD_EP_SetStall+0x7e>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e01c      	b.n	8002c96 <HAL_PCD_EP_SetStall+0xb8>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68f9      	ldr	r1, [r7, #12]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f004 f87b 	bl	8006d66 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d108      	bne.n	8002c8c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002c84:	4619      	mov	r1, r3
 8002c86:	4610      	mov	r0, r2
 8002c88:	f004 f9a0 	bl	8006fcc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 020f 	and.w	r2, r3, #15
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d901      	bls.n	8002cbc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e040      	b.n	8002d3e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	da0e      	bge.n	8002ce2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	705a      	strb	r2, [r3, #1]
 8002ce0:	e00e      	b.n	8002d00 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 0207 	and.w	r2, r3, #7
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_PCD_EP_ClrStall+0x82>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e00e      	b.n	8002d3e <HAL_PCD_EP_ClrStall+0xa0>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68f9      	ldr	r1, [r7, #12]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f004 f869 	bl	8006e06 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b08e      	sub	sp, #56	; 0x38
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d4e:	e2ec      	b.n	800332a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d58:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002d66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 8161 	bne.w	8003032 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d152      	bne.n	8002e20 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	81fb      	strh	r3, [r7, #14]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	89fb      	ldrh	r3, [r7, #14]
 8002d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3328      	adds	r3, #40	; 0x28
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4413      	add	r3, r2
 8002db8:	3302      	adds	r3, #2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	441a      	add	r2, r3
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002dde:	2100      	movs	r1, #0
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f008 fe20 	bl	800ba26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 829b 	beq.w	800332a <PCD_EP_ISR_Handler+0x5e4>
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f040 8296 	bne.w	800332a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	b292      	uxth	r2, r2
 8002e12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e1e:	e284      	b.n	800332a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d034      	beq.n	8002ea4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3306      	adds	r3, #6
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f004 f8f7 	bl	800706c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	823b      	strh	r3, [r7, #16]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	8a3a      	ldrh	r2, [r7, #16]
 8002e94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e98:	b292      	uxth	r2, r2
 8002e9a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f008 fd95 	bl	800b9cc <HAL_PCD_SetupStageCallback>
 8002ea2:	e242      	b.n	800332a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ea4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f280 823e 	bge.w	800332a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002eba:	4013      	ands	r3, r2
 8002ebc:	83bb      	strh	r3, [r7, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	8bba      	ldrh	r2, [r7, #28]
 8002ec4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ec8:	b292      	uxth	r2, r2
 8002eca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3306      	adds	r3, #6
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d019      	beq.n	8002f34 <PCD_EP_ISR_Handler+0x1ee>
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d015      	beq.n	8002f34 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	6959      	ldr	r1, [r3, #20]
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	f004 f8a7 	bl	800706c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	441a      	add	r2, r3
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f008 fd5e 	bl	800b9f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f040 81f2 	bne.w	800332a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d112      	bne.n	8002f94 <PCD_EP_ISR_Handler+0x24e>
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	801a      	strh	r2, [r3, #0]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	801a      	strh	r2, [r3, #0]
 8002f92:	e02f      	b.n	8002ff4 <PCD_EP_ISR_Handler+0x2ae>
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b3e      	cmp	r3, #62	; 0x3e
 8002f9a:	d813      	bhi.n	8002fc4 <PCD_EP_ISR_Handler+0x27e>
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	633b      	str	r3, [r7, #48]	; 0x30
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <PCD_EP_ISR_Handler+0x270>
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	029b      	lsls	r3, r3, #10
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	801a      	strh	r2, [r3, #0]
 8002fc2:	e017      	b.n	8002ff4 <PCD_EP_ISR_Handler+0x2ae>
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	633b      	str	r3, [r7, #48]	; 0x30
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <PCD_EP_ISR_Handler+0x298>
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	029b      	lsls	r3, r3, #10
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003004:	827b      	strh	r3, [r7, #18]
 8003006:	8a7b      	ldrh	r3, [r7, #18]
 8003008:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800300c:	827b      	strh	r3, [r7, #18]
 800300e:	8a7b      	ldrh	r3, [r7, #18]
 8003010:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003014:	827b      	strh	r3, [r7, #18]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	8a7b      	ldrh	r3, [r7, #18]
 800301c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302c:	b29b      	uxth	r3, r3
 800302e:	8013      	strh	r3, [r2, #0]
 8003030:	e17b      	b.n	800332a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003044:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003048:	2b00      	cmp	r3, #0
 800304a:	f280 80ea 	bge.w	8003222 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29a      	uxth	r2, r3
 8003060:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003064:	4013      	ands	r3, r2
 8003066:	853b      	strh	r3, [r7, #40]	; 0x28
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003078:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800307c:	b292      	uxth	r2, r2
 800307e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003080:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	7b1b      	ldrb	r3, [r3, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d122      	bne.n	80030e4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	3306      	adds	r3, #6
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030c6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80030c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 8087 	beq.w	80031de <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	6959      	ldr	r1, [r3, #20]
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	88da      	ldrh	r2, [r3, #6]
 80030dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030de:	f003 ffc5 	bl	800706c <USB_ReadPMA>
 80030e2:	e07c      	b.n	80031de <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	78db      	ldrb	r3, [r3, #3]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d108      	bne.n	80030fe <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80030ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030ee:	461a      	mov	r2, r3
 80030f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f927 	bl	8003346 <HAL_PCD_EP_DB_Receive>
 80030f8:	4603      	mov	r3, r0
 80030fa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80030fc:	e06f      	b.n	80031de <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003118:	847b      	strh	r3, [r7, #34]	; 0x22
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	441a      	add	r2, r3
 8003128:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800312a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800312e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003136:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800313a:	b29b      	uxth	r3, r3
 800313c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d021      	beq.n	800319c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003160:	b29b      	uxth	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	3302      	adds	r3, #2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003180:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003182:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003184:	2b00      	cmp	r3, #0
 8003186:	d02a      	beq.n	80031de <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	6959      	ldr	r1, [r3, #20]
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	891a      	ldrh	r2, [r3, #8]
 8003194:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003196:	f003 ff69 	bl	800706c <USB_ReadPMA>
 800319a:	e020      	b.n	80031de <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	461a      	mov	r2, r3
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4413      	add	r3, r2
 80031b0:	3306      	adds	r3, #6
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031c4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80031c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	6959      	ldr	r1, [r3, #20]
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	895a      	ldrh	r2, [r3, #10]
 80031d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031da:	f003 ff47 	bl	800706c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031e4:	441a      	add	r2, r3
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031f0:	441a      	add	r2, r3
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d004      	beq.n	8003208 <PCD_EP_ISR_Handler+0x4c2>
 80031fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	429a      	cmp	r2, r3
 8003206:	d206      	bcs.n	8003216 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f008 fbee 	bl	800b9f0 <HAL_PCD_DataOutStageCallback>
 8003214:	e005      	b.n	8003222 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800321c:	4618      	mov	r0, r3
 800321e:	f002 faab 	bl	8005778 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003222:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003228:	2b00      	cmp	r3, #0
 800322a:	d07e      	beq.n	800332a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800322c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	b29b      	uxth	r3, r3
 8003252:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325a:	843b      	strh	r3, [r7, #32]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	441a      	add	r2, r3
 800326a:	8c3b      	ldrh	r3, [r7, #32]
 800326c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003274:	b29b      	uxth	r3, r3
 8003276:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	78db      	ldrb	r3, [r3, #3]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d00c      	beq.n	800329a <PCD_EP_ISR_Handler+0x554>
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	78db      	ldrb	r3, [r3, #3]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800328c:	2b02      	cmp	r3, #2
 800328e:	d146      	bne.n	800331e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003290:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d141      	bne.n	800331e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	3302      	adds	r3, #2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032c2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	8bfb      	ldrh	r3, [r7, #30]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d906      	bls.n	80032dc <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	8bfb      	ldrh	r3, [r7, #30]
 80032d4:	1ad2      	subs	r2, r2, r3
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	619a      	str	r2, [r3, #24]
 80032da:	e002      	b.n	80032e2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	2200      	movs	r2, #0
 80032e0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	4619      	mov	r1, r3
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f008 fb98 	bl	800ba26 <HAL_PCD_DataInStageCallback>
 80032f6:	e018      	b.n	800332a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	8bfb      	ldrh	r3, [r7, #30]
 80032fe:	441a      	add	r2, r3
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	69da      	ldr	r2, [r3, #28]
 8003308:	8bfb      	ldrh	r3, [r7, #30]
 800330a:	441a      	add	r2, r3
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003316:	4618      	mov	r0, r3
 8003318:	f002 fa2e 	bl	8005778 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800331c:	e005      	b.n	800332a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800331e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003320:	461a      	mov	r2, r3
 8003322:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f91b 	bl	8003560 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003332:	b29b      	uxth	r3, r3
 8003334:	b21b      	sxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	f6ff ad0a 	blt.w	8002d50 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3738      	adds	r7, #56	; 0x38
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b088      	sub	sp, #32
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	4613      	mov	r3, r2
 8003352:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d07e      	beq.n	800345c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003366:	b29b      	uxth	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	3302      	adds	r3, #2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003386:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	8b7b      	ldrh	r3, [r7, #26]
 800338e:	429a      	cmp	r2, r3
 8003390:	d306      	bcc.n	80033a0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	8b7b      	ldrh	r3, [r7, #26]
 8003398:	1ad2      	subs	r2, r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	619a      	str	r2, [r3, #24]
 800339e:	e002      	b.n	80033a6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2200      	movs	r2, #0
 80033a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d123      	bne.n	80033f6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c8:	833b      	strh	r3, [r7, #24]
 80033ca:	8b3b      	ldrh	r3, [r7, #24]
 80033cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033d0:	833b      	strh	r3, [r7, #24]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	441a      	add	r2, r3
 80033e0:	8b3b      	ldrh	r3, [r7, #24]
 80033e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033f6:	88fb      	ldrh	r3, [r7, #6]
 80033f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01f      	beq.n	8003440 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	82fb      	strh	r3, [r7, #22]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	441a      	add	r2, r3
 800342a:	8afb      	ldrh	r3, [r7, #22]
 800342c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003438:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800343c:	b29b      	uxth	r3, r3
 800343e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003440:	8b7b      	ldrh	r3, [r7, #26]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 8087 	beq.w	8003556 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	6959      	ldr	r1, [r3, #20]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	891a      	ldrh	r2, [r3, #8]
 8003454:	8b7b      	ldrh	r3, [r7, #26]
 8003456:	f003 fe09 	bl	800706c <USB_ReadPMA>
 800345a:	e07c      	b.n	8003556 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003464:	b29b      	uxth	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	3306      	adds	r3, #6
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003484:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	8b7b      	ldrh	r3, [r7, #26]
 800348c:	429a      	cmp	r2, r3
 800348e:	d306      	bcc.n	800349e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	699a      	ldr	r2, [r3, #24]
 8003494:	8b7b      	ldrh	r3, [r7, #26]
 8003496:	1ad2      	subs	r2, r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	619a      	str	r2, [r3, #24]
 800349c:	e002      	b.n	80034a4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d123      	bne.n	80034f4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c6:	83fb      	strh	r3, [r7, #30]
 80034c8:	8bfb      	ldrh	r3, [r7, #30]
 80034ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034ce:	83fb      	strh	r3, [r7, #30]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	441a      	add	r2, r3
 80034de:	8bfb      	ldrh	r3, [r7, #30]
 80034e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d11f      	bne.n	800353e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	b29b      	uxth	r3, r3
 8003510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003518:	83bb      	strh	r3, [r7, #28]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	441a      	add	r2, r3
 8003528:	8bbb      	ldrh	r3, [r7, #28]
 800352a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800352e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003536:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800353a:	b29b      	uxth	r3, r3
 800353c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800353e:	8b7b      	ldrh	r3, [r7, #26]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	6959      	ldr	r1, [r3, #20]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	895a      	ldrh	r2, [r3, #10]
 8003550:	8b7b      	ldrh	r3, [r7, #26]
 8003552:	f003 fd8b 	bl	800706c <USB_ReadPMA>
    }
  }

  return count;
 8003556:	8b7b      	ldrh	r3, [r7, #26]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3720      	adds	r7, #32
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b0a2      	sub	sp, #136	; 0x88
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	4613      	mov	r3, r2
 800356c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 81c7 	beq.w	8003908 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003582:	b29b      	uxth	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	3302      	adds	r3, #2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d907      	bls.n	80035c2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035ba:	1ad2      	subs	r2, r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	619a      	str	r2, [r3, #24]
 80035c0:	e002      	b.n	80035c8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2200      	movs	r2, #0
 80035c6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f040 80b9 	bne.w	8003744 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	785b      	ldrb	r3, [r3, #1]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d126      	bne.n	8003628 <HAL_PCD_EP_DB_Transmit+0xc8>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	4413      	add	r3, r2
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	011a      	lsls	r2, r3, #4
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	4413      	add	r3, r2
 80035fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	b29b      	uxth	r3, r3
 8003608:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800360c:	b29a      	uxth	r2, r3
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	801a      	strh	r2, [r3, #0]
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800361c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003620:	b29a      	uxth	r2, r3
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	801a      	strh	r2, [r3, #0]
 8003626:	e01a      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	785b      	ldrb	r3, [r3, #1]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d116      	bne.n	800365e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	633b      	str	r3, [r7, #48]	; 0x30
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800363e:	b29b      	uxth	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	4413      	add	r3, r2
 8003646:	633b      	str	r3, [r7, #48]	; 0x30
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	011a      	lsls	r2, r3, #4
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	4413      	add	r3, r2
 8003652:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	2200      	movs	r2, #0
 800365c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	623b      	str	r3, [r7, #32]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	785b      	ldrb	r3, [r3, #1]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d126      	bne.n	80036ba <HAL_PCD_EP_DB_Transmit+0x15a>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800367a:	b29b      	uxth	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	4413      	add	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	011a      	lsls	r2, r3, #4
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	4413      	add	r3, r2
 800368e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800369e:	b29a      	uxth	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	801a      	strh	r2, [r3, #0]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	801a      	strh	r2, [r3, #0]
 80036b8:	e017      	b.n	80036ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	785b      	ldrb	r3, [r3, #1]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d113      	bne.n	80036ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	4413      	add	r3, r2
 80036d2:	623b      	str	r3, [r7, #32]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	011a      	lsls	r2, r3, #4
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	4413      	add	r3, r2
 80036de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036e2:	61fb      	str	r3, [r7, #28]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2200      	movs	r2, #0
 80036e8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4619      	mov	r1, r3
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f008 f998 	bl	800ba26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 82d4 	beq.w	8003caa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	b29b      	uxth	r3, r3
 8003714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371c:	827b      	strh	r3, [r7, #18]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	441a      	add	r2, r3
 800372c:	8a7b      	ldrh	r3, [r7, #18]
 800372e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003736:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800373a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800373e:	b29b      	uxth	r3, r3
 8003740:	8013      	strh	r3, [r2, #0]
 8003742:	e2b2      	b.n	8003caa <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d021      	beq.n	8003792 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	b29b      	uxth	r3, r3
 8003760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003768:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	441a      	add	r2, r3
 800377a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800377e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800378a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800378e:	b29b      	uxth	r3, r3
 8003790:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003798:	2b01      	cmp	r3, #1
 800379a:	f040 8286 	bne.w	8003caa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037a6:	441a      	add	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037b4:	441a      	add	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d309      	bcc.n	80037da <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	6a1a      	ldr	r2, [r3, #32]
 80037d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d2:	1ad2      	subs	r2, r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	621a      	str	r2, [r3, #32]
 80037d8:	e015      	b.n	8003806 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d107      	bne.n	80037f2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80037e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037f0:	e009      	b.n	8003806 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2200      	movs	r2, #0
 8003804:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	785b      	ldrb	r3, [r3, #1]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d155      	bne.n	80038ba <HAL_PCD_EP_DB_Transmit+0x35a>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	63bb      	str	r3, [r7, #56]	; 0x38
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800381c:	b29b      	uxth	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003822:	4413      	add	r3, r2
 8003824:	63bb      	str	r3, [r7, #56]	; 0x38
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	011a      	lsls	r2, r3, #4
 800382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382e:	4413      	add	r3, r2
 8003830:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003834:	637b      	str	r3, [r7, #52]	; 0x34
 8003836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003838:	2b00      	cmp	r3, #0
 800383a:	d112      	bne.n	8003862 <HAL_PCD_EP_DB_Transmit+0x302>
 800383c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	b29b      	uxth	r3, r3
 8003842:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003846:	b29a      	uxth	r2, r3
 8003848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384a:	801a      	strh	r2, [r3, #0]
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	b29b      	uxth	r3, r3
 8003852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800385a:	b29a      	uxth	r2, r3
 800385c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385e:	801a      	strh	r2, [r3, #0]
 8003860:	e047      	b.n	80038f2 <HAL_PCD_EP_DB_Transmit+0x392>
 8003862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003864:	2b3e      	cmp	r3, #62	; 0x3e
 8003866:	d811      	bhi.n	800388c <HAL_PCD_EP_DB_Transmit+0x32c>
 8003868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386a:	085b      	lsrs	r3, r3, #1
 800386c:	64bb      	str	r3, [r7, #72]	; 0x48
 800386e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_PCD_EP_DB_Transmit+0x31e>
 8003878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800387a:	3301      	adds	r3, #1
 800387c:	64bb      	str	r3, [r7, #72]	; 0x48
 800387e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003880:	b29b      	uxth	r3, r3
 8003882:	029b      	lsls	r3, r3, #10
 8003884:	b29a      	uxth	r2, r3
 8003886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003888:	801a      	strh	r2, [r3, #0]
 800388a:	e032      	b.n	80038f2 <HAL_PCD_EP_DB_Transmit+0x392>
 800388c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	64bb      	str	r3, [r7, #72]	; 0x48
 8003892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <HAL_PCD_EP_DB_Transmit+0x342>
 800389c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389e:	3b01      	subs	r3, #1
 80038a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80038a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	029b      	lsls	r3, r3, #10
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b6:	801a      	strh	r2, [r3, #0]
 80038b8:	e01b      	b.n	80038f2 <HAL_PCD_EP_DB_Transmit+0x392>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	785b      	ldrb	r3, [r3, #1]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d117      	bne.n	80038f2 <HAL_PCD_EP_DB_Transmit+0x392>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	643b      	str	r3, [r7, #64]	; 0x40
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d6:	4413      	add	r3, r2
 80038d8:	643b      	str	r3, [r7, #64]	; 0x40
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	011a      	lsls	r2, r3, #4
 80038e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e2:	4413      	add	r3, r2
 80038e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	6959      	ldr	r1, [r3, #20]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	891a      	ldrh	r2, [r3, #8]
 80038fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003900:	b29b      	uxth	r3, r3
 8003902:	f003 fb6e 	bl	8006fe2 <USB_WritePMA>
 8003906:	e1d0      	b.n	8003caa <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003910:	b29b      	uxth	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	3306      	adds	r3, #6
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003930:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	699a      	ldr	r2, [r3, #24]
 8003938:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800393c:	429a      	cmp	r2, r3
 800393e:	d307      	bcc.n	8003950 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	699a      	ldr	r2, [r3, #24]
 8003944:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003948:	1ad2      	subs	r2, r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	619a      	str	r2, [r3, #24]
 800394e:	e002      	b.n	8003956 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2200      	movs	r2, #0
 8003954:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 80c4 	bne.w	8003ae8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	785b      	ldrb	r3, [r3, #1]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d126      	bne.n	80039b6 <HAL_PCD_EP_DB_Transmit+0x456>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003976:	b29b      	uxth	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397c:	4413      	add	r3, r2
 800397e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	011a      	lsls	r2, r3, #4
 8003986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003988:	4413      	add	r3, r2
 800398a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800398e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800399a:	b29a      	uxth	r2, r3
 800399c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800399e:	801a      	strh	r2, [r3, #0]
 80039a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039b2:	801a      	strh	r2, [r3, #0]
 80039b4:	e01a      	b.n	80039ec <HAL_PCD_EP_DB_Transmit+0x48c>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	785b      	ldrb	r3, [r3, #1]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d116      	bne.n	80039ec <HAL_PCD_EP_DB_Transmit+0x48c>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	677b      	str	r3, [r7, #116]	; 0x74
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d2:	4413      	add	r3, r2
 80039d4:	677b      	str	r3, [r7, #116]	; 0x74
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	011a      	lsls	r2, r3, #4
 80039dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039de:	4413      	add	r3, r2
 80039e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039e4:	673b      	str	r3, [r7, #112]	; 0x70
 80039e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039e8:	2200      	movs	r2, #0
 80039ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	785b      	ldrb	r3, [r3, #1]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d12f      	bne.n	8003a5a <HAL_PCD_EP_DB_Transmit+0x4fa>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a12:	4413      	add	r3, r2
 8003a14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	011a      	lsls	r2, r3, #4
 8003a1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a22:	4413      	add	r3, r2
 8003a24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a3e:	801a      	strh	r2, [r3, #0]
 8003a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a56:	801a      	strh	r2, [r3, #0]
 8003a58:	e017      	b.n	8003a8a <HAL_PCD_EP_DB_Transmit+0x52a>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	785b      	ldrb	r3, [r3, #1]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d113      	bne.n	8003a8a <HAL_PCD_EP_DB_Transmit+0x52a>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a70:	4413      	add	r3, r2
 8003a72:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	011a      	lsls	r2, r3, #4
 8003a7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a86:	2200      	movs	r2, #0
 8003a88:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f007 ffc8 	bl	800ba26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f040 8104 	bne.w	8003caa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	441a      	add	r2, r3
 8003ace:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ada:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	8013      	strh	r3, [r2, #0]
 8003ae6:	e0e0      	b.n	8003caa <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d121      	bne.n	8003b36 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	441a      	add	r2, r3
 8003b1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	f040 80b4 	bne.w	8003caa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b4a:	441a      	add	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b58:	441a      	add	r2, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	6a1a      	ldr	r2, [r3, #32]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d309      	bcc.n	8003b7e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6a1a      	ldr	r2, [r3, #32]
 8003b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b76:	1ad2      	subs	r2, r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	621a      	str	r2, [r3, #32]
 8003b7c:	e015      	b.n	8003baa <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d107      	bne.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003b86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b8a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b94:	e009      	b.n	8003baa <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	667b      	str	r3, [r7, #100]	; 0x64
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	785b      	ldrb	r3, [r3, #1]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d155      	bne.n	8003c64 <HAL_PCD_EP_DB_Transmit+0x704>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bcc:	4413      	add	r3, r2
 8003bce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	011a      	lsls	r2, r3, #4
 8003bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd8:	4413      	add	r3, r2
 8003bda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bde:	65bb      	str	r3, [r7, #88]	; 0x58
 8003be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d112      	bne.n	8003c0c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf4:	801a      	strh	r2, [r3, #0]
 8003bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c08:	801a      	strh	r2, [r3, #0]
 8003c0a:	e044      	b.n	8003c96 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8003c10:	d811      	bhi.n	8003c36 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c14:	085b      	lsrs	r3, r3, #1
 8003c16:	657b      	str	r3, [r7, #84]	; 0x54
 8003c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c24:	3301      	adds	r3, #1
 8003c26:	657b      	str	r3, [r7, #84]	; 0x54
 8003c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	029b      	lsls	r3, r3, #10
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c32:	801a      	strh	r2, [r3, #0]
 8003c34:	e02f      	b.n	8003c96 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	029b      	lsls	r3, r3, #10
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c60:	801a      	strh	r2, [r3, #0]
 8003c62:	e018      	b.n	8003c96 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	785b      	ldrb	r3, [r3, #1]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d114      	bne.n	8003c96 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c7a:	4413      	add	r3, r2
 8003c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	011a      	lsls	r2, r3, #4
 8003c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c86:	4413      	add	r3, r2
 8003c88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c94:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6959      	ldr	r1, [r3, #20]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	895a      	ldrh	r2, [r3, #10]
 8003ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f003 f99c 	bl	8006fe2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc4:	823b      	strh	r3, [r7, #16]
 8003cc6:	8a3b      	ldrh	r3, [r7, #16]
 8003cc8:	f083 0310 	eor.w	r3, r3, #16
 8003ccc:	823b      	strh	r3, [r7, #16]
 8003cce:	8a3b      	ldrh	r3, [r7, #16]
 8003cd0:	f083 0320 	eor.w	r3, r3, #32
 8003cd4:	823b      	strh	r3, [r7, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	441a      	add	r2, r3
 8003ce4:	8a3b      	ldrh	r3, [r7, #16]
 8003ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3788      	adds	r7, #136	; 0x88
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	817b      	strh	r3, [r7, #10]
 8003d12:	4613      	mov	r3, r2
 8003d14:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d16:	897b      	ldrh	r3, [r7, #10]
 8003d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d22:	897b      	ldrh	r3, [r7, #10]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4413      	add	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e009      	b.n	8003d4e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d3a:	897a      	ldrh	r2, [r7, #10]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d4e:	893b      	ldrh	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d107      	bne.n	8003d64 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2200      	movs	r2, #0
 8003d58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	80da      	strh	r2, [r3, #6]
 8003d62:	e00b      	b.n	8003d7c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2201      	movs	r2, #1
 8003d68:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e26c      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8087 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003da8:	4b92      	ldr	r3, [pc, #584]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d00c      	beq.n	8003dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003db4:	4b8f      	ldr	r3, [pc, #572]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d112      	bne.n	8003de6 <HAL_RCC_OscConfig+0x5e>
 8003dc0:	4b8c      	ldr	r3, [pc, #560]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dcc:	d10b      	bne.n	8003de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dce:	4b89      	ldr	r3, [pc, #548]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d06c      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x12c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d168      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e246      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dee:	d106      	bne.n	8003dfe <HAL_RCC_OscConfig+0x76>
 8003df0:	4b80      	ldr	r3, [pc, #512]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a7f      	ldr	r2, [pc, #508]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	e02e      	b.n	8003e5c <HAL_RCC_OscConfig+0xd4>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x98>
 8003e06:	4b7b      	ldr	r3, [pc, #492]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a7a      	ldr	r2, [pc, #488]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b78      	ldr	r3, [pc, #480]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a77      	ldr	r2, [pc, #476]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	e01d      	b.n	8003e5c <HAL_RCC_OscConfig+0xd4>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0xbc>
 8003e2a:	4b72      	ldr	r3, [pc, #456]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a71      	ldr	r2, [pc, #452]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	4b6f      	ldr	r3, [pc, #444]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a6e      	ldr	r2, [pc, #440]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e00b      	b.n	8003e5c <HAL_RCC_OscConfig+0xd4>
 8003e44:	4b6b      	ldr	r3, [pc, #428]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a6a      	ldr	r2, [pc, #424]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4b68      	ldr	r3, [pc, #416]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a67      	ldr	r2, [pc, #412]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d013      	beq.n	8003e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e64:	f7fe f82c 	bl	8001ec0 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e6c:	f7fe f828 	bl	8001ec0 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b64      	cmp	r3, #100	; 0x64
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e1fa      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	4b5d      	ldr	r3, [pc, #372]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0xe4>
 8003e8a:	e014      	b.n	8003eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fe f818 	bl	8001ec0 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fe f814 	bl	8001ec0 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	; 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e1e6      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	4b53      	ldr	r3, [pc, #332]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x10c>
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d063      	beq.n	8003f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ec2:	4b4c      	ldr	r3, [pc, #304]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ece:	4b49      	ldr	r3, [pc, #292]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d11c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x18c>
 8003eda:	4b46      	ldr	r3, [pc, #280]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d116      	bne.n	8003f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee6:	4b43      	ldr	r3, [pc, #268]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_RCC_OscConfig+0x176>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d001      	beq.n	8003efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e1ba      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efe:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4939      	ldr	r1, [pc, #228]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f12:	e03a      	b.n	8003f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f1c:	4b36      	ldr	r3, [pc, #216]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f22:	f7fd ffcd 	bl	8001ec0 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f2a:	f7fd ffc9 	bl	8001ec0 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e19b      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3c:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f0      	beq.n	8003f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f48:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4927      	ldr	r1, [pc, #156]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]
 8003f5c:	e015      	b.n	8003f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f5e:	4b26      	ldr	r3, [pc, #152]	; (8003ff8 <HAL_RCC_OscConfig+0x270>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fd ffac 	bl	8001ec0 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f6c:	f7fd ffa8 	bl	8001ec0 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e17a      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d03a      	beq.n	800400c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d019      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f9e:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa4:	f7fd ff8c 	bl	8001ec0 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fac:	f7fd ff88 	bl	8001ec0 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e15a      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fca:	2001      	movs	r0, #1
 8003fcc:	f000 faf4 	bl	80045b8 <RCC_Delay>
 8003fd0:	e01c      	b.n	800400c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd8:	f7fd ff72 	bl	8001ec0 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fde:	e00f      	b.n	8004000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe0:	f7fd ff6e 	bl	8001ec0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d908      	bls.n	8004000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e140      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
 8003ff2:	bf00      	nop
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	42420000 	.word	0x42420000
 8003ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004000:	4b9e      	ldr	r3, [pc, #632]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e9      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80a6 	beq.w	8004166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401e:	4b97      	ldr	r3, [pc, #604]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	4b94      	ldr	r3, [pc, #592]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	4a93      	ldr	r2, [pc, #588]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004034:	61d3      	str	r3, [r2, #28]
 8004036:	4b91      	ldr	r3, [pc, #580]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004042:	2301      	movs	r3, #1
 8004044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004046:	4b8e      	ldr	r3, [pc, #568]	; (8004280 <HAL_RCC_OscConfig+0x4f8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d118      	bne.n	8004084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004052:	4b8b      	ldr	r3, [pc, #556]	; (8004280 <HAL_RCC_OscConfig+0x4f8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a8a      	ldr	r2, [pc, #552]	; (8004280 <HAL_RCC_OscConfig+0x4f8>)
 8004058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405e:	f7fd ff2f 	bl	8001ec0 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004066:	f7fd ff2b 	bl	8001ec0 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b64      	cmp	r3, #100	; 0x64
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0fd      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	4b81      	ldr	r3, [pc, #516]	; (8004280 <HAL_RCC_OscConfig+0x4f8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d106      	bne.n	800409a <HAL_RCC_OscConfig+0x312>
 800408c:	4b7b      	ldr	r3, [pc, #492]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4a7a      	ldr	r2, [pc, #488]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6213      	str	r3, [r2, #32]
 8004098:	e02d      	b.n	80040f6 <HAL_RCC_OscConfig+0x36e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0x334>
 80040a2:	4b76      	ldr	r3, [pc, #472]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	4a75      	ldr	r2, [pc, #468]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	6213      	str	r3, [r2, #32]
 80040ae:	4b73      	ldr	r3, [pc, #460]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	4a72      	ldr	r2, [pc, #456]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040b4:	f023 0304 	bic.w	r3, r3, #4
 80040b8:	6213      	str	r3, [r2, #32]
 80040ba:	e01c      	b.n	80040f6 <HAL_RCC_OscConfig+0x36e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b05      	cmp	r3, #5
 80040c2:	d10c      	bne.n	80040de <HAL_RCC_OscConfig+0x356>
 80040c4:	4b6d      	ldr	r3, [pc, #436]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	4a6c      	ldr	r2, [pc, #432]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040ca:	f043 0304 	orr.w	r3, r3, #4
 80040ce:	6213      	str	r3, [r2, #32]
 80040d0:	4b6a      	ldr	r3, [pc, #424]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	4a69      	ldr	r2, [pc, #420]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	6213      	str	r3, [r2, #32]
 80040dc:	e00b      	b.n	80040f6 <HAL_RCC_OscConfig+0x36e>
 80040de:	4b67      	ldr	r3, [pc, #412]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	4a66      	ldr	r2, [pc, #408]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	6213      	str	r3, [r2, #32]
 80040ea:	4b64      	ldr	r3, [pc, #400]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	4a63      	ldr	r2, [pc, #396]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80040f0:	f023 0304 	bic.w	r3, r3, #4
 80040f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d015      	beq.n	800412a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fe:	f7fd fedf 	bl	8001ec0 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004104:	e00a      	b.n	800411c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004106:	f7fd fedb 	bl	8001ec0 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	f241 3288 	movw	r2, #5000	; 0x1388
 8004114:	4293      	cmp	r3, r2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e0ab      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411c:	4b57      	ldr	r3, [pc, #348]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0ee      	beq.n	8004106 <HAL_RCC_OscConfig+0x37e>
 8004128:	e014      	b.n	8004154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412a:	f7fd fec9 	bl	8001ec0 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004130:	e00a      	b.n	8004148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004132:	f7fd fec5 	bl	8001ec0 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004140:	4293      	cmp	r3, r2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e095      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004148:	4b4c      	ldr	r3, [pc, #304]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1ee      	bne.n	8004132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d105      	bne.n	8004166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415a:	4b48      	ldr	r3, [pc, #288]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	4a47      	ldr	r2, [pc, #284]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8081 	beq.w	8004272 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004170:	4b42      	ldr	r3, [pc, #264]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f003 030c 	and.w	r3, r3, #12
 8004178:	2b08      	cmp	r3, #8
 800417a:	d061      	beq.n	8004240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d146      	bne.n	8004212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004184:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <HAL_RCC_OscConfig+0x4fc>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418a:	f7fd fe99 	bl	8001ec0 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004192:	f7fd fe95 	bl	8001ec0 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e067      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a4:	4b35      	ldr	r3, [pc, #212]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f0      	bne.n	8004192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b8:	d108      	bne.n	80041cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041ba:	4b30      	ldr	r3, [pc, #192]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	492d      	ldr	r1, [pc, #180]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041cc:	4b2b      	ldr	r3, [pc, #172]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a19      	ldr	r1, [r3, #32]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	430b      	orrs	r3, r1
 80041de:	4927      	ldr	r1, [pc, #156]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e4:	4b27      	ldr	r3, [pc, #156]	; (8004284 <HAL_RCC_OscConfig+0x4fc>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ea:	f7fd fe69 	bl	8001ec0 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f2:	f7fd fe65 	bl	8001ec0 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e037      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004204:	4b1d      	ldr	r3, [pc, #116]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCC_OscConfig+0x46a>
 8004210:	e02f      	b.n	8004272 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004212:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <HAL_RCC_OscConfig+0x4fc>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004218:	f7fd fe52 	bl	8001ec0 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004220:	f7fd fe4e 	bl	8001ec0 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e020      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x498>
 800423e:	e018      	b.n	8004272 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e013      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_OscConfig+0x4f4>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	429a      	cmp	r2, r3
 800425e:	d106      	bne.n	800426e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d001      	beq.n	8004272 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	40007000 	.word	0x40007000
 8004284:	42420060 	.word	0x42420060

08004288 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0d0      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800429c:	4b6a      	ldr	r3, [pc, #424]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d910      	bls.n	80042cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042aa:	4b67      	ldr	r3, [pc, #412]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 0207 	bic.w	r2, r3, #7
 80042b2:	4965      	ldr	r1, [pc, #404]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b63      	ldr	r3, [pc, #396]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0b8      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e4:	4b59      	ldr	r3, [pc, #356]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4a58      	ldr	r2, [pc, #352]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80042ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042fc:	4b53      	ldr	r3, [pc, #332]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a52      	ldr	r2, [pc, #328]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004302:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004306:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004308:	4b50      	ldr	r3, [pc, #320]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	494d      	ldr	r1, [pc, #308]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004316:	4313      	orrs	r3, r2
 8004318:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d040      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d107      	bne.n	800433e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d115      	bne.n	8004366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e07f      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d107      	bne.n	8004356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004346:	4b41      	ldr	r3, [pc, #260]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e073      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004356:	4b3d      	ldr	r3, [pc, #244]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e06b      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004366:	4b39      	ldr	r3, [pc, #228]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f023 0203 	bic.w	r2, r3, #3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4936      	ldr	r1, [pc, #216]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	4313      	orrs	r3, r2
 8004376:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004378:	f7fd fda2 	bl	8001ec0 <HAL_GetTick>
 800437c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437e:	e00a      	b.n	8004396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004380:	f7fd fd9e 	bl	8001ec0 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	; 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e053      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004396:	4b2d      	ldr	r3, [pc, #180]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 020c 	and.w	r2, r3, #12
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d1eb      	bne.n	8004380 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043a8:	4b27      	ldr	r3, [pc, #156]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d210      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b6:	4b24      	ldr	r3, [pc, #144]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 0207 	bic.w	r2, r3, #7
 80043be:	4922      	ldr	r1, [pc, #136]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b20      	ldr	r3, [pc, #128]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e032      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e4:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4916      	ldr	r1, [pc, #88]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	490e      	ldr	r1, [pc, #56]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004416:	f000 f821 	bl	800445c <HAL_RCC_GetSysClockFreq>
 800441a:	4602      	mov	r2, r0
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	490a      	ldr	r1, [pc, #40]	; (8004450 <HAL_RCC_ClockConfig+0x1c8>)
 8004428:	5ccb      	ldrb	r3, [r1, r3]
 800442a:	fa22 f303 	lsr.w	r3, r2, r3
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <HAL_RCC_ClockConfig+0x1cc>)
 8004430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <HAL_RCC_ClockConfig+0x1d0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fd fc38 	bl	8001cac <HAL_InitTick>

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40022000 	.word	0x40022000
 800444c:	40021000 	.word	0x40021000
 8004450:	0800cdcc 	.word	0x0800cdcc
 8004454:	20000008 	.word	0x20000008
 8004458:	2000000c 	.word	0x2000000c

0800445c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800445c:	b490      	push	{r4, r7}
 800445e:	b08a      	sub	sp, #40	; 0x28
 8004460:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004462:	4b2a      	ldr	r3, [pc, #168]	; (800450c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004464:	1d3c      	adds	r4, r7, #4
 8004466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800446c:	f240 2301 	movw	r3, #513	; 0x201
 8004470:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	2300      	movs	r3, #0
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	2300      	movs	r3, #0
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004486:	4b22      	ldr	r3, [pc, #136]	; (8004510 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b04      	cmp	r3, #4
 8004494:	d002      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x40>
 8004496:	2b08      	cmp	r3, #8
 8004498:	d003      	beq.n	80044a2 <HAL_RCC_GetSysClockFreq+0x46>
 800449a:	e02d      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800449c:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <HAL_RCC_GetSysClockFreq+0xb8>)
 800449e:	623b      	str	r3, [r7, #32]
      break;
 80044a0:	e02d      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	0c9b      	lsrs	r3, r3, #18
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044ae:	4413      	add	r3, r2
 80044b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d013      	beq.n	80044e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044c0:	4b13      	ldr	r3, [pc, #76]	; (8004510 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	0c5b      	lsrs	r3, r3, #17
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044ce:	4413      	add	r3, r2
 80044d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	4a0e      	ldr	r2, [pc, #56]	; (8004514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044da:	fb02 f203 	mul.w	r2, r2, r3
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
 80044e6:	e004      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4a0b      	ldr	r2, [pc, #44]	; (8004518 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044ec:	fb02 f303 	mul.w	r3, r2, r3
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	623b      	str	r3, [r7, #32]
      break;
 80044f6:	e002      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044fa:	623b      	str	r3, [r7, #32]
      break;
 80044fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044fe:	6a3b      	ldr	r3, [r7, #32]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3728      	adds	r7, #40	; 0x28
 8004504:	46bd      	mov	sp, r7
 8004506:	bc90      	pop	{r4, r7}
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	0800c9a4 	.word	0x0800c9a4
 8004510:	40021000 	.word	0x40021000
 8004514:	007a1200 	.word	0x007a1200
 8004518:	003d0900 	.word	0x003d0900

0800451c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004520:	4b02      	ldr	r3, [pc, #8]	; (800452c <HAL_RCC_GetHCLKFreq+0x10>)
 8004522:	681b      	ldr	r3, [r3, #0]
}
 8004524:	4618      	mov	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr
 800452c:	20000008 	.word	0x20000008

08004530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004534:	f7ff fff2 	bl	800451c <HAL_RCC_GetHCLKFreq>
 8004538:	4602      	mov	r2, r0
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	0adb      	lsrs	r3, r3, #11
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	4903      	ldr	r1, [pc, #12]	; (8004554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004546:	5ccb      	ldrb	r3, [r1, r3]
 8004548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40021000 	.word	0x40021000
 8004554:	0800cddc 	.word	0x0800cddc

08004558 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	220f      	movs	r2, #15
 8004566:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004568:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <HAL_RCC_GetClockConfig+0x58>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f003 0203 	and.w	r2, r3, #3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004574:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <HAL_RCC_GetClockConfig+0x58>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <HAL_RCC_GetClockConfig+0x58>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800458c:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <HAL_RCC_GetClockConfig+0x58>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	08db      	lsrs	r3, r3, #3
 8004592:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <HAL_RCC_GetClockConfig+0x5c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0207 	and.w	r2, r3, #7
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40022000 	.word	0x40022000

080045b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <RCC_Delay+0x34>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <RCC_Delay+0x38>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	0a5b      	lsrs	r3, r3, #9
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045d4:	bf00      	nop
  }
  while (Delay --);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1e5a      	subs	r2, r3, #1
 80045da:	60fa      	str	r2, [r7, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f9      	bne.n	80045d4 <RCC_Delay+0x1c>
}
 80045e0:	bf00      	nop
 80045e2:	bf00      	nop
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr
 80045ec:	20000008 	.word	0x20000008
 80045f0:	10624dd3 	.word	0x10624dd3

080045f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d07d      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004610:	2300      	movs	r3, #0
 8004612:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004614:	4b4f      	ldr	r3, [pc, #316]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10d      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004620:	4b4c      	ldr	r3, [pc, #304]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	4a4b      	ldr	r2, [pc, #300]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462a:	61d3      	str	r3, [r2, #28]
 800462c:	4b49      	ldr	r3, [pc, #292]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004638:	2301      	movs	r3, #1
 800463a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463c:	4b46      	ldr	r3, [pc, #280]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d118      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004648:	4b43      	ldr	r3, [pc, #268]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a42      	ldr	r2, [pc, #264]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800464e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004654:	f7fd fc34 	bl	8001ec0 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465a:	e008      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465c:	f7fd fc30 	bl	8001ec0 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	; 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e06d      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466e:	4b3a      	ldr	r3, [pc, #232]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800467a:	4b36      	ldr	r3, [pc, #216]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004682:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d02e      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	429a      	cmp	r2, r3
 8004696:	d027      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004698:	4b2e      	ldr	r3, [pc, #184]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046a2:	4b2e      	ldr	r3, [pc, #184]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046a8:	4b2c      	ldr	r3, [pc, #176]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046ae:	4a29      	ldr	r2, [pc, #164]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d014      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046be:	f7fd fbff 	bl	8001ec0 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c4:	e00a      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c6:	f7fd fbfb 	bl	8001ec0 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d901      	bls.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e036      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046dc:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0ee      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046e8:	4b1a      	ldr	r3, [pc, #104]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4917      	ldr	r1, [pc, #92]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d105      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004700:	4b14      	ldr	r3, [pc, #80]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	4a13      	ldr	r2, [pc, #76]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800470a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004718:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	490b      	ldr	r1, [pc, #44]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004726:	4313      	orrs	r3, r2
 8004728:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b00      	cmp	r3, #0
 8004734:	d008      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004736:	4b07      	ldr	r3, [pc, #28]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	4904      	ldr	r1, [pc, #16]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004744:	4313      	orrs	r3, r2
 8004746:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	40007000 	.word	0x40007000
 800475c:	42420440 	.word	0x42420440

08004760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e041      	b.n	80047f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f839 	bl	80047fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3304      	adds	r3, #4
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f000 f9b4 	bl	8004b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	d001      	beq.n	8004828 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e03a      	b.n	800489e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <HAL_TIM_Base_Start_IT+0x98>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00e      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x58>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004852:	d009      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x58>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a14      	ldr	r2, [pc, #80]	; (80048ac <HAL_TIM_Base_Start_IT+0x9c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d004      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x58>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d111      	bne.n	800488c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b06      	cmp	r3, #6
 8004878:	d010      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0201 	orr.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488a:	e007      	b.n	800489c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800

080048b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d122      	bne.n	8004910 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d11b      	bne.n	8004910 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0202 	mvn.w	r2, #2
 80048e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f8ed 	bl	8004ad6 <HAL_TIM_IC_CaptureCallback>
 80048fc:	e005      	b.n	800490a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f8e0 	bl	8004ac4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f8ef 	bl	8004ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b04      	cmp	r3, #4
 800491c:	d122      	bne.n	8004964 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b04      	cmp	r3, #4
 800492a:	d11b      	bne.n	8004964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0204 	mvn.w	r2, #4
 8004934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2202      	movs	r2, #2
 800493a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f8c3 	bl	8004ad6 <HAL_TIM_IC_CaptureCallback>
 8004950:	e005      	b.n	800495e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f8b6 	bl	8004ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f8c5 	bl	8004ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b08      	cmp	r3, #8
 8004970:	d122      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b08      	cmp	r3, #8
 800497e:	d11b      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0208 	mvn.w	r2, #8
 8004988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2204      	movs	r2, #4
 800498e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f899 	bl	8004ad6 <HAL_TIM_IC_CaptureCallback>
 80049a4:	e005      	b.n	80049b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f88c 	bl	8004ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f89b 	bl	8004ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d122      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b10      	cmp	r3, #16
 80049d2:	d11b      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0210 	mvn.w	r2, #16
 80049dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2208      	movs	r2, #8
 80049e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f86f 	bl	8004ad6 <HAL_TIM_IC_CaptureCallback>
 80049f8:	e005      	b.n	8004a06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f862 	bl	8004ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f871 	bl	8004ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d10e      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d107      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0201 	mvn.w	r2, #1
 8004a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fb fcfc 	bl	8000430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	2b80      	cmp	r3, #128	; 0x80
 8004a44:	d10e      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a50:	2b80      	cmp	r3, #128	; 0x80
 8004a52:	d107      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f8bf 	bl	8004be2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6e:	2b40      	cmp	r3, #64	; 0x40
 8004a70:	d10e      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7c:	2b40      	cmp	r3, #64	; 0x40
 8004a7e:	d107      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f835 	bl	8004afa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d10e      	bne.n	8004abc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0320 	and.w	r3, r3, #32
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d107      	bne.n	8004abc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0220 	mvn.w	r2, #32
 8004ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f88a 	bl	8004bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004abc:	bf00      	nop
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a29      	ldr	r2, [pc, #164]	; (8004bc4 <TIM_Base_SetConfig+0xb8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00b      	beq.n	8004b3c <TIM_Base_SetConfig+0x30>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2a:	d007      	beq.n	8004b3c <TIM_Base_SetConfig+0x30>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a26      	ldr	r2, [pc, #152]	; (8004bc8 <TIM_Base_SetConfig+0xbc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_Base_SetConfig+0x30>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a25      	ldr	r2, [pc, #148]	; (8004bcc <TIM_Base_SetConfig+0xc0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d108      	bne.n	8004b4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <TIM_Base_SetConfig+0xb8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00b      	beq.n	8004b6e <TIM_Base_SetConfig+0x62>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5c:	d007      	beq.n	8004b6e <TIM_Base_SetConfig+0x62>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a19      	ldr	r2, [pc, #100]	; (8004bc8 <TIM_Base_SetConfig+0xbc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d003      	beq.n	8004b6e <TIM_Base_SetConfig+0x62>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <TIM_Base_SetConfig+0xc0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d108      	bne.n	8004b80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a07      	ldr	r2, [pc, #28]	; (8004bc4 <TIM_Base_SetConfig+0xb8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d103      	bne.n	8004bb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	615a      	str	r2, [r3, #20]
}
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr
 8004bc4:	40012c00 	.word	0x40012c00
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	40000800 	.word	0x40000800

08004bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr

08004be2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr

08004bf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	f107 0014 	add.w	r0, r7, #20
 8004c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	b004      	add	sp, #16
 8004c12:	4770      	bx	lr

08004c14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c24:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c28:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr

08004c40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c48:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c4c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	4013      	ands	r3, r2
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr

08004c8c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	f107 0014 	add.w	r0, r7, #20
 8004c9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	b004      	add	sp, #16
 8004cca:	4770      	bx	lr

08004ccc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b09b      	sub	sp, #108	; 0x6c
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	78db      	ldrb	r3, [r3, #3]
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d81f      	bhi.n	8004d3e <USB_ActivateEndpoint+0x72>
 8004cfe:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <USB_ActivateEndpoint+0x38>)
 8004d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d31 	.word	0x08004d31
 8004d0c:	08004d47 	.word	0x08004d47
 8004d10:	08004d23 	.word	0x08004d23
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d1c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d20:	e012      	b.n	8004d48 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d22:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d26:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d2a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d2e:	e00b      	b.n	8004d48 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d38:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d3c:	e004      	b.n	8004d48 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004d44:	e000      	b.n	8004d48 <USB_ActivateEndpoint+0x7c>
      break;
 8004d46:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	441a      	add	r2, r3
 8004d52:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	441a      	add	r2, r3
 8004d98:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	7b1b      	ldrb	r3, [r3, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f040 8149 	bne.w	800504c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	785b      	ldrb	r3, [r3, #1]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 8084 	beq.w	8004ecc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	011a      	lsls	r2, r3, #4
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	88db      	ldrh	r3, [r3, #6]
 8004dec:	085b      	lsrs	r3, r3, #1
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	81fb      	strh	r3, [r7, #14]
 8004e06:	89fb      	ldrh	r3, [r7, #14]
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01b      	beq.n	8004e48 <USB_ActivateEndpoint+0x17c>
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	81bb      	strh	r3, [r7, #12]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	89bb      	ldrh	r3, [r7, #12]
 8004e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	78db      	ldrb	r3, [r3, #3]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d020      	beq.n	8004e92 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e66:	813b      	strh	r3, [r7, #8]
 8004e68:	893b      	ldrh	r3, [r7, #8]
 8004e6a:	f083 0320 	eor.w	r3, r3, #32
 8004e6e:	813b      	strh	r3, [r7, #8]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	893b      	ldrh	r3, [r7, #8]
 8004e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	8013      	strh	r3, [r2, #0]
 8004e90:	e27f      	b.n	8005392 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea8:	817b      	strh	r3, [r7, #10]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	441a      	add	r2, r3
 8004eb4:	897b      	ldrh	r3, [r7, #10]
 8004eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	8013      	strh	r3, [r2, #0]
 8004eca:	e262      	b.n	8005392 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004edc:	4413      	add	r3, r2
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	011a      	lsls	r2, r3, #4
 8004ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	88db      	ldrh	r3, [r3, #6]
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	4413      	add	r3, r2
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	011a      	lsls	r2, r3, #4
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f22:	623b      	str	r3, [r7, #32]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d112      	bne.n	8004f52 <USB_ActivateEndpoint+0x286>
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	801a      	strh	r2, [r3, #0]
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	801a      	strh	r2, [r3, #0]
 8004f50:	e02f      	b.n	8004fb2 <USB_ActivateEndpoint+0x2e6>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b3e      	cmp	r3, #62	; 0x3e
 8004f58:	d813      	bhi.n	8004f82 <USB_ActivateEndpoint+0x2b6>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	663b      	str	r3, [r7, #96]	; 0x60
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <USB_ActivateEndpoint+0x2a8>
 8004f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f70:	3301      	adds	r3, #1
 8004f72:	663b      	str	r3, [r7, #96]	; 0x60
 8004f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	029b      	lsls	r3, r3, #10
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	e017      	b.n	8004fb2 <USB_ActivateEndpoint+0x2e6>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	663b      	str	r3, [r7, #96]	; 0x60
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 031f 	and.w	r3, r3, #31
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d102      	bne.n	8004f9c <USB_ActivateEndpoint+0x2d0>
 8004f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	029b      	lsls	r3, r3, #10
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	83fb      	strh	r3, [r7, #30]
 8004fc0:	8bfb      	ldrh	r3, [r7, #30]
 8004fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d01b      	beq.n	8005002 <USB_ActivateEndpoint+0x336>
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe0:	83bb      	strh	r3, [r7, #28]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	441a      	add	r2, r3
 8004fec:	8bbb      	ldrh	r3, [r7, #28]
 8004fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005018:	837b      	strh	r3, [r7, #26]
 800501a:	8b7b      	ldrh	r3, [r7, #26]
 800501c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005020:	837b      	strh	r3, [r7, #26]
 8005022:	8b7b      	ldrh	r3, [r7, #26]
 8005024:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005028:	837b      	strh	r3, [r7, #26]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	441a      	add	r2, r3
 8005034:	8b7b      	ldrh	r3, [r7, #26]
 8005036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005046:	b29b      	uxth	r3, r3
 8005048:	8013      	strh	r3, [r2, #0]
 800504a:	e1a2      	b.n	8005392 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	b29b      	uxth	r3, r3
 800505a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005062:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	441a      	add	r2, r3
 8005070:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800507c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005084:	b29b      	uxth	r3, r3
 8005086:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	65bb      	str	r3, [r7, #88]	; 0x58
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005092:	b29b      	uxth	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005098:	4413      	add	r3, r2
 800509a:	65bb      	str	r3, [r7, #88]	; 0x58
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	011a      	lsls	r2, r3, #4
 80050a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050aa:	657b      	str	r3, [r7, #84]	; 0x54
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	891b      	ldrh	r3, [r3, #8]
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ba:	801a      	strh	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	653b      	str	r3, [r7, #80]	; 0x50
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050cc:	4413      	add	r3, r2
 80050ce:	653b      	str	r3, [r7, #80]	; 0x50
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	011a      	lsls	r2, r3, #4
 80050d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80050de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	895b      	ldrh	r3, [r3, #10]
 80050e4:	085b      	lsrs	r3, r3, #1
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f040 8091 	bne.w	800521c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005108:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800510a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d01b      	beq.n	800514a <USB_ActivateEndpoint+0x47e>
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005128:	877b      	strh	r3, [r7, #58]	; 0x3a
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	441a      	add	r2, r3
 8005134:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005146:	b29b      	uxth	r3, r3
 8005148:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	873b      	strh	r3, [r7, #56]	; 0x38
 8005158:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800515a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01b      	beq.n	800519a <USB_ActivateEndpoint+0x4ce>
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005178:	86fb      	strh	r3, [r7, #54]	; 0x36
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	441a      	add	r2, r3
 8005184:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005192:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005196:	b29b      	uxth	r3, r3
 8005198:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80051b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80051ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	441a      	add	r2, r3
 80051cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051de:	b29b      	uxth	r3, r3
 80051e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f8:	867b      	strh	r3, [r7, #50]	; 0x32
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	441a      	add	r2, r3
 8005204:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005216:	b29b      	uxth	r3, r3
 8005218:	8013      	strh	r3, [r2, #0]
 800521a:	e0ba      	b.n	8005392 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800522c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01d      	beq.n	8005274 <USB_ActivateEndpoint+0x5a8>
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800524a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	441a      	add	r2, r3
 800525c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800526c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005270:	b29b      	uxth	r3, r3
 8005272:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005284:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01d      	beq.n	80052cc <USB_ActivateEndpoint+0x600>
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	441a      	add	r2, r3
 80052b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80052b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	78db      	ldrb	r3, [r3, #3]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d024      	beq.n	800531e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052f2:	f083 0320 	eor.w	r3, r3, #32
 80052f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	441a      	add	r2, r3
 8005304:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800530c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005318:	b29b      	uxth	r3, r3
 800531a:	8013      	strh	r3, [r2, #0]
 800531c:	e01d      	b.n	800535a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29b      	uxth	r3, r3
 800532c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005334:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	441a      	add	r2, r3
 8005342:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800534a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800534e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005356:	b29b      	uxth	r3, r3
 8005358:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800536c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005370:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	441a      	add	r2, r3
 800537c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800537e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800538a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800538e:	b29b      	uxth	r3, r3
 8005390:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005392:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005396:	4618      	mov	r0, r3
 8005398:	376c      	adds	r7, #108	; 0x6c
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b08d      	sub	sp, #52	; 0x34
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	7b1b      	ldrb	r3, [r3, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f040 808e 	bne.w	80054d0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	785b      	ldrb	r3, [r3, #1]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d044      	beq.n	8005446 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	81bb      	strh	r3, [r7, #12]
 80053ca:	89bb      	ldrh	r3, [r7, #12]
 80053cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01b      	beq.n	800540c <USB_DeactivateEndpoint+0x6c>
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	817b      	strh	r3, [r7, #10]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	441a      	add	r2, r3
 80053f6:	897b      	ldrh	r3, [r7, #10]
 80053f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005404:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005408:	b29b      	uxth	r3, r3
 800540a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29b      	uxth	r3, r3
 800541a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005422:	813b      	strh	r3, [r7, #8]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	441a      	add	r2, r3
 800542e:	893b      	ldrh	r3, [r7, #8]
 8005430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005440:	b29b      	uxth	r3, r3
 8005442:	8013      	strh	r3, [r2, #0]
 8005444:	e192      	b.n	800576c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	827b      	strh	r3, [r7, #18]
 8005454:	8a7b      	ldrh	r3, [r7, #18]
 8005456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d01b      	beq.n	8005496 <USB_DeactivateEndpoint+0xf6>
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b29b      	uxth	r3, r3
 800546c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005474:	823b      	strh	r3, [r7, #16]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	441a      	add	r2, r3
 8005480:	8a3b      	ldrh	r3, [r7, #16]
 8005482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800548e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005492:	b29b      	uxth	r3, r3
 8005494:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ac:	81fb      	strh	r3, [r7, #14]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	441a      	add	r2, r3
 80054b8:	89fb      	ldrh	r3, [r7, #14]
 80054ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	8013      	strh	r3, [r2, #0]
 80054ce:	e14d      	b.n	800576c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	785b      	ldrb	r3, [r3, #1]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f040 80a5 	bne.w	8005624 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	843b      	strh	r3, [r7, #32]
 80054e8:	8c3b      	ldrh	r3, [r7, #32]
 80054ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01b      	beq.n	800552a <USB_DeactivateEndpoint+0x18a>
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005508:	83fb      	strh	r3, [r7, #30]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	441a      	add	r2, r3
 8005514:	8bfb      	ldrh	r3, [r7, #30]
 8005516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800551a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800551e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005526:	b29b      	uxth	r3, r3
 8005528:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	83bb      	strh	r3, [r7, #28]
 8005538:	8bbb      	ldrh	r3, [r7, #28]
 800553a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01b      	beq.n	800557a <USB_DeactivateEndpoint+0x1da>
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005558:	837b      	strh	r3, [r7, #26]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	441a      	add	r2, r3
 8005564:	8b7b      	ldrh	r3, [r7, #26]
 8005566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005572:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005576:	b29b      	uxth	r3, r3
 8005578:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005590:	833b      	strh	r3, [r7, #24]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	441a      	add	r2, r3
 800559c:	8b3b      	ldrh	r3, [r7, #24]
 800559e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c8:	82fb      	strh	r3, [r7, #22]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	441a      	add	r2, r3
 80055d4:	8afb      	ldrh	r3, [r7, #22]
 80055d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005600:	82bb      	strh	r3, [r7, #20]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	441a      	add	r2, r3
 800560c:	8abb      	ldrh	r3, [r7, #20]
 800560e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800561a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561e:	b29b      	uxth	r3, r3
 8005620:	8013      	strh	r3, [r2, #0]
 8005622:	e0a3      	b.n	800576c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005632:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01b      	beq.n	8005674 <USB_DeactivateEndpoint+0x2d4>
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	b29b      	uxth	r3, r3
 800564a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005652:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	441a      	add	r2, r3
 800565e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005668:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800566c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005670:	b29b      	uxth	r3, r3
 8005672:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005682:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01b      	beq.n	80056c4 <USB_DeactivateEndpoint+0x324>
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	853b      	strh	r3, [r7, #40]	; 0x28
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	441a      	add	r2, r3
 80056ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	441a      	add	r2, r3
 80056e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005712:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	441a      	add	r2, r3
 800571e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005730:	b29b      	uxth	r3, r3
 8005732:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	847b      	strh	r3, [r7, #34]	; 0x22
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	441a      	add	r2, r3
 8005756:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800575c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005768:	b29b      	uxth	r3, r3
 800576a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3734      	adds	r7, #52	; 0x34
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr

08005778 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b0cc      	sub	sp, #304	; 0x130
 800577c:	af00      	add	r7, sp, #0
 800577e:	1d3b      	adds	r3, r7, #4
 8005780:	6018      	str	r0, [r3, #0]
 8005782:	463b      	mov	r3, r7
 8005784:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005786:	463b      	mov	r3, r7
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	2b01      	cmp	r3, #1
 800578e:	f040 872e 	bne.w	80065ee <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005792:	463b      	mov	r3, r7
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	699a      	ldr	r2, [r3, #24]
 8005798:	463b      	mov	r3, r7
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d905      	bls.n	80057ae <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80057a2:	463b      	mov	r3, r7
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80057ac:	e004      	b.n	80057b8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80057ae:	463b      	mov	r3, r7
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80057b8:	463b      	mov	r3, r7
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	7b1b      	ldrb	r3, [r3, #12]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d134      	bne.n	800582c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80057c2:	463b      	mov	r3, r7
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6959      	ldr	r1, [r3, #20]
 80057c8:	463b      	mov	r3, r7
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	88da      	ldrh	r2, [r3, #6]
 80057ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	1d38      	adds	r0, r7, #4
 80057d6:	6800      	ldr	r0, [r0, #0]
 80057d8:	f001 fc03 	bl	8006fe2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057dc:	f107 0310 	add.w	r3, r7, #16
 80057e0:	1d3a      	adds	r2, r7, #4
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	1d3b      	adds	r3, r7, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	4619      	mov	r1, r3
 80057f2:	f107 0310 	add.w	r3, r7, #16
 80057f6:	f107 0210 	add.w	r2, r7, #16
 80057fa:	6812      	ldr	r2, [r2, #0]
 80057fc:	440a      	add	r2, r1
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	463b      	mov	r3, r7
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	011a      	lsls	r2, r3, #4
 8005808:	f107 0310 	add.w	r3, r7, #16
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4413      	add	r3, r2
 8005810:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005814:	f107 030c 	add.w	r3, r7, #12
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800581e:	b29a      	uxth	r2, r3
 8005820:	f107 030c 	add.w	r3, r7, #12
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	801a      	strh	r2, [r3, #0]
 8005828:	f000 beac 	b.w	8006584 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800582c:	463b      	mov	r3, r7
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	78db      	ldrb	r3, [r3, #3]
 8005832:	2b02      	cmp	r3, #2
 8005834:	f040 838c 	bne.w	8005f50 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005838:	463b      	mov	r3, r7
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6a1a      	ldr	r2, [r3, #32]
 800583e:	463b      	mov	r3, r7
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	429a      	cmp	r2, r3
 8005846:	f240 8330 	bls.w	8005eaa <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800584a:	1d3b      	adds	r3, r7, #4
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	463b      	mov	r3, r7
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b29b      	uxth	r3, r3
 800585c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005864:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005868:	1d3b      	adds	r3, r7, #4
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	463b      	mov	r3, r7
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	441a      	add	r2, r3
 8005876:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800587a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800587e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005882:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800588a:	b29b      	uxth	r3, r3
 800588c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800588e:	463b      	mov	r3, r7
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6a1a      	ldr	r2, [r3, #32]
 8005894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005898:	1ad2      	subs	r2, r2, r3
 800589a:	463b      	mov	r3, r7
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80058a0:	1d3b      	adds	r3, r7, #4
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	463b      	mov	r3, r7
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 819e 	beq.w	8005bf8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058c0:	1d3a      	adds	r2, r7, #4
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	463b      	mov	r3, r7
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d17a      	bne.n	80059c6 <USB_EPStartXfer+0x24e>
 80058d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058d4:	1d3a      	adds	r2, r7, #4
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	1d3b      	adds	r3, r7, #4
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	4619      	mov	r1, r3
 80058e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80058ee:	6812      	ldr	r2, [r2, #0]
 80058f0:	440a      	add	r2, r1
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	463b      	mov	r3, r7
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	011a      	lsls	r2, r3, #4
 80058fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4413      	add	r3, r2
 8005904:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d11a      	bne.n	800594c <USB_EPStartXfer+0x1d4>
 8005916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	b29b      	uxth	r3, r3
 8005920:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005924:	b29a      	uxth	r2, r3
 8005926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005940:	b29a      	uxth	r2, r3
 8005942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	e062      	b.n	8005a12 <USB_EPStartXfer+0x29a>
 800594c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005950:	2b3e      	cmp	r3, #62	; 0x3e
 8005952:	d819      	bhi.n	8005988 <USB_EPStartXfer+0x210>
 8005954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005958:	085b      	lsrs	r3, r3, #1
 800595a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800595e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d004      	beq.n	8005974 <USB_EPStartXfer+0x1fc>
 800596a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800596e:	3301      	adds	r3, #1
 8005970:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005974:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005978:	b29b      	uxth	r3, r3
 800597a:	029b      	lsls	r3, r3, #10
 800597c:	b29a      	uxth	r2, r3
 800597e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	e044      	b.n	8005a12 <USB_EPStartXfer+0x29a>
 8005988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	2b00      	cmp	r3, #0
 800599c:	d104      	bne.n	80059a8 <USB_EPStartXfer+0x230>
 800599e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059a2:	3b01      	subs	r3, #1
 80059a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80059a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	029b      	lsls	r3, r3, #10
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	e025      	b.n	8005a12 <USB_EPStartXfer+0x29a>
 80059c6:	463b      	mov	r3, r7
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d120      	bne.n	8005a12 <USB_EPStartXfer+0x29a>
 80059d0:	1d3b      	adds	r3, r7, #4
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d8:	b29b      	uxth	r3, r3
 80059da:	4619      	mov	r1, r3
 80059dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80059e4:	6812      	ldr	r2, [r2, #0]
 80059e6:	440a      	add	r2, r1
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	463b      	mov	r3, r7
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	011a      	lsls	r2, r3, #4
 80059f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4413      	add	r3, r2
 80059fa:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80059fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a12:	463b      	mov	r3, r7
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	895b      	ldrh	r3, [r3, #10]
 8005a18:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6959      	ldr	r1, [r3, #20]
 8005a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a2c:	1d38      	adds	r0, r7, #4
 8005a2e:	6800      	ldr	r0, [r0, #0]
 8005a30:	f001 fad7 	bl	8006fe2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a34:	463b      	mov	r3, r7
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695a      	ldr	r2, [r3, #20]
 8005a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3e:	441a      	add	r2, r3
 8005a40:	463b      	mov	r3, r7
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a46:	463b      	mov	r3, r7
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6a1a      	ldr	r2, [r3, #32]
 8005a4c:	463b      	mov	r3, r7
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d909      	bls.n	8005a6a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005a56:	463b      	mov	r3, r7
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6a1a      	ldr	r2, [r3, #32]
 8005a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a60:	1ad2      	subs	r2, r2, r3
 8005a62:	463b      	mov	r3, r7
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	621a      	str	r2, [r3, #32]
 8005a68:	e008      	b.n	8005a7c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005a74:	463b      	mov	r3, r7
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d17a      	bne.n	8005b7c <USB_EPStartXfer+0x404>
 8005a86:	f107 0318 	add.w	r3, r7, #24
 8005a8a:	1d3a      	adds	r2, r7, #4
 8005a8c:	6812      	ldr	r2, [r2, #0]
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	1d3b      	adds	r3, r7, #4
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	f107 0318 	add.w	r3, r7, #24
 8005aa0:	f107 0218 	add.w	r2, r7, #24
 8005aa4:	6812      	ldr	r2, [r2, #0]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	463b      	mov	r3, r7
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	011a      	lsls	r2, r3, #4
 8005ab2:	f107 0318 	add.w	r3, r7, #24
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005abe:	f107 0314 	add.w	r3, r7, #20
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d11a      	bne.n	8005b02 <USB_EPStartXfer+0x38a>
 8005acc:	f107 0314 	add.w	r3, r7, #20
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	f107 0314 	add.w	r3, r7, #20
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	f107 0314 	add.w	r3, r7, #20
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	f107 0314 	add.w	r3, r7, #20
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	e067      	b.n	8005bd2 <USB_EPStartXfer+0x45a>
 8005b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b06:	2b3e      	cmp	r3, #62	; 0x3e
 8005b08:	d819      	bhi.n	8005b3e <USB_EPStartXfer+0x3c6>
 8005b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b0e:	085b      	lsrs	r3, r3, #1
 8005b10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <USB_EPStartXfer+0x3b2>
 8005b20:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b24:	3301      	adds	r3, #1
 8005b26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	029b      	lsls	r3, r3, #10
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	f107 0314 	add.w	r3, r7, #20
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	801a      	strh	r2, [r3, #0]
 8005b3c:	e049      	b.n	8005bd2 <USB_EPStartXfer+0x45a>
 8005b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b4c:	f003 031f 	and.w	r3, r3, #31
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d104      	bne.n	8005b5e <USB_EPStartXfer+0x3e6>
 8005b54:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b5e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	029b      	lsls	r3, r3, #10
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	f107 0314 	add.w	r3, r7, #20
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	801a      	strh	r2, [r3, #0]
 8005b7a:	e02a      	b.n	8005bd2 <USB_EPStartXfer+0x45a>
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	785b      	ldrb	r3, [r3, #1]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d125      	bne.n	8005bd2 <USB_EPStartXfer+0x45a>
 8005b86:	f107 0320 	add.w	r3, r7, #32
 8005b8a:	1d3a      	adds	r2, r7, #4
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	1d3b      	adds	r3, r7, #4
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	f107 0320 	add.w	r3, r7, #32
 8005ba0:	f107 0220 	add.w	r2, r7, #32
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	463b      	mov	r3, r7
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	011a      	lsls	r2, r3, #4
 8005bb2:	f107 0320 	add.w	r3, r7, #32
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005bbe:	f107 031c 	add.w	r3, r7, #28
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	f107 031c 	add.w	r3, r7, #28
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005bd2:	463b      	mov	r3, r7
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	891b      	ldrh	r3, [r3, #8]
 8005bd8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bdc:	463b      	mov	r3, r7
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6959      	ldr	r1, [r3, #20]
 8005be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bec:	1d38      	adds	r0, r7, #4
 8005bee:	6800      	ldr	r0, [r0, #0]
 8005bf0:	f001 f9f7 	bl	8006fe2 <USB_WritePMA>
 8005bf4:	f000 bcc6 	b.w	8006584 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bf8:	463b      	mov	r3, r7
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d164      	bne.n	8005ccc <USB_EPStartXfer+0x554>
 8005c02:	1d3b      	adds	r3, r7, #4
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c08:	1d3b      	adds	r3, r7, #4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	461a      	mov	r2, r3
 8005c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c16:	4413      	add	r3, r2
 8005c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	011a      	lsls	r2, r3, #4
 8005c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c24:	4413      	add	r3, r2
 8005c26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d112      	bne.n	8005c5a <USB_EPStartXfer+0x4e2>
 8005c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c42:	801a      	strh	r2, [r3, #0]
 8005c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c56:	801a      	strh	r2, [r3, #0]
 8005c58:	e057      	b.n	8005d0a <USB_EPStartXfer+0x592>
 8005c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c60:	d817      	bhi.n	8005c92 <USB_EPStartXfer+0x51a>
 8005c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c66:	085b      	lsrs	r3, r3, #1
 8005c68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d004      	beq.n	8005c82 <USB_EPStartXfer+0x50a>
 8005c78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c82:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	029b      	lsls	r3, r3, #10
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c8e:	801a      	strh	r2, [r3, #0]
 8005c90:	e03b      	b.n	8005d0a <USB_EPStartXfer+0x592>
 8005c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca0:	f003 031f 	and.w	r3, r3, #31
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d104      	bne.n	8005cb2 <USB_EPStartXfer+0x53a>
 8005ca8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005cac:	3b01      	subs	r3, #1
 8005cae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005cb2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	029b      	lsls	r3, r3, #10
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cc8:	801a      	strh	r2, [r3, #0]
 8005cca:	e01e      	b.n	8005d0a <USB_EPStartXfer+0x592>
 8005ccc:	463b      	mov	r3, r7
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d119      	bne.n	8005d0a <USB_EPStartXfer+0x592>
 8005cd6:	1d3b      	adds	r3, r7, #4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	653b      	str	r3, [r7, #80]	; 0x50
 8005cdc:	1d3b      	adds	r3, r7, #4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cea:	4413      	add	r3, r2
 8005cec:	653b      	str	r3, [r7, #80]	; 0x50
 8005cee:	463b      	mov	r3, r7
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	011a      	lsls	r2, r3, #4
 8005cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d0a:	463b      	mov	r3, r7
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	891b      	ldrh	r3, [r3, #8]
 8005d10:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d14:	463b      	mov	r3, r7
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6959      	ldr	r1, [r3, #20]
 8005d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d24:	1d38      	adds	r0, r7, #4
 8005d26:	6800      	ldr	r0, [r0, #0]
 8005d28:	f001 f95b 	bl	8006fe2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695a      	ldr	r2, [r3, #20]
 8005d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d36:	441a      	add	r2, r3
 8005d38:	463b      	mov	r3, r7
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d3e:	463b      	mov	r3, r7
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6a1a      	ldr	r2, [r3, #32]
 8005d44:	463b      	mov	r3, r7
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d909      	bls.n	8005d62 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005d4e:	463b      	mov	r3, r7
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6a1a      	ldr	r2, [r3, #32]
 8005d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d58:	1ad2      	subs	r2, r2, r3
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	621a      	str	r2, [r3, #32]
 8005d60:	e008      	b.n	8005d74 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d62:	463b      	mov	r3, r7
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005d6c:	463b      	mov	r3, r7
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2200      	movs	r2, #0
 8005d72:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d74:	1d3b      	adds	r3, r7, #4
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	643b      	str	r3, [r7, #64]	; 0x40
 8005d7a:	463b      	mov	r3, r7
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	785b      	ldrb	r3, [r3, #1]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d164      	bne.n	8005e4e <USB_EPStartXfer+0x6d6>
 8005d84:	1d3b      	adds	r3, r7, #4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d8a:	1d3b      	adds	r3, r7, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	4413      	add	r3, r2
 8005d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	011a      	lsls	r2, r3, #4
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	4413      	add	r3, r2
 8005da8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dac:	637b      	str	r3, [r7, #52]	; 0x34
 8005dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d112      	bne.n	8005ddc <USB_EPStartXfer+0x664>
 8005db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	e054      	b.n	8005e86 <USB_EPStartXfer+0x70e>
 8005ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de0:	2b3e      	cmp	r3, #62	; 0x3e
 8005de2:	d817      	bhi.n	8005e14 <USB_EPStartXfer+0x69c>
 8005de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d004      	beq.n	8005e04 <USB_EPStartXfer+0x68c>
 8005dfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dfe:	3301      	adds	r3, #1
 8005e00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	029b      	lsls	r3, r3, #10
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e038      	b.n	8005e86 <USB_EPStartXfer+0x70e>
 8005e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e22:	f003 031f 	and.w	r3, r3, #31
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d104      	bne.n	8005e34 <USB_EPStartXfer+0x6bc>
 8005e2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005e34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	029b      	lsls	r3, r3, #10
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4a:	801a      	strh	r2, [r3, #0]
 8005e4c:	e01b      	b.n	8005e86 <USB_EPStartXfer+0x70e>
 8005e4e:	463b      	mov	r3, r7
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d116      	bne.n	8005e86 <USB_EPStartXfer+0x70e>
 8005e58:	1d3b      	adds	r3, r7, #4
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e66:	4413      	add	r3, r2
 8005e68:	643b      	str	r3, [r7, #64]	; 0x40
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	011a      	lsls	r2, r3, #4
 8005e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e74:	4413      	add	r3, r2
 8005e76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e86:	463b      	mov	r3, r7
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	895b      	ldrh	r3, [r3, #10]
 8005e8c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e90:	463b      	mov	r3, r7
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6959      	ldr	r1, [r3, #20]
 8005e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ea0:	1d38      	adds	r0, r7, #4
 8005ea2:	6800      	ldr	r0, [r0, #0]
 8005ea4:	f001 f89d 	bl	8006fe2 <USB_WritePMA>
 8005ea8:	e36c      	b.n	8006584 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005eaa:	463b      	mov	r3, r7
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005eb4:	1d3b      	adds	r3, r7, #4
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	463b      	mov	r3, r7
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ece:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005ed2:	1d3b      	adds	r3, r7, #4
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	441a      	add	r2, r3
 8005ee0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ef8:	1d3b      	adds	r3, r7, #4
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005efe:	1d3b      	adds	r3, r7, #4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f0c:	4413      	add	r3, r2
 8005f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f10:	463b      	mov	r3, r7
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	011a      	lsls	r2, r3, #4
 8005f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f20:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f2c:	463b      	mov	r3, r7
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	891b      	ldrh	r3, [r3, #8]
 8005f32:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f36:	463b      	mov	r3, r7
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6959      	ldr	r1, [r3, #20]
 8005f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f46:	1d38      	adds	r0, r7, #4
 8005f48:	6800      	ldr	r0, [r0, #0]
 8005f4a:	f001 f84a 	bl	8006fe2 <USB_WritePMA>
 8005f4e:	e319      	b.n	8006584 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005f50:	1d3b      	adds	r3, r7, #4
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	463b      	mov	r3, r7
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005f6e:	1d3b      	adds	r3, r7, #4
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	463b      	mov	r3, r7
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	441a      	add	r2, r3
 8005f7c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f88:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005f94:	463b      	mov	r3, r7
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6a1a      	ldr	r2, [r3, #32]
 8005f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f9e:	1ad2      	subs	r2, r2, r3
 8005fa0:	463b      	mov	r3, r7
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fa6:	1d3b      	adds	r3, r7, #4
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	463b      	mov	r3, r7
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 8162 	beq.w	8006286 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fc2:	1d3b      	adds	r3, r7, #4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fca:	463b      	mov	r3, r7
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	785b      	ldrb	r3, [r3, #1]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d164      	bne.n	800609e <USB_EPStartXfer+0x926>
 8005fd4:	1d3b      	adds	r3, r7, #4
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fda:	1d3b      	adds	r3, r7, #4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fe8:	4413      	add	r3, r2
 8005fea:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fec:	463b      	mov	r3, r7
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	011a      	lsls	r2, r3, #4
 8005ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ffc:	677b      	str	r3, [r7, #116]	; 0x74
 8005ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006002:	2b00      	cmp	r3, #0
 8006004:	d112      	bne.n	800602c <USB_EPStartXfer+0x8b4>
 8006006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006010:	b29a      	uxth	r2, r3
 8006012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006014:	801a      	strh	r2, [r3, #0]
 8006016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006024:	b29a      	uxth	r2, r3
 8006026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006028:	801a      	strh	r2, [r3, #0]
 800602a:	e057      	b.n	80060dc <USB_EPStartXfer+0x964>
 800602c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006030:	2b3e      	cmp	r3, #62	; 0x3e
 8006032:	d817      	bhi.n	8006064 <USB_EPStartXfer+0x8ec>
 8006034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006038:	085b      	lsrs	r3, r3, #1
 800603a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800603e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d004      	beq.n	8006054 <USB_EPStartXfer+0x8dc>
 800604a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800604e:	3301      	adds	r3, #1
 8006050:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006054:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006058:	b29b      	uxth	r3, r3
 800605a:	029b      	lsls	r3, r3, #10
 800605c:	b29a      	uxth	r2, r3
 800605e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006060:	801a      	strh	r2, [r3, #0]
 8006062:	e03b      	b.n	80060dc <USB_EPStartXfer+0x964>
 8006064:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800606e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006072:	f003 031f 	and.w	r3, r3, #31
 8006076:	2b00      	cmp	r3, #0
 8006078:	d104      	bne.n	8006084 <USB_EPStartXfer+0x90c>
 800607a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800607e:	3b01      	subs	r3, #1
 8006080:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006084:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006088:	b29b      	uxth	r3, r3
 800608a:	029b      	lsls	r3, r3, #10
 800608c:	b29b      	uxth	r3, r3
 800608e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006096:	b29a      	uxth	r2, r3
 8006098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800609a:	801a      	strh	r2, [r3, #0]
 800609c:	e01e      	b.n	80060dc <USB_EPStartXfer+0x964>
 800609e:	463b      	mov	r3, r7
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	785b      	ldrb	r3, [r3, #1]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d119      	bne.n	80060dc <USB_EPStartXfer+0x964>
 80060a8:	1d3b      	adds	r3, r7, #4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060b8:	4413      	add	r3, r2
 80060ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060be:	463b      	mov	r3, r7
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	011a      	lsls	r2, r3, #4
 80060c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060ca:	4413      	add	r3, r2
 80060cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80060dc:	463b      	mov	r3, r7
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	895b      	ldrh	r3, [r3, #10]
 80060e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060e6:	463b      	mov	r3, r7
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6959      	ldr	r1, [r3, #20]
 80060ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060f6:	1d38      	adds	r0, r7, #4
 80060f8:	6800      	ldr	r0, [r0, #0]
 80060fa:	f000 ff72 	bl	8006fe2 <USB_WritePMA>
          ep->xfer_buff += len;
 80060fe:	463b      	mov	r3, r7
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006108:	441a      	add	r2, r3
 800610a:	463b      	mov	r3, r7
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006110:	463b      	mov	r3, r7
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6a1a      	ldr	r2, [r3, #32]
 8006116:	463b      	mov	r3, r7
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	429a      	cmp	r2, r3
 800611e:	d909      	bls.n	8006134 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8006120:	463b      	mov	r3, r7
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6a1a      	ldr	r2, [r3, #32]
 8006126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612a:	1ad2      	subs	r2, r2, r3
 800612c:	463b      	mov	r3, r7
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	621a      	str	r2, [r3, #32]
 8006132:	e008      	b.n	8006146 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8006134:	463b      	mov	r3, r7
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800613e:	463b      	mov	r3, r7
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2200      	movs	r2, #0
 8006144:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 821a 	beq.w	8006584 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006150:	463b      	mov	r3, r7
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d164      	bne.n	8006224 <USB_EPStartXfer+0xaac>
 800615a:	1d3b      	adds	r3, r7, #4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006160:	1d3b      	adds	r3, r7, #4
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006168:	b29b      	uxth	r3, r3
 800616a:	461a      	mov	r2, r3
 800616c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800616e:	4413      	add	r3, r2
 8006170:	66bb      	str	r3, [r7, #104]	; 0x68
 8006172:	463b      	mov	r3, r7
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	011a      	lsls	r2, r3, #4
 800617a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800617c:	4413      	add	r3, r2
 800617e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006182:	667b      	str	r3, [r7, #100]	; 0x64
 8006184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006188:	2b00      	cmp	r3, #0
 800618a:	d112      	bne.n	80061b2 <USB_EPStartXfer+0xa3a>
 800618c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29b      	uxth	r3, r3
 8006192:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006196:	b29a      	uxth	r2, r3
 8006198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800619a:	801a      	strh	r2, [r3, #0]
 800619c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ae:	801a      	strh	r2, [r3, #0]
 80061b0:	e057      	b.n	8006262 <USB_EPStartXfer+0xaea>
 80061b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b6:	2b3e      	cmp	r3, #62	; 0x3e
 80061b8:	d817      	bhi.n	80061ea <USB_EPStartXfer+0xa72>
 80061ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061be:	085b      	lsrs	r3, r3, #1
 80061c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d004      	beq.n	80061da <USB_EPStartXfer+0xa62>
 80061d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d4:	3301      	adds	r3, #1
 80061d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061de:	b29b      	uxth	r3, r3
 80061e0:	029b      	lsls	r3, r3, #10
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061e6:	801a      	strh	r2, [r3, #0]
 80061e8:	e03b      	b.n	8006262 <USB_EPStartXfer+0xaea>
 80061ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ee:	095b      	lsrs	r3, r3, #5
 80061f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f8:	f003 031f 	and.w	r3, r3, #31
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d104      	bne.n	800620a <USB_EPStartXfer+0xa92>
 8006200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006204:	3b01      	subs	r3, #1
 8006206:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800620a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800620e:	b29b      	uxth	r3, r3
 8006210:	029b      	lsls	r3, r3, #10
 8006212:	b29b      	uxth	r3, r3
 8006214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800621c:	b29a      	uxth	r2, r3
 800621e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006220:	801a      	strh	r2, [r3, #0]
 8006222:	e01e      	b.n	8006262 <USB_EPStartXfer+0xaea>
 8006224:	463b      	mov	r3, r7
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	785b      	ldrb	r3, [r3, #1]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d119      	bne.n	8006262 <USB_EPStartXfer+0xaea>
 800622e:	1d3b      	adds	r3, r7, #4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	673b      	str	r3, [r7, #112]	; 0x70
 8006234:	1d3b      	adds	r3, r7, #4
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800623c:	b29b      	uxth	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006242:	4413      	add	r3, r2
 8006244:	673b      	str	r3, [r7, #112]	; 0x70
 8006246:	463b      	mov	r3, r7
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	011a      	lsls	r2, r3, #4
 800624e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006250:	4413      	add	r3, r2
 8006252:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006256:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625c:	b29a      	uxth	r2, r3
 800625e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006260:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006262:	463b      	mov	r3, r7
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	891b      	ldrh	r3, [r3, #8]
 8006268:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800626c:	463b      	mov	r3, r7
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6959      	ldr	r1, [r3, #20]
 8006272:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006276:	b29b      	uxth	r3, r3
 8006278:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800627c:	1d38      	adds	r0, r7, #4
 800627e:	6800      	ldr	r0, [r0, #0]
 8006280:	f000 feaf 	bl	8006fe2 <USB_WritePMA>
 8006284:	e17e      	b.n	8006584 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006286:	463b      	mov	r3, r7
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d16f      	bne.n	8006370 <USB_EPStartXfer+0xbf8>
 8006290:	1d3b      	adds	r3, r7, #4
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006298:	1d3b      	adds	r3, r7, #4
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	461a      	mov	r2, r3
 80062a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062a8:	4413      	add	r3, r2
 80062aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062ae:	463b      	mov	r3, r7
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	011a      	lsls	r2, r3, #4
 80062b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062ba:	4413      	add	r3, r2
 80062bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d116      	bne.n	80062fa <USB_EPStartXfer+0xb82>
 80062cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062d8:	b29a      	uxth	r2, r3
 80062da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062de:	801a      	strh	r2, [r3, #0]
 80062e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f6:	801a      	strh	r2, [r3, #0]
 80062f8:	e05f      	b.n	80063ba <USB_EPStartXfer+0xc42>
 80062fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006300:	d818      	bhi.n	8006334 <USB_EPStartXfer+0xbbc>
 8006302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006306:	085b      	lsrs	r3, r3, #1
 8006308:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800630c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <USB_EPStartXfer+0xbaa>
 8006318:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800631c:	3301      	adds	r3, #1
 800631e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006322:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006326:	b29b      	uxth	r3, r3
 8006328:	029b      	lsls	r3, r3, #10
 800632a:	b29a      	uxth	r2, r3
 800632c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006330:	801a      	strh	r2, [r3, #0]
 8006332:	e042      	b.n	80063ba <USB_EPStartXfer+0xc42>
 8006334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800633e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006342:	f003 031f 	and.w	r3, r3, #31
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <USB_EPStartXfer+0xbdc>
 800634a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800634e:	3b01      	subs	r3, #1
 8006350:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006354:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006358:	b29b      	uxth	r3, r3
 800635a:	029b      	lsls	r3, r3, #10
 800635c:	b29b      	uxth	r3, r3
 800635e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006366:	b29a      	uxth	r2, r3
 8006368:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800636c:	801a      	strh	r2, [r3, #0]
 800636e:	e024      	b.n	80063ba <USB_EPStartXfer+0xc42>
 8006370:	463b      	mov	r3, r7
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	785b      	ldrb	r3, [r3, #1]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d11f      	bne.n	80063ba <USB_EPStartXfer+0xc42>
 800637a:	1d3b      	adds	r3, r7, #4
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006382:	1d3b      	adds	r3, r7, #4
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800638a:	b29b      	uxth	r3, r3
 800638c:	461a      	mov	r2, r3
 800638e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006392:	4413      	add	r3, r2
 8006394:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006398:	463b      	mov	r3, r7
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	011a      	lsls	r2, r3, #4
 80063a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063a4:	4413      	add	r3, r2
 80063a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063ba:	463b      	mov	r3, r7
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	891b      	ldrh	r3, [r3, #8]
 80063c0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063c4:	463b      	mov	r3, r7
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6959      	ldr	r1, [r3, #20]
 80063ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063d4:	1d38      	adds	r0, r7, #4
 80063d6:	6800      	ldr	r0, [r0, #0]
 80063d8:	f000 fe03 	bl	8006fe2 <USB_WritePMA>
          ep->xfer_buff += len;
 80063dc:	463b      	mov	r3, r7
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695a      	ldr	r2, [r3, #20]
 80063e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e6:	441a      	add	r2, r3
 80063e8:	463b      	mov	r3, r7
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80063ee:	463b      	mov	r3, r7
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6a1a      	ldr	r2, [r3, #32]
 80063f4:	463b      	mov	r3, r7
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d909      	bls.n	8006412 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80063fe:	463b      	mov	r3, r7
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006408:	1ad2      	subs	r2, r2, r3
 800640a:	463b      	mov	r3, r7
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	621a      	str	r2, [r3, #32]
 8006410:	e008      	b.n	8006424 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8006412:	463b      	mov	r3, r7
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800641c:	463b      	mov	r3, r7
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2200      	movs	r2, #0
 8006422:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80ab 	beq.w	8006584 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800642e:	1d3b      	adds	r3, r7, #4
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006436:	463b      	mov	r3, r7
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d16f      	bne.n	8006520 <USB_EPStartXfer+0xda8>
 8006440:	1d3b      	adds	r3, r7, #4
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006448:	1d3b      	adds	r3, r7, #4
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006450:	b29b      	uxth	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006458:	4413      	add	r3, r2
 800645a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800645e:	463b      	mov	r3, r7
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	011a      	lsls	r2, r3, #4
 8006466:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800646a:	4413      	add	r3, r2
 800646c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006478:	2b00      	cmp	r3, #0
 800647a:	d116      	bne.n	80064aa <USB_EPStartXfer+0xd32>
 800647c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b29b      	uxth	r3, r3
 8006484:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006488:	b29a      	uxth	r2, r3
 800648a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800648e:	801a      	strh	r2, [r3, #0]
 8006490:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	e05b      	b.n	8006562 <USB_EPStartXfer+0xdea>
 80064aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ae:	2b3e      	cmp	r3, #62	; 0x3e
 80064b0:	d818      	bhi.n	80064e4 <USB_EPStartXfer+0xd6c>
 80064b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b6:	085b      	lsrs	r3, r3, #1
 80064b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80064bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <USB_EPStartXfer+0xd5a>
 80064c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064cc:	3301      	adds	r3, #1
 80064ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80064d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	029b      	lsls	r3, r3, #10
 80064da:	b29a      	uxth	r2, r3
 80064dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064e0:	801a      	strh	r2, [r3, #0]
 80064e2:	e03e      	b.n	8006562 <USB_EPStartXfer+0xdea>
 80064e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e8:	095b      	lsrs	r3, r3, #5
 80064ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80064ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f2:	f003 031f 	and.w	r3, r3, #31
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d104      	bne.n	8006504 <USB_EPStartXfer+0xd8c>
 80064fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064fe:	3b01      	subs	r3, #1
 8006500:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006508:	b29b      	uxth	r3, r3
 800650a:	029b      	lsls	r3, r3, #10
 800650c:	b29b      	uxth	r3, r3
 800650e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006516:	b29a      	uxth	r2, r3
 8006518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800651c:	801a      	strh	r2, [r3, #0]
 800651e:	e020      	b.n	8006562 <USB_EPStartXfer+0xdea>
 8006520:	463b      	mov	r3, r7
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	785b      	ldrb	r3, [r3, #1]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d11b      	bne.n	8006562 <USB_EPStartXfer+0xdea>
 800652a:	1d3b      	adds	r3, r7, #4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006532:	b29b      	uxth	r3, r3
 8006534:	461a      	mov	r2, r3
 8006536:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800653a:	4413      	add	r3, r2
 800653c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006540:	463b      	mov	r3, r7
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	011a      	lsls	r2, r3, #4
 8006548:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800654c:	4413      	add	r3, r2
 800654e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800655a:	b29a      	uxth	r2, r3
 800655c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006560:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006562:	463b      	mov	r3, r7
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	895b      	ldrh	r3, [r3, #10]
 8006568:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800656c:	463b      	mov	r3, r7
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6959      	ldr	r1, [r3, #20]
 8006572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006576:	b29b      	uxth	r3, r3
 8006578:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800657c:	1d38      	adds	r0, r7, #4
 800657e:	6800      	ldr	r0, [r0, #0]
 8006580:	f000 fd2f 	bl	8006fe2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006584:	1d3b      	adds	r3, r7, #4
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	463b      	mov	r3, r7
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	b29b      	uxth	r3, r3
 8006596:	f107 020a 	add.w	r2, r7, #10
 800659a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800659e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a2:	8013      	strh	r3, [r2, #0]
 80065a4:	f107 030a 	add.w	r3, r7, #10
 80065a8:	f107 020a 	add.w	r2, r7, #10
 80065ac:	8812      	ldrh	r2, [r2, #0]
 80065ae:	f082 0210 	eor.w	r2, r2, #16
 80065b2:	801a      	strh	r2, [r3, #0]
 80065b4:	f107 030a 	add.w	r3, r7, #10
 80065b8:	f107 020a 	add.w	r2, r7, #10
 80065bc:	8812      	ldrh	r2, [r2, #0]
 80065be:	f082 0220 	eor.w	r2, r2, #32
 80065c2:	801a      	strh	r2, [r3, #0]
 80065c4:	1d3b      	adds	r3, r7, #4
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	463b      	mov	r3, r7
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	441a      	add	r2, r3
 80065d2:	f107 030a 	add.w	r3, r7, #10
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	8013      	strh	r3, [r2, #0]
 80065ec:	e3b5      	b.n	8006d5a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80065ee:	463b      	mov	r3, r7
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	7b1b      	ldrb	r3, [r3, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f040 8090 	bne.w	800671a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80065fa:	463b      	mov	r3, r7
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	699a      	ldr	r2, [r3, #24]
 8006600:	463b      	mov	r3, r7
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	429a      	cmp	r2, r3
 8006608:	d90e      	bls.n	8006628 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800660a:	463b      	mov	r3, r7
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006614:	463b      	mov	r3, r7
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699a      	ldr	r2, [r3, #24]
 800661a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800661e:	1ad2      	subs	r2, r2, r3
 8006620:	463b      	mov	r3, r7
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	619a      	str	r2, [r3, #24]
 8006626:	e008      	b.n	800663a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006628:	463b      	mov	r3, r7
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006632:	463b      	mov	r3, r7
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2200      	movs	r2, #0
 8006638:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800663a:	1d3b      	adds	r3, r7, #4
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006642:	1d3b      	adds	r3, r7, #4
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664a:	b29b      	uxth	r3, r3
 800664c:	461a      	mov	r2, r3
 800664e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006652:	4413      	add	r3, r2
 8006654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006658:	463b      	mov	r3, r7
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	011a      	lsls	r2, r3, #4
 8006660:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006664:	4413      	add	r3, r2
 8006666:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800666a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800666e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d116      	bne.n	80066a4 <USB_EPStartXfer+0xf2c>
 8006676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006682:	b29a      	uxth	r2, r3
 8006684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	b29b      	uxth	r3, r3
 8006692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669a:	b29a      	uxth	r2, r3
 800669c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066a0:	801a      	strh	r2, [r3, #0]
 80066a2:	e32c      	b.n	8006cfe <USB_EPStartXfer+0x1586>
 80066a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a8:	2b3e      	cmp	r3, #62	; 0x3e
 80066aa:	d818      	bhi.n	80066de <USB_EPStartXfer+0xf66>
 80066ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b0:	085b      	lsrs	r3, r3, #1
 80066b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d004      	beq.n	80066cc <USB_EPStartXfer+0xf54>
 80066c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066c6:	3301      	adds	r3, #1
 80066c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	029b      	lsls	r3, r3, #10
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066da:	801a      	strh	r2, [r3, #0]
 80066dc:	e30f      	b.n	8006cfe <USB_EPStartXfer+0x1586>
 80066de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d104      	bne.n	80066fe <USB_EPStartXfer+0xf86>
 80066f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066f8:	3b01      	subs	r3, #1
 80066fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006702:	b29b      	uxth	r3, r3
 8006704:	029b      	lsls	r3, r3, #10
 8006706:	b29b      	uxth	r3, r3
 8006708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006710:	b29a      	uxth	r2, r3
 8006712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	e2f1      	b.n	8006cfe <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800671a:	463b      	mov	r3, r7
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	78db      	ldrb	r3, [r3, #3]
 8006720:	2b02      	cmp	r3, #2
 8006722:	f040 818f 	bne.w	8006a44 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006726:	463b      	mov	r3, r7
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	785b      	ldrb	r3, [r3, #1]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d175      	bne.n	800681c <USB_EPStartXfer+0x10a4>
 8006730:	1d3b      	adds	r3, r7, #4
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006738:	1d3b      	adds	r3, r7, #4
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006740:	b29b      	uxth	r3, r3
 8006742:	461a      	mov	r2, r3
 8006744:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006748:	4413      	add	r3, r2
 800674a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800674e:	463b      	mov	r3, r7
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	011a      	lsls	r2, r3, #4
 8006756:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800675a:	4413      	add	r3, r2
 800675c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006760:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006764:	463b      	mov	r3, r7
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d116      	bne.n	800679c <USB_EPStartXfer+0x1024>
 800676e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29b      	uxth	r3, r3
 8006776:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800677a:	b29a      	uxth	r2, r3
 800677c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006780:	801a      	strh	r2, [r3, #0]
 8006782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	b29b      	uxth	r3, r3
 800678a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800678e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006792:	b29a      	uxth	r2, r3
 8006794:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006798:	801a      	strh	r2, [r3, #0]
 800679a:	e065      	b.n	8006868 <USB_EPStartXfer+0x10f0>
 800679c:	463b      	mov	r3, r7
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b3e      	cmp	r3, #62	; 0x3e
 80067a4:	d81a      	bhi.n	80067dc <USB_EPStartXfer+0x1064>
 80067a6:	463b      	mov	r3, r7
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	085b      	lsrs	r3, r3, #1
 80067ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067b2:	463b      	mov	r3, r7
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d004      	beq.n	80067ca <USB_EPStartXfer+0x1052>
 80067c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c4:	3301      	adds	r3, #1
 80067c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	029b      	lsls	r3, r3, #10
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067d8:	801a      	strh	r2, [r3, #0]
 80067da:	e045      	b.n	8006868 <USB_EPStartXfer+0x10f0>
 80067dc:	463b      	mov	r3, r7
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067e8:	463b      	mov	r3, r7
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f003 031f 	and.w	r3, r3, #31
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d104      	bne.n	8006800 <USB_EPStartXfer+0x1088>
 80067f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067fa:	3b01      	subs	r3, #1
 80067fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006804:	b29b      	uxth	r3, r3
 8006806:	029b      	lsls	r3, r3, #10
 8006808:	b29b      	uxth	r3, r3
 800680a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800680e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006812:	b29a      	uxth	r2, r3
 8006814:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006818:	801a      	strh	r2, [r3, #0]
 800681a:	e025      	b.n	8006868 <USB_EPStartXfer+0x10f0>
 800681c:	463b      	mov	r3, r7
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	785b      	ldrb	r3, [r3, #1]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d120      	bne.n	8006868 <USB_EPStartXfer+0x10f0>
 8006826:	1d3b      	adds	r3, r7, #4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800682e:	1d3b      	adds	r3, r7, #4
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006836:	b29b      	uxth	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800683e:	4413      	add	r3, r2
 8006840:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006844:	463b      	mov	r3, r7
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	011a      	lsls	r2, r3, #4
 800684c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006850:	4413      	add	r3, r2
 8006852:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006856:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800685a:	463b      	mov	r3, r7
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	b29a      	uxth	r2, r3
 8006862:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	1d3b      	adds	r3, r7, #4
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006870:	463b      	mov	r3, r7
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	785b      	ldrb	r3, [r3, #1]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d175      	bne.n	8006966 <USB_EPStartXfer+0x11ee>
 800687a:	1d3b      	adds	r3, r7, #4
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006882:	1d3b      	adds	r3, r7, #4
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688a:	b29b      	uxth	r3, r3
 800688c:	461a      	mov	r2, r3
 800688e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006892:	4413      	add	r3, r2
 8006894:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006898:	463b      	mov	r3, r7
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	011a      	lsls	r2, r3, #4
 80068a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068a4:	4413      	add	r3, r2
 80068a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068ae:	463b      	mov	r3, r7
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d116      	bne.n	80068e6 <USB_EPStartXfer+0x116e>
 80068b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068ca:	801a      	strh	r2, [r3, #0]
 80068cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068dc:	b29a      	uxth	r2, r3
 80068de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068e2:	801a      	strh	r2, [r3, #0]
 80068e4:	e061      	b.n	80069aa <USB_EPStartXfer+0x1232>
 80068e6:	463b      	mov	r3, r7
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b3e      	cmp	r3, #62	; 0x3e
 80068ee:	d81a      	bhi.n	8006926 <USB_EPStartXfer+0x11ae>
 80068f0:	463b      	mov	r3, r7
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	085b      	lsrs	r3, r3, #1
 80068f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068fc:	463b      	mov	r3, r7
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d004      	beq.n	8006914 <USB_EPStartXfer+0x119c>
 800690a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800690e:	3301      	adds	r3, #1
 8006910:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006914:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006918:	b29b      	uxth	r3, r3
 800691a:	029b      	lsls	r3, r3, #10
 800691c:	b29a      	uxth	r2, r3
 800691e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006922:	801a      	strh	r2, [r3, #0]
 8006924:	e041      	b.n	80069aa <USB_EPStartXfer+0x1232>
 8006926:	463b      	mov	r3, r7
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006932:	463b      	mov	r3, r7
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f003 031f 	and.w	r3, r3, #31
 800693c:	2b00      	cmp	r3, #0
 800693e:	d104      	bne.n	800694a <USB_EPStartXfer+0x11d2>
 8006940:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006944:	3b01      	subs	r3, #1
 8006946:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800694a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800694e:	b29b      	uxth	r3, r3
 8006950:	029b      	lsls	r3, r3, #10
 8006952:	b29b      	uxth	r3, r3
 8006954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695c:	b29a      	uxth	r2, r3
 800695e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	e021      	b.n	80069aa <USB_EPStartXfer+0x1232>
 8006966:	463b      	mov	r3, r7
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	785b      	ldrb	r3, [r3, #1]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d11c      	bne.n	80069aa <USB_EPStartXfer+0x1232>
 8006970:	1d3b      	adds	r3, r7, #4
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006978:	b29b      	uxth	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006980:	4413      	add	r3, r2
 8006982:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006986:	463b      	mov	r3, r7
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	011a      	lsls	r2, r3, #4
 800698e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006992:	4413      	add	r3, r2
 8006994:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006998:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800699c:	463b      	mov	r3, r7
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069a8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80069aa:	463b      	mov	r3, r7
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 81a4 	beq.w	8006cfe <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80069b6:	1d3b      	adds	r3, r7, #4
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	463b      	mov	r3, r7
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069ca:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80069ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d005      	beq.n	80069e2 <USB_EPStartXfer+0x126a>
 80069d6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80069da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10d      	bne.n	80069fe <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069e2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80069e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f040 8187 	bne.w	8006cfe <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069f0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80069f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f040 8180 	bne.w	8006cfe <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80069fe:	1d3b      	adds	r3, r7, #4
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	463b      	mov	r3, r7
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a18:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006a1c:	1d3b      	adds	r3, r7, #4
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	463b      	mov	r3, r7
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	441a      	add	r2, r3
 8006a2a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	8013      	strh	r3, [r2, #0]
 8006a42:	e15c      	b.n	8006cfe <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006a44:	463b      	mov	r3, r7
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	78db      	ldrb	r3, [r3, #3]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	f040 8155 	bne.w	8006cfa <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006a50:	463b      	mov	r3, r7
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	463b      	mov	r3, r7
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d90e      	bls.n	8006a7e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006a60:	463b      	mov	r3, r7
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006a6a:	463b      	mov	r3, r7
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a74:	1ad2      	subs	r2, r2, r3
 8006a76:	463b      	mov	r3, r7
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	619a      	str	r2, [r3, #24]
 8006a7c:	e008      	b.n	8006a90 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006a7e:	463b      	mov	r3, r7
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006a88:	463b      	mov	r3, r7
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006a90:	463b      	mov	r3, r7
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	785b      	ldrb	r3, [r3, #1]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d16f      	bne.n	8006b7a <USB_EPStartXfer+0x1402>
 8006a9a:	1d3b      	adds	r3, r7, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006aa2:	1d3b      	adds	r3, r7, #4
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	461a      	mov	r2, r3
 8006aae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ab8:	463b      	mov	r3, r7
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	011a      	lsls	r2, r3, #4
 8006ac0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006aca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d116      	bne.n	8006b04 <USB_EPStartXfer+0x138c>
 8006ad6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ae8:	801a      	strh	r2, [r3, #0]
 8006aea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	e05f      	b.n	8006bc4 <USB_EPStartXfer+0x144c>
 8006b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b08:	2b3e      	cmp	r3, #62	; 0x3e
 8006b0a:	d818      	bhi.n	8006b3e <USB_EPStartXfer+0x13c6>
 8006b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d004      	beq.n	8006b2c <USB_EPStartXfer+0x13b4>
 8006b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b26:	3301      	adds	r3, #1
 8006b28:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	029b      	lsls	r3, r3, #10
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b3a:	801a      	strh	r2, [r3, #0]
 8006b3c:	e042      	b.n	8006bc4 <USB_EPStartXfer+0x144c>
 8006b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b42:	095b      	lsrs	r3, r3, #5
 8006b44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b4c:	f003 031f 	and.w	r3, r3, #31
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d104      	bne.n	8006b5e <USB_EPStartXfer+0x13e6>
 8006b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	029b      	lsls	r3, r3, #10
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b76:	801a      	strh	r2, [r3, #0]
 8006b78:	e024      	b.n	8006bc4 <USB_EPStartXfer+0x144c>
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	785b      	ldrb	r3, [r3, #1]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d11f      	bne.n	8006bc4 <USB_EPStartXfer+0x144c>
 8006b84:	1d3b      	adds	r3, r7, #4
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b8c:	1d3b      	adds	r3, r7, #4
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ba2:	463b      	mov	r3, r7
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	011a      	lsls	r2, r3, #4
 8006baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bae:	4413      	add	r3, r2
 8006bb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bb4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bc2:	801a      	strh	r2, [r3, #0]
 8006bc4:	1d3b      	adds	r3, r7, #4
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bcc:	463b      	mov	r3, r7
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	785b      	ldrb	r3, [r3, #1]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d16f      	bne.n	8006cb6 <USB_EPStartXfer+0x153e>
 8006bd6:	1d3b      	adds	r3, r7, #4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bde:	1d3b      	adds	r3, r7, #4
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	461a      	mov	r2, r3
 8006bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bee:	4413      	add	r3, r2
 8006bf0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bf4:	463b      	mov	r3, r7
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	011a      	lsls	r2, r3, #4
 8006bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c00:	4413      	add	r3, r2
 8006c02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d116      	bne.n	8006c40 <USB_EPStartXfer+0x14c8>
 8006c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c24:	801a      	strh	r2, [r3, #0]
 8006c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c3c:	801a      	strh	r2, [r3, #0]
 8006c3e:	e05e      	b.n	8006cfe <USB_EPStartXfer+0x1586>
 8006c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c44:	2b3e      	cmp	r3, #62	; 0x3e
 8006c46:	d818      	bhi.n	8006c7a <USB_EPStartXfer+0x1502>
 8006c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c4c:	085b      	lsrs	r3, r3, #1
 8006c4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d004      	beq.n	8006c68 <USB_EPStartXfer+0x14f0>
 8006c5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c62:	3301      	adds	r3, #1
 8006c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	029b      	lsls	r3, r3, #10
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c76:	801a      	strh	r2, [r3, #0]
 8006c78:	e041      	b.n	8006cfe <USB_EPStartXfer+0x1586>
 8006c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c7e:	095b      	lsrs	r3, r3, #5
 8006c80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d104      	bne.n	8006c9a <USB_EPStartXfer+0x1522>
 8006c90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c94:	3b01      	subs	r3, #1
 8006c96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	029b      	lsls	r3, r3, #10
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cb2:	801a      	strh	r2, [r3, #0]
 8006cb4:	e023      	b.n	8006cfe <USB_EPStartXfer+0x1586>
 8006cb6:	463b      	mov	r3, r7
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d11e      	bne.n	8006cfe <USB_EPStartXfer+0x1586>
 8006cc0:	1d3b      	adds	r3, r7, #4
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	461a      	mov	r2, r3
 8006ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cd6:	463b      	mov	r3, r7
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	011a      	lsls	r2, r3, #4
 8006cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf6:	801a      	strh	r2, [r3, #0]
 8006cf8:	e001      	b.n	8006cfe <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e02e      	b.n	8006d5c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cfe:	1d3b      	adds	r3, r7, #4
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	463b      	mov	r3, r7
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d18:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006d1c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006d20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d24:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006d28:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006d2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d30:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006d34:	1d3b      	adds	r3, r7, #4
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	463b      	mov	r3, r7
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	441a      	add	r2, r3
 8006d42:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	785b      	ldrb	r3, [r3, #1]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d020      	beq.n	8006dba <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d8e:	81bb      	strh	r3, [r7, #12]
 8006d90:	89bb      	ldrh	r3, [r7, #12]
 8006d92:	f083 0310 	eor.w	r3, r3, #16
 8006d96:	81bb      	strh	r3, [r7, #12]
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	441a      	add	r2, r3
 8006da2:	89bb      	ldrh	r3, [r7, #12]
 8006da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	8013      	strh	r3, [r2, #0]
 8006db8:	e01f      	b.n	8006dfa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd0:	81fb      	strh	r3, [r7, #14]
 8006dd2:	89fb      	ldrh	r3, [r7, #14]
 8006dd4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dd8:	81fb      	strh	r3, [r7, #14]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	441a      	add	r2, r3
 8006de4:	89fb      	ldrh	r3, [r7, #14]
 8006de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr

08006e06 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b087      	sub	sp, #28
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	7b1b      	ldrb	r3, [r3, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f040 809d 	bne.w	8006f54 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	785b      	ldrb	r3, [r3, #1]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d04c      	beq.n	8006ebc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	823b      	strh	r3, [r7, #16]
 8006e30:	8a3b      	ldrh	r3, [r7, #16]
 8006e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d01b      	beq.n	8006e72 <USB_EPClearStall+0x6c>
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e50:	81fb      	strh	r3, [r7, #14]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	441a      	add	r2, r3
 8006e5c:	89fb      	ldrh	r3, [r7, #14]
 8006e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	78db      	ldrb	r3, [r3, #3]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d06c      	beq.n	8006f54 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e90:	81bb      	strh	r3, [r7, #12]
 8006e92:	89bb      	ldrh	r3, [r7, #12]
 8006e94:	f083 0320 	eor.w	r3, r3, #32
 8006e98:	81bb      	strh	r3, [r7, #12]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	441a      	add	r2, r3
 8006ea4:	89bb      	ldrh	r3, [r7, #12]
 8006ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	8013      	strh	r3, [r2, #0]
 8006eba:	e04b      	b.n	8006f54 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	82fb      	strh	r3, [r7, #22]
 8006eca:	8afb      	ldrh	r3, [r7, #22]
 8006ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01b      	beq.n	8006f0c <USB_EPClearStall+0x106>
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eea:	82bb      	strh	r3, [r7, #20]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	441a      	add	r2, r3
 8006ef6:	8abb      	ldrh	r3, [r7, #20]
 8006ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f22:	827b      	strh	r3, [r7, #18]
 8006f24:	8a7b      	ldrh	r3, [r7, #18]
 8006f26:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f2a:	827b      	strh	r3, [r7, #18]
 8006f2c:	8a7b      	ldrh	r3, [r7, #18]
 8006f2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f32:	827b      	strh	r3, [r7, #18]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	441a      	add	r2, r3
 8006f3e:	8a7b      	ldrh	r3, [r7, #18]
 8006f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr

08006f60 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d103      	bne.n	8006f7a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2280      	movs	r2, #128	; 0x80
 8006f76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bc80      	pop	{r7}
 8006f84:	4770      	bx	lr

08006f86 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bc80      	pop	{r7}
 8006f98:	4770      	bx	lr

08006f9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bc80      	pop	{r7}
 8006fac:	4770      	bx	lr

08006fae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b085      	sub	sp, #20
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr

08006fcc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bc80      	pop	{r7}
 8006fe0:	4770      	bx	lr

08006fe2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b08d      	sub	sp, #52	; 0x34
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	4611      	mov	r1, r2
 8006fee:	461a      	mov	r2, r3
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	80fb      	strh	r3, [r7, #6]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ff8:	88bb      	ldrh	r3, [r7, #4]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	085b      	lsrs	r3, r3, #1
 8006ffe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007008:	88fb      	ldrh	r3, [r7, #6]
 800700a:	005a      	lsls	r2, r3, #1
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007014:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800701a:	e01e      	b.n	800705a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	3301      	adds	r3, #1
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	021b      	lsls	r3, r3, #8
 8007030:	b29b      	uxth	r3, r3
 8007032:	461a      	mov	r2, r3
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	b29a      	uxth	r2, r3
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	3302      	adds	r3, #2
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	3302      	adds	r3, #2
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	3301      	adds	r3, #1
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007056:	3b01      	subs	r3, #1
 8007058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1dd      	bne.n	800701c <USB_WritePMA+0x3a>
  }
}
 8007060:	bf00      	nop
 8007062:	bf00      	nop
 8007064:	3734      	adds	r7, #52	; 0x34
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr

0800706c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800706c:	b480      	push	{r7}
 800706e:	b08b      	sub	sp, #44	; 0x2c
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	4611      	mov	r1, r2
 8007078:	461a      	mov	r2, r3
 800707a:	460b      	mov	r3, r1
 800707c:	80fb      	strh	r3, [r7, #6]
 800707e:	4613      	mov	r3, r2
 8007080:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007082:	88bb      	ldrh	r3, [r7, #4]
 8007084:	085b      	lsrs	r3, r3, #1
 8007086:	b29b      	uxth	r3, r3
 8007088:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	005a      	lsls	r2, r3, #1
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800709e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24
 80070a4:	e01b      	b.n	80070de <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	3302      	adds	r3, #2
 80070b2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	3301      	adds	r3, #1
 80070c0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	0a1b      	lsrs	r3, r3, #8
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	3301      	adds	r3, #1
 80070d0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	3302      	adds	r3, #2
 80070d6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	3b01      	subs	r3, #1
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e0      	bne.n	80070a6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80070e4:	88bb      	ldrh	r3, [r7, #4]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d007      	beq.n	8007100 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	701a      	strb	r2, [r3, #0]
  }
}
 8007100:	bf00      	nop
 8007102:	372c      	adds	r7, #44	; 0x2c
 8007104:	46bd      	mov	sp, r7
 8007106:	bc80      	pop	{r7}
 8007108:	4770      	bx	lr

0800710a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b084      	sub	sp, #16
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	460b      	mov	r3, r1
 8007114:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	7c1b      	ldrb	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d115      	bne.n	800714e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007126:	2202      	movs	r2, #2
 8007128:	2181      	movs	r1, #129	; 0x81
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f004 fd5f 	bl	800bbee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800713a:	2202      	movs	r2, #2
 800713c:	2101      	movs	r1, #1
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f004 fd55 	bl	800bbee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800714c:	e012      	b.n	8007174 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800714e:	2340      	movs	r3, #64	; 0x40
 8007150:	2202      	movs	r2, #2
 8007152:	2181      	movs	r1, #129	; 0x81
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f004 fd4a 	bl	800bbee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007160:	2340      	movs	r3, #64	; 0x40
 8007162:	2202      	movs	r2, #2
 8007164:	2101      	movs	r1, #1
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f004 fd41 	bl	800bbee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007174:	2308      	movs	r3, #8
 8007176:	2203      	movs	r2, #3
 8007178:	2182      	movs	r1, #130	; 0x82
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f004 fd37 	bl	800bbee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007186:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800718a:	f004 fe57 	bl	800be3c <USBD_static_malloc>
 800718e:	4602      	mov	r2, r0
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719c:	2b00      	cmp	r3, #0
 800719e:	d102      	bne.n	80071a6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80071a0:	2301      	movs	r3, #1
 80071a2:	73fb      	strb	r3, [r7, #15]
 80071a4:	e026      	b.n	80071f4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ac:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	7c1b      	ldrb	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d109      	bne.n	80071e4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071da:	2101      	movs	r1, #1
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f004 fdf7 	bl	800bdd0 <USBD_LL_PrepareReceive>
 80071e2:	e007      	b.n	80071f4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071ea:	2340      	movs	r3, #64	; 0x40
 80071ec:	2101      	movs	r1, #1
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f004 fdee 	bl	800bdd0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	460b      	mov	r3, r1
 8007208:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800720e:	2181      	movs	r1, #129	; 0x81
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f004 fd12 	bl	800bc3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800721c:	2101      	movs	r1, #1
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f004 fd0b 	bl	800bc3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800722c:	2182      	movs	r1, #130	; 0x82
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f004 fd03 	bl	800bc3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00e      	beq.n	8007262 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007254:	4618      	mov	r0, r3
 8007256:	f004 fdfd 	bl	800be54 <USBD_static_free>
    pdev->pClassData = NULL;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007262:	7bfb      	ldrb	r3, [r7, #15]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007292:	2b00      	cmp	r3, #0
 8007294:	d039      	beq.n	800730a <USBD_CDC_Setup+0x9e>
 8007296:	2b20      	cmp	r3, #32
 8007298:	d17f      	bne.n	800739a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	88db      	ldrh	r3, [r3, #6]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d029      	beq.n	80072f6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	b25b      	sxtb	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	da11      	bge.n	80072d0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80072b8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	88d2      	ldrh	r2, [r2, #6]
 80072be:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80072c0:	6939      	ldr	r1, [r7, #16]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	88db      	ldrh	r3, [r3, #6]
 80072c6:	461a      	mov	r2, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 fa0a 	bl	80086e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80072ce:	e06b      	b.n	80073a8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	785a      	ldrb	r2, [r3, #1]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	88db      	ldrh	r3, [r3, #6]
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80072e6:	6939      	ldr	r1, [r7, #16]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	88db      	ldrh	r3, [r3, #6]
 80072ec:	461a      	mov	r2, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f001 fa25 	bl	800873e <USBD_CtlPrepareRx>
      break;
 80072f4:	e058      	b.n	80073a8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	7850      	ldrb	r0, [r2, #1]
 8007302:	2200      	movs	r2, #0
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	4798      	blx	r3
      break;
 8007308:	e04e      	b.n	80073a8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	785b      	ldrb	r3, [r3, #1]
 800730e:	2b0b      	cmp	r3, #11
 8007310:	d02e      	beq.n	8007370 <USBD_CDC_Setup+0x104>
 8007312:	2b0b      	cmp	r3, #11
 8007314:	dc38      	bgt.n	8007388 <USBD_CDC_Setup+0x11c>
 8007316:	2b00      	cmp	r3, #0
 8007318:	d002      	beq.n	8007320 <USBD_CDC_Setup+0xb4>
 800731a:	2b0a      	cmp	r3, #10
 800731c:	d014      	beq.n	8007348 <USBD_CDC_Setup+0xdc>
 800731e:	e033      	b.n	8007388 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007326:	2b03      	cmp	r3, #3
 8007328:	d107      	bne.n	800733a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800732a:	f107 030c 	add.w	r3, r7, #12
 800732e:	2202      	movs	r2, #2
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 f9d5 	bl	80086e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007338:	e02e      	b.n	8007398 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f001 f966 	bl	800860e <USBD_CtlError>
            ret = USBD_FAIL;
 8007342:	2302      	movs	r3, #2
 8007344:	75fb      	strb	r3, [r7, #23]
          break;
 8007346:	e027      	b.n	8007398 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800734e:	2b03      	cmp	r3, #3
 8007350:	d107      	bne.n	8007362 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007352:	f107 030f 	add.w	r3, r7, #15
 8007356:	2201      	movs	r2, #1
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f001 f9c1 	bl	80086e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007360:	e01a      	b.n	8007398 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 f952 	bl	800860e <USBD_CtlError>
            ret = USBD_FAIL;
 800736a:	2302      	movs	r3, #2
 800736c:	75fb      	strb	r3, [r7, #23]
          break;
 800736e:	e013      	b.n	8007398 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007376:	2b03      	cmp	r3, #3
 8007378:	d00d      	beq.n	8007396 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 f946 	bl	800860e <USBD_CtlError>
            ret = USBD_FAIL;
 8007382:	2302      	movs	r3, #2
 8007384:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007386:	e006      	b.n	8007396 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 f93f 	bl	800860e <USBD_CtlError>
          ret = USBD_FAIL;
 8007390:	2302      	movs	r3, #2
 8007392:	75fb      	strb	r3, [r7, #23]
          break;
 8007394:	e000      	b.n	8007398 <USBD_CDC_Setup+0x12c>
          break;
 8007396:	bf00      	nop
      }
      break;
 8007398:	e006      	b.n	80073a8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f001 f936 	bl	800860e <USBD_CtlError>
      ret = USBD_FAIL;
 80073a2:	2302      	movs	r3, #2
 80073a4:	75fb      	strb	r3, [r7, #23]
      break;
 80073a6:	bf00      	nop
  }

  return ret;
 80073a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	460b      	mov	r3, r1
 80073bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073cc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d03a      	beq.n	800744e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80073d8:	78fa      	ldrb	r2, [r7, #3]
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	4613      	mov	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	331c      	adds	r3, #28
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d029      	beq.n	8007442 <USBD_CDC_DataIn+0x90>
 80073ee:	78fa      	ldrb	r2, [r7, #3]
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	440b      	add	r3, r1
 80073fc:	331c      	adds	r3, #28
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	78f9      	ldrb	r1, [r7, #3]
 8007402:	68b8      	ldr	r0, [r7, #8]
 8007404:	460b      	mov	r3, r1
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	4403      	add	r3, r0
 800740e:	3338      	adds	r3, #56	; 0x38
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	fbb2 f1f3 	udiv	r1, r2, r3
 8007416:	fb03 f301 	mul.w	r3, r3, r1
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d110      	bne.n	8007442 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007420:	78fa      	ldrb	r2, [r7, #3]
 8007422:	6879      	ldr	r1, [r7, #4]
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	440b      	add	r3, r1
 800742e:	331c      	adds	r3, #28
 8007430:	2200      	movs	r2, #0
 8007432:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007434:	78f9      	ldrb	r1, [r7, #3]
 8007436:	2300      	movs	r3, #0
 8007438:	2200      	movs	r2, #0
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f004 fca5 	bl	800bd8a <USBD_LL_Transmit>
 8007440:	e003      	b.n	800744a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	e000      	b.n	8007450 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800744e:	2302      	movs	r3, #2
  }
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	460b      	mov	r3, r1
 8007462:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800746c:	78fb      	ldrb	r3, [r7, #3]
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f004 fcd0 	bl	800be16 <USBD_LL_GetRxDataSize>
 8007476:	4602      	mov	r2, r0
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00d      	beq.n	80074a4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800749c:	4611      	mov	r1, r2
 800749e:	4798      	blx	r3

    return USBD_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	e000      	b.n	80074a6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80074a4:	2302      	movs	r3, #2
  }
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074bc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d015      	beq.n	80074f4 <USBD_CDC_EP0_RxReady+0x46>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80074ce:	2bff      	cmp	r3, #255	; 0xff
 80074d0:	d010      	beq.n	80074f4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80074e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80074e8:	b292      	uxth	r2, r2
 80074ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	22ff      	movs	r2, #255	; 0xff
 80074f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2243      	movs	r2, #67	; 0x43
 800750c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800750e:	4b03      	ldr	r3, [pc, #12]	; (800751c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	bc80      	pop	{r7}
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	2000009c 	.word	0x2000009c

08007520 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2243      	movs	r2, #67	; 0x43
 800752c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800752e:	4b03      	ldr	r3, [pc, #12]	; (800753c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	20000058 	.word	0x20000058

08007540 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2243      	movs	r2, #67	; 0x43
 800754c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800754e:	4b03      	ldr	r3, [pc, #12]	; (800755c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	200000e0 	.word	0x200000e0

08007560 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	220a      	movs	r2, #10
 800756c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800756e:	4b03      	ldr	r3, [pc, #12]	; (800757c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007570:	4618      	mov	r0, r3
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	bc80      	pop	{r7}
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	20000014 	.word	0x20000014

08007580 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800758a:	2302      	movs	r3, #2
 800758c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bc80      	pop	{r7}
 80075aa:	4770      	bx	lr

080075ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	4613      	mov	r3, r2
 80075b8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80075ca:	88fa      	ldrh	r2, [r7, #6]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	371c      	adds	r7, #28
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr

080075de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	bc80      	pop	{r7}
 8007602:	4770      	bx	lr

08007604 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007612:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d01c      	beq.n	8007658 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007624:	2b00      	cmp	r3, #0
 8007626:	d115      	bne.n	8007654 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2201      	movs	r2, #1
 800762c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007646:	b29b      	uxth	r3, r3
 8007648:	2181      	movs	r1, #129	; 0x81
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f004 fb9d 	bl	800bd8a <USBD_LL_Transmit>

      return USBD_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	e002      	b.n	800765a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007654:	2301      	movs	r3, #1
 8007656:	e000      	b.n	800765a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007658:	2302      	movs	r3, #2
  }
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007670:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007678:	2b00      	cmp	r3, #0
 800767a:	d017      	beq.n	80076ac <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	7c1b      	ldrb	r3, [r3, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d109      	bne.n	8007698 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800768a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800768e:	2101      	movs	r1, #1
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f004 fb9d 	bl	800bdd0 <USBD_LL_PrepareReceive>
 8007696:	e007      	b.n	80076a8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800769e:	2340      	movs	r3, #64	; 0x40
 80076a0:	2101      	movs	r1, #1
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f004 fb94 	bl	800bdd0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	e000      	b.n	80076ae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80076ac:	2302      	movs	r3, #2
  }
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	4613      	mov	r3, r2
 80076c2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80076ca:	2302      	movs	r3, #2
 80076cc:	e01a      	b.n	8007704 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	79fa      	ldrb	r2, [r7, #7]
 80076fa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f004 fa01 	bl	800bb04 <USBD_LL_Init>

  return USBD_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d006      	beq.n	800772e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007728:	2300      	movs	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]
 800772c:	e001      	b.n	8007732 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800772e:	2302      	movs	r3, #2
 8007730:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007732:	7bfb      	ldrb	r3, [r7, #15]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	bc80      	pop	{r7}
 800773c:	4770      	bx	lr

0800773e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f004 fa36 	bl	800bbb8 <USBD_LL_Start>

  return USBD_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	bc80      	pop	{r7}
 8007768:	4770      	bx	lr

0800776a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	460b      	mov	r3, r1
 8007774:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007776:	2302      	movs	r3, #2
 8007778:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00c      	beq.n	800779e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	78fa      	ldrb	r2, [r7, #3]
 800778e:	4611      	mov	r1, r2
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	4798      	blx	r3
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800779e:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	460b      	mov	r3, r1
 80077b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	78fa      	ldrb	r2, [r7, #3]
 80077be:	4611      	mov	r1, r2
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	4798      	blx	r3

  return USBD_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 fed8 	bl	8008596 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80077f4:	461a      	mov	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007802:	f003 031f 	and.w	r3, r3, #31
 8007806:	2b02      	cmp	r3, #2
 8007808:	d016      	beq.n	8007838 <USBD_LL_SetupStage+0x6a>
 800780a:	2b02      	cmp	r3, #2
 800780c:	d81c      	bhi.n	8007848 <USBD_LL_SetupStage+0x7a>
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <USBD_LL_SetupStage+0x4a>
 8007812:	2b01      	cmp	r3, #1
 8007814:	d008      	beq.n	8007828 <USBD_LL_SetupStage+0x5a>
 8007816:	e017      	b.n	8007848 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f9cb 	bl	8007bbc <USBD_StdDevReq>
      break;
 8007826:	e01a      	b.n	800785e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fa2d 	bl	8007c90 <USBD_StdItfReq>
      break;
 8007836:	e012      	b.n	800785e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fa6d 	bl	8007d20 <USBD_StdEPReq>
      break;
 8007846:	e00a      	b.n	800785e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800784e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007852:	b2db      	uxtb	r3, r3
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f004 fa0e 	bl	800bc78 <USBD_LL_StallEP>
      break;
 800785c:	bf00      	nop
  }

  return USBD_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	460b      	mov	r3, r1
 8007872:	607a      	str	r2, [r7, #4]
 8007874:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007876:	7afb      	ldrb	r3, [r7, #11]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d14b      	bne.n	8007914 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007882:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800788a:	2b03      	cmp	r3, #3
 800788c:	d134      	bne.n	80078f8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	429a      	cmp	r2, r3
 8007898:	d919      	bls.n	80078ce <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	68da      	ldr	r2, [r3, #12]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	1ad2      	subs	r2, r2, r3
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	68da      	ldr	r2, [r3, #12]
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d203      	bcs.n	80078bc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	e002      	b.n	80078c2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	461a      	mov	r2, r3
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 ff57 	bl	800877a <USBD_CtlContinueRx>
 80078cc:	e038      	b.n	8007940 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d105      	bne.n	80078f0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 ff54 	bl	800879e <USBD_CtlSendStatus>
 80078f6:	e023      	b.n	8007940 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078fe:	2b05      	cmp	r3, #5
 8007900:	d11e      	bne.n	8007940 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800790a:	2100      	movs	r1, #0
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f004 f9b3 	bl	800bc78 <USBD_LL_StallEP>
 8007912:	e015      	b.n	8007940 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00d      	beq.n	800793c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007926:	2b03      	cmp	r3, #3
 8007928:	d108      	bne.n	800793c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	7afa      	ldrb	r2, [r7, #11]
 8007934:	4611      	mov	r1, r2
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	4798      	blx	r3
 800793a:	e001      	b.n	8007940 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800793c:	2302      	movs	r3, #2
 800793e:	e000      	b.n	8007942 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b086      	sub	sp, #24
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	460b      	mov	r3, r1
 8007954:	607a      	str	r2, [r7, #4]
 8007956:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007958:	7afb      	ldrb	r3, [r7, #11]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d17f      	bne.n	8007a5e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3314      	adds	r3, #20
 8007962:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800796a:	2b02      	cmp	r3, #2
 800796c:	d15c      	bne.n	8007a28 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	429a      	cmp	r2, r3
 8007978:	d915      	bls.n	80079a6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	1ad2      	subs	r2, r2, r3
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	b29b      	uxth	r3, r3
 800798e:	461a      	mov	r2, r3
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 fec1 	bl	800871a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007998:	2300      	movs	r3, #0
 800799a:	2200      	movs	r2, #0
 800799c:	2100      	movs	r1, #0
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f004 fa16 	bl	800bdd0 <USBD_LL_PrepareReceive>
 80079a4:	e04e      	b.n	8007a44 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	6912      	ldr	r2, [r2, #16]
 80079ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80079b2:	fb02 f201 	mul.w	r2, r2, r1
 80079b6:	1a9b      	subs	r3, r3, r2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d11c      	bne.n	80079f6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d316      	bcc.n	80079f6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d20f      	bcs.n	80079f6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80079d6:	2200      	movs	r2, #0
 80079d8:	2100      	movs	r1, #0
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f000 fe9d 	bl	800871a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079e8:	2300      	movs	r3, #0
 80079ea:	2200      	movs	r2, #0
 80079ec:	2100      	movs	r1, #0
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f004 f9ee 	bl	800bdd0 <USBD_LL_PrepareReceive>
 80079f4:	e026      	b.n	8007a44 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00a      	beq.n	8007a18 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d105      	bne.n	8007a18 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007a18:	2180      	movs	r1, #128	; 0x80
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f004 f92c 	bl	800bc78 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 fecf 	bl	80087c4 <USBD_CtlReceiveStatus>
 8007a26:	e00d      	b.n	8007a44 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a2e:	2b04      	cmp	r3, #4
 8007a30:	d004      	beq.n	8007a3c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d103      	bne.n	8007a44 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007a3c:	2180      	movs	r1, #128	; 0x80
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f004 f91a 	bl	800bc78 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d11d      	bne.n	8007a8a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f7ff fe81 	bl	8007756 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007a5c:	e015      	b.n	8007a8a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00d      	beq.n	8007a86 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d108      	bne.n	8007a86 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	7afa      	ldrb	r2, [r7, #11]
 8007a7e:	4611      	mov	r1, r2
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	4798      	blx	r3
 8007a84:	e001      	b.n	8007a8a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a86:	2302      	movs	r3, #2
 8007a88:	e000      	b.n	8007a8c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a9c:	2340      	movs	r3, #64	; 0x40
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f004 f8a3 	bl	800bbee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2240      	movs	r2, #64	; 0x40
 8007ab4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ab8:	2340      	movs	r3, #64	; 0x40
 8007aba:	2200      	movs	r2, #0
 8007abc:	2180      	movs	r1, #128	; 0x80
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f004 f895 	bl	800bbee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2240      	movs	r2, #64	; 0x40
 8007ace:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d009      	beq.n	8007b0c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6852      	ldr	r2, [r2, #4]
 8007b04:	b2d2      	uxtb	r2, r2
 8007b06:	4611      	mov	r1, r2
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	4798      	blx	r3
  }

  return USBD_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	78fa      	ldrb	r2, [r7, #3]
 8007b26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bc80      	pop	{r7}
 8007b32:	4770      	bx	lr

08007b34 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2204      	movs	r2, #4
 8007b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bc80      	pop	{r7}
 8007b5a:	4770      	bx	lr

08007b5c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d105      	bne.n	8007b7a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bc80      	pop	{r7}
 8007b84:	4770      	bx	lr

08007b86 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b082      	sub	sp, #8
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d10b      	bne.n	8007bb0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
	...

08007bbc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bd2:	2b40      	cmp	r3, #64	; 0x40
 8007bd4:	d005      	beq.n	8007be2 <USBD_StdDevReq+0x26>
 8007bd6:	2b40      	cmp	r3, #64	; 0x40
 8007bd8:	d84f      	bhi.n	8007c7a <USBD_StdDevReq+0xbe>
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d009      	beq.n	8007bf2 <USBD_StdDevReq+0x36>
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d14b      	bne.n	8007c7a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	4798      	blx	r3
      break;
 8007bf0:	e048      	b.n	8007c84 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	785b      	ldrb	r3, [r3, #1]
 8007bf6:	2b09      	cmp	r3, #9
 8007bf8:	d839      	bhi.n	8007c6e <USBD_StdDevReq+0xb2>
 8007bfa:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <USBD_StdDevReq+0x44>)
 8007bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c00:	08007c51 	.word	0x08007c51
 8007c04:	08007c65 	.word	0x08007c65
 8007c08:	08007c6f 	.word	0x08007c6f
 8007c0c:	08007c5b 	.word	0x08007c5b
 8007c10:	08007c6f 	.word	0x08007c6f
 8007c14:	08007c33 	.word	0x08007c33
 8007c18:	08007c29 	.word	0x08007c29
 8007c1c:	08007c6f 	.word	0x08007c6f
 8007c20:	08007c47 	.word	0x08007c47
 8007c24:	08007c3d 	.word	0x08007c3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f9dc 	bl	8007fe8 <USBD_GetDescriptor>
          break;
 8007c30:	e022      	b.n	8007c78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fb3f 	bl	80082b8 <USBD_SetAddress>
          break;
 8007c3a:	e01d      	b.n	8007c78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fb7e 	bl	8008340 <USBD_SetConfig>
          break;
 8007c44:	e018      	b.n	8007c78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fc07 	bl	800845c <USBD_GetConfig>
          break;
 8007c4e:	e013      	b.n	8007c78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fc37 	bl	80084c6 <USBD_GetStatus>
          break;
 8007c58:	e00e      	b.n	8007c78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fc65 	bl	800852c <USBD_SetFeature>
          break;
 8007c62:	e009      	b.n	8007c78 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fc74 	bl	8008554 <USBD_ClrFeature>
          break;
 8007c6c:	e004      	b.n	8007c78 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fccc 	bl	800860e <USBD_CtlError>
          break;
 8007c76:	bf00      	nop
      }
      break;
 8007c78:	e004      	b.n	8007c84 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fcc6 	bl	800860e <USBD_CtlError>
      break;
 8007c82:	bf00      	nop
  }

  return ret;
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop

08007c90 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ca6:	2b40      	cmp	r3, #64	; 0x40
 8007ca8:	d005      	beq.n	8007cb6 <USBD_StdItfReq+0x26>
 8007caa:	2b40      	cmp	r3, #64	; 0x40
 8007cac:	d82e      	bhi.n	8007d0c <USBD_StdItfReq+0x7c>
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <USBD_StdItfReq+0x26>
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	d12a      	bne.n	8007d0c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d81d      	bhi.n	8007cfe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	889b      	ldrh	r3, [r3, #4]
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d813      	bhi.n	8007cf4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	4798      	blx	r3
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	88db      	ldrh	r3, [r3, #6]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d110      	bne.n	8007d08 <USBD_StdItfReq+0x78>
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10d      	bne.n	8007d08 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fd56 	bl	800879e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007cf2:	e009      	b.n	8007d08 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fc89 	bl	800860e <USBD_CtlError>
          break;
 8007cfc:	e004      	b.n	8007d08 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fc84 	bl	800860e <USBD_CtlError>
          break;
 8007d06:	e000      	b.n	8007d0a <USBD_StdItfReq+0x7a>
          break;
 8007d08:	bf00      	nop
      }
      break;
 8007d0a:	e004      	b.n	8007d16 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fc7d 	bl	800860e <USBD_CtlError>
      break;
 8007d14:	bf00      	nop
  }

  return USBD_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	889b      	ldrh	r3, [r3, #4]
 8007d32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d3c:	2b40      	cmp	r3, #64	; 0x40
 8007d3e:	d007      	beq.n	8007d50 <USBD_StdEPReq+0x30>
 8007d40:	2b40      	cmp	r3, #64	; 0x40
 8007d42:	f200 8146 	bhi.w	8007fd2 <USBD_StdEPReq+0x2b2>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <USBD_StdEPReq+0x40>
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	f040 8141 	bne.w	8007fd2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	4798      	blx	r3
      break;
 8007d5e:	e13d      	b.n	8007fdc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d68:	2b20      	cmp	r3, #32
 8007d6a:	d10a      	bne.n	8007d82 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
 8007d80:	e12d      	b.n	8007fde <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	785b      	ldrb	r3, [r3, #1]
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d007      	beq.n	8007d9a <USBD_StdEPReq+0x7a>
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	f300 811b 	bgt.w	8007fc6 <USBD_StdEPReq+0x2a6>
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d072      	beq.n	8007e7a <USBD_StdEPReq+0x15a>
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d03a      	beq.n	8007e0e <USBD_StdEPReq+0xee>
 8007d98:	e115      	b.n	8007fc6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d002      	beq.n	8007daa <USBD_StdEPReq+0x8a>
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d015      	beq.n	8007dd4 <USBD_StdEPReq+0xb4>
 8007da8:	e02b      	b.n	8007e02 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007daa:	7bbb      	ldrb	r3, [r7, #14]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00c      	beq.n	8007dca <USBD_StdEPReq+0xaa>
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	2b80      	cmp	r3, #128	; 0x80
 8007db4:	d009      	beq.n	8007dca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f003 ff5c 	bl	800bc78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007dc0:	2180      	movs	r1, #128	; 0x80
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f003 ff58 	bl	800bc78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dc8:	e020      	b.n	8007e0c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fc1e 	bl	800860e <USBD_CtlError>
              break;
 8007dd2:	e01b      	b.n	8007e0c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	885b      	ldrh	r3, [r3, #2]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10e      	bne.n	8007dfa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007ddc:	7bbb      	ldrb	r3, [r7, #14]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00b      	beq.n	8007dfa <USBD_StdEPReq+0xda>
 8007de2:	7bbb      	ldrb	r3, [r7, #14]
 8007de4:	2b80      	cmp	r3, #128	; 0x80
 8007de6:	d008      	beq.n	8007dfa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	88db      	ldrh	r3, [r3, #6]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d104      	bne.n	8007dfa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f003 ff3f 	bl	800bc78 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fccf 	bl	800879e <USBD_CtlSendStatus>

              break;
 8007e00:	e004      	b.n	8007e0c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fc02 	bl	800860e <USBD_CtlError>
              break;
 8007e0a:	bf00      	nop
          }
          break;
 8007e0c:	e0e0      	b.n	8007fd0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d002      	beq.n	8007e1e <USBD_StdEPReq+0xfe>
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d015      	beq.n	8007e48 <USBD_StdEPReq+0x128>
 8007e1c:	e026      	b.n	8007e6c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00c      	beq.n	8007e3e <USBD_StdEPReq+0x11e>
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
 8007e26:	2b80      	cmp	r3, #128	; 0x80
 8007e28:	d009      	beq.n	8007e3e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f003 ff22 	bl	800bc78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e34:	2180      	movs	r1, #128	; 0x80
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f003 ff1e 	bl	800bc78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e3c:	e01c      	b.n	8007e78 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fbe4 	bl	800860e <USBD_CtlError>
              break;
 8007e46:	e017      	b.n	8007e78 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	885b      	ldrh	r3, [r3, #2]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d112      	bne.n	8007e76 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d004      	beq.n	8007e64 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f003 ff29 	bl	800bcb6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fc9a 	bl	800879e <USBD_CtlSendStatus>
              }
              break;
 8007e6a:	e004      	b.n	8007e76 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fbcd 	bl	800860e <USBD_CtlError>
              break;
 8007e74:	e000      	b.n	8007e78 <USBD_StdEPReq+0x158>
              break;
 8007e76:	bf00      	nop
          }
          break;
 8007e78:	e0aa      	b.n	8007fd0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d002      	beq.n	8007e8a <USBD_StdEPReq+0x16a>
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d032      	beq.n	8007eee <USBD_StdEPReq+0x1ce>
 8007e88:	e097      	b.n	8007fba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d007      	beq.n	8007ea0 <USBD_StdEPReq+0x180>
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	2b80      	cmp	r3, #128	; 0x80
 8007e94:	d004      	beq.n	8007ea0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fbb8 	bl	800860e <USBD_CtlError>
                break;
 8007e9e:	e091      	b.n	8007fc4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	da0b      	bge.n	8007ec0 <USBD_StdEPReq+0x1a0>
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	3310      	adds	r3, #16
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	4413      	add	r3, r2
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	e00b      	b.n	8007ed8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fbfb 	bl	80086e2 <USBD_CtlSendData>
              break;
 8007eec:	e06a      	b.n	8007fc4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007eee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	da11      	bge.n	8007f1a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ef6:	7bbb      	ldrb	r3, [r7, #14]
 8007ef8:	f003 020f 	and.w	r2, r3, #15
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	440b      	add	r3, r1
 8007f08:	3318      	adds	r3, #24
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d117      	bne.n	8007f40 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fb7b 	bl	800860e <USBD_CtlError>
                  break;
 8007f18:	e054      	b.n	8007fc4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	f003 020f 	and.w	r2, r3, #15
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d104      	bne.n	8007f40 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fb68 	bl	800860e <USBD_CtlError>
                  break;
 8007f3e:	e041      	b.n	8007fc4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	da0b      	bge.n	8007f60 <USBD_StdEPReq+0x240>
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f4e:	4613      	mov	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	3310      	adds	r3, #16
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	e00b      	b.n	8007f78 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	4413      	add	r3, r2
 8007f76:	3304      	adds	r3, #4
 8007f78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <USBD_StdEPReq+0x266>
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b80      	cmp	r3, #128	; 0x80
 8007f84:	d103      	bne.n	8007f8e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	e00e      	b.n	8007fac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f003 feae 	bl	800bcf4 <USBD_LL_IsStallEP>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	e002      	b.n	8007fac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fb95 	bl	80086e2 <USBD_CtlSendData>
              break;
 8007fb8:	e004      	b.n	8007fc4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fb26 	bl	800860e <USBD_CtlError>
              break;
 8007fc2:	bf00      	nop
          }
          break;
 8007fc4:	e004      	b.n	8007fd0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fb20 	bl	800860e <USBD_CtlError>
          break;
 8007fce:	bf00      	nop
      }
      break;
 8007fd0:	e004      	b.n	8007fdc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fb1a 	bl	800860e <USBD_CtlError>
      break;
 8007fda:	bf00      	nop
  }

  return ret;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	885b      	ldrh	r3, [r3, #2]
 8008002:	0a1b      	lsrs	r3, r3, #8
 8008004:	b29b      	uxth	r3, r3
 8008006:	3b01      	subs	r3, #1
 8008008:	2b06      	cmp	r3, #6
 800800a:	f200 8128 	bhi.w	800825e <USBD_GetDescriptor+0x276>
 800800e:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <USBD_GetDescriptor+0x2c>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	08008031 	.word	0x08008031
 8008018:	08008049 	.word	0x08008049
 800801c:	08008089 	.word	0x08008089
 8008020:	0800825f 	.word	0x0800825f
 8008024:	0800825f 	.word	0x0800825f
 8008028:	080081ff 	.word	0x080081ff
 800802c:	0800822b 	.word	0x0800822b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	7c12      	ldrb	r2, [r2, #16]
 800803c:	f107 0108 	add.w	r1, r7, #8
 8008040:	4610      	mov	r0, r2
 8008042:	4798      	blx	r3
 8008044:	60f8      	str	r0, [r7, #12]
      break;
 8008046:	e112      	b.n	800826e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	7c1b      	ldrb	r3, [r3, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10d      	bne.n	800806c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008058:	f107 0208 	add.w	r2, r7, #8
 800805c:	4610      	mov	r0, r2
 800805e:	4798      	blx	r3
 8008060:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3301      	adds	r3, #1
 8008066:	2202      	movs	r2, #2
 8008068:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800806a:	e100      	b.n	800826e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	f107 0208 	add.w	r2, r7, #8
 8008078:	4610      	mov	r0, r2
 800807a:	4798      	blx	r3
 800807c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3301      	adds	r3, #1
 8008082:	2202      	movs	r2, #2
 8008084:	701a      	strb	r2, [r3, #0]
      break;
 8008086:	e0f2      	b.n	800826e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	885b      	ldrh	r3, [r3, #2]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b05      	cmp	r3, #5
 8008090:	f200 80ac 	bhi.w	80081ec <USBD_GetDescriptor+0x204>
 8008094:	a201      	add	r2, pc, #4	; (adr r2, 800809c <USBD_GetDescriptor+0xb4>)
 8008096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809a:	bf00      	nop
 800809c:	080080b5 	.word	0x080080b5
 80080a0:	080080e9 	.word	0x080080e9
 80080a4:	0800811d 	.word	0x0800811d
 80080a8:	08008151 	.word	0x08008151
 80080ac:	08008185 	.word	0x08008185
 80080b0:	080081b9 	.word	0x080081b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00b      	beq.n	80080d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	7c12      	ldrb	r2, [r2, #16]
 80080cc:	f107 0108 	add.w	r1, r7, #8
 80080d0:	4610      	mov	r0, r2
 80080d2:	4798      	blx	r3
 80080d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080d6:	e091      	b.n	80081fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fa97 	bl	800860e <USBD_CtlError>
            err++;
 80080e0:	7afb      	ldrb	r3, [r7, #11]
 80080e2:	3301      	adds	r3, #1
 80080e4:	72fb      	strb	r3, [r7, #11]
          break;
 80080e6:	e089      	b.n	80081fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00b      	beq.n	800810c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	7c12      	ldrb	r2, [r2, #16]
 8008100:	f107 0108 	add.w	r1, r7, #8
 8008104:	4610      	mov	r0, r2
 8008106:	4798      	blx	r3
 8008108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800810a:	e077      	b.n	80081fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fa7d 	bl	800860e <USBD_CtlError>
            err++;
 8008114:	7afb      	ldrb	r3, [r7, #11]
 8008116:	3301      	adds	r3, #1
 8008118:	72fb      	strb	r3, [r7, #11]
          break;
 800811a:	e06f      	b.n	80081fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00b      	beq.n	8008140 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	7c12      	ldrb	r2, [r2, #16]
 8008134:	f107 0108 	add.w	r1, r7, #8
 8008138:	4610      	mov	r0, r2
 800813a:	4798      	blx	r3
 800813c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800813e:	e05d      	b.n	80081fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fa63 	bl	800860e <USBD_CtlError>
            err++;
 8008148:	7afb      	ldrb	r3, [r7, #11]
 800814a:	3301      	adds	r3, #1
 800814c:	72fb      	strb	r3, [r7, #11]
          break;
 800814e:	e055      	b.n	80081fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00b      	beq.n	8008174 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	7c12      	ldrb	r2, [r2, #16]
 8008168:	f107 0108 	add.w	r1, r7, #8
 800816c:	4610      	mov	r0, r2
 800816e:	4798      	blx	r3
 8008170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008172:	e043      	b.n	80081fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fa49 	bl	800860e <USBD_CtlError>
            err++;
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	3301      	adds	r3, #1
 8008180:	72fb      	strb	r3, [r7, #11]
          break;
 8008182:	e03b      	b.n	80081fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	7c12      	ldrb	r2, [r2, #16]
 800819c:	f107 0108 	add.w	r1, r7, #8
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
 80081a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081a6:	e029      	b.n	80081fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fa2f 	bl	800860e <USBD_CtlError>
            err++;
 80081b0:	7afb      	ldrb	r3, [r7, #11]
 80081b2:	3301      	adds	r3, #1
 80081b4:	72fb      	strb	r3, [r7, #11]
          break;
 80081b6:	e021      	b.n	80081fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	7c12      	ldrb	r2, [r2, #16]
 80081d0:	f107 0108 	add.w	r1, r7, #8
 80081d4:	4610      	mov	r0, r2
 80081d6:	4798      	blx	r3
 80081d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081da:	e00f      	b.n	80081fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fa15 	bl	800860e <USBD_CtlError>
            err++;
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	3301      	adds	r3, #1
 80081e8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ea:	e007      	b.n	80081fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fa0d 	bl	800860e <USBD_CtlError>
          err++;
 80081f4:	7afb      	ldrb	r3, [r7, #11]
 80081f6:	3301      	adds	r3, #1
 80081f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80081fa:	e038      	b.n	800826e <USBD_GetDescriptor+0x286>
 80081fc:	e037      	b.n	800826e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	7c1b      	ldrb	r3, [r3, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d109      	bne.n	800821a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800820c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800820e:	f107 0208 	add.w	r2, r7, #8
 8008212:	4610      	mov	r0, r2
 8008214:	4798      	blx	r3
 8008216:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008218:	e029      	b.n	800826e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f9f6 	bl	800860e <USBD_CtlError>
        err++;
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	3301      	adds	r3, #1
 8008226:	72fb      	strb	r3, [r7, #11]
      break;
 8008228:	e021      	b.n	800826e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	7c1b      	ldrb	r3, [r3, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10d      	bne.n	800824e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823a:	f107 0208 	add.w	r2, r7, #8
 800823e:	4610      	mov	r0, r2
 8008240:	4798      	blx	r3
 8008242:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	3301      	adds	r3, #1
 8008248:	2207      	movs	r2, #7
 800824a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800824c:	e00f      	b.n	800826e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f9dc 	bl	800860e <USBD_CtlError>
        err++;
 8008256:	7afb      	ldrb	r3, [r7, #11]
 8008258:	3301      	adds	r3, #1
 800825a:	72fb      	strb	r3, [r7, #11]
      break;
 800825c:	e007      	b.n	800826e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f9d4 	bl	800860e <USBD_CtlError>
      err++;
 8008266:	7afb      	ldrb	r3, [r7, #11]
 8008268:	3301      	adds	r3, #1
 800826a:	72fb      	strb	r3, [r7, #11]
      break;
 800826c:	bf00      	nop
  }

  if (err != 0U)
 800826e:	7afb      	ldrb	r3, [r7, #11]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d11c      	bne.n	80082ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008274:	893b      	ldrh	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d011      	beq.n	800829e <USBD_GetDescriptor+0x2b6>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	88db      	ldrh	r3, [r3, #6]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00d      	beq.n	800829e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	88da      	ldrh	r2, [r3, #6]
 8008286:	893b      	ldrh	r3, [r7, #8]
 8008288:	4293      	cmp	r3, r2
 800828a:	bf28      	it	cs
 800828c:	4613      	movcs	r3, r2
 800828e:	b29b      	uxth	r3, r3
 8008290:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008292:	893b      	ldrh	r3, [r7, #8]
 8008294:	461a      	mov	r2, r3
 8008296:	68f9      	ldr	r1, [r7, #12]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fa22 	bl	80086e2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	88db      	ldrh	r3, [r3, #6]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d104      	bne.n	80082b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fa79 	bl	800879e <USBD_CtlSendStatus>
 80082ac:	e000      	b.n	80082b0 <USBD_GetDescriptor+0x2c8>
    return;
 80082ae:	bf00      	nop
    }
  }
}
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop

080082b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	889b      	ldrh	r3, [r3, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d130      	bne.n	800832c <USBD_SetAddress+0x74>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	88db      	ldrh	r3, [r3, #6]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d12c      	bne.n	800832c <USBD_SetAddress+0x74>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	885b      	ldrh	r3, [r3, #2]
 80082d6:	2b7f      	cmp	r3, #127	; 0x7f
 80082d8:	d828      	bhi.n	800832c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	885b      	ldrh	r3, [r3, #2]
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d104      	bne.n	80082fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f98b 	bl	800860e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f8:	e01d      	b.n	8008336 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	7bfa      	ldrb	r2, [r7, #15]
 80082fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f003 fd20 	bl	800bd4c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fa46 	bl	800879e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d004      	beq.n	8008322 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2202      	movs	r2, #2
 800831c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008320:	e009      	b.n	8008336 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800832a:	e004      	b.n	8008336 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f96d 	bl	800860e <USBD_CtlError>
  }
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	885b      	ldrh	r3, [r3, #2]
 800834e:	b2da      	uxtb	r2, r3
 8008350:	4b41      	ldr	r3, [pc, #260]	; (8008458 <USBD_SetConfig+0x118>)
 8008352:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008354:	4b40      	ldr	r3, [pc, #256]	; (8008458 <USBD_SetConfig+0x118>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d904      	bls.n	8008366 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f955 	bl	800860e <USBD_CtlError>
 8008364:	e075      	b.n	8008452 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836c:	2b02      	cmp	r3, #2
 800836e:	d002      	beq.n	8008376 <USBD_SetConfig+0x36>
 8008370:	2b03      	cmp	r3, #3
 8008372:	d023      	beq.n	80083bc <USBD_SetConfig+0x7c>
 8008374:	e062      	b.n	800843c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008376:	4b38      	ldr	r3, [pc, #224]	; (8008458 <USBD_SetConfig+0x118>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d01a      	beq.n	80083b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800837e:	4b36      	ldr	r3, [pc, #216]	; (8008458 <USBD_SetConfig+0x118>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2203      	movs	r2, #3
 800838c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008390:	4b31      	ldr	r3, [pc, #196]	; (8008458 <USBD_SetConfig+0x118>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff f9e7 	bl	800776a <USBD_SetClassConfig>
 800839c:	4603      	mov	r3, r0
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d104      	bne.n	80083ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f932 	bl	800860e <USBD_CtlError>
            return;
 80083aa:	e052      	b.n	8008452 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f9f6 	bl	800879e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80083b2:	e04e      	b.n	8008452 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f9f2 	bl	800879e <USBD_CtlSendStatus>
        break;
 80083ba:	e04a      	b.n	8008452 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80083bc:	4b26      	ldr	r3, [pc, #152]	; (8008458 <USBD_SetConfig+0x118>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d112      	bne.n	80083ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80083cc:	4b22      	ldr	r3, [pc, #136]	; (8008458 <USBD_SetConfig+0x118>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	461a      	mov	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80083d6:	4b20      	ldr	r3, [pc, #128]	; (8008458 <USBD_SetConfig+0x118>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff f9e3 	bl	80077a8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f9db 	bl	800879e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80083e8:	e033      	b.n	8008452 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80083ea:	4b1b      	ldr	r3, [pc, #108]	; (8008458 <USBD_SetConfig+0x118>)
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d01d      	beq.n	8008434 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7ff f9d1 	bl	80077a8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008406:	4b14      	ldr	r3, [pc, #80]	; (8008458 <USBD_SetConfig+0x118>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008410:	4b11      	ldr	r3, [pc, #68]	; (8008458 <USBD_SetConfig+0x118>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7ff f9a7 	bl	800776a <USBD_SetClassConfig>
 800841c:	4603      	mov	r3, r0
 800841e:	2b02      	cmp	r3, #2
 8008420:	d104      	bne.n	800842c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f8f2 	bl	800860e <USBD_CtlError>
            return;
 800842a:	e012      	b.n	8008452 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f9b6 	bl	800879e <USBD_CtlSendStatus>
        break;
 8008432:	e00e      	b.n	8008452 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f9b2 	bl	800879e <USBD_CtlSendStatus>
        break;
 800843a:	e00a      	b.n	8008452 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f8e5 	bl	800860e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008444:	4b04      	ldr	r3, [pc, #16]	; (8008458 <USBD_SetConfig+0x118>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff f9ac 	bl	80077a8 <USBD_ClrClassConfig>
        break;
 8008450:	bf00      	nop
    }
  }
}
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	20000210 	.word	0x20000210

0800845c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	88db      	ldrh	r3, [r3, #6]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d004      	beq.n	8008478 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f8cc 	bl	800860e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008476:	e022      	b.n	80084be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800847e:	2b02      	cmp	r3, #2
 8008480:	dc02      	bgt.n	8008488 <USBD_GetConfig+0x2c>
 8008482:	2b00      	cmp	r3, #0
 8008484:	dc03      	bgt.n	800848e <USBD_GetConfig+0x32>
 8008486:	e015      	b.n	80084b4 <USBD_GetConfig+0x58>
 8008488:	2b03      	cmp	r3, #3
 800848a:	d00b      	beq.n	80084a4 <USBD_GetConfig+0x48>
 800848c:	e012      	b.n	80084b4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3308      	adds	r3, #8
 8008498:	2201      	movs	r2, #1
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f920 	bl	80086e2 <USBD_CtlSendData>
        break;
 80084a2:	e00c      	b.n	80084be <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	3304      	adds	r3, #4
 80084a8:	2201      	movs	r2, #1
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f918 	bl	80086e2 <USBD_CtlSendData>
        break;
 80084b2:	e004      	b.n	80084be <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f8a9 	bl	800860e <USBD_CtlError>
        break;
 80084bc:	bf00      	nop
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b082      	sub	sp, #8
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d81e      	bhi.n	800851a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	88db      	ldrh	r3, [r3, #6]
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d004      	beq.n	80084ee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f891 	bl	800860e <USBD_CtlError>
        break;
 80084ec:	e01a      	b.n	8008524 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f043 0202 	orr.w	r2, r3, #2
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	330c      	adds	r3, #12
 800850e:	2202      	movs	r2, #2
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f8e5 	bl	80086e2 <USBD_CtlSendData>
      break;
 8008518:	e004      	b.n	8008524 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f876 	bl	800860e <USBD_CtlError>
      break;
 8008522:	bf00      	nop
  }
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	885b      	ldrh	r3, [r3, #2]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d106      	bne.n	800854c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f929 	bl	800879e <USBD_CtlSendStatus>
  }
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008564:	3b01      	subs	r3, #1
 8008566:	2b02      	cmp	r3, #2
 8008568:	d80b      	bhi.n	8008582 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	885b      	ldrh	r3, [r3, #2]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d10c      	bne.n	800858c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f90f 	bl	800879e <USBD_CtlSendStatus>
      }
      break;
 8008580:	e004      	b.n	800858c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f842 	bl	800860e <USBD_CtlError>
      break;
 800858a:	e000      	b.n	800858e <USBD_ClrFeature+0x3a>
      break;
 800858c:	bf00      	nop
  }
}
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008596:	b480      	push	{r7}
 8008598:	b083      	sub	sp, #12
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	781a      	ldrb	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	785a      	ldrb	r2, [r3, #1]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	3302      	adds	r3, #2
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	3303      	adds	r3, #3
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	b29b      	uxth	r3, r3
 80085c0:	021b      	lsls	r3, r3, #8
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	4413      	add	r3, r2
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	3304      	adds	r3, #4
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	3305      	adds	r3, #5
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	b29b      	uxth	r3, r3
 80085dc:	021b      	lsls	r3, r3, #8
 80085de:	b29b      	uxth	r3, r3
 80085e0:	4413      	add	r3, r2
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	3306      	adds	r3, #6
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	3307      	adds	r3, #7
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	021b      	lsls	r3, r3, #8
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	4413      	add	r3, r2
 80085fe:	b29a      	uxth	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	80da      	strh	r2, [r3, #6]

}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	bc80      	pop	{r7}
 800860c:	4770      	bx	lr

0800860e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b082      	sub	sp, #8
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008618:	2180      	movs	r1, #128	; 0x80
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f003 fb2c 	bl	800bc78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008620:	2100      	movs	r1, #0
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f003 fb28 	bl	800bc78 <USBD_LL_StallEP>
}
 8008628:	bf00      	nop
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d032      	beq.n	80086ac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 f834 	bl	80086b4 <USBD_GetLen>
 800864c:	4603      	mov	r3, r0
 800864e:	3301      	adds	r3, #1
 8008650:	b29b      	uxth	r3, r3
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	b29a      	uxth	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	1c5a      	adds	r2, r3, #1
 800865e:	75fa      	strb	r2, [r7, #23]
 8008660:	461a      	mov	r2, r3
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	4413      	add	r3, r2
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	7812      	ldrb	r2, [r2, #0]
 800866a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	75fa      	strb	r2, [r7, #23]
 8008672:	461a      	mov	r2, r3
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4413      	add	r3, r2
 8008678:	2203      	movs	r2, #3
 800867a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800867c:	e012      	b.n	80086a4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	60fa      	str	r2, [r7, #12]
 8008684:	7dfa      	ldrb	r2, [r7, #23]
 8008686:	1c51      	adds	r1, r2, #1
 8008688:	75f9      	strb	r1, [r7, #23]
 800868a:	4611      	mov	r1, r2
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	440a      	add	r2, r1
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	75fa      	strb	r2, [r7, #23]
 800869a:	461a      	mov	r2, r3
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4413      	add	r3, r2
 80086a0:	2200      	movs	r2, #0
 80086a2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e8      	bne.n	800867e <USBD_GetString+0x4e>
    }
  }
}
 80086ac:	bf00      	nop
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80086c0:	e005      	b.n	80086ce <USBD_GetLen+0x1a>
  {
    len++;
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	3301      	adds	r3, #1
 80086c6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3301      	adds	r3, #1
 80086cc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1f5      	bne.n	80086c2 <USBD_GetLen+0xe>
  }

  return len;
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	bc80      	pop	{r7}
 80086e0:	4770      	bx	lr

080086e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	4613      	mov	r3, r2
 80086ee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80086f8:	88fa      	ldrh	r2, [r7, #6]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80086fe:	88fa      	ldrh	r2, [r7, #6]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008704:	88fb      	ldrh	r3, [r7, #6]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	2100      	movs	r1, #0
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f003 fb3d 	bl	800bd8a <USBD_LL_Transmit>

  return USBD_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	4613      	mov	r3, r2
 8008726:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008728:	88fb      	ldrh	r3, [r7, #6]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	2100      	movs	r1, #0
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f003 fb2b 	bl	800bd8a <USBD_LL_Transmit>

  return USBD_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	4613      	mov	r3, r2
 800874a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2203      	movs	r2, #3
 8008750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008754:	88fa      	ldrh	r2, [r7, #6]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800875c:	88fa      	ldrh	r2, [r7, #6]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008764:	88fb      	ldrh	r3, [r7, #6]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	2100      	movs	r1, #0
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f003 fb30 	bl	800bdd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	4613      	mov	r3, r2
 8008786:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008788:	88fb      	ldrh	r3, [r7, #6]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	2100      	movs	r1, #0
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f003 fb1e 	bl	800bdd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2204      	movs	r2, #4
 80087aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087ae:	2300      	movs	r3, #0
 80087b0:	2200      	movs	r2, #0
 80087b2:	2100      	movs	r1, #0
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f003 fae8 	bl	800bd8a <USBD_LL_Transmit>

  return USBD_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2205      	movs	r2, #5
 80087d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087d4:	2300      	movs	r3, #0
 80087d6:	2200      	movs	r2, #0
 80087d8:	2100      	movs	r1, #0
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f003 faf8 	bl	800bdd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087f2:	f3ef 8305 	mrs	r3, IPSR
 80087f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80087f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10f      	bne.n	800881e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008802:	607b      	str	r3, [r7, #4]
  return(result);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d109      	bne.n	800881e <osKernelInitialize+0x32>
 800880a:	4b10      	ldr	r3, [pc, #64]	; (800884c <osKernelInitialize+0x60>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b02      	cmp	r3, #2
 8008810:	d109      	bne.n	8008826 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008812:	f3ef 8311 	mrs	r3, BASEPRI
 8008816:	603b      	str	r3, [r7, #0]
  return(result);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d003      	beq.n	8008826 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800881e:	f06f 0305 	mvn.w	r3, #5
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	e00c      	b.n	8008840 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008826:	4b09      	ldr	r3, [pc, #36]	; (800884c <osKernelInitialize+0x60>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d105      	bne.n	800883a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800882e:	4b07      	ldr	r3, [pc, #28]	; (800884c <osKernelInitialize+0x60>)
 8008830:	2201      	movs	r2, #1
 8008832:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008834:	2300      	movs	r3, #0
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	e002      	b.n	8008840 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800883a:	f04f 33ff 	mov.w	r3, #4294967295
 800883e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008840:	68fb      	ldr	r3, [r7, #12]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	bc80      	pop	{r7}
 800884a:	4770      	bx	lr
 800884c:	20000214 	.word	0x20000214

08008850 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008856:	f3ef 8305 	mrs	r3, IPSR
 800885a:	60bb      	str	r3, [r7, #8]
  return(result);
 800885c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10f      	bne.n	8008882 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008862:	f3ef 8310 	mrs	r3, PRIMASK
 8008866:	607b      	str	r3, [r7, #4]
  return(result);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d109      	bne.n	8008882 <osKernelStart+0x32>
 800886e:	4b11      	ldr	r3, [pc, #68]	; (80088b4 <osKernelStart+0x64>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b02      	cmp	r3, #2
 8008874:	d109      	bne.n	800888a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008876:	f3ef 8311 	mrs	r3, BASEPRI
 800887a:	603b      	str	r3, [r7, #0]
  return(result);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <osKernelStart+0x3a>
    stat = osErrorISR;
 8008882:	f06f 0305 	mvn.w	r3, #5
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	e00e      	b.n	80088a8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800888a:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <osKernelStart+0x64>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d107      	bne.n	80088a2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008892:	4b08      	ldr	r3, [pc, #32]	; (80088b4 <osKernelStart+0x64>)
 8008894:	2202      	movs	r2, #2
 8008896:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008898:	f001 fa2c 	bl	8009cf4 <vTaskStartScheduler>
      stat = osOK;
 800889c:	2300      	movs	r3, #0
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e002      	b.n	80088a8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80088a2:	f04f 33ff 	mov.w	r3, #4294967295
 80088a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80088a8:	68fb      	ldr	r3, [r7, #12]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	20000214 	.word	0x20000214

080088b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b092      	sub	sp, #72	; 0x48
 80088bc:	af04      	add	r7, sp, #16
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80088c4:	2300      	movs	r3, #0
 80088c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088c8:	f3ef 8305 	mrs	r3, IPSR
 80088cc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f040 8094 	bne.w	80089fe <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088d6:	f3ef 8310 	mrs	r3, PRIMASK
 80088da:	623b      	str	r3, [r7, #32]
  return(result);
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f040 808d 	bne.w	80089fe <osThreadNew+0x146>
 80088e4:	4b48      	ldr	r3, [pc, #288]	; (8008a08 <osThreadNew+0x150>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d106      	bne.n	80088fa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088ec:	f3ef 8311 	mrs	r3, BASEPRI
 80088f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f040 8082 	bne.w	80089fe <osThreadNew+0x146>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d07e      	beq.n	80089fe <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008900:	2380      	movs	r3, #128	; 0x80
 8008902:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008904:	2318      	movs	r3, #24
 8008906:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008908:	2300      	movs	r3, #0
 800890a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800890c:	f107 031b 	add.w	r3, r7, #27
 8008910:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8008912:	f04f 33ff 	mov.w	r3, #4294967295
 8008916:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d045      	beq.n	80089aa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <osThreadNew+0x74>
        name = attr->name;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893c:	2b00      	cmp	r3, #0
 800893e:	d008      	beq.n	8008952 <osThreadNew+0x9a>
 8008940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008942:	2b38      	cmp	r3, #56	; 0x38
 8008944:	d805      	bhi.n	8008952 <osThreadNew+0x9a>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <osThreadNew+0x9e>
        return (NULL);
 8008952:	2300      	movs	r3, #0
 8008954:	e054      	b.n	8008a00 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	089b      	lsrs	r3, r3, #2
 8008964:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00e      	beq.n	800898c <osThreadNew+0xd4>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	2b5b      	cmp	r3, #91	; 0x5b
 8008974:	d90a      	bls.n	800898c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800897a:	2b00      	cmp	r3, #0
 800897c:	d006      	beq.n	800898c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <osThreadNew+0xd4>
        mem = 1;
 8008986:	2301      	movs	r3, #1
 8008988:	62bb      	str	r3, [r7, #40]	; 0x28
 800898a:	e010      	b.n	80089ae <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10c      	bne.n	80089ae <osThreadNew+0xf6>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d108      	bne.n	80089ae <osThreadNew+0xf6>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d104      	bne.n	80089ae <osThreadNew+0xf6>
          mem = 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80089a8:	e001      	b.n	80089ae <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80089ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d110      	bne.n	80089d6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089bc:	9202      	str	r2, [sp, #8]
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 fed6 	bl	800977c <xTaskCreateStatic>
 80089d0:	4603      	mov	r3, r0
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	e013      	b.n	80089fe <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d110      	bne.n	80089fe <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80089dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089de:	b29a      	uxth	r2, r3
 80089e0:	f107 0314 	add.w	r3, r7, #20
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 ff20 	bl	8009834 <xTaskCreate>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d001      	beq.n	80089fe <osThreadNew+0x146>
          hTask = NULL;
 80089fa:	2300      	movs	r3, #0
 80089fc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80089fe:	697b      	ldr	r3, [r7, #20]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3738      	adds	r7, #56	; 0x38
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	20000214 	.word	0x20000214

08008a0c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a14:	f3ef 8305 	mrs	r3, IPSR
 8008a18:	613b      	str	r3, [r7, #16]
  return(result);
 8008a1a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10f      	bne.n	8008a40 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a20:	f3ef 8310 	mrs	r3, PRIMASK
 8008a24:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d109      	bne.n	8008a40 <osDelay+0x34>
 8008a2c:	4b0d      	ldr	r3, [pc, #52]	; (8008a64 <osDelay+0x58>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d109      	bne.n	8008a48 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a34:	f3ef 8311 	mrs	r3, BASEPRI
 8008a38:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <osDelay+0x3c>
    stat = osErrorISR;
 8008a40:	f06f 0305 	mvn.w	r3, #5
 8008a44:	617b      	str	r3, [r7, #20]
 8008a46:	e007      	b.n	8008a58 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f001 f91a 	bl	8009c8c <vTaskDelay>
    }
  }

  return (stat);
 8008a58:	697b      	ldr	r3, [r7, #20]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000214 	.word	0x20000214

08008a68 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08c      	sub	sp, #48	; 0x30
 8008a6c:	af02      	add	r7, sp, #8
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008a74:	2300      	movs	r3, #0
 8008a76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a78:	f3ef 8305 	mrs	r3, IPSR
 8008a7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a7e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d16f      	bne.n	8008b64 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a84:	f3ef 8310 	mrs	r3, PRIMASK
 8008a88:	617b      	str	r3, [r7, #20]
  return(result);
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d169      	bne.n	8008b64 <osMessageQueueNew+0xfc>
 8008a90:	4b37      	ldr	r3, [pc, #220]	; (8008b70 <osMessageQueueNew+0x108>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d105      	bne.n	8008aa4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a98:	f3ef 8311 	mrs	r3, BASEPRI
 8008a9c:	613b      	str	r3, [r7, #16]
  return(result);
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d15f      	bne.n	8008b64 <osMessageQueueNew+0xfc>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d05c      	beq.n	8008b64 <osMessageQueueNew+0xfc>
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d059      	beq.n	8008b64 <osMessageQueueNew+0xfc>
    mem = -1;
 8008ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d029      	beq.n	8008b10 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d012      	beq.n	8008aea <osMessageQueueNew+0x82>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	2b4f      	cmp	r3, #79	; 0x4f
 8008aca:	d90e      	bls.n	8008aea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00a      	beq.n	8008aea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	695a      	ldr	r2, [r3, #20]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	68b9      	ldr	r1, [r7, #8]
 8008adc:	fb01 f303 	mul.w	r3, r1, r3
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d302      	bcc.n	8008aea <osMessageQueueNew+0x82>
        mem = 1;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	623b      	str	r3, [r7, #32]
 8008ae8:	e014      	b.n	8008b14 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d110      	bne.n	8008b14 <osMessageQueueNew+0xac>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10c      	bne.n	8008b14 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d108      	bne.n	8008b14 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d104      	bne.n	8008b14 <osMessageQueueNew+0xac>
          mem = 0;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	623b      	str	r3, [r7, #32]
 8008b0e:	e001      	b.n	8008b14 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008b10:	2300      	movs	r3, #0
 8008b12:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d10b      	bne.n	8008b32 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	691a      	ldr	r2, [r3, #16]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	2100      	movs	r1, #0
 8008b24:	9100      	str	r1, [sp, #0]
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 f96d 	bl	8008e08 <xQueueGenericCreateStatic>
 8008b2e:	6278      	str	r0, [r7, #36]	; 0x24
 8008b30:	e008      	b.n	8008b44 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d105      	bne.n	8008b44 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008b38:	2200      	movs	r2, #0
 8008b3a:	68b9      	ldr	r1, [r7, #8]
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 f9da 	bl	8008ef6 <xQueueGenericCreate>
 8008b42:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00c      	beq.n	8008b64 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <osMessageQueueNew+0xf0>
        name = attr->name;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	61fb      	str	r3, [r7, #28]
 8008b56:	e001      	b.n	8008b5c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008b5c:	69f9      	ldr	r1, [r7, #28]
 8008b5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b60:	f000 fdb0 	bl	80096c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3728      	adds	r7, #40	; 0x28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	20000214 	.word	0x20000214

08008b74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4a06      	ldr	r2, [pc, #24]	; (8008b9c <vApplicationGetIdleTaskMemory+0x28>)
 8008b84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	4a05      	ldr	r2, [pc, #20]	; (8008ba0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008b8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2280      	movs	r2, #128	; 0x80
 8008b90:	601a      	str	r2, [r3, #0]
}
 8008b92:	bf00      	nop
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bc80      	pop	{r7}
 8008b9a:	4770      	bx	lr
 8008b9c:	20000218 	.word	0x20000218
 8008ba0:	20000274 	.word	0x20000274

08008ba4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4a07      	ldr	r2, [pc, #28]	; (8008bd0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008bb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	4a06      	ldr	r2, [pc, #24]	; (8008bd4 <vApplicationGetTimerTaskMemory+0x30>)
 8008bba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bc2:	601a      	str	r2, [r3, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	3714      	adds	r7, #20
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bc80      	pop	{r7}
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	20000474 	.word	0x20000474
 8008bd4:	200004d0 	.word	0x200004d0

08008bd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f103 0208 	add.w	r2, r3, #8
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f103 0208 	add.w	r2, r3, #8
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f103 0208 	add.w	r2, r3, #8
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bc80      	pop	{r7}
 8008c14:	4770      	bx	lr

08008c16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c16:	b480      	push	{r7}
 8008c18:	b083      	sub	sp, #12
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bc80      	pop	{r7}
 8008c2c:	4770      	bx	lr

08008c2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b085      	sub	sp, #20
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	1c5a      	adds	r2, r3, #1
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	601a      	str	r2, [r3, #0]
}
 8008c6a:	bf00      	nop
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bc80      	pop	{r7}
 8008c72:	4770      	bx	lr

08008c74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8a:	d103      	bne.n	8008c94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	e00c      	b.n	8008cae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	3308      	adds	r3, #8
 8008c98:	60fb      	str	r3, [r7, #12]
 8008c9a:	e002      	b.n	8008ca2 <vListInsert+0x2e>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	60fb      	str	r3, [r7, #12]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d2f6      	bcs.n	8008c9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	1c5a      	adds	r2, r3, #1
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	601a      	str	r2, [r3, #0]
}
 8008cda:	bf00      	nop
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bc80      	pop	{r7}
 8008ce2:	4770      	bx	lr

08008ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	6892      	ldr	r2, [r2, #8]
 8008cfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	6852      	ldr	r2, [r2, #4]
 8008d04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d103      	bne.n	8008d18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689a      	ldr	r2, [r3, #8]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	1e5a      	subs	r2, r3, #1
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bc80      	pop	{r7}
 8008d34:	4770      	bx	lr
	...

08008d38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10a      	bne.n	8008d62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d50:	f383 8811 	msr	BASEPRI, r3
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d5e:	bf00      	nop
 8008d60:	e7fe      	b.n	8008d60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008d62:	f002 f92b 	bl	800afbc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d6e:	68f9      	ldr	r1, [r7, #12]
 8008d70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d72:	fb01 f303 	mul.w	r3, r1, r3
 8008d76:	441a      	add	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d92:	3b01      	subs	r3, #1
 8008d94:	68f9      	ldr	r1, [r7, #12]
 8008d96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d98:	fb01 f303 	mul.w	r3, r1, r3
 8008d9c:	441a      	add	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	22ff      	movs	r2, #255	; 0xff
 8008da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	22ff      	movs	r2, #255	; 0xff
 8008dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d114      	bne.n	8008de2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01a      	beq.n	8008df6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3310      	adds	r3, #16
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f001 fa1f 	bl	800a208 <xTaskRemoveFromEventList>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d012      	beq.n	8008df6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008dd0:	4b0c      	ldr	r3, [pc, #48]	; (8008e04 <xQueueGenericReset+0xcc>)
 8008dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	e009      	b.n	8008df6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3310      	adds	r3, #16
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7ff fef6 	bl	8008bd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	3324      	adds	r3, #36	; 0x24
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff fef1 	bl	8008bd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008df6:	f002 f911 	bl	800b01c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008dfa:	2301      	movs	r3, #1
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	e000ed04 	.word	0xe000ed04

08008e08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08e      	sub	sp, #56	; 0x38
 8008e0c:	af02      	add	r7, sp, #8
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10a      	bne.n	8008e32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e2e:	bf00      	nop
 8008e30:	e7fe      	b.n	8008e30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10a      	bne.n	8008e4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e4a:	bf00      	nop
 8008e4c:	e7fe      	b.n	8008e4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <xQueueGenericCreateStatic+0x52>
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <xQueueGenericCreateStatic+0x56>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e000      	b.n	8008e60 <xQueueGenericCreateStatic+0x58>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10a      	bne.n	8008e7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	623b      	str	r3, [r7, #32]
}
 8008e76:	bf00      	nop
 8008e78:	e7fe      	b.n	8008e78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d102      	bne.n	8008e86 <xQueueGenericCreateStatic+0x7e>
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <xQueueGenericCreateStatic+0x82>
 8008e86:	2301      	movs	r3, #1
 8008e88:	e000      	b.n	8008e8c <xQueueGenericCreateStatic+0x84>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10a      	bne.n	8008ea6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	61fb      	str	r3, [r7, #28]
}
 8008ea2:	bf00      	nop
 8008ea4:	e7fe      	b.n	8008ea4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ea6:	2350      	movs	r3, #80	; 0x50
 8008ea8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2b50      	cmp	r3, #80	; 0x50
 8008eae:	d00a      	beq.n	8008ec6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	61bb      	str	r3, [r7, #24]
}
 8008ec2:	bf00      	nop
 8008ec4:	e7fe      	b.n	8008ec4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00d      	beq.n	8008eec <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ed8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 f843 	bl	8008f72 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3730      	adds	r7, #48	; 0x30
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b08a      	sub	sp, #40	; 0x28
 8008efa:	af02      	add	r7, sp, #8
 8008efc:	60f8      	str	r0, [r7, #12]
 8008efe:	60b9      	str	r1, [r7, #8]
 8008f00:	4613      	mov	r3, r2
 8008f02:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10a      	bne.n	8008f20 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	613b      	str	r3, [r7, #16]
}
 8008f1c:	bf00      	nop
 8008f1e:	e7fe      	b.n	8008f1e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	61fb      	str	r3, [r7, #28]
 8008f2a:	e004      	b.n	8008f36 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	fb02 f303 	mul.w	r3, r2, r3
 8008f34:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	3350      	adds	r3, #80	; 0x50
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f002 f93e 	bl	800b1bc <pvPortMalloc>
 8008f40:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00f      	beq.n	8008f68 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	3350      	adds	r3, #80	; 0x50
 8008f4c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f56:	79fa      	ldrb	r2, [r7, #7]
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	68b9      	ldr	r1, [r7, #8]
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 f805 	bl	8008f72 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008f68:	69bb      	ldr	r3, [r7, #24]
	}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3720      	adds	r7, #32
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b084      	sub	sp, #16
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	60f8      	str	r0, [r7, #12]
 8008f7a:	60b9      	str	r1, [r7, #8]
 8008f7c:	607a      	str	r2, [r7, #4]
 8008f7e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d103      	bne.n	8008f8e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	69ba      	ldr	r2, [r7, #24]
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	e002      	b.n	8008f94 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	69b8      	ldr	r0, [r7, #24]
 8008fa4:	f7ff fec8 	bl	8008d38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	78fa      	ldrb	r2, [r7, #3]
 8008fac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fb0:	bf00      	nop
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08e      	sub	sp, #56	; 0x38
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
 8008fc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10a      	bne.n	8008fea <xQueueGenericSend+0x32>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fe6:	bf00      	nop
 8008fe8:	e7fe      	b.n	8008fe8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d103      	bne.n	8008ff8 <xQueueGenericSend+0x40>
 8008ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d101      	bne.n	8008ffc <xQueueGenericSend+0x44>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e000      	b.n	8008ffe <xQueueGenericSend+0x46>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10a      	bne.n	8009018 <xQueueGenericSend+0x60>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009014:	bf00      	nop
 8009016:	e7fe      	b.n	8009016 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b02      	cmp	r3, #2
 800901c:	d103      	bne.n	8009026 <xQueueGenericSend+0x6e>
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009022:	2b01      	cmp	r3, #1
 8009024:	d101      	bne.n	800902a <xQueueGenericSend+0x72>
 8009026:	2301      	movs	r3, #1
 8009028:	e000      	b.n	800902c <xQueueGenericSend+0x74>
 800902a:	2300      	movs	r3, #0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10a      	bne.n	8009046 <xQueueGenericSend+0x8e>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	623b      	str	r3, [r7, #32]
}
 8009042:	bf00      	nop
 8009044:	e7fe      	b.n	8009044 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009046:	f001 fad9 	bl	800a5fc <xTaskGetSchedulerState>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d102      	bne.n	8009056 <xQueueGenericSend+0x9e>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <xQueueGenericSend+0xa2>
 8009056:	2301      	movs	r3, #1
 8009058:	e000      	b.n	800905c <xQueueGenericSend+0xa4>
 800905a:	2300      	movs	r3, #0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10a      	bne.n	8009076 <xQueueGenericSend+0xbe>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	61fb      	str	r3, [r7, #28]
}
 8009072:	bf00      	nop
 8009074:	e7fe      	b.n	8009074 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009076:	f001 ffa1 	bl	800afbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009082:	429a      	cmp	r2, r3
 8009084:	d302      	bcc.n	800908c <xQueueGenericSend+0xd4>
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b02      	cmp	r3, #2
 800908a:	d129      	bne.n	80090e0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800908c:	683a      	ldr	r2, [r7, #0]
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009092:	f000 fa07 	bl	80094a4 <prvCopyDataToQueue>
 8009096:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909c:	2b00      	cmp	r3, #0
 800909e:	d010      	beq.n	80090c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a2:	3324      	adds	r3, #36	; 0x24
 80090a4:	4618      	mov	r0, r3
 80090a6:	f001 f8af 	bl	800a208 <xTaskRemoveFromEventList>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d013      	beq.n	80090d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090b0:	4b3f      	ldr	r3, [pc, #252]	; (80091b0 <xQueueGenericSend+0x1f8>)
 80090b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b6:	601a      	str	r2, [r3, #0]
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	e00a      	b.n	80090d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d007      	beq.n	80090d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090c8:	4b39      	ldr	r3, [pc, #228]	; (80091b0 <xQueueGenericSend+0x1f8>)
 80090ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090d8:	f001 ffa0 	bl	800b01c <vPortExitCritical>
				return pdPASS;
 80090dc:	2301      	movs	r3, #1
 80090de:	e063      	b.n	80091a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d103      	bne.n	80090ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090e6:	f001 ff99 	bl	800b01c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80090ea:	2300      	movs	r3, #0
 80090ec:	e05c      	b.n	80091a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d106      	bne.n	8009102 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090f4:	f107 0314 	add.w	r3, r7, #20
 80090f8:	4618      	mov	r0, r3
 80090fa:	f001 f8e9 	bl	800a2d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090fe:	2301      	movs	r3, #1
 8009100:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009102:	f001 ff8b 	bl	800b01c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009106:	f000 fe5b 	bl	8009dc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800910a:	f001 ff57 	bl	800afbc <vPortEnterCritical>
 800910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009114:	b25b      	sxtb	r3, r3
 8009116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911a:	d103      	bne.n	8009124 <xQueueGenericSend+0x16c>
 800911c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911e:	2200      	movs	r2, #0
 8009120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800912a:	b25b      	sxtb	r3, r3
 800912c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009130:	d103      	bne.n	800913a <xQueueGenericSend+0x182>
 8009132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009134:	2200      	movs	r2, #0
 8009136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800913a:	f001 ff6f 	bl	800b01c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800913e:	1d3a      	adds	r2, r7, #4
 8009140:	f107 0314 	add.w	r3, r7, #20
 8009144:	4611      	mov	r1, r2
 8009146:	4618      	mov	r0, r3
 8009148:	f001 f8d8 	bl	800a2fc <xTaskCheckForTimeOut>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d124      	bne.n	800919c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009154:	f000 fa9e 	bl	8009694 <prvIsQueueFull>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d018      	beq.n	8009190 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	3310      	adds	r3, #16
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	4611      	mov	r1, r2
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fffe 	bl	800a168 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800916c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800916e:	f000 fa29 	bl	80095c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009172:	f000 fe33 	bl	8009ddc <xTaskResumeAll>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	f47f af7c 	bne.w	8009076 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800917e:	4b0c      	ldr	r3, [pc, #48]	; (80091b0 <xQueueGenericSend+0x1f8>)
 8009180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	e772      	b.n	8009076 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009192:	f000 fa17 	bl	80095c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009196:	f000 fe21 	bl	8009ddc <xTaskResumeAll>
 800919a:	e76c      	b.n	8009076 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800919c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800919e:	f000 fa11 	bl	80095c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091a2:	f000 fe1b 	bl	8009ddc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091a6:	2300      	movs	r3, #0
		}
	}
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3738      	adds	r7, #56	; 0x38
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	e000ed04 	.word	0xe000ed04

080091b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08e      	sub	sp, #56	; 0x38
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
 80091c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10a      	bne.n	80091e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091de:	bf00      	nop
 80091e0:	e7fe      	b.n	80091e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d103      	bne.n	80091f0 <xQueueGenericSendFromISR+0x3c>
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d101      	bne.n	80091f4 <xQueueGenericSendFromISR+0x40>
 80091f0:	2301      	movs	r3, #1
 80091f2:	e000      	b.n	80091f6 <xQueueGenericSendFromISR+0x42>
 80091f4:	2300      	movs	r3, #0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10a      	bne.n	8009210 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80091fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	623b      	str	r3, [r7, #32]
}
 800920c:	bf00      	nop
 800920e:	e7fe      	b.n	800920e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	2b02      	cmp	r3, #2
 8009214:	d103      	bne.n	800921e <xQueueGenericSendFromISR+0x6a>
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921a:	2b01      	cmp	r3, #1
 800921c:	d101      	bne.n	8009222 <xQueueGenericSendFromISR+0x6e>
 800921e:	2301      	movs	r3, #1
 8009220:	e000      	b.n	8009224 <xQueueGenericSendFromISR+0x70>
 8009222:	2300      	movs	r3, #0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10a      	bne.n	800923e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	61fb      	str	r3, [r7, #28]
}
 800923a:	bf00      	nop
 800923c:	e7fe      	b.n	800923c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800923e:	f001 ff7f 	bl	800b140 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009242:	f3ef 8211 	mrs	r2, BASEPRI
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	61ba      	str	r2, [r7, #24]
 8009258:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800925a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800925c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800925e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009266:	429a      	cmp	r2, r3
 8009268:	d302      	bcc.n	8009270 <xQueueGenericSendFromISR+0xbc>
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b02      	cmp	r3, #2
 800926e:	d12c      	bne.n	80092ca <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	68b9      	ldr	r1, [r7, #8]
 800927e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009280:	f000 f910 	bl	80094a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009284:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928c:	d112      	bne.n	80092b4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009292:	2b00      	cmp	r3, #0
 8009294:	d016      	beq.n	80092c4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009298:	3324      	adds	r3, #36	; 0x24
 800929a:	4618      	mov	r0, r3
 800929c:	f000 ffb4 	bl	800a208 <xTaskRemoveFromEventList>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00e      	beq.n	80092c4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00b      	beq.n	80092c4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	601a      	str	r2, [r3, #0]
 80092b2:	e007      	b.n	80092c4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092b8:	3301      	adds	r3, #1
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	b25a      	sxtb	r2, r3
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092c4:	2301      	movs	r3, #1
 80092c6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80092c8:	e001      	b.n	80092ce <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092ca:	2300      	movs	r3, #0
 80092cc:	637b      	str	r3, [r7, #52]	; 0x34
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80092d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3738      	adds	r7, #56	; 0x38
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b08c      	sub	sp, #48	; 0x30
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80092f0:	2300      	movs	r3, #0
 80092f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10a      	bne.n	8009314 <xQueueReceive+0x30>
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	623b      	str	r3, [r7, #32]
}
 8009310:	bf00      	nop
 8009312:	e7fe      	b.n	8009312 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d103      	bne.n	8009322 <xQueueReceive+0x3e>
 800931a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931e:	2b00      	cmp	r3, #0
 8009320:	d101      	bne.n	8009326 <xQueueReceive+0x42>
 8009322:	2301      	movs	r3, #1
 8009324:	e000      	b.n	8009328 <xQueueReceive+0x44>
 8009326:	2300      	movs	r3, #0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <xQueueReceive+0x5e>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	61fb      	str	r3, [r7, #28]
}
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009342:	f001 f95b 	bl	800a5fc <xTaskGetSchedulerState>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d102      	bne.n	8009352 <xQueueReceive+0x6e>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <xQueueReceive+0x72>
 8009352:	2301      	movs	r3, #1
 8009354:	e000      	b.n	8009358 <xQueueReceive+0x74>
 8009356:	2300      	movs	r3, #0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10a      	bne.n	8009372 <xQueueReceive+0x8e>
	__asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	61bb      	str	r3, [r7, #24]
}
 800936e:	bf00      	nop
 8009370:	e7fe      	b.n	8009370 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009372:	f001 fe23 	bl	800afbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800937c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937e:	2b00      	cmp	r3, #0
 8009380:	d01f      	beq.n	80093c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009382:	68b9      	ldr	r1, [r7, #8]
 8009384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009386:	f000 f8f7 	bl	8009578 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	1e5a      	subs	r2, r3, #1
 800938e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009390:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00f      	beq.n	80093ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	3310      	adds	r3, #16
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 ff32 	bl	800a208 <xTaskRemoveFromEventList>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d007      	beq.n	80093ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093aa:	4b3d      	ldr	r3, [pc, #244]	; (80094a0 <xQueueReceive+0x1bc>)
 80093ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093b0:	601a      	str	r2, [r3, #0]
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093ba:	f001 fe2f 	bl	800b01c <vPortExitCritical>
				return pdPASS;
 80093be:	2301      	movs	r3, #1
 80093c0:	e069      	b.n	8009496 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d103      	bne.n	80093d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093c8:	f001 fe28 	bl	800b01c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093cc:	2300      	movs	r3, #0
 80093ce:	e062      	b.n	8009496 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d106      	bne.n	80093e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093d6:	f107 0310 	add.w	r3, r7, #16
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 ff78 	bl	800a2d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093e0:	2301      	movs	r3, #1
 80093e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093e4:	f001 fe1a 	bl	800b01c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093e8:	f000 fcea 	bl	8009dc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093ec:	f001 fde6 	bl	800afbc <vPortEnterCritical>
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093f6:	b25b      	sxtb	r3, r3
 80093f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fc:	d103      	bne.n	8009406 <xQueueReceive+0x122>
 80093fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800940c:	b25b      	sxtb	r3, r3
 800940e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009412:	d103      	bne.n	800941c <xQueueReceive+0x138>
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	2200      	movs	r2, #0
 8009418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800941c:	f001 fdfe 	bl	800b01c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009420:	1d3a      	adds	r2, r7, #4
 8009422:	f107 0310 	add.w	r3, r7, #16
 8009426:	4611      	mov	r1, r2
 8009428:	4618      	mov	r0, r3
 800942a:	f000 ff67 	bl	800a2fc <xTaskCheckForTimeOut>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d123      	bne.n	800947c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009436:	f000 f917 	bl	8009668 <prvIsQueueEmpty>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d017      	beq.n	8009470 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	3324      	adds	r3, #36	; 0x24
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	4611      	mov	r1, r2
 8009448:	4618      	mov	r0, r3
 800944a:	f000 fe8d 	bl	800a168 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800944e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009450:	f000 f8b8 	bl	80095c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009454:	f000 fcc2 	bl	8009ddc <xTaskResumeAll>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d189      	bne.n	8009372 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800945e:	4b10      	ldr	r3, [pc, #64]	; (80094a0 <xQueueReceive+0x1bc>)
 8009460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	e780      	b.n	8009372 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009472:	f000 f8a7 	bl	80095c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009476:	f000 fcb1 	bl	8009ddc <xTaskResumeAll>
 800947a:	e77a      	b.n	8009372 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800947c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800947e:	f000 f8a1 	bl	80095c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009482:	f000 fcab 	bl	8009ddc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009488:	f000 f8ee 	bl	8009668 <prvIsQueueEmpty>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	f43f af6f 	beq.w	8009372 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009494:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009496:	4618      	mov	r0, r3
 8009498:	3730      	adds	r7, #48	; 0x30
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	e000ed04 	.word	0xe000ed04

080094a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b086      	sub	sp, #24
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094b0:	2300      	movs	r3, #0
 80094b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10d      	bne.n	80094de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d14d      	bne.n	8009566 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f001 f8b2 	bl	800a638 <xTaskPriorityDisinherit>
 80094d4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	605a      	str	r2, [r3, #4]
 80094dc:	e043      	b.n	8009566 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d119      	bne.n	8009518 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6898      	ldr	r0, [r3, #8]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ec:	461a      	mov	r2, r3
 80094ee:	68b9      	ldr	r1, [r7, #8]
 80094f0:	f002 fd1a 	bl	800bf28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	689a      	ldr	r2, [r3, #8]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fc:	441a      	add	r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	689a      	ldr	r2, [r3, #8]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	429a      	cmp	r2, r3
 800950c:	d32b      	bcc.n	8009566 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	609a      	str	r2, [r3, #8]
 8009516:	e026      	b.n	8009566 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	68d8      	ldr	r0, [r3, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009520:	461a      	mov	r2, r3
 8009522:	68b9      	ldr	r1, [r7, #8]
 8009524:	f002 fd00 	bl	800bf28 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	68da      	ldr	r2, [r3, #12]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009530:	425b      	negs	r3, r3
 8009532:	441a      	add	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	429a      	cmp	r2, r3
 8009542:	d207      	bcs.n	8009554 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954c:	425b      	negs	r3, r3
 800954e:	441a      	add	r2, r3
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b02      	cmp	r3, #2
 8009558:	d105      	bne.n	8009566 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	3b01      	subs	r3, #1
 8009564:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	1c5a      	adds	r2, r3, #1
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800956e:	697b      	ldr	r3, [r7, #20]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3718      	adds	r7, #24
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009586:	2b00      	cmp	r3, #0
 8009588:	d018      	beq.n	80095bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009592:	441a      	add	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d303      	bcc.n	80095ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	68d9      	ldr	r1, [r3, #12]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b4:	461a      	mov	r2, r3
 80095b6:	6838      	ldr	r0, [r7, #0]
 80095b8:	f002 fcb6 	bl	800bf28 <memcpy>
	}
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095cc:	f001 fcf6 	bl	800afbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095d8:	e011      	b.n	80095fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d012      	beq.n	8009608 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	3324      	adds	r3, #36	; 0x24
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 fe0e 	bl	800a208 <xTaskRemoveFromEventList>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80095f2:	f000 fee5 	bl	800a3c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009602:	2b00      	cmp	r3, #0
 8009604:	dce9      	bgt.n	80095da <prvUnlockQueue+0x16>
 8009606:	e000      	b.n	800960a <prvUnlockQueue+0x46>
					break;
 8009608:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	22ff      	movs	r2, #255	; 0xff
 800960e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009612:	f001 fd03 	bl	800b01c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009616:	f001 fcd1 	bl	800afbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009620:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009622:	e011      	b.n	8009648 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d012      	beq.n	8009652 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3310      	adds	r3, #16
 8009630:	4618      	mov	r0, r3
 8009632:	f000 fde9 	bl	800a208 <xTaskRemoveFromEventList>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800963c:	f000 fec0 	bl	800a3c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009640:	7bbb      	ldrb	r3, [r7, #14]
 8009642:	3b01      	subs	r3, #1
 8009644:	b2db      	uxtb	r3, r3
 8009646:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800964c:	2b00      	cmp	r3, #0
 800964e:	dce9      	bgt.n	8009624 <prvUnlockQueue+0x60>
 8009650:	e000      	b.n	8009654 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009652:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	22ff      	movs	r2, #255	; 0xff
 8009658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800965c:	f001 fcde 	bl	800b01c <vPortExitCritical>
}
 8009660:	bf00      	nop
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009670:	f001 fca4 	bl	800afbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009678:	2b00      	cmp	r3, #0
 800967a:	d102      	bne.n	8009682 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800967c:	2301      	movs	r3, #1
 800967e:	60fb      	str	r3, [r7, #12]
 8009680:	e001      	b.n	8009686 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009682:	2300      	movs	r3, #0
 8009684:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009686:	f001 fcc9 	bl	800b01c <vPortExitCritical>

	return xReturn;
 800968a:	68fb      	ldr	r3, [r7, #12]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800969c:	f001 fc8e 	bl	800afbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d102      	bne.n	80096b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096ac:	2301      	movs	r3, #1
 80096ae:	60fb      	str	r3, [r7, #12]
 80096b0:	e001      	b.n	80096b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096b6:	f001 fcb1 	bl	800b01c <vPortExitCritical>

	return xReturn;
 80096ba:	68fb      	ldr	r3, [r7, #12]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096ce:	2300      	movs	r3, #0
 80096d0:	60fb      	str	r3, [r7, #12]
 80096d2:	e014      	b.n	80096fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096d4:	4a0e      	ldr	r2, [pc, #56]	; (8009710 <vQueueAddToRegistry+0x4c>)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10b      	bne.n	80096f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096e0:	490b      	ldr	r1, [pc, #44]	; (8009710 <vQueueAddToRegistry+0x4c>)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	683a      	ldr	r2, [r7, #0]
 80096e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096ea:	4a09      	ldr	r2, [pc, #36]	; (8009710 <vQueueAddToRegistry+0x4c>)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	4413      	add	r3, r2
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80096f6:	e006      	b.n	8009706 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3301      	adds	r3, #1
 80096fc:	60fb      	str	r3, [r7, #12]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2b07      	cmp	r3, #7
 8009702:	d9e7      	bls.n	80096d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009704:	bf00      	nop
 8009706:	bf00      	nop
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	bc80      	pop	{r7}
 800970e:	4770      	bx	lr
 8009710:	20001ea4 	.word	0x20001ea4

08009714 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009724:	f001 fc4a 	bl	800afbc <vPortEnterCritical>
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800972e:	b25b      	sxtb	r3, r3
 8009730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009734:	d103      	bne.n	800973e <vQueueWaitForMessageRestricted+0x2a>
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009744:	b25b      	sxtb	r3, r3
 8009746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974a:	d103      	bne.n	8009754 <vQueueWaitForMessageRestricted+0x40>
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009754:	f001 fc62 	bl	800b01c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975c:	2b00      	cmp	r3, #0
 800975e:	d106      	bne.n	800976e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	3324      	adds	r3, #36	; 0x24
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	68b9      	ldr	r1, [r7, #8]
 8009768:	4618      	mov	r0, r3
 800976a:	f000 fd21 	bl	800a1b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800976e:	6978      	ldr	r0, [r7, #20]
 8009770:	f7ff ff28 	bl	80095c4 <prvUnlockQueue>
	}
 8009774:	bf00      	nop
 8009776:	3718      	adds	r7, #24
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800977c:	b580      	push	{r7, lr}
 800977e:	b08e      	sub	sp, #56	; 0x38
 8009780:	af04      	add	r7, sp, #16
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800978a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10a      	bne.n	80097a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	623b      	str	r3, [r7, #32]
}
 80097a2:	bf00      	nop
 80097a4:	e7fe      	b.n	80097a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10a      	bne.n	80097c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	61fb      	str	r3, [r7, #28]
}
 80097be:	bf00      	nop
 80097c0:	e7fe      	b.n	80097c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097c2:	235c      	movs	r3, #92	; 0x5c
 80097c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	2b5c      	cmp	r3, #92	; 0x5c
 80097ca:	d00a      	beq.n	80097e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	61bb      	str	r3, [r7, #24]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80097e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d01e      	beq.n	8009826 <xTaskCreateStatic+0xaa>
 80097e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d01b      	beq.n	8009826 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80097f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	2202      	movs	r2, #2
 80097fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009800:	2300      	movs	r3, #0
 8009802:	9303      	str	r3, [sp, #12]
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009806:	9302      	str	r3, [sp, #8]
 8009808:	f107 0314 	add.w	r3, r7, #20
 800980c:	9301      	str	r3, [sp, #4]
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	68b9      	ldr	r1, [r7, #8]
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f000 f850 	bl	80098be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800981e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009820:	f000 f8d4 	bl	80099cc <prvAddNewTaskToReadyList>
 8009824:	e001      	b.n	800982a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8009826:	2300      	movs	r3, #0
 8009828:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800982a:	697b      	ldr	r3, [r7, #20]
	}
 800982c:	4618      	mov	r0, r3
 800982e:	3728      	adds	r7, #40	; 0x28
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009834:	b580      	push	{r7, lr}
 8009836:	b08c      	sub	sp, #48	; 0x30
 8009838:	af04      	add	r7, sp, #16
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	603b      	str	r3, [r7, #0]
 8009840:	4613      	mov	r3, r2
 8009842:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009844:	88fb      	ldrh	r3, [r7, #6]
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4618      	mov	r0, r3
 800984a:	f001 fcb7 	bl	800b1bc <pvPortMalloc>
 800984e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00e      	beq.n	8009874 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009856:	205c      	movs	r0, #92	; 0x5c
 8009858:	f001 fcb0 	bl	800b1bc <pvPortMalloc>
 800985c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d003      	beq.n	800986c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	631a      	str	r2, [r3, #48]	; 0x30
 800986a:	e005      	b.n	8009878 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800986c:	6978      	ldr	r0, [r7, #20]
 800986e:	f001 fd69 	bl	800b344 <vPortFree>
 8009872:	e001      	b.n	8009878 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009874:	2300      	movs	r3, #0
 8009876:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d017      	beq.n	80098ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009886:	88fa      	ldrh	r2, [r7, #6]
 8009888:	2300      	movs	r3, #0
 800988a:	9303      	str	r3, [sp, #12]
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	9302      	str	r3, [sp, #8]
 8009890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009892:	9301      	str	r3, [sp, #4]
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	68b9      	ldr	r1, [r7, #8]
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 f80e 	bl	80098be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098a2:	69f8      	ldr	r0, [r7, #28]
 80098a4:	f000 f892 	bl	80099cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098a8:	2301      	movs	r3, #1
 80098aa:	61bb      	str	r3, [r7, #24]
 80098ac:	e002      	b.n	80098b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098ae:	f04f 33ff 	mov.w	r3, #4294967295
 80098b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098b4:	69bb      	ldr	r3, [r7, #24]
	}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3720      	adds	r7, #32
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b088      	sub	sp, #32
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	60f8      	str	r0, [r7, #12]
 80098c6:	60b9      	str	r1, [r7, #8]
 80098c8:	607a      	str	r2, [r7, #4]
 80098ca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	461a      	mov	r2, r3
 80098d6:	21a5      	movs	r1, #165	; 0xa5
 80098d8:	f002 fb4e 	bl	800bf78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80098dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80098e6:	3b01      	subs	r3, #1
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	f023 0307 	bic.w	r3, r3, #7
 80098f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	f003 0307 	and.w	r3, r3, #7
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00a      	beq.n	8009916 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	617b      	str	r3, [r7, #20]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009916:	2300      	movs	r3, #0
 8009918:	61fb      	str	r3, [r7, #28]
 800991a:	e012      	b.n	8009942 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	4413      	add	r3, r2
 8009922:	7819      	ldrb	r1, [r3, #0]
 8009924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	4413      	add	r3, r2
 800992a:	3334      	adds	r3, #52	; 0x34
 800992c:	460a      	mov	r2, r1
 800992e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	4413      	add	r3, r2
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d006      	beq.n	800994a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	3301      	adds	r3, #1
 8009940:	61fb      	str	r3, [r7, #28]
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	2b0f      	cmp	r3, #15
 8009946:	d9e9      	bls.n	800991c <prvInitialiseNewTask+0x5e>
 8009948:	e000      	b.n	800994c <prvInitialiseNewTask+0x8e>
		{
			break;
 800994a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800994c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994e:	2200      	movs	r2, #0
 8009950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009956:	2b37      	cmp	r3, #55	; 0x37
 8009958:	d901      	bls.n	800995e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800995a:	2337      	movs	r3, #55	; 0x37
 800995c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009962:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009968:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996c:	2200      	movs	r2, #0
 800996e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009972:	3304      	adds	r3, #4
 8009974:	4618      	mov	r0, r3
 8009976:	f7ff f94e 	bl	8008c16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997c:	3318      	adds	r3, #24
 800997e:	4618      	mov	r0, r3
 8009980:	f7ff f949 	bl	8008c16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009988:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800998a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009992:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009998:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999c:	2200      	movs	r2, #0
 800999e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	2200      	movs	r2, #0
 80099a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099a8:	683a      	ldr	r2, [r7, #0]
 80099aa:	68f9      	ldr	r1, [r7, #12]
 80099ac:	69b8      	ldr	r0, [r7, #24]
 80099ae:	f001 fa17 	bl	800ade0 <pxPortInitialiseStack>
 80099b2:	4602      	mov	r2, r0
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80099b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099c4:	bf00      	nop
 80099c6:	3720      	adds	r7, #32
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099d4:	f001 faf2 	bl	800afbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099d8:	4b2d      	ldr	r3, [pc, #180]	; (8009a90 <prvAddNewTaskToReadyList+0xc4>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3301      	adds	r3, #1
 80099de:	4a2c      	ldr	r2, [pc, #176]	; (8009a90 <prvAddNewTaskToReadyList+0xc4>)
 80099e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099e2:	4b2c      	ldr	r3, [pc, #176]	; (8009a94 <prvAddNewTaskToReadyList+0xc8>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d109      	bne.n	80099fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099ea:	4a2a      	ldr	r2, [pc, #168]	; (8009a94 <prvAddNewTaskToReadyList+0xc8>)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80099f0:	4b27      	ldr	r3, [pc, #156]	; (8009a90 <prvAddNewTaskToReadyList+0xc4>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d110      	bne.n	8009a1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099f8:	f000 fd06 	bl	800a408 <prvInitialiseTaskLists>
 80099fc:	e00d      	b.n	8009a1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099fe:	4b26      	ldr	r3, [pc, #152]	; (8009a98 <prvAddNewTaskToReadyList+0xcc>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d109      	bne.n	8009a1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a06:	4b23      	ldr	r3, [pc, #140]	; (8009a94 <prvAddNewTaskToReadyList+0xc8>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d802      	bhi.n	8009a1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a14:	4a1f      	ldr	r2, [pc, #124]	; (8009a94 <prvAddNewTaskToReadyList+0xc8>)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a1a:	4b20      	ldr	r3, [pc, #128]	; (8009a9c <prvAddNewTaskToReadyList+0xd0>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	4a1e      	ldr	r2, [pc, #120]	; (8009a9c <prvAddNewTaskToReadyList+0xd0>)
 8009a22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a24:	4b1d      	ldr	r3, [pc, #116]	; (8009a9c <prvAddNewTaskToReadyList+0xd0>)
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a30:	4b1b      	ldr	r3, [pc, #108]	; (8009aa0 <prvAddNewTaskToReadyList+0xd4>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d903      	bls.n	8009a40 <prvAddNewTaskToReadyList+0x74>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	4a18      	ldr	r2, [pc, #96]	; (8009aa0 <prvAddNewTaskToReadyList+0xd4>)
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a44:	4613      	mov	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4a15      	ldr	r2, [pc, #84]	; (8009aa4 <prvAddNewTaskToReadyList+0xd8>)
 8009a4e:	441a      	add	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	3304      	adds	r3, #4
 8009a54:	4619      	mov	r1, r3
 8009a56:	4610      	mov	r0, r2
 8009a58:	f7ff f8e9 	bl	8008c2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a5c:	f001 fade 	bl	800b01c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a60:	4b0d      	ldr	r3, [pc, #52]	; (8009a98 <prvAddNewTaskToReadyList+0xcc>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00e      	beq.n	8009a86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a68:	4b0a      	ldr	r3, [pc, #40]	; (8009a94 <prvAddNewTaskToReadyList+0xc8>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d207      	bcs.n	8009a86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a76:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <prvAddNewTaskToReadyList+0xdc>)
 8009a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a86:	bf00      	nop
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000da4 	.word	0x20000da4
 8009a94:	200008d0 	.word	0x200008d0
 8009a98:	20000db0 	.word	0x20000db0
 8009a9c:	20000dc0 	.word	0x20000dc0
 8009aa0:	20000dac 	.word	0x20000dac
 8009aa4:	200008d4 	.word	0x200008d4
 8009aa8:	e000ed04 	.word	0xe000ed04

08009aac <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009ab4:	f001 fa82 	bl	800afbc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d102      	bne.n	8009ac4 <vTaskDelete+0x18>
 8009abe:	4b2c      	ldr	r3, [pc, #176]	; (8009b70 <vTaskDelete+0xc4>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	e000      	b.n	8009ac6 <vTaskDelete+0x1a>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	3304      	adds	r3, #4
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7ff f909 	bl	8008ce4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d004      	beq.n	8009ae4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	3318      	adds	r3, #24
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff f900 	bl	8008ce4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009ae4:	4b23      	ldr	r3, [pc, #140]	; (8009b74 <vTaskDelete+0xc8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	4a22      	ldr	r2, [pc, #136]	; (8009b74 <vTaskDelete+0xc8>)
 8009aec:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009aee:	4b20      	ldr	r3, [pc, #128]	; (8009b70 <vTaskDelete+0xc4>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d10b      	bne.n	8009b10 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	3304      	adds	r3, #4
 8009afc:	4619      	mov	r1, r3
 8009afe:	481e      	ldr	r0, [pc, #120]	; (8009b78 <vTaskDelete+0xcc>)
 8009b00:	f7ff f895 	bl	8008c2e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009b04:	4b1d      	ldr	r3, [pc, #116]	; (8009b7c <vTaskDelete+0xd0>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	4a1c      	ldr	r2, [pc, #112]	; (8009b7c <vTaskDelete+0xd0>)
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	e009      	b.n	8009b24 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009b10:	4b1b      	ldr	r3, [pc, #108]	; (8009b80 <vTaskDelete+0xd4>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	3b01      	subs	r3, #1
 8009b16:	4a1a      	ldr	r2, [pc, #104]	; (8009b80 <vTaskDelete+0xd4>)
 8009b18:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f000 fd1a 	bl	800a554 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009b20:	f000 fd48 	bl	800a5b4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8009b24:	f001 fa7a 	bl	800b01c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009b28:	4b16      	ldr	r3, [pc, #88]	; (8009b84 <vTaskDelete+0xd8>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d01b      	beq.n	8009b68 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8009b30:	4b0f      	ldr	r3, [pc, #60]	; (8009b70 <vTaskDelete+0xc4>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d116      	bne.n	8009b68 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009b3a:	4b13      	ldr	r3, [pc, #76]	; (8009b88 <vTaskDelete+0xdc>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00a      	beq.n	8009b58 <vTaskDelete+0xac>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	60bb      	str	r3, [r7, #8]
}
 8009b54:	bf00      	nop
 8009b56:	e7fe      	b.n	8009b56 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009b58:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <vTaskDelete+0xe0>)
 8009b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b5e:	601a      	str	r2, [r3, #0]
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009b68:	bf00      	nop
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	200008d0 	.word	0x200008d0
 8009b74:	20000dc0 	.word	0x20000dc0
 8009b78:	20000d78 	.word	0x20000d78
 8009b7c:	20000d8c 	.word	0x20000d8c
 8009b80:	20000da4 	.word	0x20000da4
 8009b84:	20000db0 	.word	0x20000db0
 8009b88:	20000dcc 	.word	0x20000dcc
 8009b8c:	e000ed04 	.word	0xe000ed04

08009b90 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b08a      	sub	sp, #40	; 0x28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10a      	bne.n	8009bba <vTaskDelayUntil+0x2a>
	__asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	617b      	str	r3, [r7, #20]
}
 8009bb6:	bf00      	nop
 8009bb8:	e7fe      	b.n	8009bb8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10a      	bne.n	8009bd6 <vTaskDelayUntil+0x46>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	613b      	str	r3, [r7, #16]
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009bd6:	4b2a      	ldr	r3, [pc, #168]	; (8009c80 <vTaskDelayUntil+0xf0>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00a      	beq.n	8009bf4 <vTaskDelayUntil+0x64>
	__asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	60fb      	str	r3, [r7, #12]
}
 8009bf0:	bf00      	nop
 8009bf2:	e7fe      	b.n	8009bf2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009bf4:	f000 f8e4 	bl	8009dc0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009bf8:	4b22      	ldr	r3, [pc, #136]	; (8009c84 <vTaskDelayUntil+0xf4>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	4413      	add	r3, r2
 8009c06:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6a3a      	ldr	r2, [r7, #32]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d20b      	bcs.n	8009c2a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	69fa      	ldr	r2, [r7, #28]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d211      	bcs.n	8009c40 <vTaskDelayUntil+0xb0>
 8009c1c:	69fa      	ldr	r2, [r7, #28]
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d90d      	bls.n	8009c40 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009c24:	2301      	movs	r3, #1
 8009c26:	627b      	str	r3, [r7, #36]	; 0x24
 8009c28:	e00a      	b.n	8009c40 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	69fa      	ldr	r2, [r7, #28]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d303      	bcc.n	8009c3c <vTaskDelayUntil+0xac>
 8009c34:	69fa      	ldr	r2, [r7, #28]
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d901      	bls.n	8009c40 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	69fa      	ldr	r2, [r7, #28]
 8009c44:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d006      	beq.n	8009c5a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009c4c:	69fa      	ldr	r2, [r7, #28]
 8009c4e:	6a3b      	ldr	r3, [r7, #32]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	2100      	movs	r1, #0
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 fd5d 	bl	800a714 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009c5a:	f000 f8bf 	bl	8009ddc <xTaskResumeAll>
 8009c5e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d107      	bne.n	8009c76 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009c66:	4b08      	ldr	r3, [pc, #32]	; (8009c88 <vTaskDelayUntil+0xf8>)
 8009c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c76:	bf00      	nop
 8009c78:	3728      	adds	r7, #40	; 0x28
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	20000dcc 	.word	0x20000dcc
 8009c84:	20000da8 	.word	0x20000da8
 8009c88:	e000ed04 	.word	0xe000ed04

08009c8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009c94:	2300      	movs	r3, #0
 8009c96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d017      	beq.n	8009cce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009c9e:	4b13      	ldr	r3, [pc, #76]	; (8009cec <vTaskDelay+0x60>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00a      	beq.n	8009cbc <vTaskDelay+0x30>
	__asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	60bb      	str	r3, [r7, #8]
}
 8009cb8:	bf00      	nop
 8009cba:	e7fe      	b.n	8009cba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009cbc:	f000 f880 	bl	8009dc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fd26 	bl	800a714 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009cc8:	f000 f888 	bl	8009ddc <xTaskResumeAll>
 8009ccc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d107      	bne.n	8009ce4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009cd4:	4b06      	ldr	r3, [pc, #24]	; (8009cf0 <vTaskDelay+0x64>)
 8009cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ce4:	bf00      	nop
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	20000dcc 	.word	0x20000dcc
 8009cf0:	e000ed04 	.word	0xe000ed04

08009cf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b08a      	sub	sp, #40	; 0x28
 8009cf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d02:	463a      	mov	r2, r7
 8009d04:	1d39      	adds	r1, r7, #4
 8009d06:	f107 0308 	add.w	r3, r7, #8
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fe ff32 	bl	8008b74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	9202      	str	r2, [sp, #8]
 8009d18:	9301      	str	r3, [sp, #4]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	460a      	mov	r2, r1
 8009d22:	4921      	ldr	r1, [pc, #132]	; (8009da8 <vTaskStartScheduler+0xb4>)
 8009d24:	4821      	ldr	r0, [pc, #132]	; (8009dac <vTaskStartScheduler+0xb8>)
 8009d26:	f7ff fd29 	bl	800977c <xTaskCreateStatic>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	4a20      	ldr	r2, [pc, #128]	; (8009db0 <vTaskStartScheduler+0xbc>)
 8009d2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d30:	4b1f      	ldr	r3, [pc, #124]	; (8009db0 <vTaskStartScheduler+0xbc>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	617b      	str	r3, [r7, #20]
 8009d3c:	e001      	b.n	8009d42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d102      	bne.n	8009d4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d48:	f000 fd38 	bl	800a7bc <xTimerCreateTimerTask>
 8009d4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d116      	bne.n	8009d82 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	613b      	str	r3, [r7, #16]
}
 8009d66:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d68:	4b12      	ldr	r3, [pc, #72]	; (8009db4 <vTaskStartScheduler+0xc0>)
 8009d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d70:	4b11      	ldr	r3, [pc, #68]	; (8009db8 <vTaskStartScheduler+0xc4>)
 8009d72:	2201      	movs	r2, #1
 8009d74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009d76:	4b11      	ldr	r3, [pc, #68]	; (8009dbc <vTaskStartScheduler+0xc8>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009d7c:	f001 f8ac 	bl	800aed8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009d80:	e00e      	b.n	8009da0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d88:	d10a      	bne.n	8009da0 <vTaskStartScheduler+0xac>
	__asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	60fb      	str	r3, [r7, #12]
}
 8009d9c:	bf00      	nop
 8009d9e:	e7fe      	b.n	8009d9e <vTaskStartScheduler+0xaa>
}
 8009da0:	bf00      	nop
 8009da2:	3718      	adds	r7, #24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	0800c9b4 	.word	0x0800c9b4
 8009dac:	0800a3d9 	.word	0x0800a3d9
 8009db0:	20000dc8 	.word	0x20000dc8
 8009db4:	20000dc4 	.word	0x20000dc4
 8009db8:	20000db0 	.word	0x20000db0
 8009dbc:	20000da8 	.word	0x20000da8

08009dc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009dc4:	4b04      	ldr	r3, [pc, #16]	; (8009dd8 <vTaskSuspendAll+0x18>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	4a03      	ldr	r2, [pc, #12]	; (8009dd8 <vTaskSuspendAll+0x18>)
 8009dcc:	6013      	str	r3, [r2, #0]
}
 8009dce:	bf00      	nop
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bc80      	pop	{r7}
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	20000dcc 	.word	0x20000dcc

08009ddc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009de6:	2300      	movs	r3, #0
 8009de8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009dea:	4b42      	ldr	r3, [pc, #264]	; (8009ef4 <xTaskResumeAll+0x118>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10a      	bne.n	8009e08 <xTaskResumeAll+0x2c>
	__asm volatile
 8009df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df6:	f383 8811 	msr	BASEPRI, r3
 8009dfa:	f3bf 8f6f 	isb	sy
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	603b      	str	r3, [r7, #0]
}
 8009e04:	bf00      	nop
 8009e06:	e7fe      	b.n	8009e06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e08:	f001 f8d8 	bl	800afbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e0c:	4b39      	ldr	r3, [pc, #228]	; (8009ef4 <xTaskResumeAll+0x118>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	3b01      	subs	r3, #1
 8009e12:	4a38      	ldr	r2, [pc, #224]	; (8009ef4 <xTaskResumeAll+0x118>)
 8009e14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e16:	4b37      	ldr	r3, [pc, #220]	; (8009ef4 <xTaskResumeAll+0x118>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d162      	bne.n	8009ee4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e1e:	4b36      	ldr	r3, [pc, #216]	; (8009ef8 <xTaskResumeAll+0x11c>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d05e      	beq.n	8009ee4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e26:	e02f      	b.n	8009e88 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009e28:	4b34      	ldr	r3, [pc, #208]	; (8009efc <xTaskResumeAll+0x120>)
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	3318      	adds	r3, #24
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7fe ff55 	bl	8008ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fe ff50 	bl	8008ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e48:	4b2d      	ldr	r3, [pc, #180]	; (8009f00 <xTaskResumeAll+0x124>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d903      	bls.n	8009e58 <xTaskResumeAll+0x7c>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e54:	4a2a      	ldr	r2, [pc, #168]	; (8009f00 <xTaskResumeAll+0x124>)
 8009e56:	6013      	str	r3, [r2, #0]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4a27      	ldr	r2, [pc, #156]	; (8009f04 <xTaskResumeAll+0x128>)
 8009e66:	441a      	add	r2, r3
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	4610      	mov	r0, r2
 8009e70:	f7fe fedd 	bl	8008c2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e78:	4b23      	ldr	r3, [pc, #140]	; (8009f08 <xTaskResumeAll+0x12c>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d302      	bcc.n	8009e88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009e82:	4b22      	ldr	r3, [pc, #136]	; (8009f0c <xTaskResumeAll+0x130>)
 8009e84:	2201      	movs	r2, #1
 8009e86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e88:	4b1c      	ldr	r3, [pc, #112]	; (8009efc <xTaskResumeAll+0x120>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1cb      	bne.n	8009e28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009e96:	f000 fb8d 	bl	800a5b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009e9a:	4b1d      	ldr	r3, [pc, #116]	; (8009f10 <xTaskResumeAll+0x134>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d010      	beq.n	8009ec8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ea6:	f000 f845 	bl	8009f34 <xTaskIncrementTick>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d002      	beq.n	8009eb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009eb0:	4b16      	ldr	r3, [pc, #88]	; (8009f0c <xTaskResumeAll+0x130>)
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1f1      	bne.n	8009ea6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009ec2:	4b13      	ldr	r3, [pc, #76]	; (8009f10 <xTaskResumeAll+0x134>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ec8:	4b10      	ldr	r3, [pc, #64]	; (8009f0c <xTaskResumeAll+0x130>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d009      	beq.n	8009ee4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ed4:	4b0f      	ldr	r3, [pc, #60]	; (8009f14 <xTaskResumeAll+0x138>)
 8009ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eda:	601a      	str	r2, [r3, #0]
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ee4:	f001 f89a 	bl	800b01c <vPortExitCritical>

	return xAlreadyYielded;
 8009ee8:	68bb      	ldr	r3, [r7, #8]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	20000dcc 	.word	0x20000dcc
 8009ef8:	20000da4 	.word	0x20000da4
 8009efc:	20000d64 	.word	0x20000d64
 8009f00:	20000dac 	.word	0x20000dac
 8009f04:	200008d4 	.word	0x200008d4
 8009f08:	200008d0 	.word	0x200008d0
 8009f0c:	20000db8 	.word	0x20000db8
 8009f10:	20000db4 	.word	0x20000db4
 8009f14:	e000ed04 	.word	0xe000ed04

08009f18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f1e:	4b04      	ldr	r3, [pc, #16]	; (8009f30 <xTaskGetTickCount+0x18>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f24:	687b      	ldr	r3, [r7, #4]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bc80      	pop	{r7}
 8009f2e:	4770      	bx	lr
 8009f30:	20000da8 	.word	0x20000da8

08009f34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f3e:	4b51      	ldr	r3, [pc, #324]	; (800a084 <xTaskIncrementTick+0x150>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f040 808e 	bne.w	800a064 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f48:	4b4f      	ldr	r3, [pc, #316]	; (800a088 <xTaskIncrementTick+0x154>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f50:	4a4d      	ldr	r2, [pc, #308]	; (800a088 <xTaskIncrementTick+0x154>)
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d120      	bne.n	8009f9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f5c:	4b4b      	ldr	r3, [pc, #300]	; (800a08c <xTaskIncrementTick+0x158>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00a      	beq.n	8009f7c <xTaskIncrementTick+0x48>
	__asm volatile
 8009f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6a:	f383 8811 	msr	BASEPRI, r3
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f3bf 8f4f 	dsb	sy
 8009f76:	603b      	str	r3, [r7, #0]
}
 8009f78:	bf00      	nop
 8009f7a:	e7fe      	b.n	8009f7a <xTaskIncrementTick+0x46>
 8009f7c:	4b43      	ldr	r3, [pc, #268]	; (800a08c <xTaskIncrementTick+0x158>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	60fb      	str	r3, [r7, #12]
 8009f82:	4b43      	ldr	r3, [pc, #268]	; (800a090 <xTaskIncrementTick+0x15c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a41      	ldr	r2, [pc, #260]	; (800a08c <xTaskIncrementTick+0x158>)
 8009f88:	6013      	str	r3, [r2, #0]
 8009f8a:	4a41      	ldr	r2, [pc, #260]	; (800a090 <xTaskIncrementTick+0x15c>)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	4b40      	ldr	r3, [pc, #256]	; (800a094 <xTaskIncrementTick+0x160>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3301      	adds	r3, #1
 8009f96:	4a3f      	ldr	r2, [pc, #252]	; (800a094 <xTaskIncrementTick+0x160>)
 8009f98:	6013      	str	r3, [r2, #0]
 8009f9a:	f000 fb0b 	bl	800a5b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009f9e:	4b3e      	ldr	r3, [pc, #248]	; (800a098 <xTaskIncrementTick+0x164>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d34e      	bcc.n	800a046 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fa8:	4b38      	ldr	r3, [pc, #224]	; (800a08c <xTaskIncrementTick+0x158>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <xTaskIncrementTick+0x82>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e000      	b.n	8009fb8 <xTaskIncrementTick+0x84>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d004      	beq.n	8009fc6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fbc:	4b36      	ldr	r3, [pc, #216]	; (800a098 <xTaskIncrementTick+0x164>)
 8009fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc2:	601a      	str	r2, [r3, #0]
					break;
 8009fc4:	e03f      	b.n	800a046 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009fc6:	4b31      	ldr	r3, [pc, #196]	; (800a08c <xTaskIncrementTick+0x158>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d203      	bcs.n	8009fe6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009fde:	4a2e      	ldr	r2, [pc, #184]	; (800a098 <xTaskIncrementTick+0x164>)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6013      	str	r3, [r2, #0]
						break;
 8009fe4:	e02f      	b.n	800a046 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	3304      	adds	r3, #4
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fe fe7a 	bl	8008ce4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d004      	beq.n	800a002 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	3318      	adds	r3, #24
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fe fe71 	bl	8008ce4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a006:	4b25      	ldr	r3, [pc, #148]	; (800a09c <xTaskIncrementTick+0x168>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d903      	bls.n	800a016 <xTaskIncrementTick+0xe2>
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a012:	4a22      	ldr	r2, [pc, #136]	; (800a09c <xTaskIncrementTick+0x168>)
 800a014:	6013      	str	r3, [r2, #0]
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01a:	4613      	mov	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4413      	add	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4a1f      	ldr	r2, [pc, #124]	; (800a0a0 <xTaskIncrementTick+0x16c>)
 800a024:	441a      	add	r2, r3
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	3304      	adds	r3, #4
 800a02a:	4619      	mov	r1, r3
 800a02c:	4610      	mov	r0, r2
 800a02e:	f7fe fdfe 	bl	8008c2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a036:	4b1b      	ldr	r3, [pc, #108]	; (800a0a4 <xTaskIncrementTick+0x170>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d3b3      	bcc.n	8009fa8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a040:	2301      	movs	r3, #1
 800a042:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a044:	e7b0      	b.n	8009fa8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a046:	4b17      	ldr	r3, [pc, #92]	; (800a0a4 <xTaskIncrementTick+0x170>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04c:	4914      	ldr	r1, [pc, #80]	; (800a0a0 <xTaskIncrementTick+0x16c>)
 800a04e:	4613      	mov	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	440b      	add	r3, r1
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d907      	bls.n	800a06e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a05e:	2301      	movs	r3, #1
 800a060:	617b      	str	r3, [r7, #20]
 800a062:	e004      	b.n	800a06e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a064:	4b10      	ldr	r3, [pc, #64]	; (800a0a8 <xTaskIncrementTick+0x174>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	3301      	adds	r3, #1
 800a06a:	4a0f      	ldr	r2, [pc, #60]	; (800a0a8 <xTaskIncrementTick+0x174>)
 800a06c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a06e:	4b0f      	ldr	r3, [pc, #60]	; (800a0ac <xTaskIncrementTick+0x178>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d001      	beq.n	800a07a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800a076:	2301      	movs	r3, #1
 800a078:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a07a:	697b      	ldr	r3, [r7, #20]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3718      	adds	r7, #24
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	20000dcc 	.word	0x20000dcc
 800a088:	20000da8 	.word	0x20000da8
 800a08c:	20000d5c 	.word	0x20000d5c
 800a090:	20000d60 	.word	0x20000d60
 800a094:	20000dbc 	.word	0x20000dbc
 800a098:	20000dc4 	.word	0x20000dc4
 800a09c:	20000dac 	.word	0x20000dac
 800a0a0:	200008d4 	.word	0x200008d4
 800a0a4:	200008d0 	.word	0x200008d0
 800a0a8:	20000db4 	.word	0x20000db4
 800a0ac:	20000db8 	.word	0x20000db8

0800a0b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0b6:	4b27      	ldr	r3, [pc, #156]	; (800a154 <vTaskSwitchContext+0xa4>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d003      	beq.n	800a0c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a0be:	4b26      	ldr	r3, [pc, #152]	; (800a158 <vTaskSwitchContext+0xa8>)
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a0c4:	e041      	b.n	800a14a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a0c6:	4b24      	ldr	r3, [pc, #144]	; (800a158 <vTaskSwitchContext+0xa8>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a0cc:	4b23      	ldr	r3, [pc, #140]	; (800a15c <vTaskSwitchContext+0xac>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	60fb      	str	r3, [r7, #12]
 800a0d2:	e010      	b.n	800a0f6 <vTaskSwitchContext+0x46>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10a      	bne.n	800a0f0 <vTaskSwitchContext+0x40>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	607b      	str	r3, [r7, #4]
}
 800a0ec:	bf00      	nop
 800a0ee:	e7fe      	b.n	800a0ee <vTaskSwitchContext+0x3e>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	60fb      	str	r3, [r7, #12]
 800a0f6:	491a      	ldr	r1, [pc, #104]	; (800a160 <vTaskSwitchContext+0xb0>)
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	440b      	add	r3, r1
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d0e4      	beq.n	800a0d4 <vTaskSwitchContext+0x24>
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	4613      	mov	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4a12      	ldr	r2, [pc, #72]	; (800a160 <vTaskSwitchContext+0xb0>)
 800a116:	4413      	add	r3, r2
 800a118:	60bb      	str	r3, [r7, #8]
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	605a      	str	r2, [r3, #4]
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	3308      	adds	r3, #8
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d104      	bne.n	800a13a <vTaskSwitchContext+0x8a>
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	605a      	str	r2, [r3, #4]
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	4a08      	ldr	r2, [pc, #32]	; (800a164 <vTaskSwitchContext+0xb4>)
 800a142:	6013      	str	r3, [r2, #0]
 800a144:	4a05      	ldr	r2, [pc, #20]	; (800a15c <vTaskSwitchContext+0xac>)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6013      	str	r3, [r2, #0]
}
 800a14a:	bf00      	nop
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	bc80      	pop	{r7}
 800a152:	4770      	bx	lr
 800a154:	20000dcc 	.word	0x20000dcc
 800a158:	20000db8 	.word	0x20000db8
 800a15c:	20000dac 	.word	0x20000dac
 800a160:	200008d4 	.word	0x200008d4
 800a164:	200008d0 	.word	0x200008d0

0800a168 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10a      	bne.n	800a18e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17c:	f383 8811 	msr	BASEPRI, r3
 800a180:	f3bf 8f6f 	isb	sy
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	60fb      	str	r3, [r7, #12]
}
 800a18a:	bf00      	nop
 800a18c:	e7fe      	b.n	800a18c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a18e:	4b07      	ldr	r3, [pc, #28]	; (800a1ac <vTaskPlaceOnEventList+0x44>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3318      	adds	r3, #24
 800a194:	4619      	mov	r1, r3
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7fe fd6c 	bl	8008c74 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a19c:	2101      	movs	r1, #1
 800a19e:	6838      	ldr	r0, [r7, #0]
 800a1a0:	f000 fab8 	bl	800a714 <prvAddCurrentTaskToDelayedList>
}
 800a1a4:	bf00      	nop
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	200008d0 	.word	0x200008d0

0800a1b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10a      	bne.n	800a1d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	617b      	str	r3, [r7, #20]
}
 800a1d4:	bf00      	nop
 800a1d6:	e7fe      	b.n	800a1d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1d8:	4b0a      	ldr	r3, [pc, #40]	; (800a204 <vTaskPlaceOnEventListRestricted+0x54>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	3318      	adds	r3, #24
 800a1de:	4619      	mov	r1, r3
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f7fe fd24 	bl	8008c2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d002      	beq.n	800a1f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a1f2:	6879      	ldr	r1, [r7, #4]
 800a1f4:	68b8      	ldr	r0, [r7, #8]
 800a1f6:	f000 fa8d 	bl	800a714 <prvAddCurrentTaskToDelayedList>
	}
 800a1fa:	bf00      	nop
 800a1fc:	3718      	adds	r7, #24
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	200008d0 	.word	0x200008d0

0800a208 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10a      	bne.n	800a234 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	60fb      	str	r3, [r7, #12]
}
 800a230:	bf00      	nop
 800a232:	e7fe      	b.n	800a232 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	3318      	adds	r3, #24
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fe fd53 	bl	8008ce4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a23e:	4b1e      	ldr	r3, [pc, #120]	; (800a2b8 <xTaskRemoveFromEventList+0xb0>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d11d      	bne.n	800a282 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	3304      	adds	r3, #4
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fe fd4a 	bl	8008ce4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a254:	4b19      	ldr	r3, [pc, #100]	; (800a2bc <xTaskRemoveFromEventList+0xb4>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d903      	bls.n	800a264 <xTaskRemoveFromEventList+0x5c>
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a260:	4a16      	ldr	r2, [pc, #88]	; (800a2bc <xTaskRemoveFromEventList+0xb4>)
 800a262:	6013      	str	r3, [r2, #0]
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a268:	4613      	mov	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4413      	add	r3, r2
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	4a13      	ldr	r2, [pc, #76]	; (800a2c0 <xTaskRemoveFromEventList+0xb8>)
 800a272:	441a      	add	r2, r3
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	3304      	adds	r3, #4
 800a278:	4619      	mov	r1, r3
 800a27a:	4610      	mov	r0, r2
 800a27c:	f7fe fcd7 	bl	8008c2e <vListInsertEnd>
 800a280:	e005      	b.n	800a28e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	3318      	adds	r3, #24
 800a286:	4619      	mov	r1, r3
 800a288:	480e      	ldr	r0, [pc, #56]	; (800a2c4 <xTaskRemoveFromEventList+0xbc>)
 800a28a:	f7fe fcd0 	bl	8008c2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a292:	4b0d      	ldr	r3, [pc, #52]	; (800a2c8 <xTaskRemoveFromEventList+0xc0>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a298:	429a      	cmp	r2, r3
 800a29a:	d905      	bls.n	800a2a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a29c:	2301      	movs	r3, #1
 800a29e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a2a0:	4b0a      	ldr	r3, [pc, #40]	; (800a2cc <xTaskRemoveFromEventList+0xc4>)
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	e001      	b.n	800a2ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a2ac:	697b      	ldr	r3, [r7, #20]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20000dcc 	.word	0x20000dcc
 800a2bc:	20000dac 	.word	0x20000dac
 800a2c0:	200008d4 	.word	0x200008d4
 800a2c4:	20000d64 	.word	0x20000d64
 800a2c8:	200008d0 	.word	0x200008d0
 800a2cc:	20000db8 	.word	0x20000db8

0800a2d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a2d8:	4b06      	ldr	r3, [pc, #24]	; (800a2f4 <vTaskInternalSetTimeOutState+0x24>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a2e0:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <vTaskInternalSetTimeOutState+0x28>)
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	605a      	str	r2, [r3, #4]
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bc80      	pop	{r7}
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	20000dbc 	.word	0x20000dbc
 800a2f8:	20000da8 	.word	0x20000da8

0800a2fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b088      	sub	sp, #32
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10a      	bne.n	800a322 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	613b      	str	r3, [r7, #16]
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	60fb      	str	r3, [r7, #12]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a33e:	f000 fe3d 	bl	800afbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a342:	4b1d      	ldr	r3, [pc, #116]	; (800a3b8 <xTaskCheckForTimeOut+0xbc>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	69ba      	ldr	r2, [r7, #24]
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a35a:	d102      	bne.n	800a362 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a35c:	2300      	movs	r3, #0
 800a35e:	61fb      	str	r3, [r7, #28]
 800a360:	e023      	b.n	800a3aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	4b15      	ldr	r3, [pc, #84]	; (800a3bc <xTaskCheckForTimeOut+0xc0>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d007      	beq.n	800a37e <xTaskCheckForTimeOut+0x82>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	69ba      	ldr	r2, [r7, #24]
 800a374:	429a      	cmp	r2, r3
 800a376:	d302      	bcc.n	800a37e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a378:	2301      	movs	r3, #1
 800a37a:	61fb      	str	r3, [r7, #28]
 800a37c:	e015      	b.n	800a3aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	429a      	cmp	r2, r3
 800a386:	d20b      	bcs.n	800a3a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	1ad2      	subs	r2, r2, r3
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7ff ff9b 	bl	800a2d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a39a:	2300      	movs	r3, #0
 800a39c:	61fb      	str	r3, [r7, #28]
 800a39e:	e004      	b.n	800a3aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a3aa:	f000 fe37 	bl	800b01c <vPortExitCritical>

	return xReturn;
 800a3ae:	69fb      	ldr	r3, [r7, #28]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3720      	adds	r7, #32
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	20000da8 	.word	0x20000da8
 800a3bc:	20000dbc 	.word	0x20000dbc

0800a3c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a3c4:	4b03      	ldr	r3, [pc, #12]	; (800a3d4 <vTaskMissedYield+0x14>)
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	601a      	str	r2, [r3, #0]
}
 800a3ca:	bf00      	nop
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bc80      	pop	{r7}
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	20000db8 	.word	0x20000db8

0800a3d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a3e0:	f000 f852 	bl	800a488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a3e4:	4b06      	ldr	r3, [pc, #24]	; (800a400 <prvIdleTask+0x28>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d9f9      	bls.n	800a3e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a3ec:	4b05      	ldr	r3, [pc, #20]	; (800a404 <prvIdleTask+0x2c>)
 800a3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a3fc:	e7f0      	b.n	800a3e0 <prvIdleTask+0x8>
 800a3fe:	bf00      	nop
 800a400:	200008d4 	.word	0x200008d4
 800a404:	e000ed04 	.word	0xe000ed04

0800a408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a40e:	2300      	movs	r3, #0
 800a410:	607b      	str	r3, [r7, #4]
 800a412:	e00c      	b.n	800a42e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	4613      	mov	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4413      	add	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	4a12      	ldr	r2, [pc, #72]	; (800a468 <prvInitialiseTaskLists+0x60>)
 800a420:	4413      	add	r3, r2
 800a422:	4618      	mov	r0, r3
 800a424:	f7fe fbd8 	bl	8008bd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3301      	adds	r3, #1
 800a42c:	607b      	str	r3, [r7, #4]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b37      	cmp	r3, #55	; 0x37
 800a432:	d9ef      	bls.n	800a414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a434:	480d      	ldr	r0, [pc, #52]	; (800a46c <prvInitialiseTaskLists+0x64>)
 800a436:	f7fe fbcf 	bl	8008bd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a43a:	480d      	ldr	r0, [pc, #52]	; (800a470 <prvInitialiseTaskLists+0x68>)
 800a43c:	f7fe fbcc 	bl	8008bd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a440:	480c      	ldr	r0, [pc, #48]	; (800a474 <prvInitialiseTaskLists+0x6c>)
 800a442:	f7fe fbc9 	bl	8008bd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a446:	480c      	ldr	r0, [pc, #48]	; (800a478 <prvInitialiseTaskLists+0x70>)
 800a448:	f7fe fbc6 	bl	8008bd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a44c:	480b      	ldr	r0, [pc, #44]	; (800a47c <prvInitialiseTaskLists+0x74>)
 800a44e:	f7fe fbc3 	bl	8008bd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a452:	4b0b      	ldr	r3, [pc, #44]	; (800a480 <prvInitialiseTaskLists+0x78>)
 800a454:	4a05      	ldr	r2, [pc, #20]	; (800a46c <prvInitialiseTaskLists+0x64>)
 800a456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a458:	4b0a      	ldr	r3, [pc, #40]	; (800a484 <prvInitialiseTaskLists+0x7c>)
 800a45a:	4a05      	ldr	r2, [pc, #20]	; (800a470 <prvInitialiseTaskLists+0x68>)
 800a45c:	601a      	str	r2, [r3, #0]
}
 800a45e:	bf00      	nop
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	200008d4 	.word	0x200008d4
 800a46c:	20000d34 	.word	0x20000d34
 800a470:	20000d48 	.word	0x20000d48
 800a474:	20000d64 	.word	0x20000d64
 800a478:	20000d78 	.word	0x20000d78
 800a47c:	20000d90 	.word	0x20000d90
 800a480:	20000d5c 	.word	0x20000d5c
 800a484:	20000d60 	.word	0x20000d60

0800a488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a48e:	e019      	b.n	800a4c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a490:	f000 fd94 	bl	800afbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a494:	4b10      	ldr	r3, [pc, #64]	; (800a4d8 <prvCheckTasksWaitingTermination+0x50>)
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fe fc1f 	bl	8008ce4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a4a6:	4b0d      	ldr	r3, [pc, #52]	; (800a4dc <prvCheckTasksWaitingTermination+0x54>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	4a0b      	ldr	r2, [pc, #44]	; (800a4dc <prvCheckTasksWaitingTermination+0x54>)
 800a4ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a4b0:	4b0b      	ldr	r3, [pc, #44]	; (800a4e0 <prvCheckTasksWaitingTermination+0x58>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	4a0a      	ldr	r2, [pc, #40]	; (800a4e0 <prvCheckTasksWaitingTermination+0x58>)
 800a4b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a4ba:	f000 fdaf 	bl	800b01c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f848 	bl	800a554 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a4c4:	4b06      	ldr	r3, [pc, #24]	; (800a4e0 <prvCheckTasksWaitingTermination+0x58>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d1e1      	bne.n	800a490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a4cc:	bf00      	nop
 800a4ce:	bf00      	nop
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	20000d78 	.word	0x20000d78
 800a4dc:	20000da4 	.word	0x20000da4
 800a4e0:	20000d8c 	.word	0x20000d8c

0800a4e4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a4f0:	e005      	b.n	800a4fe <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	607b      	str	r3, [r7, #4]
			ulCount++;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	2ba5      	cmp	r3, #165	; 0xa5
 800a504:	d0f5      	beq.n	800a4f2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	089b      	lsrs	r3, r3, #2
 800a50a:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	b29b      	uxth	r3, r3
	}
 800a510:	4618      	mov	r0, r3
 800a512:	3714      	adds	r7, #20
 800a514:	46bd      	mov	sp, r7
 800a516:	bc80      	pop	{r7}
 800a518:	4770      	bx	lr
	...

0800a51c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d102      	bne.n	800a530 <uxTaskGetStackHighWaterMark+0x14>
 800a52a:	4b09      	ldr	r3, [pc, #36]	; (800a550 <uxTaskGetStackHighWaterMark+0x34>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	e000      	b.n	800a532 <uxTaskGetStackHighWaterMark+0x16>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a538:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800a53a:	6938      	ldr	r0, [r7, #16]
 800a53c:	f7ff ffd2 	bl	800a4e4 <prvTaskCheckFreeStackSpace>
 800a540:	4603      	mov	r3, r0
 800a542:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800a544:	68fb      	ldr	r3, [r7, #12]
	}
 800a546:	4618      	mov	r0, r3
 800a548:	3718      	adds	r7, #24
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	200008d0 	.word	0x200008d0

0800a554 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a562:	2b00      	cmp	r3, #0
 800a564:	d108      	bne.n	800a578 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56a:	4618      	mov	r0, r3
 800a56c:	f000 feea 	bl	800b344 <vPortFree>
				vPortFree( pxTCB );
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 fee7 	bl	800b344 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a576:	e018      	b.n	800a5aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d103      	bne.n	800a58a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fede 	bl	800b344 <vPortFree>
	}
 800a588:	e00f      	b.n	800a5aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a590:	2b02      	cmp	r3, #2
 800a592:	d00a      	beq.n	800a5aa <prvDeleteTCB+0x56>
	__asm volatile
 800a594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	60fb      	str	r3, [r7, #12]
}
 800a5a6:	bf00      	nop
 800a5a8:	e7fe      	b.n	800a5a8 <prvDeleteTCB+0x54>
	}
 800a5aa:	bf00      	nop
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
	...

0800a5b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5ba:	4b0e      	ldr	r3, [pc, #56]	; (800a5f4 <prvResetNextTaskUnblockTime+0x40>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <prvResetNextTaskUnblockTime+0x14>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e000      	b.n	800a5ca <prvResetNextTaskUnblockTime+0x16>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d004      	beq.n	800a5d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a5ce:	4b0a      	ldr	r3, [pc, #40]	; (800a5f8 <prvResetNextTaskUnblockTime+0x44>)
 800a5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a5d6:	e008      	b.n	800a5ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a5d8:	4b06      	ldr	r3, [pc, #24]	; (800a5f4 <prvResetNextTaskUnblockTime+0x40>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	4a04      	ldr	r2, [pc, #16]	; (800a5f8 <prvResetNextTaskUnblockTime+0x44>)
 800a5e8:	6013      	str	r3, [r2, #0]
}
 800a5ea:	bf00      	nop
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bc80      	pop	{r7}
 800a5f2:	4770      	bx	lr
 800a5f4:	20000d5c 	.word	0x20000d5c
 800a5f8:	20000dc4 	.word	0x20000dc4

0800a5fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a602:	4b0b      	ldr	r3, [pc, #44]	; (800a630 <xTaskGetSchedulerState+0x34>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d102      	bne.n	800a610 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a60a:	2301      	movs	r3, #1
 800a60c:	607b      	str	r3, [r7, #4]
 800a60e:	e008      	b.n	800a622 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a610:	4b08      	ldr	r3, [pc, #32]	; (800a634 <xTaskGetSchedulerState+0x38>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d102      	bne.n	800a61e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a618:	2302      	movs	r3, #2
 800a61a:	607b      	str	r3, [r7, #4]
 800a61c:	e001      	b.n	800a622 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a61e:	2300      	movs	r3, #0
 800a620:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a622:	687b      	ldr	r3, [r7, #4]
	}
 800a624:	4618      	mov	r0, r3
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	bc80      	pop	{r7}
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	20000db0 	.word	0x20000db0
 800a634:	20000dcc 	.word	0x20000dcc

0800a638 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a644:	2300      	movs	r3, #0
 800a646:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d056      	beq.n	800a6fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a64e:	4b2e      	ldr	r3, [pc, #184]	; (800a708 <xTaskPriorityDisinherit+0xd0>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	429a      	cmp	r2, r3
 800a656:	d00a      	beq.n	800a66e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	60fb      	str	r3, [r7, #12]
}
 800a66a:	bf00      	nop
 800a66c:	e7fe      	b.n	800a66c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10a      	bne.n	800a68c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	60bb      	str	r3, [r7, #8]
}
 800a688:	bf00      	nop
 800a68a:	e7fe      	b.n	800a68a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a690:	1e5a      	subs	r2, r3, #1
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d02c      	beq.n	800a6fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d128      	bne.n	800a6fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	3304      	adds	r3, #4
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fe fb18 	bl	8008ce4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6cc:	4b0f      	ldr	r3, [pc, #60]	; (800a70c <xTaskPriorityDisinherit+0xd4>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d903      	bls.n	800a6dc <xTaskPriorityDisinherit+0xa4>
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d8:	4a0c      	ldr	r2, [pc, #48]	; (800a70c <xTaskPriorityDisinherit+0xd4>)
 800a6da:	6013      	str	r3, [r2, #0]
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	4413      	add	r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	4a09      	ldr	r2, [pc, #36]	; (800a710 <xTaskPriorityDisinherit+0xd8>)
 800a6ea:	441a      	add	r2, r3
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	3304      	adds	r3, #4
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	4610      	mov	r0, r2
 800a6f4:	f7fe fa9b 	bl	8008c2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6fc:	697b      	ldr	r3, [r7, #20]
	}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3718      	adds	r7, #24
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	200008d0 	.word	0x200008d0
 800a70c:	20000dac 	.word	0x20000dac
 800a710:	200008d4 	.word	0x200008d4

0800a714 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a71e:	4b21      	ldr	r3, [pc, #132]	; (800a7a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a724:	4b20      	ldr	r3, [pc, #128]	; (800a7a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	3304      	adds	r3, #4
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fe fada 	bl	8008ce4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a736:	d10a      	bne.n	800a74e <prvAddCurrentTaskToDelayedList+0x3a>
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d007      	beq.n	800a74e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a73e:	4b1a      	ldr	r3, [pc, #104]	; (800a7a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3304      	adds	r3, #4
 800a744:	4619      	mov	r1, r3
 800a746:	4819      	ldr	r0, [pc, #100]	; (800a7ac <prvAddCurrentTaskToDelayedList+0x98>)
 800a748:	f7fe fa71 	bl	8008c2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a74c:	e026      	b.n	800a79c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4413      	add	r3, r2
 800a754:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a756:	4b14      	ldr	r3, [pc, #80]	; (800a7a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	429a      	cmp	r2, r3
 800a764:	d209      	bcs.n	800a77a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a766:	4b12      	ldr	r3, [pc, #72]	; (800a7b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	4b0f      	ldr	r3, [pc, #60]	; (800a7a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	3304      	adds	r3, #4
 800a770:	4619      	mov	r1, r3
 800a772:	4610      	mov	r0, r2
 800a774:	f7fe fa7e 	bl	8008c74 <vListInsert>
}
 800a778:	e010      	b.n	800a79c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a77a:	4b0e      	ldr	r3, [pc, #56]	; (800a7b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	4b0a      	ldr	r3, [pc, #40]	; (800a7a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	3304      	adds	r3, #4
 800a784:	4619      	mov	r1, r3
 800a786:	4610      	mov	r0, r2
 800a788:	f7fe fa74 	bl	8008c74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a78c:	4b0a      	ldr	r3, [pc, #40]	; (800a7b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	429a      	cmp	r2, r3
 800a794:	d202      	bcs.n	800a79c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a796:	4a08      	ldr	r2, [pc, #32]	; (800a7b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	6013      	str	r3, [r2, #0]
}
 800a79c:	bf00      	nop
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	20000da8 	.word	0x20000da8
 800a7a8:	200008d0 	.word	0x200008d0
 800a7ac:	20000d90 	.word	0x20000d90
 800a7b0:	20000d60 	.word	0x20000d60
 800a7b4:	20000d5c 	.word	0x20000d5c
 800a7b8:	20000dc4 	.word	0x20000dc4

0800a7bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b08a      	sub	sp, #40	; 0x28
 800a7c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a7c6:	f000 facb 	bl	800ad60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a7ca:	4b1c      	ldr	r3, [pc, #112]	; (800a83c <xTimerCreateTimerTask+0x80>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d021      	beq.n	800a816 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a7da:	1d3a      	adds	r2, r7, #4
 800a7dc:	f107 0108 	add.w	r1, r7, #8
 800a7e0:	f107 030c 	add.w	r3, r7, #12
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7fe f9dd 	bl	8008ba4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	9202      	str	r2, [sp, #8]
 800a7f2:	9301      	str	r3, [sp, #4]
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	460a      	mov	r2, r1
 800a7fc:	4910      	ldr	r1, [pc, #64]	; (800a840 <xTimerCreateTimerTask+0x84>)
 800a7fe:	4811      	ldr	r0, [pc, #68]	; (800a844 <xTimerCreateTimerTask+0x88>)
 800a800:	f7fe ffbc 	bl	800977c <xTaskCreateStatic>
 800a804:	4603      	mov	r3, r0
 800a806:	4a10      	ldr	r2, [pc, #64]	; (800a848 <xTimerCreateTimerTask+0x8c>)
 800a808:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a80a:	4b0f      	ldr	r3, [pc, #60]	; (800a848 <xTimerCreateTimerTask+0x8c>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d001      	beq.n	800a816 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a812:	2301      	movs	r3, #1
 800a814:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10a      	bne.n	800a832 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	613b      	str	r3, [r7, #16]
}
 800a82e:	bf00      	nop
 800a830:	e7fe      	b.n	800a830 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a832:	697b      	ldr	r3, [r7, #20]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	20000e00 	.word	0x20000e00
 800a840:	0800c9bc 	.word	0x0800c9bc
 800a844:	0800a969 	.word	0x0800a969
 800a848:	20000e04 	.word	0x20000e04

0800a84c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b08a      	sub	sp, #40	; 0x28
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
 800a858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a85a:	2300      	movs	r3, #0
 800a85c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10a      	bne.n	800a87a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	623b      	str	r3, [r7, #32]
}
 800a876:	bf00      	nop
 800a878:	e7fe      	b.n	800a878 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a87a:	4b1a      	ldr	r3, [pc, #104]	; (800a8e4 <xTimerGenericCommand+0x98>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d02a      	beq.n	800a8d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	2b05      	cmp	r3, #5
 800a892:	dc18      	bgt.n	800a8c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a894:	f7ff feb2 	bl	800a5fc <xTaskGetSchedulerState>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d109      	bne.n	800a8b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a89e:	4b11      	ldr	r3, [pc, #68]	; (800a8e4 <xTimerGenericCommand+0x98>)
 800a8a0:	6818      	ldr	r0, [r3, #0]
 800a8a2:	f107 0110 	add.w	r1, r7, #16
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8aa:	f7fe fb85 	bl	8008fb8 <xQueueGenericSend>
 800a8ae:	6278      	str	r0, [r7, #36]	; 0x24
 800a8b0:	e012      	b.n	800a8d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a8b2:	4b0c      	ldr	r3, [pc, #48]	; (800a8e4 <xTimerGenericCommand+0x98>)
 800a8b4:	6818      	ldr	r0, [r3, #0]
 800a8b6:	f107 0110 	add.w	r1, r7, #16
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f7fe fb7b 	bl	8008fb8 <xQueueGenericSend>
 800a8c2:	6278      	str	r0, [r7, #36]	; 0x24
 800a8c4:	e008      	b.n	800a8d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a8c6:	4b07      	ldr	r3, [pc, #28]	; (800a8e4 <xTimerGenericCommand+0x98>)
 800a8c8:	6818      	ldr	r0, [r3, #0]
 800a8ca:	f107 0110 	add.w	r1, r7, #16
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	f7fe fc6f 	bl	80091b4 <xQueueGenericSendFromISR>
 800a8d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3728      	adds	r7, #40	; 0x28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20000e00 	.word	0x20000e00

0800a8e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af02      	add	r7, sp, #8
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8f2:	4b1c      	ldr	r3, [pc, #112]	; (800a964 <prvProcessExpiredTimer+0x7c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	3304      	adds	r3, #4
 800a900:	4618      	mov	r0, r3
 800a902:	f7fe f9ef 	bl	8008ce4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	69db      	ldr	r3, [r3, #28]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d122      	bne.n	800a954 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	699a      	ldr	r2, [r3, #24]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	18d1      	adds	r1, r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	6978      	ldr	r0, [r7, #20]
 800a91c:	f000 f8c8 	bl	800aab0 <prvInsertTimerInActiveList>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d016      	beq.n	800a954 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a926:	2300      	movs	r3, #0
 800a928:	9300      	str	r3, [sp, #0]
 800a92a:	2300      	movs	r3, #0
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	2100      	movs	r1, #0
 800a930:	6978      	ldr	r0, [r7, #20]
 800a932:	f7ff ff8b 	bl	800a84c <xTimerGenericCommand>
 800a936:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10a      	bne.n	800a954 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	60fb      	str	r3, [r7, #12]
}
 800a950:	bf00      	nop
 800a952:	e7fe      	b.n	800a952 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a958:	6978      	ldr	r0, [r7, #20]
 800a95a:	4798      	blx	r3
}
 800a95c:	bf00      	nop
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	20000df8 	.word	0x20000df8

0800a968 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a970:	f107 0308 	add.w	r3, r7, #8
 800a974:	4618      	mov	r0, r3
 800a976:	f000 f857 	bl	800aa28 <prvGetNextExpireTime>
 800a97a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	4619      	mov	r1, r3
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f000 f803 	bl	800a98c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a986:	f000 f8d5 	bl	800ab34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a98a:	e7f1      	b.n	800a970 <prvTimerTask+0x8>

0800a98c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a996:	f7ff fa13 	bl	8009dc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a99a:	f107 0308 	add.w	r3, r7, #8
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 f866 	bl	800aa70 <prvSampleTimeNow>
 800a9a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d130      	bne.n	800aa0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10a      	bne.n	800a9c8 <prvProcessTimerOrBlockTask+0x3c>
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d806      	bhi.n	800a9c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a9ba:	f7ff fa0f 	bl	8009ddc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a9be:	68f9      	ldr	r1, [r7, #12]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7ff ff91 	bl	800a8e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a9c6:	e024      	b.n	800aa12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d008      	beq.n	800a9e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a9ce:	4b13      	ldr	r3, [pc, #76]	; (800aa1c <prvProcessTimerOrBlockTask+0x90>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	bf0c      	ite	eq
 800a9d8:	2301      	moveq	r3, #1
 800a9da:	2300      	movne	r3, #0
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a9e0:	4b0f      	ldr	r3, [pc, #60]	; (800aa20 <prvProcessTimerOrBlockTask+0x94>)
 800a9e2:	6818      	ldr	r0, [r3, #0]
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	f7fe fe91 	bl	8009714 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a9f2:	f7ff f9f3 	bl	8009ddc <xTaskResumeAll>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d10a      	bne.n	800aa12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a9fc:	4b09      	ldr	r3, [pc, #36]	; (800aa24 <prvProcessTimerOrBlockTask+0x98>)
 800a9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa02:	601a      	str	r2, [r3, #0]
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	f3bf 8f6f 	isb	sy
}
 800aa0c:	e001      	b.n	800aa12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa0e:	f7ff f9e5 	bl	8009ddc <xTaskResumeAll>
}
 800aa12:	bf00      	nop
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	20000dfc 	.word	0x20000dfc
 800aa20:	20000e00 	.word	0x20000e00
 800aa24:	e000ed04 	.word	0xe000ed04

0800aa28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa30:	4b0e      	ldr	r3, [pc, #56]	; (800aa6c <prvGetNextExpireTime+0x44>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	bf0c      	ite	eq
 800aa3a:	2301      	moveq	r3, #1
 800aa3c:	2300      	movne	r3, #0
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	461a      	mov	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d105      	bne.n	800aa5a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa4e:	4b07      	ldr	r3, [pc, #28]	; (800aa6c <prvGetNextExpireTime+0x44>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	60fb      	str	r3, [r7, #12]
 800aa58:	e001      	b.n	800aa5e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bc80      	pop	{r7}
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	20000df8 	.word	0x20000df8

0800aa70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aa78:	f7ff fa4e 	bl	8009f18 <xTaskGetTickCount>
 800aa7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aa7e:	4b0b      	ldr	r3, [pc, #44]	; (800aaac <prvSampleTimeNow+0x3c>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d205      	bcs.n	800aa94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aa88:	f000 f908 	bl	800ac9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	e002      	b.n	800aa9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aa9a:	4a04      	ldr	r2, [pc, #16]	; (800aaac <prvSampleTimeNow+0x3c>)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	20000e08 	.word	0x20000e08

0800aab0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
 800aabc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aabe:	2300      	movs	r3, #0
 800aac0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d812      	bhi.n	800aafc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	1ad2      	subs	r2, r2, r3
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d302      	bcc.n	800aaea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aae4:	2301      	movs	r3, #1
 800aae6:	617b      	str	r3, [r7, #20]
 800aae8:	e01b      	b.n	800ab22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aaea:	4b10      	ldr	r3, [pc, #64]	; (800ab2c <prvInsertTimerInActiveList+0x7c>)
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	f7fe f8bd 	bl	8008c74 <vListInsert>
 800aafa:	e012      	b.n	800ab22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d206      	bcs.n	800ab12 <prvInsertTimerInActiveList+0x62>
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d302      	bcc.n	800ab12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	617b      	str	r3, [r7, #20]
 800ab10:	e007      	b.n	800ab22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab12:	4b07      	ldr	r3, [pc, #28]	; (800ab30 <prvInsertTimerInActiveList+0x80>)
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	3304      	adds	r3, #4
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	f7fe f8a9 	bl	8008c74 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab22:	697b      	ldr	r3, [r7, #20]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	20000dfc 	.word	0x20000dfc
 800ab30:	20000df8 	.word	0x20000df8

0800ab34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b08e      	sub	sp, #56	; 0x38
 800ab38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab3a:	e09d      	b.n	800ac78 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	da18      	bge.n	800ab74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab42:	1d3b      	adds	r3, r7, #4
 800ab44:	3304      	adds	r3, #4
 800ab46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10a      	bne.n	800ab64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ab4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	61fb      	str	r3, [r7, #28]
}
 800ab60:	bf00      	nop
 800ab62:	e7fe      	b.n	800ab62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab6a:	6850      	ldr	r0, [r2, #4]
 800ab6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab6e:	6892      	ldr	r2, [r2, #8]
 800ab70:	4611      	mov	r1, r2
 800ab72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	db7d      	blt.n	800ac76 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d004      	beq.n	800ab90 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab88:	3304      	adds	r3, #4
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fe f8aa 	bl	8008ce4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab90:	463b      	mov	r3, r7
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7ff ff6c 	bl	800aa70 <prvSampleTimeNow>
 800ab98:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2b09      	cmp	r3, #9
 800ab9e:	d86b      	bhi.n	800ac78 <prvProcessReceivedCommands+0x144>
 800aba0:	a201      	add	r2, pc, #4	; (adr r2, 800aba8 <prvProcessReceivedCommands+0x74>)
 800aba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba6:	bf00      	nop
 800aba8:	0800abd1 	.word	0x0800abd1
 800abac:	0800abd1 	.word	0x0800abd1
 800abb0:	0800abd1 	.word	0x0800abd1
 800abb4:	0800ac79 	.word	0x0800ac79
 800abb8:	0800ac2d 	.word	0x0800ac2d
 800abbc:	0800ac65 	.word	0x0800ac65
 800abc0:	0800abd1 	.word	0x0800abd1
 800abc4:	0800abd1 	.word	0x0800abd1
 800abc8:	0800ac79 	.word	0x0800ac79
 800abcc:	0800ac2d 	.word	0x0800ac2d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800abd0:	68ba      	ldr	r2, [r7, #8]
 800abd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	18d1      	adds	r1, r2, r3
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abde:	f7ff ff67 	bl	800aab0 <prvInsertTimerInActiveList>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d047      	beq.n	800ac78 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abee:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800abf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf2:	69db      	ldr	r3, [r3, #28]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d13f      	bne.n	800ac78 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	441a      	add	r2, r3
 800ac00:	2300      	movs	r3, #0
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	2300      	movs	r3, #0
 800ac06:	2100      	movs	r1, #0
 800ac08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac0a:	f7ff fe1f 	bl	800a84c <xTimerGenericCommand>
 800ac0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac10:	6a3b      	ldr	r3, [r7, #32]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d130      	bne.n	800ac78 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800ac16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1a:	f383 8811 	msr	BASEPRI, r3
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	f3bf 8f4f 	dsb	sy
 800ac26:	61bb      	str	r3, [r7, #24]
}
 800ac28:	bf00      	nop
 800ac2a:	e7fe      	b.n	800ac2a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac34:	699b      	ldr	r3, [r3, #24]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10a      	bne.n	800ac50 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800ac3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	617b      	str	r3, [r7, #20]
}
 800ac4c:	bf00      	nop
 800ac4e:	e7fe      	b.n	800ac4e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	699a      	ldr	r2, [r3, #24]
 800ac54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac56:	18d1      	adds	r1, r2, r3
 800ac58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac5e:	f7ff ff27 	bl	800aab0 <prvInsertTimerInActiveList>
					break;
 800ac62:	e009      	b.n	800ac78 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ac64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d104      	bne.n	800ac78 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800ac6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac70:	f000 fb68 	bl	800b344 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ac74:	e000      	b.n	800ac78 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ac76:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac78:	4b07      	ldr	r3, [pc, #28]	; (800ac98 <prvProcessReceivedCommands+0x164>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	1d39      	adds	r1, r7, #4
 800ac7e:	2200      	movs	r2, #0
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fe fb2f 	bl	80092e4 <xQueueReceive>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f47f af57 	bne.w	800ab3c <prvProcessReceivedCommands+0x8>
	}
}
 800ac8e:	bf00      	nop
 800ac90:	bf00      	nop
 800ac92:	3730      	adds	r7, #48	; 0x30
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	20000e00 	.word	0x20000e00

0800ac9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b088      	sub	sp, #32
 800aca0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aca2:	e045      	b.n	800ad30 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aca4:	4b2c      	ldr	r3, [pc, #176]	; (800ad58 <prvSwitchTimerLists+0xbc>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acae:	4b2a      	ldr	r3, [pc, #168]	; (800ad58 <prvSwitchTimerLists+0xbc>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	3304      	adds	r3, #4
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fe f811 	bl	8008ce4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	69db      	ldr	r3, [r3, #28]
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d12e      	bne.n	800ad30 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	4413      	add	r3, r2
 800acda:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d90e      	bls.n	800ad02 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800acf0:	4b19      	ldr	r3, [pc, #100]	; (800ad58 <prvSwitchTimerLists+0xbc>)
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	3304      	adds	r3, #4
 800acf8:	4619      	mov	r1, r3
 800acfa:	4610      	mov	r0, r2
 800acfc:	f7fd ffba 	bl	8008c74 <vListInsert>
 800ad00:	e016      	b.n	800ad30 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad02:	2300      	movs	r3, #0
 800ad04:	9300      	str	r3, [sp, #0]
 800ad06:	2300      	movs	r3, #0
 800ad08:	693a      	ldr	r2, [r7, #16]
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f7ff fd9d 	bl	800a84c <xTimerGenericCommand>
 800ad12:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10a      	bne.n	800ad30 <prvSwitchTimerLists+0x94>
	__asm volatile
 800ad1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	603b      	str	r3, [r7, #0]
}
 800ad2c:	bf00      	nop
 800ad2e:	e7fe      	b.n	800ad2e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad30:	4b09      	ldr	r3, [pc, #36]	; (800ad58 <prvSwitchTimerLists+0xbc>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1b4      	bne.n	800aca4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ad3a:	4b07      	ldr	r3, [pc, #28]	; (800ad58 <prvSwitchTimerLists+0xbc>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ad40:	4b06      	ldr	r3, [pc, #24]	; (800ad5c <prvSwitchTimerLists+0xc0>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a04      	ldr	r2, [pc, #16]	; (800ad58 <prvSwitchTimerLists+0xbc>)
 800ad46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ad48:	4a04      	ldr	r2, [pc, #16]	; (800ad5c <prvSwitchTimerLists+0xc0>)
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	6013      	str	r3, [r2, #0]
}
 800ad4e:	bf00      	nop
 800ad50:	3718      	adds	r7, #24
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20000df8 	.word	0x20000df8
 800ad5c:	20000dfc 	.word	0x20000dfc

0800ad60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ad66:	f000 f929 	bl	800afbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ad6a:	4b15      	ldr	r3, [pc, #84]	; (800adc0 <prvCheckForValidListAndQueue+0x60>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d120      	bne.n	800adb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ad72:	4814      	ldr	r0, [pc, #80]	; (800adc4 <prvCheckForValidListAndQueue+0x64>)
 800ad74:	f7fd ff30 	bl	8008bd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ad78:	4813      	ldr	r0, [pc, #76]	; (800adc8 <prvCheckForValidListAndQueue+0x68>)
 800ad7a:	f7fd ff2d 	bl	8008bd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ad7e:	4b13      	ldr	r3, [pc, #76]	; (800adcc <prvCheckForValidListAndQueue+0x6c>)
 800ad80:	4a10      	ldr	r2, [pc, #64]	; (800adc4 <prvCheckForValidListAndQueue+0x64>)
 800ad82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ad84:	4b12      	ldr	r3, [pc, #72]	; (800add0 <prvCheckForValidListAndQueue+0x70>)
 800ad86:	4a10      	ldr	r2, [pc, #64]	; (800adc8 <prvCheckForValidListAndQueue+0x68>)
 800ad88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	4b11      	ldr	r3, [pc, #68]	; (800add4 <prvCheckForValidListAndQueue+0x74>)
 800ad90:	4a11      	ldr	r2, [pc, #68]	; (800add8 <prvCheckForValidListAndQueue+0x78>)
 800ad92:	2110      	movs	r1, #16
 800ad94:	200a      	movs	r0, #10
 800ad96:	f7fe f837 	bl	8008e08 <xQueueGenericCreateStatic>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	4a08      	ldr	r2, [pc, #32]	; (800adc0 <prvCheckForValidListAndQueue+0x60>)
 800ad9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ada0:	4b07      	ldr	r3, [pc, #28]	; (800adc0 <prvCheckForValidListAndQueue+0x60>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d005      	beq.n	800adb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ada8:	4b05      	ldr	r3, [pc, #20]	; (800adc0 <prvCheckForValidListAndQueue+0x60>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	490b      	ldr	r1, [pc, #44]	; (800addc <prvCheckForValidListAndQueue+0x7c>)
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fe fc88 	bl	80096c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800adb4:	f000 f932 	bl	800b01c <vPortExitCritical>
}
 800adb8:	bf00      	nop
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	20000e00 	.word	0x20000e00
 800adc4:	20000dd0 	.word	0x20000dd0
 800adc8:	20000de4 	.word	0x20000de4
 800adcc:	20000df8 	.word	0x20000df8
 800add0:	20000dfc 	.word	0x20000dfc
 800add4:	20000eac 	.word	0x20000eac
 800add8:	20000e0c 	.word	0x20000e0c
 800addc:	0800c9c4 	.word	0x0800c9c4

0800ade0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	3b04      	subs	r3, #4
 800adf0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800adf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	3b04      	subs	r3, #4
 800adfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	f023 0201 	bic.w	r2, r3, #1
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	3b04      	subs	r3, #4
 800ae0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae10:	4a08      	ldr	r2, [pc, #32]	; (800ae34 <pxPortInitialiseStack+0x54>)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	3b14      	subs	r3, #20
 800ae1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3b20      	subs	r3, #32
 800ae26:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ae28:	68fb      	ldr	r3, [r7, #12]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3714      	adds	r7, #20
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bc80      	pop	{r7}
 800ae32:	4770      	bx	lr
 800ae34:	0800ae39 	.word	0x0800ae39

0800ae38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ae42:	4b12      	ldr	r3, [pc, #72]	; (800ae8c <prvTaskExitError+0x54>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae4a:	d00a      	beq.n	800ae62 <prvTaskExitError+0x2a>
	__asm volatile
 800ae4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae50:	f383 8811 	msr	BASEPRI, r3
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	60fb      	str	r3, [r7, #12]
}
 800ae5e:	bf00      	nop
 800ae60:	e7fe      	b.n	800ae60 <prvTaskExitError+0x28>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae66:	f383 8811 	msr	BASEPRI, r3
 800ae6a:	f3bf 8f6f 	isb	sy
 800ae6e:	f3bf 8f4f 	dsb	sy
 800ae72:	60bb      	str	r3, [r7, #8]
}
 800ae74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ae76:	bf00      	nop
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d0fc      	beq.n	800ae78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ae7e:	bf00      	nop
 800ae80:	bf00      	nop
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bc80      	pop	{r7}
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	20000124 	.word	0x20000124

0800ae90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ae90:	4b07      	ldr	r3, [pc, #28]	; (800aeb0 <pxCurrentTCBConst2>)
 800ae92:	6819      	ldr	r1, [r3, #0]
 800ae94:	6808      	ldr	r0, [r1, #0]
 800ae96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ae9a:	f380 8809 	msr	PSP, r0
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f04f 0000 	mov.w	r0, #0
 800aea6:	f380 8811 	msr	BASEPRI, r0
 800aeaa:	f04e 0e0d 	orr.w	lr, lr, #13
 800aeae:	4770      	bx	lr

0800aeb0 <pxCurrentTCBConst2>:
 800aeb0:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aeb4:	bf00      	nop
 800aeb6:	bf00      	nop

0800aeb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800aeb8:	4806      	ldr	r0, [pc, #24]	; (800aed4 <prvPortStartFirstTask+0x1c>)
 800aeba:	6800      	ldr	r0, [r0, #0]
 800aebc:	6800      	ldr	r0, [r0, #0]
 800aebe:	f380 8808 	msr	MSP, r0
 800aec2:	b662      	cpsie	i
 800aec4:	b661      	cpsie	f
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	df00      	svc	0
 800aed0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aed2:	bf00      	nop
 800aed4:	e000ed08 	.word	0xe000ed08

0800aed8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aede:	4b32      	ldr	r3, [pc, #200]	; (800afa8 <xPortStartScheduler+0xd0>)
 800aee0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	22ff      	movs	r2, #255	; 0xff
 800aeee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aef8:	78fb      	ldrb	r3, [r7, #3]
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800af00:	b2da      	uxtb	r2, r3
 800af02:	4b2a      	ldr	r3, [pc, #168]	; (800afac <xPortStartScheduler+0xd4>)
 800af04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af06:	4b2a      	ldr	r3, [pc, #168]	; (800afb0 <xPortStartScheduler+0xd8>)
 800af08:	2207      	movs	r2, #7
 800af0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af0c:	e009      	b.n	800af22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800af0e:	4b28      	ldr	r3, [pc, #160]	; (800afb0 <xPortStartScheduler+0xd8>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	3b01      	subs	r3, #1
 800af14:	4a26      	ldr	r2, [pc, #152]	; (800afb0 <xPortStartScheduler+0xd8>)
 800af16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800af18:	78fb      	ldrb	r3, [r7, #3]
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	005b      	lsls	r3, r3, #1
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af22:	78fb      	ldrb	r3, [r7, #3]
 800af24:	b2db      	uxtb	r3, r3
 800af26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af2a:	2b80      	cmp	r3, #128	; 0x80
 800af2c:	d0ef      	beq.n	800af0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800af2e:	4b20      	ldr	r3, [pc, #128]	; (800afb0 <xPortStartScheduler+0xd8>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f1c3 0307 	rsb	r3, r3, #7
 800af36:	2b04      	cmp	r3, #4
 800af38:	d00a      	beq.n	800af50 <xPortStartScheduler+0x78>
	__asm volatile
 800af3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	60bb      	str	r3, [r7, #8]
}
 800af4c:	bf00      	nop
 800af4e:	e7fe      	b.n	800af4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800af50:	4b17      	ldr	r3, [pc, #92]	; (800afb0 <xPortStartScheduler+0xd8>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	021b      	lsls	r3, r3, #8
 800af56:	4a16      	ldr	r2, [pc, #88]	; (800afb0 <xPortStartScheduler+0xd8>)
 800af58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800af5a:	4b15      	ldr	r3, [pc, #84]	; (800afb0 <xPortStartScheduler+0xd8>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af62:	4a13      	ldr	r2, [pc, #76]	; (800afb0 <xPortStartScheduler+0xd8>)
 800af64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	b2da      	uxtb	r2, r3
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800af6e:	4b11      	ldr	r3, [pc, #68]	; (800afb4 <xPortStartScheduler+0xdc>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a10      	ldr	r2, [pc, #64]	; (800afb4 <xPortStartScheduler+0xdc>)
 800af74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800af7a:	4b0e      	ldr	r3, [pc, #56]	; (800afb4 <xPortStartScheduler+0xdc>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a0d      	ldr	r2, [pc, #52]	; (800afb4 <xPortStartScheduler+0xdc>)
 800af80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800af84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800af86:	f000 f8b9 	bl	800b0fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af8a:	4b0b      	ldr	r3, [pc, #44]	; (800afb8 <xPortStartScheduler+0xe0>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af90:	f7ff ff92 	bl	800aeb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800af94:	f7ff f88c 	bl	800a0b0 <vTaskSwitchContext>
	prvTaskExitError();
 800af98:	f7ff ff4e 	bl	800ae38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af9c:	2300      	movs	r3, #0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	e000e400 	.word	0xe000e400
 800afac:	20000efc 	.word	0x20000efc
 800afb0:	20000f00 	.word	0x20000f00
 800afb4:	e000ed20 	.word	0xe000ed20
 800afb8:	20000124 	.word	0x20000124

0800afbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
	__asm volatile
 800afc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	607b      	str	r3, [r7, #4]
}
 800afd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800afd6:	4b0f      	ldr	r3, [pc, #60]	; (800b014 <vPortEnterCritical+0x58>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3301      	adds	r3, #1
 800afdc:	4a0d      	ldr	r2, [pc, #52]	; (800b014 <vPortEnterCritical+0x58>)
 800afde:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800afe0:	4b0c      	ldr	r3, [pc, #48]	; (800b014 <vPortEnterCritical+0x58>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d10f      	bne.n	800b008 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800afe8:	4b0b      	ldr	r3, [pc, #44]	; (800b018 <vPortEnterCritical+0x5c>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	b2db      	uxtb	r3, r3
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00a      	beq.n	800b008 <vPortEnterCritical+0x4c>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	603b      	str	r3, [r7, #0]
}
 800b004:	bf00      	nop
 800b006:	e7fe      	b.n	800b006 <vPortEnterCritical+0x4a>
	}
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bc80      	pop	{r7}
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	20000124 	.word	0x20000124
 800b018:	e000ed04 	.word	0xe000ed04

0800b01c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b022:	4b11      	ldr	r3, [pc, #68]	; (800b068 <vPortExitCritical+0x4c>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10a      	bne.n	800b040 <vPortExitCritical+0x24>
	__asm volatile
 800b02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02e:	f383 8811 	msr	BASEPRI, r3
 800b032:	f3bf 8f6f 	isb	sy
 800b036:	f3bf 8f4f 	dsb	sy
 800b03a:	607b      	str	r3, [r7, #4]
}
 800b03c:	bf00      	nop
 800b03e:	e7fe      	b.n	800b03e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b040:	4b09      	ldr	r3, [pc, #36]	; (800b068 <vPortExitCritical+0x4c>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	3b01      	subs	r3, #1
 800b046:	4a08      	ldr	r2, [pc, #32]	; (800b068 <vPortExitCritical+0x4c>)
 800b048:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b04a:	4b07      	ldr	r3, [pc, #28]	; (800b068 <vPortExitCritical+0x4c>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d105      	bne.n	800b05e <vPortExitCritical+0x42>
 800b052:	2300      	movs	r3, #0
 800b054:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	f383 8811 	msr	BASEPRI, r3
}
 800b05c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b05e:	bf00      	nop
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	bc80      	pop	{r7}
 800b066:	4770      	bx	lr
 800b068:	20000124 	.word	0x20000124
 800b06c:	00000000 	.word	0x00000000

0800b070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b070:	f3ef 8009 	mrs	r0, PSP
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	4b0d      	ldr	r3, [pc, #52]	; (800b0b0 <pxCurrentTCBConst>)
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b080:	6010      	str	r0, [r2, #0]
 800b082:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b086:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b08a:	f380 8811 	msr	BASEPRI, r0
 800b08e:	f7ff f80f 	bl	800a0b0 <vTaskSwitchContext>
 800b092:	f04f 0000 	mov.w	r0, #0
 800b096:	f380 8811 	msr	BASEPRI, r0
 800b09a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b09e:	6819      	ldr	r1, [r3, #0]
 800b0a0:	6808      	ldr	r0, [r1, #0]
 800b0a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b0a6:	f380 8809 	msr	PSP, r0
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	4770      	bx	lr

0800b0b0 <pxCurrentTCBConst>:
 800b0b0:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b0b4:	bf00      	nop
 800b0b6:	bf00      	nop

0800b0b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	607b      	str	r3, [r7, #4]
}
 800b0d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b0d2:	f7fe ff2f 	bl	8009f34 <xTaskIncrementTick>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d003      	beq.n	800b0e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b0dc:	4b06      	ldr	r3, [pc, #24]	; (800b0f8 <SysTick_Handler+0x40>)
 800b0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	f383 8811 	msr	BASEPRI, r3
}
 800b0ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b0f0:	bf00      	nop
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	e000ed04 	.word	0xe000ed04

0800b0fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b100:	4b0a      	ldr	r3, [pc, #40]	; (800b12c <vPortSetupTimerInterrupt+0x30>)
 800b102:	2200      	movs	r2, #0
 800b104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b106:	4b0a      	ldr	r3, [pc, #40]	; (800b130 <vPortSetupTimerInterrupt+0x34>)
 800b108:	2200      	movs	r2, #0
 800b10a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b10c:	4b09      	ldr	r3, [pc, #36]	; (800b134 <vPortSetupTimerInterrupt+0x38>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a09      	ldr	r2, [pc, #36]	; (800b138 <vPortSetupTimerInterrupt+0x3c>)
 800b112:	fba2 2303 	umull	r2, r3, r2, r3
 800b116:	099b      	lsrs	r3, r3, #6
 800b118:	4a08      	ldr	r2, [pc, #32]	; (800b13c <vPortSetupTimerInterrupt+0x40>)
 800b11a:	3b01      	subs	r3, #1
 800b11c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b11e:	4b03      	ldr	r3, [pc, #12]	; (800b12c <vPortSetupTimerInterrupt+0x30>)
 800b120:	2207      	movs	r2, #7
 800b122:	601a      	str	r2, [r3, #0]
}
 800b124:	bf00      	nop
 800b126:	46bd      	mov	sp, r7
 800b128:	bc80      	pop	{r7}
 800b12a:	4770      	bx	lr
 800b12c:	e000e010 	.word	0xe000e010
 800b130:	e000e018 	.word	0xe000e018
 800b134:	20000008 	.word	0x20000008
 800b138:	10624dd3 	.word	0x10624dd3
 800b13c:	e000e014 	.word	0xe000e014

0800b140 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b146:	f3ef 8305 	mrs	r3, IPSR
 800b14a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2b0f      	cmp	r3, #15
 800b150:	d914      	bls.n	800b17c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b152:	4a16      	ldr	r2, [pc, #88]	; (800b1ac <vPortValidateInterruptPriority+0x6c>)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	4413      	add	r3, r2
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b15c:	4b14      	ldr	r3, [pc, #80]	; (800b1b0 <vPortValidateInterruptPriority+0x70>)
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	7afa      	ldrb	r2, [r7, #11]
 800b162:	429a      	cmp	r2, r3
 800b164:	d20a      	bcs.n	800b17c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	607b      	str	r3, [r7, #4]
}
 800b178:	bf00      	nop
 800b17a:	e7fe      	b.n	800b17a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b17c:	4b0d      	ldr	r3, [pc, #52]	; (800b1b4 <vPortValidateInterruptPriority+0x74>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b184:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <vPortValidateInterruptPriority+0x78>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d90a      	bls.n	800b1a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b190:	f383 8811 	msr	BASEPRI, r3
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	603b      	str	r3, [r7, #0]
}
 800b19e:	bf00      	nop
 800b1a0:	e7fe      	b.n	800b1a0 <vPortValidateInterruptPriority+0x60>
	}
 800b1a2:	bf00      	nop
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bc80      	pop	{r7}
 800b1aa:	4770      	bx	lr
 800b1ac:	e000e3f0 	.word	0xe000e3f0
 800b1b0:	20000efc 	.word	0x20000efc
 800b1b4:	e000ed0c 	.word	0xe000ed0c
 800b1b8:	20000f00 	.word	0x20000f00

0800b1bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b08a      	sub	sp, #40	; 0x28
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b1c8:	f7fe fdfa 	bl	8009dc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b1cc:	4b58      	ldr	r3, [pc, #352]	; (800b330 <pvPortMalloc+0x174>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b1d4:	f000 f910 	bl	800b3f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b1d8:	4b56      	ldr	r3, [pc, #344]	; (800b334 <pvPortMalloc+0x178>)
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4013      	ands	r3, r2
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f040 808e 	bne.w	800b302 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d01d      	beq.n	800b228 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b1ec:	2208      	movs	r2, #8
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f003 0307 	and.w	r3, r3, #7
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d014      	beq.n	800b228 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f023 0307 	bic.w	r3, r3, #7
 800b204:	3308      	adds	r3, #8
 800b206:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f003 0307 	and.w	r3, r3, #7
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00a      	beq.n	800b228 <pvPortMalloc+0x6c>
	__asm volatile
 800b212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b216:	f383 8811 	msr	BASEPRI, r3
 800b21a:	f3bf 8f6f 	isb	sy
 800b21e:	f3bf 8f4f 	dsb	sy
 800b222:	617b      	str	r3, [r7, #20]
}
 800b224:	bf00      	nop
 800b226:	e7fe      	b.n	800b226 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d069      	beq.n	800b302 <pvPortMalloc+0x146>
 800b22e:	4b42      	ldr	r3, [pc, #264]	; (800b338 <pvPortMalloc+0x17c>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	429a      	cmp	r2, r3
 800b236:	d864      	bhi.n	800b302 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b238:	4b40      	ldr	r3, [pc, #256]	; (800b33c <pvPortMalloc+0x180>)
 800b23a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b23c:	4b3f      	ldr	r3, [pc, #252]	; (800b33c <pvPortMalloc+0x180>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b242:	e004      	b.n	800b24e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b246:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	429a      	cmp	r2, r3
 800b256:	d903      	bls.n	800b260 <pvPortMalloc+0xa4>
 800b258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d1f1      	bne.n	800b244 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b260:	4b33      	ldr	r3, [pc, #204]	; (800b330 <pvPortMalloc+0x174>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b266:	429a      	cmp	r2, r3
 800b268:	d04b      	beq.n	800b302 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b26a:	6a3b      	ldr	r3, [r7, #32]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2208      	movs	r2, #8
 800b270:	4413      	add	r3, r2
 800b272:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	6a3b      	ldr	r3, [r7, #32]
 800b27a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27e:	685a      	ldr	r2, [r3, #4]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	1ad2      	subs	r2, r2, r3
 800b284:	2308      	movs	r3, #8
 800b286:	005b      	lsls	r3, r3, #1
 800b288:	429a      	cmp	r2, r3
 800b28a:	d91f      	bls.n	800b2cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b28c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4413      	add	r3, r2
 800b292:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	f003 0307 	and.w	r3, r3, #7
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d00a      	beq.n	800b2b4 <pvPortMalloc+0xf8>
	__asm volatile
 800b29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	613b      	str	r3, [r7, #16]
}
 800b2b0:	bf00      	nop
 800b2b2:	e7fe      	b.n	800b2b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b6:	685a      	ldr	r2, [r3, #4]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	1ad2      	subs	r2, r2, r3
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b2c6:	69b8      	ldr	r0, [r7, #24]
 800b2c8:	f000 f8f8 	bl	800b4bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2cc:	4b1a      	ldr	r3, [pc, #104]	; (800b338 <pvPortMalloc+0x17c>)
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	4a18      	ldr	r2, [pc, #96]	; (800b338 <pvPortMalloc+0x17c>)
 800b2d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b2da:	4b17      	ldr	r3, [pc, #92]	; (800b338 <pvPortMalloc+0x17c>)
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	4b18      	ldr	r3, [pc, #96]	; (800b340 <pvPortMalloc+0x184>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d203      	bcs.n	800b2ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b2e6:	4b14      	ldr	r3, [pc, #80]	; (800b338 <pvPortMalloc+0x17c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a15      	ldr	r2, [pc, #84]	; (800b340 <pvPortMalloc+0x184>)
 800b2ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f0:	685a      	ldr	r2, [r3, #4]
 800b2f2:	4b10      	ldr	r3, [pc, #64]	; (800b334 <pvPortMalloc+0x178>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	431a      	orrs	r2, r3
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	2200      	movs	r2, #0
 800b300:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b302:	f7fe fd6b 	bl	8009ddc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	f003 0307 	and.w	r3, r3, #7
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d00a      	beq.n	800b326 <pvPortMalloc+0x16a>
	__asm volatile
 800b310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	60fb      	str	r3, [r7, #12]
}
 800b322:	bf00      	nop
 800b324:	e7fe      	b.n	800b324 <pvPortMalloc+0x168>
	return pvReturn;
 800b326:	69fb      	ldr	r3, [r7, #28]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3728      	adds	r7, #40	; 0x28
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	20001b0c 	.word	0x20001b0c
 800b334:	20001b18 	.word	0x20001b18
 800b338:	20001b10 	.word	0x20001b10
 800b33c:	20001b04 	.word	0x20001b04
 800b340:	20001b14 	.word	0x20001b14

0800b344 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d048      	beq.n	800b3e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b356:	2308      	movs	r3, #8
 800b358:	425b      	negs	r3, r3
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	4413      	add	r3, r2
 800b35e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	685a      	ldr	r2, [r3, #4]
 800b368:	4b21      	ldr	r3, [pc, #132]	; (800b3f0 <vPortFree+0xac>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4013      	ands	r3, r2
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d10a      	bne.n	800b388 <vPortFree+0x44>
	__asm volatile
 800b372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b376:	f383 8811 	msr	BASEPRI, r3
 800b37a:	f3bf 8f6f 	isb	sy
 800b37e:	f3bf 8f4f 	dsb	sy
 800b382:	60fb      	str	r3, [r7, #12]
}
 800b384:	bf00      	nop
 800b386:	e7fe      	b.n	800b386 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00a      	beq.n	800b3a6 <vPortFree+0x62>
	__asm volatile
 800b390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b394:	f383 8811 	msr	BASEPRI, r3
 800b398:	f3bf 8f6f 	isb	sy
 800b39c:	f3bf 8f4f 	dsb	sy
 800b3a0:	60bb      	str	r3, [r7, #8]
}
 800b3a2:	bf00      	nop
 800b3a4:	e7fe      	b.n	800b3a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	4b11      	ldr	r3, [pc, #68]	; (800b3f0 <vPortFree+0xac>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4013      	ands	r3, r2
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d019      	beq.n	800b3e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d115      	bne.n	800b3e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	685a      	ldr	r2, [r3, #4]
 800b3c0:	4b0b      	ldr	r3, [pc, #44]	; (800b3f0 <vPortFree+0xac>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	43db      	mvns	r3, r3
 800b3c6:	401a      	ands	r2, r3
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b3cc:	f7fe fcf8 	bl	8009dc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	685a      	ldr	r2, [r3, #4]
 800b3d4:	4b07      	ldr	r3, [pc, #28]	; (800b3f4 <vPortFree+0xb0>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4413      	add	r3, r2
 800b3da:	4a06      	ldr	r2, [pc, #24]	; (800b3f4 <vPortFree+0xb0>)
 800b3dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b3de:	6938      	ldr	r0, [r7, #16]
 800b3e0:	f000 f86c 	bl	800b4bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b3e4:	f7fe fcfa 	bl	8009ddc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b3e8:	bf00      	nop
 800b3ea:	3718      	adds	r7, #24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	20001b18 	.word	0x20001b18
 800b3f4:	20001b10 	.word	0x20001b10

0800b3f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b3fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b402:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b404:	4b27      	ldr	r3, [pc, #156]	; (800b4a4 <prvHeapInit+0xac>)
 800b406:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f003 0307 	and.w	r3, r3, #7
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00c      	beq.n	800b42c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	3307      	adds	r3, #7
 800b416:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f023 0307 	bic.w	r3, r3, #7
 800b41e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	1ad3      	subs	r3, r2, r3
 800b426:	4a1f      	ldr	r2, [pc, #124]	; (800b4a4 <prvHeapInit+0xac>)
 800b428:	4413      	add	r3, r2
 800b42a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b430:	4a1d      	ldr	r2, [pc, #116]	; (800b4a8 <prvHeapInit+0xb0>)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b436:	4b1c      	ldr	r3, [pc, #112]	; (800b4a8 <prvHeapInit+0xb0>)
 800b438:	2200      	movs	r2, #0
 800b43a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	68ba      	ldr	r2, [r7, #8]
 800b440:	4413      	add	r3, r2
 800b442:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b444:	2208      	movs	r2, #8
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	1a9b      	subs	r3, r3, r2
 800b44a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f023 0307 	bic.w	r3, r3, #7
 800b452:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	4a15      	ldr	r2, [pc, #84]	; (800b4ac <prvHeapInit+0xb4>)
 800b458:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b45a:	4b14      	ldr	r3, [pc, #80]	; (800b4ac <prvHeapInit+0xb4>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2200      	movs	r2, #0
 800b460:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b462:	4b12      	ldr	r3, [pc, #72]	; (800b4ac <prvHeapInit+0xb4>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2200      	movs	r2, #0
 800b468:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	1ad2      	subs	r2, r2, r3
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b478:	4b0c      	ldr	r3, [pc, #48]	; (800b4ac <prvHeapInit+0xb4>)
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	4a0a      	ldr	r2, [pc, #40]	; (800b4b0 <prvHeapInit+0xb8>)
 800b486:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	4a09      	ldr	r2, [pc, #36]	; (800b4b4 <prvHeapInit+0xbc>)
 800b48e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b490:	4b09      	ldr	r3, [pc, #36]	; (800b4b8 <prvHeapInit+0xc0>)
 800b492:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b496:	601a      	str	r2, [r3, #0]
}
 800b498:	bf00      	nop
 800b49a:	3714      	adds	r7, #20
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bc80      	pop	{r7}
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	20000f04 	.word	0x20000f04
 800b4a8:	20001b04 	.word	0x20001b04
 800b4ac:	20001b0c 	.word	0x20001b0c
 800b4b0:	20001b14 	.word	0x20001b14
 800b4b4:	20001b10 	.word	0x20001b10
 800b4b8:	20001b18 	.word	0x20001b18

0800b4bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b4c4:	4b27      	ldr	r3, [pc, #156]	; (800b564 <prvInsertBlockIntoFreeList+0xa8>)
 800b4c6:	60fb      	str	r3, [r7, #12]
 800b4c8:	e002      	b.n	800b4d0 <prvInsertBlockIntoFreeList+0x14>
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	60fb      	str	r3, [r7, #12]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d8f7      	bhi.n	800b4ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d108      	bne.n	800b4fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	685a      	ldr	r2, [r3, #4]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	441a      	add	r2, r3
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	68ba      	ldr	r2, [r7, #8]
 800b508:	441a      	add	r2, r3
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d118      	bne.n	800b544 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	4b14      	ldr	r3, [pc, #80]	; (800b568 <prvInsertBlockIntoFreeList+0xac>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d00d      	beq.n	800b53a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685a      	ldr	r2, [r3, #4]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	441a      	add	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	601a      	str	r2, [r3, #0]
 800b538:	e008      	b.n	800b54c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b53a:	4b0b      	ldr	r3, [pc, #44]	; (800b568 <prvInsertBlockIntoFreeList+0xac>)
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	601a      	str	r2, [r3, #0]
 800b542:	e003      	b.n	800b54c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	429a      	cmp	r2, r3
 800b552:	d002      	beq.n	800b55a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b55a:	bf00      	nop
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	bc80      	pop	{r7}
 800b562:	4770      	bx	lr
 800b564:	20001b04 	.word	0x20001b04
 800b568:	20001b0c 	.word	0x20001b0c

0800b56c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b570:	2200      	movs	r2, #0
 800b572:	4912      	ldr	r1, [pc, #72]	; (800b5bc <MX_USB_DEVICE_Init+0x50>)
 800b574:	4812      	ldr	r0, [pc, #72]	; (800b5c0 <MX_USB_DEVICE_Init+0x54>)
 800b576:	f7fc f89e 	bl	80076b6 <USBD_Init>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d001      	beq.n	800b584 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b580:	f7f4 ff68 	bl	8000454 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b584:	490f      	ldr	r1, [pc, #60]	; (800b5c4 <MX_USB_DEVICE_Init+0x58>)
 800b586:	480e      	ldr	r0, [pc, #56]	; (800b5c0 <MX_USB_DEVICE_Init+0x54>)
 800b588:	f7fc f8c0 	bl	800770c <USBD_RegisterClass>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d001      	beq.n	800b596 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b592:	f7f4 ff5f 	bl	8000454 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b596:	490c      	ldr	r1, [pc, #48]	; (800b5c8 <MX_USB_DEVICE_Init+0x5c>)
 800b598:	4809      	ldr	r0, [pc, #36]	; (800b5c0 <MX_USB_DEVICE_Init+0x54>)
 800b59a:	f7fb fff1 	bl	8007580 <USBD_CDC_RegisterInterface>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d001      	beq.n	800b5a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b5a4:	f7f4 ff56 	bl	8000454 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b5a8:	4805      	ldr	r0, [pc, #20]	; (800b5c0 <MX_USB_DEVICE_Init+0x54>)
 800b5aa:	f7fc f8c8 	bl	800773e <USBD_Start>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d001      	beq.n	800b5b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b5b4:	f7f4 ff4e 	bl	8000454 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b5b8:	bf00      	nop
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	20000138 	.word	0x20000138
 800b5c0:	20001ee4 	.word	0x20001ee4
 800b5c4:	20000020 	.word	0x20000020
 800b5c8:	20000128 	.word	0x20000128

0800b5cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	4905      	ldr	r1, [pc, #20]	; (800b5e8 <CDC_Init_FS+0x1c>)
 800b5d4:	4805      	ldr	r0, [pc, #20]	; (800b5ec <CDC_Init_FS+0x20>)
 800b5d6:	f7fb ffe9 	bl	80075ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b5da:	4905      	ldr	r1, [pc, #20]	; (800b5f0 <CDC_Init_FS+0x24>)
 800b5dc:	4803      	ldr	r0, [pc, #12]	; (800b5ec <CDC_Init_FS+0x20>)
 800b5de:	f7fb fffe 	bl	80075de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b5e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	20002590 	.word	0x20002590
 800b5ec:	20001ee4 	.word	0x20001ee4
 800b5f0:	200021a8 	.word	0x200021a8

0800b5f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b5f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bc80      	pop	{r7}
 800b600:	4770      	bx	lr
	...

0800b604 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	4603      	mov	r3, r0
 800b60c:	6039      	str	r1, [r7, #0]
 800b60e:	71fb      	strb	r3, [r7, #7]
 800b610:	4613      	mov	r3, r2
 800b612:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b614:	79fb      	ldrb	r3, [r7, #7]
 800b616:	2b23      	cmp	r3, #35	; 0x23
 800b618:	d84a      	bhi.n	800b6b0 <CDC_Control_FS+0xac>
 800b61a:	a201      	add	r2, pc, #4	; (adr r2, 800b620 <CDC_Control_FS+0x1c>)
 800b61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b620:	0800b6b1 	.word	0x0800b6b1
 800b624:	0800b6b1 	.word	0x0800b6b1
 800b628:	0800b6b1 	.word	0x0800b6b1
 800b62c:	0800b6b1 	.word	0x0800b6b1
 800b630:	0800b6b1 	.word	0x0800b6b1
 800b634:	0800b6b1 	.word	0x0800b6b1
 800b638:	0800b6b1 	.word	0x0800b6b1
 800b63c:	0800b6b1 	.word	0x0800b6b1
 800b640:	0800b6b1 	.word	0x0800b6b1
 800b644:	0800b6b1 	.word	0x0800b6b1
 800b648:	0800b6b1 	.word	0x0800b6b1
 800b64c:	0800b6b1 	.word	0x0800b6b1
 800b650:	0800b6b1 	.word	0x0800b6b1
 800b654:	0800b6b1 	.word	0x0800b6b1
 800b658:	0800b6b1 	.word	0x0800b6b1
 800b65c:	0800b6b1 	.word	0x0800b6b1
 800b660:	0800b6b1 	.word	0x0800b6b1
 800b664:	0800b6b1 	.word	0x0800b6b1
 800b668:	0800b6b1 	.word	0x0800b6b1
 800b66c:	0800b6b1 	.word	0x0800b6b1
 800b670:	0800b6b1 	.word	0x0800b6b1
 800b674:	0800b6b1 	.word	0x0800b6b1
 800b678:	0800b6b1 	.word	0x0800b6b1
 800b67c:	0800b6b1 	.word	0x0800b6b1
 800b680:	0800b6b1 	.word	0x0800b6b1
 800b684:	0800b6b1 	.word	0x0800b6b1
 800b688:	0800b6b1 	.word	0x0800b6b1
 800b68c:	0800b6b1 	.word	0x0800b6b1
 800b690:	0800b6b1 	.word	0x0800b6b1
 800b694:	0800b6b1 	.word	0x0800b6b1
 800b698:	0800b6b1 	.word	0x0800b6b1
 800b69c:	0800b6b1 	.word	0x0800b6b1
 800b6a0:	0800b6b1 	.word	0x0800b6b1
 800b6a4:	0800b6b1 	.word	0x0800b6b1
 800b6a8:	0800b6b1 	.word	0x0800b6b1
 800b6ac:	0800b6b1 	.word	0x0800b6b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b6b0:	bf00      	nop
  }

  return (USBD_OK);
 800b6b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bc80      	pop	{r7}
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop

0800b6c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	e00c      	b.n	800b6ee <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800b6d4:	4b0e      	ldr	r3, [pc, #56]	; (800b710 <CDC_Receive_FS+0x50>)
 800b6d6:	6818      	ldr	r0, [r3, #0]
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	18d1      	adds	r1, r2, r3
 800b6de:	f107 0208 	add.w	r2, r7, #8
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	f7fd fd66 	bl	80091b4 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	60fb      	str	r3, [r7, #12]
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	68fa      	ldr	r2, [r7, #12]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d3ed      	bcc.n	800b6d4 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b6f8:	6879      	ldr	r1, [r7, #4]
 800b6fa:	4806      	ldr	r0, [pc, #24]	; (800b714 <CDC_Receive_FS+0x54>)
 800b6fc:	f7fb ff6f 	bl	80075de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b700:	4804      	ldr	r0, [pc, #16]	; (800b714 <CDC_Receive_FS+0x54>)
 800b702:	f7fb ffae 	bl	8007662 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b706:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3710      	adds	r7, #16
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	20001d54 	.word	0x20001d54
 800b714:	20001ee4 	.word	0x20001ee4

0800b718 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	460b      	mov	r3, r1
 800b722:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b724:	2300      	movs	r3, #0
 800b726:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b728:	4b0d      	ldr	r3, [pc, #52]	; (800b760 <CDC_Transmit_FS+0x48>)
 800b72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b72e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b73a:	2301      	movs	r3, #1
 800b73c:	e00b      	b.n	800b756 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b73e:	887b      	ldrh	r3, [r7, #2]
 800b740:	461a      	mov	r2, r3
 800b742:	6879      	ldr	r1, [r7, #4]
 800b744:	4806      	ldr	r0, [pc, #24]	; (800b760 <CDC_Transmit_FS+0x48>)
 800b746:	f7fb ff31 	bl	80075ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b74a:	4805      	ldr	r0, [pc, #20]	; (800b760 <CDC_Transmit_FS+0x48>)
 800b74c:	f7fb ff5a 	bl	8007604 <USBD_CDC_TransmitPacket>
 800b750:	4603      	mov	r3, r0
 800b752:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b754:	7bfb      	ldrb	r3, [r7, #15]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	20001ee4 	.word	0x20001ee4

0800b764 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	4603      	mov	r3, r0
 800b76c:	6039      	str	r1, [r7, #0]
 800b76e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	2212      	movs	r2, #18
 800b774:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b776:	4b03      	ldr	r3, [pc, #12]	; (800b784 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b778:	4618      	mov	r0, r3
 800b77a:	370c      	adds	r7, #12
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bc80      	pop	{r7}
 800b780:	4770      	bx	lr
 800b782:	bf00      	nop
 800b784:	20000154 	.word	0x20000154

0800b788 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	4603      	mov	r3, r0
 800b790:	6039      	str	r1, [r7, #0]
 800b792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	2204      	movs	r2, #4
 800b798:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b79a:	4b03      	ldr	r3, [pc, #12]	; (800b7a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bc80      	pop	{r7}
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	20000168 	.word	0x20000168

0800b7ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	6039      	str	r1, [r7, #0]
 800b7b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7b8:	79fb      	ldrb	r3, [r7, #7]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d105      	bne.n	800b7ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b7be:	683a      	ldr	r2, [r7, #0]
 800b7c0:	4907      	ldr	r1, [pc, #28]	; (800b7e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b7c2:	4808      	ldr	r0, [pc, #32]	; (800b7e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b7c4:	f7fc ff34 	bl	8008630 <USBD_GetString>
 800b7c8:	e004      	b.n	800b7d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	4904      	ldr	r1, [pc, #16]	; (800b7e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b7ce:	4805      	ldr	r0, [pc, #20]	; (800b7e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b7d0:	f7fc ff2e 	bl	8008630 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7d4:	4b02      	ldr	r3, [pc, #8]	; (800b7e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3708      	adds	r7, #8
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	20002978 	.word	0x20002978
 800b7e4:	0800c9cc 	.word	0x0800c9cc

0800b7e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	6039      	str	r1, [r7, #0]
 800b7f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b7f4:	683a      	ldr	r2, [r7, #0]
 800b7f6:	4904      	ldr	r1, [pc, #16]	; (800b808 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b7f8:	4804      	ldr	r0, [pc, #16]	; (800b80c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b7fa:	f7fc ff19 	bl	8008630 <USBD_GetString>
  return USBD_StrDesc;
 800b7fe:	4b02      	ldr	r3, [pc, #8]	; (800b808 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b800:	4618      	mov	r0, r3
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	20002978 	.word	0x20002978
 800b80c:	0800c9d8 	.word	0x0800c9d8

0800b810 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	4603      	mov	r3, r0
 800b818:	6039      	str	r1, [r7, #0]
 800b81a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	221a      	movs	r2, #26
 800b820:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b822:	f000 f843 	bl	800b8ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b826:	4b02      	ldr	r3, [pc, #8]	; (800b830 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	2000016c 	.word	0x2000016c

0800b834 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	4603      	mov	r3, r0
 800b83c:	6039      	str	r1, [r7, #0]
 800b83e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b840:	79fb      	ldrb	r3, [r7, #7]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d105      	bne.n	800b852 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	4907      	ldr	r1, [pc, #28]	; (800b868 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b84a:	4808      	ldr	r0, [pc, #32]	; (800b86c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b84c:	f7fc fef0 	bl	8008630 <USBD_GetString>
 800b850:	e004      	b.n	800b85c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	4904      	ldr	r1, [pc, #16]	; (800b868 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b856:	4805      	ldr	r0, [pc, #20]	; (800b86c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b858:	f7fc feea 	bl	8008630 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b85c:	4b02      	ldr	r3, [pc, #8]	; (800b868 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20002978 	.word	0x20002978
 800b86c:	0800c9ec 	.word	0x0800c9ec

0800b870 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	4603      	mov	r3, r0
 800b878:	6039      	str	r1, [r7, #0]
 800b87a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b87c:	79fb      	ldrb	r3, [r7, #7]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d105      	bne.n	800b88e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b882:	683a      	ldr	r2, [r7, #0]
 800b884:	4907      	ldr	r1, [pc, #28]	; (800b8a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b886:	4808      	ldr	r0, [pc, #32]	; (800b8a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b888:	f7fc fed2 	bl	8008630 <USBD_GetString>
 800b88c:	e004      	b.n	800b898 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b88e:	683a      	ldr	r2, [r7, #0]
 800b890:	4904      	ldr	r1, [pc, #16]	; (800b8a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b892:	4805      	ldr	r0, [pc, #20]	; (800b8a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b894:	f7fc fecc 	bl	8008630 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b898:	4b02      	ldr	r3, [pc, #8]	; (800b8a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20002978 	.word	0x20002978
 800b8a8:	0800c9f8 	.word	0x0800c9f8

0800b8ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b8b2:	4b0f      	ldr	r3, [pc, #60]	; (800b8f0 <Get_SerialNum+0x44>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b8b8:	4b0e      	ldr	r3, [pc, #56]	; (800b8f4 <Get_SerialNum+0x48>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b8be:	4b0e      	ldr	r3, [pc, #56]	; (800b8f8 <Get_SerialNum+0x4c>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d009      	beq.n	800b8e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b8d2:	2208      	movs	r2, #8
 800b8d4:	4909      	ldr	r1, [pc, #36]	; (800b8fc <Get_SerialNum+0x50>)
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f000 f814 	bl	800b904 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b8dc:	2204      	movs	r2, #4
 800b8de:	4908      	ldr	r1, [pc, #32]	; (800b900 <Get_SerialNum+0x54>)
 800b8e0:	68b8      	ldr	r0, [r7, #8]
 800b8e2:	f000 f80f 	bl	800b904 <IntToUnicode>
  }
}
 800b8e6:	bf00      	nop
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	1ffff7e8 	.word	0x1ffff7e8
 800b8f4:	1ffff7ec 	.word	0x1ffff7ec
 800b8f8:	1ffff7f0 	.word	0x1ffff7f0
 800b8fc:	2000016e 	.word	0x2000016e
 800b900:	2000017e 	.word	0x2000017e

0800b904 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b904:	b480      	push	{r7}
 800b906:	b087      	sub	sp, #28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	4613      	mov	r3, r2
 800b910:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b912:	2300      	movs	r3, #0
 800b914:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b916:	2300      	movs	r3, #0
 800b918:	75fb      	strb	r3, [r7, #23]
 800b91a:	e027      	b.n	800b96c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	0f1b      	lsrs	r3, r3, #28
 800b920:	2b09      	cmp	r3, #9
 800b922:	d80b      	bhi.n	800b93c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	0f1b      	lsrs	r3, r3, #28
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	7dfb      	ldrb	r3, [r7, #23]
 800b92c:	005b      	lsls	r3, r3, #1
 800b92e:	4619      	mov	r1, r3
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	440b      	add	r3, r1
 800b934:	3230      	adds	r2, #48	; 0x30
 800b936:	b2d2      	uxtb	r2, r2
 800b938:	701a      	strb	r2, [r3, #0]
 800b93a:	e00a      	b.n	800b952 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	0f1b      	lsrs	r3, r3, #28
 800b940:	b2da      	uxtb	r2, r3
 800b942:	7dfb      	ldrb	r3, [r7, #23]
 800b944:	005b      	lsls	r3, r3, #1
 800b946:	4619      	mov	r1, r3
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	440b      	add	r3, r1
 800b94c:	3237      	adds	r2, #55	; 0x37
 800b94e:	b2d2      	uxtb	r2, r2
 800b950:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	011b      	lsls	r3, r3, #4
 800b956:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b958:	7dfb      	ldrb	r3, [r7, #23]
 800b95a:	005b      	lsls	r3, r3, #1
 800b95c:	3301      	adds	r3, #1
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	4413      	add	r3, r2
 800b962:	2200      	movs	r2, #0
 800b964:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b966:	7dfb      	ldrb	r3, [r7, #23]
 800b968:	3301      	adds	r3, #1
 800b96a:	75fb      	strb	r3, [r7, #23]
 800b96c:	7dfa      	ldrb	r2, [r7, #23]
 800b96e:	79fb      	ldrb	r3, [r7, #7]
 800b970:	429a      	cmp	r2, r3
 800b972:	d3d3      	bcc.n	800b91c <IntToUnicode+0x18>
  }
}
 800b974:	bf00      	nop
 800b976:	bf00      	nop
 800b978:	371c      	adds	r7, #28
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bc80      	pop	{r7}
 800b97e:	4770      	bx	lr

0800b980 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a0d      	ldr	r2, [pc, #52]	; (800b9c4 <HAL_PCD_MspInit+0x44>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d113      	bne.n	800b9ba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b992:	4b0d      	ldr	r3, [pc, #52]	; (800b9c8 <HAL_PCD_MspInit+0x48>)
 800b994:	69db      	ldr	r3, [r3, #28]
 800b996:	4a0c      	ldr	r2, [pc, #48]	; (800b9c8 <HAL_PCD_MspInit+0x48>)
 800b998:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b99c:	61d3      	str	r3, [r2, #28]
 800b99e:	4b0a      	ldr	r3, [pc, #40]	; (800b9c8 <HAL_PCD_MspInit+0x48>)
 800b9a0:	69db      	ldr	r3, [r3, #28]
 800b9a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9a6:	60fb      	str	r3, [r7, #12]
 800b9a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	2105      	movs	r1, #5
 800b9ae:	2014      	movs	r0, #20
 800b9b0:	f7f6 fb45 	bl	800203e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b9b4:	2014      	movs	r0, #20
 800b9b6:	f7f6 fb5e 	bl	8002076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b9ba:	bf00      	nop
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	40005c00 	.word	0x40005c00
 800b9c8:	40021000 	.word	0x40021000

0800b9cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	f7fb fef3 	bl	80077ce <USBD_LL_SetupStage>
}
 800b9e8:	bf00      	nop
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ba02:	78fa      	ldrb	r2, [r7, #3]
 800ba04:	6879      	ldr	r1, [r7, #4]
 800ba06:	4613      	mov	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	4413      	add	r3, r2
 800ba0c:	00db      	lsls	r3, r3, #3
 800ba0e:	440b      	add	r3, r1
 800ba10:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	78fb      	ldrb	r3, [r7, #3]
 800ba18:	4619      	mov	r1, r3
 800ba1a:	f7fb ff25 	bl	8007868 <USBD_LL_DataOutStage>
}
 800ba1e:	bf00      	nop
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b082      	sub	sp, #8
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
 800ba2e:	460b      	mov	r3, r1
 800ba30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ba38:	78fa      	ldrb	r2, [r7, #3]
 800ba3a:	6879      	ldr	r1, [r7, #4]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	4413      	add	r3, r2
 800ba42:	00db      	lsls	r3, r3, #3
 800ba44:	440b      	add	r3, r1
 800ba46:	333c      	adds	r3, #60	; 0x3c
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	78fb      	ldrb	r3, [r7, #3]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	f7fb ff7c 	bl	800794a <USBD_LL_DataInStage>
}
 800ba52:	bf00      	nop
 800ba54:	3708      	adds	r7, #8
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b082      	sub	sp, #8
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7fc f88c 	bl	8007b86 <USBD_LL_SOF>
}
 800ba6e:	bf00      	nop
 800ba70:	3708      	adds	r7, #8
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b084      	sub	sp, #16
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	d001      	beq.n	800ba8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ba8a:	f7f4 fce3 	bl	8000454 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ba94:	7bfa      	ldrb	r2, [r7, #15]
 800ba96:	4611      	mov	r1, r2
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7fc f83c 	bl	8007b16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fb fff5 	bl	8007a94 <USBD_LL_Reset>
}
 800baaa:	bf00      	nop
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
	...

0800bab4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fc f836 	bl	8007b34 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d005      	beq.n	800badc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bad0:	4b04      	ldr	r3, [pc, #16]	; (800bae4 <HAL_PCD_SuspendCallback+0x30>)
 800bad2:	691b      	ldr	r3, [r3, #16]
 800bad4:	4a03      	ldr	r2, [pc, #12]	; (800bae4 <HAL_PCD_SuspendCallback+0x30>)
 800bad6:	f043 0306 	orr.w	r3, r3, #6
 800bada:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800badc:	bf00      	nop
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	e000ed00 	.word	0xe000ed00

0800bae8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fc f830 	bl	8007b5c <USBD_LL_Resume>
}
 800bafc:	bf00      	nop
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bb0c:	4a28      	ldr	r2, [pc, #160]	; (800bbb0 <USBD_LL_Init+0xac>)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4a26      	ldr	r2, [pc, #152]	; (800bbb0 <USBD_LL_Init+0xac>)
 800bb18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bb1c:	4b24      	ldr	r3, [pc, #144]	; (800bbb0 <USBD_LL_Init+0xac>)
 800bb1e:	4a25      	ldr	r2, [pc, #148]	; (800bbb4 <USBD_LL_Init+0xb0>)
 800bb20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bb22:	4b23      	ldr	r3, [pc, #140]	; (800bbb0 <USBD_LL_Init+0xac>)
 800bb24:	2208      	movs	r2, #8
 800bb26:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bb28:	4b21      	ldr	r3, [pc, #132]	; (800bbb0 <USBD_LL_Init+0xac>)
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bb2e:	4b20      	ldr	r3, [pc, #128]	; (800bbb0 <USBD_LL_Init+0xac>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bb34:	4b1e      	ldr	r3, [pc, #120]	; (800bbb0 <USBD_LL_Init+0xac>)
 800bb36:	2200      	movs	r2, #0
 800bb38:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bb3a:	4b1d      	ldr	r3, [pc, #116]	; (800bbb0 <USBD_LL_Init+0xac>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bb40:	481b      	ldr	r0, [pc, #108]	; (800bbb0 <USBD_LL_Init+0xac>)
 800bb42:	f7f6 fc5c 	bl	80023fe <HAL_PCD_Init>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d001      	beq.n	800bb50 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bb4c:	f7f4 fc82 	bl	8000454 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb56:	2318      	movs	r3, #24
 800bb58:	2200      	movs	r2, #0
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	f7f8 f8d2 	bl	8003d04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb66:	2358      	movs	r3, #88	; 0x58
 800bb68:	2200      	movs	r2, #0
 800bb6a:	2180      	movs	r1, #128	; 0x80
 800bb6c:	f7f8 f8ca 	bl	8003d04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb76:	23c0      	movs	r3, #192	; 0xc0
 800bb78:	2200      	movs	r2, #0
 800bb7a:	2181      	movs	r1, #129	; 0x81
 800bb7c:	f7f8 f8c2 	bl	8003d04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb86:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	f7f8 f8b9 	bl	8003d04 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	2182      	movs	r1, #130	; 0x82
 800bba0:	f7f8 f8b0 	bl	8003d04 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20002b78 	.word	0x20002b78
 800bbb4:	40005c00 	.word	0x40005c00

0800bbb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7f6 fd20 	bl	8002614 <HAL_PCD_Start>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f000 f94e 	bl	800be7c <USBD_Get_USB_Status>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b084      	sub	sp, #16
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
 800bbf6:	4608      	mov	r0, r1
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	70fb      	strb	r3, [r7, #3]
 800bc00:	460b      	mov	r3, r1
 800bc02:	70bb      	strb	r3, [r7, #2]
 800bc04:	4613      	mov	r3, r2
 800bc06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc16:	78bb      	ldrb	r3, [r7, #2]
 800bc18:	883a      	ldrh	r2, [r7, #0]
 800bc1a:	78f9      	ldrb	r1, [r7, #3]
 800bc1c:	f7f6 fe9a 	bl	8002954 <HAL_PCD_EP_Open>
 800bc20:	4603      	mov	r3, r0
 800bc22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 f928 	bl	800be7c <USBD_Get_USB_Status>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc30:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b084      	sub	sp, #16
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	460b      	mov	r3, r1
 800bc44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc54:	78fa      	ldrb	r2, [r7, #3]
 800bc56:	4611      	mov	r1, r2
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7f6 fee1 	bl	8002a20 <HAL_PCD_EP_Close>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc62:	7bfb      	ldrb	r3, [r7, #15]
 800bc64:	4618      	mov	r0, r3
 800bc66:	f000 f909 	bl	800be7c <USBD_Get_USB_Status>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	460b      	mov	r3, r1
 800bc82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc92:	78fa      	ldrb	r2, [r7, #3]
 800bc94:	4611      	mov	r1, r2
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7f6 ffa1 	bl	8002bde <HAL_PCD_EP_SetStall>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bca0:	7bfb      	ldrb	r3, [r7, #15]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f000 f8ea 	bl	800be7c <USBD_Get_USB_Status>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b084      	sub	sp, #16
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcd0:	78fa      	ldrb	r2, [r7, #3]
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7f6 ffe2 	bl	8002c9e <HAL_PCD_EP_ClrStall>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcde:	7bfb      	ldrb	r3, [r7, #15]
 800bce0:	4618      	mov	r0, r3
 800bce2:	f000 f8cb 	bl	800be7c <USBD_Get_USB_Status>
 800bce6:	4603      	mov	r3, r0
 800bce8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcea:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bd08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	da0c      	bge.n	800bd2a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd10:	78fb      	ldrb	r3, [r7, #3]
 800bd12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd16:	68f9      	ldr	r1, [r7, #12]
 800bd18:	1c5a      	adds	r2, r3, #1
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	00db      	lsls	r3, r3, #3
 800bd22:	440b      	add	r3, r1
 800bd24:	3302      	adds	r3, #2
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	e00b      	b.n	800bd42 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd2a:	78fb      	ldrb	r3, [r7, #3]
 800bd2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd30:	68f9      	ldr	r1, [r7, #12]
 800bd32:	4613      	mov	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4413      	add	r3, r2
 800bd38:	00db      	lsls	r3, r3, #3
 800bd3a:	440b      	add	r3, r1
 800bd3c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bd40:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3714      	adds	r7, #20
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bc80      	pop	{r7}
 800bd4a:	4770      	bx	lr

0800bd4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd66:	78fa      	ldrb	r2, [r7, #3]
 800bd68:	4611      	mov	r1, r2
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7f6 fdcd 	bl	800290a <HAL_PCD_SetAddress>
 800bd70:	4603      	mov	r3, r0
 800bd72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd74:	7bfb      	ldrb	r3, [r7, #15]
 800bd76:	4618      	mov	r0, r3
 800bd78:	f000 f880 	bl	800be7c <USBD_Get_USB_Status>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd80:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}

0800bd8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b086      	sub	sp, #24
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	60f8      	str	r0, [r7, #12]
 800bd92:	607a      	str	r2, [r7, #4]
 800bd94:	461a      	mov	r2, r3
 800bd96:	460b      	mov	r3, r1
 800bd98:	72fb      	strb	r3, [r7, #11]
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bda2:	2300      	movs	r3, #0
 800bda4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bdac:	893b      	ldrh	r3, [r7, #8]
 800bdae:	7af9      	ldrb	r1, [r7, #11]
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	f7f6 fed1 	bl	8002b58 <HAL_PCD_EP_Transmit>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdba:	7dfb      	ldrb	r3, [r7, #23]
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f000 f85d 	bl	800be7c <USBD_Get_USB_Status>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdc6:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3718      	adds	r7, #24
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	607a      	str	r2, [r7, #4]
 800bdda:	461a      	mov	r2, r3
 800bddc:	460b      	mov	r3, r1
 800bdde:	72fb      	strb	r3, [r7, #11]
 800bde0:	4613      	mov	r3, r2
 800bde2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bde8:	2300      	movs	r3, #0
 800bdea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bdf2:	893b      	ldrh	r3, [r7, #8]
 800bdf4:	7af9      	ldrb	r1, [r7, #11]
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	f7f6 fe5a 	bl	8002ab0 <HAL_PCD_EP_Receive>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be00:	7dfb      	ldrb	r3, [r7, #23]
 800be02:	4618      	mov	r0, r3
 800be04:	f000 f83a 	bl	800be7c <USBD_Get_USB_Status>
 800be08:	4603      	mov	r3, r0
 800be0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be0c:	7dbb      	ldrb	r3, [r7, #22]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be16:	b580      	push	{r7, lr}
 800be18:	b082      	sub	sp, #8
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
 800be1e:	460b      	mov	r3, r1
 800be20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be28:	78fa      	ldrb	r2, [r7, #3]
 800be2a:	4611      	mov	r1, r2
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7f6 fe7c 	bl	8002b2a <HAL_PCD_EP_GetRxCount>
 800be32:	4603      	mov	r3, r0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800be44:	4b02      	ldr	r3, [pc, #8]	; (800be50 <USBD_static_malloc+0x14>)
}
 800be46:	4618      	mov	r0, r3
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bc80      	pop	{r7}
 800be4e:	4770      	bx	lr
 800be50:	20001b1c 	.word	0x20001b1c

0800be54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]

}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	bc80      	pop	{r7}
 800be64:	4770      	bx	lr

0800be66 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be66:	b480      	push	{r7}
 800be68:	b083      	sub	sp, #12
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
 800be6e:	460b      	mov	r3, r1
 800be70:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800be72:	bf00      	nop
 800be74:	370c      	adds	r7, #12
 800be76:	46bd      	mov	sp, r7
 800be78:	bc80      	pop	{r7}
 800be7a:	4770      	bx	lr

0800be7c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	4603      	mov	r3, r0
 800be84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be86:	2300      	movs	r3, #0
 800be88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be8a:	79fb      	ldrb	r3, [r7, #7]
 800be8c:	2b03      	cmp	r3, #3
 800be8e:	d817      	bhi.n	800bec0 <USBD_Get_USB_Status+0x44>
 800be90:	a201      	add	r2, pc, #4	; (adr r2, 800be98 <USBD_Get_USB_Status+0x1c>)
 800be92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be96:	bf00      	nop
 800be98:	0800bea9 	.word	0x0800bea9
 800be9c:	0800beaf 	.word	0x0800beaf
 800bea0:	0800beb5 	.word	0x0800beb5
 800bea4:	0800bebb 	.word	0x0800bebb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bea8:	2300      	movs	r3, #0
 800beaa:	73fb      	strb	r3, [r7, #15]
    break;
 800beac:	e00b      	b.n	800bec6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800beae:	2302      	movs	r3, #2
 800beb0:	73fb      	strb	r3, [r7, #15]
    break;
 800beb2:	e008      	b.n	800bec6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800beb4:	2301      	movs	r3, #1
 800beb6:	73fb      	strb	r3, [r7, #15]
    break;
 800beb8:	e005      	b.n	800bec6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800beba:	2302      	movs	r3, #2
 800bebc:	73fb      	strb	r3, [r7, #15]
    break;
 800bebe:	e002      	b.n	800bec6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bec0:	2302      	movs	r3, #2
 800bec2:	73fb      	strb	r3, [r7, #15]
    break;
 800bec4:	bf00      	nop
  }
  return usb_status;
 800bec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3714      	adds	r7, #20
 800becc:	46bd      	mov	sp, r7
 800bece:	bc80      	pop	{r7}
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop

0800bed4 <__errno>:
 800bed4:	4b01      	ldr	r3, [pc, #4]	; (800bedc <__errno+0x8>)
 800bed6:	6818      	ldr	r0, [r3, #0]
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	20000188 	.word	0x20000188

0800bee0 <__libc_init_array>:
 800bee0:	b570      	push	{r4, r5, r6, lr}
 800bee2:	2600      	movs	r6, #0
 800bee4:	4d0c      	ldr	r5, [pc, #48]	; (800bf18 <__libc_init_array+0x38>)
 800bee6:	4c0d      	ldr	r4, [pc, #52]	; (800bf1c <__libc_init_array+0x3c>)
 800bee8:	1b64      	subs	r4, r4, r5
 800beea:	10a4      	asrs	r4, r4, #2
 800beec:	42a6      	cmp	r6, r4
 800beee:	d109      	bne.n	800bf04 <__libc_init_array+0x24>
 800bef0:	f000 fc86 	bl	800c800 <_init>
 800bef4:	2600      	movs	r6, #0
 800bef6:	4d0a      	ldr	r5, [pc, #40]	; (800bf20 <__libc_init_array+0x40>)
 800bef8:	4c0a      	ldr	r4, [pc, #40]	; (800bf24 <__libc_init_array+0x44>)
 800befa:	1b64      	subs	r4, r4, r5
 800befc:	10a4      	asrs	r4, r4, #2
 800befe:	42a6      	cmp	r6, r4
 800bf00:	d105      	bne.n	800bf0e <__libc_init_array+0x2e>
 800bf02:	bd70      	pop	{r4, r5, r6, pc}
 800bf04:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf08:	4798      	blx	r3
 800bf0a:	3601      	adds	r6, #1
 800bf0c:	e7ee      	b.n	800beec <__libc_init_array+0xc>
 800bf0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf12:	4798      	blx	r3
 800bf14:	3601      	adds	r6, #1
 800bf16:	e7f2      	b.n	800befe <__libc_init_array+0x1e>
 800bf18:	0800ce18 	.word	0x0800ce18
 800bf1c:	0800ce18 	.word	0x0800ce18
 800bf20:	0800ce18 	.word	0x0800ce18
 800bf24:	0800ce1c 	.word	0x0800ce1c

0800bf28 <memcpy>:
 800bf28:	440a      	add	r2, r1
 800bf2a:	4291      	cmp	r1, r2
 800bf2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf30:	d100      	bne.n	800bf34 <memcpy+0xc>
 800bf32:	4770      	bx	lr
 800bf34:	b510      	push	{r4, lr}
 800bf36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf3a:	4291      	cmp	r1, r2
 800bf3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf40:	d1f9      	bne.n	800bf36 <memcpy+0xe>
 800bf42:	bd10      	pop	{r4, pc}

0800bf44 <memmove>:
 800bf44:	4288      	cmp	r0, r1
 800bf46:	b510      	push	{r4, lr}
 800bf48:	eb01 0402 	add.w	r4, r1, r2
 800bf4c:	d902      	bls.n	800bf54 <memmove+0x10>
 800bf4e:	4284      	cmp	r4, r0
 800bf50:	4623      	mov	r3, r4
 800bf52:	d807      	bhi.n	800bf64 <memmove+0x20>
 800bf54:	1e43      	subs	r3, r0, #1
 800bf56:	42a1      	cmp	r1, r4
 800bf58:	d008      	beq.n	800bf6c <memmove+0x28>
 800bf5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf62:	e7f8      	b.n	800bf56 <memmove+0x12>
 800bf64:	4601      	mov	r1, r0
 800bf66:	4402      	add	r2, r0
 800bf68:	428a      	cmp	r2, r1
 800bf6a:	d100      	bne.n	800bf6e <memmove+0x2a>
 800bf6c:	bd10      	pop	{r4, pc}
 800bf6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf76:	e7f7      	b.n	800bf68 <memmove+0x24>

0800bf78 <memset>:
 800bf78:	4603      	mov	r3, r0
 800bf7a:	4402      	add	r2, r0
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d100      	bne.n	800bf82 <memset+0xa>
 800bf80:	4770      	bx	lr
 800bf82:	f803 1b01 	strb.w	r1, [r3], #1
 800bf86:	e7f9      	b.n	800bf7c <memset+0x4>

0800bf88 <sniprintf>:
 800bf88:	b40c      	push	{r2, r3}
 800bf8a:	b530      	push	{r4, r5, lr}
 800bf8c:	4b17      	ldr	r3, [pc, #92]	; (800bfec <sniprintf+0x64>)
 800bf8e:	1e0c      	subs	r4, r1, #0
 800bf90:	681d      	ldr	r5, [r3, #0]
 800bf92:	b09d      	sub	sp, #116	; 0x74
 800bf94:	da08      	bge.n	800bfa8 <sniprintf+0x20>
 800bf96:	238b      	movs	r3, #139	; 0x8b
 800bf98:	f04f 30ff 	mov.w	r0, #4294967295
 800bf9c:	602b      	str	r3, [r5, #0]
 800bf9e:	b01d      	add	sp, #116	; 0x74
 800bfa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfa4:	b002      	add	sp, #8
 800bfa6:	4770      	bx	lr
 800bfa8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bfac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bfb0:	bf0c      	ite	eq
 800bfb2:	4623      	moveq	r3, r4
 800bfb4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bfb8:	9304      	str	r3, [sp, #16]
 800bfba:	9307      	str	r3, [sp, #28]
 800bfbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfc0:	9002      	str	r0, [sp, #8]
 800bfc2:	9006      	str	r0, [sp, #24]
 800bfc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bfc8:	4628      	mov	r0, r5
 800bfca:	ab21      	add	r3, sp, #132	; 0x84
 800bfcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bfce:	a902      	add	r1, sp, #8
 800bfd0:	9301      	str	r3, [sp, #4]
 800bfd2:	f000 f87f 	bl	800c0d4 <_svfiprintf_r>
 800bfd6:	1c43      	adds	r3, r0, #1
 800bfd8:	bfbc      	itt	lt
 800bfda:	238b      	movlt	r3, #139	; 0x8b
 800bfdc:	602b      	strlt	r3, [r5, #0]
 800bfde:	2c00      	cmp	r4, #0
 800bfe0:	d0dd      	beq.n	800bf9e <sniprintf+0x16>
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	9b02      	ldr	r3, [sp, #8]
 800bfe6:	701a      	strb	r2, [r3, #0]
 800bfe8:	e7d9      	b.n	800bf9e <sniprintf+0x16>
 800bfea:	bf00      	nop
 800bfec:	20000188 	.word	0x20000188

0800bff0 <strstr>:
 800bff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bff2:	780c      	ldrb	r4, [r1, #0]
 800bff4:	b164      	cbz	r4, 800c010 <strstr+0x20>
 800bff6:	4603      	mov	r3, r0
 800bff8:	781a      	ldrb	r2, [r3, #0]
 800bffa:	4618      	mov	r0, r3
 800bffc:	1c5e      	adds	r6, r3, #1
 800bffe:	b90a      	cbnz	r2, 800c004 <strstr+0x14>
 800c000:	4610      	mov	r0, r2
 800c002:	e005      	b.n	800c010 <strstr+0x20>
 800c004:	4294      	cmp	r4, r2
 800c006:	d108      	bne.n	800c01a <strstr+0x2a>
 800c008:	460d      	mov	r5, r1
 800c00a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800c00e:	b902      	cbnz	r2, 800c012 <strstr+0x22>
 800c010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c012:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800c016:	4297      	cmp	r7, r2
 800c018:	d0f7      	beq.n	800c00a <strstr+0x1a>
 800c01a:	4633      	mov	r3, r6
 800c01c:	e7ec      	b.n	800bff8 <strstr+0x8>

0800c01e <__ssputs_r>:
 800c01e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c022:	688e      	ldr	r6, [r1, #8]
 800c024:	4682      	mov	sl, r0
 800c026:	429e      	cmp	r6, r3
 800c028:	460c      	mov	r4, r1
 800c02a:	4690      	mov	r8, r2
 800c02c:	461f      	mov	r7, r3
 800c02e:	d838      	bhi.n	800c0a2 <__ssputs_r+0x84>
 800c030:	898a      	ldrh	r2, [r1, #12]
 800c032:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c036:	d032      	beq.n	800c09e <__ssputs_r+0x80>
 800c038:	6825      	ldr	r5, [r4, #0]
 800c03a:	6909      	ldr	r1, [r1, #16]
 800c03c:	3301      	adds	r3, #1
 800c03e:	eba5 0901 	sub.w	r9, r5, r1
 800c042:	6965      	ldr	r5, [r4, #20]
 800c044:	444b      	add	r3, r9
 800c046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c04a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c04e:	106d      	asrs	r5, r5, #1
 800c050:	429d      	cmp	r5, r3
 800c052:	bf38      	it	cc
 800c054:	461d      	movcc	r5, r3
 800c056:	0553      	lsls	r3, r2, #21
 800c058:	d531      	bpl.n	800c0be <__ssputs_r+0xa0>
 800c05a:	4629      	mov	r1, r5
 800c05c:	f000 fb2a 	bl	800c6b4 <_malloc_r>
 800c060:	4606      	mov	r6, r0
 800c062:	b950      	cbnz	r0, 800c07a <__ssputs_r+0x5c>
 800c064:	230c      	movs	r3, #12
 800c066:	f04f 30ff 	mov.w	r0, #4294967295
 800c06a:	f8ca 3000 	str.w	r3, [sl]
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c074:	81a3      	strh	r3, [r4, #12]
 800c076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c07a:	464a      	mov	r2, r9
 800c07c:	6921      	ldr	r1, [r4, #16]
 800c07e:	f7ff ff53 	bl	800bf28 <memcpy>
 800c082:	89a3      	ldrh	r3, [r4, #12]
 800c084:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c08c:	81a3      	strh	r3, [r4, #12]
 800c08e:	6126      	str	r6, [r4, #16]
 800c090:	444e      	add	r6, r9
 800c092:	6026      	str	r6, [r4, #0]
 800c094:	463e      	mov	r6, r7
 800c096:	6165      	str	r5, [r4, #20]
 800c098:	eba5 0509 	sub.w	r5, r5, r9
 800c09c:	60a5      	str	r5, [r4, #8]
 800c09e:	42be      	cmp	r6, r7
 800c0a0:	d900      	bls.n	800c0a4 <__ssputs_r+0x86>
 800c0a2:	463e      	mov	r6, r7
 800c0a4:	4632      	mov	r2, r6
 800c0a6:	4641      	mov	r1, r8
 800c0a8:	6820      	ldr	r0, [r4, #0]
 800c0aa:	f7ff ff4b 	bl	800bf44 <memmove>
 800c0ae:	68a3      	ldr	r3, [r4, #8]
 800c0b0:	6822      	ldr	r2, [r4, #0]
 800c0b2:	1b9b      	subs	r3, r3, r6
 800c0b4:	4432      	add	r2, r6
 800c0b6:	2000      	movs	r0, #0
 800c0b8:	60a3      	str	r3, [r4, #8]
 800c0ba:	6022      	str	r2, [r4, #0]
 800c0bc:	e7db      	b.n	800c076 <__ssputs_r+0x58>
 800c0be:	462a      	mov	r2, r5
 800c0c0:	f000 fb52 	bl	800c768 <_realloc_r>
 800c0c4:	4606      	mov	r6, r0
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	d1e1      	bne.n	800c08e <__ssputs_r+0x70>
 800c0ca:	4650      	mov	r0, sl
 800c0cc:	6921      	ldr	r1, [r4, #16]
 800c0ce:	f000 faa5 	bl	800c61c <_free_r>
 800c0d2:	e7c7      	b.n	800c064 <__ssputs_r+0x46>

0800c0d4 <_svfiprintf_r>:
 800c0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d8:	4698      	mov	r8, r3
 800c0da:	898b      	ldrh	r3, [r1, #12]
 800c0dc:	4607      	mov	r7, r0
 800c0de:	061b      	lsls	r3, r3, #24
 800c0e0:	460d      	mov	r5, r1
 800c0e2:	4614      	mov	r4, r2
 800c0e4:	b09d      	sub	sp, #116	; 0x74
 800c0e6:	d50e      	bpl.n	800c106 <_svfiprintf_r+0x32>
 800c0e8:	690b      	ldr	r3, [r1, #16]
 800c0ea:	b963      	cbnz	r3, 800c106 <_svfiprintf_r+0x32>
 800c0ec:	2140      	movs	r1, #64	; 0x40
 800c0ee:	f000 fae1 	bl	800c6b4 <_malloc_r>
 800c0f2:	6028      	str	r0, [r5, #0]
 800c0f4:	6128      	str	r0, [r5, #16]
 800c0f6:	b920      	cbnz	r0, 800c102 <_svfiprintf_r+0x2e>
 800c0f8:	230c      	movs	r3, #12
 800c0fa:	603b      	str	r3, [r7, #0]
 800c0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c100:	e0d1      	b.n	800c2a6 <_svfiprintf_r+0x1d2>
 800c102:	2340      	movs	r3, #64	; 0x40
 800c104:	616b      	str	r3, [r5, #20]
 800c106:	2300      	movs	r3, #0
 800c108:	9309      	str	r3, [sp, #36]	; 0x24
 800c10a:	2320      	movs	r3, #32
 800c10c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c110:	2330      	movs	r3, #48	; 0x30
 800c112:	f04f 0901 	mov.w	r9, #1
 800c116:	f8cd 800c 	str.w	r8, [sp, #12]
 800c11a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c2c0 <_svfiprintf_r+0x1ec>
 800c11e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c122:	4623      	mov	r3, r4
 800c124:	469a      	mov	sl, r3
 800c126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c12a:	b10a      	cbz	r2, 800c130 <_svfiprintf_r+0x5c>
 800c12c:	2a25      	cmp	r2, #37	; 0x25
 800c12e:	d1f9      	bne.n	800c124 <_svfiprintf_r+0x50>
 800c130:	ebba 0b04 	subs.w	fp, sl, r4
 800c134:	d00b      	beq.n	800c14e <_svfiprintf_r+0x7a>
 800c136:	465b      	mov	r3, fp
 800c138:	4622      	mov	r2, r4
 800c13a:	4629      	mov	r1, r5
 800c13c:	4638      	mov	r0, r7
 800c13e:	f7ff ff6e 	bl	800c01e <__ssputs_r>
 800c142:	3001      	adds	r0, #1
 800c144:	f000 80aa 	beq.w	800c29c <_svfiprintf_r+0x1c8>
 800c148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c14a:	445a      	add	r2, fp
 800c14c:	9209      	str	r2, [sp, #36]	; 0x24
 800c14e:	f89a 3000 	ldrb.w	r3, [sl]
 800c152:	2b00      	cmp	r3, #0
 800c154:	f000 80a2 	beq.w	800c29c <_svfiprintf_r+0x1c8>
 800c158:	2300      	movs	r3, #0
 800c15a:	f04f 32ff 	mov.w	r2, #4294967295
 800c15e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c162:	f10a 0a01 	add.w	sl, sl, #1
 800c166:	9304      	str	r3, [sp, #16]
 800c168:	9307      	str	r3, [sp, #28]
 800c16a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c16e:	931a      	str	r3, [sp, #104]	; 0x68
 800c170:	4654      	mov	r4, sl
 800c172:	2205      	movs	r2, #5
 800c174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c178:	4851      	ldr	r0, [pc, #324]	; (800c2c0 <_svfiprintf_r+0x1ec>)
 800c17a:	f000 fa41 	bl	800c600 <memchr>
 800c17e:	9a04      	ldr	r2, [sp, #16]
 800c180:	b9d8      	cbnz	r0, 800c1ba <_svfiprintf_r+0xe6>
 800c182:	06d0      	lsls	r0, r2, #27
 800c184:	bf44      	itt	mi
 800c186:	2320      	movmi	r3, #32
 800c188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c18c:	0711      	lsls	r1, r2, #28
 800c18e:	bf44      	itt	mi
 800c190:	232b      	movmi	r3, #43	; 0x2b
 800c192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c196:	f89a 3000 	ldrb.w	r3, [sl]
 800c19a:	2b2a      	cmp	r3, #42	; 0x2a
 800c19c:	d015      	beq.n	800c1ca <_svfiprintf_r+0xf6>
 800c19e:	4654      	mov	r4, sl
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	f04f 0c0a 	mov.w	ip, #10
 800c1a6:	9a07      	ldr	r2, [sp, #28]
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1ae:	3b30      	subs	r3, #48	; 0x30
 800c1b0:	2b09      	cmp	r3, #9
 800c1b2:	d94e      	bls.n	800c252 <_svfiprintf_r+0x17e>
 800c1b4:	b1b0      	cbz	r0, 800c1e4 <_svfiprintf_r+0x110>
 800c1b6:	9207      	str	r2, [sp, #28]
 800c1b8:	e014      	b.n	800c1e4 <_svfiprintf_r+0x110>
 800c1ba:	eba0 0308 	sub.w	r3, r0, r8
 800c1be:	fa09 f303 	lsl.w	r3, r9, r3
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	46a2      	mov	sl, r4
 800c1c6:	9304      	str	r3, [sp, #16]
 800c1c8:	e7d2      	b.n	800c170 <_svfiprintf_r+0x9c>
 800c1ca:	9b03      	ldr	r3, [sp, #12]
 800c1cc:	1d19      	adds	r1, r3, #4
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	9103      	str	r1, [sp, #12]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	bfbb      	ittet	lt
 800c1d6:	425b      	neglt	r3, r3
 800c1d8:	f042 0202 	orrlt.w	r2, r2, #2
 800c1dc:	9307      	strge	r3, [sp, #28]
 800c1de:	9307      	strlt	r3, [sp, #28]
 800c1e0:	bfb8      	it	lt
 800c1e2:	9204      	strlt	r2, [sp, #16]
 800c1e4:	7823      	ldrb	r3, [r4, #0]
 800c1e6:	2b2e      	cmp	r3, #46	; 0x2e
 800c1e8:	d10c      	bne.n	800c204 <_svfiprintf_r+0x130>
 800c1ea:	7863      	ldrb	r3, [r4, #1]
 800c1ec:	2b2a      	cmp	r3, #42	; 0x2a
 800c1ee:	d135      	bne.n	800c25c <_svfiprintf_r+0x188>
 800c1f0:	9b03      	ldr	r3, [sp, #12]
 800c1f2:	3402      	adds	r4, #2
 800c1f4:	1d1a      	adds	r2, r3, #4
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	9203      	str	r2, [sp, #12]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	bfb8      	it	lt
 800c1fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800c202:	9305      	str	r3, [sp, #20]
 800c204:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c2d0 <_svfiprintf_r+0x1fc>
 800c208:	2203      	movs	r2, #3
 800c20a:	4650      	mov	r0, sl
 800c20c:	7821      	ldrb	r1, [r4, #0]
 800c20e:	f000 f9f7 	bl	800c600 <memchr>
 800c212:	b140      	cbz	r0, 800c226 <_svfiprintf_r+0x152>
 800c214:	2340      	movs	r3, #64	; 0x40
 800c216:	eba0 000a 	sub.w	r0, r0, sl
 800c21a:	fa03 f000 	lsl.w	r0, r3, r0
 800c21e:	9b04      	ldr	r3, [sp, #16]
 800c220:	3401      	adds	r4, #1
 800c222:	4303      	orrs	r3, r0
 800c224:	9304      	str	r3, [sp, #16]
 800c226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c22a:	2206      	movs	r2, #6
 800c22c:	4825      	ldr	r0, [pc, #148]	; (800c2c4 <_svfiprintf_r+0x1f0>)
 800c22e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c232:	f000 f9e5 	bl	800c600 <memchr>
 800c236:	2800      	cmp	r0, #0
 800c238:	d038      	beq.n	800c2ac <_svfiprintf_r+0x1d8>
 800c23a:	4b23      	ldr	r3, [pc, #140]	; (800c2c8 <_svfiprintf_r+0x1f4>)
 800c23c:	bb1b      	cbnz	r3, 800c286 <_svfiprintf_r+0x1b2>
 800c23e:	9b03      	ldr	r3, [sp, #12]
 800c240:	3307      	adds	r3, #7
 800c242:	f023 0307 	bic.w	r3, r3, #7
 800c246:	3308      	adds	r3, #8
 800c248:	9303      	str	r3, [sp, #12]
 800c24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c24c:	4433      	add	r3, r6
 800c24e:	9309      	str	r3, [sp, #36]	; 0x24
 800c250:	e767      	b.n	800c122 <_svfiprintf_r+0x4e>
 800c252:	460c      	mov	r4, r1
 800c254:	2001      	movs	r0, #1
 800c256:	fb0c 3202 	mla	r2, ip, r2, r3
 800c25a:	e7a5      	b.n	800c1a8 <_svfiprintf_r+0xd4>
 800c25c:	2300      	movs	r3, #0
 800c25e:	f04f 0c0a 	mov.w	ip, #10
 800c262:	4619      	mov	r1, r3
 800c264:	3401      	adds	r4, #1
 800c266:	9305      	str	r3, [sp, #20]
 800c268:	4620      	mov	r0, r4
 800c26a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c26e:	3a30      	subs	r2, #48	; 0x30
 800c270:	2a09      	cmp	r2, #9
 800c272:	d903      	bls.n	800c27c <_svfiprintf_r+0x1a8>
 800c274:	2b00      	cmp	r3, #0
 800c276:	d0c5      	beq.n	800c204 <_svfiprintf_r+0x130>
 800c278:	9105      	str	r1, [sp, #20]
 800c27a:	e7c3      	b.n	800c204 <_svfiprintf_r+0x130>
 800c27c:	4604      	mov	r4, r0
 800c27e:	2301      	movs	r3, #1
 800c280:	fb0c 2101 	mla	r1, ip, r1, r2
 800c284:	e7f0      	b.n	800c268 <_svfiprintf_r+0x194>
 800c286:	ab03      	add	r3, sp, #12
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	462a      	mov	r2, r5
 800c28c:	4638      	mov	r0, r7
 800c28e:	4b0f      	ldr	r3, [pc, #60]	; (800c2cc <_svfiprintf_r+0x1f8>)
 800c290:	a904      	add	r1, sp, #16
 800c292:	f3af 8000 	nop.w
 800c296:	1c42      	adds	r2, r0, #1
 800c298:	4606      	mov	r6, r0
 800c29a:	d1d6      	bne.n	800c24a <_svfiprintf_r+0x176>
 800c29c:	89ab      	ldrh	r3, [r5, #12]
 800c29e:	065b      	lsls	r3, r3, #25
 800c2a0:	f53f af2c 	bmi.w	800c0fc <_svfiprintf_r+0x28>
 800c2a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2a6:	b01d      	add	sp, #116	; 0x74
 800c2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ac:	ab03      	add	r3, sp, #12
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	462a      	mov	r2, r5
 800c2b2:	4638      	mov	r0, r7
 800c2b4:	4b05      	ldr	r3, [pc, #20]	; (800c2cc <_svfiprintf_r+0x1f8>)
 800c2b6:	a904      	add	r1, sp, #16
 800c2b8:	f000 f87c 	bl	800c3b4 <_printf_i>
 800c2bc:	e7eb      	b.n	800c296 <_svfiprintf_r+0x1c2>
 800c2be:	bf00      	nop
 800c2c0:	0800cde4 	.word	0x0800cde4
 800c2c4:	0800cdee 	.word	0x0800cdee
 800c2c8:	00000000 	.word	0x00000000
 800c2cc:	0800c01f 	.word	0x0800c01f
 800c2d0:	0800cdea 	.word	0x0800cdea

0800c2d4 <_printf_common>:
 800c2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d8:	4616      	mov	r6, r2
 800c2da:	4699      	mov	r9, r3
 800c2dc:	688a      	ldr	r2, [r1, #8]
 800c2de:	690b      	ldr	r3, [r1, #16]
 800c2e0:	4607      	mov	r7, r0
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	bfb8      	it	lt
 800c2e6:	4613      	movlt	r3, r2
 800c2e8:	6033      	str	r3, [r6, #0]
 800c2ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2ee:	460c      	mov	r4, r1
 800c2f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2f4:	b10a      	cbz	r2, 800c2fa <_printf_common+0x26>
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	6033      	str	r3, [r6, #0]
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	0699      	lsls	r1, r3, #26
 800c2fe:	bf42      	ittt	mi
 800c300:	6833      	ldrmi	r3, [r6, #0]
 800c302:	3302      	addmi	r3, #2
 800c304:	6033      	strmi	r3, [r6, #0]
 800c306:	6825      	ldr	r5, [r4, #0]
 800c308:	f015 0506 	ands.w	r5, r5, #6
 800c30c:	d106      	bne.n	800c31c <_printf_common+0x48>
 800c30e:	f104 0a19 	add.w	sl, r4, #25
 800c312:	68e3      	ldr	r3, [r4, #12]
 800c314:	6832      	ldr	r2, [r6, #0]
 800c316:	1a9b      	subs	r3, r3, r2
 800c318:	42ab      	cmp	r3, r5
 800c31a:	dc28      	bgt.n	800c36e <_printf_common+0x9a>
 800c31c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c320:	1e13      	subs	r3, r2, #0
 800c322:	6822      	ldr	r2, [r4, #0]
 800c324:	bf18      	it	ne
 800c326:	2301      	movne	r3, #1
 800c328:	0692      	lsls	r2, r2, #26
 800c32a:	d42d      	bmi.n	800c388 <_printf_common+0xb4>
 800c32c:	4649      	mov	r1, r9
 800c32e:	4638      	mov	r0, r7
 800c330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c334:	47c0      	blx	r8
 800c336:	3001      	adds	r0, #1
 800c338:	d020      	beq.n	800c37c <_printf_common+0xa8>
 800c33a:	6823      	ldr	r3, [r4, #0]
 800c33c:	68e5      	ldr	r5, [r4, #12]
 800c33e:	f003 0306 	and.w	r3, r3, #6
 800c342:	2b04      	cmp	r3, #4
 800c344:	bf18      	it	ne
 800c346:	2500      	movne	r5, #0
 800c348:	6832      	ldr	r2, [r6, #0]
 800c34a:	f04f 0600 	mov.w	r6, #0
 800c34e:	68a3      	ldr	r3, [r4, #8]
 800c350:	bf08      	it	eq
 800c352:	1aad      	subeq	r5, r5, r2
 800c354:	6922      	ldr	r2, [r4, #16]
 800c356:	bf08      	it	eq
 800c358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c35c:	4293      	cmp	r3, r2
 800c35e:	bfc4      	itt	gt
 800c360:	1a9b      	subgt	r3, r3, r2
 800c362:	18ed      	addgt	r5, r5, r3
 800c364:	341a      	adds	r4, #26
 800c366:	42b5      	cmp	r5, r6
 800c368:	d11a      	bne.n	800c3a0 <_printf_common+0xcc>
 800c36a:	2000      	movs	r0, #0
 800c36c:	e008      	b.n	800c380 <_printf_common+0xac>
 800c36e:	2301      	movs	r3, #1
 800c370:	4652      	mov	r2, sl
 800c372:	4649      	mov	r1, r9
 800c374:	4638      	mov	r0, r7
 800c376:	47c0      	blx	r8
 800c378:	3001      	adds	r0, #1
 800c37a:	d103      	bne.n	800c384 <_printf_common+0xb0>
 800c37c:	f04f 30ff 	mov.w	r0, #4294967295
 800c380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c384:	3501      	adds	r5, #1
 800c386:	e7c4      	b.n	800c312 <_printf_common+0x3e>
 800c388:	2030      	movs	r0, #48	; 0x30
 800c38a:	18e1      	adds	r1, r4, r3
 800c38c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c390:	1c5a      	adds	r2, r3, #1
 800c392:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c396:	4422      	add	r2, r4
 800c398:	3302      	adds	r3, #2
 800c39a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c39e:	e7c5      	b.n	800c32c <_printf_common+0x58>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	4622      	mov	r2, r4
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	47c0      	blx	r8
 800c3aa:	3001      	adds	r0, #1
 800c3ac:	d0e6      	beq.n	800c37c <_printf_common+0xa8>
 800c3ae:	3601      	adds	r6, #1
 800c3b0:	e7d9      	b.n	800c366 <_printf_common+0x92>
	...

0800c3b4 <_printf_i>:
 800c3b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3b8:	460c      	mov	r4, r1
 800c3ba:	7e27      	ldrb	r7, [r4, #24]
 800c3bc:	4691      	mov	r9, r2
 800c3be:	2f78      	cmp	r7, #120	; 0x78
 800c3c0:	4680      	mov	r8, r0
 800c3c2:	469a      	mov	sl, r3
 800c3c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c3c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3ca:	d807      	bhi.n	800c3dc <_printf_i+0x28>
 800c3cc:	2f62      	cmp	r7, #98	; 0x62
 800c3ce:	d80a      	bhi.n	800c3e6 <_printf_i+0x32>
 800c3d0:	2f00      	cmp	r7, #0
 800c3d2:	f000 80d9 	beq.w	800c588 <_printf_i+0x1d4>
 800c3d6:	2f58      	cmp	r7, #88	; 0x58
 800c3d8:	f000 80a4 	beq.w	800c524 <_printf_i+0x170>
 800c3dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c3e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3e4:	e03a      	b.n	800c45c <_printf_i+0xa8>
 800c3e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3ea:	2b15      	cmp	r3, #21
 800c3ec:	d8f6      	bhi.n	800c3dc <_printf_i+0x28>
 800c3ee:	a001      	add	r0, pc, #4	; (adr r0, 800c3f4 <_printf_i+0x40>)
 800c3f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c3f4:	0800c44d 	.word	0x0800c44d
 800c3f8:	0800c461 	.word	0x0800c461
 800c3fc:	0800c3dd 	.word	0x0800c3dd
 800c400:	0800c3dd 	.word	0x0800c3dd
 800c404:	0800c3dd 	.word	0x0800c3dd
 800c408:	0800c3dd 	.word	0x0800c3dd
 800c40c:	0800c461 	.word	0x0800c461
 800c410:	0800c3dd 	.word	0x0800c3dd
 800c414:	0800c3dd 	.word	0x0800c3dd
 800c418:	0800c3dd 	.word	0x0800c3dd
 800c41c:	0800c3dd 	.word	0x0800c3dd
 800c420:	0800c56f 	.word	0x0800c56f
 800c424:	0800c491 	.word	0x0800c491
 800c428:	0800c551 	.word	0x0800c551
 800c42c:	0800c3dd 	.word	0x0800c3dd
 800c430:	0800c3dd 	.word	0x0800c3dd
 800c434:	0800c591 	.word	0x0800c591
 800c438:	0800c3dd 	.word	0x0800c3dd
 800c43c:	0800c491 	.word	0x0800c491
 800c440:	0800c3dd 	.word	0x0800c3dd
 800c444:	0800c3dd 	.word	0x0800c3dd
 800c448:	0800c559 	.word	0x0800c559
 800c44c:	680b      	ldr	r3, [r1, #0]
 800c44e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c452:	1d1a      	adds	r2, r3, #4
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	600a      	str	r2, [r1, #0]
 800c458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c45c:	2301      	movs	r3, #1
 800c45e:	e0a4      	b.n	800c5aa <_printf_i+0x1f6>
 800c460:	6825      	ldr	r5, [r4, #0]
 800c462:	6808      	ldr	r0, [r1, #0]
 800c464:	062e      	lsls	r6, r5, #24
 800c466:	f100 0304 	add.w	r3, r0, #4
 800c46a:	d50a      	bpl.n	800c482 <_printf_i+0xce>
 800c46c:	6805      	ldr	r5, [r0, #0]
 800c46e:	600b      	str	r3, [r1, #0]
 800c470:	2d00      	cmp	r5, #0
 800c472:	da03      	bge.n	800c47c <_printf_i+0xc8>
 800c474:	232d      	movs	r3, #45	; 0x2d
 800c476:	426d      	negs	r5, r5
 800c478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c47c:	230a      	movs	r3, #10
 800c47e:	485e      	ldr	r0, [pc, #376]	; (800c5f8 <_printf_i+0x244>)
 800c480:	e019      	b.n	800c4b6 <_printf_i+0x102>
 800c482:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c486:	6805      	ldr	r5, [r0, #0]
 800c488:	600b      	str	r3, [r1, #0]
 800c48a:	bf18      	it	ne
 800c48c:	b22d      	sxthne	r5, r5
 800c48e:	e7ef      	b.n	800c470 <_printf_i+0xbc>
 800c490:	680b      	ldr	r3, [r1, #0]
 800c492:	6825      	ldr	r5, [r4, #0]
 800c494:	1d18      	adds	r0, r3, #4
 800c496:	6008      	str	r0, [r1, #0]
 800c498:	0628      	lsls	r0, r5, #24
 800c49a:	d501      	bpl.n	800c4a0 <_printf_i+0xec>
 800c49c:	681d      	ldr	r5, [r3, #0]
 800c49e:	e002      	b.n	800c4a6 <_printf_i+0xf2>
 800c4a0:	0669      	lsls	r1, r5, #25
 800c4a2:	d5fb      	bpl.n	800c49c <_printf_i+0xe8>
 800c4a4:	881d      	ldrh	r5, [r3, #0]
 800c4a6:	2f6f      	cmp	r7, #111	; 0x6f
 800c4a8:	bf0c      	ite	eq
 800c4aa:	2308      	moveq	r3, #8
 800c4ac:	230a      	movne	r3, #10
 800c4ae:	4852      	ldr	r0, [pc, #328]	; (800c5f8 <_printf_i+0x244>)
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4b6:	6866      	ldr	r6, [r4, #4]
 800c4b8:	2e00      	cmp	r6, #0
 800c4ba:	bfa8      	it	ge
 800c4bc:	6821      	ldrge	r1, [r4, #0]
 800c4be:	60a6      	str	r6, [r4, #8]
 800c4c0:	bfa4      	itt	ge
 800c4c2:	f021 0104 	bicge.w	r1, r1, #4
 800c4c6:	6021      	strge	r1, [r4, #0]
 800c4c8:	b90d      	cbnz	r5, 800c4ce <_printf_i+0x11a>
 800c4ca:	2e00      	cmp	r6, #0
 800c4cc:	d04d      	beq.n	800c56a <_printf_i+0x1b6>
 800c4ce:	4616      	mov	r6, r2
 800c4d0:	fbb5 f1f3 	udiv	r1, r5, r3
 800c4d4:	fb03 5711 	mls	r7, r3, r1, r5
 800c4d8:	5dc7      	ldrb	r7, [r0, r7]
 800c4da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c4de:	462f      	mov	r7, r5
 800c4e0:	42bb      	cmp	r3, r7
 800c4e2:	460d      	mov	r5, r1
 800c4e4:	d9f4      	bls.n	800c4d0 <_printf_i+0x11c>
 800c4e6:	2b08      	cmp	r3, #8
 800c4e8:	d10b      	bne.n	800c502 <_printf_i+0x14e>
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	07df      	lsls	r7, r3, #31
 800c4ee:	d508      	bpl.n	800c502 <_printf_i+0x14e>
 800c4f0:	6923      	ldr	r3, [r4, #16]
 800c4f2:	6861      	ldr	r1, [r4, #4]
 800c4f4:	4299      	cmp	r1, r3
 800c4f6:	bfde      	ittt	le
 800c4f8:	2330      	movle	r3, #48	; 0x30
 800c4fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c4fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c502:	1b92      	subs	r2, r2, r6
 800c504:	6122      	str	r2, [r4, #16]
 800c506:	464b      	mov	r3, r9
 800c508:	4621      	mov	r1, r4
 800c50a:	4640      	mov	r0, r8
 800c50c:	f8cd a000 	str.w	sl, [sp]
 800c510:	aa03      	add	r2, sp, #12
 800c512:	f7ff fedf 	bl	800c2d4 <_printf_common>
 800c516:	3001      	adds	r0, #1
 800c518:	d14c      	bne.n	800c5b4 <_printf_i+0x200>
 800c51a:	f04f 30ff 	mov.w	r0, #4294967295
 800c51e:	b004      	add	sp, #16
 800c520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c524:	4834      	ldr	r0, [pc, #208]	; (800c5f8 <_printf_i+0x244>)
 800c526:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c52a:	680e      	ldr	r6, [r1, #0]
 800c52c:	6823      	ldr	r3, [r4, #0]
 800c52e:	f856 5b04 	ldr.w	r5, [r6], #4
 800c532:	061f      	lsls	r7, r3, #24
 800c534:	600e      	str	r6, [r1, #0]
 800c536:	d514      	bpl.n	800c562 <_printf_i+0x1ae>
 800c538:	07d9      	lsls	r1, r3, #31
 800c53a:	bf44      	itt	mi
 800c53c:	f043 0320 	orrmi.w	r3, r3, #32
 800c540:	6023      	strmi	r3, [r4, #0]
 800c542:	b91d      	cbnz	r5, 800c54c <_printf_i+0x198>
 800c544:	6823      	ldr	r3, [r4, #0]
 800c546:	f023 0320 	bic.w	r3, r3, #32
 800c54a:	6023      	str	r3, [r4, #0]
 800c54c:	2310      	movs	r3, #16
 800c54e:	e7af      	b.n	800c4b0 <_printf_i+0xfc>
 800c550:	6823      	ldr	r3, [r4, #0]
 800c552:	f043 0320 	orr.w	r3, r3, #32
 800c556:	6023      	str	r3, [r4, #0]
 800c558:	2378      	movs	r3, #120	; 0x78
 800c55a:	4828      	ldr	r0, [pc, #160]	; (800c5fc <_printf_i+0x248>)
 800c55c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c560:	e7e3      	b.n	800c52a <_printf_i+0x176>
 800c562:	065e      	lsls	r6, r3, #25
 800c564:	bf48      	it	mi
 800c566:	b2ad      	uxthmi	r5, r5
 800c568:	e7e6      	b.n	800c538 <_printf_i+0x184>
 800c56a:	4616      	mov	r6, r2
 800c56c:	e7bb      	b.n	800c4e6 <_printf_i+0x132>
 800c56e:	680b      	ldr	r3, [r1, #0]
 800c570:	6826      	ldr	r6, [r4, #0]
 800c572:	1d1d      	adds	r5, r3, #4
 800c574:	6960      	ldr	r0, [r4, #20]
 800c576:	600d      	str	r5, [r1, #0]
 800c578:	0635      	lsls	r5, r6, #24
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	d501      	bpl.n	800c582 <_printf_i+0x1ce>
 800c57e:	6018      	str	r0, [r3, #0]
 800c580:	e002      	b.n	800c588 <_printf_i+0x1d4>
 800c582:	0671      	lsls	r1, r6, #25
 800c584:	d5fb      	bpl.n	800c57e <_printf_i+0x1ca>
 800c586:	8018      	strh	r0, [r3, #0]
 800c588:	2300      	movs	r3, #0
 800c58a:	4616      	mov	r6, r2
 800c58c:	6123      	str	r3, [r4, #16]
 800c58e:	e7ba      	b.n	800c506 <_printf_i+0x152>
 800c590:	680b      	ldr	r3, [r1, #0]
 800c592:	1d1a      	adds	r2, r3, #4
 800c594:	600a      	str	r2, [r1, #0]
 800c596:	681e      	ldr	r6, [r3, #0]
 800c598:	2100      	movs	r1, #0
 800c59a:	4630      	mov	r0, r6
 800c59c:	6862      	ldr	r2, [r4, #4]
 800c59e:	f000 f82f 	bl	800c600 <memchr>
 800c5a2:	b108      	cbz	r0, 800c5a8 <_printf_i+0x1f4>
 800c5a4:	1b80      	subs	r0, r0, r6
 800c5a6:	6060      	str	r0, [r4, #4]
 800c5a8:	6863      	ldr	r3, [r4, #4]
 800c5aa:	6123      	str	r3, [r4, #16]
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5b2:	e7a8      	b.n	800c506 <_printf_i+0x152>
 800c5b4:	4632      	mov	r2, r6
 800c5b6:	4649      	mov	r1, r9
 800c5b8:	4640      	mov	r0, r8
 800c5ba:	6923      	ldr	r3, [r4, #16]
 800c5bc:	47d0      	blx	sl
 800c5be:	3001      	adds	r0, #1
 800c5c0:	d0ab      	beq.n	800c51a <_printf_i+0x166>
 800c5c2:	6823      	ldr	r3, [r4, #0]
 800c5c4:	079b      	lsls	r3, r3, #30
 800c5c6:	d413      	bmi.n	800c5f0 <_printf_i+0x23c>
 800c5c8:	68e0      	ldr	r0, [r4, #12]
 800c5ca:	9b03      	ldr	r3, [sp, #12]
 800c5cc:	4298      	cmp	r0, r3
 800c5ce:	bfb8      	it	lt
 800c5d0:	4618      	movlt	r0, r3
 800c5d2:	e7a4      	b.n	800c51e <_printf_i+0x16a>
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	4632      	mov	r2, r6
 800c5d8:	4649      	mov	r1, r9
 800c5da:	4640      	mov	r0, r8
 800c5dc:	47d0      	blx	sl
 800c5de:	3001      	adds	r0, #1
 800c5e0:	d09b      	beq.n	800c51a <_printf_i+0x166>
 800c5e2:	3501      	adds	r5, #1
 800c5e4:	68e3      	ldr	r3, [r4, #12]
 800c5e6:	9903      	ldr	r1, [sp, #12]
 800c5e8:	1a5b      	subs	r3, r3, r1
 800c5ea:	42ab      	cmp	r3, r5
 800c5ec:	dcf2      	bgt.n	800c5d4 <_printf_i+0x220>
 800c5ee:	e7eb      	b.n	800c5c8 <_printf_i+0x214>
 800c5f0:	2500      	movs	r5, #0
 800c5f2:	f104 0619 	add.w	r6, r4, #25
 800c5f6:	e7f5      	b.n	800c5e4 <_printf_i+0x230>
 800c5f8:	0800cdf5 	.word	0x0800cdf5
 800c5fc:	0800ce06 	.word	0x0800ce06

0800c600 <memchr>:
 800c600:	4603      	mov	r3, r0
 800c602:	b510      	push	{r4, lr}
 800c604:	b2c9      	uxtb	r1, r1
 800c606:	4402      	add	r2, r0
 800c608:	4293      	cmp	r3, r2
 800c60a:	4618      	mov	r0, r3
 800c60c:	d101      	bne.n	800c612 <memchr+0x12>
 800c60e:	2000      	movs	r0, #0
 800c610:	e003      	b.n	800c61a <memchr+0x1a>
 800c612:	7804      	ldrb	r4, [r0, #0]
 800c614:	3301      	adds	r3, #1
 800c616:	428c      	cmp	r4, r1
 800c618:	d1f6      	bne.n	800c608 <memchr+0x8>
 800c61a:	bd10      	pop	{r4, pc}

0800c61c <_free_r>:
 800c61c:	b538      	push	{r3, r4, r5, lr}
 800c61e:	4605      	mov	r5, r0
 800c620:	2900      	cmp	r1, #0
 800c622:	d043      	beq.n	800c6ac <_free_r+0x90>
 800c624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c628:	1f0c      	subs	r4, r1, #4
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	bfb8      	it	lt
 800c62e:	18e4      	addlt	r4, r4, r3
 800c630:	f000 f8d0 	bl	800c7d4 <__malloc_lock>
 800c634:	4a1e      	ldr	r2, [pc, #120]	; (800c6b0 <_free_r+0x94>)
 800c636:	6813      	ldr	r3, [r2, #0]
 800c638:	4610      	mov	r0, r2
 800c63a:	b933      	cbnz	r3, 800c64a <_free_r+0x2e>
 800c63c:	6063      	str	r3, [r4, #4]
 800c63e:	6014      	str	r4, [r2, #0]
 800c640:	4628      	mov	r0, r5
 800c642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c646:	f000 b8cb 	b.w	800c7e0 <__malloc_unlock>
 800c64a:	42a3      	cmp	r3, r4
 800c64c:	d90a      	bls.n	800c664 <_free_r+0x48>
 800c64e:	6821      	ldr	r1, [r4, #0]
 800c650:	1862      	adds	r2, r4, r1
 800c652:	4293      	cmp	r3, r2
 800c654:	bf01      	itttt	eq
 800c656:	681a      	ldreq	r2, [r3, #0]
 800c658:	685b      	ldreq	r3, [r3, #4]
 800c65a:	1852      	addeq	r2, r2, r1
 800c65c:	6022      	streq	r2, [r4, #0]
 800c65e:	6063      	str	r3, [r4, #4]
 800c660:	6004      	str	r4, [r0, #0]
 800c662:	e7ed      	b.n	800c640 <_free_r+0x24>
 800c664:	461a      	mov	r2, r3
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	b10b      	cbz	r3, 800c66e <_free_r+0x52>
 800c66a:	42a3      	cmp	r3, r4
 800c66c:	d9fa      	bls.n	800c664 <_free_r+0x48>
 800c66e:	6811      	ldr	r1, [r2, #0]
 800c670:	1850      	adds	r0, r2, r1
 800c672:	42a0      	cmp	r0, r4
 800c674:	d10b      	bne.n	800c68e <_free_r+0x72>
 800c676:	6820      	ldr	r0, [r4, #0]
 800c678:	4401      	add	r1, r0
 800c67a:	1850      	adds	r0, r2, r1
 800c67c:	4283      	cmp	r3, r0
 800c67e:	6011      	str	r1, [r2, #0]
 800c680:	d1de      	bne.n	800c640 <_free_r+0x24>
 800c682:	6818      	ldr	r0, [r3, #0]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	4401      	add	r1, r0
 800c688:	6011      	str	r1, [r2, #0]
 800c68a:	6053      	str	r3, [r2, #4]
 800c68c:	e7d8      	b.n	800c640 <_free_r+0x24>
 800c68e:	d902      	bls.n	800c696 <_free_r+0x7a>
 800c690:	230c      	movs	r3, #12
 800c692:	602b      	str	r3, [r5, #0]
 800c694:	e7d4      	b.n	800c640 <_free_r+0x24>
 800c696:	6820      	ldr	r0, [r4, #0]
 800c698:	1821      	adds	r1, r4, r0
 800c69a:	428b      	cmp	r3, r1
 800c69c:	bf01      	itttt	eq
 800c69e:	6819      	ldreq	r1, [r3, #0]
 800c6a0:	685b      	ldreq	r3, [r3, #4]
 800c6a2:	1809      	addeq	r1, r1, r0
 800c6a4:	6021      	streq	r1, [r4, #0]
 800c6a6:	6063      	str	r3, [r4, #4]
 800c6a8:	6054      	str	r4, [r2, #4]
 800c6aa:	e7c9      	b.n	800c640 <_free_r+0x24>
 800c6ac:	bd38      	pop	{r3, r4, r5, pc}
 800c6ae:	bf00      	nop
 800c6b0:	20001d3c 	.word	0x20001d3c

0800c6b4 <_malloc_r>:
 800c6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b6:	1ccd      	adds	r5, r1, #3
 800c6b8:	f025 0503 	bic.w	r5, r5, #3
 800c6bc:	3508      	adds	r5, #8
 800c6be:	2d0c      	cmp	r5, #12
 800c6c0:	bf38      	it	cc
 800c6c2:	250c      	movcc	r5, #12
 800c6c4:	2d00      	cmp	r5, #0
 800c6c6:	4606      	mov	r6, r0
 800c6c8:	db01      	blt.n	800c6ce <_malloc_r+0x1a>
 800c6ca:	42a9      	cmp	r1, r5
 800c6cc:	d903      	bls.n	800c6d6 <_malloc_r+0x22>
 800c6ce:	230c      	movs	r3, #12
 800c6d0:	6033      	str	r3, [r6, #0]
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6d6:	f000 f87d 	bl	800c7d4 <__malloc_lock>
 800c6da:	4921      	ldr	r1, [pc, #132]	; (800c760 <_malloc_r+0xac>)
 800c6dc:	680a      	ldr	r2, [r1, #0]
 800c6de:	4614      	mov	r4, r2
 800c6e0:	b99c      	cbnz	r4, 800c70a <_malloc_r+0x56>
 800c6e2:	4f20      	ldr	r7, [pc, #128]	; (800c764 <_malloc_r+0xb0>)
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	b923      	cbnz	r3, 800c6f2 <_malloc_r+0x3e>
 800c6e8:	4621      	mov	r1, r4
 800c6ea:	4630      	mov	r0, r6
 800c6ec:	f000 f862 	bl	800c7b4 <_sbrk_r>
 800c6f0:	6038      	str	r0, [r7, #0]
 800c6f2:	4629      	mov	r1, r5
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	f000 f85d 	bl	800c7b4 <_sbrk_r>
 800c6fa:	1c43      	adds	r3, r0, #1
 800c6fc:	d123      	bne.n	800c746 <_malloc_r+0x92>
 800c6fe:	230c      	movs	r3, #12
 800c700:	4630      	mov	r0, r6
 800c702:	6033      	str	r3, [r6, #0]
 800c704:	f000 f86c 	bl	800c7e0 <__malloc_unlock>
 800c708:	e7e3      	b.n	800c6d2 <_malloc_r+0x1e>
 800c70a:	6823      	ldr	r3, [r4, #0]
 800c70c:	1b5b      	subs	r3, r3, r5
 800c70e:	d417      	bmi.n	800c740 <_malloc_r+0x8c>
 800c710:	2b0b      	cmp	r3, #11
 800c712:	d903      	bls.n	800c71c <_malloc_r+0x68>
 800c714:	6023      	str	r3, [r4, #0]
 800c716:	441c      	add	r4, r3
 800c718:	6025      	str	r5, [r4, #0]
 800c71a:	e004      	b.n	800c726 <_malloc_r+0x72>
 800c71c:	6863      	ldr	r3, [r4, #4]
 800c71e:	42a2      	cmp	r2, r4
 800c720:	bf0c      	ite	eq
 800c722:	600b      	streq	r3, [r1, #0]
 800c724:	6053      	strne	r3, [r2, #4]
 800c726:	4630      	mov	r0, r6
 800c728:	f000 f85a 	bl	800c7e0 <__malloc_unlock>
 800c72c:	f104 000b 	add.w	r0, r4, #11
 800c730:	1d23      	adds	r3, r4, #4
 800c732:	f020 0007 	bic.w	r0, r0, #7
 800c736:	1ac2      	subs	r2, r0, r3
 800c738:	d0cc      	beq.n	800c6d4 <_malloc_r+0x20>
 800c73a:	1a1b      	subs	r3, r3, r0
 800c73c:	50a3      	str	r3, [r4, r2]
 800c73e:	e7c9      	b.n	800c6d4 <_malloc_r+0x20>
 800c740:	4622      	mov	r2, r4
 800c742:	6864      	ldr	r4, [r4, #4]
 800c744:	e7cc      	b.n	800c6e0 <_malloc_r+0x2c>
 800c746:	1cc4      	adds	r4, r0, #3
 800c748:	f024 0403 	bic.w	r4, r4, #3
 800c74c:	42a0      	cmp	r0, r4
 800c74e:	d0e3      	beq.n	800c718 <_malloc_r+0x64>
 800c750:	1a21      	subs	r1, r4, r0
 800c752:	4630      	mov	r0, r6
 800c754:	f000 f82e 	bl	800c7b4 <_sbrk_r>
 800c758:	3001      	adds	r0, #1
 800c75a:	d1dd      	bne.n	800c718 <_malloc_r+0x64>
 800c75c:	e7cf      	b.n	800c6fe <_malloc_r+0x4a>
 800c75e:	bf00      	nop
 800c760:	20001d3c 	.word	0x20001d3c
 800c764:	20001d40 	.word	0x20001d40

0800c768 <_realloc_r>:
 800c768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76a:	4607      	mov	r7, r0
 800c76c:	4614      	mov	r4, r2
 800c76e:	460e      	mov	r6, r1
 800c770:	b921      	cbnz	r1, 800c77c <_realloc_r+0x14>
 800c772:	4611      	mov	r1, r2
 800c774:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c778:	f7ff bf9c 	b.w	800c6b4 <_malloc_r>
 800c77c:	b922      	cbnz	r2, 800c788 <_realloc_r+0x20>
 800c77e:	f7ff ff4d 	bl	800c61c <_free_r>
 800c782:	4625      	mov	r5, r4
 800c784:	4628      	mov	r0, r5
 800c786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c788:	f000 f830 	bl	800c7ec <_malloc_usable_size_r>
 800c78c:	42a0      	cmp	r0, r4
 800c78e:	d20f      	bcs.n	800c7b0 <_realloc_r+0x48>
 800c790:	4621      	mov	r1, r4
 800c792:	4638      	mov	r0, r7
 800c794:	f7ff ff8e 	bl	800c6b4 <_malloc_r>
 800c798:	4605      	mov	r5, r0
 800c79a:	2800      	cmp	r0, #0
 800c79c:	d0f2      	beq.n	800c784 <_realloc_r+0x1c>
 800c79e:	4631      	mov	r1, r6
 800c7a0:	4622      	mov	r2, r4
 800c7a2:	f7ff fbc1 	bl	800bf28 <memcpy>
 800c7a6:	4631      	mov	r1, r6
 800c7a8:	4638      	mov	r0, r7
 800c7aa:	f7ff ff37 	bl	800c61c <_free_r>
 800c7ae:	e7e9      	b.n	800c784 <_realloc_r+0x1c>
 800c7b0:	4635      	mov	r5, r6
 800c7b2:	e7e7      	b.n	800c784 <_realloc_r+0x1c>

0800c7b4 <_sbrk_r>:
 800c7b4:	b538      	push	{r3, r4, r5, lr}
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	4d05      	ldr	r5, [pc, #20]	; (800c7d0 <_sbrk_r+0x1c>)
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	4608      	mov	r0, r1
 800c7be:	602b      	str	r3, [r5, #0]
 800c7c0:	f7f5 faf4 	bl	8001dac <_sbrk>
 800c7c4:	1c43      	adds	r3, r0, #1
 800c7c6:	d102      	bne.n	800c7ce <_sbrk_r+0x1a>
 800c7c8:	682b      	ldr	r3, [r5, #0]
 800c7ca:	b103      	cbz	r3, 800c7ce <_sbrk_r+0x1a>
 800c7cc:	6023      	str	r3, [r4, #0]
 800c7ce:	bd38      	pop	{r3, r4, r5, pc}
 800c7d0:	20002e64 	.word	0x20002e64

0800c7d4 <__malloc_lock>:
 800c7d4:	4801      	ldr	r0, [pc, #4]	; (800c7dc <__malloc_lock+0x8>)
 800c7d6:	f000 b811 	b.w	800c7fc <__retarget_lock_acquire_recursive>
 800c7da:	bf00      	nop
 800c7dc:	20002e6c 	.word	0x20002e6c

0800c7e0 <__malloc_unlock>:
 800c7e0:	4801      	ldr	r0, [pc, #4]	; (800c7e8 <__malloc_unlock+0x8>)
 800c7e2:	f000 b80c 	b.w	800c7fe <__retarget_lock_release_recursive>
 800c7e6:	bf00      	nop
 800c7e8:	20002e6c 	.word	0x20002e6c

0800c7ec <_malloc_usable_size_r>:
 800c7ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7f0:	1f18      	subs	r0, r3, #4
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	bfbc      	itt	lt
 800c7f6:	580b      	ldrlt	r3, [r1, r0]
 800c7f8:	18c0      	addlt	r0, r0, r3
 800c7fa:	4770      	bx	lr

0800c7fc <__retarget_lock_acquire_recursive>:
 800c7fc:	4770      	bx	lr

0800c7fe <__retarget_lock_release_recursive>:
 800c7fe:	4770      	bx	lr

0800c800 <_init>:
 800c800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c802:	bf00      	nop
 800c804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c806:	bc08      	pop	{r3}
 800c808:	469e      	mov	lr, r3
 800c80a:	4770      	bx	lr

0800c80c <_fini>:
 800c80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80e:	bf00      	nop
 800c810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c812:	bc08      	pop	{r3}
 800c814:	469e      	mov	lr, r3
 800c816:	4770      	bx	lr
