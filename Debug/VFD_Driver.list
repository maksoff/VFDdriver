
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a604  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800a714  0800a714  0001a714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a860  0800a860  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800a860  0800a860  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a860  0800a860  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a860  0800a860  0001a860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a864  0800a864  0001a864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800a868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ff0  20000180  0800a9e8  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003170  0800a9e8  00023170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025648  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004eae  00000000  00000000  000457f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  0004a6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001668  00000000  00000000  0004bf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce62  00000000  00000000  0004d588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d051  00000000  00000000  0006a3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009845c  00000000  00000000  0008743b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011f897  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006460  00000000  00000000  0011f8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a6fc 	.word	0x0800a6fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800a6fc 	.word	0x0800a6fc

08000150 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8000156:	4b21      	ldr	r3, [pc, #132]	; (80001dc <_DoInit+0x8c>)
 8000158:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2202      	movs	r2, #2
 800015e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2202      	movs	r2, #2
 8000164:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	4a1d      	ldr	r2, [pc, #116]	; (80001e0 <_DoInit+0x90>)
 800016a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4a1d      	ldr	r2, [pc, #116]	; (80001e4 <_DoInit+0x94>)
 8000170:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000178:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2200      	movs	r2, #0
 800017e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	2200      	movs	r2, #0
 8000184:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2200      	movs	r2, #0
 800018a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	4a14      	ldr	r2, [pc, #80]	; (80001e0 <_DoInit+0x90>)
 8000190:	649a      	str	r2, [r3, #72]	; 0x48
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a14      	ldr	r2, [pc, #80]	; (80001e8 <_DoInit+0x98>)
 8000196:	64da      	str	r2, [r3, #76]	; 0x4c
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2210      	movs	r2, #16
 800019c:	651a      	str	r2, [r3, #80]	; 0x50
  p->aDown[0].RdOff         = 0u;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	659a      	str	r2, [r3, #88]	; 0x58
  p->aDown[0].WrOff         = 0u;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2200      	movs	r2, #0
 80001a8:	655a      	str	r2, [r3, #84]	; 0x54
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2200      	movs	r2, #0
 80001ae:	65da      	str	r2, [r3, #92]	; 0x5c
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	3307      	adds	r3, #7
 80001b4:	4a0d      	ldr	r2, [pc, #52]	; (80001ec <_DoInit+0x9c>)
 80001b6:	6810      	ldr	r0, [r2, #0]
 80001b8:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	4a0c      	ldr	r2, [pc, #48]	; (80001f0 <_DoInit+0xa0>)
 80001be:	6810      	ldr	r0, [r2, #0]
 80001c0:	6018      	str	r0, [r3, #0]
 80001c2:	8891      	ldrh	r1, [r2, #4]
 80001c4:	7992      	ldrb	r2, [r2, #6]
 80001c6:	8099      	strh	r1, [r3, #4]
 80001c8:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2220      	movs	r2, #32
 80001ce:	719a      	strb	r2, [r3, #6]
}
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	200020d8 	.word	0x200020d8
 80001e0:	0800a714 	.word	0x0800a714
 80001e4:	2000019c 	.word	0x2000019c
 80001e8:	2000059c 	.word	0x2000059c
 80001ec:	0800a720 	.word	0x0800a720
 80001f0:	0800a724 	.word	0x0800a724

080001f4 <SEGGER_RTT_PutChar>:
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/

unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	460b      	mov	r3, r1
 80001fe:	70fb      	strb	r3, [r7, #3]
  unsigned              WrOff;
  unsigned              Status;
  //
  // Prepare
  //
  INIT();
 8000200:	4b23      	ldr	r3, [pc, #140]	; (8000290 <SEGGER_RTT_PutChar+0x9c>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d101      	bne.n	800020c <SEGGER_RTT_PutChar+0x18>
 8000208:	f7ff ffa2 	bl	8000150 <_DoInit>
  SEGGER_RTT_LOCK();
 800020c:	f3ef 8311 	mrs	r3, BASEPRI
 8000210:	f04f 0120 	mov.w	r1, #32
 8000214:	f381 8811 	msr	BASEPRI, r1
 8000218:	60fb      	str	r3, [r7, #12]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	1c5a      	adds	r2, r3, #1
 800021e:	4613      	mov	r3, r2
 8000220:	005b      	lsls	r3, r3, #1
 8000222:	4413      	add	r3, r2
 8000224:	00db      	lsls	r3, r3, #3
 8000226:	4a1a      	ldr	r2, [pc, #104]	; (8000290 <SEGGER_RTT_PutChar+0x9c>)
 8000228:	4413      	add	r3, r2
 800022a:	60bb      	str	r3, [r7, #8]
  //
  // Get write position and handle wrap-around if necessary
  //
  WrOff = pRing->WrOff + 1;
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	3301      	adds	r3, #1
 8000232:	617b      	str	r3, [r7, #20]
  if (WrOff == pRing->SizeOfBuffer) {
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	697a      	ldr	r2, [r7, #20]
 800023a:	429a      	cmp	r2, r3
 800023c:	d101      	bne.n	8000242 <SEGGER_RTT_PutChar+0x4e>
    WrOff = 0;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
  }
  //
  // Wait for free space if mode is set to blocking
  //
  if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	2b02      	cmp	r3, #2
 8000248:	d105      	bne.n	8000256 <SEGGER_RTT_PutChar+0x62>
    while (WrOff == pRing->RdOff) {
 800024a:	bf00      	nop
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	691b      	ldr	r3, [r3, #16]
 8000250:	697a      	ldr	r2, [r7, #20]
 8000252:	429a      	cmp	r2, r3
 8000254:	d0fa      	beq.n	800024c <SEGGER_RTT_PutChar+0x58>
    }
  }
  //
  // Output byte if free space is available
  //
  if (WrOff != pRing->RdOff) {
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	691b      	ldr	r3, [r3, #16]
 800025a:	697a      	ldr	r2, [r7, #20]
 800025c:	429a      	cmp	r2, r3
 800025e:	d00c      	beq.n	800027a <SEGGER_RTT_PutChar+0x86>
    pRing->pBuffer[pRing->WrOff] = c;
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	685a      	ldr	r2, [r3, #4]
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	4413      	add	r3, r2
 800026a:	78fa      	ldrb	r2, [r7, #3]
 800026c:	701a      	strb	r2, [r3, #0]
    pRing->WrOff = WrOff;
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	697a      	ldr	r2, [r7, #20]
 8000272:	60da      	str	r2, [r3, #12]
    Status = 1;
 8000274:	2301      	movs	r3, #1
 8000276:	613b      	str	r3, [r7, #16]
 8000278:	e001      	b.n	800027e <SEGGER_RTT_PutChar+0x8a>
  } else {
    Status = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	613b      	str	r3, [r7, #16]
  }
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8000284:	693b      	ldr	r3, [r7, #16]
}
 8000286:	4618      	mov	r0, r3
 8000288:	3718      	adds	r7, #24
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	200020d8 	.word	0x200020d8

08000294 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (64, sizeof(uint8_t), &qUSB_rcv_attributes);
 8000298:	4a10      	ldr	r2, [pc, #64]	; (80002dc <MX_FREERTOS_Init+0x48>)
 800029a:	2101      	movs	r1, #1
 800029c:	2040      	movs	r0, #64	; 0x40
 800029e:	f007 f815 	bl	80072cc <osMessageQueueNew>
 80002a2:	4603      	mov	r3, r0
 80002a4:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <MX_FREERTOS_Init+0x4c>)
 80002a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002a8:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <MX_FREERTOS_Init+0x50>)
 80002aa:	2100      	movs	r1, #0
 80002ac:	480e      	ldr	r0, [pc, #56]	; (80002e8 <MX_FREERTOS_Init+0x54>)
 80002ae:	f006 ff35 	bl	800711c <osThreadNew>
 80002b2:	4603      	mov	r3, r0
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <MX_FREERTOS_Init+0x58>)
 80002b6:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <MX_FREERTOS_Init+0x5c>)
 80002ba:	2100      	movs	r1, #0
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <MX_FREERTOS_Init+0x60>)
 80002be:	f006 ff2d 	bl	800711c <osThreadNew>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4a0c      	ldr	r2, [pc, #48]	; (80002f8 <MX_FREERTOS_Init+0x64>)
 80002c6:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 80002c8:	4a0c      	ldr	r2, [pc, #48]	; (80002fc <MX_FREERTOS_Init+0x68>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	480c      	ldr	r0, [pc, #48]	; (8000300 <MX_FREERTOS_Init+0x6c>)
 80002ce:	f006 ff25 	bl	800711c <osThreadNew>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <MX_FREERTOS_Init+0x70>)
 80002d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	0800a830 	.word	0x0800a830
 80002e0:	2000215c 	.word	0x2000215c
 80002e4:	0800a7c4 	.word	0x0800a7c4
 80002e8:	08000309 	.word	0x08000309
 80002ec:	20002150 	.word	0x20002150
 80002f0:	0800a7e8 	.word	0x0800a7e8
 80002f4:	08000345 	.word	0x08000345
 80002f8:	20002154 	.word	0x20002154
 80002fc:	0800a80c 	.word	0x0800a80c
 8000300:	08000379 	.word	0x08000379
 8000304:	20002158 	.word	0x20002158

08000308 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000310:	f009 fd2c 	bl	8009d6c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  qUSB_rcvQueue = qUSB_rcvHandle;
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <StartDefaultTask+0x30>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a08      	ldr	r2, [pc, #32]	; (800033c <StartDefaultTask+0x34>)
 800031a:	6013      	str	r3, [r2, #0]

  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000322:	4807      	ldr	r0, [pc, #28]	; (8000340 <StartDefaultTask+0x38>)
 8000324:	f000 fc9c 	bl	8000c60 <HAL_GPIO_WritePin>

  vTaskDelete(NULL);
 8000328:	2000      	movs	r0, #0
 800032a:	f007 fff1 	bl	8008310 <vTaskDelete>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f006 ff9e 	bl	8007270 <osDelay>
 8000334:	e7fb      	b.n	800032e <StartDefaultTask+0x26>
 8000336:	bf00      	nop
 8000338:	2000215c 	.word	0x2000215c
 800033c:	20002160 	.word	0x20002160
 8000340:	40010800 	.word	0x40010800

08000344 <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 800034c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000350:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 8000352:	f008 fa13 	bl	800877c <xTaskGetTickCount>
 8000356:	4603      	mov	r3, r0
 8000358:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800035a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035e:	4805      	ldr	r0, [pc, #20]	; (8000374 <StartLEDheartbeat+0x30>)
 8000360:	f000 fc96 	bl	8000c90 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000364:	f107 0308 	add.w	r3, r7, #8
 8000368:	68f9      	ldr	r1, [r7, #12]
 800036a:	4618      	mov	r0, r3
 800036c:	f008 f842 	bl	80083f4 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000370:	e7ef      	b.n	8000352 <StartLEDheartbeat+0xe>
 8000372:	bf00      	nop
 8000374:	40011000 	.word	0x40011000

08000378 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUSB_rcv */
  /* Infinite loop */
	char buf;
  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <StartUSB_rcv+0x28>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f107 010f 	add.w	r1, r7, #15
 8000388:	f04f 32ff 	mov.w	r2, #4294967295
 800038c:	4618      	mov	r0, r3
 800038e:	f007 fbdb 	bl	8007b48 <xQueueReceive>
	  SEGGER_RTT_PutChar(0, buf);
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	4619      	mov	r1, r3
 8000396:	2000      	movs	r0, #0
 8000398:	f7ff ff2c 	bl	80001f4 <SEGGER_RTT_PutChar>
  {
 800039c:	e7f0      	b.n	8000380 <StartUSB_rcv+0x8>
 800039e:	bf00      	nop
 80003a0:	20002160 	.word	0x20002160

080003a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 0310 	add.w	r3, r7, #16
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b8:	4b28      	ldr	r3, [pc, #160]	; (800045c <MX_GPIO_Init+0xb8>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a27      	ldr	r2, [pc, #156]	; (800045c <MX_GPIO_Init+0xb8>)
 80003be:	f043 0310 	orr.w	r3, r3, #16
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b25      	ldr	r3, [pc, #148]	; (800045c <MX_GPIO_Init+0xb8>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0310 	and.w	r3, r3, #16
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d0:	4b22      	ldr	r3, [pc, #136]	; (800045c <MX_GPIO_Init+0xb8>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a21      	ldr	r2, [pc, #132]	; (800045c <MX_GPIO_Init+0xb8>)
 80003d6:	f043 0320 	orr.w	r3, r3, #32
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b1f      	ldr	r3, [pc, #124]	; (800045c <MX_GPIO_Init+0xb8>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0320 	and.w	r3, r3, #32
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e8:	4b1c      	ldr	r3, [pc, #112]	; (800045c <MX_GPIO_Init+0xb8>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a1b      	ldr	r2, [pc, #108]	; (800045c <MX_GPIO_Init+0xb8>)
 80003ee:	f043 0304 	orr.w	r3, r3, #4
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b19      	ldr	r3, [pc, #100]	; (800045c <MX_GPIO_Init+0xb8>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0304 	and.w	r3, r3, #4
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000400:	2201      	movs	r2, #1
 8000402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000406:	4816      	ldr	r0, [pc, #88]	; (8000460 <MX_GPIO_Init+0xbc>)
 8000408:	f000 fc2a 	bl	8000c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000412:	4814      	ldr	r0, [pc, #80]	; (8000464 <MX_GPIO_Init+0xc0>)
 8000414:	f000 fc24 	bl	8000c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041e:	2301      	movs	r3, #1
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000426:	2302      	movs	r3, #2
 8000428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	4619      	mov	r1, r3
 8000430:	480b      	ldr	r0, [pc, #44]	; (8000460 <MX_GPIO_Init+0xbc>)
 8000432:	f000 fa91 	bl	8000958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800043a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043c:	2301      	movs	r3, #1
 800043e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	2302      	movs	r3, #2
 8000446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	4805      	ldr	r0, [pc, #20]	; (8000464 <MX_GPIO_Init+0xc0>)
 8000450:	f000 fa82 	bl	8000958 <HAL_GPIO_Init>

}
 8000454:	bf00      	nop
 8000456:	3720      	adds	r7, #32
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000
 8000460:	40011000 	.word	0x40011000
 8000464:	40010800 	.word	0x40010800

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046c:	f000 f962 	bl	8000734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000470:	f000 f809 	bl	8000486 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000474:	f7ff ff96 	bl	80003a4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000478:	f006 fdea 	bl	8007050 <osKernelInitialize>
  MX_FREERTOS_Init();
 800047c:	f7ff ff0a 	bl	8000294 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000480:	f006 fe18 	bl	80070b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000484:	e7fe      	b.n	8000484 <main+0x1c>

08000486 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	b094      	sub	sp, #80	; 0x50
 800048a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000490:	2228      	movs	r2, #40	; 0x28
 8000492:	2100      	movs	r1, #0
 8000494:	4618      	mov	r0, r3
 8000496:	f00a f929 	bl	800a6ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004b6:	2301      	movs	r3, #1
 80004b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c4:	2301      	movs	r3, #1
 80004c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c8:	2302      	movs	r3, #2
 80004ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004dc:	4618      	mov	r0, r3
 80004de:	f002 f8b5 	bl	800264c <HAL_RCC_OscConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004e8:	f000 f83a 	bl	8000560 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ec:	230f      	movs	r3, #15
 80004ee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f0:	2302      	movs	r3, #2
 80004f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	2101      	movs	r1, #1
 8000508:	4618      	mov	r0, r3
 800050a:	f002 fb1f 	bl	8002b4c <HAL_RCC_ClockConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000514:	f000 f824 	bl	8000560 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000518:	2310      	movs	r3, #16
 800051a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800051c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000520:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	4618      	mov	r0, r3
 8000526:	f002 fcc7 	bl	8002eb8 <HAL_RCCEx_PeriphCLKConfig>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000530:	f000 f816 	bl	8000560 <Error_Handler>
  }
}
 8000534:	bf00      	nop
 8000536:	3750      	adds	r7, #80	; 0x50
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d101      	bne.n	8000552 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800054e:	f000 f907 	bl	8000760 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40012c00 	.word	0x40012c00

08000560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000564:	b672      	cpsid	i
}
 8000566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000568:	e7fe      	b.n	8000568 <Error_Handler+0x8>
	...

0800056c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <HAL_MspInit+0x68>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <HAL_MspInit+0x68>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <HAL_MspInit+0x68>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <HAL_MspInit+0x68>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <HAL_MspInit+0x68>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <HAL_MspInit+0x68>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	210f      	movs	r1, #15
 80005a6:	f06f 0001 	mvn.w	r0, #1
 80005aa:	f000 f9aa 	bl	8000902 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <HAL_MspInit+0x6c>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_MspInit+0x6c>)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010000 	.word	0x40010000

080005dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08c      	sub	sp, #48	; 0x30
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	2019      	movs	r0, #25
 80005f2:	f000 f986 	bl	8000902 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80005f6:	2019      	movs	r0, #25
 80005f8:	f000 f99f 	bl	800093a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005fc:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <HAL_InitTick+0x9c>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <HAL_InitTick+0x9c>)
 8000602:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <HAL_InitTick+0x9c>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000614:	f107 0210 	add.w	r2, r7, #16
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fbfc 	bl	8002e1c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000624:	f002 fbe6 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8000628:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062c:	4a13      	ldr	r2, [pc, #76]	; (800067c <HAL_InitTick+0xa0>)
 800062e:	fba2 2303 	umull	r2, r3, r2, r3
 8000632:	0c9b      	lsrs	r3, r3, #18
 8000634:	3b01      	subs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <HAL_InitTick+0xa4>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <HAL_InitTick+0xa8>)
 800063c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <HAL_InitTick+0xa4>)
 8000640:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000644:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <HAL_InitTick+0xa4>)
 8000648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800064a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <HAL_InitTick+0xa4>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <HAL_InitTick+0xa4>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <HAL_InitTick+0xa4>)
 800065a:	f002 fce3 	bl	8003024 <HAL_TIM_Base_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d104      	bne.n	800066e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000664:	4806      	ldr	r0, [pc, #24]	; (8000680 <HAL_InitTick+0xa4>)
 8000666:	f002 fd35 	bl	80030d4 <HAL_TIM_Base_Start_IT>
 800066a:	4603      	mov	r3, r0
 800066c:	e000      	b.n	8000670 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
}
 8000670:	4618      	mov	r0, r3
 8000672:	3730      	adds	r7, #48	; 0x30
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000
 800067c:	431bde83 	.word	0x431bde83
 8000680:	20002164 	.word	0x20002164
 8000684:	40012c00 	.word	0x40012c00

08000688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800068c:	e7fe      	b.n	800068c <NMI_Handler+0x4>

0800068e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <HardFault_Handler+0x4>

08000694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <MemManage_Handler+0x4>

0800069a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
	...

080006b4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006b8:	4802      	ldr	r0, [pc, #8]	; (80006c4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006ba:	f000 fc33 	bl	8000f24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20002e84 	.word	0x20002e84

080006c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <TIM1_UP_IRQHandler+0x10>)
 80006ce:	f002 fd53 	bl	8003178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20002164 	.word	0x20002164

080006dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ea:	490d      	ldr	r1, [pc, #52]	; (8000720 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f0:	e002      	b.n	80006f8 <LoopCopyDataInit>

080006f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f6:	3304      	adds	r3, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006fc:	d3f9      	bcc.n	80006f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000700:	4c0a      	ldr	r4, [pc, #40]	; (800072c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000704:	e001      	b.n	800070a <LoopFillZerobss>

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000708:	3204      	adds	r2, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800070e:	f7ff ffe5 	bl	80006dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000712:	f009 ffb9 	bl	800a688 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000716:	f7ff fea7 	bl	8000468 <main>
  bx lr
 800071a:	4770      	bx	lr
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000724:	0800a868 	.word	0x0800a868
  ldr r2, =_sbss
 8000728:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800072c:	20003170 	.word	0x20003170

08000730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC1_2_IRQHandler>
	...

08000734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <HAL_Init+0x28>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a07      	ldr	r2, [pc, #28]	; (800075c <HAL_Init+0x28>)
 800073e:	f043 0310 	orr.w	r3, r3, #16
 8000742:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000744:	2003      	movs	r0, #3
 8000746:	f000 f8d1 	bl	80008ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800074a:	2000      	movs	r0, #0
 800074c:	f7ff ff46 	bl	80005dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000750:	f7ff ff0c 	bl	800056c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40022000 	.word	0x40022000

08000760 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_IncTick+0x1c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_IncTick+0x20>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4413      	add	r3, r2
 8000770:	4a03      	ldr	r2, [pc, #12]	; (8000780 <HAL_IncTick+0x20>)
 8000772:	6013      	str	r3, [r2, #0]
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	20000008 	.word	0x20000008
 8000780:	200021ac 	.word	0x200021ac

08000784 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return uwTick;
 8000788:	4b02      	ldr	r3, [pc, #8]	; (8000794 <HAL_GetTick+0x10>)
 800078a:	681b      	ldr	r3, [r3, #0]
}
 800078c:	4618      	mov	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	200021ac 	.word	0x200021ac

08000798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b4:	4013      	ands	r3, r2
 80007b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ca:	4a04      	ldr	r2, [pc, #16]	; (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	60d3      	str	r3, [r2, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <__NVIC_GetPriorityGrouping+0x18>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	f003 0307 	and.w	r3, r3, #7
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	2b00      	cmp	r3, #0
 800080c:	db0b      	blt.n	8000826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f003 021f 	and.w	r2, r3, #31
 8000814:	4906      	ldr	r1, [pc, #24]	; (8000830 <__NVIC_EnableIRQ+0x34>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	095b      	lsrs	r3, r3, #5
 800081c:	2001      	movs	r0, #1
 800081e:	fa00 f202 	lsl.w	r2, r0, r2
 8000822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	e000e100 	.word	0xe000e100

08000834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	db0a      	blt.n	800085e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	490c      	ldr	r1, [pc, #48]	; (8000880 <__NVIC_SetPriority+0x4c>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	0112      	lsls	r2, r2, #4
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	440b      	add	r3, r1
 8000858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800085c:	e00a      	b.n	8000874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4908      	ldr	r1, [pc, #32]	; (8000884 <__NVIC_SetPriority+0x50>)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	3b04      	subs	r3, #4
 800086c:	0112      	lsls	r2, r2, #4
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	440b      	add	r3, r1
 8000872:	761a      	strb	r2, [r3, #24]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000e100 	.word	0xe000e100
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000888:	b480      	push	{r7}
 800088a:	b089      	sub	sp, #36	; 0x24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	f1c3 0307 	rsb	r3, r3, #7
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	bf28      	it	cs
 80008a6:	2304      	movcs	r3, #4
 80008a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3304      	adds	r3, #4
 80008ae:	2b06      	cmp	r3, #6
 80008b0:	d902      	bls.n	80008b8 <NVIC_EncodePriority+0x30>
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3b03      	subs	r3, #3
 80008b6:	e000      	b.n	80008ba <NVIC_EncodePriority+0x32>
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	f04f 32ff 	mov.w	r2, #4294967295
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43da      	mvns	r2, r3
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	401a      	ands	r2, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d0:	f04f 31ff 	mov.w	r1, #4294967295
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	43d9      	mvns	r1, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e0:	4313      	orrs	r3, r2
         );
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3724      	adds	r7, #36	; 0x24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff4f 	bl	8000798 <__NVIC_SetPriorityGrouping>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
 800090e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000914:	f7ff ff64 	bl	80007e0 <__NVIC_GetPriorityGrouping>
 8000918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	6978      	ldr	r0, [r7, #20]
 8000920:	f7ff ffb2 	bl	8000888 <NVIC_EncodePriority>
 8000924:	4602      	mov	r2, r0
 8000926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff81 	bl	8000834 <__NVIC_SetPriority>
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff57 	bl	80007fc <__NVIC_EnableIRQ>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000958:	b480      	push	{r7}
 800095a:	b08b      	sub	sp, #44	; 0x2c
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096a:	e169      	b.n	8000c40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800096c:	2201      	movs	r2, #1
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	4013      	ands	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	429a      	cmp	r2, r3
 8000986:	f040 8158 	bne.w	8000c3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	4a9a      	ldr	r2, [pc, #616]	; (8000bf8 <HAL_GPIO_Init+0x2a0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d05e      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 8000994:	4a98      	ldr	r2, [pc, #608]	; (8000bf8 <HAL_GPIO_Init+0x2a0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d875      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 800099a:	4a98      	ldr	r2, [pc, #608]	; (8000bfc <HAL_GPIO_Init+0x2a4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d058      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009a0:	4a96      	ldr	r2, [pc, #600]	; (8000bfc <HAL_GPIO_Init+0x2a4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d86f      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009a6:	4a96      	ldr	r2, [pc, #600]	; (8000c00 <HAL_GPIO_Init+0x2a8>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d052      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009ac:	4a94      	ldr	r2, [pc, #592]	; (8000c00 <HAL_GPIO_Init+0x2a8>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d869      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009b2:	4a94      	ldr	r2, [pc, #592]	; (8000c04 <HAL_GPIO_Init+0x2ac>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d04c      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009b8:	4a92      	ldr	r2, [pc, #584]	; (8000c04 <HAL_GPIO_Init+0x2ac>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d863      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009be:	4a92      	ldr	r2, [pc, #584]	; (8000c08 <HAL_GPIO_Init+0x2b0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d046      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009c4:	4a90      	ldr	r2, [pc, #576]	; (8000c08 <HAL_GPIO_Init+0x2b0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d85d      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d82a      	bhi.n	8000a24 <HAL_GPIO_Init+0xcc>
 80009ce:	2b12      	cmp	r3, #18
 80009d0:	d859      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009d2:	a201      	add	r2, pc, #4	; (adr r2, 80009d8 <HAL_GPIO_Init+0x80>)
 80009d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d8:	08000a53 	.word	0x08000a53
 80009dc:	08000a2d 	.word	0x08000a2d
 80009e0:	08000a3f 	.word	0x08000a3f
 80009e4:	08000a81 	.word	0x08000a81
 80009e8:	08000a87 	.word	0x08000a87
 80009ec:	08000a87 	.word	0x08000a87
 80009f0:	08000a87 	.word	0x08000a87
 80009f4:	08000a87 	.word	0x08000a87
 80009f8:	08000a87 	.word	0x08000a87
 80009fc:	08000a87 	.word	0x08000a87
 8000a00:	08000a87 	.word	0x08000a87
 8000a04:	08000a87 	.word	0x08000a87
 8000a08:	08000a87 	.word	0x08000a87
 8000a0c:	08000a87 	.word	0x08000a87
 8000a10:	08000a87 	.word	0x08000a87
 8000a14:	08000a87 	.word	0x08000a87
 8000a18:	08000a87 	.word	0x08000a87
 8000a1c:	08000a35 	.word	0x08000a35
 8000a20:	08000a49 	.word	0x08000a49
 8000a24:	4a79      	ldr	r2, [pc, #484]	; (8000c0c <HAL_GPIO_Init+0x2b4>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d013      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a2a:	e02c      	b.n	8000a86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	623b      	str	r3, [r7, #32]
          break;
 8000a32:	e029      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	623b      	str	r3, [r7, #32]
          break;
 8000a3c:	e024      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	3308      	adds	r3, #8
 8000a44:	623b      	str	r3, [r7, #32]
          break;
 8000a46:	e01f      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	330c      	adds	r3, #12
 8000a4e:	623b      	str	r3, [r7, #32]
          break;
 8000a50:	e01a      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d102      	bne.n	8000a60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	623b      	str	r3, [r7, #32]
          break;
 8000a5e:	e013      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d105      	bne.n	8000a74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	69fa      	ldr	r2, [r7, #28]
 8000a70:	611a      	str	r2, [r3, #16]
          break;
 8000a72:	e009      	b.n	8000a88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a74:	2308      	movs	r3, #8
 8000a76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	69fa      	ldr	r2, [r7, #28]
 8000a7c:	615a      	str	r2, [r3, #20]
          break;
 8000a7e:	e003      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
          break;
 8000a84:	e000      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          break;
 8000a86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	2bff      	cmp	r3, #255	; 0xff
 8000a8c:	d801      	bhi.n	8000a92 <HAL_GPIO_Init+0x13a>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	e001      	b.n	8000a96 <HAL_GPIO_Init+0x13e>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3304      	adds	r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	2bff      	cmp	r3, #255	; 0xff
 8000a9c:	d802      	bhi.n	8000aa4 <HAL_GPIO_Init+0x14c>
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	e002      	b.n	8000aaa <HAL_GPIO_Init+0x152>
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	3b08      	subs	r3, #8
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	401a      	ands	r2, r3
 8000abc:	6a39      	ldr	r1, [r7, #32]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 80b1 	beq.w	8000c3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad8:	4b4d      	ldr	r3, [pc, #308]	; (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a4c      	ldr	r2, [pc, #304]	; (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	; (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000af0:	4a48      	ldr	r2, [pc, #288]	; (8000c14 <HAL_GPIO_Init+0x2bc>)
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3302      	adds	r3, #2
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	220f      	movs	r2, #15
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a40      	ldr	r2, [pc, #256]	; (8000c18 <HAL_GPIO_Init+0x2c0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d013      	beq.n	8000b44 <HAL_GPIO_Init+0x1ec>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a3f      	ldr	r2, [pc, #252]	; (8000c1c <HAL_GPIO_Init+0x2c4>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d00d      	beq.n	8000b40 <HAL_GPIO_Init+0x1e8>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a3e      	ldr	r2, [pc, #248]	; (8000c20 <HAL_GPIO_Init+0x2c8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d007      	beq.n	8000b3c <HAL_GPIO_Init+0x1e4>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a3d      	ldr	r2, [pc, #244]	; (8000c24 <HAL_GPIO_Init+0x2cc>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d101      	bne.n	8000b38 <HAL_GPIO_Init+0x1e0>
 8000b34:	2303      	movs	r3, #3
 8000b36:	e006      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b38:	2304      	movs	r3, #4
 8000b3a:	e004      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	e002      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b44:	2300      	movs	r3, #0
 8000b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b48:	f002 0203 	and.w	r2, r2, #3
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	4093      	lsls	r3, r2
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b56:	492f      	ldr	r1, [pc, #188]	; (8000c14 <HAL_GPIO_Init+0x2bc>)
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b70:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	492c      	ldr	r1, [pc, #176]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	600b      	str	r3, [r1, #0]
 8000b7c:	e006      	b.n	8000b8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4928      	ldr	r1, [pc, #160]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	4922      	ldr	r1, [pc, #136]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	604b      	str	r3, [r1, #4]
 8000ba4:	e006      	b.n	8000bb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	491e      	ldr	r1, [pc, #120]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d006      	beq.n	8000bce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	4918      	ldr	r1, [pc, #96]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	608b      	str	r3, [r1, #8]
 8000bcc:	e006      	b.n	8000bdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	4914      	ldr	r1, [pc, #80]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d021      	beq.n	8000c2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bea:	68da      	ldr	r2, [r3, #12]
 8000bec:	490e      	ldr	r1, [pc, #56]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	60cb      	str	r3, [r1, #12]
 8000bf4:	e021      	b.n	8000c3a <HAL_GPIO_Init+0x2e2>
 8000bf6:	bf00      	nop
 8000bf8:	10320000 	.word	0x10320000
 8000bfc:	10310000 	.word	0x10310000
 8000c00:	10220000 	.word	0x10220000
 8000c04:	10210000 	.word	0x10210000
 8000c08:	10120000 	.word	0x10120000
 8000c0c:	10110000 	.word	0x10110000
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010000 	.word	0x40010000
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	40011000 	.word	0x40011000
 8000c24:	40011400 	.word	0x40011400
 8000c28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_GPIO_Init+0x304>)
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	4909      	ldr	r1, [pc, #36]	; (8000c5c <HAL_GPIO_Init+0x304>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f47f ae8e 	bne.w	800096c <HAL_GPIO_Init+0x14>
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	372c      	adds	r7, #44	; 0x2c
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40010400 	.word	0x40010400

08000c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c70:	787b      	ldrb	r3, [r7, #1]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c7c:	e003      	b.n	8000c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	041a      	lsls	r2, r3, #16
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	611a      	str	r2, [r3, #16]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ca2:	887a      	ldrh	r2, [r7, #2]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	041a      	lsls	r2, r3, #16
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	43d9      	mvns	r1, r3
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	400b      	ands	r3, r1
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	611a      	str	r2, [r3, #16]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr

08000cc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc4:	b08b      	sub	sp, #44	; 0x2c
 8000cc6:	af06      	add	r7, sp, #24
 8000cc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e0fd      	b.n	8000ed0 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d106      	bne.n	8000cee <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f009 fa23 	bl	800a134 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fc02 	bl	8003504 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	687e      	ldr	r6, [r7, #4]
 8000d08:	466d      	mov	r5, sp
 8000d0a:	f106 0410 	add.w	r4, r6, #16
 8000d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	602b      	str	r3, [r5, #0]
 8000d16:	1d33      	adds	r3, r6, #4
 8000d18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d1a:	6838      	ldr	r0, [r7, #0]
 8000d1c:	f002 fbcc 	bl	80034b8 <USB_CoreInit>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2202      	movs	r2, #2
 8000d2a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e0ce      	b.n	8000ed0 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f002 fbfd 	bl	8003538 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e04c      	b.n	8000dde <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	1c5a      	adds	r2, r3, #1
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	440b      	add	r3, r1
 8000d54:	3301      	adds	r3, #1
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	4613      	mov	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	440b      	add	r3, r1
 8000d6a:	7bfa      	ldrb	r2, [r7, #15]
 8000d6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d6e:	7bfa      	ldrb	r2, [r7, #15]
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	b298      	uxth	r0, r3
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	4613      	mov	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	440b      	add	r3, r1
 8000d80:	3336      	adds	r3, #54	; 0x36
 8000d82:	4602      	mov	r2, r0
 8000d84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3303      	adds	r3, #3
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d9c:	7bfa      	ldrb	r2, [r7, #15]
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	4613      	mov	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	440b      	add	r3, r1
 8000daa:	3338      	adds	r3, #56	; 0x38
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000db0:	7bfa      	ldrb	r2, [r7, #15]
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	440b      	add	r3, r1
 8000dbe:	333c      	adds	r3, #60	; 0x3c
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000dc4:	7bfa      	ldrb	r2, [r7, #15]
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	440b      	add	r3, r1
 8000dd2:	3340      	adds	r3, #64	; 0x40
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	7bfa      	ldrb	r2, [r7, #15]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d3ad      	bcc.n	8000d44 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	e044      	b.n	8000e78 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000dee:	7bfa      	ldrb	r2, [r7, #15]
 8000df0:	6879      	ldr	r1, [r7, #4]
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e04:	7bfa      	ldrb	r2, [r7, #15]
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	440b      	add	r3, r1
 8000e12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e16:	7bfa      	ldrb	r2, [r7, #15]
 8000e18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e1a:	7bfa      	ldrb	r2, [r7, #15]
 8000e1c:	6879      	ldr	r1, [r7, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	440b      	add	r3, r1
 8000e28:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	440b      	add	r3, r1
 8000e3e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e46:	7bfa      	ldrb	r2, [r7, #15]
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	440b      	add	r3, r1
 8000e54:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e5c:	7bfa      	ldrb	r2, [r7, #15]
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	440b      	add	r3, r1
 8000e6a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	3301      	adds	r3, #1
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	7bfa      	ldrb	r2, [r7, #15]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d3b5      	bcc.n	8000dee <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	687e      	ldr	r6, [r7, #4]
 8000e8a:	466d      	mov	r5, sp
 8000e8c:	f106 0410 	add.w	r4, r6, #16
 8000e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e94:	6823      	ldr	r3, [r4, #0]
 8000e96:	602b      	str	r3, [r5, #0]
 8000e98:	1d33      	adds	r3, r6, #4
 8000e9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e9c:	6838      	ldr	r0, [r7, #0]
 8000e9e:	f002 fb57 	bl	8003550 <USB_DevInit>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d005      	beq.n	8000eb4 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2202      	movs	r2, #2
 8000eac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e00d      	b.n	8000ed0 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f004 fcc8 	bl	800585e <USB_DevDisconnect>

  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ed8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d101      	bne.n	8000eee <HAL_PCD_Start+0x16>
 8000eea:	2302      	movs	r3, #2
 8000eec:	e016      	b.n	8000f1c <HAL_PCD_Start+0x44>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 faec 	bl	80034d8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000f00:	2101      	movs	r1, #1
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f009 fb89 	bl	800a61a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f004 fc9c 	bl	800584a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 fc9e 	bl	8005872 <USB_ReadInterrupts>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f40:	d102      	bne.n	8000f48 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 fb61 	bl	800160a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 fc90 	bl	8005872 <USB_ReadInterrupts>
 8000f52:	4603      	mov	r3, r0
 8000f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f5c:	d112      	bne.n	8000f84 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f70:	b292      	uxth	r2, r2
 8000f72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f009 f957 	bl	800a22a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f925 	bl	80011ce <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f004 fc72 	bl	8005872 <USB_ReadInterrupts>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f98:	d10b      	bne.n	8000fb2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000fac:	b292      	uxth	r2, r2
 8000fae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f004 fc5b 	bl	8005872 <USB_ReadInterrupts>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fc6:	d10b      	bne.n	8000fe0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f004 fc44 	bl	8005872 <USB_ReadInterrupts>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ff4:	d126      	bne.n	8001044 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0204 	bic.w	r2, r2, #4
 8001008:	b292      	uxth	r2, r2
 800100a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001016:	b29a      	uxth	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0208 	bic.w	r2, r2, #8
 8001020:	b292      	uxth	r2, r2
 8001022:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f009 f938 	bl	800a29c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001034:	b29a      	uxth	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800103e:	b292      	uxth	r2, r2
 8001040:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f004 fc12 	bl	8005872 <USB_ReadInterrupts>
 800104e:	4603      	mov	r3, r0
 8001050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001058:	f040 8084 	bne.w	8001164 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800105c:	2300      	movs	r3, #0
 800105e:	77fb      	strb	r3, [r7, #31]
 8001060:	e011      	b.n	8001086 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	7ffb      	ldrb	r3, [r7, #31]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	441a      	add	r2, r3
 800106e:	7ffb      	ldrb	r3, [r7, #31]
 8001070:	8812      	ldrh	r2, [r2, #0]
 8001072:	b292      	uxth	r2, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	f107 0120 	add.w	r1, r7, #32
 800107a:	440b      	add	r3, r1
 800107c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001080:	7ffb      	ldrb	r3, [r7, #31]
 8001082:	3301      	adds	r3, #1
 8001084:	77fb      	strb	r3, [r7, #31]
 8001086:	7ffb      	ldrb	r3, [r7, #31]
 8001088:	2b07      	cmp	r3, #7
 800108a:	d9ea      	bls.n	8001062 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001094:	b29a      	uxth	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0201 	orr.w	r2, r2, #1
 800109e:	b292      	uxth	r2, r2
 80010a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0201 	bic.w	r2, r2, #1
 80010b6:	b292      	uxth	r2, r2
 80010b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80010bc:	bf00      	nop
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f6      	beq.n	80010be <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010d8:	b29a      	uxth	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010e2:	b292      	uxth	r2, r2
 80010e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	77fb      	strb	r3, [r7, #31]
 80010ec:	e010      	b.n	8001110 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80010ee:	7ffb      	ldrb	r3, [r7, #31]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	6812      	ldr	r2, [r2, #0]
 80010f4:	4611      	mov	r1, r2
 80010f6:	7ffa      	ldrb	r2, [r7, #31]
 80010f8:	0092      	lsls	r2, r2, #2
 80010fa:	440a      	add	r2, r1
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	f107 0120 	add.w	r1, r7, #32
 8001102:	440b      	add	r3, r1
 8001104:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001108:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800110a:	7ffb      	ldrb	r3, [r7, #31]
 800110c:	3301      	adds	r3, #1
 800110e:	77fb      	strb	r3, [r7, #31]
 8001110:	7ffb      	ldrb	r3, [r7, #31]
 8001112:	2b07      	cmp	r3, #7
 8001114:	d9eb      	bls.n	80010ee <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800111e:	b29a      	uxth	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f042 0208 	orr.w	r2, r2, #8
 8001128:	b292      	uxth	r2, r2
 800112a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001136:	b29a      	uxth	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001140:	b292      	uxth	r2, r2
 8001142:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800114e:	b29a      	uxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f042 0204 	orr.w	r2, r2, #4
 8001158:	b292      	uxth	r2, r2
 800115a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f009 f882 	bl	800a268 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f004 fb82 	bl	8005872 <USB_ReadInterrupts>
 800116e:	4603      	mov	r3, r0
 8001170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001178:	d10e      	bne.n	8001198 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001182:	b29a      	uxth	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800118c:	b292      	uxth	r2, r2
 800118e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f009 f83b 	bl	800a20e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f004 fb68 	bl	8005872 <USB_ReadInterrupts>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ac:	d10b      	bne.n	80011c6 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011c0:	b292      	uxth	r2, r2
 80011c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80011c6:	bf00      	nop
 80011c8:	3720      	adds	r7, #32
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <HAL_PCD_SetAddress+0x1a>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e013      	b.n	8001210 <HAL_PCD_SetAddress+0x42>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	78fa      	ldrb	r2, [r7, #3]
 80011f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	78fa      	ldrb	r2, [r7, #3]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f004 fb0f 	bl	8005824 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	4608      	mov	r0, r1
 8001222:	4611      	mov	r1, r2
 8001224:	461a      	mov	r2, r3
 8001226:	4603      	mov	r3, r0
 8001228:	70fb      	strb	r3, [r7, #3]
 800122a:	460b      	mov	r3, r1
 800122c:	803b      	strh	r3, [r7, #0]
 800122e:	4613      	mov	r3, r2
 8001230:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800123a:	2b00      	cmp	r3, #0
 800123c:	da0e      	bge.n	800125c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2201      	movs	r2, #1
 8001258:	705a      	strb	r2, [r3, #1]
 800125a:	e00e      	b.n	800127a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	f003 0207 	and.w	r2, r3, #7
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	b2da      	uxtb	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001286:	883a      	ldrh	r2, [r7, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	78ba      	ldrb	r2, [r7, #2]
 8001290:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	785b      	ldrb	r3, [r3, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d004      	beq.n	80012a4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80012a4:	78bb      	ldrb	r3, [r7, #2]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d102      	bne.n	80012b0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2200      	movs	r2, #0
 80012ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <HAL_PCD_EP_Open+0xa6>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e00e      	b.n	80012dc <HAL_PCD_EP_Open+0xc4>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68f9      	ldr	r1, [r7, #12]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 f95f 	bl	8003590 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80012da:	7afb      	ldrb	r3, [r7, #11]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	da0e      	bge.n	8001316 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2201      	movs	r2, #1
 8001312:	705a      	strb	r2, [r3, #1]
 8001314:	e00e      	b.n	8001334 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	f003 0207 	and.w	r2, r3, #7
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	b2da      	uxtb	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_PCD_EP_Close+0x6a>
 800134a:	2302      	movs	r3, #2
 800134c:	e00e      	b.n	800136c <HAL_PCD_EP_Close+0x88>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68f9      	ldr	r1, [r7, #12]
 800135c:	4618      	mov	r0, r3
 800135e:	f002 fc81 	bl	8003c64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	460b      	mov	r3, r1
 8001382:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001384:	7afb      	ldrb	r3, [r7, #11]
 8001386:	f003 0207 	and.w	r2, r3, #7
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	4413      	add	r3, r2
 800139a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2200      	movs	r2, #0
 80013b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013b4:	7afb      	ldrb	r3, [r7, #11]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013c0:	7afb      	ldrb	r3, [r7, #11]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6979      	ldr	r1, [r7, #20]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fe33 	bl	800403c <USB_EPStartXfer>
 80013d6:	e005      	b.n	80013e4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6979      	ldr	r1, [r7, #20]
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fe2c 	bl	800403c <USB_EPStartXfer>
  }

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	f003 0207 	and.w	r2, r3, #7
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	440b      	add	r3, r1
 800140c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001410:	681b      	ldr	r3, [r3, #0]
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	460b      	mov	r3, r1
 800142a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800142c:	7afb      	ldrb	r3, [r7, #11]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2201      	movs	r2, #1
 8001466:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001468:	7afb      	ldrb	r3, [r7, #11]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	b2da      	uxtb	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001474:	7afb      	ldrb	r3, [r7, #11]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6979      	ldr	r1, [r7, #20]
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fdd9 	bl	800403c <USB_EPStartXfer>
 800148a:	e005      	b.n	8001498 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6979      	ldr	r1, [r7, #20]
 8001492:	4618      	mov	r0, r3
 8001494:	f002 fdd2 	bl	800403c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	f003 0207 	and.w	r2, r3, #7
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d901      	bls.n	80014c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e04c      	b.n	800155a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	da0e      	bge.n	80014e6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2201      	movs	r2, #1
 80014e2:	705a      	strb	r2, [r3, #1]
 80014e4:	e00c      	b.n	8001500 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80014e6:	78fa      	ldrb	r2, [r7, #3]
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2201      	movs	r2, #1
 8001504:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	b2da      	uxtb	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_PCD_EP_SetStall+0x7e>
 800151c:	2302      	movs	r3, #2
 800151e:	e01c      	b.n	800155a <HAL_PCD_EP_SetStall+0xb8>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68f9      	ldr	r1, [r7, #12]
 800152e:	4618      	mov	r0, r3
 8001530:	f004 f87b 	bl	800562a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	2b00      	cmp	r3, #0
 800153c:	d108      	bne.n	8001550 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f004 f9a0 	bl	8005890 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	f003 020f 	and.w	r2, r3, #15
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	d901      	bls.n	8001580 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e040      	b.n	8001602 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001584:	2b00      	cmp	r3, #0
 8001586:	da0e      	bge.n	80015a6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2201      	movs	r2, #1
 80015a2:	705a      	strb	r2, [r3, #1]
 80015a4:	e00e      	b.n	80015c4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	f003 0207 	and.w	r2, r3, #7
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_PCD_EP_ClrStall+0x82>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e00e      	b.n	8001602 <HAL_PCD_EP_ClrStall+0xa0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68f9      	ldr	r1, [r7, #12]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 f869 	bl	80056ca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b08e      	sub	sp, #56	; 0x38
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001612:	e2ec      	b.n	8001bee <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800161c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800161e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800162a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 8161 	bne.w	80018f6 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001634:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	2b00      	cmp	r3, #0
 800163c:	d152      	bne.n	80016e4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	b29b      	uxth	r3, r3
 8001646:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800164a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800164e:	81fb      	strh	r3, [r7, #14]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800165a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800165e:	b29b      	uxth	r3, r3
 8001660:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3328      	adds	r3, #40	; 0x28
 8001666:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001670:	b29b      	uxth	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	3302      	adds	r3, #2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	4413      	add	r3, r2
 8001686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	441a      	add	r2, r3
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80016a2:	2100      	movs	r1, #0
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f008 fd98 	bl	800a1da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 829b 	beq.w	8001bee <PCD_EP_ISR_Handler+0x5e4>
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f040 8296 	bne.w	8001bee <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	b292      	uxth	r2, r2
 80016d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80016e2:	e284      	b.n	8001bee <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80016f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80016f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d034      	beq.n	8001768 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001706:	b29b      	uxth	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4413      	add	r3, r2
 8001712:	3306      	adds	r3, #6
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	4413      	add	r3, r2
 800171c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800173c:	b29b      	uxth	r3, r3
 800173e:	f004 f8f7 	bl	8005930 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	b29a      	uxth	r2, r3
 800174a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800174e:	4013      	ands	r3, r2
 8001750:	823b      	strh	r3, [r7, #16]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	8a3a      	ldrh	r2, [r7, #16]
 8001758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800175c:	b292      	uxth	r2, r2
 800175e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f008 fd0d 	bl	800a180 <HAL_PCD_SetupStageCallback>
 8001766:	e242      	b.n	8001bee <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001768:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800176c:	2b00      	cmp	r3, #0
 800176e:	f280 823e 	bge.w	8001bee <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	b29a      	uxth	r2, r3
 800177a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800177e:	4013      	ands	r3, r2
 8001780:	83bb      	strh	r3, [r7, #28]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	8bba      	ldrh	r2, [r7, #28]
 8001788:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800178c:	b292      	uxth	r2, r2
 800178e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001798:	b29b      	uxth	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4413      	add	r3, r2
 80017a4:	3306      	adds	r3, #6
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d019      	beq.n	80017f8 <PCD_EP_ISR_Handler+0x1ee>
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d015      	beq.n	80017f8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	6959      	ldr	r1, [r3, #20]
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017dc:	b29b      	uxth	r3, r3
 80017de:	f004 f8a7 	bl	8005930 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	441a      	add	r2, r3
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80017f0:	2100      	movs	r1, #0
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f008 fcd6 	bl	800a1a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001804:	2b00      	cmp	r3, #0
 8001806:	f040 81f2 	bne.w	8001bee <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001818:	b29b      	uxth	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	4413      	add	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d112      	bne.n	8001858 <PCD_EP_ISR_Handler+0x24e>
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	b29b      	uxth	r3, r3
 8001838:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800183c:	b29a      	uxth	r2, r3
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	801a      	strh	r2, [r3, #0]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800184c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001850:	b29a      	uxth	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	801a      	strh	r2, [r3, #0]
 8001856:	e02f      	b.n	80018b8 <PCD_EP_ISR_Handler+0x2ae>
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	2b3e      	cmp	r3, #62	; 0x3e
 800185e:	d813      	bhi.n	8001888 <PCD_EP_ISR_Handler+0x27e>
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <PCD_EP_ISR_Handler+0x270>
 8001874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001876:	3301      	adds	r3, #1
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
 800187a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187c:	b29b      	uxth	r3, r3
 800187e:	029b      	lsls	r3, r3, #10
 8001880:	b29a      	uxth	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	801a      	strh	r2, [r3, #0]
 8001886:	e017      	b.n	80018b8 <PCD_EP_ISR_Handler+0x2ae>
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	095b      	lsrs	r3, r3, #5
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <PCD_EP_ISR_Handler+0x298>
 800189c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189e:	3b01      	subs	r3, #1
 80018a0:	633b      	str	r3, [r7, #48]	; 0x30
 80018a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	029b      	lsls	r3, r3, #10
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c8:	827b      	strh	r3, [r7, #18]
 80018ca:	8a7b      	ldrh	r3, [r7, #18]
 80018cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80018d0:	827b      	strh	r3, [r7, #18]
 80018d2:	8a7b      	ldrh	r3, [r7, #18]
 80018d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80018d8:	827b      	strh	r3, [r7, #18]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	8a7b      	ldrh	r3, [r7, #18]
 80018e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	8013      	strh	r3, [r2, #0]
 80018f4:	e17b      	b.n	8001bee <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001908:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800190c:	2b00      	cmp	r3, #0
 800190e:	f280 80ea 	bge.w	8001ae6 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	b29a      	uxth	r2, r3
 8001924:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001928:	4013      	ands	r3, r2
 800192a:	853b      	strh	r3, [r7, #40]	; 0x28
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800193c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001940:	b292      	uxth	r2, r2
 8001942:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001944:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	7b1b      	ldrb	r3, [r3, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d122      	bne.n	80019a8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800196a:	b29b      	uxth	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4413      	add	r3, r2
 8001976:	3306      	adds	r3, #6
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	4413      	add	r3, r2
 8001980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800198a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800198c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8087 	beq.w	8001aa2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	6959      	ldr	r1, [r3, #20]
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	88da      	ldrh	r2, [r3, #6]
 80019a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019a2:	f003 ffc5 	bl	8005930 <USB_ReadPMA>
 80019a6:	e07c      	b.n	8001aa2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	78db      	ldrb	r3, [r3, #3]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d108      	bne.n	80019c2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80019b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019b2:	461a      	mov	r2, r3
 80019b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f927 	bl	8001c0a <HAL_PCD_EP_DB_Receive>
 80019bc:	4603      	mov	r3, r0
 80019be:	86fb      	strh	r3, [r7, #54]	; 0x36
 80019c0:	e06f      	b.n	8001aa2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019dc:	847b      	strh	r3, [r7, #34]	; 0x22
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	441a      	add	r2, r3
 80019ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d021      	beq.n	8001a60 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	3302      	adds	r3, #2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a44:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001a46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d02a      	beq.n	8001aa2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	6959      	ldr	r1, [r3, #20]
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	891a      	ldrh	r2, [r3, #8]
 8001a58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a5a:	f003 ff69 	bl	8005930 <USB_ReadPMA>
 8001a5e:	e020      	b.n	8001aa2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4413      	add	r3, r2
 8001a74:	3306      	adds	r3, #6
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a88:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001a8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	6959      	ldr	r1, [r3, #20]
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	895a      	ldrh	r2, [r3, #10]
 8001a9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a9e:	f003 ff47 	bl	8005930 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	69da      	ldr	r2, [r3, #28]
 8001aa6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001aa8:	441a      	add	r2, r3
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ab4:	441a      	add	r2, r3
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <PCD_EP_ISR_Handler+0x4c2>
 8001ac2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d206      	bcs.n	8001ada <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f008 fb66 	bl	800a1a4 <HAL_PCD_DataOutStageCallback>
 8001ad8:	e005      	b.n	8001ae6 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f002 faab 	bl	800403c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ae6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d07e      	beq.n	8001bee <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001af0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1e:	843b      	strh	r3, [r7, #32]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	441a      	add	r2, r3
 8001b2e:	8c3b      	ldrh	r3, [r7, #32]
 8001b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	78db      	ldrb	r3, [r3, #3]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d00c      	beq.n	8001b5e <PCD_EP_ISR_Handler+0x554>
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	78db      	ldrb	r3, [r3, #3]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d146      	bne.n	8001be2 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001b54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d141      	bne.n	8001be2 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	3302      	adds	r3, #2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b86:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	699a      	ldr	r2, [r3, #24]
 8001b8c:	8bfb      	ldrh	r3, [r7, #30]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d906      	bls.n	8001ba0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	699a      	ldr	r2, [r3, #24]
 8001b96:	8bfb      	ldrh	r3, [r7, #30]
 8001b98:	1ad2      	subs	r2, r2, r3
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	619a      	str	r2, [r3, #24]
 8001b9e:	e002      	b.n	8001ba6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f008 fb10 	bl	800a1da <HAL_PCD_DataInStageCallback>
 8001bba:	e018      	b.n	8001bee <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	8bfb      	ldrh	r3, [r7, #30]
 8001bc2:	441a      	add	r2, r3
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	69da      	ldr	r2, [r3, #28]
 8001bcc:	8bfb      	ldrh	r3, [r7, #30]
 8001bce:	441a      	add	r2, r3
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 fa2e 	bl	800403c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001be0:	e005      	b.n	8001bee <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001be2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001be4:	461a      	mov	r2, r3
 8001be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f91b 	bl	8001e24 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f6ff ad0a 	blt.w	8001614 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3738      	adds	r7, #56	; 0x38
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b088      	sub	sp, #32
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	4613      	mov	r3, r2
 8001c16:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d07e      	beq.n	8001d20 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	3302      	adds	r3, #2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c4a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	699a      	ldr	r2, [r3, #24]
 8001c50:	8b7b      	ldrh	r3, [r7, #26]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d306      	bcc.n	8001c64 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	699a      	ldr	r2, [r3, #24]
 8001c5a:	8b7b      	ldrh	r3, [r7, #26]
 8001c5c:	1ad2      	subs	r2, r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	619a      	str	r2, [r3, #24]
 8001c62:	e002      	b.n	8001c6a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d123      	bne.n	8001cba <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c8c:	833b      	strh	r3, [r7, #24]
 8001c8e:	8b3b      	ldrh	r3, [r7, #24]
 8001c90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c94:	833b      	strh	r3, [r7, #24]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	441a      	add	r2, r3
 8001ca4:	8b3b      	ldrh	r3, [r7, #24]
 8001ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d01f      	beq.n	8001d04 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cde:	82fb      	strh	r3, [r7, #22]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	441a      	add	r2, r3
 8001cee:	8afb      	ldrh	r3, [r7, #22]
 8001cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d04:	8b7b      	ldrh	r3, [r7, #26]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 8087 	beq.w	8001e1a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	6959      	ldr	r1, [r3, #20]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	891a      	ldrh	r2, [r3, #8]
 8001d18:	8b7b      	ldrh	r3, [r7, #26]
 8001d1a:	f003 fe09 	bl	8005930 <USB_ReadPMA>
 8001d1e:	e07c      	b.n	8001e1a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	3306      	adds	r3, #6
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d48:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	8b7b      	ldrh	r3, [r7, #26]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d306      	bcc.n	8001d62 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	699a      	ldr	r2, [r3, #24]
 8001d58:	8b7b      	ldrh	r3, [r7, #26]
 8001d5a:	1ad2      	subs	r2, r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	619a      	str	r2, [r3, #24]
 8001d60:	e002      	b.n	8001d68 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d123      	bne.n	8001db8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d8a:	83fb      	strh	r3, [r7, #30]
 8001d8c:	8bfb      	ldrh	r3, [r7, #30]
 8001d8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d92:	83fb      	strh	r3, [r7, #30]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	441a      	add	r2, r3
 8001da2:	8bfb      	ldrh	r3, [r7, #30]
 8001da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d11f      	bne.n	8001e02 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ddc:	83bb      	strh	r3, [r7, #28]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	441a      	add	r2, r3
 8001dec:	8bbb      	ldrh	r3, [r7, #28]
 8001dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e02:	8b7b      	ldrh	r3, [r7, #26]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	6959      	ldr	r1, [r3, #20]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	895a      	ldrh	r2, [r3, #10]
 8001e14:	8b7b      	ldrh	r3, [r7, #26]
 8001e16:	f003 fd8b 	bl	8005930 <USB_ReadPMA>
    }
  }

  return count;
 8001e1a:	8b7b      	ldrh	r3, [r7, #26]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b0a2      	sub	sp, #136	; 0x88
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 81c7 	beq.w	80021cc <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	3302      	adds	r3, #2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d907      	bls.n	8001e86 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e7e:	1ad2      	subs	r2, r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	619a      	str	r2, [r3, #24]
 8001e84:	e002      	b.n	8001e8c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f040 80b9 	bne.w	8002008 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	785b      	ldrb	r3, [r3, #1]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d126      	bne.n	8001eec <HAL_PCD_EP_DB_Transmit+0xc8>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb2:	4413      	add	r3, r2
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	011a      	lsls	r2, r3, #4
 8001ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	801a      	strh	r2, [r3, #0]
 8001eea:	e01a      	b.n	8001f22 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	785b      	ldrb	r3, [r3, #1]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d116      	bne.n	8001f22 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f08:	4413      	add	r3, r2
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	011a      	lsls	r2, r3, #4
 8001f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f14:	4413      	add	r3, r2
 8001f16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1e:	2200      	movs	r2, #0
 8001f20:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	623b      	str	r3, [r7, #32]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	785b      	ldrb	r3, [r3, #1]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d126      	bne.n	8001f7e <HAL_PCD_EP_DB_Transmit+0x15a>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4413      	add	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	011a      	lsls	r2, r3, #4
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4413      	add	r3, r2
 8001f52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	801a      	strh	r2, [r3, #0]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	801a      	strh	r2, [r3, #0]
 8001f7c:	e017      	b.n	8001fae <HAL_PCD_EP_DB_Transmit+0x18a>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	785b      	ldrb	r3, [r3, #1]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d113      	bne.n	8001fae <HAL_PCD_EP_DB_Transmit+0x18a>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	4413      	add	r3, r2
 8001f96:	623b      	str	r3, [r7, #32]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	011a      	lsls	r2, r3, #4
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	2200      	movs	r2, #0
 8001fac:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f008 f910 	bl	800a1da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 82d4 	beq.w	800256e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe0:	827b      	strh	r3, [r7, #18]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	441a      	add	r2, r3
 8001ff0:	8a7b      	ldrh	r3, [r7, #18]
 8001ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002002:	b29b      	uxth	r3, r3
 8002004:	8013      	strh	r3, [r2, #0]
 8002006:	e2b2      	b.n	800256e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d021      	beq.n	8002056 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	441a      	add	r2, r3
 800203e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800204a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800204e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002052:	b29b      	uxth	r3, r3
 8002054:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800205c:	2b01      	cmp	r3, #1
 800205e:	f040 8286 	bne.w	800256e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800206a:	441a      	add	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	69da      	ldr	r2, [r3, #28]
 8002074:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002078:	441a      	add	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	6a1a      	ldr	r2, [r3, #32]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	429a      	cmp	r2, r3
 8002088:	d309      	bcc.n	800209e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	6a1a      	ldr	r2, [r3, #32]
 8002094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002096:	1ad2      	subs	r2, r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	621a      	str	r2, [r3, #32]
 800209c:	e015      	b.n	80020ca <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d107      	bne.n	80020b6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80020a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020aa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020b4:	e009      	b.n	80020ca <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2200      	movs	r2, #0
 80020c8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	785b      	ldrb	r3, [r3, #1]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d155      	bne.n	800217e <HAL_PCD_EP_DB_Transmit+0x35a>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e6:	4413      	add	r3, r2
 80020e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	011a      	lsls	r2, r3, #4
 80020f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f2:	4413      	add	r3, r2
 80020f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020f8:	637b      	str	r3, [r7, #52]	; 0x34
 80020fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d112      	bne.n	8002126 <HAL_PCD_EP_DB_Transmit+0x302>
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800210a:	b29a      	uxth	r2, r3
 800210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210e:	801a      	strh	r2, [r3, #0]
 8002110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	b29b      	uxth	r3, r3
 8002116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800211a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800211e:	b29a      	uxth	r2, r3
 8002120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002122:	801a      	strh	r2, [r3, #0]
 8002124:	e047      	b.n	80021b6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002128:	2b3e      	cmp	r3, #62	; 0x3e
 800212a:	d811      	bhi.n	8002150 <HAL_PCD_EP_DB_Transmit+0x32c>
 800212c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800212e:	085b      	lsrs	r3, r3, #1
 8002130:	64bb      	str	r3, [r7, #72]	; 0x48
 8002132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_PCD_EP_DB_Transmit+0x31e>
 800213c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800213e:	3301      	adds	r3, #1
 8002140:	64bb      	str	r3, [r7, #72]	; 0x48
 8002142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002144:	b29b      	uxth	r3, r3
 8002146:	029b      	lsls	r3, r3, #10
 8002148:	b29a      	uxth	r2, r3
 800214a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214c:	801a      	strh	r2, [r3, #0]
 800214e:	e032      	b.n	80021b6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	64bb      	str	r3, [r7, #72]	; 0x48
 8002156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <HAL_PCD_EP_DB_Transmit+0x342>
 8002160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002162:	3b01      	subs	r3, #1
 8002164:	64bb      	str	r3, [r7, #72]	; 0x48
 8002166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002168:	b29b      	uxth	r3, r3
 800216a:	029b      	lsls	r3, r3, #10
 800216c:	b29b      	uxth	r3, r3
 800216e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002176:	b29a      	uxth	r2, r3
 8002178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217a:	801a      	strh	r2, [r3, #0]
 800217c:	e01b      	b.n	80021b6 <HAL_PCD_EP_DB_Transmit+0x392>
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	785b      	ldrb	r3, [r3, #1]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d117      	bne.n	80021b6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	643b      	str	r3, [r7, #64]	; 0x40
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002194:	b29b      	uxth	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800219a:	4413      	add	r3, r2
 800219c:	643b      	str	r3, [r7, #64]	; 0x40
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	011a      	lsls	r2, r3, #4
 80021a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a6:	4413      	add	r3, r2
 80021a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	6959      	ldr	r1, [r3, #20]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	891a      	ldrh	r2, [r3, #8]
 80021c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	f003 fb6e 	bl	80058a6 <USB_WritePMA>
 80021ca:	e1d0      	b.n	800256e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	3306      	adds	r3, #6
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	699a      	ldr	r2, [r3, #24]
 80021fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002200:	429a      	cmp	r2, r3
 8002202:	d307      	bcc.n	8002214 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	699a      	ldr	r2, [r3, #24]
 8002208:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800220c:	1ad2      	subs	r2, r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	619a      	str	r2, [r3, #24]
 8002212:	e002      	b.n	800221a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2200      	movs	r2, #0
 8002218:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 80c4 	bne.w	80023ac <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	785b      	ldrb	r3, [r3, #1]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d126      	bne.n	800227a <HAL_PCD_EP_DB_Transmit+0x456>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223a:	b29b      	uxth	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002240:	4413      	add	r3, r2
 8002242:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	011a      	lsls	r2, r3, #4
 800224a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800224c:	4413      	add	r3, r2
 800224e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002252:	66bb      	str	r3, [r7, #104]	; 0x68
 8002254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800225e:	b29a      	uxth	r2, r3
 8002260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002262:	801a      	strh	r2, [r3, #0]
 8002264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800226e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002272:	b29a      	uxth	r2, r3
 8002274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002276:	801a      	strh	r2, [r3, #0]
 8002278:	e01a      	b.n	80022b0 <HAL_PCD_EP_DB_Transmit+0x48c>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	785b      	ldrb	r3, [r3, #1]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d116      	bne.n	80022b0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	677b      	str	r3, [r7, #116]	; 0x74
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002290:	b29b      	uxth	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002296:	4413      	add	r3, r2
 8002298:	677b      	str	r3, [r7, #116]	; 0x74
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	011a      	lsls	r2, r3, #4
 80022a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a2:	4413      	add	r3, r2
 80022a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022a8:	673b      	str	r3, [r7, #112]	; 0x70
 80022aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022ac:	2200      	movs	r2, #0
 80022ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	785b      	ldrb	r3, [r3, #1]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d12f      	bne.n	800231e <HAL_PCD_EP_DB_Transmit+0x4fa>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022d6:	4413      	add	r3, r2
 80022d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	011a      	lsls	r2, r3, #4
 80022e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022e6:	4413      	add	r3, r2
 80022e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002302:	801a      	strh	r2, [r3, #0]
 8002304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002314:	b29a      	uxth	r2, r3
 8002316:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800231a:	801a      	strh	r2, [r3, #0]
 800231c:	e017      	b.n	800234e <HAL_PCD_EP_DB_Transmit+0x52a>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	785b      	ldrb	r3, [r3, #1]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d113      	bne.n	800234e <HAL_PCD_EP_DB_Transmit+0x52a>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002334:	4413      	add	r3, r2
 8002336:	67bb      	str	r3, [r7, #120]	; 0x78
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	011a      	lsls	r2, r3, #4
 800233e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002340:	4413      	add	r3, r2
 8002342:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002346:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002348:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800234a:	2200      	movs	r2, #0
 800234c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	4619      	mov	r1, r3
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f007 ff40 	bl	800a1da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002360:	2b00      	cmp	r3, #0
 8002362:	f040 8104 	bne.w	800256e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800237c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002380:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	441a      	add	r2, r3
 8002392:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800239a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800239e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	8013      	strh	r3, [r2, #0]
 80023aa:	e0e0      	b.n	800256e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d121      	bne.n	80023fa <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	441a      	add	r2, r3
 80023e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80023e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002400:	2b01      	cmp	r3, #1
 8002402:	f040 80b4 	bne.w	800256e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800240e:	441a      	add	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800241c:	441a      	add	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	6a1a      	ldr	r2, [r3, #32]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	429a      	cmp	r2, r3
 800242c:	d309      	bcc.n	8002442 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	6a1a      	ldr	r2, [r3, #32]
 8002438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800243a:	1ad2      	subs	r2, r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	621a      	str	r2, [r3, #32]
 8002440:	e015      	b.n	800246e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d107      	bne.n	800245a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800244a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800244e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002458:	e009      	b.n	800246e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2200      	movs	r2, #0
 8002464:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	667b      	str	r3, [r7, #100]	; 0x64
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	785b      	ldrb	r3, [r3, #1]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d155      	bne.n	8002528 <HAL_PCD_EP_DB_Transmit+0x704>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248a:	b29b      	uxth	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002490:	4413      	add	r3, r2
 8002492:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	011a      	lsls	r2, r3, #4
 800249a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800249c:	4413      	add	r3, r2
 800249e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80024a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d112      	bne.n	80024d0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80024aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b8:	801a      	strh	r2, [r3, #0]
 80024ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	e044      	b.n	800255a <HAL_PCD_EP_DB_Transmit+0x736>
 80024d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d2:	2b3e      	cmp	r3, #62	; 0x3e
 80024d4:	d811      	bhi.n	80024fa <HAL_PCD_EP_DB_Transmit+0x6d6>
 80024d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d8:	085b      	lsrs	r3, r3, #1
 80024da:	657b      	str	r3, [r7, #84]	; 0x54
 80024dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <HAL_PCD_EP_DB_Transmit+0x6c8>
 80024e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e8:	3301      	adds	r3, #1
 80024ea:	657b      	str	r3, [r7, #84]	; 0x54
 80024ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	029b      	lsls	r3, r3, #10
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f6:	801a      	strh	r2, [r3, #0]
 80024f8:	e02f      	b.n	800255a <HAL_PCD_EP_DB_Transmit+0x736>
 80024fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800250a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250c:	3b01      	subs	r3, #1
 800250e:	657b      	str	r3, [r7, #84]	; 0x54
 8002510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002512:	b29b      	uxth	r3, r3
 8002514:	029b      	lsls	r3, r3, #10
 8002516:	b29b      	uxth	r3, r3
 8002518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800251c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002520:	b29a      	uxth	r2, r3
 8002522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002524:	801a      	strh	r2, [r3, #0]
 8002526:	e018      	b.n	800255a <HAL_PCD_EP_DB_Transmit+0x736>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d114      	bne.n	800255a <HAL_PCD_EP_DB_Transmit+0x736>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002538:	b29b      	uxth	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800253e:	4413      	add	r3, r2
 8002540:	667b      	str	r3, [r7, #100]	; 0x64
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	011a      	lsls	r2, r3, #4
 8002548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800254a:	4413      	add	r3, r2
 800254c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002550:	663b      	str	r3, [r7, #96]	; 0x60
 8002552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002554:	b29a      	uxth	r2, r3
 8002556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002558:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	6959      	ldr	r1, [r3, #20]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	895a      	ldrh	r2, [r3, #10]
 8002566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002568:	b29b      	uxth	r3, r3
 800256a:	f003 f99c 	bl	80058a6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002588:	823b      	strh	r3, [r7, #16]
 800258a:	8a3b      	ldrh	r3, [r7, #16]
 800258c:	f083 0310 	eor.w	r3, r3, #16
 8002590:	823b      	strh	r3, [r7, #16]
 8002592:	8a3b      	ldrh	r3, [r7, #16]
 8002594:	f083 0320 	eor.w	r3, r3, #32
 8002598:	823b      	strh	r3, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	441a      	add	r2, r3
 80025a8:	8a3b      	ldrh	r3, [r7, #16]
 80025aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3788      	adds	r7, #136	; 0x88
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	817b      	strh	r3, [r7, #10]
 80025d6:	4613      	mov	r3, r2
 80025d8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80025da:	897b      	ldrh	r3, [r7, #10]
 80025dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00b      	beq.n	80025fe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025e6:	897b      	ldrh	r3, [r7, #10]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4413      	add	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e009      	b.n	8002612 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025fe:	897a      	ldrh	r2, [r7, #10]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4413      	add	r3, r2
 8002610:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002612:	893b      	ldrh	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d107      	bne.n	8002628 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2200      	movs	r2, #0
 800261c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	b29a      	uxth	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	80da      	strh	r2, [r3, #6]
 8002626:	e00b      	b.n	8002640 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2201      	movs	r2, #1
 800262c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	b29a      	uxth	r2, r3
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	b29a      	uxth	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e26c      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8087 	beq.w	800277a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800266c:	4b92      	ldr	r3, [pc, #584]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b04      	cmp	r3, #4
 8002676:	d00c      	beq.n	8002692 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002678:	4b8f      	ldr	r3, [pc, #572]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d112      	bne.n	80026aa <HAL_RCC_OscConfig+0x5e>
 8002684:	4b8c      	ldr	r3, [pc, #560]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002690:	d10b      	bne.n	80026aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002692:	4b89      	ldr	r3, [pc, #548]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d06c      	beq.n	8002778 <HAL_RCC_OscConfig+0x12c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d168      	bne.n	8002778 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e246      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x76>
 80026b4:	4b80      	ldr	r3, [pc, #512]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a7f      	ldr	r2, [pc, #508]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	e02e      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x98>
 80026ca:	4b7b      	ldr	r3, [pc, #492]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7a      	ldr	r2, [pc, #488]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b78      	ldr	r3, [pc, #480]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a77      	ldr	r2, [pc, #476]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e01d      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0xbc>
 80026ee:	4b72      	ldr	r3, [pc, #456]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a71      	ldr	r2, [pc, #452]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b6f      	ldr	r3, [pc, #444]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a6e      	ldr	r2, [pc, #440]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0xd4>
 8002708:	4b6b      	ldr	r3, [pc, #428]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a6a      	ldr	r2, [pc, #424]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800270e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b68      	ldr	r3, [pc, #416]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a67      	ldr	r2, [pc, #412]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe f82c 	bl	8000784 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe f828 	bl	8000784 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e1fa      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b5d      	ldr	r3, [pc, #372]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0xe4>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe f818 	bl	8000784 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002758:	f7fe f814 	bl	8000784 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1e6      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x10c>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d063      	beq.n	800284e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002786:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002792:	4b49      	ldr	r3, [pc, #292]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b08      	cmp	r3, #8
 800279c:	d11c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x18c>
 800279e:	4b46      	ldr	r3, [pc, #280]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027aa:	4b43      	ldr	r3, [pc, #268]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_RCC_OscConfig+0x176>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e1ba      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c2:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4939      	ldr	r1, [pc, #228]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	e03a      	b.n	800284e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e0:	4b36      	ldr	r3, [pc, #216]	; (80028bc <HAL_RCC_OscConfig+0x270>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fd ffcd 	bl	8000784 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ee:	f7fd ffc9 	bl	8000784 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e19b      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4927      	ldr	r1, [pc, #156]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 800281c:	4313      	orrs	r3, r2
 800281e:	600b      	str	r3, [r1, #0]
 8002820:	e015      	b.n	800284e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002822:	4b26      	ldr	r3, [pc, #152]	; (80028bc <HAL_RCC_OscConfig+0x270>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fd ffac 	bl	8000784 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002830:	f7fd ffa8 	bl	8000784 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e17a      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d03a      	beq.n	80028d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d019      	beq.n	8002896 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002868:	f7fd ff8c 	bl	8000784 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002870:	f7fd ff88 	bl	8000784 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e15a      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800288e:	2001      	movs	r0, #1
 8002890:	f000 faf4 	bl	8002e7c <RCC_Delay>
 8002894:	e01c      	b.n	80028d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_RCC_OscConfig+0x274>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289c:	f7fd ff72 	bl	8000784 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a2:	e00f      	b.n	80028c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a4:	f7fd ff6e 	bl	8000784 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d908      	bls.n	80028c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e140      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	42420000 	.word	0x42420000
 80028c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c4:	4b9e      	ldr	r3, [pc, #632]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e9      	bne.n	80028a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80a6 	beq.w	8002a2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e2:	4b97      	ldr	r3, [pc, #604]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	4b94      	ldr	r3, [pc, #592]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	4a93      	ldr	r2, [pc, #588]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f8:	61d3      	str	r3, [r2, #28]
 80028fa:	4b91      	ldr	r3, [pc, #580]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002906:	2301      	movs	r3, #1
 8002908:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b8e      	ldr	r3, [pc, #568]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002916:	4b8b      	ldr	r3, [pc, #556]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a8a      	ldr	r2, [pc, #552]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002922:	f7fd ff2f 	bl	8000784 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7fd ff2b 	bl	8000784 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b64      	cmp	r3, #100	; 0x64
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e0fd      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	4b81      	ldr	r3, [pc, #516]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d106      	bne.n	800295e <HAL_RCC_OscConfig+0x312>
 8002950:	4b7b      	ldr	r3, [pc, #492]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4a7a      	ldr	r2, [pc, #488]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6213      	str	r3, [r2, #32]
 800295c:	e02d      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0x334>
 8002966:	4b76      	ldr	r3, [pc, #472]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4a75      	ldr	r2, [pc, #468]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	6213      	str	r3, [r2, #32]
 8002972:	4b73      	ldr	r3, [pc, #460]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4a72      	ldr	r2, [pc, #456]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	6213      	str	r3, [r2, #32]
 800297e:	e01c      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b05      	cmp	r3, #5
 8002986:	d10c      	bne.n	80029a2 <HAL_RCC_OscConfig+0x356>
 8002988:	4b6d      	ldr	r3, [pc, #436]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4a6c      	ldr	r2, [pc, #432]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 800298e:	f043 0304 	orr.w	r3, r3, #4
 8002992:	6213      	str	r3, [r2, #32]
 8002994:	4b6a      	ldr	r3, [pc, #424]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4a69      	ldr	r2, [pc, #420]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	e00b      	b.n	80029ba <HAL_RCC_OscConfig+0x36e>
 80029a2:	4b67      	ldr	r3, [pc, #412]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a66      	ldr	r2, [pc, #408]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	6213      	str	r3, [r2, #32]
 80029ae:	4b64      	ldr	r3, [pc, #400]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4a63      	ldr	r2, [pc, #396]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 80029b4:	f023 0304 	bic.w	r3, r3, #4
 80029b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d015      	beq.n	80029ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c2:	f7fd fedf 	bl	8000784 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7fd fedb 	bl	8000784 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e0ab      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e0:	4b57      	ldr	r3, [pc, #348]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0ee      	beq.n	80029ca <HAL_RCC_OscConfig+0x37e>
 80029ec:	e014      	b.n	8002a18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ee:	f7fd fec9 	bl	8000784 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7fd fec5 	bl	8000784 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e095      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0c:	4b4c      	ldr	r3, [pc, #304]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ee      	bne.n	80029f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a18:	7dfb      	ldrb	r3, [r7, #23]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d105      	bne.n	8002a2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1e:	4b48      	ldr	r3, [pc, #288]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	4a47      	ldr	r2, [pc, #284]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8081 	beq.w	8002b36 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a34:	4b42      	ldr	r3, [pc, #264]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d061      	beq.n	8002b04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d146      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a48:	4b3f      	ldr	r3, [pc, #252]	; (8002b48 <HAL_RCC_OscConfig+0x4fc>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7fd fe99 	bl	8000784 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a56:	f7fd fe95 	bl	8000784 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e067      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a68:	4b35      	ldr	r3, [pc, #212]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7c:	d108      	bne.n	8002a90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a7e:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	492d      	ldr	r1, [pc, #180]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a90:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a19      	ldr	r1, [r3, #32]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	4927      	ldr	r1, [pc, #156]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa8:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <HAL_RCC_OscConfig+0x4fc>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7fd fe69 	bl	8000784 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7fd fe65 	bl	8000784 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e037      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x46a>
 8002ad4:	e02f      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <HAL_RCC_OscConfig+0x4fc>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fd fe52 	bl	8000784 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fd fe4e 	bl	8000784 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e020      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x498>
 8002b02:	e018      	b.n	8002b36 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e013      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_OscConfig+0x4f4>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d001      	beq.n	8002b36 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40007000 	.word	0x40007000
 8002b48:	42420060 	.word	0x42420060

08002b4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0d0      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b60:	4b6a      	ldr	r3, [pc, #424]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d910      	bls.n	8002b90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b67      	ldr	r3, [pc, #412]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 0207 	bic.w	r2, r3, #7
 8002b76:	4965      	ldr	r1, [pc, #404]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b63      	ldr	r3, [pc, #396]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0b8      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba8:	4b59      	ldr	r3, [pc, #356]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4a58      	ldr	r2, [pc, #352]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bc0:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4a52      	ldr	r2, [pc, #328]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bcc:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	494d      	ldr	r1, [pc, #308]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d040      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d107      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	4b47      	ldr	r3, [pc, #284]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d115      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e07f      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0a:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e073      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1a:	4b3d      	ldr	r3, [pc, #244]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e06b      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2a:	4b39      	ldr	r3, [pc, #228]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f023 0203 	bic.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4936      	ldr	r1, [pc, #216]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c3c:	f7fd fda2 	bl	8000784 <HAL_GetTick>
 8002c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c44:	f7fd fd9e 	bl	8000784 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e053      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 020c 	and.w	r2, r3, #12
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d1eb      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d210      	bcs.n	8002c9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 0207 	bic.w	r2, r3, #7
 8002c82:	4922      	ldr	r1, [pc, #136]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e032      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4916      	ldr	r1, [pc, #88]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cc6:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	490e      	ldr	r1, [pc, #56]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cda:	f000 f821 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	490a      	ldr	r1, [pc, #40]	; (8002d14 <HAL_RCC_ClockConfig+0x1c8>)
 8002cec:	5ccb      	ldrb	r3, [r1, r3]
 8002cee:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf2:	4a09      	ldr	r2, [pc, #36]	; (8002d18 <HAL_RCC_ClockConfig+0x1cc>)
 8002cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <HAL_RCC_ClockConfig+0x1d0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fd fc6e 	bl	80005dc <HAL_InitTick>

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40022000 	.word	0x40022000
 8002d10:	40021000 	.word	0x40021000
 8002d14:	0800a848 	.word	0x0800a848
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	20000004 	.word	0x20000004

08002d20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d20:	b490      	push	{r4, r7}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d26:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d28:	1d3c      	adds	r4, r7, #4
 8002d2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d30:	f240 2301 	movw	r3, #513	; 0x201
 8002d34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d4a:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d002      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x40>
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0x46>
 8002d5e:	e02d      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d60:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d62:	623b      	str	r3, [r7, #32]
      break;
 8002d64:	e02d      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	0c9b      	lsrs	r3, r3, #18
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d72:	4413      	add	r3, r2
 8002d74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d013      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d84:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	0c5b      	lsrs	r3, r3, #17
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d92:	4413      	add	r3, r2
 8002d94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d9e:	fb02 f203 	mul.w	r2, r2, r3
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
 8002daa:	e004      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	4a0b      	ldr	r2, [pc, #44]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002db0:	fb02 f303 	mul.w	r3, r2, r3
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	623b      	str	r3, [r7, #32]
      break;
 8002dba:	e002      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dbe:	623b      	str	r3, [r7, #32]
      break;
 8002dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3728      	adds	r7, #40	; 0x28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc90      	pop	{r4, r7}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	0800a760 	.word	0x0800a760
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	007a1200 	.word	0x007a1200
 8002ddc:	003d0900 	.word	0x003d0900

08002de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de4:	4b02      	ldr	r3, [pc, #8]	; (8002df0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002de6:	681b      	ldr	r3, [r3, #0]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	20000000 	.word	0x20000000

08002df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002df8:	f7ff fff2 	bl	8002de0 <HAL_RCC_GetHCLKFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	0adb      	lsrs	r3, r3, #11
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4903      	ldr	r1, [pc, #12]	; (8002e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000
 8002e18:	0800a858 	.word	0x0800a858

08002e1c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	220f      	movs	r2, #15
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_RCC_GetClockConfig+0x58>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0203 	and.w	r2, r3, #3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e38:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <HAL_RCC_GetClockConfig+0x58>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_RCC_GetClockConfig+0x58>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <HAL_RCC_GetClockConfig+0x58>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	08db      	lsrs	r3, r3, #3
 8002e56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_RCC_GetClockConfig+0x5c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0207 	and.w	r2, r3, #7
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40022000 	.word	0x40022000

08002e7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <RCC_Delay+0x34>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <RCC_Delay+0x38>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	0a5b      	lsrs	r3, r3, #9
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e98:	bf00      	nop
  }
  while (Delay --);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1e5a      	subs	r2, r3, #1
 8002e9e:	60fa      	str	r2, [r7, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f9      	bne.n	8002e98 <RCC_Delay+0x1c>
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	10624dd3 	.word	0x10624dd3

08002eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d07d      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed8:	4b4f      	ldr	r3, [pc, #316]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10d      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee4:	4b4c      	ldr	r3, [pc, #304]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	4a4b      	ldr	r2, [pc, #300]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eee:	61d3      	str	r3, [r2, #28]
 8002ef0:	4b49      	ldr	r3, [pc, #292]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efc:	2301      	movs	r3, #1
 8002efe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f00:	4b46      	ldr	r3, [pc, #280]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d118      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f0c:	4b43      	ldr	r3, [pc, #268]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a42      	ldr	r2, [pc, #264]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f18:	f7fd fc34 	bl	8000784 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1e:	e008      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f20:	f7fd fc30 	bl	8000784 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e06d      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f32:	4b3a      	ldr	r3, [pc, #232]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f3e:	4b36      	ldr	r3, [pc, #216]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d02e      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d027      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f5c:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f66:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f6c:	4b2c      	ldr	r3, [pc, #176]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f72:	4a29      	ldr	r2, [pc, #164]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d014      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fd fbff 	bl	8000784 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fd fbfb 	bl	8000784 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e036      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0ee      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fac:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4917      	ldr	r1, [pc, #92]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fbe:	7dfb      	ldrb	r3, [r7, #23]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d105      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc4:	4b14      	ldr	r3, [pc, #80]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	4a13      	ldr	r2, [pc, #76]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fdc:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	490b      	ldr	r1, [pc, #44]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ffa:	4b07      	ldr	r3, [pc, #28]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	4904      	ldr	r1, [pc, #16]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
 800301c:	40007000 	.word	0x40007000
 8003020:	42420440 	.word	0x42420440

08003024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e041      	b.n	80030ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f839 	bl	80030c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3304      	adds	r3, #4
 8003060:	4619      	mov	r1, r3
 8003062:	4610      	mov	r0, r2
 8003064:	f000 f9b4 	bl	80033d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d001      	beq.n	80030ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e03a      	b.n	8003162 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a18      	ldr	r2, [pc, #96]	; (800316c <HAL_TIM_Base_Start_IT+0x98>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00e      	beq.n	800312c <HAL_TIM_Base_Start_IT+0x58>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003116:	d009      	beq.n	800312c <HAL_TIM_Base_Start_IT+0x58>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a14      	ldr	r2, [pc, #80]	; (8003170 <HAL_TIM_Base_Start_IT+0x9c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d004      	beq.n	800312c <HAL_TIM_Base_Start_IT+0x58>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a13      	ldr	r2, [pc, #76]	; (8003174 <HAL_TIM_Base_Start_IT+0xa0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d111      	bne.n	8003150 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b06      	cmp	r3, #6
 800313c:	d010      	beq.n	8003160 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314e:	e007      	b.n	8003160 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800

08003178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b02      	cmp	r3, #2
 800318c:	d122      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b02      	cmp	r3, #2
 800319a:	d11b      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0202 	mvn.w	r2, #2
 80031a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f8ed 	bl	800339a <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8e0 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f8ef 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d122      	bne.n	8003228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d11b      	bne.n	8003228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0204 	mvn.w	r2, #4
 80031f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2202      	movs	r2, #2
 80031fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f8c3 	bl	800339a <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f8b6 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f8c5 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b08      	cmp	r3, #8
 8003234:	d122      	bne.n	800327c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b08      	cmp	r3, #8
 8003242:	d11b      	bne.n	800327c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0208 	mvn.w	r2, #8
 800324c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2204      	movs	r2, #4
 8003252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f899 	bl	800339a <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f88c 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f89b 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	2b10      	cmp	r3, #16
 8003288:	d122      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b10      	cmp	r3, #16
 8003296:	d11b      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0210 	mvn.w	r2, #16
 80032a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2208      	movs	r2, #8
 80032a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f86f 	bl	800339a <HAL_TIM_IC_CaptureCallback>
 80032bc:	e005      	b.n	80032ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f862 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f871 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d10e      	bne.n	80032fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d107      	bne.n	80032fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0201 	mvn.w	r2, #1
 80032f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fd f920 	bl	800053c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d10e      	bne.n	8003328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d107      	bne.n	8003328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f8bf 	bl	80034a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d10e      	bne.n	8003354 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b40      	cmp	r3, #64	; 0x40
 8003342:	d107      	bne.n	8003354 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800334c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f835 	bl	80033be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b20      	cmp	r3, #32
 8003360:	d10e      	bne.n	8003380 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b20      	cmp	r3, #32
 800336e:	d107      	bne.n	8003380 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0220 	mvn.w	r2, #32
 8003378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f88a 	bl	8003494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr

080033be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a29      	ldr	r2, [pc, #164]	; (8003488 <TIM_Base_SetConfig+0xb8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00b      	beq.n	8003400 <TIM_Base_SetConfig+0x30>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ee:	d007      	beq.n	8003400 <TIM_Base_SetConfig+0x30>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a26      	ldr	r2, [pc, #152]	; (800348c <TIM_Base_SetConfig+0xbc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_Base_SetConfig+0x30>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a25      	ldr	r2, [pc, #148]	; (8003490 <TIM_Base_SetConfig+0xc0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d108      	bne.n	8003412 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <TIM_Base_SetConfig+0xb8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00b      	beq.n	8003432 <TIM_Base_SetConfig+0x62>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003420:	d007      	beq.n	8003432 <TIM_Base_SetConfig+0x62>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a19      	ldr	r2, [pc, #100]	; (800348c <TIM_Base_SetConfig+0xbc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d003      	beq.n	8003432 <TIM_Base_SetConfig+0x62>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a18      	ldr	r2, [pc, #96]	; (8003490 <TIM_Base_SetConfig+0xc0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d108      	bne.n	8003444 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a07      	ldr	r2, [pc, #28]	; (8003488 <TIM_Base_SetConfig+0xb8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d103      	bne.n	8003478 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	615a      	str	r2, [r3, #20]
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800

08003494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80034b8:	b084      	sub	sp, #16
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	f107 0014 	add.w	r0, r7, #20
 80034c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	b004      	add	sp, #16
 80034d6:	4770      	bx	lr

080034d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80034e8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80034ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800350c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003510:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	b29b      	uxth	r3, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	b29b      	uxth	r3, r3
 8003522:	4013      	ands	r3, r2
 8003524:	b29a      	uxth	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003550:	b084      	sub	sp, #16
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	f107 0014 	add.w	r0, r7, #20
 800355e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	b004      	add	sp, #16
 800358e:	4770      	bx	lr

08003590 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003590:	b480      	push	{r7}
 8003592:	b09b      	sub	sp, #108	; 0x6c
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	78db      	ldrb	r3, [r3, #3]
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d81f      	bhi.n	8003602 <USB_ActivateEndpoint+0x72>
 80035c2:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <USB_ActivateEndpoint+0x38>)
 80035c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c8:	080035d9 	.word	0x080035d9
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	0800360b 	.word	0x0800360b
 80035d4:	080035e7 	.word	0x080035e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80035d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80035dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80035e4:	e012      	b.n	800360c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80035e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80035ea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80035ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80035f2:	e00b      	b.n	800360c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80035f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80035f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035fc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003600:	e004      	b.n	800360c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003608:	e000      	b.n	800360c <USB_ActivateEndpoint+0x7c>
      break;
 800360a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	441a      	add	r2, r3
 8003616:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800361a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800361e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800362a:	b29b      	uxth	r3, r3
 800362c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	b29b      	uxth	r3, r3
 800363c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003644:	b29a      	uxth	r2, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	4313      	orrs	r3, r2
 800364e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	441a      	add	r2, r3
 800365c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003670:	b29b      	uxth	r3, r3
 8003672:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	7b1b      	ldrb	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f040 8149 	bne.w	8003910 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	785b      	ldrb	r3, [r3, #1]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 8084 	beq.w	8003790 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003692:	b29b      	uxth	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	4413      	add	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	011a      	lsls	r2, r3, #4
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	88db      	ldrh	r3, [r3, #6]
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	81fb      	strh	r3, [r7, #14]
 80036ca:	89fb      	ldrh	r3, [r7, #14]
 80036cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01b      	beq.n	800370c <USB_ActivateEndpoint+0x17c>
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ea:	81bb      	strh	r3, [r7, #12]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	441a      	add	r2, r3
 80036f6:	89bb      	ldrh	r3, [r7, #12]
 80036f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003704:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003708:	b29b      	uxth	r3, r3
 800370a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	78db      	ldrb	r3, [r3, #3]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d020      	beq.n	8003756 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	b29b      	uxth	r3, r3
 8003722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800372a:	813b      	strh	r3, [r7, #8]
 800372c:	893b      	ldrh	r3, [r7, #8]
 800372e:	f083 0320 	eor.w	r3, r3, #32
 8003732:	813b      	strh	r3, [r7, #8]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	441a      	add	r2, r3
 800373e:	893b      	ldrh	r3, [r7, #8]
 8003740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800374c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003750:	b29b      	uxth	r3, r3
 8003752:	8013      	strh	r3, [r2, #0]
 8003754:	e27f      	b.n	8003c56 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800376c:	817b      	strh	r3, [r7, #10]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	441a      	add	r2, r3
 8003778:	897b      	ldrh	r3, [r7, #10]
 800377a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800377e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800378a:	b29b      	uxth	r3, r3
 800378c:	8013      	strh	r3, [r2, #0]
 800378e:	e262      	b.n	8003c56 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800379a:	b29b      	uxth	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	4413      	add	r3, r2
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	011a      	lsls	r2, r3, #4
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	88db      	ldrh	r3, [r3, #6]
 80037b8:	085b      	lsrs	r3, r3, #1
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	4413      	add	r3, r2
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	011a      	lsls	r2, r3, #4
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	4413      	add	r3, r2
 80037e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037e6:	623b      	str	r3, [r7, #32]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d112      	bne.n	8003816 <USB_ActivateEndpoint+0x286>
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	801a      	strh	r2, [r3, #0]
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	b29b      	uxth	r3, r3
 8003806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800380a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800380e:	b29a      	uxth	r2, r3
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	801a      	strh	r2, [r3, #0]
 8003814:	e02f      	b.n	8003876 <USB_ActivateEndpoint+0x2e6>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b3e      	cmp	r3, #62	; 0x3e
 800381c:	d813      	bhi.n	8003846 <USB_ActivateEndpoint+0x2b6>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	663b      	str	r3, [r7, #96]	; 0x60
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <USB_ActivateEndpoint+0x2a8>
 8003832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003834:	3301      	adds	r3, #1
 8003836:	663b      	str	r3, [r7, #96]	; 0x60
 8003838:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800383a:	b29b      	uxth	r3, r3
 800383c:	029b      	lsls	r3, r3, #10
 800383e:	b29a      	uxth	r2, r3
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	801a      	strh	r2, [r3, #0]
 8003844:	e017      	b.n	8003876 <USB_ActivateEndpoint+0x2e6>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	663b      	str	r3, [r7, #96]	; 0x60
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	2b00      	cmp	r3, #0
 8003858:	d102      	bne.n	8003860 <USB_ActivateEndpoint+0x2d0>
 800385a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800385c:	3b01      	subs	r3, #1
 800385e:	663b      	str	r3, [r7, #96]	; 0x60
 8003860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003862:	b29b      	uxth	r3, r3
 8003864:	029b      	lsls	r3, r3, #10
 8003866:	b29b      	uxth	r3, r3
 8003868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800386c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003870:	b29a      	uxth	r2, r3
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	83fb      	strh	r3, [r7, #30]
 8003884:	8bfb      	ldrh	r3, [r7, #30]
 8003886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01b      	beq.n	80038c6 <USB_ActivateEndpoint+0x336>
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a4:	83bb      	strh	r3, [r7, #28]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	441a      	add	r2, r3
 80038b0:	8bbb      	ldrh	r3, [r7, #28]
 80038b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038dc:	837b      	strh	r3, [r7, #26]
 80038de:	8b7b      	ldrh	r3, [r7, #26]
 80038e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80038e4:	837b      	strh	r3, [r7, #26]
 80038e6:	8b7b      	ldrh	r3, [r7, #26]
 80038e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038ec:	837b      	strh	r3, [r7, #26]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	441a      	add	r2, r3
 80038f8:	8b7b      	ldrh	r3, [r7, #26]
 80038fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800390a:	b29b      	uxth	r3, r3
 800390c:	8013      	strh	r3, [r2, #0]
 800390e:	e1a2      	b.n	8003c56 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	b29b      	uxth	r3, r3
 800391e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003926:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	441a      	add	r2, r3
 8003934:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800393c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003940:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003948:	b29b      	uxth	r3, r3
 800394a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003956:	b29b      	uxth	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800395c:	4413      	add	r3, r2
 800395e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	011a      	lsls	r2, r3, #4
 8003966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003968:	4413      	add	r3, r2
 800396a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800396e:	657b      	str	r3, [r7, #84]	; 0x54
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	891b      	ldrh	r3, [r3, #8]
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	b29b      	uxth	r3, r3
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800397e:	801a      	strh	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	653b      	str	r3, [r7, #80]	; 0x50
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800398a:	b29b      	uxth	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003990:	4413      	add	r3, r2
 8003992:	653b      	str	r3, [r7, #80]	; 0x50
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	011a      	lsls	r2, r3, #4
 800399a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800399c:	4413      	add	r3, r2
 800399e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80039a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	895b      	ldrh	r3, [r3, #10]
 80039a8:	085b      	lsrs	r3, r3, #1
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f040 8091 	bne.w	8003ae0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80039cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80039ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01b      	beq.n	8003a0e <USB_ActivateEndpoint+0x47e>
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ec:	877b      	strh	r3, [r7, #58]	; 0x3a
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	441a      	add	r2, r3
 80039f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80039fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	873b      	strh	r3, [r7, #56]	; 0x38
 8003a1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01b      	beq.n	8003a5e <USB_ActivateEndpoint+0x4ce>
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	441a      	add	r2, r3
 8003a48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a74:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003a76:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a7c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003a7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a84:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	441a      	add	r2, r3
 8003a90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003abc:	867b      	strh	r3, [r7, #50]	; 0x32
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	441a      	add	r2, r3
 8003ac8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	8013      	strh	r3, [r2, #0]
 8003ade:	e0ba      	b.n	8003c56 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003af0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01d      	beq.n	8003b38 <USB_ActivateEndpoint+0x5a8>
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b12:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	441a      	add	r2, r3
 8003b20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003b48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01d      	beq.n	8003b90 <USB_ActivateEndpoint+0x600>
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	441a      	add	r2, r3
 8003b78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	78db      	ldrb	r3, [r3, #3]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d024      	beq.n	8003be2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003bb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bb6:	f083 0320 	eor.w	r3, r3, #32
 8003bba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	441a      	add	r2, r3
 8003bc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	8013      	strh	r3, [r2, #0]
 8003be0:	e01d      	b.n	8003c1e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bf8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	441a      	add	r2, r3
 8003c06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c34:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	441a      	add	r2, r3
 8003c40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003c56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	376c      	adds	r7, #108	; 0x6c
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b08d      	sub	sp, #52	; 0x34
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	7b1b      	ldrb	r3, [r3, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f040 808e 	bne.w	8003d94 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	785b      	ldrb	r3, [r3, #1]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d044      	beq.n	8003d0a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	81bb      	strh	r3, [r7, #12]
 8003c8e:	89bb      	ldrh	r3, [r7, #12]
 8003c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01b      	beq.n	8003cd0 <USB_DeactivateEndpoint+0x6c>
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cae:	817b      	strh	r3, [r7, #10]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	441a      	add	r2, r3
 8003cba:	897b      	ldrh	r3, [r7, #10]
 8003cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce6:	813b      	strh	r3, [r7, #8]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	441a      	add	r2, r3
 8003cf2:	893b      	ldrh	r3, [r7, #8]
 8003cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	8013      	strh	r3, [r2, #0]
 8003d08:	e192      	b.n	8004030 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	827b      	strh	r3, [r7, #18]
 8003d18:	8a7b      	ldrh	r3, [r7, #18]
 8003d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01b      	beq.n	8003d5a <USB_DeactivateEndpoint+0xf6>
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d38:	823b      	strh	r3, [r7, #16]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	441a      	add	r2, r3
 8003d44:	8a3b      	ldrh	r3, [r7, #16]
 8003d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d70:	81fb      	strh	r3, [r7, #14]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	441a      	add	r2, r3
 8003d7c:	89fb      	ldrh	r3, [r7, #14]
 8003d7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	8013      	strh	r3, [r2, #0]
 8003d92:	e14d      	b.n	8004030 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	785b      	ldrb	r3, [r3, #1]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f040 80a5 	bne.w	8003ee8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	843b      	strh	r3, [r7, #32]
 8003dac:	8c3b      	ldrh	r3, [r7, #32]
 8003dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01b      	beq.n	8003dee <USB_DeactivateEndpoint+0x18a>
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dcc:	83fb      	strh	r3, [r7, #30]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	441a      	add	r2, r3
 8003dd8:	8bfb      	ldrh	r3, [r7, #30]
 8003dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	83bb      	strh	r3, [r7, #28]
 8003dfc:	8bbb      	ldrh	r3, [r7, #28]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d01b      	beq.n	8003e3e <USB_DeactivateEndpoint+0x1da>
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1c:	837b      	strh	r3, [r7, #26]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	441a      	add	r2, r3
 8003e28:	8b7b      	ldrh	r3, [r7, #26]
 8003e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e54:	833b      	strh	r3, [r7, #24]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	441a      	add	r2, r3
 8003e60:	8b3b      	ldrh	r3, [r7, #24]
 8003e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8c:	82fb      	strh	r3, [r7, #22]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	441a      	add	r2, r3
 8003e98:	8afb      	ldrh	r3, [r7, #22]
 8003e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec4:	82bb      	strh	r3, [r7, #20]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	441a      	add	r2, r3
 8003ed0:	8abb      	ldrh	r3, [r7, #20]
 8003ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	8013      	strh	r3, [r2, #0]
 8003ee6:	e0a3      	b.n	8004030 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003ef6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01b      	beq.n	8003f38 <USB_DeactivateEndpoint+0x2d4>
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	441a      	add	r2, r3
 8003f22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003f46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01b      	beq.n	8003f88 <USB_DeactivateEndpoint+0x324>
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	853b      	strh	r3, [r7, #40]	; 0x28
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	441a      	add	r2, r3
 8003f72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	441a      	add	r2, r3
 8003faa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	b29b      	uxth	r3, r3
 8004006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	441a      	add	r2, r3
 800401a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800401c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800402c:	b29b      	uxth	r3, r3
 800402e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3734      	adds	r7, #52	; 0x34
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b0cc      	sub	sp, #304	; 0x130
 8004040:	af00      	add	r7, sp, #0
 8004042:	1d3b      	adds	r3, r7, #4
 8004044:	6018      	str	r0, [r3, #0]
 8004046:	463b      	mov	r3, r7
 8004048:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800404a:	463b      	mov	r3, r7
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	785b      	ldrb	r3, [r3, #1]
 8004050:	2b01      	cmp	r3, #1
 8004052:	f040 872e 	bne.w	8004eb2 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004056:	463b      	mov	r3, r7
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	463b      	mov	r3, r7
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	429a      	cmp	r2, r3
 8004064:	d905      	bls.n	8004072 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004066:	463b      	mov	r3, r7
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004070:	e004      	b.n	800407c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004072:	463b      	mov	r3, r7
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800407c:	463b      	mov	r3, r7
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	7b1b      	ldrb	r3, [r3, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d134      	bne.n	80040f0 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004086:	463b      	mov	r3, r7
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6959      	ldr	r1, [r3, #20]
 800408c:	463b      	mov	r3, r7
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	88da      	ldrh	r2, [r3, #6]
 8004092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004096:	b29b      	uxth	r3, r3
 8004098:	1d38      	adds	r0, r7, #4
 800409a:	6800      	ldr	r0, [r0, #0]
 800409c:	f001 fc03 	bl	80058a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80040a0:	f107 0310 	add.w	r3, r7, #16
 80040a4:	1d3a      	adds	r2, r7, #4
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	4619      	mov	r1, r3
 80040b6:	f107 0310 	add.w	r3, r7, #16
 80040ba:	f107 0210 	add.w	r2, r7, #16
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	440a      	add	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	463b      	mov	r3, r7
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	011a      	lsls	r2, r3, #4
 80040cc:	f107 0310 	add.w	r3, r7, #16
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4413      	add	r3, r2
 80040d4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80040d8:	f107 030c 	add.w	r3, r7, #12
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	f107 030c 	add.w	r3, r7, #12
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	801a      	strh	r2, [r3, #0]
 80040ec:	f000 beac 	b.w	8004e48 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80040f0:	463b      	mov	r3, r7
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	78db      	ldrb	r3, [r3, #3]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	f040 838c 	bne.w	8004814 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80040fc:	463b      	mov	r3, r7
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a1a      	ldr	r2, [r3, #32]
 8004102:	463b      	mov	r3, r7
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	429a      	cmp	r2, r3
 800410a:	f240 8330 	bls.w	800476e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800410e:	1d3b      	adds	r3, r7, #4
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	463b      	mov	r3, r7
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	b29b      	uxth	r3, r3
 8004120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004128:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800412c:	1d3b      	adds	r3, r7, #4
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	463b      	mov	r3, r7
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	441a      	add	r2, r3
 800413a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800413e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004146:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800414a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414e:	b29b      	uxth	r3, r3
 8004150:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004152:	463b      	mov	r3, r7
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800415c:	1ad2      	subs	r2, r2, r3
 800415e:	463b      	mov	r3, r7
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004164:	1d3b      	adds	r3, r7, #4
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	463b      	mov	r3, r7
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 819e 	beq.w	80044bc <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004180:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004184:	1d3a      	adds	r2, r7, #4
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	463b      	mov	r3, r7
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	785b      	ldrb	r3, [r3, #1]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d17a      	bne.n	800428a <USB_EPStartXfer+0x24e>
 8004194:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004198:	1d3a      	adds	r2, r7, #4
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	1d3b      	adds	r3, r7, #4
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	4619      	mov	r1, r3
 80041aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	440a      	add	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	463b      	mov	r3, r7
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	011a      	lsls	r2, r3, #4
 80041c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4413      	add	r3, r2
 80041c8:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80041cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11a      	bne.n	8004210 <USB_EPStartXfer+0x1d4>
 80041da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	801a      	strh	r2, [r3, #0]
 80041f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004204:	b29a      	uxth	r2, r3
 8004206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	801a      	strh	r2, [r3, #0]
 800420e:	e062      	b.n	80042d6 <USB_EPStartXfer+0x29a>
 8004210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004214:	2b3e      	cmp	r3, #62	; 0x3e
 8004216:	d819      	bhi.n	800424c <USB_EPStartXfer+0x210>
 8004218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800421c:	085b      	lsrs	r3, r3, #1
 800421e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d004      	beq.n	8004238 <USB_EPStartXfer+0x1fc>
 800422e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004232:	3301      	adds	r3, #1
 8004234:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004238:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800423c:	b29b      	uxth	r3, r3
 800423e:	029b      	lsls	r3, r3, #10
 8004240:	b29a      	uxth	r2, r3
 8004242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	801a      	strh	r2, [r3, #0]
 800424a:	e044      	b.n	80042d6 <USB_EPStartXfer+0x29a>
 800424c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	2b00      	cmp	r3, #0
 8004260:	d104      	bne.n	800426c <USB_EPStartXfer+0x230>
 8004262:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004266:	3b01      	subs	r3, #1
 8004268:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800426c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004270:	b29b      	uxth	r3, r3
 8004272:	029b      	lsls	r3, r3, #10
 8004274:	b29b      	uxth	r3, r3
 8004276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800427a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800427e:	b29a      	uxth	r2, r3
 8004280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	801a      	strh	r2, [r3, #0]
 8004288:	e025      	b.n	80042d6 <USB_EPStartXfer+0x29a>
 800428a:	463b      	mov	r3, r7
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	785b      	ldrb	r3, [r3, #1]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d120      	bne.n	80042d6 <USB_EPStartXfer+0x29a>
 8004294:	1d3b      	adds	r3, r7, #4
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800429c:	b29b      	uxth	r3, r3
 800429e:	4619      	mov	r1, r3
 80042a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	440a      	add	r2, r1
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	463b      	mov	r3, r7
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	011a      	lsls	r2, r3, #4
 80042b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4413      	add	r3, r2
 80042be:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80042c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80042d6:	463b      	mov	r3, r7
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	895b      	ldrh	r3, [r3, #10]
 80042dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042e0:	463b      	mov	r3, r7
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6959      	ldr	r1, [r3, #20]
 80042e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80042f0:	1d38      	adds	r0, r7, #4
 80042f2:	6800      	ldr	r0, [r0, #0]
 80042f4:	f001 fad7 	bl	80058a6 <USB_WritePMA>
            ep->xfer_buff += len;
 80042f8:	463b      	mov	r3, r7
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004302:	441a      	add	r2, r3
 8004304:	463b      	mov	r3, r7
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800430a:	463b      	mov	r3, r7
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6a1a      	ldr	r2, [r3, #32]
 8004310:	463b      	mov	r3, r7
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	429a      	cmp	r2, r3
 8004318:	d909      	bls.n	800432e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800431a:	463b      	mov	r3, r7
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a1a      	ldr	r2, [r3, #32]
 8004320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004324:	1ad2      	subs	r2, r2, r3
 8004326:	463b      	mov	r3, r7
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	621a      	str	r2, [r3, #32]
 800432c:	e008      	b.n	8004340 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800432e:	463b      	mov	r3, r7
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004338:	463b      	mov	r3, r7
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2200      	movs	r2, #0
 800433e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004340:	463b      	mov	r3, r7
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	785b      	ldrb	r3, [r3, #1]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d17a      	bne.n	8004440 <USB_EPStartXfer+0x404>
 800434a:	f107 0318 	add.w	r3, r7, #24
 800434e:	1d3a      	adds	r2, r7, #4
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	1d3b      	adds	r3, r7, #4
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800435c:	b29b      	uxth	r3, r3
 800435e:	4619      	mov	r1, r3
 8004360:	f107 0318 	add.w	r3, r7, #24
 8004364:	f107 0218 	add.w	r2, r7, #24
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	440a      	add	r2, r1
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	463b      	mov	r3, r7
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	011a      	lsls	r2, r3, #4
 8004376:	f107 0318 	add.w	r3, r7, #24
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4413      	add	r3, r2
 800437e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004382:	f107 0314 	add.w	r3, r7, #20
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800438c:	2b00      	cmp	r3, #0
 800438e:	d11a      	bne.n	80043c6 <USB_EPStartXfer+0x38a>
 8004390:	f107 0314 	add.w	r3, r7, #20
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800439e:	b29a      	uxth	r2, r3
 80043a0:	f107 0314 	add.w	r3, r7, #20
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	801a      	strh	r2, [r3, #0]
 80043a8:	f107 0314 	add.w	r3, r7, #20
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	f107 0314 	add.w	r3, r7, #20
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	e067      	b.n	8004496 <USB_EPStartXfer+0x45a>
 80043c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043ca:	2b3e      	cmp	r3, #62	; 0x3e
 80043cc:	d819      	bhi.n	8004402 <USB_EPStartXfer+0x3c6>
 80043ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043d2:	085b      	lsrs	r3, r3, #1
 80043d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80043d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <USB_EPStartXfer+0x3b2>
 80043e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80043e8:	3301      	adds	r3, #1
 80043ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80043ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	029b      	lsls	r3, r3, #10
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	f107 0314 	add.w	r3, r7, #20
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	801a      	strh	r2, [r3, #0]
 8004400:	e049      	b.n	8004496 <USB_EPStartXfer+0x45a>
 8004402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800440c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <USB_EPStartXfer+0x3e6>
 8004418:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800441c:	3b01      	subs	r3, #1
 800441e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004422:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004426:	b29b      	uxth	r3, r3
 8004428:	029b      	lsls	r3, r3, #10
 800442a:	b29b      	uxth	r3, r3
 800442c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004434:	b29a      	uxth	r2, r3
 8004436:	f107 0314 	add.w	r3, r7, #20
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	801a      	strh	r2, [r3, #0]
 800443e:	e02a      	b.n	8004496 <USB_EPStartXfer+0x45a>
 8004440:	463b      	mov	r3, r7
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d125      	bne.n	8004496 <USB_EPStartXfer+0x45a>
 800444a:	f107 0320 	add.w	r3, r7, #32
 800444e:	1d3a      	adds	r2, r7, #4
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	1d3b      	adds	r3, r7, #4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800445c:	b29b      	uxth	r3, r3
 800445e:	4619      	mov	r1, r3
 8004460:	f107 0320 	add.w	r3, r7, #32
 8004464:	f107 0220 	add.w	r2, r7, #32
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	440a      	add	r2, r1
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	463b      	mov	r3, r7
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	011a      	lsls	r2, r3, #4
 8004476:	f107 0320 	add.w	r3, r7, #32
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4413      	add	r3, r2
 800447e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004482:	f107 031c 	add.w	r3, r7, #28
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800448c:	b29a      	uxth	r2, r3
 800448e:	f107 031c 	add.w	r3, r7, #28
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004496:	463b      	mov	r3, r7
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	891b      	ldrh	r3, [r3, #8]
 800449c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044a0:	463b      	mov	r3, r7
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6959      	ldr	r1, [r3, #20]
 80044a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80044b0:	1d38      	adds	r0, r7, #4
 80044b2:	6800      	ldr	r0, [r0, #0]
 80044b4:	f001 f9f7 	bl	80058a6 <USB_WritePMA>
 80044b8:	f000 bcc6 	b.w	8004e48 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80044bc:	463b      	mov	r3, r7
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	785b      	ldrb	r3, [r3, #1]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d164      	bne.n	8004590 <USB_EPStartXfer+0x554>
 80044c6:	1d3b      	adds	r3, r7, #4
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80044cc:	1d3b      	adds	r3, r7, #4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	461a      	mov	r2, r3
 80044d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044da:	4413      	add	r3, r2
 80044dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80044de:	463b      	mov	r3, r7
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	011a      	lsls	r2, r3, #4
 80044e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044e8:	4413      	add	r3, r2
 80044ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044ee:	647b      	str	r3, [r7, #68]	; 0x44
 80044f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d112      	bne.n	800451e <USB_EPStartXfer+0x4e2>
 80044f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004502:	b29a      	uxth	r2, r3
 8004504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004506:	801a      	strh	r2, [r3, #0]
 8004508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	b29b      	uxth	r3, r3
 800450e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004516:	b29a      	uxth	r2, r3
 8004518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	e057      	b.n	80045ce <USB_EPStartXfer+0x592>
 800451e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004522:	2b3e      	cmp	r3, #62	; 0x3e
 8004524:	d817      	bhi.n	8004556 <USB_EPStartXfer+0x51a>
 8004526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800452a:	085b      	lsrs	r3, r3, #1
 800452c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d004      	beq.n	8004546 <USB_EPStartXfer+0x50a>
 800453c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004540:	3301      	adds	r3, #1
 8004542:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004546:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800454a:	b29b      	uxth	r3, r3
 800454c:	029b      	lsls	r3, r3, #10
 800454e:	b29a      	uxth	r2, r3
 8004550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004552:	801a      	strh	r2, [r3, #0]
 8004554:	e03b      	b.n	80045ce <USB_EPStartXfer+0x592>
 8004556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2b00      	cmp	r3, #0
 800456a:	d104      	bne.n	8004576 <USB_EPStartXfer+0x53a>
 800456c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004570:	3b01      	subs	r3, #1
 8004572:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004576:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800457a:	b29b      	uxth	r3, r3
 800457c:	029b      	lsls	r3, r3, #10
 800457e:	b29b      	uxth	r3, r3
 8004580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004588:	b29a      	uxth	r2, r3
 800458a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800458c:	801a      	strh	r2, [r3, #0]
 800458e:	e01e      	b.n	80045ce <USB_EPStartXfer+0x592>
 8004590:	463b      	mov	r3, r7
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	785b      	ldrb	r3, [r3, #1]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d119      	bne.n	80045ce <USB_EPStartXfer+0x592>
 800459a:	1d3b      	adds	r3, r7, #4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	653b      	str	r3, [r7, #80]	; 0x50
 80045a0:	1d3b      	adds	r3, r7, #4
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ae:	4413      	add	r3, r2
 80045b0:	653b      	str	r3, [r7, #80]	; 0x50
 80045b2:	463b      	mov	r3, r7
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	011a      	lsls	r2, r3, #4
 80045ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045bc:	4413      	add	r3, r2
 80045be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80045ce:	463b      	mov	r3, r7
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	891b      	ldrh	r3, [r3, #8]
 80045d4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045d8:	463b      	mov	r3, r7
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6959      	ldr	r1, [r3, #20]
 80045de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80045e8:	1d38      	adds	r0, r7, #4
 80045ea:	6800      	ldr	r0, [r0, #0]
 80045ec:	f001 f95b 	bl	80058a6 <USB_WritePMA>
            ep->xfer_buff += len;
 80045f0:	463b      	mov	r3, r7
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045fa:	441a      	add	r2, r3
 80045fc:	463b      	mov	r3, r7
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004602:	463b      	mov	r3, r7
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6a1a      	ldr	r2, [r3, #32]
 8004608:	463b      	mov	r3, r7
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	429a      	cmp	r2, r3
 8004610:	d909      	bls.n	8004626 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8004612:	463b      	mov	r3, r7
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a1a      	ldr	r2, [r3, #32]
 8004618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800461c:	1ad2      	subs	r2, r2, r3
 800461e:	463b      	mov	r3, r7
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	621a      	str	r2, [r3, #32]
 8004624:	e008      	b.n	8004638 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004626:	463b      	mov	r3, r7
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004630:	463b      	mov	r3, r7
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2200      	movs	r2, #0
 8004636:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004638:	1d3b      	adds	r3, r7, #4
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	643b      	str	r3, [r7, #64]	; 0x40
 800463e:	463b      	mov	r3, r7
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	785b      	ldrb	r3, [r3, #1]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d164      	bne.n	8004712 <USB_EPStartXfer+0x6d6>
 8004648:	1d3b      	adds	r3, r7, #4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	63bb      	str	r3, [r7, #56]	; 0x38
 800464e:	1d3b      	adds	r3, r7, #4
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004656:	b29b      	uxth	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465c:	4413      	add	r3, r2
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004660:	463b      	mov	r3, r7
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	011a      	lsls	r2, r3, #4
 8004668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466a:	4413      	add	r3, r2
 800466c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004670:	637b      	str	r3, [r7, #52]	; 0x34
 8004672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004676:	2b00      	cmp	r3, #0
 8004678:	d112      	bne.n	80046a0 <USB_EPStartXfer+0x664>
 800467a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004684:	b29a      	uxth	r2, r3
 8004686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004688:	801a      	strh	r2, [r3, #0]
 800468a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b29b      	uxth	r3, r3
 8004690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004698:	b29a      	uxth	r2, r3
 800469a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469c:	801a      	strh	r2, [r3, #0]
 800469e:	e054      	b.n	800474a <USB_EPStartXfer+0x70e>
 80046a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046a4:	2b3e      	cmp	r3, #62	; 0x3e
 80046a6:	d817      	bhi.n	80046d8 <USB_EPStartXfer+0x69c>
 80046a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046ac:	085b      	lsrs	r3, r3, #1
 80046ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80046b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d004      	beq.n	80046c8 <USB_EPStartXfer+0x68c>
 80046be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046c2:	3301      	adds	r3, #1
 80046c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80046c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	029b      	lsls	r3, r3, #10
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	801a      	strh	r2, [r3, #0]
 80046d6:	e038      	b.n	800474a <USB_EPStartXfer+0x70e>
 80046d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80046e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d104      	bne.n	80046f8 <USB_EPStartXfer+0x6bc>
 80046ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046f2:	3b01      	subs	r3, #1
 80046f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80046f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	029b      	lsls	r3, r3, #10
 8004700:	b29b      	uxth	r3, r3
 8004702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800470a:	b29a      	uxth	r2, r3
 800470c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470e:	801a      	strh	r2, [r3, #0]
 8004710:	e01b      	b.n	800474a <USB_EPStartXfer+0x70e>
 8004712:	463b      	mov	r3, r7
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	785b      	ldrb	r3, [r3, #1]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d116      	bne.n	800474a <USB_EPStartXfer+0x70e>
 800471c:	1d3b      	adds	r3, r7, #4
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004724:	b29b      	uxth	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800472a:	4413      	add	r3, r2
 800472c:	643b      	str	r3, [r7, #64]	; 0x40
 800472e:	463b      	mov	r3, r7
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	011a      	lsls	r2, r3, #4
 8004736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004738:	4413      	add	r3, r2
 800473a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800473e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004744:	b29a      	uxth	r2, r3
 8004746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004748:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800474a:	463b      	mov	r3, r7
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	895b      	ldrh	r3, [r3, #10]
 8004750:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004754:	463b      	mov	r3, r7
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6959      	ldr	r1, [r3, #20]
 800475a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800475e:	b29b      	uxth	r3, r3
 8004760:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004764:	1d38      	adds	r0, r7, #4
 8004766:	6800      	ldr	r0, [r0, #0]
 8004768:	f001 f89d 	bl	80058a6 <USB_WritePMA>
 800476c:	e36c      	b.n	8004e48 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800476e:	463b      	mov	r3, r7
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004778:	1d3b      	adds	r3, r7, #4
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	463b      	mov	r3, r7
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800478e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004792:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004796:	1d3b      	adds	r3, r7, #4
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	463b      	mov	r3, r7
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	441a      	add	r2, r3
 80047a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80047a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80047bc:	1d3b      	adds	r3, r7, #4
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d0:	4413      	add	r3, r2
 80047d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047d4:	463b      	mov	r3, r7
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	011a      	lsls	r2, r3, #4
 80047dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047de:	4413      	add	r3, r2
 80047e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80047e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80047f0:	463b      	mov	r3, r7
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	891b      	ldrh	r3, [r3, #8]
 80047f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047fa:	463b      	mov	r3, r7
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6959      	ldr	r1, [r3, #20]
 8004800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004804:	b29b      	uxth	r3, r3
 8004806:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800480a:	1d38      	adds	r0, r7, #4
 800480c:	6800      	ldr	r0, [r0, #0]
 800480e:	f001 f84a 	bl	80058a6 <USB_WritePMA>
 8004812:	e319      	b.n	8004e48 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004814:	1d3b      	adds	r3, r7, #4
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	463b      	mov	r3, r7
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004832:	1d3b      	adds	r3, r7, #4
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	463b      	mov	r3, r7
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	441a      	add	r2, r3
 8004840:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004854:	b29b      	uxth	r3, r3
 8004856:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004858:	463b      	mov	r3, r7
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6a1a      	ldr	r2, [r3, #32]
 800485e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004862:	1ad2      	subs	r2, r2, r3
 8004864:	463b      	mov	r3, r7
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800486a:	1d3b      	adds	r3, r7, #4
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	463b      	mov	r3, r7
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8162 	beq.w	8004b4a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004886:	1d3b      	adds	r3, r7, #4
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800488e:	463b      	mov	r3, r7
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d164      	bne.n	8004962 <USB_EPStartXfer+0x926>
 8004898:	1d3b      	adds	r3, r7, #4
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	67bb      	str	r3, [r7, #120]	; 0x78
 800489e:	1d3b      	adds	r3, r7, #4
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ac:	4413      	add	r3, r2
 80048ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80048b0:	463b      	mov	r3, r7
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	011a      	lsls	r2, r3, #4
 80048b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ba:	4413      	add	r3, r2
 80048bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048c0:	677b      	str	r3, [r7, #116]	; 0x74
 80048c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d112      	bne.n	80048f0 <USB_EPStartXfer+0x8b4>
 80048ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d8:	801a      	strh	r2, [r3, #0]
 80048da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ec:	801a      	strh	r2, [r3, #0]
 80048ee:	e057      	b.n	80049a0 <USB_EPStartXfer+0x964>
 80048f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f4:	2b3e      	cmp	r3, #62	; 0x3e
 80048f6:	d817      	bhi.n	8004928 <USB_EPStartXfer+0x8ec>
 80048f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d004      	beq.n	8004918 <USB_EPStartXfer+0x8dc>
 800490e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004912:	3301      	adds	r3, #1
 8004914:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004918:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800491c:	b29b      	uxth	r3, r3
 800491e:	029b      	lsls	r3, r3, #10
 8004920:	b29a      	uxth	r2, r3
 8004922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004924:	801a      	strh	r2, [r3, #0]
 8004926:	e03b      	b.n	80049a0 <USB_EPStartXfer+0x964>
 8004928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004936:	f003 031f 	and.w	r3, r3, #31
 800493a:	2b00      	cmp	r3, #0
 800493c:	d104      	bne.n	8004948 <USB_EPStartXfer+0x90c>
 800493e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004942:	3b01      	subs	r3, #1
 8004944:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004948:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800494c:	b29b      	uxth	r3, r3
 800494e:	029b      	lsls	r3, r3, #10
 8004950:	b29b      	uxth	r3, r3
 8004952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800495a:	b29a      	uxth	r2, r3
 800495c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800495e:	801a      	strh	r2, [r3, #0]
 8004960:	e01e      	b.n	80049a0 <USB_EPStartXfer+0x964>
 8004962:	463b      	mov	r3, r7
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	785b      	ldrb	r3, [r3, #1]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d119      	bne.n	80049a0 <USB_EPStartXfer+0x964>
 800496c:	1d3b      	adds	r3, r7, #4
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004974:	b29b      	uxth	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800497c:	4413      	add	r3, r2
 800497e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004982:	463b      	mov	r3, r7
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	011a      	lsls	r2, r3, #4
 800498a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800498e:	4413      	add	r3, r2
 8004990:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004994:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800499a:	b29a      	uxth	r2, r3
 800499c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800499e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80049a0:	463b      	mov	r3, r7
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	895b      	ldrh	r3, [r3, #10]
 80049a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049aa:	463b      	mov	r3, r7
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6959      	ldr	r1, [r3, #20]
 80049b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80049ba:	1d38      	adds	r0, r7, #4
 80049bc:	6800      	ldr	r0, [r0, #0]
 80049be:	f000 ff72 	bl	80058a6 <USB_WritePMA>
          ep->xfer_buff += len;
 80049c2:	463b      	mov	r3, r7
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695a      	ldr	r2, [r3, #20]
 80049c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049cc:	441a      	add	r2, r3
 80049ce:	463b      	mov	r3, r7
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80049d4:	463b      	mov	r3, r7
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6a1a      	ldr	r2, [r3, #32]
 80049da:	463b      	mov	r3, r7
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d909      	bls.n	80049f8 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80049e4:	463b      	mov	r3, r7
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6a1a      	ldr	r2, [r3, #32]
 80049ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049ee:	1ad2      	subs	r2, r2, r3
 80049f0:	463b      	mov	r3, r7
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	621a      	str	r2, [r3, #32]
 80049f6:	e008      	b.n	8004a0a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80049f8:	463b      	mov	r3, r7
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004a02:	463b      	mov	r3, r7
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2200      	movs	r2, #0
 8004a08:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 821a 	beq.w	8004e48 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a14:	463b      	mov	r3, r7
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	785b      	ldrb	r3, [r3, #1]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d164      	bne.n	8004ae8 <USB_EPStartXfer+0xaac>
 8004a1e:	1d3b      	adds	r3, r7, #4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a24:	1d3b      	adds	r3, r7, #4
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a32:	4413      	add	r3, r2
 8004a34:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a36:	463b      	mov	r3, r7
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	011a      	lsls	r2, r3, #4
 8004a3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a40:	4413      	add	r3, r2
 8004a42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a46:	667b      	str	r3, [r7, #100]	; 0x64
 8004a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d112      	bne.n	8004a76 <USB_EPStartXfer+0xa3a>
 8004a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a5e:	801a      	strh	r2, [r3, #0]
 8004a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a72:	801a      	strh	r2, [r3, #0]
 8004a74:	e057      	b.n	8004b26 <USB_EPStartXfer+0xaea>
 8004a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a7a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a7c:	d817      	bhi.n	8004aae <USB_EPStartXfer+0xa72>
 8004a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d004      	beq.n	8004a9e <USB_EPStartXfer+0xa62>
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a98:	3301      	adds	r3, #1
 8004a9a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	029b      	lsls	r3, r3, #10
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aaa:	801a      	strh	r2, [r3, #0]
 8004aac:	e03b      	b.n	8004b26 <USB_EPStartXfer+0xaea>
 8004aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d104      	bne.n	8004ace <USB_EPStartXfer+0xa92>
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	029b      	lsls	r3, r3, #10
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ae4:	801a      	strh	r2, [r3, #0]
 8004ae6:	e01e      	b.n	8004b26 <USB_EPStartXfer+0xaea>
 8004ae8:	463b      	mov	r3, r7
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	785b      	ldrb	r3, [r3, #1]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d119      	bne.n	8004b26 <USB_EPStartXfer+0xaea>
 8004af2:	1d3b      	adds	r3, r7, #4
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	673b      	str	r3, [r7, #112]	; 0x70
 8004af8:	1d3b      	adds	r3, r7, #4
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b06:	4413      	add	r3, r2
 8004b08:	673b      	str	r3, [r7, #112]	; 0x70
 8004b0a:	463b      	mov	r3, r7
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	011a      	lsls	r2, r3, #4
 8004b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b14:	4413      	add	r3, r2
 8004b16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004b26:	463b      	mov	r3, r7
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	891b      	ldrh	r3, [r3, #8]
 8004b2c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b30:	463b      	mov	r3, r7
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6959      	ldr	r1, [r3, #20]
 8004b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b40:	1d38      	adds	r0, r7, #4
 8004b42:	6800      	ldr	r0, [r0, #0]
 8004b44:	f000 feaf 	bl	80058a6 <USB_WritePMA>
 8004b48:	e17e      	b.n	8004e48 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b4a:	463b      	mov	r3, r7
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d16f      	bne.n	8004c34 <USB_EPStartXfer+0xbf8>
 8004b54:	1d3b      	adds	r3, r7, #4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b72:	463b      	mov	r3, r7
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	011a      	lsls	r2, r3, #4
 8004b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b7e:	4413      	add	r3, r2
 8004b80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d116      	bne.n	8004bbe <USB_EPStartXfer+0xb82>
 8004b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ba2:	801a      	strh	r2, [r3, #0]
 8004ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bba:	801a      	strh	r2, [r3, #0]
 8004bbc:	e05f      	b.n	8004c7e <USB_EPStartXfer+0xc42>
 8004bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bc2:	2b3e      	cmp	r3, #62	; 0x3e
 8004bc4:	d818      	bhi.n	8004bf8 <USB_EPStartXfer+0xbbc>
 8004bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bca:	085b      	lsrs	r3, r3, #1
 8004bcc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d004      	beq.n	8004be6 <USB_EPStartXfer+0xbaa>
 8004bdc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004be0:	3301      	adds	r3, #1
 8004be2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004be6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	029b      	lsls	r3, r3, #10
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bf4:	801a      	strh	r2, [r3, #0]
 8004bf6:	e042      	b.n	8004c7e <USB_EPStartXfer+0xc42>
 8004bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bfc:	095b      	lsrs	r3, r3, #5
 8004bfe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <USB_EPStartXfer+0xbdc>
 8004c0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c12:	3b01      	subs	r3, #1
 8004c14:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004c18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	029b      	lsls	r3, r3, #10
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c30:	801a      	strh	r2, [r3, #0]
 8004c32:	e024      	b.n	8004c7e <USB_EPStartXfer+0xc42>
 8004c34:	463b      	mov	r3, r7
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	785b      	ldrb	r3, [r3, #1]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d11f      	bne.n	8004c7e <USB_EPStartXfer+0xc42>
 8004c3e:	1d3b      	adds	r3, r7, #4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c46:	1d3b      	adds	r3, r7, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c56:	4413      	add	r3, r2
 8004c58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c5c:	463b      	mov	r3, r7
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	011a      	lsls	r2, r3, #4
 8004c64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c68:	4413      	add	r3, r2
 8004c6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c7c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004c7e:	463b      	mov	r3, r7
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	891b      	ldrh	r3, [r3, #8]
 8004c84:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c88:	463b      	mov	r3, r7
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6959      	ldr	r1, [r3, #20]
 8004c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c98:	1d38      	adds	r0, r7, #4
 8004c9a:	6800      	ldr	r0, [r0, #0]
 8004c9c:	f000 fe03 	bl	80058a6 <USB_WritePMA>
          ep->xfer_buff += len;
 8004ca0:	463b      	mov	r3, r7
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695a      	ldr	r2, [r3, #20]
 8004ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004caa:	441a      	add	r2, r3
 8004cac:	463b      	mov	r3, r7
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004cb2:	463b      	mov	r3, r7
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6a1a      	ldr	r2, [r3, #32]
 8004cb8:	463b      	mov	r3, r7
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d909      	bls.n	8004cd6 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8004cc2:	463b      	mov	r3, r7
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6a1a      	ldr	r2, [r3, #32]
 8004cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ccc:	1ad2      	subs	r2, r2, r3
 8004cce:	463b      	mov	r3, r7
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	621a      	str	r2, [r3, #32]
 8004cd4:	e008      	b.n	8004ce8 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8004cd6:	463b      	mov	r3, r7
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004ce0:	463b      	mov	r3, r7
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80ab 	beq.w	8004e48 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004cf2:	1d3b      	adds	r3, r7, #4
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cfa:	463b      	mov	r3, r7
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	785b      	ldrb	r3, [r3, #1]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d16f      	bne.n	8004de4 <USB_EPStartXfer+0xda8>
 8004d04:	1d3b      	adds	r3, r7, #4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d0c:	1d3b      	adds	r3, r7, #4
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d22:	463b      	mov	r3, r7
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	011a      	lsls	r2, r3, #4
 8004d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d2e:	4413      	add	r3, r2
 8004d30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d116      	bne.n	8004d6e <USB_EPStartXfer+0xd32>
 8004d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d52:	801a      	strh	r2, [r3, #0]
 8004d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d6a:	801a      	strh	r2, [r3, #0]
 8004d6c:	e05b      	b.n	8004e26 <USB_EPStartXfer+0xdea>
 8004d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d72:	2b3e      	cmp	r3, #62	; 0x3e
 8004d74:	d818      	bhi.n	8004da8 <USB_EPStartXfer+0xd6c>
 8004d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d7a:	085b      	lsrs	r3, r3, #1
 8004d7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d004      	beq.n	8004d96 <USB_EPStartXfer+0xd5a>
 8004d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d90:	3301      	adds	r3, #1
 8004d92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	029b      	lsls	r3, r3, #10
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004da4:	801a      	strh	r2, [r3, #0]
 8004da6:	e03e      	b.n	8004e26 <USB_EPStartXfer+0xdea>
 8004da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dac:	095b      	lsrs	r3, r3, #5
 8004dae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004db6:	f003 031f 	and.w	r3, r3, #31
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <USB_EPStartXfer+0xd8c>
 8004dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	029b      	lsls	r3, r3, #10
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	e020      	b.n	8004e26 <USB_EPStartXfer+0xdea>
 8004de4:	463b      	mov	r3, r7
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	785b      	ldrb	r3, [r3, #1]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d11b      	bne.n	8004e26 <USB_EPStartXfer+0xdea>
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	461a      	mov	r2, r3
 8004dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dfe:	4413      	add	r3, r2
 8004e00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e04:	463b      	mov	r3, r7
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	011a      	lsls	r2, r3, #4
 8004e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e10:	4413      	add	r3, r2
 8004e12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004e26:	463b      	mov	r3, r7
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	895b      	ldrh	r3, [r3, #10]
 8004e2c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e30:	463b      	mov	r3, r7
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6959      	ldr	r1, [r3, #20]
 8004e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e40:	1d38      	adds	r0, r7, #4
 8004e42:	6800      	ldr	r0, [r0, #0]
 8004e44:	f000 fd2f 	bl	80058a6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004e48:	1d3b      	adds	r3, r7, #4
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	463b      	mov	r3, r7
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f107 020a 	add.w	r2, r7, #10
 8004e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e66:	8013      	strh	r3, [r2, #0]
 8004e68:	f107 030a 	add.w	r3, r7, #10
 8004e6c:	f107 020a 	add.w	r2, r7, #10
 8004e70:	8812      	ldrh	r2, [r2, #0]
 8004e72:	f082 0210 	eor.w	r2, r2, #16
 8004e76:	801a      	strh	r2, [r3, #0]
 8004e78:	f107 030a 	add.w	r3, r7, #10
 8004e7c:	f107 020a 	add.w	r2, r7, #10
 8004e80:	8812      	ldrh	r2, [r2, #0]
 8004e82:	f082 0220 	eor.w	r2, r2, #32
 8004e86:	801a      	strh	r2, [r3, #0]
 8004e88:	1d3b      	adds	r3, r7, #4
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	463b      	mov	r3, r7
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	f107 030a 	add.w	r3, r7, #10
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	8013      	strh	r3, [r2, #0]
 8004eb0:	e3b5      	b.n	800561e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004eb2:	463b      	mov	r3, r7
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	7b1b      	ldrb	r3, [r3, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f040 8090 	bne.w	8004fde <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699a      	ldr	r2, [r3, #24]
 8004ec4:	463b      	mov	r3, r7
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d90e      	bls.n	8004eec <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8004ece:	463b      	mov	r3, r7
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8004ed8:	463b      	mov	r3, r7
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee2:	1ad2      	subs	r2, r2, r3
 8004ee4:	463b      	mov	r3, r7
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	619a      	str	r2, [r3, #24]
 8004eea:	e008      	b.n	8004efe <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8004eec:	463b      	mov	r3, r7
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8004ef6:	463b      	mov	r3, r7
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2200      	movs	r2, #0
 8004efc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004efe:	1d3b      	adds	r3, r7, #4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f06:	1d3b      	adds	r3, r7, #4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004f16:	4413      	add	r3, r2
 8004f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f1c:	463b      	mov	r3, r7
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	011a      	lsls	r2, r3, #4
 8004f24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004f28:	4413      	add	r3, r2
 8004f2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d116      	bne.n	8004f68 <USB_EPStartXfer+0xf2c>
 8004f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f4c:	801a      	strh	r2, [r3, #0]
 8004f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f64:	801a      	strh	r2, [r3, #0]
 8004f66:	e32c      	b.n	80055c2 <USB_EPStartXfer+0x1586>
 8004f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6c:	2b3e      	cmp	r3, #62	; 0x3e
 8004f6e:	d818      	bhi.n	8004fa2 <USB_EPStartXfer+0xf66>
 8004f70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <USB_EPStartXfer+0xf54>
 8004f86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004f90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	029b      	lsls	r3, r3, #10
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f9e:	801a      	strh	r2, [r3, #0]
 8004fa0:	e30f      	b.n	80055c2 <USB_EPStartXfer+0x1586>
 8004fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d104      	bne.n	8004fc2 <USB_EPStartXfer+0xf86>
 8004fb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004fc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	029b      	lsls	r3, r3, #10
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fda:	801a      	strh	r2, [r3, #0]
 8004fdc:	e2f1      	b.n	80055c2 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004fde:	463b      	mov	r3, r7
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	78db      	ldrb	r3, [r3, #3]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	f040 818f 	bne.w	8005308 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004fea:	463b      	mov	r3, r7
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	785b      	ldrb	r3, [r3, #1]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d175      	bne.n	80050e0 <USB_EPStartXfer+0x10a4>
 8004ff4:	1d3b      	adds	r3, r7, #4
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ffc:	1d3b      	adds	r3, r7, #4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005004:	b29b      	uxth	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800500c:	4413      	add	r3, r2
 800500e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005012:	463b      	mov	r3, r7
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	011a      	lsls	r2, r3, #4
 800501a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800501e:	4413      	add	r3, r2
 8005020:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005024:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005028:	463b      	mov	r3, r7
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d116      	bne.n	8005060 <USB_EPStartXfer+0x1024>
 8005032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800503e:	b29a      	uxth	r2, r3
 8005040:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005044:	801a      	strh	r2, [r3, #0]
 8005046:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	b29b      	uxth	r3, r3
 800504e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005056:	b29a      	uxth	r2, r3
 8005058:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800505c:	801a      	strh	r2, [r3, #0]
 800505e:	e065      	b.n	800512c <USB_EPStartXfer+0x10f0>
 8005060:	463b      	mov	r3, r7
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b3e      	cmp	r3, #62	; 0x3e
 8005068:	d81a      	bhi.n	80050a0 <USB_EPStartXfer+0x1064>
 800506a:	463b      	mov	r3, r7
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005076:	463b      	mov	r3, r7
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d004      	beq.n	800508e <USB_EPStartXfer+0x1052>
 8005084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005088:	3301      	adds	r3, #1
 800508a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800508e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005092:	b29b      	uxth	r3, r3
 8005094:	029b      	lsls	r3, r3, #10
 8005096:	b29a      	uxth	r2, r3
 8005098:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800509c:	801a      	strh	r2, [r3, #0]
 800509e:	e045      	b.n	800512c <USB_EPStartXfer+0x10f0>
 80050a0:	463b      	mov	r3, r7
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050ac:	463b      	mov	r3, r7
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 031f 	and.w	r3, r3, #31
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d104      	bne.n	80050c4 <USB_EPStartXfer+0x1088>
 80050ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050be:	3b01      	subs	r3, #1
 80050c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	029b      	lsls	r3, r3, #10
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050dc:	801a      	strh	r2, [r3, #0]
 80050de:	e025      	b.n	800512c <USB_EPStartXfer+0x10f0>
 80050e0:	463b      	mov	r3, r7
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d120      	bne.n	800512c <USB_EPStartXfer+0x10f0>
 80050ea:	1d3b      	adds	r3, r7, #4
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80050f2:	1d3b      	adds	r3, r7, #4
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005102:	4413      	add	r3, r2
 8005104:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005108:	463b      	mov	r3, r7
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	011a      	lsls	r2, r3, #4
 8005110:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005114:	4413      	add	r3, r2
 8005116:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800511a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800511e:	463b      	mov	r3, r7
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	b29a      	uxth	r2, r3
 8005126:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800512a:	801a      	strh	r2, [r3, #0]
 800512c:	1d3b      	adds	r3, r7, #4
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005134:	463b      	mov	r3, r7
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	785b      	ldrb	r3, [r3, #1]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d175      	bne.n	800522a <USB_EPStartXfer+0x11ee>
 800513e:	1d3b      	adds	r3, r7, #4
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005146:	1d3b      	adds	r3, r7, #4
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800514e:	b29b      	uxth	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005156:	4413      	add	r3, r2
 8005158:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800515c:	463b      	mov	r3, r7
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	011a      	lsls	r2, r3, #4
 8005164:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005168:	4413      	add	r3, r2
 800516a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800516e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005172:	463b      	mov	r3, r7
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d116      	bne.n	80051aa <USB_EPStartXfer+0x116e>
 800517c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005188:	b29a      	uxth	r2, r3
 800518a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800518e:	801a      	strh	r2, [r3, #0]
 8005190:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051a6:	801a      	strh	r2, [r3, #0]
 80051a8:	e061      	b.n	800526e <USB_EPStartXfer+0x1232>
 80051aa:	463b      	mov	r3, r7
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2b3e      	cmp	r3, #62	; 0x3e
 80051b2:	d81a      	bhi.n	80051ea <USB_EPStartXfer+0x11ae>
 80051b4:	463b      	mov	r3, r7
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051c0:	463b      	mov	r3, r7
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d004      	beq.n	80051d8 <USB_EPStartXfer+0x119c>
 80051ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051d2:	3301      	adds	r3, #1
 80051d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051dc:	b29b      	uxth	r3, r3
 80051de:	029b      	lsls	r3, r3, #10
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051e6:	801a      	strh	r2, [r3, #0]
 80051e8:	e041      	b.n	800526e <USB_EPStartXfer+0x1232>
 80051ea:	463b      	mov	r3, r7
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051f6:	463b      	mov	r3, r7
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	2b00      	cmp	r3, #0
 8005202:	d104      	bne.n	800520e <USB_EPStartXfer+0x11d2>
 8005204:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005208:	3b01      	subs	r3, #1
 800520a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800520e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005212:	b29b      	uxth	r3, r3
 8005214:	029b      	lsls	r3, r3, #10
 8005216:	b29b      	uxth	r3, r3
 8005218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800521c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005220:	b29a      	uxth	r2, r3
 8005222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005226:	801a      	strh	r2, [r3, #0]
 8005228:	e021      	b.n	800526e <USB_EPStartXfer+0x1232>
 800522a:	463b      	mov	r3, r7
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	785b      	ldrb	r3, [r3, #1]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d11c      	bne.n	800526e <USB_EPStartXfer+0x1232>
 8005234:	1d3b      	adds	r3, r7, #4
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523c:	b29b      	uxth	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005244:	4413      	add	r3, r2
 8005246:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800524a:	463b      	mov	r3, r7
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	011a      	lsls	r2, r3, #4
 8005252:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005256:	4413      	add	r3, r2
 8005258:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800525c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005260:	463b      	mov	r3, r7
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	b29a      	uxth	r2, r3
 8005268:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800526c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800526e:	463b      	mov	r3, r7
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 81a4 	beq.w	80055c2 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	463b      	mov	r3, r7
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800528e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <USB_EPStartXfer+0x126a>
 800529a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800529e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10d      	bne.n	80052c2 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80052a6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80052aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f040 8187 	bne.w	80055c2 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80052b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f040 8180 	bne.w	80055c2 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80052c2:	1d3b      	adds	r3, r7, #4
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	463b      	mov	r3, r7
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052dc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	463b      	mov	r3, r7
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	441a      	add	r2, r3
 80052ee:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80052f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005302:	b29b      	uxth	r3, r3
 8005304:	8013      	strh	r3, [r2, #0]
 8005306:	e15c      	b.n	80055c2 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005308:	463b      	mov	r3, r7
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	78db      	ldrb	r3, [r3, #3]
 800530e:	2b01      	cmp	r3, #1
 8005310:	f040 8155 	bne.w	80055be <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005314:	463b      	mov	r3, r7
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	463b      	mov	r3, r7
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	429a      	cmp	r2, r3
 8005322:	d90e      	bls.n	8005342 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8005324:	463b      	mov	r3, r7
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800532e:	463b      	mov	r3, r7
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005338:	1ad2      	subs	r2, r2, r3
 800533a:	463b      	mov	r3, r7
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	619a      	str	r2, [r3, #24]
 8005340:	e008      	b.n	8005354 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8005342:	463b      	mov	r3, r7
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800534c:	463b      	mov	r3, r7
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2200      	movs	r2, #0
 8005352:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005354:	463b      	mov	r3, r7
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d16f      	bne.n	800543e <USB_EPStartXfer+0x1402>
 800535e:	1d3b      	adds	r3, r7, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536e:	b29b      	uxth	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005376:	4413      	add	r3, r2
 8005378:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800537c:	463b      	mov	r3, r7
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	011a      	lsls	r2, r3, #4
 8005384:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005388:	4413      	add	r3, r2
 800538a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800538e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005396:	2b00      	cmp	r3, #0
 8005398:	d116      	bne.n	80053c8 <USB_EPStartXfer+0x138c>
 800539a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053ac:	801a      	strh	r2, [r3, #0]
 80053ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053be:	b29a      	uxth	r2, r3
 80053c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053c4:	801a      	strh	r2, [r3, #0]
 80053c6:	e05f      	b.n	8005488 <USB_EPStartXfer+0x144c>
 80053c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053cc:	2b3e      	cmp	r3, #62	; 0x3e
 80053ce:	d818      	bhi.n	8005402 <USB_EPStartXfer+0x13c6>
 80053d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d004      	beq.n	80053f0 <USB_EPStartXfer+0x13b4>
 80053e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ea:	3301      	adds	r3, #1
 80053ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	029b      	lsls	r3, r3, #10
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053fe:	801a      	strh	r2, [r3, #0]
 8005400:	e042      	b.n	8005488 <USB_EPStartXfer+0x144c>
 8005402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800540c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	2b00      	cmp	r3, #0
 8005416:	d104      	bne.n	8005422 <USB_EPStartXfer+0x13e6>
 8005418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800541c:	3b01      	subs	r3, #1
 800541e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005426:	b29b      	uxth	r3, r3
 8005428:	029b      	lsls	r3, r3, #10
 800542a:	b29b      	uxth	r3, r3
 800542c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005434:	b29a      	uxth	r2, r3
 8005436:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800543a:	801a      	strh	r2, [r3, #0]
 800543c:	e024      	b.n	8005488 <USB_EPStartXfer+0x144c>
 800543e:	463b      	mov	r3, r7
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	785b      	ldrb	r3, [r3, #1]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d11f      	bne.n	8005488 <USB_EPStartXfer+0x144c>
 8005448:	1d3b      	adds	r3, r7, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005450:	1d3b      	adds	r3, r7, #4
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005458:	b29b      	uxth	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005460:	4413      	add	r3, r2
 8005462:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005466:	463b      	mov	r3, r7
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	011a      	lsls	r2, r3, #4
 800546e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005472:	4413      	add	r3, r2
 8005474:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005478:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800547c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005480:	b29a      	uxth	r2, r3
 8005482:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	1d3b      	adds	r3, r7, #4
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005490:	463b      	mov	r3, r7
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d16f      	bne.n	800557a <USB_EPStartXfer+0x153e>
 800549a:	1d3b      	adds	r3, r7, #4
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054a2:	1d3b      	adds	r3, r7, #4
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b2:	4413      	add	r3, r2
 80054b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054b8:	463b      	mov	r3, r7
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	011a      	lsls	r2, r3, #4
 80054c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054c4:	4413      	add	r3, r2
 80054c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d116      	bne.n	8005504 <USB_EPStartXfer+0x14c8>
 80054d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054e8:	801a      	strh	r2, [r3, #0]
 80054ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005500:	801a      	strh	r2, [r3, #0]
 8005502:	e05e      	b.n	80055c2 <USB_EPStartXfer+0x1586>
 8005504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005508:	2b3e      	cmp	r3, #62	; 0x3e
 800550a:	d818      	bhi.n	800553e <USB_EPStartXfer+0x1502>
 800550c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005510:	085b      	lsrs	r3, r3, #1
 8005512:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <USB_EPStartXfer+0x14f0>
 8005522:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005526:	3301      	adds	r3, #1
 8005528:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800552c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005530:	b29b      	uxth	r3, r3
 8005532:	029b      	lsls	r3, r3, #10
 8005534:	b29a      	uxth	r2, r3
 8005536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	e041      	b.n	80055c2 <USB_EPStartXfer+0x1586>
 800553e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800554c:	f003 031f 	and.w	r3, r3, #31
 8005550:	2b00      	cmp	r3, #0
 8005552:	d104      	bne.n	800555e <USB_EPStartXfer+0x1522>
 8005554:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005558:	3b01      	subs	r3, #1
 800555a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800555e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005562:	b29b      	uxth	r3, r3
 8005564:	029b      	lsls	r3, r3, #10
 8005566:	b29b      	uxth	r3, r3
 8005568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800556c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005570:	b29a      	uxth	r2, r3
 8005572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005576:	801a      	strh	r2, [r3, #0]
 8005578:	e023      	b.n	80055c2 <USB_EPStartXfer+0x1586>
 800557a:	463b      	mov	r3, r7
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	785b      	ldrb	r3, [r3, #1]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d11e      	bne.n	80055c2 <USB_EPStartXfer+0x1586>
 8005584:	1d3b      	adds	r3, r7, #4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800558c:	b29b      	uxth	r3, r3
 800558e:	461a      	mov	r2, r3
 8005590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005594:	4413      	add	r3, r2
 8005596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800559a:	463b      	mov	r3, r7
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	011a      	lsls	r2, r3, #4
 80055a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a6:	4413      	add	r3, r2
 80055a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	e001      	b.n	80055c2 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e02e      	b.n	8005620 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055c2:	1d3b      	adds	r3, r7, #4
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	463b      	mov	r3, r7
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055dc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80055e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80055e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055e8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80055ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80055f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055f4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80055f8:	1d3b      	adds	r3, r7, #4
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	463b      	mov	r3, r7
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	441a      	add	r2, r3
 8005606:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800560a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800560e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561a:	b29b      	uxth	r3, r3
 800561c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	785b      	ldrb	r3, [r3, #1]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d020      	beq.n	800567e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	b29b      	uxth	r3, r3
 800564a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005652:	81bb      	strh	r3, [r7, #12]
 8005654:	89bb      	ldrh	r3, [r7, #12]
 8005656:	f083 0310 	eor.w	r3, r3, #16
 800565a:	81bb      	strh	r3, [r7, #12]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	441a      	add	r2, r3
 8005666:	89bb      	ldrh	r3, [r7, #12]
 8005668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005678:	b29b      	uxth	r3, r3
 800567a:	8013      	strh	r3, [r2, #0]
 800567c:	e01f      	b.n	80056be <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005694:	81fb      	strh	r3, [r7, #14]
 8005696:	89fb      	ldrh	r3, [r7, #14]
 8005698:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800569c:	81fb      	strh	r3, [r7, #14]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	441a      	add	r2, r3
 80056a8:	89fb      	ldrh	r3, [r7, #14]
 80056aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr

080056ca <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b087      	sub	sp, #28
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	7b1b      	ldrb	r3, [r3, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f040 809d 	bne.w	8005818 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	785b      	ldrb	r3, [r3, #1]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d04c      	beq.n	8005780 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	823b      	strh	r3, [r7, #16]
 80056f4:	8a3b      	ldrh	r3, [r7, #16]
 80056f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d01b      	beq.n	8005736 <USB_EPClearStall+0x6c>
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005714:	81fb      	strh	r3, [r7, #14]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	441a      	add	r2, r3
 8005720:	89fb      	ldrh	r3, [r7, #14]
 8005722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005732:	b29b      	uxth	r3, r3
 8005734:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	78db      	ldrb	r3, [r3, #3]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d06c      	beq.n	8005818 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005754:	81bb      	strh	r3, [r7, #12]
 8005756:	89bb      	ldrh	r3, [r7, #12]
 8005758:	f083 0320 	eor.w	r3, r3, #32
 800575c:	81bb      	strh	r3, [r7, #12]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	441a      	add	r2, r3
 8005768:	89bb      	ldrh	r3, [r7, #12]
 800576a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800576e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577a:	b29b      	uxth	r3, r3
 800577c:	8013      	strh	r3, [r2, #0]
 800577e:	e04b      	b.n	8005818 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	82fb      	strh	r3, [r7, #22]
 800578e:	8afb      	ldrh	r3, [r7, #22]
 8005790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01b      	beq.n	80057d0 <USB_EPClearStall+0x106>
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ae:	82bb      	strh	r3, [r7, #20]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	441a      	add	r2, r3
 80057ba:	8abb      	ldrh	r3, [r7, #20]
 80057bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e6:	827b      	strh	r3, [r7, #18]
 80057e8:	8a7b      	ldrh	r3, [r7, #18]
 80057ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057ee:	827b      	strh	r3, [r7, #18]
 80057f0:	8a7b      	ldrh	r3, [r7, #18]
 80057f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057f6:	827b      	strh	r3, [r7, #18]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	441a      	add	r2, r3
 8005802:	8a7b      	ldrh	r3, [r7, #18]
 8005804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005814:	b29b      	uxth	r3, r3
 8005816:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr

08005824 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d103      	bne.n	800583e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2280      	movs	r2, #128	; 0x80
 800583a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr

0800584a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr

0800585e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr

08005872 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005880:	b29b      	uxth	r3, r3
 8005882:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005884:	68fb      	ldr	r3, [r7, #12]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr

08005890 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr

080058a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b08d      	sub	sp, #52	; 0x34
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	4611      	mov	r1, r2
 80058b2:	461a      	mov	r2, r3
 80058b4:	460b      	mov	r3, r1
 80058b6:	80fb      	strh	r3, [r7, #6]
 80058b8:	4613      	mov	r3, r2
 80058ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80058bc:	88bb      	ldrh	r3, [r7, #4]
 80058be:	3301      	adds	r3, #1
 80058c0:	085b      	lsrs	r3, r3, #1
 80058c2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	005a      	lsls	r2, r3, #1
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058d8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058de:	e01e      	b.n	800591e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	3301      	adds	r3, #1
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	b29a      	uxth	r2, r3
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	3302      	adds	r3, #2
 800590a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	3302      	adds	r3, #2
 8005910:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	3301      	adds	r3, #1
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	3b01      	subs	r3, #1
 800591c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1dd      	bne.n	80058e0 <USB_WritePMA+0x3a>
  }
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	3734      	adds	r7, #52	; 0x34
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr

08005930 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005930:	b480      	push	{r7}
 8005932:	b08b      	sub	sp, #44	; 0x2c
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4611      	mov	r1, r2
 800593c:	461a      	mov	r2, r3
 800593e:	460b      	mov	r3, r1
 8005940:	80fb      	strh	r3, [r7, #6]
 8005942:	4613      	mov	r3, r2
 8005944:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005946:	88bb      	ldrh	r3, [r7, #4]
 8005948:	085b      	lsrs	r3, r3, #1
 800594a:	b29b      	uxth	r3, r3
 800594c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005956:	88fb      	ldrh	r3, [r7, #6]
 8005958:	005a      	lsls	r2, r3, #1
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005962:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
 8005968:	e01b      	b.n	80059a2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	3302      	adds	r3, #2
 8005976:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	b2da      	uxtb	r2, r3
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	3301      	adds	r3, #1
 8005984:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	0a1b      	lsrs	r3, r3, #8
 800598a:	b2da      	uxtb	r2, r3
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	3301      	adds	r3, #1
 8005994:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	3302      	adds	r3, #2
 800599a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	3b01      	subs	r3, #1
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e0      	bne.n	800596a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80059a8:	88bb      	ldrh	r3, [r7, #4]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	701a      	strb	r2, [r3, #0]
  }
}
 80059c4:	bf00      	nop
 80059c6:	372c      	adds	r7, #44	; 0x2c
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	460b      	mov	r3, r1
 80059d8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	7c1b      	ldrb	r3, [r3, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d115      	bne.n	8005a12 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059ea:	2202      	movs	r2, #2
 80059ec:	2181      	movs	r1, #129	; 0x81
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f004 fcd7 	bl	800a3a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059fe:	2202      	movs	r2, #2
 8005a00:	2101      	movs	r1, #1
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f004 fccd 	bl	800a3a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005a10:	e012      	b.n	8005a38 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a12:	2340      	movs	r3, #64	; 0x40
 8005a14:	2202      	movs	r2, #2
 8005a16:	2181      	movs	r1, #129	; 0x81
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f004 fcc2 	bl	800a3a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a24:	2340      	movs	r3, #64	; 0x40
 8005a26:	2202      	movs	r2, #2
 8005a28:	2101      	movs	r1, #1
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f004 fcb9 	bl	800a3a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a38:	2308      	movs	r3, #8
 8005a3a:	2203      	movs	r2, #3
 8005a3c:	2182      	movs	r1, #130	; 0x82
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f004 fcaf 	bl	800a3a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a4a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a4e:	f004 fdcf 	bl	800a5f0 <USBD_static_malloc>
 8005a52:	4602      	mov	r2, r0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d102      	bne.n	8005a6a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005a64:	2301      	movs	r3, #1
 8005a66:	73fb      	strb	r3, [r7, #15]
 8005a68:	e026      	b.n	8005ab8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a70:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	7c1b      	ldrb	r3, [r3, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d109      	bne.n	8005aa8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f004 fd6f 	bl	800a584 <USBD_LL_PrepareReceive>
 8005aa6:	e007      	b.n	8005ab8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005aae:	2340      	movs	r3, #64	; 0x40
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f004 fd66 	bl	800a584 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	460b      	mov	r3, r1
 8005acc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005ad2:	2181      	movs	r1, #129	; 0x81
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f004 fc8a 	bl	800a3ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f004 fc83 	bl	800a3ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005af0:	2182      	movs	r1, #130	; 0x82
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f004 fc7b 	bl	800a3ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00e      	beq.n	8005b26 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f004 fd75 	bl	800a608 <USBD_static_free>
    pdev->pClassData = NULL;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b40:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d039      	beq.n	8005bce <USBD_CDC_Setup+0x9e>
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d17f      	bne.n	8005c5e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	88db      	ldrh	r3, [r3, #6]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d029      	beq.n	8005bba <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	b25b      	sxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	da11      	bge.n	8005b94 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005b7c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	88d2      	ldrh	r2, [r2, #6]
 8005b82:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b84:	6939      	ldr	r1, [r7, #16]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	88db      	ldrh	r3, [r3, #6]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 f9da 	bl	8006f46 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005b92:	e06b      	b.n	8005c6c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	785a      	ldrb	r2, [r3, #1]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	88db      	ldrh	r3, [r3, #6]
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005baa:	6939      	ldr	r1, [r7, #16]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	88db      	ldrh	r3, [r3, #6]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f001 f9f5 	bl	8006fa2 <USBD_CtlPrepareRx>
      break;
 8005bb8:	e058      	b.n	8005c6c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	7850      	ldrb	r0, [r2, #1]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	4798      	blx	r3
      break;
 8005bcc:	e04e      	b.n	8005c6c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	2b0b      	cmp	r3, #11
 8005bd4:	d02e      	beq.n	8005c34 <USBD_CDC_Setup+0x104>
 8005bd6:	2b0b      	cmp	r3, #11
 8005bd8:	dc38      	bgt.n	8005c4c <USBD_CDC_Setup+0x11c>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <USBD_CDC_Setup+0xb4>
 8005bde:	2b0a      	cmp	r3, #10
 8005be0:	d014      	beq.n	8005c0c <USBD_CDC_Setup+0xdc>
 8005be2:	e033      	b.n	8005c4c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d107      	bne.n	8005bfe <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005bee:	f107 030c 	add.w	r3, r7, #12
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 f9a5 	bl	8006f46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bfc:	e02e      	b.n	8005c5c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f001 f936 	bl	8006e72 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c06:	2302      	movs	r3, #2
 8005c08:	75fb      	strb	r3, [r7, #23]
          break;
 8005c0a:	e027      	b.n	8005c5c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d107      	bne.n	8005c26 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c16:	f107 030f 	add.w	r3, r7, #15
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 f991 	bl	8006f46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c24:	e01a      	b.n	8005c5c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005c26:	6839      	ldr	r1, [r7, #0]
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 f922 	bl	8006e72 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c2e:	2302      	movs	r3, #2
 8005c30:	75fb      	strb	r3, [r7, #23]
          break;
 8005c32:	e013      	b.n	8005c5c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d00d      	beq.n	8005c5a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005c3e:	6839      	ldr	r1, [r7, #0]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f001 f916 	bl	8006e72 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c46:	2302      	movs	r3, #2
 8005c48:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c4a:	e006      	b.n	8005c5a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f001 f90f 	bl	8006e72 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c54:	2302      	movs	r3, #2
 8005c56:	75fb      	strb	r3, [r7, #23]
          break;
 8005c58:	e000      	b.n	8005c5c <USBD_CDC_Setup+0x12c>
          break;
 8005c5a:	bf00      	nop
      }
      break;
 8005c5c:	e006      	b.n	8005c6c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005c5e:	6839      	ldr	r1, [r7, #0]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f001 f906 	bl	8006e72 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c66:	2302      	movs	r3, #2
 8005c68:	75fb      	strb	r3, [r7, #23]
      break;
 8005c6a:	bf00      	nop
  }

  return ret;
 8005c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c88:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c90:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d03a      	beq.n	8005d12 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c9c:	78fa      	ldrb	r2, [r7, #3]
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	331c      	adds	r3, #28
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d029      	beq.n	8005d06 <USBD_CDC_DataIn+0x90>
 8005cb2:	78fa      	ldrb	r2, [r7, #3]
 8005cb4:	6879      	ldr	r1, [r7, #4]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	331c      	adds	r3, #28
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	78f9      	ldrb	r1, [r7, #3]
 8005cc6:	68b8      	ldr	r0, [r7, #8]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4403      	add	r3, r0
 8005cd2:	3338      	adds	r3, #56	; 0x38
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	fbb2 f1f3 	udiv	r1, r2, r3
 8005cda:	fb03 f301 	mul.w	r3, r3, r1
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d110      	bne.n	8005d06 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005ce4:	78fa      	ldrb	r2, [r7, #3]
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	331c      	adds	r3, #28
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cf8:	78f9      	ldrb	r1, [r7, #3]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f004 fc1d 	bl	800a53e <USBD_LL_Transmit>
 8005d04:	e003      	b.n	8005d0e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e000      	b.n	8005d14 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005d12:	2302      	movs	r3, #2
  }
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	460b      	mov	r3, r1
 8005d26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	4619      	mov	r1, r3
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f004 fc48 	bl	800a5ca <USBD_LL_GetRxDataSize>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00d      	beq.n	8005d68 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d60:	4611      	mov	r1, r2
 8005d62:	4798      	blx	r3

    return USBD_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	e000      	b.n	8005d6a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005d68:	2302      	movs	r3, #2
  }
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d80:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d015      	beq.n	8005db8 <USBD_CDC_EP0_RxReady+0x46>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d92:	2bff      	cmp	r3, #255	; 0xff
 8005d94:	d010      	beq.n	8005db8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005da4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005dac:	b292      	uxth	r2, r2
 8005dae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	22ff      	movs	r2, #255	; 0xff
 8005db4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2243      	movs	r2, #67	; 0x43
 8005dd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005dd2:	4b03      	ldr	r3, [pc, #12]	; (8005de0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000094 	.word	0x20000094

08005de4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2243      	movs	r2, #67	; 0x43
 8005df0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005df2:	4b03      	ldr	r3, [pc, #12]	; (8005e00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	20000050 	.word	0x20000050

08005e04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2243      	movs	r2, #67	; 0x43
 8005e10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005e12:	4b03      	ldr	r3, [pc, #12]	; (8005e20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bc80      	pop	{r7}
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	200000d8 	.word	0x200000d8

08005e24 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	220a      	movs	r2, #10
 8005e30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005e32:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bc80      	pop	{r7}
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	2000000c 	.word	0x2000000c

08005e44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005e4e:	2302      	movs	r3, #2
 8005e50:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e84:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e8e:	88fa      	ldrh	r2, [r7, #6]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr

08005ea2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b085      	sub	sp, #20
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bc80      	pop	{r7}
 8005ec6:	4770      	bx	lr

08005ec8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d017      	beq.n	8005f12 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	7c1b      	ldrb	r3, [r3, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d109      	bne.n	8005efe <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f004 fb44 	bl	800a584 <USBD_LL_PrepareReceive>
 8005efc:	e007      	b.n	8005f0e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f04:	2340      	movs	r3, #64	; 0x40
 8005f06:	2101      	movs	r1, #1
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f004 fb3b 	bl	800a584 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e000      	b.n	8005f14 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005f12:	2302      	movs	r3, #2
  }
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	4613      	mov	r3, r2
 8005f28:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f30:	2302      	movs	r3, #2
 8005f32:	e01a      	b.n	8005f6a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	79fa      	ldrb	r2, [r7, #7]
 8005f60:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f004 f9a8 	bl	800a2b8 <USBD_LL_Init>

  return USBD_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b085      	sub	sp, #20
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d006      	beq.n	8005f94 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	73fb      	strb	r3, [r7, #15]
 8005f92:	e001      	b.n	8005f98 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005f94:	2302      	movs	r3, #2
 8005f96:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f004 f9dd 	bl	800a36c <USBD_LL_Start>

  return USBD_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr

08005fd0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005fdc:	2302      	movs	r3, #2
 8005fde:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00c      	beq.n	8006004 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	78fa      	ldrb	r2, [r7, #3]
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	4798      	blx	r3
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006004:	7bfb      	ldrb	r3, [r7, #15]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	460b      	mov	r3, r1
 8006018:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	78fa      	ldrb	r2, [r7, #3]
 8006024:	4611      	mov	r1, r2
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	4798      	blx	r3

  return USBD_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fed7 	bl	8006dfa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800605a:	461a      	mov	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006068:	f003 031f 	and.w	r3, r3, #31
 800606c:	2b02      	cmp	r3, #2
 800606e:	d016      	beq.n	800609e <USBD_LL_SetupStage+0x6a>
 8006070:	2b02      	cmp	r3, #2
 8006072:	d81c      	bhi.n	80060ae <USBD_LL_SetupStage+0x7a>
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <USBD_LL_SetupStage+0x4a>
 8006078:	2b01      	cmp	r3, #1
 800607a:	d008      	beq.n	800608e <USBD_LL_SetupStage+0x5a>
 800607c:	e017      	b.n	80060ae <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f9ca 	bl	8006420 <USBD_StdDevReq>
      break;
 800608c:	e01a      	b.n	80060c4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fa2c 	bl	80064f4 <USBD_StdItfReq>
      break;
 800609c:	e012      	b.n	80060c4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fa6c 	bl	8006584 <USBD_StdEPReq>
      break;
 80060ac:	e00a      	b.n	80060c4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f004 f9b5 	bl	800a42c <USBD_LL_StallEP>
      break;
 80060c2:	bf00      	nop
  }

  return USBD_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b086      	sub	sp, #24
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	460b      	mov	r3, r1
 80060d8:	607a      	str	r2, [r7, #4]
 80060da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d14b      	bne.n	800617a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80060e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d134      	bne.n	800615e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d919      	bls.n	8006134 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	1ad2      	subs	r2, r2, r3
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006116:	429a      	cmp	r2, r3
 8006118:	d203      	bcs.n	8006122 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800611e:	b29b      	uxth	r3, r3
 8006120:	e002      	b.n	8006128 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006126:	b29b      	uxth	r3, r3
 8006128:	461a      	mov	r2, r3
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 ff56 	bl	8006fde <USBD_CtlContinueRx>
 8006132:	e038      	b.n	80061a6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006146:	2b03      	cmp	r3, #3
 8006148:	d105      	bne.n	8006156 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 ff53 	bl	8007002 <USBD_CtlSendStatus>
 800615c:	e023      	b.n	80061a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006164:	2b05      	cmp	r3, #5
 8006166:	d11e      	bne.n	80061a6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006170:	2100      	movs	r1, #0
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f004 f95a 	bl	800a42c <USBD_LL_StallEP>
 8006178:	e015      	b.n	80061a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00d      	beq.n	80061a2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800618c:	2b03      	cmp	r3, #3
 800618e:	d108      	bne.n	80061a2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	7afa      	ldrb	r2, [r7, #11]
 800619a:	4611      	mov	r1, r2
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	4798      	blx	r3
 80061a0:	e001      	b.n	80061a6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061a2:	2302      	movs	r3, #2
 80061a4:	e000      	b.n	80061a8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	460b      	mov	r3, r1
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80061be:	7afb      	ldrb	r3, [r7, #11]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d17f      	bne.n	80062c4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3314      	adds	r3, #20
 80061c8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d15c      	bne.n	800628e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d915      	bls.n	800620c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	1ad2      	subs	r2, r2, r3
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fec0 	bl	8006f7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061fe:	2300      	movs	r3, #0
 8006200:	2200      	movs	r2, #0
 8006202:	2100      	movs	r1, #0
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f004 f9bd 	bl	800a584 <USBD_LL_PrepareReceive>
 800620a:	e04e      	b.n	80062aa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	6912      	ldr	r2, [r2, #16]
 8006214:	fbb3 f1f2 	udiv	r1, r3, r2
 8006218:	fb02 f201 	mul.w	r2, r2, r1
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d11c      	bne.n	800625c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800622a:	429a      	cmp	r2, r3
 800622c:	d316      	bcc.n	800625c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006238:	429a      	cmp	r2, r3
 800623a:	d20f      	bcs.n	800625c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800623c:	2200      	movs	r2, #0
 800623e:	2100      	movs	r1, #0
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 fe9c 	bl	8006f7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800624e:	2300      	movs	r3, #0
 8006250:	2200      	movs	r2, #0
 8006252:	2100      	movs	r1, #0
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f004 f995 	bl	800a584 <USBD_LL_PrepareReceive>
 800625a:	e026      	b.n	80062aa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00a      	beq.n	800627e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800626e:	2b03      	cmp	r3, #3
 8006270:	d105      	bne.n	800627e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800627e:	2180      	movs	r1, #128	; 0x80
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f004 f8d3 	bl	800a42c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 fece 	bl	8007028 <USBD_CtlReceiveStatus>
 800628c:	e00d      	b.n	80062aa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006294:	2b04      	cmp	r3, #4
 8006296:	d004      	beq.n	80062a2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d103      	bne.n	80062aa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80062a2:	2180      	movs	r1, #128	; 0x80
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f004 f8c1 	bl	800a42c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d11d      	bne.n	80062f0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f7ff fe81 	bl	8005fbc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062c2:	e015      	b.n	80062f0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00d      	beq.n	80062ec <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d108      	bne.n	80062ec <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	7afa      	ldrb	r2, [r7, #11]
 80062e4:	4611      	mov	r1, r2
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	4798      	blx	r3
 80062ea:	e001      	b.n	80062f0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80062ec:	2302      	movs	r3, #2
 80062ee:	e000      	b.n	80062f2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006302:	2340      	movs	r3, #64	; 0x40
 8006304:	2200      	movs	r2, #0
 8006306:	2100      	movs	r1, #0
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f004 f84a 	bl	800a3a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2240      	movs	r2, #64	; 0x40
 800631a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800631e:	2340      	movs	r3, #64	; 0x40
 8006320:	2200      	movs	r2, #0
 8006322:	2180      	movs	r1, #128	; 0x80
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f004 f83c 	bl	800a3a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2240      	movs	r2, #64	; 0x40
 8006334:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635a:	2b00      	cmp	r3, #0
 800635c:	d009      	beq.n	8006372 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6852      	ldr	r2, [r2, #4]
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	4611      	mov	r1, r2
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	4798      	blx	r3
  }

  return USBD_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	78fa      	ldrb	r2, [r7, #3]
 800638c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	bc80      	pop	{r7}
 8006398:	4770      	bx	lr

0800639a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2204      	movs	r2, #4
 80063b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	bc80      	pop	{r7}
 80063c0:	4770      	bx	lr

080063c2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d105      	bne.n	80063e0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bc80      	pop	{r7}
 80063ea:	4770      	bx	lr

080063ec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d10b      	bne.n	8006416 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	d005      	beq.n	8006446 <USBD_StdDevReq+0x26>
 800643a:	2b40      	cmp	r3, #64	; 0x40
 800643c:	d84f      	bhi.n	80064de <USBD_StdDevReq+0xbe>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <USBD_StdDevReq+0x36>
 8006442:	2b20      	cmp	r3, #32
 8006444:	d14b      	bne.n	80064de <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	6839      	ldr	r1, [r7, #0]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	4798      	blx	r3
      break;
 8006454:	e048      	b.n	80064e8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	2b09      	cmp	r3, #9
 800645c:	d839      	bhi.n	80064d2 <USBD_StdDevReq+0xb2>
 800645e:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <USBD_StdDevReq+0x44>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	080064b5 	.word	0x080064b5
 8006468:	080064c9 	.word	0x080064c9
 800646c:	080064d3 	.word	0x080064d3
 8006470:	080064bf 	.word	0x080064bf
 8006474:	080064d3 	.word	0x080064d3
 8006478:	08006497 	.word	0x08006497
 800647c:	0800648d 	.word	0x0800648d
 8006480:	080064d3 	.word	0x080064d3
 8006484:	080064ab 	.word	0x080064ab
 8006488:	080064a1 	.word	0x080064a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f9dc 	bl	800684c <USBD_GetDescriptor>
          break;
 8006494:	e022      	b.n	80064dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fb3f 	bl	8006b1c <USBD_SetAddress>
          break;
 800649e:	e01d      	b.n	80064dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fb7e 	bl	8006ba4 <USBD_SetConfig>
          break;
 80064a8:	e018      	b.n	80064dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fc07 	bl	8006cc0 <USBD_GetConfig>
          break;
 80064b2:	e013      	b.n	80064dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fc37 	bl	8006d2a <USBD_GetStatus>
          break;
 80064bc:	e00e      	b.n	80064dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fc65 	bl	8006d90 <USBD_SetFeature>
          break;
 80064c6:	e009      	b.n	80064dc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064c8:	6839      	ldr	r1, [r7, #0]
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fc74 	bl	8006db8 <USBD_ClrFeature>
          break;
 80064d0:	e004      	b.n	80064dc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fccc 	bl	8006e72 <USBD_CtlError>
          break;
 80064da:	bf00      	nop
      }
      break;
 80064dc:	e004      	b.n	80064e8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fcc6 	bl	8006e72 <USBD_CtlError>
      break;
 80064e6:	bf00      	nop
  }

  return ret;
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop

080064f4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800650a:	2b40      	cmp	r3, #64	; 0x40
 800650c:	d005      	beq.n	800651a <USBD_StdItfReq+0x26>
 800650e:	2b40      	cmp	r3, #64	; 0x40
 8006510:	d82e      	bhi.n	8006570 <USBD_StdItfReq+0x7c>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <USBD_StdItfReq+0x26>
 8006516:	2b20      	cmp	r3, #32
 8006518:	d12a      	bne.n	8006570 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006520:	3b01      	subs	r3, #1
 8006522:	2b02      	cmp	r3, #2
 8006524:	d81d      	bhi.n	8006562 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	889b      	ldrh	r3, [r3, #4]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b01      	cmp	r3, #1
 800652e:	d813      	bhi.n	8006558 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	4798      	blx	r3
 800653e:	4603      	mov	r3, r0
 8006540:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	88db      	ldrh	r3, [r3, #6]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d110      	bne.n	800656c <USBD_StdItfReq+0x78>
 800654a:	7bfb      	ldrb	r3, [r7, #15]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10d      	bne.n	800656c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fd56 	bl	8007002 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006556:	e009      	b.n	800656c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fc89 	bl	8006e72 <USBD_CtlError>
          break;
 8006560:	e004      	b.n	800656c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fc84 	bl	8006e72 <USBD_CtlError>
          break;
 800656a:	e000      	b.n	800656e <USBD_StdItfReq+0x7a>
          break;
 800656c:	bf00      	nop
      }
      break;
 800656e:	e004      	b.n	800657a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fc7d 	bl	8006e72 <USBD_CtlError>
      break;
 8006578:	bf00      	nop
  }

  return USBD_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	889b      	ldrh	r3, [r3, #4]
 8006596:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	d007      	beq.n	80065b4 <USBD_StdEPReq+0x30>
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	f200 8146 	bhi.w	8006836 <USBD_StdEPReq+0x2b2>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <USBD_StdEPReq+0x40>
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	f040 8141 	bne.w	8006836 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3
      break;
 80065c2:	e13d      	b.n	8006840 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d10a      	bne.n	80065e6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
 80065de:	4603      	mov	r3, r0
 80065e0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	e12d      	b.n	8006842 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	785b      	ldrb	r3, [r3, #1]
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d007      	beq.n	80065fe <USBD_StdEPReq+0x7a>
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	f300 811b 	bgt.w	800682a <USBD_StdEPReq+0x2a6>
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d072      	beq.n	80066de <USBD_StdEPReq+0x15a>
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d03a      	beq.n	8006672 <USBD_StdEPReq+0xee>
 80065fc:	e115      	b.n	800682a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006604:	2b02      	cmp	r3, #2
 8006606:	d002      	beq.n	800660e <USBD_StdEPReq+0x8a>
 8006608:	2b03      	cmp	r3, #3
 800660a:	d015      	beq.n	8006638 <USBD_StdEPReq+0xb4>
 800660c:	e02b      	b.n	8006666 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800660e:	7bbb      	ldrb	r3, [r7, #14]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00c      	beq.n	800662e <USBD_StdEPReq+0xaa>
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b80      	cmp	r3, #128	; 0x80
 8006618:	d009      	beq.n	800662e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f003 ff04 	bl	800a42c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006624:	2180      	movs	r1, #128	; 0x80
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f003 ff00 	bl	800a42c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800662c:	e020      	b.n	8006670 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800662e:	6839      	ldr	r1, [r7, #0]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fc1e 	bl	8006e72 <USBD_CtlError>
              break;
 8006636:	e01b      	b.n	8006670 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	885b      	ldrh	r3, [r3, #2]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10e      	bne.n	800665e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00b      	beq.n	800665e <USBD_StdEPReq+0xda>
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	2b80      	cmp	r3, #128	; 0x80
 800664a:	d008      	beq.n	800665e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	88db      	ldrh	r3, [r3, #6]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d104      	bne.n	800665e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006654:	7bbb      	ldrb	r3, [r7, #14]
 8006656:	4619      	mov	r1, r3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f003 fee7 	bl	800a42c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fccf 	bl	8007002 <USBD_CtlSendStatus>

              break;
 8006664:	e004      	b.n	8006670 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fc02 	bl	8006e72 <USBD_CtlError>
              break;
 800666e:	bf00      	nop
          }
          break;
 8006670:	e0e0      	b.n	8006834 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006678:	2b02      	cmp	r3, #2
 800667a:	d002      	beq.n	8006682 <USBD_StdEPReq+0xfe>
 800667c:	2b03      	cmp	r3, #3
 800667e:	d015      	beq.n	80066ac <USBD_StdEPReq+0x128>
 8006680:	e026      	b.n	80066d0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00c      	beq.n	80066a2 <USBD_StdEPReq+0x11e>
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	2b80      	cmp	r3, #128	; 0x80
 800668c:	d009      	beq.n	80066a2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800668e:	7bbb      	ldrb	r3, [r7, #14]
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f003 feca 	bl	800a42c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006698:	2180      	movs	r1, #128	; 0x80
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f003 fec6 	bl	800a42c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066a0:	e01c      	b.n	80066dc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fbe4 	bl	8006e72 <USBD_CtlError>
              break;
 80066aa:	e017      	b.n	80066dc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	885b      	ldrh	r3, [r3, #2]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d112      	bne.n	80066da <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066b4:	7bbb      	ldrb	r3, [r7, #14]
 80066b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d004      	beq.n	80066c8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80066be:	7bbb      	ldrb	r3, [r7, #14]
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f003 fed1 	bl	800a46a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fc9a 	bl	8007002 <USBD_CtlSendStatus>
              }
              break;
 80066ce:	e004      	b.n	80066da <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fbcd 	bl	8006e72 <USBD_CtlError>
              break;
 80066d8:	e000      	b.n	80066dc <USBD_StdEPReq+0x158>
              break;
 80066da:	bf00      	nop
          }
          break;
 80066dc:	e0aa      	b.n	8006834 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d002      	beq.n	80066ee <USBD_StdEPReq+0x16a>
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d032      	beq.n	8006752 <USBD_StdEPReq+0x1ce>
 80066ec:	e097      	b.n	800681e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066ee:	7bbb      	ldrb	r3, [r7, #14]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d007      	beq.n	8006704 <USBD_StdEPReq+0x180>
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	2b80      	cmp	r3, #128	; 0x80
 80066f8:	d004      	beq.n	8006704 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fbb8 	bl	8006e72 <USBD_CtlError>
                break;
 8006702:	e091      	b.n	8006828 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006704:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006708:	2b00      	cmp	r3, #0
 800670a:	da0b      	bge.n	8006724 <USBD_StdEPReq+0x1a0>
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	3310      	adds	r3, #16
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	4413      	add	r3, r2
 8006720:	3304      	adds	r3, #4
 8006722:	e00b      	b.n	800673c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800672a:	4613      	mov	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	4413      	add	r3, r2
 800673a:	3304      	adds	r3, #4
 800673c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2200      	movs	r2, #0
 8006742:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2202      	movs	r2, #2
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fbfb 	bl	8006f46 <USBD_CtlSendData>
              break;
 8006750:	e06a      	b.n	8006828 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006752:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006756:	2b00      	cmp	r3, #0
 8006758:	da11      	bge.n	800677e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800675a:	7bbb      	ldrb	r3, [r7, #14]
 800675c:	f003 020f 	and.w	r2, r3, #15
 8006760:	6879      	ldr	r1, [r7, #4]
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	440b      	add	r3, r1
 800676c:	3318      	adds	r3, #24
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d117      	bne.n	80067a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fb7b 	bl	8006e72 <USBD_CtlError>
                  break;
 800677c:	e054      	b.n	8006828 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800677e:	7bbb      	ldrb	r3, [r7, #14]
 8006780:	f003 020f 	and.w	r2, r3, #15
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	4613      	mov	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d104      	bne.n	80067a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fb68 	bl	8006e72 <USBD_CtlError>
                  break;
 80067a2:	e041      	b.n	8006828 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	da0b      	bge.n	80067c4 <USBD_StdEPReq+0x240>
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
 80067ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	3310      	adds	r3, #16
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	4413      	add	r3, r2
 80067c0:	3304      	adds	r3, #4
 80067c2:	e00b      	b.n	80067dc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067c4:	7bbb      	ldrb	r3, [r7, #14]
 80067c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ca:	4613      	mov	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	4413      	add	r3, r2
 80067da:	3304      	adds	r3, #4
 80067dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067de:	7bbb      	ldrb	r3, [r7, #14]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <USBD_StdEPReq+0x266>
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	2b80      	cmp	r3, #128	; 0x80
 80067e8:	d103      	bne.n	80067f2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	e00e      	b.n	8006810 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80067f2:	7bbb      	ldrb	r3, [r7, #14]
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f003 fe56 	bl	800a4a8 <USBD_LL_IsStallEP>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2201      	movs	r2, #1
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	e002      	b.n	8006810 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2202      	movs	r2, #2
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fb95 	bl	8006f46 <USBD_CtlSendData>
              break;
 800681c:	e004      	b.n	8006828 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fb26 	bl	8006e72 <USBD_CtlError>
              break;
 8006826:	bf00      	nop
          }
          break;
 8006828:	e004      	b.n	8006834 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fb20 	bl	8006e72 <USBD_CtlError>
          break;
 8006832:	bf00      	nop
      }
      break;
 8006834:	e004      	b.n	8006840 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fb1a 	bl	8006e72 <USBD_CtlError>
      break;
 800683e:	bf00      	nop
  }

  return ret;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800685a:	2300      	movs	r3, #0
 800685c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	885b      	ldrh	r3, [r3, #2]
 8006866:	0a1b      	lsrs	r3, r3, #8
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	2b06      	cmp	r3, #6
 800686e:	f200 8128 	bhi.w	8006ac2 <USBD_GetDescriptor+0x276>
 8006872:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <USBD_GetDescriptor+0x2c>)
 8006874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006878:	08006895 	.word	0x08006895
 800687c:	080068ad 	.word	0x080068ad
 8006880:	080068ed 	.word	0x080068ed
 8006884:	08006ac3 	.word	0x08006ac3
 8006888:	08006ac3 	.word	0x08006ac3
 800688c:	08006a63 	.word	0x08006a63
 8006890:	08006a8f 	.word	0x08006a8f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	7c12      	ldrb	r2, [r2, #16]
 80068a0:	f107 0108 	add.w	r1, r7, #8
 80068a4:	4610      	mov	r0, r2
 80068a6:	4798      	blx	r3
 80068a8:	60f8      	str	r0, [r7, #12]
      break;
 80068aa:	e112      	b.n	8006ad2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	7c1b      	ldrb	r3, [r3, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10d      	bne.n	80068d0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068bc:	f107 0208 	add.w	r2, r7, #8
 80068c0:	4610      	mov	r0, r2
 80068c2:	4798      	blx	r3
 80068c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	3301      	adds	r3, #1
 80068ca:	2202      	movs	r2, #2
 80068cc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068ce:	e100      	b.n	8006ad2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	f107 0208 	add.w	r2, r7, #8
 80068dc:	4610      	mov	r0, r2
 80068de:	4798      	blx	r3
 80068e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3301      	adds	r3, #1
 80068e6:	2202      	movs	r2, #2
 80068e8:	701a      	strb	r2, [r3, #0]
      break;
 80068ea:	e0f2      	b.n	8006ad2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	885b      	ldrh	r3, [r3, #2]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b05      	cmp	r3, #5
 80068f4:	f200 80ac 	bhi.w	8006a50 <USBD_GetDescriptor+0x204>
 80068f8:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <USBD_GetDescriptor+0xb4>)
 80068fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fe:	bf00      	nop
 8006900:	08006919 	.word	0x08006919
 8006904:	0800694d 	.word	0x0800694d
 8006908:	08006981 	.word	0x08006981
 800690c:	080069b5 	.word	0x080069b5
 8006910:	080069e9 	.word	0x080069e9
 8006914:	08006a1d 	.word	0x08006a1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00b      	beq.n	800693c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	7c12      	ldrb	r2, [r2, #16]
 8006930:	f107 0108 	add.w	r1, r7, #8
 8006934:	4610      	mov	r0, r2
 8006936:	4798      	blx	r3
 8006938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800693a:	e091      	b.n	8006a60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fa97 	bl	8006e72 <USBD_CtlError>
            err++;
 8006944:	7afb      	ldrb	r3, [r7, #11]
 8006946:	3301      	adds	r3, #1
 8006948:	72fb      	strb	r3, [r7, #11]
          break;
 800694a:	e089      	b.n	8006a60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00b      	beq.n	8006970 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	7c12      	ldrb	r2, [r2, #16]
 8006964:	f107 0108 	add.w	r1, r7, #8
 8006968:	4610      	mov	r0, r2
 800696a:	4798      	blx	r3
 800696c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800696e:	e077      	b.n	8006a60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fa7d 	bl	8006e72 <USBD_CtlError>
            err++;
 8006978:	7afb      	ldrb	r3, [r7, #11]
 800697a:	3301      	adds	r3, #1
 800697c:	72fb      	strb	r3, [r7, #11]
          break;
 800697e:	e06f      	b.n	8006a60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	7c12      	ldrb	r2, [r2, #16]
 8006998:	f107 0108 	add.w	r1, r7, #8
 800699c:	4610      	mov	r0, r2
 800699e:	4798      	blx	r3
 80069a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069a2:	e05d      	b.n	8006a60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fa63 	bl	8006e72 <USBD_CtlError>
            err++;
 80069ac:	7afb      	ldrb	r3, [r7, #11]
 80069ae:	3301      	adds	r3, #1
 80069b0:	72fb      	strb	r3, [r7, #11]
          break;
 80069b2:	e055      	b.n	8006a60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00b      	beq.n	80069d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	7c12      	ldrb	r2, [r2, #16]
 80069cc:	f107 0108 	add.w	r1, r7, #8
 80069d0:	4610      	mov	r0, r2
 80069d2:	4798      	blx	r3
 80069d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069d6:	e043      	b.n	8006a60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fa49 	bl	8006e72 <USBD_CtlError>
            err++;
 80069e0:	7afb      	ldrb	r3, [r7, #11]
 80069e2:	3301      	adds	r3, #1
 80069e4:	72fb      	strb	r3, [r7, #11]
          break;
 80069e6:	e03b      	b.n	8006a60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00b      	beq.n	8006a0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	7c12      	ldrb	r2, [r2, #16]
 8006a00:	f107 0108 	add.w	r1, r7, #8
 8006a04:	4610      	mov	r0, r2
 8006a06:	4798      	blx	r3
 8006a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a0a:	e029      	b.n	8006a60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fa2f 	bl	8006e72 <USBD_CtlError>
            err++;
 8006a14:	7afb      	ldrb	r3, [r7, #11]
 8006a16:	3301      	adds	r3, #1
 8006a18:	72fb      	strb	r3, [r7, #11]
          break;
 8006a1a:	e021      	b.n	8006a60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00b      	beq.n	8006a40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	7c12      	ldrb	r2, [r2, #16]
 8006a34:	f107 0108 	add.w	r1, r7, #8
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4798      	blx	r3
 8006a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a3e:	e00f      	b.n	8006a60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fa15 	bl	8006e72 <USBD_CtlError>
            err++;
 8006a48:	7afb      	ldrb	r3, [r7, #11]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a4e:	e007      	b.n	8006a60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fa0d 	bl	8006e72 <USBD_CtlError>
          err++;
 8006a58:	7afb      	ldrb	r3, [r7, #11]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006a5e:	e038      	b.n	8006ad2 <USBD_GetDescriptor+0x286>
 8006a60:	e037      	b.n	8006ad2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	7c1b      	ldrb	r3, [r3, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a72:	f107 0208 	add.w	r2, r7, #8
 8006a76:	4610      	mov	r0, r2
 8006a78:	4798      	blx	r3
 8006a7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a7c:	e029      	b.n	8006ad2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f9f6 	bl	8006e72 <USBD_CtlError>
        err++;
 8006a86:	7afb      	ldrb	r3, [r7, #11]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	72fb      	strb	r3, [r7, #11]
      break;
 8006a8c:	e021      	b.n	8006ad2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	7c1b      	ldrb	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10d      	bne.n	8006ab2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	f107 0208 	add.w	r2, r7, #8
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4798      	blx	r3
 8006aa6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	2207      	movs	r2, #7
 8006aae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ab0:	e00f      	b.n	8006ad2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f9dc 	bl	8006e72 <USBD_CtlError>
        err++;
 8006aba:	7afb      	ldrb	r3, [r7, #11]
 8006abc:	3301      	adds	r3, #1
 8006abe:	72fb      	strb	r3, [r7, #11]
      break;
 8006ac0:	e007      	b.n	8006ad2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f9d4 	bl	8006e72 <USBD_CtlError>
      err++;
 8006aca:	7afb      	ldrb	r3, [r7, #11]
 8006acc:	3301      	adds	r3, #1
 8006ace:	72fb      	strb	r3, [r7, #11]
      break;
 8006ad0:	bf00      	nop
  }

  if (err != 0U)
 8006ad2:	7afb      	ldrb	r3, [r7, #11]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d11c      	bne.n	8006b12 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006ad8:	893b      	ldrh	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d011      	beq.n	8006b02 <USBD_GetDescriptor+0x2b6>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	88db      	ldrh	r3, [r3, #6]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00d      	beq.n	8006b02 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	88da      	ldrh	r2, [r3, #6]
 8006aea:	893b      	ldrh	r3, [r7, #8]
 8006aec:	4293      	cmp	r3, r2
 8006aee:	bf28      	it	cs
 8006af0:	4613      	movcs	r3, r2
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006af6:	893b      	ldrh	r3, [r7, #8]
 8006af8:	461a      	mov	r2, r3
 8006afa:	68f9      	ldr	r1, [r7, #12]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fa22 	bl	8006f46 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	88db      	ldrh	r3, [r3, #6]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d104      	bne.n	8006b14 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fa79 	bl	8007002 <USBD_CtlSendStatus>
 8006b10:	e000      	b.n	8006b14 <USBD_GetDescriptor+0x2c8>
    return;
 8006b12:	bf00      	nop
    }
  }
}
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop

08006b1c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	889b      	ldrh	r3, [r3, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d130      	bne.n	8006b90 <USBD_SetAddress+0x74>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	88db      	ldrh	r3, [r3, #6]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d12c      	bne.n	8006b90 <USBD_SetAddress+0x74>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	885b      	ldrh	r3, [r3, #2]
 8006b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b3c:	d828      	bhi.n	8006b90 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	885b      	ldrh	r3, [r3, #2]
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	d104      	bne.n	8006b5e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f98b 	bl	8006e72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b5c:	e01d      	b.n	8006b9a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	7bfa      	ldrb	r2, [r7, #15]
 8006b62:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f003 fcc8 	bl	800a500 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fa46 	bl	8007002 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d004      	beq.n	8006b86 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b84:	e009      	b.n	8006b9a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b8e:	e004      	b.n	8006b9a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f96d 	bl	8006e72 <USBD_CtlError>
  }
}
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	885b      	ldrh	r3, [r3, #2]
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	4b41      	ldr	r3, [pc, #260]	; (8006cbc <USBD_SetConfig+0x118>)
 8006bb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bb8:	4b40      	ldr	r3, [pc, #256]	; (8006cbc <USBD_SetConfig+0x118>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d904      	bls.n	8006bca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f955 	bl	8006e72 <USBD_CtlError>
 8006bc8:	e075      	b.n	8006cb6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d002      	beq.n	8006bda <USBD_SetConfig+0x36>
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d023      	beq.n	8006c20 <USBD_SetConfig+0x7c>
 8006bd8:	e062      	b.n	8006ca0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006bda:	4b38      	ldr	r3, [pc, #224]	; (8006cbc <USBD_SetConfig+0x118>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d01a      	beq.n	8006c18 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006be2:	4b36      	ldr	r3, [pc, #216]	; (8006cbc <USBD_SetConfig+0x118>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2203      	movs	r2, #3
 8006bf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006bf4:	4b31      	ldr	r3, [pc, #196]	; (8006cbc <USBD_SetConfig+0x118>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff f9e8 	bl	8005fd0 <USBD_SetClassConfig>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d104      	bne.n	8006c10 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006c06:	6839      	ldr	r1, [r7, #0]
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f932 	bl	8006e72 <USBD_CtlError>
            return;
 8006c0e:	e052      	b.n	8006cb6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f9f6 	bl	8007002 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c16:	e04e      	b.n	8006cb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f9f2 	bl	8007002 <USBD_CtlSendStatus>
        break;
 8006c1e:	e04a      	b.n	8006cb6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006c20:	4b26      	ldr	r3, [pc, #152]	; (8006cbc <USBD_SetConfig+0x118>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d112      	bne.n	8006c4e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006c30:	4b22      	ldr	r3, [pc, #136]	; (8006cbc <USBD_SetConfig+0x118>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c3a:	4b20      	ldr	r3, [pc, #128]	; (8006cbc <USBD_SetConfig+0x118>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7ff f9e4 	bl	800600e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f9db 	bl	8007002 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c4c:	e033      	b.n	8006cb6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006c4e:	4b1b      	ldr	r3, [pc, #108]	; (8006cbc <USBD_SetConfig+0x118>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d01d      	beq.n	8006c98 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff f9d2 	bl	800600e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006c6a:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <USBD_SetConfig+0x118>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c74:	4b11      	ldr	r3, [pc, #68]	; (8006cbc <USBD_SetConfig+0x118>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff f9a8 	bl	8005fd0 <USBD_SetClassConfig>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d104      	bne.n	8006c90 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f8f2 	bl	8006e72 <USBD_CtlError>
            return;
 8006c8e:	e012      	b.n	8006cb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f9b6 	bl	8007002 <USBD_CtlSendStatus>
        break;
 8006c96:	e00e      	b.n	8006cb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f9b2 	bl	8007002 <USBD_CtlSendStatus>
        break;
 8006c9e:	e00a      	b.n	8006cb6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f8e5 	bl	8006e72 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006ca8:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <USBD_SetConfig+0x118>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff f9ad 	bl	800600e <USBD_ClrClassConfig>
        break;
 8006cb4:	bf00      	nop
    }
  }
}
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	200005ac 	.word	0x200005ac

08006cc0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	88db      	ldrh	r3, [r3, #6]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d004      	beq.n	8006cdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f8cc 	bl	8006e72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006cda:	e022      	b.n	8006d22 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	dc02      	bgt.n	8006cec <USBD_GetConfig+0x2c>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	dc03      	bgt.n	8006cf2 <USBD_GetConfig+0x32>
 8006cea:	e015      	b.n	8006d18 <USBD_GetConfig+0x58>
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d00b      	beq.n	8006d08 <USBD_GetConfig+0x48>
 8006cf0:	e012      	b.n	8006d18 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3308      	adds	r3, #8
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f920 	bl	8006f46 <USBD_CtlSendData>
        break;
 8006d06:	e00c      	b.n	8006d22 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f918 	bl	8006f46 <USBD_CtlSendData>
        break;
 8006d16:	e004      	b.n	8006d22 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f8a9 	bl	8006e72 <USBD_CtlError>
        break;
 8006d20:	bf00      	nop
}
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b082      	sub	sp, #8
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d81e      	bhi.n	8006d7e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	88db      	ldrh	r3, [r3, #6]
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d004      	beq.n	8006d52 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f891 	bl	8006e72 <USBD_CtlError>
        break;
 8006d50:	e01a      	b.n	8006d88 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d005      	beq.n	8006d6e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	f043 0202 	orr.w	r2, r3, #2
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	330c      	adds	r3, #12
 8006d72:	2202      	movs	r2, #2
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f8e5 	bl	8006f46 <USBD_CtlSendData>
      break;
 8006d7c:	e004      	b.n	8006d88 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f876 	bl	8006e72 <USBD_CtlError>
      break;
 8006d86:	bf00      	nop
  }
}
 8006d88:	bf00      	nop
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	885b      	ldrh	r3, [r3, #2]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d106      	bne.n	8006db0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f929 	bl	8007002 <USBD_CtlSendStatus>
  }
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d80b      	bhi.n	8006de6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	885b      	ldrh	r3, [r3, #2]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d10c      	bne.n	8006df0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f90f 	bl	8007002 <USBD_CtlSendStatus>
      }
      break;
 8006de4:	e004      	b.n	8006df0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f842 	bl	8006e72 <USBD_CtlError>
      break;
 8006dee:	e000      	b.n	8006df2 <USBD_ClrFeature+0x3a>
      break;
 8006df0:	bf00      	nop
  }
}
 8006df2:	bf00      	nop
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781a      	ldrb	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	785a      	ldrb	r2, [r3, #1]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	3302      	adds	r3, #2
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	3303      	adds	r3, #3
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	4413      	add	r3, r2
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	3304      	adds	r3, #4
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	3305      	adds	r3, #5
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	4413      	add	r3, r2
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	3306      	adds	r3, #6
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	3307      	adds	r3, #7
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	4413      	add	r3, r2
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	80da      	strh	r2, [r3, #6]

}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr

08006e72 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006e7c:	2180      	movs	r1, #128	; 0x80
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f003 fad4 	bl	800a42c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006e84:	2100      	movs	r1, #0
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f003 fad0 	bl	800a42c <USBD_LL_StallEP>
}
 8006e8c:	bf00      	nop
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d032      	beq.n	8006f10 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 f834 	bl	8006f18 <USBD_GetLen>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	75fa      	strb	r2, [r7, #23]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	4413      	add	r3, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	7812      	ldrb	r2, [r2, #0]
 8006ece:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	75fa      	strb	r2, [r7, #23]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	4413      	add	r3, r2
 8006edc:	2203      	movs	r2, #3
 8006ede:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006ee0:	e012      	b.n	8006f08 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	60fa      	str	r2, [r7, #12]
 8006ee8:	7dfa      	ldrb	r2, [r7, #23]
 8006eea:	1c51      	adds	r1, r2, #1
 8006eec:	75f9      	strb	r1, [r7, #23]
 8006eee:	4611      	mov	r1, r2
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	440a      	add	r2, r1
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	75fa      	strb	r2, [r7, #23]
 8006efe:	461a      	mov	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4413      	add	r3, r2
 8006f04:	2200      	movs	r2, #0
 8006f06:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e8      	bne.n	8006ee2 <USBD_GetString+0x4e>
    }
  }
}
 8006f10:	bf00      	nop
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006f24:	e005      	b.n	8006f32 <USBD_GetLen+0x1a>
  {
    len++;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f5      	bne.n	8006f26 <USBD_GetLen+0xe>
  }

  return len;
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bc80      	pop	{r7}
 8006f44:	4770      	bx	lr

08006f46 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	4613      	mov	r3, r2
 8006f52:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f5c:	88fa      	ldrh	r2, [r7, #6]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006f62:	88fa      	ldrh	r2, [r7, #6]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f68:	88fb      	ldrh	r3, [r7, #6]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f003 fae5 	bl	800a53e <USBD_LL_Transmit>

  return USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f8c:	88fb      	ldrh	r3, [r7, #6]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	2100      	movs	r1, #0
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f003 fad3 	bl	800a53e <USBD_LL_Transmit>

  return USBD_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	4613      	mov	r3, r2
 8006fae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2203      	movs	r2, #3
 8006fb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006fb8:	88fa      	ldrh	r2, [r7, #6]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006fc0:	88fa      	ldrh	r2, [r7, #6]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fc8:	88fb      	ldrh	r3, [r7, #6]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	2100      	movs	r1, #0
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f003 fad8 	bl	800a584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fec:	88fb      	ldrh	r3, [r7, #6]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f003 fac6 	bl	800a584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2204      	movs	r2, #4
 800700e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007012:	2300      	movs	r3, #0
 8007014:	2200      	movs	r2, #0
 8007016:	2100      	movs	r1, #0
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f003 fa90 	bl	800a53e <USBD_LL_Transmit>

  return USBD_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2205      	movs	r2, #5
 8007034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007038:	2300      	movs	r3, #0
 800703a:	2200      	movs	r2, #0
 800703c:	2100      	movs	r1, #0
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f003 faa0 	bl	800a584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007056:	f3ef 8305 	mrs	r3, IPSR
 800705a:	60bb      	str	r3, [r7, #8]
  return(result);
 800705c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10f      	bne.n	8007082 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007062:	f3ef 8310 	mrs	r3, PRIMASK
 8007066:	607b      	str	r3, [r7, #4]
  return(result);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d109      	bne.n	8007082 <osKernelInitialize+0x32>
 800706e:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <osKernelInitialize+0x60>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d109      	bne.n	800708a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007076:	f3ef 8311 	mrs	r3, BASEPRI
 800707a:	603b      	str	r3, [r7, #0]
  return(result);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007082:	f06f 0305 	mvn.w	r3, #5
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	e00c      	b.n	80070a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800708a:	4b09      	ldr	r3, [pc, #36]	; (80070b0 <osKernelInitialize+0x60>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d105      	bne.n	800709e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007092:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <osKernelInitialize+0x60>)
 8007094:	2201      	movs	r2, #1
 8007096:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007098:	2300      	movs	r3, #0
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	e002      	b.n	80070a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800709e:	f04f 33ff 	mov.w	r3, #4294967295
 80070a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80070a4:	68fb      	ldr	r3, [r7, #12]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bc80      	pop	{r7}
 80070ae:	4770      	bx	lr
 80070b0:	200005b0 	.word	0x200005b0

080070b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070ba:	f3ef 8305 	mrs	r3, IPSR
 80070be:	60bb      	str	r3, [r7, #8]
  return(result);
 80070c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10f      	bne.n	80070e6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070c6:	f3ef 8310 	mrs	r3, PRIMASK
 80070ca:	607b      	str	r3, [r7, #4]
  return(result);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d109      	bne.n	80070e6 <osKernelStart+0x32>
 80070d2:	4b11      	ldr	r3, [pc, #68]	; (8007118 <osKernelStart+0x64>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d109      	bne.n	80070ee <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070da:	f3ef 8311 	mrs	r3, BASEPRI
 80070de:	603b      	str	r3, [r7, #0]
  return(result);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <osKernelStart+0x3a>
    stat = osErrorISR;
 80070e6:	f06f 0305 	mvn.w	r3, #5
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	e00e      	b.n	800710c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80070ee:	4b0a      	ldr	r3, [pc, #40]	; (8007118 <osKernelStart+0x64>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d107      	bne.n	8007106 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80070f6:	4b08      	ldr	r3, [pc, #32]	; (8007118 <osKernelStart+0x64>)
 80070f8:	2202      	movs	r2, #2
 80070fa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80070fc:	f001 fa2c 	bl	8008558 <vTaskStartScheduler>
      stat = osOK;
 8007100:	2300      	movs	r3, #0
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	e002      	b.n	800710c <osKernelStart+0x58>
    } else {
      stat = osError;
 8007106:	f04f 33ff 	mov.w	r3, #4294967295
 800710a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800710c:	68fb      	ldr	r3, [r7, #12]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	200005b0 	.word	0x200005b0

0800711c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800711c:	b580      	push	{r7, lr}
 800711e:	b092      	sub	sp, #72	; 0x48
 8007120:	af04      	add	r7, sp, #16
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007128:	2300      	movs	r3, #0
 800712a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800712c:	f3ef 8305 	mrs	r3, IPSR
 8007130:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007134:	2b00      	cmp	r3, #0
 8007136:	f040 8094 	bne.w	8007262 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800713a:	f3ef 8310 	mrs	r3, PRIMASK
 800713e:	623b      	str	r3, [r7, #32]
  return(result);
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	2b00      	cmp	r3, #0
 8007144:	f040 808d 	bne.w	8007262 <osThreadNew+0x146>
 8007148:	4b48      	ldr	r3, [pc, #288]	; (800726c <osThreadNew+0x150>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b02      	cmp	r3, #2
 800714e:	d106      	bne.n	800715e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007150:	f3ef 8311 	mrs	r3, BASEPRI
 8007154:	61fb      	str	r3, [r7, #28]
  return(result);
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f040 8082 	bne.w	8007262 <osThreadNew+0x146>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d07e      	beq.n	8007262 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007164:	2380      	movs	r3, #128	; 0x80
 8007166:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007168:	2318      	movs	r3, #24
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800716c:	2300      	movs	r3, #0
 800716e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007170:	f107 031b 	add.w	r3, r7, #27
 8007174:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007176:	f04f 33ff 	mov.w	r3, #4294967295
 800717a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d045      	beq.n	800720e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <osThreadNew+0x74>
        name = attr->name;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d008      	beq.n	80071b6 <osThreadNew+0x9a>
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a6:	2b38      	cmp	r3, #56	; 0x38
 80071a8:	d805      	bhi.n	80071b6 <osThreadNew+0x9a>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <osThreadNew+0x9e>
        return (NULL);
 80071b6:	2300      	movs	r3, #0
 80071b8:	e054      	b.n	8007264 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	089b      	lsrs	r3, r3, #2
 80071c8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00e      	beq.n	80071f0 <osThreadNew+0xd4>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	2b5b      	cmp	r3, #91	; 0x5b
 80071d8:	d90a      	bls.n	80071f0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d006      	beq.n	80071f0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <osThreadNew+0xd4>
        mem = 1;
 80071ea:	2301      	movs	r3, #1
 80071ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ee:	e010      	b.n	8007212 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10c      	bne.n	8007212 <osThreadNew+0xf6>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d108      	bne.n	8007212 <osThreadNew+0xf6>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d104      	bne.n	8007212 <osThreadNew+0xf6>
          mem = 0;
 8007208:	2300      	movs	r3, #0
 800720a:	62bb      	str	r3, [r7, #40]	; 0x28
 800720c:	e001      	b.n	8007212 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	2b01      	cmp	r3, #1
 8007216:	d110      	bne.n	800723a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007220:	9202      	str	r2, [sp, #8]
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800722c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 fed6 	bl	8007fe0 <xTaskCreateStatic>
 8007234:	4603      	mov	r3, r0
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	e013      	b.n	8007262 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800723a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723c:	2b00      	cmp	r3, #0
 800723e:	d110      	bne.n	8007262 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007242:	b29a      	uxth	r2, r3
 8007244:	f107 0314 	add.w	r3, r7, #20
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 ff20 	bl	8008098 <xTaskCreate>
 8007258:	4603      	mov	r3, r0
 800725a:	2b01      	cmp	r3, #1
 800725c:	d001      	beq.n	8007262 <osThreadNew+0x146>
          hTask = NULL;
 800725e:	2300      	movs	r3, #0
 8007260:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007262:	697b      	ldr	r3, [r7, #20]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3738      	adds	r7, #56	; 0x38
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	200005b0 	.word	0x200005b0

08007270 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007278:	f3ef 8305 	mrs	r3, IPSR
 800727c:	613b      	str	r3, [r7, #16]
  return(result);
 800727e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10f      	bne.n	80072a4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007284:	f3ef 8310 	mrs	r3, PRIMASK
 8007288:	60fb      	str	r3, [r7, #12]
  return(result);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d109      	bne.n	80072a4 <osDelay+0x34>
 8007290:	4b0d      	ldr	r3, [pc, #52]	; (80072c8 <osDelay+0x58>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d109      	bne.n	80072ac <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007298:	f3ef 8311 	mrs	r3, BASEPRI
 800729c:	60bb      	str	r3, [r7, #8]
  return(result);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <osDelay+0x3c>
    stat = osErrorISR;
 80072a4:	f06f 0305 	mvn.w	r3, #5
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	e007      	b.n	80072bc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <osDelay+0x4c>
      vTaskDelay(ticks);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 f91a 	bl	80084f0 <vTaskDelay>
    }
  }

  return (stat);
 80072bc:	697b      	ldr	r3, [r7, #20]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	200005b0 	.word	0x200005b0

080072cc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08c      	sub	sp, #48	; 0x30
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80072d8:	2300      	movs	r3, #0
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072dc:	f3ef 8305 	mrs	r3, IPSR
 80072e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80072e2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d16f      	bne.n	80073c8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072e8:	f3ef 8310 	mrs	r3, PRIMASK
 80072ec:	617b      	str	r3, [r7, #20]
  return(result);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d169      	bne.n	80073c8 <osMessageQueueNew+0xfc>
 80072f4:	4b37      	ldr	r3, [pc, #220]	; (80073d4 <osMessageQueueNew+0x108>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d105      	bne.n	8007308 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007300:	613b      	str	r3, [r7, #16]
  return(result);
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d15f      	bne.n	80073c8 <osMessageQueueNew+0xfc>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d05c      	beq.n	80073c8 <osMessageQueueNew+0xfc>
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d059      	beq.n	80073c8 <osMessageQueueNew+0xfc>
    mem = -1;
 8007314:	f04f 33ff 	mov.w	r3, #4294967295
 8007318:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d029      	beq.n	8007374 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d012      	beq.n	800734e <osMessageQueueNew+0x82>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	2b4f      	cmp	r3, #79	; 0x4f
 800732e:	d90e      	bls.n	800734e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	695a      	ldr	r2, [r3, #20]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	68b9      	ldr	r1, [r7, #8]
 8007340:	fb01 f303 	mul.w	r3, r1, r3
 8007344:	429a      	cmp	r2, r3
 8007346:	d302      	bcc.n	800734e <osMessageQueueNew+0x82>
        mem = 1;
 8007348:	2301      	movs	r3, #1
 800734a:	623b      	str	r3, [r7, #32]
 800734c:	e014      	b.n	8007378 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d110      	bne.n	8007378 <osMessageQueueNew+0xac>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10c      	bne.n	8007378 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007362:	2b00      	cmp	r3, #0
 8007364:	d108      	bne.n	8007378 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d104      	bne.n	8007378 <osMessageQueueNew+0xac>
          mem = 0;
 800736e:	2300      	movs	r3, #0
 8007370:	623b      	str	r3, [r7, #32]
 8007372:	e001      	b.n	8007378 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d10b      	bne.n	8007396 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	691a      	ldr	r2, [r3, #16]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2100      	movs	r1, #0
 8007388:	9100      	str	r1, [sp, #0]
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f96d 	bl	800766c <xQueueGenericCreateStatic>
 8007392:	6278      	str	r0, [r7, #36]	; 0x24
 8007394:	e008      	b.n	80073a8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d105      	bne.n	80073a8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800739c:	2200      	movs	r2, #0
 800739e:	68b9      	ldr	r1, [r7, #8]
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f9da 	bl	800775a <xQueueGenericCreate>
 80073a6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00c      	beq.n	80073c8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <osMessageQueueNew+0xf0>
        name = attr->name;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	61fb      	str	r3, [r7, #28]
 80073ba:	e001      	b.n	80073c0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80073bc:	2300      	movs	r3, #0
 80073be:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80073c0:	69f9      	ldr	r1, [r7, #28]
 80073c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073c4:	f000 fdb0 	bl	8007f28 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3728      	adds	r7, #40	; 0x28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	200005b0 	.word	0x200005b0

080073d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4a06      	ldr	r2, [pc, #24]	; (8007400 <vApplicationGetIdleTaskMemory+0x28>)
 80073e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	4a05      	ldr	r2, [pc, #20]	; (8007404 <vApplicationGetIdleTaskMemory+0x2c>)
 80073ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2280      	movs	r2, #128	; 0x80
 80073f4:	601a      	str	r2, [r3, #0]
}
 80073f6:	bf00      	nop
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr
 8007400:	200005b4 	.word	0x200005b4
 8007404:	20000610 	.word	0x20000610

08007408 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4a07      	ldr	r2, [pc, #28]	; (8007434 <vApplicationGetTimerTaskMemory+0x2c>)
 8007418:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	4a06      	ldr	r2, [pc, #24]	; (8007438 <vApplicationGetTimerTaskMemory+0x30>)
 800741e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007426:	601a      	str	r2, [r3, #0]
}
 8007428:	bf00      	nop
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	bc80      	pop	{r7}
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	20000810 	.word	0x20000810
 8007438:	2000086c 	.word	0x2000086c

0800743c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f103 0208 	add.w	r2, r3, #8
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f04f 32ff 	mov.w	r2, #4294967295
 8007454:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f103 0208 	add.w	r2, r3, #8
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f103 0208 	add.w	r2, r3, #8
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	bc80      	pop	{r7}
 8007478:	4770      	bx	lr

0800747a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800747a:	b480      	push	{r7}
 800747c:	b083      	sub	sp, #12
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr

08007492 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007492:	b480      	push	{r7}
 8007494:	b085      	sub	sp, #20
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	601a      	str	r2, [r3, #0]
}
 80074ce:	bf00      	nop
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr

080074d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ee:	d103      	bne.n	80074f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	e00c      	b.n	8007512 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3308      	adds	r3, #8
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	e002      	b.n	8007506 <vListInsert+0x2e>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	429a      	cmp	r2, r3
 8007510:	d2f6      	bcs.n	8007500 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	601a      	str	r2, [r3, #0]
}
 800753e:	bf00      	nop
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	bc80      	pop	{r7}
 8007546:	4770      	bx	lr

08007548 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	6892      	ldr	r2, [r2, #8]
 800755e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6852      	ldr	r2, [r2, #4]
 8007568:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	429a      	cmp	r2, r3
 8007572:	d103      	bne.n	800757c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689a      	ldr	r2, [r3, #8]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	1e5a      	subs	r2, r3, #1
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	bc80      	pop	{r7}
 8007598:	4770      	bx	lr
	...

0800759c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80075c2:	bf00      	nop
 80075c4:	e7fe      	b.n	80075c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80075c6:	f002 f8f9 	bl	80097bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d2:	68f9      	ldr	r1, [r7, #12]
 80075d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075d6:	fb01 f303 	mul.w	r3, r1, r3
 80075da:	441a      	add	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f6:	3b01      	subs	r3, #1
 80075f8:	68f9      	ldr	r1, [r7, #12]
 80075fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	441a      	add	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	22ff      	movs	r2, #255	; 0xff
 800760a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	22ff      	movs	r2, #255	; 0xff
 8007612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d114      	bne.n	8007646 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d01a      	beq.n	800765a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3310      	adds	r3, #16
 8007628:	4618      	mov	r0, r3
 800762a:	f001 fa1f 	bl	8008a6c <xTaskRemoveFromEventList>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d012      	beq.n	800765a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007634:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <xQueueGenericReset+0xcc>)
 8007636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	e009      	b.n	800765a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3310      	adds	r3, #16
 800764a:	4618      	mov	r0, r3
 800764c:	f7ff fef6 	bl	800743c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3324      	adds	r3, #36	; 0x24
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff fef1 	bl	800743c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800765a:	f002 f8df 	bl	800981c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800765e:	2301      	movs	r3, #1
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	e000ed04 	.word	0xe000ed04

0800766c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08e      	sub	sp, #56	; 0x38
 8007670:	af02      	add	r7, sp, #8
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
 8007678:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10a      	bne.n	8007696 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007692:	bf00      	nop
 8007694:	e7fe      	b.n	8007694 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10a      	bne.n	80076b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076ae:	bf00      	nop
 80076b0:	e7fe      	b.n	80076b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <xQueueGenericCreateStatic+0x52>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <xQueueGenericCreateStatic+0x56>
 80076be:	2301      	movs	r3, #1
 80076c0:	e000      	b.n	80076c4 <xQueueGenericCreateStatic+0x58>
 80076c2:	2300      	movs	r3, #0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	623b      	str	r3, [r7, #32]
}
 80076da:	bf00      	nop
 80076dc:	e7fe      	b.n	80076dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d102      	bne.n	80076ea <xQueueGenericCreateStatic+0x7e>
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <xQueueGenericCreateStatic+0x82>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <xQueueGenericCreateStatic+0x84>
 80076ee:	2300      	movs	r3, #0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	61fb      	str	r3, [r7, #28]
}
 8007706:	bf00      	nop
 8007708:	e7fe      	b.n	8007708 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800770a:	2350      	movs	r3, #80	; 0x50
 800770c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b50      	cmp	r3, #80	; 0x50
 8007712:	d00a      	beq.n	800772a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	61bb      	str	r3, [r7, #24]
}
 8007726:	bf00      	nop
 8007728:	e7fe      	b.n	8007728 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800772e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00d      	beq.n	8007750 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800773c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	4613      	mov	r3, r2
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 f843 	bl	80077d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007752:	4618      	mov	r0, r3
 8007754:	3730      	adds	r7, #48	; 0x30
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800775a:	b580      	push	{r7, lr}
 800775c:	b08a      	sub	sp, #40	; 0x28
 800775e:	af02      	add	r7, sp, #8
 8007760:	60f8      	str	r0, [r7, #12]
 8007762:	60b9      	str	r1, [r7, #8]
 8007764:	4613      	mov	r3, r2
 8007766:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10a      	bne.n	8007784 <xQueueGenericCreate+0x2a>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	613b      	str	r3, [r7, #16]
}
 8007780:	bf00      	nop
 8007782:	e7fe      	b.n	8007782 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d102      	bne.n	8007790 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800778a:	2300      	movs	r3, #0
 800778c:	61fb      	str	r3, [r7, #28]
 800778e:	e004      	b.n	800779a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	fb02 f303 	mul.w	r3, r2, r3
 8007798:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	3350      	adds	r3, #80	; 0x50
 800779e:	4618      	mov	r0, r3
 80077a0:	f002 f90c 	bl	80099bc <pvPortMalloc>
 80077a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00f      	beq.n	80077cc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	3350      	adds	r3, #80	; 0x50
 80077b0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077ba:	79fa      	ldrb	r2, [r7, #7]
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	4613      	mov	r3, r2
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	68b9      	ldr	r1, [r7, #8]
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 f805 	bl	80077d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80077cc:	69bb      	ldr	r3, [r7, #24]
	}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3720      	adds	r7, #32
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	607a      	str	r2, [r7, #4]
 80077e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d103      	bne.n	80077f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	e002      	b.n	80077f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007804:	2101      	movs	r1, #1
 8007806:	69b8      	ldr	r0, [r7, #24]
 8007808:	f7ff fec8 	bl	800759c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	78fa      	ldrb	r2, [r7, #3]
 8007810:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08e      	sub	sp, #56	; 0x38
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800782a:	2300      	movs	r3, #0
 800782c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <xQueueGenericSend+0x32>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800784a:	bf00      	nop
 800784c:	e7fe      	b.n	800784c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d103      	bne.n	800785c <xQueueGenericSend+0x40>
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <xQueueGenericSend+0x44>
 800785c:	2301      	movs	r3, #1
 800785e:	e000      	b.n	8007862 <xQueueGenericSend+0x46>
 8007860:	2300      	movs	r3, #0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10a      	bne.n	800787c <xQueueGenericSend+0x60>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007878:	bf00      	nop
 800787a:	e7fe      	b.n	800787a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b02      	cmp	r3, #2
 8007880:	d103      	bne.n	800788a <xQueueGenericSend+0x6e>
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007886:	2b01      	cmp	r3, #1
 8007888:	d101      	bne.n	800788e <xQueueGenericSend+0x72>
 800788a:	2301      	movs	r3, #1
 800788c:	e000      	b.n	8007890 <xQueueGenericSend+0x74>
 800788e:	2300      	movs	r3, #0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10a      	bne.n	80078aa <xQueueGenericSend+0x8e>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	623b      	str	r3, [r7, #32]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078aa:	f001 faa1 	bl	8008df0 <xTaskGetSchedulerState>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <xQueueGenericSend+0x9e>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <xQueueGenericSend+0xa2>
 80078ba:	2301      	movs	r3, #1
 80078bc:	e000      	b.n	80078c0 <xQueueGenericSend+0xa4>
 80078be:	2300      	movs	r3, #0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10a      	bne.n	80078da <xQueueGenericSend+0xbe>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	61fb      	str	r3, [r7, #28]
}
 80078d6:	bf00      	nop
 80078d8:	e7fe      	b.n	80078d8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078da:	f001 ff6f 	bl	80097bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d302      	bcc.n	80078f0 <xQueueGenericSend+0xd4>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d129      	bne.n	8007944 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078f6:	f000 fa07 	bl	8007d08 <prvCopyDataToQueue>
 80078fa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	2b00      	cmp	r3, #0
 8007902:	d010      	beq.n	8007926 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	3324      	adds	r3, #36	; 0x24
 8007908:	4618      	mov	r0, r3
 800790a:	f001 f8af 	bl	8008a6c <xTaskRemoveFromEventList>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d013      	beq.n	800793c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007914:	4b3f      	ldr	r3, [pc, #252]	; (8007a14 <xQueueGenericSend+0x1f8>)
 8007916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	e00a      	b.n	800793c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007928:	2b00      	cmp	r3, #0
 800792a:	d007      	beq.n	800793c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800792c:	4b39      	ldr	r3, [pc, #228]	; (8007a14 <xQueueGenericSend+0x1f8>)
 800792e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800793c:	f001 ff6e 	bl	800981c <vPortExitCritical>
				return pdPASS;
 8007940:	2301      	movs	r3, #1
 8007942:	e063      	b.n	8007a0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d103      	bne.n	8007952 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800794a:	f001 ff67 	bl	800981c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800794e:	2300      	movs	r3, #0
 8007950:	e05c      	b.n	8007a0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007954:	2b00      	cmp	r3, #0
 8007956:	d106      	bne.n	8007966 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007958:	f107 0314 	add.w	r3, r7, #20
 800795c:	4618      	mov	r0, r3
 800795e:	f001 f8e9 	bl	8008b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007962:	2301      	movs	r3, #1
 8007964:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007966:	f001 ff59 	bl	800981c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800796a:	f000 fe5b 	bl	8008624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800796e:	f001 ff25 	bl	80097bc <vPortEnterCritical>
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007978:	b25b      	sxtb	r3, r3
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797e:	d103      	bne.n	8007988 <xQueueGenericSend+0x16c>
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800798e:	b25b      	sxtb	r3, r3
 8007990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007994:	d103      	bne.n	800799e <xQueueGenericSend+0x182>
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800799e:	f001 ff3d 	bl	800981c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079a2:	1d3a      	adds	r2, r7, #4
 80079a4:	f107 0314 	add.w	r3, r7, #20
 80079a8:	4611      	mov	r1, r2
 80079aa:	4618      	mov	r0, r3
 80079ac:	f001 f8d8 	bl	8008b60 <xTaskCheckForTimeOut>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d124      	bne.n	8007a00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079b8:	f000 fa9e 	bl	8007ef8 <prvIsQueueFull>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d018      	beq.n	80079f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	3310      	adds	r3, #16
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	4611      	mov	r1, r2
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fffe 	bl	80089cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079d2:	f000 fa29 	bl	8007e28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079d6:	f000 fe33 	bl	8008640 <xTaskResumeAll>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f47f af7c 	bne.w	80078da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80079e2:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <xQueueGenericSend+0x1f8>)
 80079e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	e772      	b.n	80078da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079f6:	f000 fa17 	bl	8007e28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079fa:	f000 fe21 	bl	8008640 <xTaskResumeAll>
 80079fe:	e76c      	b.n	80078da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a02:	f000 fa11 	bl	8007e28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a06:	f000 fe1b 	bl	8008640 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a0a:	2300      	movs	r3, #0
		}
	}
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3738      	adds	r7, #56	; 0x38
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	e000ed04 	.word	0xe000ed04

08007a18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b08e      	sub	sp, #56	; 0x38
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
 8007a24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10a      	bne.n	8007a46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a42:	bf00      	nop
 8007a44:	e7fe      	b.n	8007a44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d103      	bne.n	8007a54 <xQueueGenericSendFromISR+0x3c>
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <xQueueGenericSendFromISR+0x40>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <xQueueGenericSendFromISR+0x42>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10a      	bne.n	8007a74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	623b      	str	r3, [r7, #32]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d103      	bne.n	8007a82 <xQueueGenericSendFromISR+0x6a>
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d101      	bne.n	8007a86 <xQueueGenericSendFromISR+0x6e>
 8007a82:	2301      	movs	r3, #1
 8007a84:	e000      	b.n	8007a88 <xQueueGenericSendFromISR+0x70>
 8007a86:	2300      	movs	r3, #0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	61fb      	str	r3, [r7, #28]
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007aa2:	f001 ff4d 	bl	8009940 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007aa6:	f3ef 8211 	mrs	r2, BASEPRI
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	61ba      	str	r2, [r7, #24]
 8007abc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007abe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d302      	bcc.n	8007ad4 <xQueueGenericSendFromISR+0xbc>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d12c      	bne.n	8007b2e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	68b9      	ldr	r1, [r7, #8]
 8007ae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ae4:	f000 f910 	bl	8007d08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ae8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af0:	d112      	bne.n	8007b18 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d016      	beq.n	8007b28 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	3324      	adds	r3, #36	; 0x24
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 ffb4 	bl	8008a6c <xTaskRemoveFromEventList>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00e      	beq.n	8007b28 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00b      	beq.n	8007b28 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	e007      	b.n	8007b28 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	b25a      	sxtb	r2, r3
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007b2c:	e001      	b.n	8007b32 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	637b      	str	r3, [r7, #52]	; 0x34
 8007b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b34:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3738      	adds	r7, #56	; 0x38
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08c      	sub	sp, #48	; 0x30
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b54:	2300      	movs	r3, #0
 8007b56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <xQueueReceive+0x30>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	623b      	str	r3, [r7, #32]
}
 8007b74:	bf00      	nop
 8007b76:	e7fe      	b.n	8007b76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d103      	bne.n	8007b86 <xQueueReceive+0x3e>
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <xQueueReceive+0x42>
 8007b86:	2301      	movs	r3, #1
 8007b88:	e000      	b.n	8007b8c <xQueueReceive+0x44>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10a      	bne.n	8007ba6 <xQueueReceive+0x5e>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	61fb      	str	r3, [r7, #28]
}
 8007ba2:	bf00      	nop
 8007ba4:	e7fe      	b.n	8007ba4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ba6:	f001 f923 	bl	8008df0 <xTaskGetSchedulerState>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d102      	bne.n	8007bb6 <xQueueReceive+0x6e>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <xQueueReceive+0x72>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e000      	b.n	8007bbc <xQueueReceive+0x74>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10a      	bne.n	8007bd6 <xQueueReceive+0x8e>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	61bb      	str	r3, [r7, #24]
}
 8007bd2:	bf00      	nop
 8007bd4:	e7fe      	b.n	8007bd4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bd6:	f001 fdf1 	bl	80097bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d01f      	beq.n	8007c26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bea:	f000 f8f7 	bl	8007ddc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	1e5a      	subs	r2, r3, #1
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00f      	beq.n	8007c1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	3310      	adds	r3, #16
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 ff32 	bl	8008a6c <xTaskRemoveFromEventList>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d007      	beq.n	8007c1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c0e:	4b3d      	ldr	r3, [pc, #244]	; (8007d04 <xQueueReceive+0x1bc>)
 8007c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c1e:	f001 fdfd 	bl	800981c <vPortExitCritical>
				return pdPASS;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e069      	b.n	8007cfa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d103      	bne.n	8007c34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c2c:	f001 fdf6 	bl	800981c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c30:	2300      	movs	r3, #0
 8007c32:	e062      	b.n	8007cfa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d106      	bne.n	8007c48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c3a:	f107 0310 	add.w	r3, r7, #16
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 ff78 	bl	8008b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c44:	2301      	movs	r3, #1
 8007c46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c48:	f001 fde8 	bl	800981c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c4c:	f000 fcea 	bl	8008624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c50:	f001 fdb4 	bl	80097bc <vPortEnterCritical>
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c5a:	b25b      	sxtb	r3, r3
 8007c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c60:	d103      	bne.n	8007c6a <xQueueReceive+0x122>
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c70:	b25b      	sxtb	r3, r3
 8007c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c76:	d103      	bne.n	8007c80 <xQueueReceive+0x138>
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c80:	f001 fdcc 	bl	800981c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c84:	1d3a      	adds	r2, r7, #4
 8007c86:	f107 0310 	add.w	r3, r7, #16
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 ff67 	bl	8008b60 <xTaskCheckForTimeOut>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d123      	bne.n	8007ce0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c9a:	f000 f917 	bl	8007ecc <prvIsQueueEmpty>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d017      	beq.n	8007cd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	3324      	adds	r3, #36	; 0x24
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	4611      	mov	r1, r2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 fe8d 	bl	80089cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb4:	f000 f8b8 	bl	8007e28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cb8:	f000 fcc2 	bl	8008640 <xTaskResumeAll>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d189      	bne.n	8007bd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007cc2:	4b10      	ldr	r3, [pc, #64]	; (8007d04 <xQueueReceive+0x1bc>)
 8007cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	e780      	b.n	8007bd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd6:	f000 f8a7 	bl	8007e28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cda:	f000 fcb1 	bl	8008640 <xTaskResumeAll>
 8007cde:	e77a      	b.n	8007bd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ce2:	f000 f8a1 	bl	8007e28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ce6:	f000 fcab 	bl	8008640 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cec:	f000 f8ee 	bl	8007ecc <prvIsQueueEmpty>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f43f af6f 	beq.w	8007bd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3730      	adds	r7, #48	; 0x30
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	e000ed04 	.word	0xe000ed04

08007d08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d14:	2300      	movs	r3, #0
 8007d16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10d      	bne.n	8007d42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d14d      	bne.n	8007dca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f001 f87a 	bl	8008e2c <xTaskPriorityDisinherit>
 8007d38:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	605a      	str	r2, [r3, #4]
 8007d40:	e043      	b.n	8007dca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d119      	bne.n	8007d7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6898      	ldr	r0, [r3, #8]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	461a      	mov	r2, r3
 8007d52:	68b9      	ldr	r1, [r7, #8]
 8007d54:	f002 fcbc 	bl	800a6d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	441a      	add	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d32b      	bcc.n	8007dca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	609a      	str	r2, [r3, #8]
 8007d7a:	e026      	b.n	8007dca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	68d8      	ldr	r0, [r3, #12]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d84:	461a      	mov	r2, r3
 8007d86:	68b9      	ldr	r1, [r7, #8]
 8007d88:	f002 fca2 	bl	800a6d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d94:	425b      	negs	r3, r3
 8007d96:	441a      	add	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d207      	bcs.n	8007db8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	425b      	negs	r3, r3
 8007db2:	441a      	add	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d105      	bne.n	8007dca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007dd2:	697b      	ldr	r3, [r7, #20]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3718      	adds	r7, #24
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d018      	beq.n	8007e20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	441a      	add	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68da      	ldr	r2, [r3, #12]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d303      	bcc.n	8007e10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68d9      	ldr	r1, [r3, #12]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6838      	ldr	r0, [r7, #0]
 8007e1c:	f002 fc58 	bl	800a6d0 <memcpy>
	}
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e30:	f001 fcc4 	bl	80097bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e3c:	e011      	b.n	8007e62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d012      	beq.n	8007e6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3324      	adds	r3, #36	; 0x24
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fe0e 	bl	8008a6c <xTaskRemoveFromEventList>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e56:	f000 fee5 	bl	8008c24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	dce9      	bgt.n	8007e3e <prvUnlockQueue+0x16>
 8007e6a:	e000      	b.n	8007e6e <prvUnlockQueue+0x46>
					break;
 8007e6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	22ff      	movs	r2, #255	; 0xff
 8007e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e76:	f001 fcd1 	bl	800981c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e7a:	f001 fc9f 	bl	80097bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e86:	e011      	b.n	8007eac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d012      	beq.n	8007eb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3310      	adds	r3, #16
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fde9 	bl	8008a6c <xTaskRemoveFromEventList>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ea0:	f000 fec0 	bl	8008c24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007eac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	dce9      	bgt.n	8007e88 <prvUnlockQueue+0x60>
 8007eb4:	e000      	b.n	8007eb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007eb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	22ff      	movs	r2, #255	; 0xff
 8007ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ec0:	f001 fcac 	bl	800981c <vPortExitCritical>
}
 8007ec4:	bf00      	nop
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ed4:	f001 fc72 	bl	80097bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d102      	bne.n	8007ee6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	e001      	b.n	8007eea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007eea:	f001 fc97 	bl	800981c <vPortExitCritical>

	return xReturn;
 8007eee:	68fb      	ldr	r3, [r7, #12]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f00:	f001 fc5c 	bl	80097bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d102      	bne.n	8007f16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f10:	2301      	movs	r3, #1
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	e001      	b.n	8007f1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f1a:	f001 fc7f 	bl	800981c <vPortExitCritical>

	return xReturn;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f32:	2300      	movs	r3, #0
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	e014      	b.n	8007f62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f38:	4a0e      	ldr	r2, [pc, #56]	; (8007f74 <vQueueAddToRegistry+0x4c>)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10b      	bne.n	8007f5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f44:	490b      	ldr	r1, [pc, #44]	; (8007f74 <vQueueAddToRegistry+0x4c>)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f4e:	4a09      	ldr	r2, [pc, #36]	; (8007f74 <vQueueAddToRegistry+0x4c>)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	4413      	add	r3, r2
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f5a:	e006      	b.n	8007f6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	60fb      	str	r3, [r7, #12]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b07      	cmp	r3, #7
 8007f66:	d9e7      	bls.n	8007f38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f68:	bf00      	nop
 8007f6a:	bf00      	nop
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bc80      	pop	{r7}
 8007f72:	4770      	bx	lr
 8007f74:	200021b0 	.word	0x200021b0

08007f78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f88:	f001 fc18 	bl	80097bc <vPortEnterCritical>
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f92:	b25b      	sxtb	r3, r3
 8007f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f98:	d103      	bne.n	8007fa2 <vQueueWaitForMessageRestricted+0x2a>
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fa8:	b25b      	sxtb	r3, r3
 8007faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fae:	d103      	bne.n	8007fb8 <vQueueWaitForMessageRestricted+0x40>
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fb8:	f001 fc30 	bl	800981c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d106      	bne.n	8007fd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	3324      	adds	r3, #36	; 0x24
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	68b9      	ldr	r1, [r7, #8]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 fd21 	bl	8008a14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007fd2:	6978      	ldr	r0, [r7, #20]
 8007fd4:	f7ff ff28 	bl	8007e28 <prvUnlockQueue>
	}
 8007fd8:	bf00      	nop
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08e      	sub	sp, #56	; 0x38
 8007fe4:	af04      	add	r7, sp, #16
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10a      	bne.n	800800a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	623b      	str	r3, [r7, #32]
}
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <xTaskCreateStatic+0x46>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	61fb      	str	r3, [r7, #28]
}
 8008022:	bf00      	nop
 8008024:	e7fe      	b.n	8008024 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008026:	235c      	movs	r3, #92	; 0x5c
 8008028:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2b5c      	cmp	r3, #92	; 0x5c
 800802e:	d00a      	beq.n	8008046 <xTaskCreateStatic+0x66>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	61bb      	str	r3, [r7, #24]
}
 8008042:	bf00      	nop
 8008044:	e7fe      	b.n	8008044 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008048:	2b00      	cmp	r3, #0
 800804a:	d01e      	beq.n	800808a <xTaskCreateStatic+0xaa>
 800804c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804e:	2b00      	cmp	r3, #0
 8008050:	d01b      	beq.n	800808a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008054:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800805a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	2202      	movs	r2, #2
 8008060:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008064:	2300      	movs	r3, #0
 8008066:	9303      	str	r3, [sp, #12]
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	9302      	str	r3, [sp, #8]
 800806c:	f107 0314 	add.w	r3, r7, #20
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	68b9      	ldr	r1, [r7, #8]
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 f850 	bl	8008122 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008082:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008084:	f000 f8d4 	bl	8008230 <prvAddNewTaskToReadyList>
 8008088:	e001      	b.n	800808e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800808a:	2300      	movs	r3, #0
 800808c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800808e:	697b      	ldr	r3, [r7, #20]
	}
 8008090:	4618      	mov	r0, r3
 8008092:	3728      	adds	r7, #40	; 0x28
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008098:	b580      	push	{r7, lr}
 800809a:	b08c      	sub	sp, #48	; 0x30
 800809c:	af04      	add	r7, sp, #16
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	603b      	str	r3, [r7, #0]
 80080a4:	4613      	mov	r3, r2
 80080a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a8:	88fb      	ldrh	r3, [r7, #6]
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4618      	mov	r0, r3
 80080ae:	f001 fc85 	bl	80099bc <pvPortMalloc>
 80080b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00e      	beq.n	80080d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80080ba:	205c      	movs	r0, #92	; 0x5c
 80080bc:	f001 fc7e 	bl	80099bc <pvPortMalloc>
 80080c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	631a      	str	r2, [r3, #48]	; 0x30
 80080ce:	e005      	b.n	80080dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80080d0:	6978      	ldr	r0, [r7, #20]
 80080d2:	f001 fd37 	bl	8009b44 <vPortFree>
 80080d6:	e001      	b.n	80080dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80080d8:	2300      	movs	r3, #0
 80080da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d017      	beq.n	8008112 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080ea:	88fa      	ldrh	r2, [r7, #6]
 80080ec:	2300      	movs	r3, #0
 80080ee:	9303      	str	r3, [sp, #12]
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	9302      	str	r3, [sp, #8]
 80080f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 f80e 	bl	8008122 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008106:	69f8      	ldr	r0, [r7, #28]
 8008108:	f000 f892 	bl	8008230 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800810c:	2301      	movs	r3, #1
 800810e:	61bb      	str	r3, [r7, #24]
 8008110:	e002      	b.n	8008118 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008112:	f04f 33ff 	mov.w	r3, #4294967295
 8008116:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008118:	69bb      	ldr	r3, [r7, #24]
	}
 800811a:	4618      	mov	r0, r3
 800811c:	3720      	adds	r7, #32
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b088      	sub	sp, #32
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	607a      	str	r2, [r7, #4]
 800812e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	461a      	mov	r2, r3
 800813a:	21a5      	movs	r1, #165	; 0xa5
 800813c:	f002 fad6 	bl	800a6ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800814a:	3b01      	subs	r3, #1
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	f023 0307 	bic.w	r3, r3, #7
 8008158:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	f003 0307 	and.w	r3, r3, #7
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00a      	beq.n	800817a <prvInitialiseNewTask+0x58>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	617b      	str	r3, [r7, #20]
}
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800817a:	2300      	movs	r3, #0
 800817c:	61fb      	str	r3, [r7, #28]
 800817e:	e012      	b.n	80081a6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	4413      	add	r3, r2
 8008186:	7819      	ldrb	r1, [r3, #0]
 8008188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	4413      	add	r3, r2
 800818e:	3334      	adds	r3, #52	; 0x34
 8008190:	460a      	mov	r2, r1
 8008192:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	4413      	add	r3, r2
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d006      	beq.n	80081ae <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	3301      	adds	r3, #1
 80081a4:	61fb      	str	r3, [r7, #28]
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	2b0f      	cmp	r3, #15
 80081aa:	d9e9      	bls.n	8008180 <prvInitialiseNewTask+0x5e>
 80081ac:	e000      	b.n	80081b0 <prvInitialiseNewTask+0x8e>
		{
			break;
 80081ae:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	2b37      	cmp	r3, #55	; 0x37
 80081bc:	d901      	bls.n	80081c2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081be:	2337      	movs	r3, #55	; 0x37
 80081c0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081c6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081cc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d0:	2200      	movs	r2, #0
 80081d2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d6:	3304      	adds	r3, #4
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff f94e 	bl	800747a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	3318      	adds	r3, #24
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff f949 	bl	800747a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081fc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	2200      	movs	r2, #0
 8008202:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	68f9      	ldr	r1, [r7, #12]
 8008210:	69b8      	ldr	r0, [r7, #24]
 8008212:	f001 f9df 	bl	80095d4 <pxPortInitialiseStack>
 8008216:	4602      	mov	r2, r0
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800821c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008226:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008228:	bf00      	nop
 800822a:	3720      	adds	r7, #32
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008238:	f001 fac0 	bl	80097bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800823c:	4b2d      	ldr	r3, [pc, #180]	; (80082f4 <prvAddNewTaskToReadyList+0xc4>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3301      	adds	r3, #1
 8008242:	4a2c      	ldr	r2, [pc, #176]	; (80082f4 <prvAddNewTaskToReadyList+0xc4>)
 8008244:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008246:	4b2c      	ldr	r3, [pc, #176]	; (80082f8 <prvAddNewTaskToReadyList+0xc8>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d109      	bne.n	8008262 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800824e:	4a2a      	ldr	r2, [pc, #168]	; (80082f8 <prvAddNewTaskToReadyList+0xc8>)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008254:	4b27      	ldr	r3, [pc, #156]	; (80082f4 <prvAddNewTaskToReadyList+0xc4>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d110      	bne.n	800827e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800825c:	f000 fd06 	bl	8008c6c <prvInitialiseTaskLists>
 8008260:	e00d      	b.n	800827e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008262:	4b26      	ldr	r3, [pc, #152]	; (80082fc <prvAddNewTaskToReadyList+0xcc>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d109      	bne.n	800827e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800826a:	4b23      	ldr	r3, [pc, #140]	; (80082f8 <prvAddNewTaskToReadyList+0xc8>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	429a      	cmp	r2, r3
 8008276:	d802      	bhi.n	800827e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008278:	4a1f      	ldr	r2, [pc, #124]	; (80082f8 <prvAddNewTaskToReadyList+0xc8>)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800827e:	4b20      	ldr	r3, [pc, #128]	; (8008300 <prvAddNewTaskToReadyList+0xd0>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3301      	adds	r3, #1
 8008284:	4a1e      	ldr	r2, [pc, #120]	; (8008300 <prvAddNewTaskToReadyList+0xd0>)
 8008286:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008288:	4b1d      	ldr	r3, [pc, #116]	; (8008300 <prvAddNewTaskToReadyList+0xd0>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008294:	4b1b      	ldr	r3, [pc, #108]	; (8008304 <prvAddNewTaskToReadyList+0xd4>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d903      	bls.n	80082a4 <prvAddNewTaskToReadyList+0x74>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a0:	4a18      	ldr	r2, [pc, #96]	; (8008304 <prvAddNewTaskToReadyList+0xd4>)
 80082a2:	6013      	str	r3, [r2, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a8:	4613      	mov	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4a15      	ldr	r2, [pc, #84]	; (8008308 <prvAddNewTaskToReadyList+0xd8>)
 80082b2:	441a      	add	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f7ff f8e9 	bl	8007492 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082c0:	f001 faac 	bl	800981c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082c4:	4b0d      	ldr	r3, [pc, #52]	; (80082fc <prvAddNewTaskToReadyList+0xcc>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00e      	beq.n	80082ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082cc:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <prvAddNewTaskToReadyList+0xc8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d207      	bcs.n	80082ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082da:	4b0c      	ldr	r3, [pc, #48]	; (800830c <prvAddNewTaskToReadyList+0xdc>)
 80082dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082ea:	bf00      	nop
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20001140 	.word	0x20001140
 80082f8:	20000c6c 	.word	0x20000c6c
 80082fc:	2000114c 	.word	0x2000114c
 8008300:	2000115c 	.word	0x2000115c
 8008304:	20001148 	.word	0x20001148
 8008308:	20000c70 	.word	0x20000c70
 800830c:	e000ed04 	.word	0xe000ed04

08008310 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008318:	f001 fa50 	bl	80097bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d102      	bne.n	8008328 <vTaskDelete+0x18>
 8008322:	4b2c      	ldr	r3, [pc, #176]	; (80083d4 <vTaskDelete+0xc4>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	e000      	b.n	800832a <vTaskDelete+0x1a>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	3304      	adds	r3, #4
 8008330:	4618      	mov	r0, r3
 8008332:	f7ff f909 	bl	8007548 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833a:	2b00      	cmp	r3, #0
 800833c:	d004      	beq.n	8008348 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3318      	adds	r3, #24
 8008342:	4618      	mov	r0, r3
 8008344:	f7ff f900 	bl	8007548 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008348:	4b23      	ldr	r3, [pc, #140]	; (80083d8 <vTaskDelete+0xc8>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3301      	adds	r3, #1
 800834e:	4a22      	ldr	r2, [pc, #136]	; (80083d8 <vTaskDelete+0xc8>)
 8008350:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008352:	4b20      	ldr	r3, [pc, #128]	; (80083d4 <vTaskDelete+0xc4>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	429a      	cmp	r2, r3
 800835a:	d10b      	bne.n	8008374 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3304      	adds	r3, #4
 8008360:	4619      	mov	r1, r3
 8008362:	481e      	ldr	r0, [pc, #120]	; (80083dc <vTaskDelete+0xcc>)
 8008364:	f7ff f895 	bl	8007492 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008368:	4b1d      	ldr	r3, [pc, #116]	; (80083e0 <vTaskDelete+0xd0>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3301      	adds	r3, #1
 800836e:	4a1c      	ldr	r2, [pc, #112]	; (80083e0 <vTaskDelete+0xd0>)
 8008370:	6013      	str	r3, [r2, #0]
 8008372:	e009      	b.n	8008388 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008374:	4b1b      	ldr	r3, [pc, #108]	; (80083e4 <vTaskDelete+0xd4>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3b01      	subs	r3, #1
 800837a:	4a1a      	ldr	r2, [pc, #104]	; (80083e4 <vTaskDelete+0xd4>)
 800837c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 fce2 	bl	8008d48 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008384:	f000 fd10 	bl	8008da8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8008388:	f001 fa48 	bl	800981c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800838c:	4b16      	ldr	r3, [pc, #88]	; (80083e8 <vTaskDelete+0xd8>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d01b      	beq.n	80083cc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8008394:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <vTaskDelete+0xc4>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	429a      	cmp	r2, r3
 800839c:	d116      	bne.n	80083cc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800839e:	4b13      	ldr	r3, [pc, #76]	; (80083ec <vTaskDelete+0xdc>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <vTaskDelete+0xac>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	60bb      	str	r3, [r7, #8]
}
 80083b8:	bf00      	nop
 80083ba:	e7fe      	b.n	80083ba <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80083bc:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <vTaskDelete+0xe0>)
 80083be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083cc:	bf00      	nop
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	20000c6c 	.word	0x20000c6c
 80083d8:	2000115c 	.word	0x2000115c
 80083dc:	20001114 	.word	0x20001114
 80083e0:	20001128 	.word	0x20001128
 80083e4:	20001140 	.word	0x20001140
 80083e8:	2000114c 	.word	0x2000114c
 80083ec:	20001168 	.word	0x20001168
 80083f0:	e000ed04 	.word	0xe000ed04

080083f4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08a      	sub	sp, #40	; 0x28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80083fe:	2300      	movs	r3, #0
 8008400:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10a      	bne.n	800841e <vTaskDelayUntil+0x2a>
	__asm volatile
 8008408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840c:	f383 8811 	msr	BASEPRI, r3
 8008410:	f3bf 8f6f 	isb	sy
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	617b      	str	r3, [r7, #20]
}
 800841a:	bf00      	nop
 800841c:	e7fe      	b.n	800841c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <vTaskDelayUntil+0x46>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	613b      	str	r3, [r7, #16]
}
 8008436:	bf00      	nop
 8008438:	e7fe      	b.n	8008438 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800843a:	4b2a      	ldr	r3, [pc, #168]	; (80084e4 <vTaskDelayUntil+0xf0>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00a      	beq.n	8008458 <vTaskDelayUntil+0x64>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	60fb      	str	r3, [r7, #12]
}
 8008454:	bf00      	nop
 8008456:	e7fe      	b.n	8008456 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008458:	f000 f8e4 	bl	8008624 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800845c:	4b22      	ldr	r3, [pc, #136]	; (80084e8 <vTaskDelayUntil+0xf4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	4413      	add	r3, r2
 800846a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6a3a      	ldr	r2, [r7, #32]
 8008472:	429a      	cmp	r2, r3
 8008474:	d20b      	bcs.n	800848e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	429a      	cmp	r2, r3
 800847e:	d211      	bcs.n	80084a4 <vTaskDelayUntil+0xb0>
 8008480:	69fa      	ldr	r2, [r7, #28]
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	429a      	cmp	r2, r3
 8008486:	d90d      	bls.n	80084a4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008488:	2301      	movs	r3, #1
 800848a:	627b      	str	r3, [r7, #36]	; 0x24
 800848c:	e00a      	b.n	80084a4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	69fa      	ldr	r2, [r7, #28]
 8008494:	429a      	cmp	r2, r3
 8008496:	d303      	bcc.n	80084a0 <vTaskDelayUntil+0xac>
 8008498:	69fa      	ldr	r2, [r7, #28]
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	429a      	cmp	r2, r3
 800849e:	d901      	bls.n	80084a4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80084a0:	2301      	movs	r3, #1
 80084a2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d006      	beq.n	80084be <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80084b0:	69fa      	ldr	r2, [r7, #28]
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	2100      	movs	r1, #0
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 fd25 	bl	8008f08 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80084be:	f000 f8bf 	bl	8008640 <xTaskResumeAll>
 80084c2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d107      	bne.n	80084da <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80084ca:	4b08      	ldr	r3, [pc, #32]	; (80084ec <vTaskDelayUntil+0xf8>)
 80084cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084da:	bf00      	nop
 80084dc:	3728      	adds	r7, #40	; 0x28
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20001168 	.word	0x20001168
 80084e8:	20001144 	.word	0x20001144
 80084ec:	e000ed04 	.word	0xe000ed04

080084f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80084f8:	2300      	movs	r3, #0
 80084fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d017      	beq.n	8008532 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008502:	4b13      	ldr	r3, [pc, #76]	; (8008550 <vTaskDelay+0x60>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <vTaskDelay+0x30>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	60bb      	str	r3, [r7, #8]
}
 800851c:	bf00      	nop
 800851e:	e7fe      	b.n	800851e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008520:	f000 f880 	bl	8008624 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008524:	2100      	movs	r1, #0
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fcee 	bl	8008f08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800852c:	f000 f888 	bl	8008640 <xTaskResumeAll>
 8008530:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d107      	bne.n	8008548 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008538:	4b06      	ldr	r3, [pc, #24]	; (8008554 <vTaskDelay+0x64>)
 800853a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	20001168 	.word	0x20001168
 8008554:	e000ed04 	.word	0xe000ed04

08008558 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08a      	sub	sp, #40	; 0x28
 800855c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800855e:	2300      	movs	r3, #0
 8008560:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008566:	463a      	mov	r2, r7
 8008568:	1d39      	adds	r1, r7, #4
 800856a:	f107 0308 	add.w	r3, r7, #8
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe ff32 	bl	80073d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	9202      	str	r2, [sp, #8]
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	2300      	movs	r3, #0
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	2300      	movs	r3, #0
 8008584:	460a      	mov	r2, r1
 8008586:	4921      	ldr	r1, [pc, #132]	; (800860c <vTaskStartScheduler+0xb4>)
 8008588:	4821      	ldr	r0, [pc, #132]	; (8008610 <vTaskStartScheduler+0xb8>)
 800858a:	f7ff fd29 	bl	8007fe0 <xTaskCreateStatic>
 800858e:	4603      	mov	r3, r0
 8008590:	4a20      	ldr	r2, [pc, #128]	; (8008614 <vTaskStartScheduler+0xbc>)
 8008592:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008594:	4b1f      	ldr	r3, [pc, #124]	; (8008614 <vTaskStartScheduler+0xbc>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800859c:	2301      	movs	r3, #1
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	e001      	b.n	80085a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d102      	bne.n	80085b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80085ac:	f000 fd00 	bl	8008fb0 <xTimerCreateTimerTask>
 80085b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d116      	bne.n	80085e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	613b      	str	r3, [r7, #16]
}
 80085ca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085cc:	4b12      	ldr	r3, [pc, #72]	; (8008618 <vTaskStartScheduler+0xc0>)
 80085ce:	f04f 32ff 	mov.w	r2, #4294967295
 80085d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085d4:	4b11      	ldr	r3, [pc, #68]	; (800861c <vTaskStartScheduler+0xc4>)
 80085d6:	2201      	movs	r2, #1
 80085d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80085da:	4b11      	ldr	r3, [pc, #68]	; (8008620 <vTaskStartScheduler+0xc8>)
 80085dc:	2200      	movs	r2, #0
 80085de:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80085e0:	f001 f87a 	bl	80096d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80085e4:	e00e      	b.n	8008604 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ec:	d10a      	bne.n	8008604 <vTaskStartScheduler+0xac>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	60fb      	str	r3, [r7, #12]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <vTaskStartScheduler+0xaa>
}
 8008604:	bf00      	nop
 8008606:	3718      	adds	r7, #24
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	0800a770 	.word	0x0800a770
 8008610:	08008c3d 	.word	0x08008c3d
 8008614:	20001164 	.word	0x20001164
 8008618:	20001160 	.word	0x20001160
 800861c:	2000114c 	.word	0x2000114c
 8008620:	20001144 	.word	0x20001144

08008624 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008628:	4b04      	ldr	r3, [pc, #16]	; (800863c <vTaskSuspendAll+0x18>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3301      	adds	r3, #1
 800862e:	4a03      	ldr	r2, [pc, #12]	; (800863c <vTaskSuspendAll+0x18>)
 8008630:	6013      	str	r3, [r2, #0]
}
 8008632:	bf00      	nop
 8008634:	46bd      	mov	sp, r7
 8008636:	bc80      	pop	{r7}
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	20001168 	.word	0x20001168

08008640 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008646:	2300      	movs	r3, #0
 8008648:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800864a:	2300      	movs	r3, #0
 800864c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800864e:	4b42      	ldr	r3, [pc, #264]	; (8008758 <xTaskResumeAll+0x118>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10a      	bne.n	800866c <xTaskResumeAll+0x2c>
	__asm volatile
 8008656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	603b      	str	r3, [r7, #0]
}
 8008668:	bf00      	nop
 800866a:	e7fe      	b.n	800866a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800866c:	f001 f8a6 	bl	80097bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008670:	4b39      	ldr	r3, [pc, #228]	; (8008758 <xTaskResumeAll+0x118>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3b01      	subs	r3, #1
 8008676:	4a38      	ldr	r2, [pc, #224]	; (8008758 <xTaskResumeAll+0x118>)
 8008678:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800867a:	4b37      	ldr	r3, [pc, #220]	; (8008758 <xTaskResumeAll+0x118>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d162      	bne.n	8008748 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008682:	4b36      	ldr	r3, [pc, #216]	; (800875c <xTaskResumeAll+0x11c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d05e      	beq.n	8008748 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800868a:	e02f      	b.n	80086ec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800868c:	4b34      	ldr	r3, [pc, #208]	; (8008760 <xTaskResumeAll+0x120>)
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3318      	adds	r3, #24
 8008698:	4618      	mov	r0, r3
 800869a:	f7fe ff55 	bl	8007548 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3304      	adds	r3, #4
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe ff50 	bl	8007548 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ac:	4b2d      	ldr	r3, [pc, #180]	; (8008764 <xTaskResumeAll+0x124>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d903      	bls.n	80086bc <xTaskResumeAll+0x7c>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	4a2a      	ldr	r2, [pc, #168]	; (8008764 <xTaskResumeAll+0x124>)
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c0:	4613      	mov	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4a27      	ldr	r2, [pc, #156]	; (8008768 <xTaskResumeAll+0x128>)
 80086ca:	441a      	add	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3304      	adds	r3, #4
 80086d0:	4619      	mov	r1, r3
 80086d2:	4610      	mov	r0, r2
 80086d4:	f7fe fedd 	bl	8007492 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086dc:	4b23      	ldr	r3, [pc, #140]	; (800876c <xTaskResumeAll+0x12c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d302      	bcc.n	80086ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80086e6:	4b22      	ldr	r3, [pc, #136]	; (8008770 <xTaskResumeAll+0x130>)
 80086e8:	2201      	movs	r2, #1
 80086ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086ec:	4b1c      	ldr	r3, [pc, #112]	; (8008760 <xTaskResumeAll+0x120>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1cb      	bne.n	800868c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80086fa:	f000 fb55 	bl	8008da8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80086fe:	4b1d      	ldr	r3, [pc, #116]	; (8008774 <xTaskResumeAll+0x134>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d010      	beq.n	800872c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800870a:	f000 f845 	bl	8008798 <xTaskIncrementTick>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008714:	4b16      	ldr	r3, [pc, #88]	; (8008770 <xTaskResumeAll+0x130>)
 8008716:	2201      	movs	r2, #1
 8008718:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	3b01      	subs	r3, #1
 800871e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1f1      	bne.n	800870a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008726:	4b13      	ldr	r3, [pc, #76]	; (8008774 <xTaskResumeAll+0x134>)
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800872c:	4b10      	ldr	r3, [pc, #64]	; (8008770 <xTaskResumeAll+0x130>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d009      	beq.n	8008748 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008734:	2301      	movs	r3, #1
 8008736:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008738:	4b0f      	ldr	r3, [pc, #60]	; (8008778 <xTaskResumeAll+0x138>)
 800873a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008748:	f001 f868 	bl	800981c <vPortExitCritical>

	return xAlreadyYielded;
 800874c:	68bb      	ldr	r3, [r7, #8]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20001168 	.word	0x20001168
 800875c:	20001140 	.word	0x20001140
 8008760:	20001100 	.word	0x20001100
 8008764:	20001148 	.word	0x20001148
 8008768:	20000c70 	.word	0x20000c70
 800876c:	20000c6c 	.word	0x20000c6c
 8008770:	20001154 	.word	0x20001154
 8008774:	20001150 	.word	0x20001150
 8008778:	e000ed04 	.word	0xe000ed04

0800877c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008782:	4b04      	ldr	r3, [pc, #16]	; (8008794 <xTaskGetTickCount+0x18>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008788:	687b      	ldr	r3, [r7, #4]
}
 800878a:	4618      	mov	r0, r3
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	bc80      	pop	{r7}
 8008792:	4770      	bx	lr
 8008794:	20001144 	.word	0x20001144

08008798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800879e:	2300      	movs	r3, #0
 80087a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087a2:	4b51      	ldr	r3, [pc, #324]	; (80088e8 <xTaskIncrementTick+0x150>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f040 808e 	bne.w	80088c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087ac:	4b4f      	ldr	r3, [pc, #316]	; (80088ec <xTaskIncrementTick+0x154>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3301      	adds	r3, #1
 80087b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087b4:	4a4d      	ldr	r2, [pc, #308]	; (80088ec <xTaskIncrementTick+0x154>)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d120      	bne.n	8008802 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80087c0:	4b4b      	ldr	r3, [pc, #300]	; (80088f0 <xTaskIncrementTick+0x158>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	603b      	str	r3, [r7, #0]
}
 80087dc:	bf00      	nop
 80087de:	e7fe      	b.n	80087de <xTaskIncrementTick+0x46>
 80087e0:	4b43      	ldr	r3, [pc, #268]	; (80088f0 <xTaskIncrementTick+0x158>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	4b43      	ldr	r3, [pc, #268]	; (80088f4 <xTaskIncrementTick+0x15c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a41      	ldr	r2, [pc, #260]	; (80088f0 <xTaskIncrementTick+0x158>)
 80087ec:	6013      	str	r3, [r2, #0]
 80087ee:	4a41      	ldr	r2, [pc, #260]	; (80088f4 <xTaskIncrementTick+0x15c>)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	4b40      	ldr	r3, [pc, #256]	; (80088f8 <xTaskIncrementTick+0x160>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3301      	adds	r3, #1
 80087fa:	4a3f      	ldr	r2, [pc, #252]	; (80088f8 <xTaskIncrementTick+0x160>)
 80087fc:	6013      	str	r3, [r2, #0]
 80087fe:	f000 fad3 	bl	8008da8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008802:	4b3e      	ldr	r3, [pc, #248]	; (80088fc <xTaskIncrementTick+0x164>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	429a      	cmp	r2, r3
 800880a:	d34e      	bcc.n	80088aa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800880c:	4b38      	ldr	r3, [pc, #224]	; (80088f0 <xTaskIncrementTick+0x158>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <xTaskIncrementTick+0x82>
 8008816:	2301      	movs	r3, #1
 8008818:	e000      	b.n	800881c <xTaskIncrementTick+0x84>
 800881a:	2300      	movs	r3, #0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d004      	beq.n	800882a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008820:	4b36      	ldr	r3, [pc, #216]	; (80088fc <xTaskIncrementTick+0x164>)
 8008822:	f04f 32ff 	mov.w	r2, #4294967295
 8008826:	601a      	str	r2, [r3, #0]
					break;
 8008828:	e03f      	b.n	80088aa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800882a:	4b31      	ldr	r3, [pc, #196]	; (80088f0 <xTaskIncrementTick+0x158>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	429a      	cmp	r2, r3
 8008840:	d203      	bcs.n	800884a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008842:	4a2e      	ldr	r2, [pc, #184]	; (80088fc <xTaskIncrementTick+0x164>)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6013      	str	r3, [r2, #0]
						break;
 8008848:	e02f      	b.n	80088aa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	3304      	adds	r3, #4
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fe7a 	bl	8007548 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008858:	2b00      	cmp	r3, #0
 800885a:	d004      	beq.n	8008866 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	3318      	adds	r3, #24
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe fe71 	bl	8007548 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886a:	4b25      	ldr	r3, [pc, #148]	; (8008900 <xTaskIncrementTick+0x168>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d903      	bls.n	800887a <xTaskIncrementTick+0xe2>
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008876:	4a22      	ldr	r2, [pc, #136]	; (8008900 <xTaskIncrementTick+0x168>)
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800887e:	4613      	mov	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4a1f      	ldr	r2, [pc, #124]	; (8008904 <xTaskIncrementTick+0x16c>)
 8008888:	441a      	add	r2, r3
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	3304      	adds	r3, #4
 800888e:	4619      	mov	r1, r3
 8008890:	4610      	mov	r0, r2
 8008892:	f7fe fdfe 	bl	8007492 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800889a:	4b1b      	ldr	r3, [pc, #108]	; (8008908 <xTaskIncrementTick+0x170>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d3b3      	bcc.n	800880c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80088a4:	2301      	movs	r3, #1
 80088a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088a8:	e7b0      	b.n	800880c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088aa:	4b17      	ldr	r3, [pc, #92]	; (8008908 <xTaskIncrementTick+0x170>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b0:	4914      	ldr	r1, [pc, #80]	; (8008904 <xTaskIncrementTick+0x16c>)
 80088b2:	4613      	mov	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	440b      	add	r3, r1
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d907      	bls.n	80088d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80088c2:	2301      	movs	r3, #1
 80088c4:	617b      	str	r3, [r7, #20]
 80088c6:	e004      	b.n	80088d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80088c8:	4b10      	ldr	r3, [pc, #64]	; (800890c <xTaskIncrementTick+0x174>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	3301      	adds	r3, #1
 80088ce:	4a0f      	ldr	r2, [pc, #60]	; (800890c <xTaskIncrementTick+0x174>)
 80088d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80088d2:	4b0f      	ldr	r3, [pc, #60]	; (8008910 <xTaskIncrementTick+0x178>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80088da:	2301      	movs	r3, #1
 80088dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80088de:	697b      	ldr	r3, [r7, #20]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20001168 	.word	0x20001168
 80088ec:	20001144 	.word	0x20001144
 80088f0:	200010f8 	.word	0x200010f8
 80088f4:	200010fc 	.word	0x200010fc
 80088f8:	20001158 	.word	0x20001158
 80088fc:	20001160 	.word	0x20001160
 8008900:	20001148 	.word	0x20001148
 8008904:	20000c70 	.word	0x20000c70
 8008908:	20000c6c 	.word	0x20000c6c
 800890c:	20001150 	.word	0x20001150
 8008910:	20001154 	.word	0x20001154

08008914 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800891a:	4b27      	ldr	r3, [pc, #156]	; (80089b8 <vTaskSwitchContext+0xa4>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d003      	beq.n	800892a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008922:	4b26      	ldr	r3, [pc, #152]	; (80089bc <vTaskSwitchContext+0xa8>)
 8008924:	2201      	movs	r2, #1
 8008926:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008928:	e041      	b.n	80089ae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800892a:	4b24      	ldr	r3, [pc, #144]	; (80089bc <vTaskSwitchContext+0xa8>)
 800892c:	2200      	movs	r2, #0
 800892e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008930:	4b23      	ldr	r3, [pc, #140]	; (80089c0 <vTaskSwitchContext+0xac>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	60fb      	str	r3, [r7, #12]
 8008936:	e010      	b.n	800895a <vTaskSwitchContext+0x46>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10a      	bne.n	8008954 <vTaskSwitchContext+0x40>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	607b      	str	r3, [r7, #4]
}
 8008950:	bf00      	nop
 8008952:	e7fe      	b.n	8008952 <vTaskSwitchContext+0x3e>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	3b01      	subs	r3, #1
 8008958:	60fb      	str	r3, [r7, #12]
 800895a:	491a      	ldr	r1, [pc, #104]	; (80089c4 <vTaskSwitchContext+0xb0>)
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	440b      	add	r3, r1
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0e4      	beq.n	8008938 <vTaskSwitchContext+0x24>
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	4613      	mov	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4a12      	ldr	r2, [pc, #72]	; (80089c4 <vTaskSwitchContext+0xb0>)
 800897a:	4413      	add	r3, r2
 800897c:	60bb      	str	r3, [r7, #8]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	605a      	str	r2, [r3, #4]
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	3308      	adds	r3, #8
 8008990:	429a      	cmp	r2, r3
 8008992:	d104      	bne.n	800899e <vTaskSwitchContext+0x8a>
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	605a      	str	r2, [r3, #4]
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	4a08      	ldr	r2, [pc, #32]	; (80089c8 <vTaskSwitchContext+0xb4>)
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	4a05      	ldr	r2, [pc, #20]	; (80089c0 <vTaskSwitchContext+0xac>)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6013      	str	r3, [r2, #0]
}
 80089ae:	bf00      	nop
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc80      	pop	{r7}
 80089b6:	4770      	bx	lr
 80089b8:	20001168 	.word	0x20001168
 80089bc:	20001154 	.word	0x20001154
 80089c0:	20001148 	.word	0x20001148
 80089c4:	20000c70 	.word	0x20000c70
 80089c8:	20000c6c 	.word	0x20000c6c

080089cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10a      	bne.n	80089f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80089dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	60fb      	str	r3, [r7, #12]
}
 80089ee:	bf00      	nop
 80089f0:	e7fe      	b.n	80089f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089f2:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <vTaskPlaceOnEventList+0x44>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3318      	adds	r3, #24
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7fe fd6c 	bl	80074d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a00:	2101      	movs	r1, #1
 8008a02:	6838      	ldr	r0, [r7, #0]
 8008a04:	f000 fa80 	bl	8008f08 <prvAddCurrentTaskToDelayedList>
}
 8008a08:	bf00      	nop
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	20000c6c 	.word	0x20000c6c

08008a14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10a      	bne.n	8008a3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	617b      	str	r3, [r7, #20]
}
 8008a38:	bf00      	nop
 8008a3a:	e7fe      	b.n	8008a3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <vTaskPlaceOnEventListRestricted+0x54>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	3318      	adds	r3, #24
 8008a42:	4619      	mov	r1, r3
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f7fe fd24 	bl	8007492 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008a50:	f04f 33ff 	mov.w	r3, #4294967295
 8008a54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a56:	6879      	ldr	r1, [r7, #4]
 8008a58:	68b8      	ldr	r0, [r7, #8]
 8008a5a:	f000 fa55 	bl	8008f08 <prvAddCurrentTaskToDelayedList>
	}
 8008a5e:	bf00      	nop
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20000c6c 	.word	0x20000c6c

08008a6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10a      	bne.n	8008a98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	60fb      	str	r3, [r7, #12]
}
 8008a94:	bf00      	nop
 8008a96:	e7fe      	b.n	8008a96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	3318      	adds	r3, #24
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe fd53 	bl	8007548 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aa2:	4b1e      	ldr	r3, [pc, #120]	; (8008b1c <xTaskRemoveFromEventList+0xb0>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d11d      	bne.n	8008ae6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	3304      	adds	r3, #4
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fd4a 	bl	8007548 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab8:	4b19      	ldr	r3, [pc, #100]	; (8008b20 <xTaskRemoveFromEventList+0xb4>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d903      	bls.n	8008ac8 <xTaskRemoveFromEventList+0x5c>
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac4:	4a16      	ldr	r2, [pc, #88]	; (8008b20 <xTaskRemoveFromEventList+0xb4>)
 8008ac6:	6013      	str	r3, [r2, #0]
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008acc:	4613      	mov	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4a13      	ldr	r2, [pc, #76]	; (8008b24 <xTaskRemoveFromEventList+0xb8>)
 8008ad6:	441a      	add	r2, r3
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	3304      	adds	r3, #4
 8008adc:	4619      	mov	r1, r3
 8008ade:	4610      	mov	r0, r2
 8008ae0:	f7fe fcd7 	bl	8007492 <vListInsertEnd>
 8008ae4:	e005      	b.n	8008af2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	3318      	adds	r3, #24
 8008aea:	4619      	mov	r1, r3
 8008aec:	480e      	ldr	r0, [pc, #56]	; (8008b28 <xTaskRemoveFromEventList+0xbc>)
 8008aee:	f7fe fcd0 	bl	8007492 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af6:	4b0d      	ldr	r3, [pc, #52]	; (8008b2c <xTaskRemoveFromEventList+0xc0>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d905      	bls.n	8008b0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b00:	2301      	movs	r3, #1
 8008b02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b04:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <xTaskRemoveFromEventList+0xc4>)
 8008b06:	2201      	movs	r2, #1
 8008b08:	601a      	str	r2, [r3, #0]
 8008b0a:	e001      	b.n	8008b10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008b10:	697b      	ldr	r3, [r7, #20]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20001168 	.word	0x20001168
 8008b20:	20001148 	.word	0x20001148
 8008b24:	20000c70 	.word	0x20000c70
 8008b28:	20001100 	.word	0x20001100
 8008b2c:	20000c6c 	.word	0x20000c6c
 8008b30:	20001154 	.word	0x20001154

08008b34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b3c:	4b06      	ldr	r3, [pc, #24]	; (8008b58 <vTaskInternalSetTimeOutState+0x24>)
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b44:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <vTaskInternalSetTimeOutState+0x28>)
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	605a      	str	r2, [r3, #4]
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	20001158 	.word	0x20001158
 8008b5c:	20001144 	.word	0x20001144

08008b60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b088      	sub	sp, #32
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10a      	bne.n	8008b86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	613b      	str	r3, [r7, #16]
}
 8008b82:	bf00      	nop
 8008b84:	e7fe      	b.n	8008b84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10a      	bne.n	8008ba2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	60fb      	str	r3, [r7, #12]
}
 8008b9e:	bf00      	nop
 8008ba0:	e7fe      	b.n	8008ba0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008ba2:	f000 fe0b 	bl	80097bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ba6:	4b1d      	ldr	r3, [pc, #116]	; (8008c1c <xTaskCheckForTimeOut+0xbc>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	69ba      	ldr	r2, [r7, #24]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bbe:	d102      	bne.n	8008bc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	61fb      	str	r3, [r7, #28]
 8008bc4:	e023      	b.n	8008c0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	4b15      	ldr	r3, [pc, #84]	; (8008c20 <xTaskCheckForTimeOut+0xc0>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d007      	beq.n	8008be2 <xTaskCheckForTimeOut+0x82>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d302      	bcc.n	8008be2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	61fb      	str	r3, [r7, #28]
 8008be0:	e015      	b.n	8008c0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d20b      	bcs.n	8008c04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	1ad2      	subs	r2, r2, r3
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7ff ff9b 	bl	8008b34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	61fb      	str	r3, [r7, #28]
 8008c02:	e004      	b.n	8008c0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	2200      	movs	r2, #0
 8008c08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c0e:	f000 fe05 	bl	800981c <vPortExitCritical>

	return xReturn;
 8008c12:	69fb      	ldr	r3, [r7, #28]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3720      	adds	r7, #32
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	20001144 	.word	0x20001144
 8008c20:	20001158 	.word	0x20001158

08008c24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c24:	b480      	push	{r7}
 8008c26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c28:	4b03      	ldr	r3, [pc, #12]	; (8008c38 <vTaskMissedYield+0x14>)
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	601a      	str	r2, [r3, #0]
}
 8008c2e:	bf00      	nop
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bc80      	pop	{r7}
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	20001154 	.word	0x20001154

08008c3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c44:	f000 f852 	bl	8008cec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c48:	4b06      	ldr	r3, [pc, #24]	; (8008c64 <prvIdleTask+0x28>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d9f9      	bls.n	8008c44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c50:	4b05      	ldr	r3, [pc, #20]	; (8008c68 <prvIdleTask+0x2c>)
 8008c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c60:	e7f0      	b.n	8008c44 <prvIdleTask+0x8>
 8008c62:	bf00      	nop
 8008c64:	20000c70 	.word	0x20000c70
 8008c68:	e000ed04 	.word	0xe000ed04

08008c6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c72:	2300      	movs	r3, #0
 8008c74:	607b      	str	r3, [r7, #4]
 8008c76:	e00c      	b.n	8008c92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4a12      	ldr	r2, [pc, #72]	; (8008ccc <prvInitialiseTaskLists+0x60>)
 8008c84:	4413      	add	r3, r2
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fe fbd8 	bl	800743c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	607b      	str	r3, [r7, #4]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b37      	cmp	r3, #55	; 0x37
 8008c96:	d9ef      	bls.n	8008c78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c98:	480d      	ldr	r0, [pc, #52]	; (8008cd0 <prvInitialiseTaskLists+0x64>)
 8008c9a:	f7fe fbcf 	bl	800743c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c9e:	480d      	ldr	r0, [pc, #52]	; (8008cd4 <prvInitialiseTaskLists+0x68>)
 8008ca0:	f7fe fbcc 	bl	800743c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ca4:	480c      	ldr	r0, [pc, #48]	; (8008cd8 <prvInitialiseTaskLists+0x6c>)
 8008ca6:	f7fe fbc9 	bl	800743c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008caa:	480c      	ldr	r0, [pc, #48]	; (8008cdc <prvInitialiseTaskLists+0x70>)
 8008cac:	f7fe fbc6 	bl	800743c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008cb0:	480b      	ldr	r0, [pc, #44]	; (8008ce0 <prvInitialiseTaskLists+0x74>)
 8008cb2:	f7fe fbc3 	bl	800743c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008cb6:	4b0b      	ldr	r3, [pc, #44]	; (8008ce4 <prvInitialiseTaskLists+0x78>)
 8008cb8:	4a05      	ldr	r2, [pc, #20]	; (8008cd0 <prvInitialiseTaskLists+0x64>)
 8008cba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008cbc:	4b0a      	ldr	r3, [pc, #40]	; (8008ce8 <prvInitialiseTaskLists+0x7c>)
 8008cbe:	4a05      	ldr	r2, [pc, #20]	; (8008cd4 <prvInitialiseTaskLists+0x68>)
 8008cc0:	601a      	str	r2, [r3, #0]
}
 8008cc2:	bf00      	nop
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	20000c70 	.word	0x20000c70
 8008cd0:	200010d0 	.word	0x200010d0
 8008cd4:	200010e4 	.word	0x200010e4
 8008cd8:	20001100 	.word	0x20001100
 8008cdc:	20001114 	.word	0x20001114
 8008ce0:	2000112c 	.word	0x2000112c
 8008ce4:	200010f8 	.word	0x200010f8
 8008ce8:	200010fc 	.word	0x200010fc

08008cec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cf2:	e019      	b.n	8008d28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008cf4:	f000 fd62 	bl	80097bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008cf8:	4b10      	ldr	r3, [pc, #64]	; (8008d3c <prvCheckTasksWaitingTermination+0x50>)
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	3304      	adds	r3, #4
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fe fc1f 	bl	8007548 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d0a:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <prvCheckTasksWaitingTermination+0x54>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	4a0b      	ldr	r2, [pc, #44]	; (8008d40 <prvCheckTasksWaitingTermination+0x54>)
 8008d12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d14:	4b0b      	ldr	r3, [pc, #44]	; (8008d44 <prvCheckTasksWaitingTermination+0x58>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	4a0a      	ldr	r2, [pc, #40]	; (8008d44 <prvCheckTasksWaitingTermination+0x58>)
 8008d1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d1e:	f000 fd7d 	bl	800981c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f810 	bl	8008d48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d28:	4b06      	ldr	r3, [pc, #24]	; (8008d44 <prvCheckTasksWaitingTermination+0x58>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e1      	bne.n	8008cf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d30:	bf00      	nop
 8008d32:	bf00      	nop
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20001114 	.word	0x20001114
 8008d40:	20001140 	.word	0x20001140
 8008d44:	20001128 	.word	0x20001128

08008d48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d108      	bne.n	8008d6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 fef0 	bl	8009b44 <vPortFree>
				vPortFree( pxTCB );
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 feed 	bl	8009b44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d6a:	e018      	b.n	8008d9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d103      	bne.n	8008d7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fee4 	bl	8009b44 <vPortFree>
	}
 8008d7c:	e00f      	b.n	8008d9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d00a      	beq.n	8008d9e <prvDeleteTCB+0x56>
	__asm volatile
 8008d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	60fb      	str	r3, [r7, #12]
}
 8008d9a:	bf00      	nop
 8008d9c:	e7fe      	b.n	8008d9c <prvDeleteTCB+0x54>
	}
 8008d9e:	bf00      	nop
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dae:	4b0e      	ldr	r3, [pc, #56]	; (8008de8 <prvResetNextTaskUnblockTime+0x40>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <prvResetNextTaskUnblockTime+0x14>
 8008db8:	2301      	movs	r3, #1
 8008dba:	e000      	b.n	8008dbe <prvResetNextTaskUnblockTime+0x16>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d004      	beq.n	8008dcc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008dc2:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <prvResetNextTaskUnblockTime+0x44>)
 8008dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008dca:	e008      	b.n	8008dde <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008dcc:	4b06      	ldr	r3, [pc, #24]	; (8008de8 <prvResetNextTaskUnblockTime+0x40>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	4a04      	ldr	r2, [pc, #16]	; (8008dec <prvResetNextTaskUnblockTime+0x44>)
 8008ddc:	6013      	str	r3, [r2, #0]
}
 8008dde:	bf00      	nop
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bc80      	pop	{r7}
 8008de6:	4770      	bx	lr
 8008de8:	200010f8 	.word	0x200010f8
 8008dec:	20001160 	.word	0x20001160

08008df0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008df6:	4b0b      	ldr	r3, [pc, #44]	; (8008e24 <xTaskGetSchedulerState+0x34>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d102      	bne.n	8008e04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	607b      	str	r3, [r7, #4]
 8008e02:	e008      	b.n	8008e16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e04:	4b08      	ldr	r3, [pc, #32]	; (8008e28 <xTaskGetSchedulerState+0x38>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d102      	bne.n	8008e12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	607b      	str	r3, [r7, #4]
 8008e10:	e001      	b.n	8008e16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e12:	2300      	movs	r3, #0
 8008e14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e16:	687b      	ldr	r3, [r7, #4]
	}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bc80      	pop	{r7}
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	2000114c 	.word	0x2000114c
 8008e28:	20001168 	.word	0x20001168

08008e2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b086      	sub	sp, #24
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d056      	beq.n	8008ef0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e42:	4b2e      	ldr	r3, [pc, #184]	; (8008efc <xTaskPriorityDisinherit+0xd0>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d00a      	beq.n	8008e62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	60fb      	str	r3, [r7, #12]
}
 8008e5e:	bf00      	nop
 8008e60:	e7fe      	b.n	8008e60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10a      	bne.n	8008e80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	60bb      	str	r3, [r7, #8]
}
 8008e7c:	bf00      	nop
 8008e7e:	e7fe      	b.n	8008e7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e84:	1e5a      	subs	r2, r3, #1
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d02c      	beq.n	8008ef0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d128      	bne.n	8008ef0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fe fb50 	bl	8007548 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec0:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <xTaskPriorityDisinherit+0xd4>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d903      	bls.n	8008ed0 <xTaskPriorityDisinherit+0xa4>
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ecc:	4a0c      	ldr	r2, [pc, #48]	; (8008f00 <xTaskPriorityDisinherit+0xd4>)
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4a09      	ldr	r2, [pc, #36]	; (8008f04 <xTaskPriorityDisinherit+0xd8>)
 8008ede:	441a      	add	r2, r3
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	4610      	mov	r0, r2
 8008ee8:	f7fe fad3 	bl	8007492 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008eec:	2301      	movs	r3, #1
 8008eee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ef0:	697b      	ldr	r3, [r7, #20]
	}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000c6c 	.word	0x20000c6c
 8008f00:	20001148 	.word	0x20001148
 8008f04:	20000c70 	.word	0x20000c70

08008f08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f12:	4b21      	ldr	r3, [pc, #132]	; (8008f98 <prvAddCurrentTaskToDelayedList+0x90>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f18:	4b20      	ldr	r3, [pc, #128]	; (8008f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe fb12 	bl	8007548 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2a:	d10a      	bne.n	8008f42 <prvAddCurrentTaskToDelayedList+0x3a>
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d007      	beq.n	8008f42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f32:	4b1a      	ldr	r3, [pc, #104]	; (8008f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3304      	adds	r3, #4
 8008f38:	4619      	mov	r1, r3
 8008f3a:	4819      	ldr	r0, [pc, #100]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008f3c:	f7fe faa9 	bl	8007492 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f40:	e026      	b.n	8008f90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4413      	add	r3, r2
 8008f48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f4a:	4b14      	ldr	r3, [pc, #80]	; (8008f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d209      	bcs.n	8008f6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f5a:	4b12      	ldr	r3, [pc, #72]	; (8008fa4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	4b0f      	ldr	r3, [pc, #60]	; (8008f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3304      	adds	r3, #4
 8008f64:	4619      	mov	r1, r3
 8008f66:	4610      	mov	r0, r2
 8008f68:	f7fe fab6 	bl	80074d8 <vListInsert>
}
 8008f6c:	e010      	b.n	8008f90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f6e:	4b0e      	ldr	r3, [pc, #56]	; (8008fa8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	4b0a      	ldr	r3, [pc, #40]	; (8008f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3304      	adds	r3, #4
 8008f78:	4619      	mov	r1, r3
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	f7fe faac 	bl	80074d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f80:	4b0a      	ldr	r3, [pc, #40]	; (8008fac <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d202      	bcs.n	8008f90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f8a:	4a08      	ldr	r2, [pc, #32]	; (8008fac <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	6013      	str	r3, [r2, #0]
}
 8008f90:	bf00      	nop
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	20001144 	.word	0x20001144
 8008f9c:	20000c6c 	.word	0x20000c6c
 8008fa0:	2000112c 	.word	0x2000112c
 8008fa4:	200010fc 	.word	0x200010fc
 8008fa8:	200010f8 	.word	0x200010f8
 8008fac:	20001160 	.word	0x20001160

08008fb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08a      	sub	sp, #40	; 0x28
 8008fb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008fba:	f000 facb 	bl	8009554 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008fbe:	4b1c      	ldr	r3, [pc, #112]	; (8009030 <xTimerCreateTimerTask+0x80>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d021      	beq.n	800900a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008fce:	1d3a      	adds	r2, r7, #4
 8008fd0:	f107 0108 	add.w	r1, r7, #8
 8008fd4:	f107 030c 	add.w	r3, r7, #12
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe fa15 	bl	8007408 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008fde:	6879      	ldr	r1, [r7, #4]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	9202      	str	r2, [sp, #8]
 8008fe6:	9301      	str	r3, [sp, #4]
 8008fe8:	2302      	movs	r3, #2
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	2300      	movs	r3, #0
 8008fee:	460a      	mov	r2, r1
 8008ff0:	4910      	ldr	r1, [pc, #64]	; (8009034 <xTimerCreateTimerTask+0x84>)
 8008ff2:	4811      	ldr	r0, [pc, #68]	; (8009038 <xTimerCreateTimerTask+0x88>)
 8008ff4:	f7fe fff4 	bl	8007fe0 <xTaskCreateStatic>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	4a10      	ldr	r2, [pc, #64]	; (800903c <xTimerCreateTimerTask+0x8c>)
 8008ffc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008ffe:	4b0f      	ldr	r3, [pc, #60]	; (800903c <xTimerCreateTimerTask+0x8c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009006:	2301      	movs	r3, #1
 8009008:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10a      	bne.n	8009026 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	613b      	str	r3, [r7, #16]
}
 8009022:	bf00      	nop
 8009024:	e7fe      	b.n	8009024 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009026:	697b      	ldr	r3, [r7, #20]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3718      	adds	r7, #24
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	2000119c 	.word	0x2000119c
 8009034:	0800a778 	.word	0x0800a778
 8009038:	0800915d 	.word	0x0800915d
 800903c:	200011a0 	.word	0x200011a0

08009040 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b08a      	sub	sp, #40	; 0x28
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
 800904c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800904e:	2300      	movs	r3, #0
 8009050:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10a      	bne.n	800906e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	623b      	str	r3, [r7, #32]
}
 800906a:	bf00      	nop
 800906c:	e7fe      	b.n	800906c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800906e:	4b1a      	ldr	r3, [pc, #104]	; (80090d8 <xTimerGenericCommand+0x98>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d02a      	beq.n	80090cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	2b05      	cmp	r3, #5
 8009086:	dc18      	bgt.n	80090ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009088:	f7ff feb2 	bl	8008df0 <xTaskGetSchedulerState>
 800908c:	4603      	mov	r3, r0
 800908e:	2b02      	cmp	r3, #2
 8009090:	d109      	bne.n	80090a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009092:	4b11      	ldr	r3, [pc, #68]	; (80090d8 <xTimerGenericCommand+0x98>)
 8009094:	6818      	ldr	r0, [r3, #0]
 8009096:	f107 0110 	add.w	r1, r7, #16
 800909a:	2300      	movs	r3, #0
 800909c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800909e:	f7fe fbbd 	bl	800781c <xQueueGenericSend>
 80090a2:	6278      	str	r0, [r7, #36]	; 0x24
 80090a4:	e012      	b.n	80090cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80090a6:	4b0c      	ldr	r3, [pc, #48]	; (80090d8 <xTimerGenericCommand+0x98>)
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	f107 0110 	add.w	r1, r7, #16
 80090ae:	2300      	movs	r3, #0
 80090b0:	2200      	movs	r2, #0
 80090b2:	f7fe fbb3 	bl	800781c <xQueueGenericSend>
 80090b6:	6278      	str	r0, [r7, #36]	; 0x24
 80090b8:	e008      	b.n	80090cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80090ba:	4b07      	ldr	r3, [pc, #28]	; (80090d8 <xTimerGenericCommand+0x98>)
 80090bc:	6818      	ldr	r0, [r3, #0]
 80090be:	f107 0110 	add.w	r1, r7, #16
 80090c2:	2300      	movs	r3, #0
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	f7fe fca7 	bl	8007a18 <xQueueGenericSendFromISR>
 80090ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3728      	adds	r7, #40	; 0x28
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	2000119c 	.word	0x2000119c

080090dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af02      	add	r7, sp, #8
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090e6:	4b1c      	ldr	r3, [pc, #112]	; (8009158 <prvProcessExpiredTimer+0x7c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	3304      	adds	r3, #4
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe fa27 	bl	8007548 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	69db      	ldr	r3, [r3, #28]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d122      	bne.n	8009148 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	699a      	ldr	r2, [r3, #24]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	18d1      	adds	r1, r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	6978      	ldr	r0, [r7, #20]
 8009110:	f000 f8c8 	bl	80092a4 <prvInsertTimerInActiveList>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d016      	beq.n	8009148 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800911a:	2300      	movs	r3, #0
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	2300      	movs	r3, #0
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	2100      	movs	r1, #0
 8009124:	6978      	ldr	r0, [r7, #20]
 8009126:	f7ff ff8b 	bl	8009040 <xTimerGenericCommand>
 800912a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10a      	bne.n	8009148 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	60fb      	str	r3, [r7, #12]
}
 8009144:	bf00      	nop
 8009146:	e7fe      	b.n	8009146 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	6978      	ldr	r0, [r7, #20]
 800914e:	4798      	blx	r3
}
 8009150:	bf00      	nop
 8009152:	3718      	adds	r7, #24
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	20001194 	.word	0x20001194

0800915c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009164:	f107 0308 	add.w	r3, r7, #8
 8009168:	4618      	mov	r0, r3
 800916a:	f000 f857 	bl	800921c <prvGetNextExpireTime>
 800916e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	4619      	mov	r1, r3
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 f803 	bl	8009180 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800917a:	f000 f8d5 	bl	8009328 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800917e:	e7f1      	b.n	8009164 <prvTimerTask+0x8>

08009180 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800918a:	f7ff fa4b 	bl	8008624 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800918e:	f107 0308 	add.w	r3, r7, #8
 8009192:	4618      	mov	r0, r3
 8009194:	f000 f866 	bl	8009264 <prvSampleTimeNow>
 8009198:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d130      	bne.n	8009202 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10a      	bne.n	80091bc <prvProcessTimerOrBlockTask+0x3c>
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d806      	bhi.n	80091bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80091ae:	f7ff fa47 	bl	8008640 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80091b2:	68f9      	ldr	r1, [r7, #12]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7ff ff91 	bl	80090dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80091ba:	e024      	b.n	8009206 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d008      	beq.n	80091d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80091c2:	4b13      	ldr	r3, [pc, #76]	; (8009210 <prvProcessTimerOrBlockTask+0x90>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	bf0c      	ite	eq
 80091cc:	2301      	moveq	r3, #1
 80091ce:	2300      	movne	r3, #0
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80091d4:	4b0f      	ldr	r3, [pc, #60]	; (8009214 <prvProcessTimerOrBlockTask+0x94>)
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	4619      	mov	r1, r3
 80091e2:	f7fe fec9 	bl	8007f78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80091e6:	f7ff fa2b 	bl	8008640 <xTaskResumeAll>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10a      	bne.n	8009206 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80091f0:	4b09      	ldr	r3, [pc, #36]	; (8009218 <prvProcessTimerOrBlockTask+0x98>)
 80091f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091f6:	601a      	str	r2, [r3, #0]
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	f3bf 8f6f 	isb	sy
}
 8009200:	e001      	b.n	8009206 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009202:	f7ff fa1d 	bl	8008640 <xTaskResumeAll>
}
 8009206:	bf00      	nop
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20001198 	.word	0x20001198
 8009214:	2000119c 	.word	0x2000119c
 8009218:	e000ed04 	.word	0xe000ed04

0800921c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009224:	4b0e      	ldr	r3, [pc, #56]	; (8009260 <prvGetNextExpireTime+0x44>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	bf0c      	ite	eq
 800922e:	2301      	moveq	r3, #1
 8009230:	2300      	movne	r3, #0
 8009232:	b2db      	uxtb	r3, r3
 8009234:	461a      	mov	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d105      	bne.n	800924e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009242:	4b07      	ldr	r3, [pc, #28]	; (8009260 <prvGetNextExpireTime+0x44>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	e001      	b.n	8009252 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800924e:	2300      	movs	r3, #0
 8009250:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009252:	68fb      	ldr	r3, [r7, #12]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	bc80      	pop	{r7}
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	20001194 	.word	0x20001194

08009264 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800926c:	f7ff fa86 	bl	800877c <xTaskGetTickCount>
 8009270:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009272:	4b0b      	ldr	r3, [pc, #44]	; (80092a0 <prvSampleTimeNow+0x3c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	429a      	cmp	r2, r3
 800927a:	d205      	bcs.n	8009288 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800927c:	f000 f908 	bl	8009490 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	e002      	b.n	800928e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800928e:	4a04      	ldr	r2, [pc, #16]	; (80092a0 <prvSampleTimeNow+0x3c>)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009294:	68fb      	ldr	r3, [r7, #12]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	200011a4 	.word	0x200011a4

080092a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
 80092b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80092b2:	2300      	movs	r3, #0
 80092b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d812      	bhi.n	80092f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	1ad2      	subs	r2, r2, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d302      	bcc.n	80092de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80092d8:	2301      	movs	r3, #1
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	e01b      	b.n	8009316 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80092de:	4b10      	ldr	r3, [pc, #64]	; (8009320 <prvInsertTimerInActiveList+0x7c>)
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3304      	adds	r3, #4
 80092e6:	4619      	mov	r1, r3
 80092e8:	4610      	mov	r0, r2
 80092ea:	f7fe f8f5 	bl	80074d8 <vListInsert>
 80092ee:	e012      	b.n	8009316 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d206      	bcs.n	8009306 <prvInsertTimerInActiveList+0x62>
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d302      	bcc.n	8009306 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009300:	2301      	movs	r3, #1
 8009302:	617b      	str	r3, [r7, #20]
 8009304:	e007      	b.n	8009316 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009306:	4b07      	ldr	r3, [pc, #28]	; (8009324 <prvInsertTimerInActiveList+0x80>)
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3304      	adds	r3, #4
 800930e:	4619      	mov	r1, r3
 8009310:	4610      	mov	r0, r2
 8009312:	f7fe f8e1 	bl	80074d8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009316:	697b      	ldr	r3, [r7, #20]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3718      	adds	r7, #24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	20001198 	.word	0x20001198
 8009324:	20001194 	.word	0x20001194

08009328 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08e      	sub	sp, #56	; 0x38
 800932c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800932e:	e09d      	b.n	800946c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	da18      	bge.n	8009368 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009336:	1d3b      	adds	r3, r7, #4
 8009338:	3304      	adds	r3, #4
 800933a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800933c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10a      	bne.n	8009358 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	61fb      	str	r3, [r7, #28]
}
 8009354:	bf00      	nop
 8009356:	e7fe      	b.n	8009356 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800935e:	6850      	ldr	r0, [r2, #4]
 8009360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009362:	6892      	ldr	r2, [r2, #8]
 8009364:	4611      	mov	r1, r2
 8009366:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	db7d      	blt.n	800946a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d004      	beq.n	8009384 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937c:	3304      	adds	r3, #4
 800937e:	4618      	mov	r0, r3
 8009380:	f7fe f8e2 	bl	8007548 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009384:	463b      	mov	r3, r7
 8009386:	4618      	mov	r0, r3
 8009388:	f7ff ff6c 	bl	8009264 <prvSampleTimeNow>
 800938c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b09      	cmp	r3, #9
 8009392:	d86b      	bhi.n	800946c <prvProcessReceivedCommands+0x144>
 8009394:	a201      	add	r2, pc, #4	; (adr r2, 800939c <prvProcessReceivedCommands+0x74>)
 8009396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939a:	bf00      	nop
 800939c:	080093c5 	.word	0x080093c5
 80093a0:	080093c5 	.word	0x080093c5
 80093a4:	080093c5 	.word	0x080093c5
 80093a8:	0800946d 	.word	0x0800946d
 80093ac:	08009421 	.word	0x08009421
 80093b0:	08009459 	.word	0x08009459
 80093b4:	080093c5 	.word	0x080093c5
 80093b8:	080093c5 	.word	0x080093c5
 80093bc:	0800946d 	.word	0x0800946d
 80093c0:	08009421 	.word	0x08009421
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	18d1      	adds	r1, r2, r3
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093d2:	f7ff ff67 	bl	80092a4 <prvInsertTimerInActiveList>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d047      	beq.n	800946c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80093e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d13f      	bne.n	800946c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	441a      	add	r2, r3
 80093f4:	2300      	movs	r3, #0
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	2300      	movs	r3, #0
 80093fa:	2100      	movs	r1, #0
 80093fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093fe:	f7ff fe1f 	bl	8009040 <xTimerGenericCommand>
 8009402:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009404:	6a3b      	ldr	r3, [r7, #32]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d130      	bne.n	800946c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	61bb      	str	r3, [r7, #24]
}
 800941c:	bf00      	nop
 800941e:	e7fe      	b.n	800941e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009424:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10a      	bne.n	8009444 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	617b      	str	r3, [r7, #20]
}
 8009440:	bf00      	nop
 8009442:	e7fe      	b.n	8009442 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	699a      	ldr	r2, [r3, #24]
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	18d1      	adds	r1, r2, r3
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009452:	f7ff ff27 	bl	80092a4 <prvInsertTimerInActiveList>
					break;
 8009456:	e009      	b.n	800946c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d104      	bne.n	800946c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8009462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009464:	f000 fb6e 	bl	8009b44 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009468:	e000      	b.n	800946c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800946a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800946c:	4b07      	ldr	r3, [pc, #28]	; (800948c <prvProcessReceivedCommands+0x164>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	1d39      	adds	r1, r7, #4
 8009472:	2200      	movs	r2, #0
 8009474:	4618      	mov	r0, r3
 8009476:	f7fe fb67 	bl	8007b48 <xQueueReceive>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	f47f af57 	bne.w	8009330 <prvProcessReceivedCommands+0x8>
	}
}
 8009482:	bf00      	nop
 8009484:	bf00      	nop
 8009486:	3730      	adds	r7, #48	; 0x30
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	2000119c 	.word	0x2000119c

08009490 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b088      	sub	sp, #32
 8009494:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009496:	e045      	b.n	8009524 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009498:	4b2c      	ldr	r3, [pc, #176]	; (800954c <prvSwitchTimerLists+0xbc>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094a2:	4b2a      	ldr	r3, [pc, #168]	; (800954c <prvSwitchTimerLists+0xbc>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3304      	adds	r3, #4
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fe f849 	bl	8007548 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d12e      	bne.n	8009524 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	4413      	add	r3, r2
 80094ce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d90e      	bls.n	80094f6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094e4:	4b19      	ldr	r3, [pc, #100]	; (800954c <prvSwitchTimerLists+0xbc>)
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	3304      	adds	r3, #4
 80094ec:	4619      	mov	r1, r3
 80094ee:	4610      	mov	r0, r2
 80094f0:	f7fd fff2 	bl	80074d8 <vListInsert>
 80094f4:	e016      	b.n	8009524 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094f6:	2300      	movs	r3, #0
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	2300      	movs	r3, #0
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	2100      	movs	r1, #0
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f7ff fd9d 	bl	8009040 <xTimerGenericCommand>
 8009506:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10a      	bne.n	8009524 <prvSwitchTimerLists+0x94>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	603b      	str	r3, [r7, #0]
}
 8009520:	bf00      	nop
 8009522:	e7fe      	b.n	8009522 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009524:	4b09      	ldr	r3, [pc, #36]	; (800954c <prvSwitchTimerLists+0xbc>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1b4      	bne.n	8009498 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800952e:	4b07      	ldr	r3, [pc, #28]	; (800954c <prvSwitchTimerLists+0xbc>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009534:	4b06      	ldr	r3, [pc, #24]	; (8009550 <prvSwitchTimerLists+0xc0>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a04      	ldr	r2, [pc, #16]	; (800954c <prvSwitchTimerLists+0xbc>)
 800953a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800953c:	4a04      	ldr	r2, [pc, #16]	; (8009550 <prvSwitchTimerLists+0xc0>)
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	6013      	str	r3, [r2, #0]
}
 8009542:	bf00      	nop
 8009544:	3718      	adds	r7, #24
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20001194 	.word	0x20001194
 8009550:	20001198 	.word	0x20001198

08009554 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800955a:	f000 f92f 	bl	80097bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800955e:	4b15      	ldr	r3, [pc, #84]	; (80095b4 <prvCheckForValidListAndQueue+0x60>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d120      	bne.n	80095a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009566:	4814      	ldr	r0, [pc, #80]	; (80095b8 <prvCheckForValidListAndQueue+0x64>)
 8009568:	f7fd ff68 	bl	800743c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800956c:	4813      	ldr	r0, [pc, #76]	; (80095bc <prvCheckForValidListAndQueue+0x68>)
 800956e:	f7fd ff65 	bl	800743c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009572:	4b13      	ldr	r3, [pc, #76]	; (80095c0 <prvCheckForValidListAndQueue+0x6c>)
 8009574:	4a10      	ldr	r2, [pc, #64]	; (80095b8 <prvCheckForValidListAndQueue+0x64>)
 8009576:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009578:	4b12      	ldr	r3, [pc, #72]	; (80095c4 <prvCheckForValidListAndQueue+0x70>)
 800957a:	4a10      	ldr	r2, [pc, #64]	; (80095bc <prvCheckForValidListAndQueue+0x68>)
 800957c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800957e:	2300      	movs	r3, #0
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	4b11      	ldr	r3, [pc, #68]	; (80095c8 <prvCheckForValidListAndQueue+0x74>)
 8009584:	4a11      	ldr	r2, [pc, #68]	; (80095cc <prvCheckForValidListAndQueue+0x78>)
 8009586:	2110      	movs	r1, #16
 8009588:	200a      	movs	r0, #10
 800958a:	f7fe f86f 	bl	800766c <xQueueGenericCreateStatic>
 800958e:	4603      	mov	r3, r0
 8009590:	4a08      	ldr	r2, [pc, #32]	; (80095b4 <prvCheckForValidListAndQueue+0x60>)
 8009592:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009594:	4b07      	ldr	r3, [pc, #28]	; (80095b4 <prvCheckForValidListAndQueue+0x60>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800959c:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <prvCheckForValidListAndQueue+0x60>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	490b      	ldr	r1, [pc, #44]	; (80095d0 <prvCheckForValidListAndQueue+0x7c>)
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe fcc0 	bl	8007f28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095a8:	f000 f938 	bl	800981c <vPortExitCritical>
}
 80095ac:	bf00      	nop
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	2000119c 	.word	0x2000119c
 80095b8:	2000116c 	.word	0x2000116c
 80095bc:	20001180 	.word	0x20001180
 80095c0:	20001194 	.word	0x20001194
 80095c4:	20001198 	.word	0x20001198
 80095c8:	20001248 	.word	0x20001248
 80095cc:	200011a8 	.word	0x200011a8
 80095d0:	0800a780 	.word	0x0800a780

080095d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	3b04      	subs	r3, #4
 80095e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3b04      	subs	r3, #4
 80095f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	f023 0201 	bic.w	r2, r3, #1
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3b04      	subs	r3, #4
 8009602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009604:	4a08      	ldr	r2, [pc, #32]	; (8009628 <pxPortInitialiseStack+0x54>)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3b14      	subs	r3, #20
 800960e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3b20      	subs	r3, #32
 800961a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800961c:	68fb      	ldr	r3, [r7, #12]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	bc80      	pop	{r7}
 8009626:	4770      	bx	lr
 8009628:	0800962d 	.word	0x0800962d

0800962c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009632:	2300      	movs	r3, #0
 8009634:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009636:	4b12      	ldr	r3, [pc, #72]	; (8009680 <prvTaskExitError+0x54>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963e:	d00a      	beq.n	8009656 <prvTaskExitError+0x2a>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	60fb      	str	r3, [r7, #12]
}
 8009652:	bf00      	nop
 8009654:	e7fe      	b.n	8009654 <prvTaskExitError+0x28>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	60bb      	str	r3, [r7, #8]
}
 8009668:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800966a:	bf00      	nop
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0fc      	beq.n	800966c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009672:	bf00      	nop
 8009674:	bf00      	nop
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	bc80      	pop	{r7}
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	2000011c 	.word	0x2000011c
	...

08009690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009690:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <pxCurrentTCBConst2>)
 8009692:	6819      	ldr	r1, [r3, #0]
 8009694:	6808      	ldr	r0, [r1, #0]
 8009696:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800969a:	f380 8809 	msr	PSP, r0
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f04f 0000 	mov.w	r0, #0
 80096a6:	f380 8811 	msr	BASEPRI, r0
 80096aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80096ae:	4770      	bx	lr

080096b0 <pxCurrentTCBConst2>:
 80096b0:	20000c6c 	.word	0x20000c6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop

080096b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80096b8:	4806      	ldr	r0, [pc, #24]	; (80096d4 <prvPortStartFirstTask+0x1c>)
 80096ba:	6800      	ldr	r0, [r0, #0]
 80096bc:	6800      	ldr	r0, [r0, #0]
 80096be:	f380 8808 	msr	MSP, r0
 80096c2:	b662      	cpsie	i
 80096c4:	b661      	cpsie	f
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	f3bf 8f6f 	isb	sy
 80096ce:	df00      	svc	0
 80096d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096d2:	bf00      	nop
 80096d4:	e000ed08 	.word	0xe000ed08

080096d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80096de:	4b32      	ldr	r3, [pc, #200]	; (80097a8 <xPortStartScheduler+0xd0>)
 80096e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	22ff      	movs	r2, #255	; 0xff
 80096ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80096f8:	78fb      	ldrb	r3, [r7, #3]
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009700:	b2da      	uxtb	r2, r3
 8009702:	4b2a      	ldr	r3, [pc, #168]	; (80097ac <xPortStartScheduler+0xd4>)
 8009704:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009706:	4b2a      	ldr	r3, [pc, #168]	; (80097b0 <xPortStartScheduler+0xd8>)
 8009708:	2207      	movs	r2, #7
 800970a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800970c:	e009      	b.n	8009722 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800970e:	4b28      	ldr	r3, [pc, #160]	; (80097b0 <xPortStartScheduler+0xd8>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3b01      	subs	r3, #1
 8009714:	4a26      	ldr	r2, [pc, #152]	; (80097b0 <xPortStartScheduler+0xd8>)
 8009716:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009718:	78fb      	ldrb	r3, [r7, #3]
 800971a:	b2db      	uxtb	r3, r3
 800971c:	005b      	lsls	r3, r3, #1
 800971e:	b2db      	uxtb	r3, r3
 8009720:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009722:	78fb      	ldrb	r3, [r7, #3]
 8009724:	b2db      	uxtb	r3, r3
 8009726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800972a:	2b80      	cmp	r3, #128	; 0x80
 800972c:	d0ef      	beq.n	800970e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800972e:	4b20      	ldr	r3, [pc, #128]	; (80097b0 <xPortStartScheduler+0xd8>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f1c3 0307 	rsb	r3, r3, #7
 8009736:	2b04      	cmp	r3, #4
 8009738:	d00a      	beq.n	8009750 <xPortStartScheduler+0x78>
	__asm volatile
 800973a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	60bb      	str	r3, [r7, #8]
}
 800974c:	bf00      	nop
 800974e:	e7fe      	b.n	800974e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009750:	4b17      	ldr	r3, [pc, #92]	; (80097b0 <xPortStartScheduler+0xd8>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	021b      	lsls	r3, r3, #8
 8009756:	4a16      	ldr	r2, [pc, #88]	; (80097b0 <xPortStartScheduler+0xd8>)
 8009758:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800975a:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <xPortStartScheduler+0xd8>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009762:	4a13      	ldr	r2, [pc, #76]	; (80097b0 <xPortStartScheduler+0xd8>)
 8009764:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	b2da      	uxtb	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800976e:	4b11      	ldr	r3, [pc, #68]	; (80097b4 <xPortStartScheduler+0xdc>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a10      	ldr	r2, [pc, #64]	; (80097b4 <xPortStartScheduler+0xdc>)
 8009774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009778:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800977a:	4b0e      	ldr	r3, [pc, #56]	; (80097b4 <xPortStartScheduler+0xdc>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a0d      	ldr	r2, [pc, #52]	; (80097b4 <xPortStartScheduler+0xdc>)
 8009780:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009784:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009786:	f000 f8b9 	bl	80098fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800978a:	4b0b      	ldr	r3, [pc, #44]	; (80097b8 <xPortStartScheduler+0xe0>)
 800978c:	2200      	movs	r2, #0
 800978e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009790:	f7ff ff92 	bl	80096b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009794:	f7ff f8be 	bl	8008914 <vTaskSwitchContext>
	prvTaskExitError();
 8009798:	f7ff ff48 	bl	800962c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	e000e400 	.word	0xe000e400
 80097ac:	20001298 	.word	0x20001298
 80097b0:	2000129c 	.word	0x2000129c
 80097b4:	e000ed20 	.word	0xe000ed20
 80097b8:	2000011c 	.word	0x2000011c

080097bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	607b      	str	r3, [r7, #4]
}
 80097d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80097d6:	4b0f      	ldr	r3, [pc, #60]	; (8009814 <vPortEnterCritical+0x58>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3301      	adds	r3, #1
 80097dc:	4a0d      	ldr	r2, [pc, #52]	; (8009814 <vPortEnterCritical+0x58>)
 80097de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80097e0:	4b0c      	ldr	r3, [pc, #48]	; (8009814 <vPortEnterCritical+0x58>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d10f      	bne.n	8009808 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80097e8:	4b0b      	ldr	r3, [pc, #44]	; (8009818 <vPortEnterCritical+0x5c>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00a      	beq.n	8009808 <vPortEnterCritical+0x4c>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	603b      	str	r3, [r7, #0]
}
 8009804:	bf00      	nop
 8009806:	e7fe      	b.n	8009806 <vPortEnterCritical+0x4a>
	}
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	bc80      	pop	{r7}
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	2000011c 	.word	0x2000011c
 8009818:	e000ed04 	.word	0xe000ed04

0800981c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009822:	4b11      	ldr	r3, [pc, #68]	; (8009868 <vPortExitCritical+0x4c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10a      	bne.n	8009840 <vPortExitCritical+0x24>
	__asm volatile
 800982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	607b      	str	r3, [r7, #4]
}
 800983c:	bf00      	nop
 800983e:	e7fe      	b.n	800983e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009840:	4b09      	ldr	r3, [pc, #36]	; (8009868 <vPortExitCritical+0x4c>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3b01      	subs	r3, #1
 8009846:	4a08      	ldr	r2, [pc, #32]	; (8009868 <vPortExitCritical+0x4c>)
 8009848:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800984a:	4b07      	ldr	r3, [pc, #28]	; (8009868 <vPortExitCritical+0x4c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d105      	bne.n	800985e <vPortExitCritical+0x42>
 8009852:	2300      	movs	r3, #0
 8009854:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	f383 8811 	msr	BASEPRI, r3
}
 800985c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800985e:	bf00      	nop
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	bc80      	pop	{r7}
 8009866:	4770      	bx	lr
 8009868:	2000011c 	.word	0x2000011c
 800986c:	00000000 	.word	0x00000000

08009870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009870:	f3ef 8009 	mrs	r0, PSP
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	4b0d      	ldr	r3, [pc, #52]	; (80098b0 <pxCurrentTCBConst>)
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009880:	6010      	str	r0, [r2, #0]
 8009882:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009886:	f04f 0050 	mov.w	r0, #80	; 0x50
 800988a:	f380 8811 	msr	BASEPRI, r0
 800988e:	f7ff f841 	bl	8008914 <vTaskSwitchContext>
 8009892:	f04f 0000 	mov.w	r0, #0
 8009896:	f380 8811 	msr	BASEPRI, r0
 800989a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800989e:	6819      	ldr	r1, [r3, #0]
 80098a0:	6808      	ldr	r0, [r1, #0]
 80098a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80098a6:	f380 8809 	msr	PSP, r0
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	4770      	bx	lr

080098b0 <pxCurrentTCBConst>:
 80098b0:	20000c6c 	.word	0x20000c6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80098b4:	bf00      	nop
 80098b6:	bf00      	nop

080098b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	607b      	str	r3, [r7, #4]
}
 80098d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80098d2:	f7fe ff61 	bl	8008798 <xTaskIncrementTick>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d003      	beq.n	80098e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098dc:	4b06      	ldr	r3, [pc, #24]	; (80098f8 <SysTick_Handler+0x40>)
 80098de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	2300      	movs	r3, #0
 80098e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	f383 8811 	msr	BASEPRI, r3
}
 80098ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	e000ed04 	.word	0xe000ed04

080098fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80098fc:	b480      	push	{r7}
 80098fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009900:	4b0a      	ldr	r3, [pc, #40]	; (800992c <vPortSetupTimerInterrupt+0x30>)
 8009902:	2200      	movs	r2, #0
 8009904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009906:	4b0a      	ldr	r3, [pc, #40]	; (8009930 <vPortSetupTimerInterrupt+0x34>)
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800990c:	4b09      	ldr	r3, [pc, #36]	; (8009934 <vPortSetupTimerInterrupt+0x38>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a09      	ldr	r2, [pc, #36]	; (8009938 <vPortSetupTimerInterrupt+0x3c>)
 8009912:	fba2 2303 	umull	r2, r3, r2, r3
 8009916:	099b      	lsrs	r3, r3, #6
 8009918:	4a08      	ldr	r2, [pc, #32]	; (800993c <vPortSetupTimerInterrupt+0x40>)
 800991a:	3b01      	subs	r3, #1
 800991c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800991e:	4b03      	ldr	r3, [pc, #12]	; (800992c <vPortSetupTimerInterrupt+0x30>)
 8009920:	2207      	movs	r2, #7
 8009922:	601a      	str	r2, [r3, #0]
}
 8009924:	bf00      	nop
 8009926:	46bd      	mov	sp, r7
 8009928:	bc80      	pop	{r7}
 800992a:	4770      	bx	lr
 800992c:	e000e010 	.word	0xe000e010
 8009930:	e000e018 	.word	0xe000e018
 8009934:	20000000 	.word	0x20000000
 8009938:	10624dd3 	.word	0x10624dd3
 800993c:	e000e014 	.word	0xe000e014

08009940 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009946:	f3ef 8305 	mrs	r3, IPSR
 800994a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b0f      	cmp	r3, #15
 8009950:	d914      	bls.n	800997c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009952:	4a16      	ldr	r2, [pc, #88]	; (80099ac <vPortValidateInterruptPriority+0x6c>)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4413      	add	r3, r2
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800995c:	4b14      	ldr	r3, [pc, #80]	; (80099b0 <vPortValidateInterruptPriority+0x70>)
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	7afa      	ldrb	r2, [r7, #11]
 8009962:	429a      	cmp	r2, r3
 8009964:	d20a      	bcs.n	800997c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	607b      	str	r3, [r7, #4]
}
 8009978:	bf00      	nop
 800997a:	e7fe      	b.n	800997a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800997c:	4b0d      	ldr	r3, [pc, #52]	; (80099b4 <vPortValidateInterruptPriority+0x74>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009984:	4b0c      	ldr	r3, [pc, #48]	; (80099b8 <vPortValidateInterruptPriority+0x78>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	429a      	cmp	r2, r3
 800998a:	d90a      	bls.n	80099a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	603b      	str	r3, [r7, #0]
}
 800999e:	bf00      	nop
 80099a0:	e7fe      	b.n	80099a0 <vPortValidateInterruptPriority+0x60>
	}
 80099a2:	bf00      	nop
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bc80      	pop	{r7}
 80099aa:	4770      	bx	lr
 80099ac:	e000e3f0 	.word	0xe000e3f0
 80099b0:	20001298 	.word	0x20001298
 80099b4:	e000ed0c 	.word	0xe000ed0c
 80099b8:	2000129c 	.word	0x2000129c

080099bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b08a      	sub	sp, #40	; 0x28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099c4:	2300      	movs	r3, #0
 80099c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80099c8:	f7fe fe2c 	bl	8008624 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80099cc:	4b58      	ldr	r3, [pc, #352]	; (8009b30 <pvPortMalloc+0x174>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d101      	bne.n	80099d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099d4:	f000 f910 	bl	8009bf8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099d8:	4b56      	ldr	r3, [pc, #344]	; (8009b34 <pvPortMalloc+0x178>)
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4013      	ands	r3, r2
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f040 808e 	bne.w	8009b02 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d01d      	beq.n	8009a28 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80099ec:	2208      	movs	r2, #8
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4413      	add	r3, r2
 80099f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f003 0307 	and.w	r3, r3, #7
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d014      	beq.n	8009a28 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f023 0307 	bic.w	r3, r3, #7
 8009a04:	3308      	adds	r3, #8
 8009a06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f003 0307 	and.w	r3, r3, #7
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00a      	beq.n	8009a28 <pvPortMalloc+0x6c>
	__asm volatile
 8009a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	617b      	str	r3, [r7, #20]
}
 8009a24:	bf00      	nop
 8009a26:	e7fe      	b.n	8009a26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d069      	beq.n	8009b02 <pvPortMalloc+0x146>
 8009a2e:	4b42      	ldr	r3, [pc, #264]	; (8009b38 <pvPortMalloc+0x17c>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d864      	bhi.n	8009b02 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a38:	4b40      	ldr	r3, [pc, #256]	; (8009b3c <pvPortMalloc+0x180>)
 8009a3a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a3c:	4b3f      	ldr	r3, [pc, #252]	; (8009b3c <pvPortMalloc+0x180>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a42:	e004      	b.n	8009a4e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d903      	bls.n	8009a60 <pvPortMalloc+0xa4>
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1f1      	bne.n	8009a44 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a60:	4b33      	ldr	r3, [pc, #204]	; (8009b30 <pvPortMalloc+0x174>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d04b      	beq.n	8009b02 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2208      	movs	r2, #8
 8009a70:	4413      	add	r3, r2
 8009a72:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	6a3b      	ldr	r3, [r7, #32]
 8009a7a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	1ad2      	subs	r2, r2, r3
 8009a84:	2308      	movs	r3, #8
 8009a86:	005b      	lsls	r3, r3, #1
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d91f      	bls.n	8009acc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4413      	add	r3, r2
 8009a92:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00a      	beq.n	8009ab4 <pvPortMalloc+0xf8>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	613b      	str	r3, [r7, #16]
}
 8009ab0:	bf00      	nop
 8009ab2:	e7fe      	b.n	8009ab2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	1ad2      	subs	r2, r2, r3
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ac6:	69b8      	ldr	r0, [r7, #24]
 8009ac8:	f000 f8f8 	bl	8009cbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009acc:	4b1a      	ldr	r3, [pc, #104]	; (8009b38 <pvPortMalloc+0x17c>)
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	4a18      	ldr	r2, [pc, #96]	; (8009b38 <pvPortMalloc+0x17c>)
 8009ad8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ada:	4b17      	ldr	r3, [pc, #92]	; (8009b38 <pvPortMalloc+0x17c>)
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	4b18      	ldr	r3, [pc, #96]	; (8009b40 <pvPortMalloc+0x184>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d203      	bcs.n	8009aee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ae6:	4b14      	ldr	r3, [pc, #80]	; (8009b38 <pvPortMalloc+0x17c>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a15      	ldr	r2, [pc, #84]	; (8009b40 <pvPortMalloc+0x184>)
 8009aec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af0:	685a      	ldr	r2, [r3, #4]
 8009af2:	4b10      	ldr	r3, [pc, #64]	; (8009b34 <pvPortMalloc+0x178>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	431a      	orrs	r2, r3
 8009af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afe:	2200      	movs	r2, #0
 8009b00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b02:	f7fe fd9d 	bl	8008640 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	f003 0307 	and.w	r3, r3, #7
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00a      	beq.n	8009b26 <pvPortMalloc+0x16a>
	__asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	60fb      	str	r3, [r7, #12]
}
 8009b22:	bf00      	nop
 8009b24:	e7fe      	b.n	8009b24 <pvPortMalloc+0x168>
	return pvReturn;
 8009b26:	69fb      	ldr	r3, [r7, #28]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3728      	adds	r7, #40	; 0x28
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	20001ea8 	.word	0x20001ea8
 8009b34:	20001eb4 	.word	0x20001eb4
 8009b38:	20001eac 	.word	0x20001eac
 8009b3c:	20001ea0 	.word	0x20001ea0
 8009b40:	20001eb0 	.word	0x20001eb0

08009b44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d048      	beq.n	8009be8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b56:	2308      	movs	r3, #8
 8009b58:	425b      	negs	r3, r3
 8009b5a:	697a      	ldr	r2, [r7, #20]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	4b21      	ldr	r3, [pc, #132]	; (8009bf0 <vPortFree+0xac>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10a      	bne.n	8009b88 <vPortFree+0x44>
	__asm volatile
 8009b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	60fb      	str	r3, [r7, #12]
}
 8009b84:	bf00      	nop
 8009b86:	e7fe      	b.n	8009b86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00a      	beq.n	8009ba6 <vPortFree+0x62>
	__asm volatile
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	60bb      	str	r3, [r7, #8]
}
 8009ba2:	bf00      	nop
 8009ba4:	e7fe      	b.n	8009ba4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	685a      	ldr	r2, [r3, #4]
 8009baa:	4b11      	ldr	r3, [pc, #68]	; (8009bf0 <vPortFree+0xac>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4013      	ands	r3, r2
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d019      	beq.n	8009be8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d115      	bne.n	8009be8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	4b0b      	ldr	r3, [pc, #44]	; (8009bf0 <vPortFree+0xac>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	43db      	mvns	r3, r3
 8009bc6:	401a      	ands	r2, r3
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009bcc:	f7fe fd2a 	bl	8008624 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	685a      	ldr	r2, [r3, #4]
 8009bd4:	4b07      	ldr	r3, [pc, #28]	; (8009bf4 <vPortFree+0xb0>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4413      	add	r3, r2
 8009bda:	4a06      	ldr	r2, [pc, #24]	; (8009bf4 <vPortFree+0xb0>)
 8009bdc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009bde:	6938      	ldr	r0, [r7, #16]
 8009be0:	f000 f86c 	bl	8009cbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009be4:	f7fe fd2c 	bl	8008640 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009be8:	bf00      	nop
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	20001eb4 	.word	0x20001eb4
 8009bf4:	20001eac 	.word	0x20001eac

08009bf8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009bfe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009c02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c04:	4b27      	ldr	r3, [pc, #156]	; (8009ca4 <prvHeapInit+0xac>)
 8009c06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f003 0307 	and.w	r3, r3, #7
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00c      	beq.n	8009c2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3307      	adds	r3, #7
 8009c16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f023 0307 	bic.w	r3, r3, #7
 8009c1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	4a1f      	ldr	r2, [pc, #124]	; (8009ca4 <prvHeapInit+0xac>)
 8009c28:	4413      	add	r3, r2
 8009c2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c30:	4a1d      	ldr	r2, [pc, #116]	; (8009ca8 <prvHeapInit+0xb0>)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c36:	4b1c      	ldr	r3, [pc, #112]	; (8009ca8 <prvHeapInit+0xb0>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	4413      	add	r3, r2
 8009c42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c44:	2208      	movs	r2, #8
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	1a9b      	subs	r3, r3, r2
 8009c4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f023 0307 	bic.w	r3, r3, #7
 8009c52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4a15      	ldr	r2, [pc, #84]	; (8009cac <prvHeapInit+0xb4>)
 8009c58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c5a:	4b14      	ldr	r3, [pc, #80]	; (8009cac <prvHeapInit+0xb4>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c62:	4b12      	ldr	r3, [pc, #72]	; (8009cac <prvHeapInit+0xb4>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2200      	movs	r2, #0
 8009c68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	1ad2      	subs	r2, r2, r3
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c78:	4b0c      	ldr	r3, [pc, #48]	; (8009cac <prvHeapInit+0xb4>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	4a0a      	ldr	r2, [pc, #40]	; (8009cb0 <prvHeapInit+0xb8>)
 8009c86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	4a09      	ldr	r2, [pc, #36]	; (8009cb4 <prvHeapInit+0xbc>)
 8009c8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c90:	4b09      	ldr	r3, [pc, #36]	; (8009cb8 <prvHeapInit+0xc0>)
 8009c92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c96:	601a      	str	r2, [r3, #0]
}
 8009c98:	bf00      	nop
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bc80      	pop	{r7}
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	200012a0 	.word	0x200012a0
 8009ca8:	20001ea0 	.word	0x20001ea0
 8009cac:	20001ea8 	.word	0x20001ea8
 8009cb0:	20001eb0 	.word	0x20001eb0
 8009cb4:	20001eac 	.word	0x20001eac
 8009cb8:	20001eb4 	.word	0x20001eb4

08009cbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009cc4:	4b27      	ldr	r3, [pc, #156]	; (8009d64 <prvInsertBlockIntoFreeList+0xa8>)
 8009cc6:	60fb      	str	r3, [r7, #12]
 8009cc8:	e002      	b.n	8009cd0 <prvInsertBlockIntoFreeList+0x14>
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	60fb      	str	r3, [r7, #12]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d8f7      	bhi.n	8009cca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d108      	bne.n	8009cfe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	685a      	ldr	r2, [r3, #4]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	441a      	add	r2, r3
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	441a      	add	r2, r3
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d118      	bne.n	8009d44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	4b14      	ldr	r3, [pc, #80]	; (8009d68 <prvInsertBlockIntoFreeList+0xac>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d00d      	beq.n	8009d3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685a      	ldr	r2, [r3, #4]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	441a      	add	r2, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	601a      	str	r2, [r3, #0]
 8009d38:	e008      	b.n	8009d4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d3a:	4b0b      	ldr	r3, [pc, #44]	; (8009d68 <prvInsertBlockIntoFreeList+0xac>)
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	601a      	str	r2, [r3, #0]
 8009d42:	e003      	b.n	8009d4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d002      	beq.n	8009d5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d5a:	bf00      	nop
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bc80      	pop	{r7}
 8009d62:	4770      	bx	lr
 8009d64:	20001ea0 	.word	0x20001ea0
 8009d68:	20001ea8 	.word	0x20001ea8

08009d6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d70:	2200      	movs	r2, #0
 8009d72:	4912      	ldr	r1, [pc, #72]	; (8009dbc <MX_USB_DEVICE_Init+0x50>)
 8009d74:	4812      	ldr	r0, [pc, #72]	; (8009dc0 <MX_USB_DEVICE_Init+0x54>)
 8009d76:	f7fc f8d1 	bl	8005f1c <USBD_Init>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d80:	f7f6 fbee 	bl	8000560 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d84:	490f      	ldr	r1, [pc, #60]	; (8009dc4 <MX_USB_DEVICE_Init+0x58>)
 8009d86:	480e      	ldr	r0, [pc, #56]	; (8009dc0 <MX_USB_DEVICE_Init+0x54>)
 8009d88:	f7fc f8f3 	bl	8005f72 <USBD_RegisterClass>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d92:	f7f6 fbe5 	bl	8000560 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d96:	490c      	ldr	r1, [pc, #48]	; (8009dc8 <MX_USB_DEVICE_Init+0x5c>)
 8009d98:	4809      	ldr	r0, [pc, #36]	; (8009dc0 <MX_USB_DEVICE_Init+0x54>)
 8009d9a:	f7fc f853 	bl	8005e44 <USBD_CDC_RegisterInterface>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009da4:	f7f6 fbdc 	bl	8000560 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009da8:	4805      	ldr	r0, [pc, #20]	; (8009dc0 <MX_USB_DEVICE_Init+0x54>)
 8009daa:	f7fc f8fb 	bl	8005fa4 <USBD_Start>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009db4:	f7f6 fbd4 	bl	8000560 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009db8:	bf00      	nop
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20000130 	.word	0x20000130
 8009dc0:	200021f0 	.word	0x200021f0
 8009dc4:	20000018 	.word	0x20000018
 8009dc8:	20000120 	.word	0x20000120

08009dcc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	4905      	ldr	r1, [pc, #20]	; (8009de8 <CDC_Init_FS+0x1c>)
 8009dd4:	4805      	ldr	r0, [pc, #20]	; (8009dec <CDC_Init_FS+0x20>)
 8009dd6:	f7fc f84b 	bl	8005e70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009dda:	4905      	ldr	r1, [pc, #20]	; (8009df0 <CDC_Init_FS+0x24>)
 8009ddc:	4803      	ldr	r0, [pc, #12]	; (8009dec <CDC_Init_FS+0x20>)
 8009dde:	f7fc f860 	bl	8005ea2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009de2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	2000289c 	.word	0x2000289c
 8009dec:	200021f0 	.word	0x200021f0
 8009df0:	200024b4 	.word	0x200024b4

08009df4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009df4:	b480      	push	{r7}
 8009df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009df8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bc80      	pop	{r7}
 8009e00:	4770      	bx	lr
	...

08009e04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	6039      	str	r1, [r7, #0]
 8009e0e:	71fb      	strb	r3, [r7, #7]
 8009e10:	4613      	mov	r3, r2
 8009e12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009e14:	79fb      	ldrb	r3, [r7, #7]
 8009e16:	2b23      	cmp	r3, #35	; 0x23
 8009e18:	d84a      	bhi.n	8009eb0 <CDC_Control_FS+0xac>
 8009e1a:	a201      	add	r2, pc, #4	; (adr r2, 8009e20 <CDC_Control_FS+0x1c>)
 8009e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e20:	08009eb1 	.word	0x08009eb1
 8009e24:	08009eb1 	.word	0x08009eb1
 8009e28:	08009eb1 	.word	0x08009eb1
 8009e2c:	08009eb1 	.word	0x08009eb1
 8009e30:	08009eb1 	.word	0x08009eb1
 8009e34:	08009eb1 	.word	0x08009eb1
 8009e38:	08009eb1 	.word	0x08009eb1
 8009e3c:	08009eb1 	.word	0x08009eb1
 8009e40:	08009eb1 	.word	0x08009eb1
 8009e44:	08009eb1 	.word	0x08009eb1
 8009e48:	08009eb1 	.word	0x08009eb1
 8009e4c:	08009eb1 	.word	0x08009eb1
 8009e50:	08009eb1 	.word	0x08009eb1
 8009e54:	08009eb1 	.word	0x08009eb1
 8009e58:	08009eb1 	.word	0x08009eb1
 8009e5c:	08009eb1 	.word	0x08009eb1
 8009e60:	08009eb1 	.word	0x08009eb1
 8009e64:	08009eb1 	.word	0x08009eb1
 8009e68:	08009eb1 	.word	0x08009eb1
 8009e6c:	08009eb1 	.word	0x08009eb1
 8009e70:	08009eb1 	.word	0x08009eb1
 8009e74:	08009eb1 	.word	0x08009eb1
 8009e78:	08009eb1 	.word	0x08009eb1
 8009e7c:	08009eb1 	.word	0x08009eb1
 8009e80:	08009eb1 	.word	0x08009eb1
 8009e84:	08009eb1 	.word	0x08009eb1
 8009e88:	08009eb1 	.word	0x08009eb1
 8009e8c:	08009eb1 	.word	0x08009eb1
 8009e90:	08009eb1 	.word	0x08009eb1
 8009e94:	08009eb1 	.word	0x08009eb1
 8009e98:	08009eb1 	.word	0x08009eb1
 8009e9c:	08009eb1 	.word	0x08009eb1
 8009ea0:	08009eb1 	.word	0x08009eb1
 8009ea4:	08009eb1 	.word	0x08009eb1
 8009ea8:	08009eb1 	.word	0x08009eb1
 8009eac:	08009eb1 	.word	0x08009eb1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009eb0:	bf00      	nop
  }

  return (USBD_OK);
 8009eb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bc80      	pop	{r7}
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop

08009ec0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 8009ece:	2300      	movs	r3, #0
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	e00c      	b.n	8009eee <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 8009ed4:	4b0e      	ldr	r3, [pc, #56]	; (8009f10 <CDC_Receive_FS+0x50>)
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	18d1      	adds	r1, r2, r3
 8009ede:	f107 0208 	add.w	r2, r7, #8
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	f7fd fd98 	bl	8007a18 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3301      	adds	r3, #1
 8009eec:	60fb      	str	r3, [r7, #12]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d3ed      	bcc.n	8009ed4 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ef8:	6879      	ldr	r1, [r7, #4]
 8009efa:	4806      	ldr	r0, [pc, #24]	; (8009f14 <CDC_Receive_FS+0x54>)
 8009efc:	f7fb ffd1 	bl	8005ea2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f00:	4804      	ldr	r0, [pc, #16]	; (8009f14 <CDC_Receive_FS+0x54>)
 8009f02:	f7fb ffe1 	bl	8005ec8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009f06:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	20002160 	.word	0x20002160
 8009f14:	200021f0 	.word	0x200021f0

08009f18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	4603      	mov	r3, r0
 8009f20:	6039      	str	r1, [r7, #0]
 8009f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	2212      	movs	r2, #18
 8009f28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009f2a:	4b03      	ldr	r3, [pc, #12]	; (8009f38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bc80      	pop	{r7}
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	2000014c 	.word	0x2000014c

08009f3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	4603      	mov	r3, r0
 8009f44:	6039      	str	r1, [r7, #0]
 8009f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	2204      	movs	r2, #4
 8009f4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f4e:	4b03      	ldr	r3, [pc, #12]	; (8009f5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bc80      	pop	{r7}
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	20000160 	.word	0x20000160

08009f60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	4603      	mov	r3, r0
 8009f68:	6039      	str	r1, [r7, #0]
 8009f6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f6c:	79fb      	ldrb	r3, [r7, #7]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d105      	bne.n	8009f7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	4907      	ldr	r1, [pc, #28]	; (8009f94 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f76:	4808      	ldr	r0, [pc, #32]	; (8009f98 <USBD_FS_ProductStrDescriptor+0x38>)
 8009f78:	f7fc ff8c 	bl	8006e94 <USBD_GetString>
 8009f7c:	e004      	b.n	8009f88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	4904      	ldr	r1, [pc, #16]	; (8009f94 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f82:	4805      	ldr	r0, [pc, #20]	; (8009f98 <USBD_FS_ProductStrDescriptor+0x38>)
 8009f84:	f7fc ff86 	bl	8006e94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f88:	4b02      	ldr	r3, [pc, #8]	; (8009f94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	20002c84 	.word	0x20002c84
 8009f98:	0800a788 	.word	0x0800a788

08009f9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	6039      	str	r1, [r7, #0]
 8009fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	4904      	ldr	r1, [pc, #16]	; (8009fbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009fac:	4804      	ldr	r0, [pc, #16]	; (8009fc0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009fae:	f7fc ff71 	bl	8006e94 <USBD_GetString>
  return USBD_StrDesc;
 8009fb2:	4b02      	ldr	r3, [pc, #8]	; (8009fbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	20002c84 	.word	0x20002c84
 8009fc0:	0800a794 	.word	0x0800a794

08009fc4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	4603      	mov	r3, r0
 8009fcc:	6039      	str	r1, [r7, #0]
 8009fce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	221a      	movs	r2, #26
 8009fd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009fd6:	f000 f843 	bl	800a060 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009fda:	4b02      	ldr	r3, [pc, #8]	; (8009fe4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	20000164 	.word	0x20000164

08009fe8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	4603      	mov	r3, r0
 8009ff0:	6039      	str	r1, [r7, #0]
 8009ff2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ff4:	79fb      	ldrb	r3, [r7, #7]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d105      	bne.n	800a006 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	4907      	ldr	r1, [pc, #28]	; (800a01c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ffe:	4808      	ldr	r0, [pc, #32]	; (800a020 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a000:	f7fc ff48 	bl	8006e94 <USBD_GetString>
 800a004:	e004      	b.n	800a010 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a006:	683a      	ldr	r2, [r7, #0]
 800a008:	4904      	ldr	r1, [pc, #16]	; (800a01c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a00a:	4805      	ldr	r0, [pc, #20]	; (800a020 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a00c:	f7fc ff42 	bl	8006e94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a010:	4b02      	ldr	r3, [pc, #8]	; (800a01c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a012:	4618      	mov	r0, r3
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	20002c84 	.word	0x20002c84
 800a020:	0800a7a8 	.word	0x0800a7a8

0800a024 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	4603      	mov	r3, r0
 800a02c:	6039      	str	r1, [r7, #0]
 800a02e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a030:	79fb      	ldrb	r3, [r7, #7]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d105      	bne.n	800a042 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	4907      	ldr	r1, [pc, #28]	; (800a058 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a03a:	4808      	ldr	r0, [pc, #32]	; (800a05c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a03c:	f7fc ff2a 	bl	8006e94 <USBD_GetString>
 800a040:	e004      	b.n	800a04c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	4904      	ldr	r1, [pc, #16]	; (800a058 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a046:	4805      	ldr	r0, [pc, #20]	; (800a05c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a048:	f7fc ff24 	bl	8006e94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a04c:	4b02      	ldr	r3, [pc, #8]	; (800a058 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20002c84 	.word	0x20002c84
 800a05c:	0800a7b4 	.word	0x0800a7b4

0800a060 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a066:	4b0f      	ldr	r3, [pc, #60]	; (800a0a4 <Get_SerialNum+0x44>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a06c:	4b0e      	ldr	r3, [pc, #56]	; (800a0a8 <Get_SerialNum+0x48>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a072:	4b0e      	ldr	r3, [pc, #56]	; (800a0ac <Get_SerialNum+0x4c>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4413      	add	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d009      	beq.n	800a09a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a086:	2208      	movs	r2, #8
 800a088:	4909      	ldr	r1, [pc, #36]	; (800a0b0 <Get_SerialNum+0x50>)
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 f814 	bl	800a0b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a090:	2204      	movs	r2, #4
 800a092:	4908      	ldr	r1, [pc, #32]	; (800a0b4 <Get_SerialNum+0x54>)
 800a094:	68b8      	ldr	r0, [r7, #8]
 800a096:	f000 f80f 	bl	800a0b8 <IntToUnicode>
  }
}
 800a09a:	bf00      	nop
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	1ffff7e8 	.word	0x1ffff7e8
 800a0a8:	1ffff7ec 	.word	0x1ffff7ec
 800a0ac:	1ffff7f0 	.word	0x1ffff7f0
 800a0b0:	20000166 	.word	0x20000166
 800a0b4:	20000176 	.word	0x20000176

0800a0b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	75fb      	strb	r3, [r7, #23]
 800a0ce:	e027      	b.n	800a120 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	0f1b      	lsrs	r3, r3, #28
 800a0d4:	2b09      	cmp	r3, #9
 800a0d6:	d80b      	bhi.n	800a0f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	0f1b      	lsrs	r3, r3, #28
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	7dfb      	ldrb	r3, [r7, #23]
 800a0e0:	005b      	lsls	r3, r3, #1
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	440b      	add	r3, r1
 800a0e8:	3230      	adds	r2, #48	; 0x30
 800a0ea:	b2d2      	uxtb	r2, r2
 800a0ec:	701a      	strb	r2, [r3, #0]
 800a0ee:	e00a      	b.n	800a106 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	0f1b      	lsrs	r3, r3, #28
 800a0f4:	b2da      	uxtb	r2, r3
 800a0f6:	7dfb      	ldrb	r3, [r7, #23]
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	440b      	add	r3, r1
 800a100:	3237      	adds	r2, #55	; 0x37
 800a102:	b2d2      	uxtb	r2, r2
 800a104:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	011b      	lsls	r3, r3, #4
 800a10a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a10c:	7dfb      	ldrb	r3, [r7, #23]
 800a10e:	005b      	lsls	r3, r3, #1
 800a110:	3301      	adds	r3, #1
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	4413      	add	r3, r2
 800a116:	2200      	movs	r2, #0
 800a118:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
 800a11c:	3301      	adds	r3, #1
 800a11e:	75fb      	strb	r3, [r7, #23]
 800a120:	7dfa      	ldrb	r2, [r7, #23]
 800a122:	79fb      	ldrb	r3, [r7, #7]
 800a124:	429a      	cmp	r2, r3
 800a126:	d3d3      	bcc.n	800a0d0 <IntToUnicode+0x18>
  }
}
 800a128:	bf00      	nop
 800a12a:	bf00      	nop
 800a12c:	371c      	adds	r7, #28
 800a12e:	46bd      	mov	sp, r7
 800a130:	bc80      	pop	{r7}
 800a132:	4770      	bx	lr

0800a134 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a0d      	ldr	r2, [pc, #52]	; (800a178 <HAL_PCD_MspInit+0x44>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d113      	bne.n	800a16e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a146:	4b0d      	ldr	r3, [pc, #52]	; (800a17c <HAL_PCD_MspInit+0x48>)
 800a148:	69db      	ldr	r3, [r3, #28]
 800a14a:	4a0c      	ldr	r2, [pc, #48]	; (800a17c <HAL_PCD_MspInit+0x48>)
 800a14c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a150:	61d3      	str	r3, [r2, #28]
 800a152:	4b0a      	ldr	r3, [pc, #40]	; (800a17c <HAL_PCD_MspInit+0x48>)
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a15a:	60fb      	str	r3, [r7, #12]
 800a15c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800a15e:	2200      	movs	r2, #0
 800a160:	2105      	movs	r1, #5
 800a162:	2014      	movs	r0, #20
 800a164:	f7f6 fbcd 	bl	8000902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a168:	2014      	movs	r0, #20
 800a16a:	f7f6 fbe6 	bl	800093a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a16e:	bf00      	nop
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	40005c00 	.word	0x40005c00
 800a17c:	40021000 	.word	0x40021000

0800a180 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a194:	4619      	mov	r1, r3
 800a196:	4610      	mov	r0, r2
 800a198:	f7fb ff4c 	bl	8006034 <USBD_LL_SetupStage>
}
 800a19c:	bf00      	nop
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a1b6:	78fa      	ldrb	r2, [r7, #3]
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	00db      	lsls	r3, r3, #3
 800a1c2:	440b      	add	r3, r1
 800a1c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	78fb      	ldrb	r3, [r7, #3]
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	f7fb ff7e 	bl	80060ce <USBD_LL_DataOutStage>
}
 800a1d2:	bf00      	nop
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b082      	sub	sp, #8
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a1ec:	78fa      	ldrb	r2, [r7, #3]
 800a1ee:	6879      	ldr	r1, [r7, #4]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	00db      	lsls	r3, r3, #3
 800a1f8:	440b      	add	r3, r1
 800a1fa:	333c      	adds	r3, #60	; 0x3c
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	78fb      	ldrb	r3, [r7, #3]
 800a200:	4619      	mov	r1, r3
 800a202:	f7fb ffd5 	bl	80061b0 <USBD_LL_DataInStage>
}
 800a206:	bf00      	nop
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fc f8e5 	bl	80063ec <USBD_LL_SOF>
}
 800a222:	bf00      	nop
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a232:	2301      	movs	r3, #1
 800a234:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d001      	beq.n	800a242 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a23e:	f7f6 f98f 	bl	8000560 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a248:	7bfa      	ldrb	r2, [r7, #15]
 800a24a:	4611      	mov	r1, r2
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fc f895 	bl	800637c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fc f84e 	bl	80062fa <USBD_LL_Reset>
}
 800a25e:	bf00      	nop
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
	...

0800a268 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a276:	4618      	mov	r0, r3
 800a278:	f7fc f88f 	bl	800639a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d005      	beq.n	800a290 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a284:	4b04      	ldr	r3, [pc, #16]	; (800a298 <HAL_PCD_SuspendCallback+0x30>)
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	4a03      	ldr	r2, [pc, #12]	; (800a298 <HAL_PCD_SuspendCallback+0x30>)
 800a28a:	f043 0306 	orr.w	r3, r3, #6
 800a28e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a290:	bf00      	nop
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	e000ed00 	.word	0xe000ed00

0800a29c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fc f889 	bl	80063c2 <USBD_LL_Resume>
}
 800a2b0:	bf00      	nop
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a2c0:	4a28      	ldr	r2, [pc, #160]	; (800a364 <USBD_LL_Init+0xac>)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a26      	ldr	r2, [pc, #152]	; (800a364 <USBD_LL_Init+0xac>)
 800a2cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a2d0:	4b24      	ldr	r3, [pc, #144]	; (800a364 <USBD_LL_Init+0xac>)
 800a2d2:	4a25      	ldr	r2, [pc, #148]	; (800a368 <USBD_LL_Init+0xb0>)
 800a2d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a2d6:	4b23      	ldr	r3, [pc, #140]	; (800a364 <USBD_LL_Init+0xac>)
 800a2d8:	2208      	movs	r2, #8
 800a2da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a2dc:	4b21      	ldr	r3, [pc, #132]	; (800a364 <USBD_LL_Init+0xac>)
 800a2de:	2202      	movs	r2, #2
 800a2e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a2e2:	4b20      	ldr	r3, [pc, #128]	; (800a364 <USBD_LL_Init+0xac>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a2e8:	4b1e      	ldr	r3, [pc, #120]	; (800a364 <USBD_LL_Init+0xac>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a2ee:	4b1d      	ldr	r3, [pc, #116]	; (800a364 <USBD_LL_Init+0xac>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a2f4:	481b      	ldr	r0, [pc, #108]	; (800a364 <USBD_LL_Init+0xac>)
 800a2f6:	f7f6 fce4 	bl	8000cc2 <HAL_PCD_Init>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d001      	beq.n	800a304 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a300:	f7f6 f92e 	bl	8000560 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a30a:	2318      	movs	r3, #24
 800a30c:	2200      	movs	r2, #0
 800a30e:	2100      	movs	r1, #0
 800a310:	f7f8 f95a 	bl	80025c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a31a:	2358      	movs	r3, #88	; 0x58
 800a31c:	2200      	movs	r2, #0
 800a31e:	2180      	movs	r1, #128	; 0x80
 800a320:	f7f8 f952 	bl	80025c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a32a:	23c0      	movs	r3, #192	; 0xc0
 800a32c:	2200      	movs	r2, #0
 800a32e:	2181      	movs	r1, #129	; 0x81
 800a330:	f7f8 f94a 	bl	80025c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a33a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a33e:	2200      	movs	r2, #0
 800a340:	2101      	movs	r1, #1
 800a342:	f7f8 f941 	bl	80025c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a34c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a350:	2200      	movs	r2, #0
 800a352:	2182      	movs	r1, #130	; 0x82
 800a354:	f7f8 f938 	bl	80025c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20002e84 	.word	0x20002e84
 800a368:	40005c00 	.word	0x40005c00

0800a36c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a374:	2300      	movs	r3, #0
 800a376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a378:	2300      	movs	r3, #0
 800a37a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a382:	4618      	mov	r0, r3
 800a384:	f7f6 fda8 	bl	8000ed8 <HAL_PCD_Start>
 800a388:	4603      	mov	r3, r0
 800a38a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 f94e 	bl	800a630 <USBD_Get_USB_Status>
 800a394:	4603      	mov	r3, r0
 800a396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a398:	7bbb      	ldrb	r3, [r7, #14]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b084      	sub	sp, #16
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	4608      	mov	r0, r1
 800a3ac:	4611      	mov	r1, r2
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	70fb      	strb	r3, [r7, #3]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	70bb      	strb	r3, [r7, #2]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a3ca:	78bb      	ldrb	r3, [r7, #2]
 800a3cc:	883a      	ldrh	r2, [r7, #0]
 800a3ce:	78f9      	ldrb	r1, [r7, #3]
 800a3d0:	f7f6 ff22 	bl	8001218 <HAL_PCD_EP_Open>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3d8:	7bfb      	ldrb	r3, [r7, #15]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 f928 	bl	800a630 <USBD_Get_USB_Status>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b084      	sub	sp, #16
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a408:	78fa      	ldrb	r2, [r7, #3]
 800a40a:	4611      	mov	r1, r2
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7f6 ff69 	bl	80012e4 <HAL_PCD_EP_Close>
 800a412:	4603      	mov	r3, r0
 800a414:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a416:	7bfb      	ldrb	r3, [r7, #15]
 800a418:	4618      	mov	r0, r3
 800a41a:	f000 f909 	bl	800a630 <USBD_Get_USB_Status>
 800a41e:	4603      	mov	r3, r0
 800a420:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a422:	7bbb      	ldrb	r3, [r7, #14]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	460b      	mov	r3, r1
 800a436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a438:	2300      	movs	r3, #0
 800a43a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a446:	78fa      	ldrb	r2, [r7, #3]
 800a448:	4611      	mov	r1, r2
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7f7 f829 	bl	80014a2 <HAL_PCD_EP_SetStall>
 800a450:	4603      	mov	r3, r0
 800a452:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a454:	7bfb      	ldrb	r3, [r7, #15]
 800a456:	4618      	mov	r0, r3
 800a458:	f000 f8ea 	bl	800a630 <USBD_Get_USB_Status>
 800a45c:	4603      	mov	r3, r0
 800a45e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a460:	7bbb      	ldrb	r3, [r7, #14]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b084      	sub	sp, #16
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
 800a472:	460b      	mov	r3, r1
 800a474:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a47a:	2300      	movs	r3, #0
 800a47c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a484:	78fa      	ldrb	r2, [r7, #3]
 800a486:	4611      	mov	r1, r2
 800a488:	4618      	mov	r0, r3
 800a48a:	f7f7 f86a 	bl	8001562 <HAL_PCD_EP_ClrStall>
 800a48e:	4603      	mov	r3, r0
 800a490:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a492:	7bfb      	ldrb	r3, [r7, #15]
 800a494:	4618      	mov	r0, r3
 800a496:	f000 f8cb 	bl	800a630 <USBD_Get_USB_Status>
 800a49a:	4603      	mov	r3, r0
 800a49c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a49e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a4bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	da0c      	bge.n	800a4de <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a4c4:	78fb      	ldrb	r3, [r7, #3]
 800a4c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ca:	68f9      	ldr	r1, [r7, #12]
 800a4cc:	1c5a      	adds	r2, r3, #1
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	440b      	add	r3, r1
 800a4d8:	3302      	adds	r3, #2
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	e00b      	b.n	800a4f6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a4de:	78fb      	ldrb	r3, [r7, #3]
 800a4e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4e4:	68f9      	ldr	r1, [r7, #12]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	00db      	lsls	r3, r3, #3
 800a4ee:	440b      	add	r3, r1
 800a4f0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a4f4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bc80      	pop	{r7}
 800a4fe:	4770      	bx	lr

0800a500 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a51a:	78fa      	ldrb	r2, [r7, #3]
 800a51c:	4611      	mov	r1, r2
 800a51e:	4618      	mov	r0, r3
 800a520:	f7f6 fe55 	bl	80011ce <HAL_PCD_SetAddress>
 800a524:	4603      	mov	r3, r0
 800a526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a528:	7bfb      	ldrb	r3, [r7, #15]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 f880 	bl	800a630 <USBD_Get_USB_Status>
 800a530:	4603      	mov	r3, r0
 800a532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a534:	7bbb      	ldrb	r3, [r7, #14]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b086      	sub	sp, #24
 800a542:	af00      	add	r7, sp, #0
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	461a      	mov	r2, r3
 800a54a:	460b      	mov	r3, r1
 800a54c:	72fb      	strb	r3, [r7, #11]
 800a54e:	4613      	mov	r3, r2
 800a550:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a556:	2300      	movs	r3, #0
 800a558:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a560:	893b      	ldrh	r3, [r7, #8]
 800a562:	7af9      	ldrb	r1, [r7, #11]
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	f7f6 ff59 	bl	800141c <HAL_PCD_EP_Transmit>
 800a56a:	4603      	mov	r3, r0
 800a56c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a56e:	7dfb      	ldrb	r3, [r7, #23]
 800a570:	4618      	mov	r0, r3
 800a572:	f000 f85d 	bl	800a630 <USBD_Get_USB_Status>
 800a576:	4603      	mov	r3, r0
 800a578:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a57a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3718      	adds	r7, #24
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	607a      	str	r2, [r7, #4]
 800a58e:	461a      	mov	r2, r3
 800a590:	460b      	mov	r3, r1
 800a592:	72fb      	strb	r3, [r7, #11]
 800a594:	4613      	mov	r3, r2
 800a596:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a598:	2300      	movs	r3, #0
 800a59a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a59c:	2300      	movs	r3, #0
 800a59e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a5a6:	893b      	ldrh	r3, [r7, #8]
 800a5a8:	7af9      	ldrb	r1, [r7, #11]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	f7f6 fee2 	bl	8001374 <HAL_PCD_EP_Receive>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5b4:	7dfb      	ldrb	r3, [r7, #23]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 f83a 	bl	800a630 <USBD_Get_USB_Status>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3718      	adds	r7, #24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5dc:	78fa      	ldrb	r2, [r7, #3]
 800a5de:	4611      	mov	r1, r2
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7f6 ff04 	bl	80013ee <HAL_PCD_EP_GetRxCount>
 800a5e6:	4603      	mov	r3, r0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a5f8:	4b02      	ldr	r3, [pc, #8]	; (800a604 <USBD_static_malloc+0x14>)
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bc80      	pop	{r7}
 800a602:	4770      	bx	lr
 800a604:	20001eb8 	.word	0x20001eb8

0800a608 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]

}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	bc80      	pop	{r7}
 800a618:	4770      	bx	lr

0800a61a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a61a:	b480      	push	{r7}
 800a61c:	b083      	sub	sp, #12
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	460b      	mov	r3, r1
 800a624:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a626:	bf00      	nop
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bc80      	pop	{r7}
 800a62e:	4770      	bx	lr

0800a630 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	4603      	mov	r3, r0
 800a638:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a63e:	79fb      	ldrb	r3, [r7, #7]
 800a640:	2b03      	cmp	r3, #3
 800a642:	d817      	bhi.n	800a674 <USBD_Get_USB_Status+0x44>
 800a644:	a201      	add	r2, pc, #4	; (adr r2, 800a64c <USBD_Get_USB_Status+0x1c>)
 800a646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64a:	bf00      	nop
 800a64c:	0800a65d 	.word	0x0800a65d
 800a650:	0800a663 	.word	0x0800a663
 800a654:	0800a669 	.word	0x0800a669
 800a658:	0800a66f 	.word	0x0800a66f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	73fb      	strb	r3, [r7, #15]
    break;
 800a660:	e00b      	b.n	800a67a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a662:	2302      	movs	r3, #2
 800a664:	73fb      	strb	r3, [r7, #15]
    break;
 800a666:	e008      	b.n	800a67a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a668:	2301      	movs	r3, #1
 800a66a:	73fb      	strb	r3, [r7, #15]
    break;
 800a66c:	e005      	b.n	800a67a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a66e:	2302      	movs	r3, #2
 800a670:	73fb      	strb	r3, [r7, #15]
    break;
 800a672:	e002      	b.n	800a67a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a674:	2302      	movs	r3, #2
 800a676:	73fb      	strb	r3, [r7, #15]
    break;
 800a678:	bf00      	nop
  }
  return usb_status;
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	bc80      	pop	{r7}
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop

0800a688 <__libc_init_array>:
 800a688:	b570      	push	{r4, r5, r6, lr}
 800a68a:	2600      	movs	r6, #0
 800a68c:	4d0c      	ldr	r5, [pc, #48]	; (800a6c0 <__libc_init_array+0x38>)
 800a68e:	4c0d      	ldr	r4, [pc, #52]	; (800a6c4 <__libc_init_array+0x3c>)
 800a690:	1b64      	subs	r4, r4, r5
 800a692:	10a4      	asrs	r4, r4, #2
 800a694:	42a6      	cmp	r6, r4
 800a696:	d109      	bne.n	800a6ac <__libc_init_array+0x24>
 800a698:	f000 f830 	bl	800a6fc <_init>
 800a69c:	2600      	movs	r6, #0
 800a69e:	4d0a      	ldr	r5, [pc, #40]	; (800a6c8 <__libc_init_array+0x40>)
 800a6a0:	4c0a      	ldr	r4, [pc, #40]	; (800a6cc <__libc_init_array+0x44>)
 800a6a2:	1b64      	subs	r4, r4, r5
 800a6a4:	10a4      	asrs	r4, r4, #2
 800a6a6:	42a6      	cmp	r6, r4
 800a6a8:	d105      	bne.n	800a6b6 <__libc_init_array+0x2e>
 800a6aa:	bd70      	pop	{r4, r5, r6, pc}
 800a6ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6b0:	4798      	blx	r3
 800a6b2:	3601      	adds	r6, #1
 800a6b4:	e7ee      	b.n	800a694 <__libc_init_array+0xc>
 800a6b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ba:	4798      	blx	r3
 800a6bc:	3601      	adds	r6, #1
 800a6be:	e7f2      	b.n	800a6a6 <__libc_init_array+0x1e>
 800a6c0:	0800a860 	.word	0x0800a860
 800a6c4:	0800a860 	.word	0x0800a860
 800a6c8:	0800a860 	.word	0x0800a860
 800a6cc:	0800a864 	.word	0x0800a864

0800a6d0 <memcpy>:
 800a6d0:	440a      	add	r2, r1
 800a6d2:	4291      	cmp	r1, r2
 800a6d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6d8:	d100      	bne.n	800a6dc <memcpy+0xc>
 800a6da:	4770      	bx	lr
 800a6dc:	b510      	push	{r4, lr}
 800a6de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6e2:	4291      	cmp	r1, r2
 800a6e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6e8:	d1f9      	bne.n	800a6de <memcpy+0xe>
 800a6ea:	bd10      	pop	{r4, pc}

0800a6ec <memset>:
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	4402      	add	r2, r0
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d100      	bne.n	800a6f6 <memset+0xa>
 800a6f4:	4770      	bx	lr
 800a6f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a6fa:	e7f9      	b.n	800a6f0 <memset+0x4>

0800a6fc <_init>:
 800a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fe:	bf00      	nop
 800a700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a702:	bc08      	pop	{r3}
 800a704:	469e      	mov	lr, r3
 800a706:	4770      	bx	lr

0800a708 <_fini>:
 800a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70a:	bf00      	nop
 800a70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a70e:	bc08      	pop	{r3}
 800a710:	469e      	mov	lr, r3
 800a712:	4770      	bx	lr
