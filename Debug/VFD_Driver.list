
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1b0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  0800d2c0  0800d2c0  0001d2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9d8  0800d9d8  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d9d8  0800d9d8  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d9d8  0800d9d8  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9d8  0800d9d8  0001d9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9dc  0800d9dc  0001d9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800d9e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030e8  2000018c  0800db6c  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003274  0800db6c  00023274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bac0  00000000  00000000  000201b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d70  00000000  00000000  0004bc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de0  00000000  00000000  000519e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bc8  00000000  00000000  000537c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e6e5  00000000  00000000  00055390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023c7f  00000000  00000000  00073a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c40c  00000000  00000000  000976f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00133b00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bcc  00000000  00000000  00133b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000018c 	.word	0x2000018c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d2a8 	.word	0x0800d2a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000190 	.word	0x20000190
 800014c:	0800d2a8 	.word	0x0800d2a8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (64, sizeof(uint8_t), &qUSB_rcv_attributes);
 8000178:	4a16      	ldr	r2, [pc, #88]	; (80001d4 <MX_FREERTOS_Init+0x60>)
 800017a:	2101      	movs	r1, #1
 800017c:	2040      	movs	r0, #64	; 0x40
 800017e:	f009 fd79 	bl	8009c74 <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a14      	ldr	r2, [pc, #80]	; (80001d8 <MX_FREERTOS_Init+0x64>)
 8000186:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000188:	4a14      	ldr	r2, [pc, #80]	; (80001dc <MX_FREERTOS_Init+0x68>)
 800018a:	2100      	movs	r1, #0
 800018c:	4814      	ldr	r0, [pc, #80]	; (80001e0 <MX_FREERTOS_Init+0x6c>)
 800018e:	f009 fc99 	bl	8009ac4 <osThreadNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a13      	ldr	r2, [pc, #76]	; (80001e4 <MX_FREERTOS_Init+0x70>)
 8000196:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 8000198:	4a13      	ldr	r2, [pc, #76]	; (80001e8 <MX_FREERTOS_Init+0x74>)
 800019a:	2100      	movs	r1, #0
 800019c:	4813      	ldr	r0, [pc, #76]	; (80001ec <MX_FREERTOS_Init+0x78>)
 800019e:	f009 fc91 	bl	8009ac4 <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a12      	ldr	r2, [pc, #72]	; (80001f0 <MX_FREERTOS_Init+0x7c>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 80001a8:	4a12      	ldr	r2, [pc, #72]	; (80001f4 <MX_FREERTOS_Init+0x80>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	4812      	ldr	r0, [pc, #72]	; (80001f8 <MX_FREERTOS_Init+0x84>)
 80001ae:	f009 fc89 	bl	8009ac4 <osThreadNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a11      	ldr	r2, [pc, #68]	; (80001fc <MX_FREERTOS_Init+0x88>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* creation of UARTtask */
  UARTtaskHandle = osThreadNew(StartUARTtask, NULL, &UARTtask_attributes);
 80001b8:	4a11      	ldr	r2, [pc, #68]	; (8000200 <MX_FREERTOS_Init+0x8c>)
 80001ba:	2100      	movs	r1, #0
 80001bc:	4811      	ldr	r0, [pc, #68]	; (8000204 <MX_FREERTOS_Init+0x90>)
 80001be:	f009 fc81 	bl	8009ac4 <osThreadNew>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a10      	ldr	r2, [pc, #64]	; (8000208 <MX_FREERTOS_Init+0x94>)
 80001c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <MX_FREERTOS_Init+0x64>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a0f      	ldr	r2, [pc, #60]	; (800020c <MX_FREERTOS_Init+0x98>)
 80001ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001d0:	bf00      	nop
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	0800d568 	.word	0x0800d568
 80001d8:	200020e8 	.word	0x200020e8
 80001dc:	0800d4d8 	.word	0x0800d4d8
 80001e0:	08000211 	.word	0x08000211
 80001e4:	200020d8 	.word	0x200020d8
 80001e8:	0800d4fc 	.word	0x0800d4fc
 80001ec:	08000249 	.word	0x08000249
 80001f0:	200020dc 	.word	0x200020dc
 80001f4:	0800d520 	.word	0x0800d520
 80001f8:	0800027d 	.word	0x0800027d
 80001fc:	200020e4 	.word	0x200020e4
 8000200:	0800d544 	.word	0x0800d544
 8000204:	080002c5 	.word	0x080002c5
 8000208:	200020e0 	.word	0x200020e0
 800020c:	200020ec 	.word	0x200020ec

08000210 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000218:	f00c fb18 	bl	800c84c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000222:	4808      	ldr	r0, [pc, #32]	; (8000244 <StartDefaultTask+0x34>)
 8000224:	f002 fca7 	bl	8002b76 <HAL_GPIO_WritePin>
  osDelay(10);
 8000228:	200a      	movs	r0, #10
 800022a:	f009 fcf5 	bl	8009c18 <osDelay>
  init_microrl();
 800022e:	f001 fe05 	bl	8001e3c <init_microrl>
  set_CDC_ready(); // allow to send
 8000232:	f001 fe3d 	bl	8001eb0 <set_CDC_ready>

  //vTaskDelete(NULL);
  /* Infinite loop */
  for(;;)
  {
	  process_encoder();
 8000236:	f000 f88b 	bl	8000350 <process_encoder>
    osDelay(1);
 800023a:	2001      	movs	r0, #1
 800023c:	f009 fcec 	bl	8009c18 <osDelay>
	  process_encoder();
 8000240:	e7f9      	b.n	8000236 <StartDefaultTask+0x26>
 8000242:	bf00      	nop
 8000244:	40010800 	.word	0x40010800

08000248 <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 8000250:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000254:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 8000256:	f00a fef3 	bl	800b040 <xTaskGetTickCount>
 800025a:	4603      	mov	r3, r0
 800025c:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800025e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000262:	4805      	ldr	r0, [pc, #20]	; (8000278 <StartLEDheartbeat+0x30>)
 8000264:	f002 fc9f 	bl	8002ba6 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000268:	f107 0308 	add.w	r3, r7, #8
 800026c:	68f9      	ldr	r1, [r7, #12]
 800026e:	4618      	mov	r0, r3
 8000270:	f00a fd22 	bl	800acb8 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000274:	e7ef      	b.n	8000256 <StartLEDheartbeat+0xe>
 8000276:	bf00      	nop
 8000278:	40011000 	.word	0x40011000

0800027c <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 8000284:	2000      	movs	r0, #0
 8000286:	f00b f9dd 	bl	800b644 <uxTaskGetStackHighWaterMark>
 800028a:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <StartUSB_rcv+0x44>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f107 010f 	add.w	r1, r7, #15
 8000298:	f04f 32ff 	mov.w	r2, #4294967295
 800029c:	4618      	mov	r0, r3
 800029e:	f00a f927 	bl	800a4f0 <xQueueReceive>
	  microrl_print_char(buf);
 80002a2:	7bfb      	ldrb	r3, [r7, #15]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 fa85 	bl	80017b4 <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80002aa:	2000      	movs	r0, #0
 80002ac:	f00b f9ca 	bl	800b644 <uxTaskGetStackHighWaterMark>
 80002b0:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 80002b2:	693a      	ldr	r2, [r7, #16]
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d2ea      	bcs.n	8000290 <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 80002ba:	693b      	ldr	r3, [r7, #16]
 80002bc:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80002be:	e7e7      	b.n	8000290 <StartUSB_rcv+0x14>
 80002c0:	200020ec 	.word	0x200020ec

080002c4 <StartUARTtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTtask */
void StartUARTtask(void *argument)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  uint8_t data;
  for(;;)
  {
	HAL_UART_Receive_IT(&huart2, &data, 1);
 80002cc:	f107 030f 	add.w	r3, r7, #15
 80002d0:	2201      	movs	r2, #1
 80002d2:	4619      	mov	r1, r3
 80002d4:	4809      	ldr	r0, [pc, #36]	; (80002fc <StartUARTtask+0x38>)
 80002d6:	f005 f984 	bl	80055e2 <HAL_UART_Receive_IT>
	/* Wait to be notified of an interrupt. */
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80002da:	f04f 31ff 	mov.w	r1, #4294967295
 80002de:	2001      	movs	r0, #1
 80002e0:	f00b faac 	bl	800b83c <ulTaskNotifyTake>
	if (get_nema())
 80002e4:	f001 feee 	bl	80020c4 <get_nema>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d0ee      	beq.n	80002cc <StartUARTtask+0x8>
		CDC_Transmit_FS(&data, 1);
 80002ee:	f107 030f 	add.w	r3, r7, #15
 80002f2:	2101      	movs	r1, #1
 80002f4:	4618      	mov	r0, r3
 80002f6:	f00c fb8d 	bl	800ca14 <CDC_Transmit_FS>
	HAL_UART_Receive_IT(&huart2, &data, 1);
 80002fa:	e7e7      	b.n	80002cc <StartUARTtask+0x8>
 80002fc:	2000226c 	.word	0x2000226c

08000300 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <HAL_UART_RxCpltCallback+0x44>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d115      	bne.n	800033c <HAL_UART_RxCpltCallback+0x3c>
		return;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]


   /* Notify the task that the transmission is complete by setting the TX_BIT
   in the task's notification value. */
	vTaskNotifyGiveFromISR( UARTtaskHandle,
 8000314:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <HAL_UART_RxCpltCallback+0x48>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f107 020c 	add.w	r2, r7, #12
 800031c:	4611      	mov	r1, r2
 800031e:	4618      	mov	r0, r3
 8000320:	f00b fad4 	bl	800b8cc <vTaskNotifyGiveFromISR>

   /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
   should be performed to ensure the interrupt returns directly to the highest
   priority task.  The macro used for this purpose is dependent on the port in
   use and may be called portEND_SWITCHING_ISR(). */
   portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d009      	beq.n	800033e <HAL_UART_RxCpltCallback+0x3e>
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <HAL_UART_RxCpltCallback+0x4c>)
 800032c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	f3bf 8f4f 	dsb	sy
 8000336:	f3bf 8f6f 	isb	sy
 800033a:	e000      	b.n	800033e <HAL_UART_RxCpltCallback+0x3e>
		return;
 800033c:	bf00      	nop
}
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	2000226c 	.word	0x2000226c
 8000348:	200020e0 	.word	0x200020e0
 800034c:	e000ed04 	.word	0xe000ed04

08000350 <process_encoder>:

void process_encoder(void)
{
 8000350:	b590      	push	{r4, r7, lr}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (0b10*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800035a:	483b      	ldr	r0, [pc, #236]	; (8000448 <process_encoder+0xf8>)
 800035c:	f002 fbf4 	bl	8002b48 <HAL_GPIO_ReadPin>
 8000360:	4603      	mov	r3, r0
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	b2dc      	uxtb	r4, r3
		   0b01*HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin));
 8000366:	f44f 7100 	mov.w	r1, #512	; 0x200
 800036a:	4837      	ldr	r0, [pc, #220]	; (8000448 <process_encoder+0xf8>)
 800036c:	f002 fbec 	bl	8002b48 <HAL_GPIO_ReadPin>
 8000370:	4603      	mov	r3, r0
	new = (0b10*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000372:	4423      	add	r3, r4
 8000374:	71fb      	strb	r3, [r7, #7]
	switch(old)
 8000376:	4b35      	ldr	r3, [pc, #212]	; (800044c <process_encoder+0xfc>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b03      	cmp	r3, #3
 800037c:	d85d      	bhi.n	800043a <process_encoder+0xea>
 800037e:	a201      	add	r2, pc, #4	; (adr r2, 8000384 <process_encoder+0x34>)
 8000380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000384:	080003bb 	.word	0x080003bb
 8000388:	080003e1 	.word	0x080003e1
 800038c:	08000395 	.word	0x08000395
 8000390:	08000407 	.word	0x08000407
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	2b03      	cmp	r3, #3
 8000398:	d105      	bne.n	80003a6 <process_encoder+0x56>
 800039a:	4b2d      	ldr	r3, [pc, #180]	; (8000450 <process_encoder+0x100>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	3301      	adds	r3, #1
 80003a0:	b29a      	uxth	r2, r3
 80003a2:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <process_encoder+0x100>)
 80003a4:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d13f      	bne.n	800042c <process_encoder+0xdc>
 80003ac:	4b28      	ldr	r3, [pc, #160]	; (8000450 <process_encoder+0x100>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	3b01      	subs	r3, #1
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b26      	ldr	r3, [pc, #152]	; (8000450 <process_encoder+0x100>)
 80003b6:	801a      	strh	r2, [r3, #0]
			break;
 80003b8:	e038      	b.n	800042c <process_encoder+0xdc>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d105      	bne.n	80003cc <process_encoder+0x7c>
 80003c0:	4b23      	ldr	r3, [pc, #140]	; (8000450 <process_encoder+0x100>)
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	4b21      	ldr	r3, [pc, #132]	; (8000450 <process_encoder+0x100>)
 80003ca:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d12e      	bne.n	8000430 <process_encoder+0xe0>
 80003d2:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <process_encoder+0x100>)
 80003d4:	881b      	ldrh	r3, [r3, #0]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	b29a      	uxth	r2, r3
 80003da:	4b1d      	ldr	r3, [pc, #116]	; (8000450 <process_encoder+0x100>)
 80003dc:	801a      	strh	r2, [r3, #0]
			break;
 80003de:	e027      	b.n	8000430 <process_encoder+0xe0>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d105      	bne.n	80003f2 <process_encoder+0xa2>
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <process_encoder+0x100>)
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	3301      	adds	r3, #1
 80003ec:	b29a      	uxth	r2, r3
 80003ee:	4b18      	ldr	r3, [pc, #96]	; (8000450 <process_encoder+0x100>)
 80003f0:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	2b03      	cmp	r3, #3
 80003f6:	d11d      	bne.n	8000434 <process_encoder+0xe4>
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <process_encoder+0x100>)
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	b29a      	uxth	r2, r3
 8000400:	4b13      	ldr	r3, [pc, #76]	; (8000450 <process_encoder+0x100>)
 8000402:	801a      	strh	r2, [r3, #0]
			break;
 8000404:	e016      	b.n	8000434 <process_encoder+0xe4>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d105      	bne.n	8000418 <process_encoder+0xc8>
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <process_encoder+0x100>)
 800040e:	881b      	ldrh	r3, [r3, #0]
 8000410:	3301      	adds	r3, #1
 8000412:	b29a      	uxth	r2, r3
 8000414:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <process_encoder+0x100>)
 8000416:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	2b02      	cmp	r3, #2
 800041c:	d10c      	bne.n	8000438 <process_encoder+0xe8>
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <process_encoder+0x100>)
 8000420:	881b      	ldrh	r3, [r3, #0]
 8000422:	3b01      	subs	r3, #1
 8000424:	b29a      	uxth	r2, r3
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <process_encoder+0x100>)
 8000428:	801a      	strh	r2, [r3, #0]
			break;
 800042a:	e005      	b.n	8000438 <process_encoder+0xe8>
			break;
 800042c:	bf00      	nop
 800042e:	e004      	b.n	800043a <process_encoder+0xea>
			break;
 8000430:	bf00      	nop
 8000432:	e002      	b.n	800043a <process_encoder+0xea>
			break;
 8000434:	bf00      	nop
 8000436:	e000      	b.n	800043a <process_encoder+0xea>
			break;
 8000438:	bf00      	nop
			}
		}
	old = new;
 800043a:	4a04      	ldr	r2, [pc, #16]	; (800044c <process_encoder+0xfc>)
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	7013      	strb	r3, [r2, #0]
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	bd90      	pop	{r4, r7, pc}
 8000448:	40010c00 	.word	0x40010c00
 800044c:	200001aa 	.word	0x200001aa
 8000450:	200001a8 	.word	0x200001a8

08000454 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b088      	sub	sp, #32
 8000458:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000468:	4b48      	ldr	r3, [pc, #288]	; (800058c <MX_GPIO_Init+0x138>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a47      	ldr	r2, [pc, #284]	; (800058c <MX_GPIO_Init+0x138>)
 800046e:	f043 0310 	orr.w	r3, r3, #16
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b45      	ldr	r3, [pc, #276]	; (800058c <MX_GPIO_Init+0x138>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0310 	and.w	r3, r3, #16
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000480:	4b42      	ldr	r3, [pc, #264]	; (800058c <MX_GPIO_Init+0x138>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a41      	ldr	r2, [pc, #260]	; (800058c <MX_GPIO_Init+0x138>)
 8000486:	f043 0320 	orr.w	r3, r3, #32
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b3f      	ldr	r3, [pc, #252]	; (800058c <MX_GPIO_Init+0x138>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0320 	and.w	r3, r3, #32
 8000494:	60bb      	str	r3, [r7, #8]
 8000496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b3c      	ldr	r3, [pc, #240]	; (800058c <MX_GPIO_Init+0x138>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a3b      	ldr	r2, [pc, #236]	; (800058c <MX_GPIO_Init+0x138>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b39      	ldr	r3, [pc, #228]	; (800058c <MX_GPIO_Init+0x138>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	607b      	str	r3, [r7, #4]
 80004ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b0:	4b36      	ldr	r3, [pc, #216]	; (800058c <MX_GPIO_Init+0x138>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a35      	ldr	r2, [pc, #212]	; (800058c <MX_GPIO_Init+0x138>)
 80004b6:	f043 0308 	orr.w	r3, r3, #8
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b33      	ldr	r3, [pc, #204]	; (800058c <MX_GPIO_Init+0x138>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0308 	and.w	r3, r3, #8
 80004c4:	603b      	str	r3, [r7, #0]
 80004c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ce:	4830      	ldr	r0, [pc, #192]	; (8000590 <MX_GPIO_Init+0x13c>)
 80004d0:	f002 fb51 	bl	8002b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004da:	482e      	ldr	r0, [pc, #184]	; (8000594 <MX_GPIO_Init+0x140>)
 80004dc:	f002 fb4b 	bl	8002b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2120      	movs	r1, #32
 80004e4:	482c      	ldr	r0, [pc, #176]	; (8000598 <MX_GPIO_Init+0x144>)
 80004e6:	f002 fb46 	bl	8002b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f0:	2301      	movs	r3, #1
 80004f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f8:	2302      	movs	r3, #2
 80004fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	4619      	mov	r1, r3
 8000502:	4823      	ldr	r0, [pc, #140]	; (8000590 <MX_GPIO_Init+0x13c>)
 8000504:	f002 f99c 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000508:	2301      	movs	r3, #1
 800050a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800050c:	4b23      	ldr	r3, [pc, #140]	; (800059c <MX_GPIO_Init+0x148>)
 800050e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	4619      	mov	r1, r3
 800051a:	481e      	ldr	r0, [pc, #120]	; (8000594 <MX_GPIO_Init+0x140>)
 800051c:	f002 f990 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	2301      	movs	r3, #1
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	2302      	movs	r3, #2
 8000530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	4619      	mov	r1, r3
 8000538:	4816      	ldr	r0, [pc, #88]	; (8000594 <MX_GPIO_Init+0x140>)
 800053a:	f002 f981 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HV_EN_Pin;
 800053e:	2320      	movs	r3, #32
 8000540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	2301      	movs	r3, #1
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2302      	movs	r3, #2
 800054c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HV_EN_GPIO_Port, &GPIO_InitStruct);
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	4619      	mov	r1, r3
 8000554:	4810      	ldr	r0, [pc, #64]	; (8000598 <MX_GPIO_Init+0x144>)
 8000556:	f002 f973 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_s_Pin|enc_a_Pin|enc_b_Pin;
 800055a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000564:	2301      	movs	r3, #1
 8000566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	480a      	ldr	r0, [pc, #40]	; (8000598 <MX_GPIO_Init+0x144>)
 8000570:	f002 f966 	bl	8002840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2105      	movs	r1, #5
 8000578:	2006      	movs	r0, #6
 800057a:	f002 f886 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800057e:	2006      	movs	r0, #6
 8000580:	f002 f89f 	bl	80026c2 <HAL_NVIC_EnableIRQ>

}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	40011000 	.word	0x40011000
 8000594:	40010800 	.word	0x40010800
 8000598:	40010c00 	.word	0x40010c00
 800059c:	10110000 	.word	0x10110000

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f001 ff8a 	bl	80024bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f80d 	bl	80005c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f7ff ff52 	bl	8000454 <MX_GPIO_Init>
  MX_SPI2_Init();
 80005b0:	f001 fd92 	bl	80020d8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005b4:	f001 fee0 	bl	8002378 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80005b8:	f009 fa1e 	bl	80099f8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80005bc:	f7ff fdda 	bl	8000174 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80005c0:	f009 fa4c 	bl	8009a5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <main+0x24>

080005c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b094      	sub	sp, #80	; 0x50
 80005ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005d0:	2228      	movs	r2, #40	; 0x28
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f00c fe47 	bl	800d268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f6:	2301      	movs	r3, #1
 80005f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000600:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000604:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000606:	2301      	movs	r3, #1
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000614:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800061e:	4618      	mov	r0, r3
 8000620:	f003 ffc2 	bl	80045a8 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x68>
  {
    Error_Handler();
 800062a:	f000 f839 	bl	80006a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2102      	movs	r1, #2
 800064a:	4618      	mov	r0, r3
 800064c:	f004 fa2c 	bl	8004aa8 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000656:	f000 f823 	bl	80006a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800065a:	2310      	movs	r3, #16
 800065c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4618      	mov	r0, r3
 8000666:	f004 fbeb 	bl	8004e40 <HAL_RCCEx_PeriphCLKConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000670:	f000 f816 	bl	80006a0 <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3750      	adds	r7, #80	; 0x50
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d101      	bne.n	8000692 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800068e:	f001 ff2b 	bl	80024e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40012c00 	.word	0x40012c00

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <Error_Handler+0x8>

080006aa <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 80006aa:	b480      	push	{r7}
 80006ac:	b085      	sub	sp, #20
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	5c8a      	ldrb	r2, [r1, r2]
 80006be:	4413      	add	r3, r2
 80006c0:	3301      	adds	r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b3f      	cmp	r3, #63	; 0x3f
 80006c8:	dd02      	ble.n	80006d0 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	3b40      	subs	r3, #64	; 0x40
 80006ce:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	5cd3      	ldrb	r3, [r2, r3]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d101      	bne.n	80006fa <hist_is_space_for_new+0x1a>
		return true;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e01e      	b.n	8000738 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	429a      	cmp	r2, r3
 8000704:	db0c      	blt.n	8000720 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070a:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	4413      	add	r3, r2
 8000714:	3b01      	subs	r3, #1
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	429a      	cmp	r2, r3
 800071a:	da0c      	bge.n	8000736 <hist_is_space_for_new+0x56>
			return true;
 800071c:	2301      	movs	r3, #1
 800071e:	e00b      	b.n	8000738 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	3b01      	subs	r3, #1
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	429a      	cmp	r2, r3
 8000730:	da01      	bge.n	8000736 <hist_is_space_for_new+0x56>
			return true;
 8000732:	2301      	movs	r3, #1
 8000734:	e000      	b.n	8000738 <hist_is_space_for_new+0x58>
	}
	return false;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b086      	sub	sp, #24
 8000746:	af00      	add	r7, sp, #0
 8000748:	60f8      	str	r0, [r7, #12]
 800074a:	60b9      	str	r1, [r7, #8]
 800074c:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b3e      	cmp	r3, #62	; 0x3e
 8000752:	dc61      	bgt.n	8000818 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8000754:	e002      	b.n	800075c <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f7ff ffa7 	bl	80006aa <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f7ff ffbe 	bl	80006e0 <hist_is_space_for_new>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d0f5      	beq.n	8000756 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	5cd3      	ldrb	r3, [r2, r3]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d105      	bne.n	8000782 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	b2d1      	uxtb	r1, r2
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	429a      	cmp	r2, r3
 800078e:	da0a      	bge.n	80007a6 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	3301      	adds	r3, #1
 8000798:	4413      	add	r3, r2
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	4618      	mov	r0, r3
 80007a0:	f00c fd3a 	bl	800d218 <memcpy>
 80007a4:	e018      	b.n	80007d8 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80007ae:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	3301      	adds	r3, #1
 80007b8:	4413      	add	r3, r2
 80007ba:	697a      	ldr	r2, [r7, #20]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	4618      	mov	r0, r3
 80007c0:	f00c fd2a 	bl	800d218 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 80007c4:	68f8      	ldr	r0, [r7, #12]
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	18d1      	adds	r1, r2, r3
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	461a      	mov	r2, r3
 80007d4:	f00c fd20 	bl	800d218 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	b2d1      	uxtb	r1, r2
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	2b3f      	cmp	r3, #63	; 0x3f
 80007f8:	dd05      	ble.n	8000806 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	2100      	movs	r1, #0
 800080e:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2200      	movs	r2, #0
 8000814:	649a      	str	r2, [r3, #72]	; 0x48
 8000816:	e000      	b.n	800081a <hist_save_line+0xd8>
		return;
 8000818:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8000836:	e010      	b.n	800085a <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083c:	4413      	add	r3, r2
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000844:	4413      	add	r3, r2
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8000848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084a:	2b3f      	cmp	r3, #63	; 0x3f
 800084c:	dd02      	ble.n	8000854 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 800084e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000850:	3b40      	subs	r3, #64	; 0x40
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8000854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000856:	3301      	adds	r3, #1
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800085e:	4413      	add	r3, r2
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1e8      	bne.n	8000838 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d176      	bne.n	800095a <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000872:	429a      	cmp	r2, r3
 8000874:	f2c0 80d6 	blt.w	8000a24 <hist_restore_line+0x204>
			int header = pThis->begin;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000882:	e010      	b.n	80008a6 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	3301      	adds	r3, #1
 800088e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000890:	4413      	add	r3, r2
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8000894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000896:	2b3f      	cmp	r3, #63	; 0x3f
 8000898:	dd02      	ble.n	80008a0 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 800089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089c:	3b40      	subs	r3, #64	; 0x40
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 80008a0:	6a3b      	ldr	r3, [r7, #32]
 80008a2:	3301      	adds	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008aa:	4413      	add	r3, r2
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d007      	beq.n	80008c2 <hist_restore_line+0xa2>
 80008b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008b4:	6a3b      	ldr	r3, [r7, #32]
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	1e5a      	subs	r2, r3, #1
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008be:	429a      	cmp	r2, r3
 80008c0:	d1e0      	bne.n	8000884 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f000 80aa 	beq.w	8000a24 <hist_restore_line+0x204>
					pThis->cur++;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	4413      	add	r3, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	4413      	add	r3, r2
 80008e8:	2b3f      	cmp	r3, #63	; 0x3f
 80008ea:	dc11      	bgt.n	8000910 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 80008ec:	2233      	movs	r2, #51	; 0x33
 80008ee:	2100      	movs	r1, #0
 80008f0:	68b8      	ldr	r0, [r7, #8]
 80008f2:	f00c fcb9 	bl	800d268 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	3301      	adds	r3, #1
 80008fc:	18d1      	adds	r1, r2, r3
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	4413      	add	r3, r2
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	461a      	mov	r2, r3
 8000908:	68b8      	ldr	r0, [r7, #8]
 800090a:	f00c fc85 	bl	800d218 <memcpy>
 800090e:	e01f      	b.n	8000950 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8000910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000912:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000916:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8000918:	2233      	movs	r2, #51	; 0x33
 800091a:	2100      	movs	r1, #0
 800091c:	68b8      	ldr	r0, [r7, #8]
 800091e:	f00c fca3 	bl	800d268 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000926:	3301      	adds	r3, #1
 8000928:	4413      	add	r3, r2
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4619      	mov	r1, r3
 800092e:	68b8      	ldr	r0, [r7, #8]
 8000930:	f00c fc72 	bl	800d218 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	18d0      	adds	r0, r2, r3
 800093a:	68f9      	ldr	r1, [r7, #12]
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	461a      	mov	r2, r3
 800094c:	f00c fc64 	bl	800d218 <memcpy>
				}
				return pThis->ring_buf[header];
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	e066      	b.n	8000a28 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800095e:	2b00      	cmp	r3, #0
 8000960:	dd5e      	ble.n	8000a20 <hist_restore_line+0x200>
				pThis->cur--;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000966:	1e5a      	subs	r2, r3, #1
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8000976:	e010      	b.n	800099a <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	3301      	adds	r3, #1
 8000982:	69fa      	ldr	r2, [r7, #28]
 8000984:	4413      	add	r3, r2
 8000986:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	2b3f      	cmp	r3, #63	; 0x3f
 800098c:	dd02      	ble.n	8000994 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3b40      	subs	r3, #64	; 0x40
 8000992:	61fb      	str	r3, [r7, #28]
				j++;
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	3301      	adds	r3, #1
 8000998:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	4413      	add	r3, r2
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d006      	beq.n	80009b4 <hist_restore_line+0x194>
 80009a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	1ad2      	subs	r2, r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d1e1      	bne.n	8000978 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	4413      	add	r3, r2
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	4413      	add	r3, r2
 80009c2:	2b3f      	cmp	r3, #63	; 0x3f
 80009c4:	dc0c      	bgt.n	80009e0 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	3301      	adds	r3, #1
 80009cc:	18d1      	adds	r1, r2, r3
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	4413      	add	r3, r2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	68b8      	ldr	r0, [r7, #8]
 80009da:	f00c fc1d 	bl	800d218 <memcpy>
 80009de:	e01a      	b.n	8000a16 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80009e6:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4413      	add	r3, r2
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	4619      	mov	r1, r3
 80009f4:	68b8      	ldr	r0, [r7, #8]
 80009f6:	f00c fc0f 	bl	800d218 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	18d0      	adds	r0, r2, r3
 8000a00:	68f9      	ldr	r1, [r7, #12]
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	4413      	add	r3, r2
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f00c fc01 	bl	800d218 <memcpy>
			}
			return pThis->ring_buf[header];
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	e003      	b.n	8000a28 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	e001      	b.n	8000a28 <hist_restore_line+0x208>
		}
	}
	return -1;
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3730      	adds	r7, #48	; 0x30
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8000a44:	e002      	b.n	8000a4c <split+0x1c>
			ind++;
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	4413      	add	r3, r2
 8000a52:	3354      	adds	r3, #84	; 0x54
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d103      	bne.n	8000a62 <split+0x32>
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	dbf1      	blt.n	8000a46 <split+0x16>
		}
		if (!(ind < limit)) return i;
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	db01      	blt.n	8000a6e <split+0x3e>
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	e024      	b.n	8000ab8 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	1c58      	adds	r0, r3, #1
 8000a7a:	6178      	str	r0, [r7, #20]
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	4403      	add	r3, r0
 8000a82:	440a      	add	r2, r1
 8000a84:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	dd05      	ble.n	8000a98 <split+0x68>
			return -1;
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a90:	e012      	b.n	8000ab8 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	3301      	adds	r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	3354      	adds	r3, #84	; 0x54
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <split+0x7e>
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	dbf1      	blt.n	8000a92 <split+0x62>
		}
		if (!(ind < limit)) return i;
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	dbca      	blt.n	8000a4c <split+0x1c>
 8000ab6:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	371c      	adds	r7, #28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr

08000ac2 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000ad4:	4610      	mov	r0, r2
 8000ad6:	4798      	blx	r3
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000aee:	4803      	ldr	r0, [pc, #12]	; (8000afc <terminal_backspace+0x1c>)
 8000af0:	4798      	blx	r3
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	0800d310 	.word	0x0800d310

08000b00 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <terminal_newline+0x1c>)
 8000b10:	4798      	blx	r3
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	0800d318 	.word	0x0800d318

08000b20 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b087      	sub	sp, #28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b3c:	d235      	bcs.n	8000baa <u16bit_to_str+0x8a>
		while (nmb > 0) {
 8000b3e:	e01a      	b.n	8000b76 <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <u16bit_to_str+0x9c>)
 8000b44:	fba3 2301 	umull	r2, r3, r3, r1
 8000b48:	08da      	lsrs	r2, r3, #3
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	1aca      	subs	r2, r1, r3
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	1c59      	adds	r1, r3, #1
 8000b5a:	6179      	str	r1, [r7, #20]
 8000b5c:	3230      	adds	r2, #48	; 0x30
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	f107 0118 	add.w	r1, r7, #24
 8000b64:	440b      	add	r3, r1
 8000b66:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <u16bit_to_str+0x9c>)
 8000b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1e1      	bne.n	8000b40 <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	e00f      	b.n	8000ba2 <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	1e5a      	subs	r2, r3, #1
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	1c59      	adds	r1, r3, #1
 8000b8e:	6039      	str	r1, [r7, #0]
 8000b90:	f107 0118 	add.w	r1, r7, #24
 8000b94:	440a      	add	r2, r1
 8000b96:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8000b9a:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	dbeb      	blt.n	8000b82 <u16bit_to_str+0x62>
	}
	*buf = '\0';
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
	return buf;
 8000bb0:	683b      	ldr	r3, [r7, #0]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	cccccccd 	.word	0xcccccccd

08000bc0 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <terminal_move_cursor+0x94>)
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	4611      	mov	r1, r2
 8000be4:	8019      	strh	r1, [r3, #0]
 8000be6:	3302      	adds	r3, #2
 8000be8:	0c12      	lsrs	r2, r2, #16
 8000bea:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	dd0f      	ble.n	8000c12 <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	f7ff ff8f 	bl	8000b20 <u16bit_to_str>
 8000c02:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	4914      	ldr	r1, [pc, #80]	; (8000c58 <terminal_move_cursor+0x98>)
 8000c08:	461a      	mov	r2, r3
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	8013      	strh	r3, [r2, #0]
 8000c10:	e013      	b.n	8000c3a <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	da18      	bge.n	8000c4a <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	425b      	negs	r3, r3
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	3302      	adds	r3, #2
 8000c24:	4619      	mov	r1, r3
 8000c26:	4610      	mov	r0, r2
 8000c28:	f7ff ff7a 	bl	8000b20 <u16bit_to_str>
 8000c2c:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	490a      	ldr	r1, [pc, #40]	; (8000c5c <terminal_move_cursor+0x9c>)
 8000c32:	461a      	mov	r2, r3
 8000c34:	460b      	mov	r3, r1
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c40:	f107 020c 	add.w	r2, r7, #12
 8000c44:	4610      	mov	r0, r2
 8000c46:	4798      	blx	r3
 8000c48:	e000      	b.n	8000c4c <terminal_move_cursor+0x8c>
		return;
 8000c4a:	bf00      	nop
}
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	0800d31c 	.word	0x0800d31c
 8000c58:	0800d320 	.word	0x0800d320
 8000c5c:	0800d324 	.word	0x0800d324

08000c60 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <terminal_reset_cursor+0x64>)
 8000c6e:	6812      	ldr	r2, [r2, #0]
 8000c70:	4611      	mov	r1, r2
 8000c72:	8019      	strh	r1, [r3, #0]
 8000c74:	3302      	adds	r3, #2
 8000c76:	0c12      	lsrs	r2, r2, #16
 8000c78:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	3302      	adds	r3, #2
 8000c80:	4619      	mov	r1, r3
 8000c82:	203a      	movs	r0, #58	; 0x3a
 8000c84:	f7ff ff4c 	bl	8000b20 <u16bit_to_str>
 8000c88:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <terminal_reset_cursor+0x68>)
 8000c8e:	6810      	ldr	r0, [r2, #0]
 8000c90:	6018      	str	r0, [r3, #0]
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3303      	adds	r3, #3
 8000c96:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8000c98:	69f9      	ldr	r1, [r7, #28]
 8000c9a:	2005      	movs	r0, #5
 8000c9c:	f7ff ff40 	bl	8000b20 <u16bit_to_str>
 8000ca0:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	4909      	ldr	r1, [pc, #36]	; (8000ccc <terminal_reset_cursor+0x6c>)
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	460b      	mov	r3, r1
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cb4:	f107 020c 	add.w	r2, r7, #12
 8000cb8:	4610      	mov	r0, r2
 8000cba:	4798      	blx	r3
}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	0800d31c 	.word	0x0800d31c
 8000cc8:	0800d328 	.word	0x0800d328
 8000ccc:	0800d320 	.word	0x0800d320

08000cd0 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ce2:	4816      	ldr	r0, [pc, #88]	; (8000d3c <terminal_print_line+0x6c>)
 8000ce4:	4798      	blx	r3

	char nch [] = {0,0};
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e014      	b.n	8000d1a <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	3354      	adds	r3, #84	; 0x54
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8000cfc:	7c3b      	ldrb	r3, [r7, #16]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <terminal_print_line+0x36>
			nch[0] = ' ';
 8000d02:	2320      	movs	r3, #32
 8000d04:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d0c:	f107 0210 	add.w	r2, r7, #16
 8000d10:	4610      	mov	r0, r2
 8000d12:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	3301      	adds	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	dbe4      	blt.n	8000cf0 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	f7ff ff9a 	bl	8000c60 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f7ff ff46 	bl	8000bc0 <terminal_move_cursor>
}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	0800d32c 	.word	0x0800d32c

08000d40 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3354      	adds	r3, #84	; 0x54
 8000d4e:	2233      	movs	r2, #51	; 0x33
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f00c fa88 	bl	800d268 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3304      	adds	r3, #4
 8000d5c:	2240      	movs	r2, #64	; 0x40
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f00c fa81 	bl	800d268 <memset>
	pThis->ring_hist.begin = 0;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <microrl_init+0x78>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000000 	.word	0x20000000

08000dbc <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	1d18      	adds	r0, r3, #4
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3354      	adds	r3, #84	; 0x54
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f7ff fcfb 	bl	8000820 <hist_restore_line>
 8000e2a:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db1a      	blt.n	8000e68 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	3354      	adds	r3, #84	; 0x54
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff04 	bl	8000c60 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e5e:	461a      	mov	r2, r3
 8000e60:	2100      	movs	r1, #0
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ff34 	bl	8000cd0 <terminal_print_line>
	}
}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	2b5b      	cmp	r3, #91	; 0x5b
 8000e80:	d104      	bne.n	8000e8c <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	701a      	strb	r2, [r3, #0]
		return 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	e07b      	b.n	8000f84 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d14f      	bne.n	8000f34 <escape_process+0xc4>
		if (ch == 'A') {
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	2b41      	cmp	r3, #65	; 0x41
 8000e98:	d105      	bne.n	8000ea6 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ffb7 	bl	8000e10 <hist_search>
#endif
			return 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e06e      	b.n	8000f84 <escape_process+0x114>
		} else if (ch == 'B') {
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	2b42      	cmp	r3, #66	; 0x42
 8000eaa:	d105      	bne.n	8000eb8 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8000eac:	2101      	movs	r1, #1
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffae 	bl	8000e10 <hist_search>
#endif
			return 1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e065      	b.n	8000f84 <escape_process+0x114>
		} else if (ch == 'C') {
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	2b43      	cmp	r3, #67	; 0x43
 8000ebc:	d114      	bne.n	8000ee8 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	da0a      	bge.n	8000ee4 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 8000ece:	2101      	movs	r1, #1
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff fe75 	bl	8000bc0 <terminal_move_cursor>
				pThis->cursor++;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000edc:	1c5a      	adds	r2, r3, #1
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e04d      	b.n	8000f84 <escape_process+0x114>
		} else if (ch == 'D') {
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	2b44      	cmp	r3, #68	; 0x44
 8000eec:	d112      	bne.n	8000f14 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	dd0b      	ble.n	8000f10 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff fe5f 	bl	8000bc0 <terminal_move_cursor>
				pThis->cursor--;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f08:	1e5a      	subs	r2, r3, #1
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e037      	b.n	8000f84 <escape_process+0x114>
		} else if (ch == '7') {
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	2b37      	cmp	r3, #55	; 0x37
 8000f18:	d104      	bne.n	8000f24 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	701a      	strb	r2, [r3, #0]
			return 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	e02f      	b.n	8000f84 <escape_process+0x114>
		} else if (ch == '8') {
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	2b38      	cmp	r3, #56	; 0x38
 8000f28:	d12b      	bne.n	8000f82 <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	701a      	strb	r2, [r3, #0]
			return 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	e027      	b.n	8000f84 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8000f34:	78fb      	ldrb	r3, [r7, #3]
 8000f36:	2b7e      	cmp	r3, #126	; 0x7e
 8000f38:	d123      	bne.n	8000f82 <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d108      	bne.n	8000f54 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff fe8c 	bl	8000c60 <terminal_reset_cursor>
			pThis->cursor = 0;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e017      	b.n	8000f84 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d112      	bne.n	8000f82 <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff fe27 	bl	8000bc0 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	2b32      	cmp	r3, #50	; 0x32
 8000fa4:	dc60      	bgt.n	8001068 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	440b      	add	r3, r1
 8000fb8:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3354      	adds	r3, #84	; 0x54
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 8000fc4:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fd2:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f00c f92d 	bl	800d234 <memmove>
		for (i = 0; i < len; i++) {
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	e025      	b.n	800102c <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	441a      	add	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	440b      	add	r3, r1
 8000ff0:	7811      	ldrb	r1, [r2, #0]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	4413      	add	r3, r2
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800100e:	2b20      	cmp	r3, #32
 8001010:	d109      	bne.n	8001026 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	4413      	add	r3, r2
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbd5      	blt.n	8000fe0 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	441a      	add	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	441a      	add	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4413      	add	r3, r2
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <microrl_insert_text+0xde>
	}
	return false;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001080:	2b00      	cmp	r3, #0
 8001082:	dd31      	ble.n	80010e8 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff fd2b 	bl	8000ae0 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001096:	3b01      	subs	r3, #1
 8001098:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3354      	adds	r3, #84	; 0x54
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 80010a4:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 80010b6:	461a      	mov	r2, r3
 80010b8:	f00c f8bc 	bl	800d234 <memmove>
		pThis->cursor--;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010c2:	1e5a      	subs	r2, r3, #1
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	4413      	add	r3, r2
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e0:	1e5a      	subs	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f7ff f830 	bl	8000164 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	e019      	b.n	8001142 <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f823 	bl	8000164 <strlen>
 800111e:	4602      	mov	r2, r0
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	429a      	cmp	r2, r3
 8001124:	d20a      	bcs.n	800113c <common_len+0x4c>
			shortest = arr[i];
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff f816 	bl	8000164 <strlen>
 8001138:	4603      	mov	r3, r0
 800113a:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	3301      	adds	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1de      	bne.n	800110e <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	e01f      	b.n	8001196 <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	e012      	b.n	8001182 <common_len+0x92>
			if (shortest[i] != arr[j][i])
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4413      	add	r3, r2
 8001162:	781a      	ldrb	r2, [r3, #0]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	440b      	add	r3, r1
 800116c:	6819      	ldr	r1, [r3, #0]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	440b      	add	r3, r1
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <common_len+0x8c>
				return i;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	e011      	b.n	80011a0 <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	3301      	adds	r3, #1
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1e5      	bne.n	800115c <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	3301      	adds	r3, #1
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	429a      	cmp	r2, r3
 800119c:	dbdb      	blt.n	8001156 <common_len+0x66>

	return i;
 800119e:	697b      	ldr	r3, [r7, #20]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 809c 	beq.w	80012f4 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011c2:	f107 020c 	add.w	r2, r7, #12
 80011c6:	4619      	mov	r1, r3
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fc31 	bl	8000a30 <split>
 80011ce:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011d6:	3b01      	subs	r3, #1
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d109      	bne.n	80011f8 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 80011e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80011f0:	4413      	add	r3, r2
 80011f2:	4a42      	ldr	r2, [pc, #264]	; (80012fc <microrl_get_complite+0x154>)
 80011f4:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011fe:	f107 020c 	add.w	r2, r7, #12
 8001202:	4611      	mov	r1, r2
 8001204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001206:	4798      	blx	r3
 8001208:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d071      	beq.n	80012f6 <microrl_get_complite+0x14e>
		int i = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	3304      	adds	r3, #4
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d107      	bne.n	8001230 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7fe ff9d 	bl	8000164 <strlen>
 800122a:	4603      	mov	r3, r0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
 800122e:	e026      	b.n	800127e <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001230:	6a38      	ldr	r0, [r7, #32]
 8001232:	f7ff ff5d 	bl	80010f0 <common_len>
 8001236:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff fc61 	bl	8000b00 <terminal_newline>
			while (compl_token [i] != NULL) {
 800123e:	e011      	b.n	8001264 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001248:	0092      	lsls	r2, r2, #2
 800124a:	6a39      	ldr	r1, [r7, #32]
 800124c:	440a      	add	r2, r1
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	4610      	mov	r0, r2
 8001252:	4798      	blx	r3
				pThis->print (" ");
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800125a:	4829      	ldr	r0, [pc, #164]	; (8001300 <microrl_get_complite+0x158>)
 800125c:	4798      	blx	r3
				i++;
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	3301      	adds	r3, #1
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 8001264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	6a3a      	ldr	r2, [r7, #32]
 800126a:	4413      	add	r3, r2
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1e6      	bne.n	8001240 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fc44 	bl	8000b00 <terminal_newline>
			print_prompt (pThis);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fc22 	bl	8000ac2 <print_prompt>
		}
		
		if (len) {
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	2b00      	cmp	r3, #0
 8001282:	d02b      	beq.n	80012dc <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	681c      	ldr	r4, [r3, #0]
 8001288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128a:	3b01      	subs	r3, #1
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001292:	4413      	add	r3, r2
 8001294:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001298:	4618      	mov	r0, r3
 800129a:	f7fe ff63 	bl	8000164 <strlen>
 800129e:	4603      	mov	r3, r0
 80012a0:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 80012a2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80012a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a6:	3b01      	subs	r3, #1
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80012ae:	4413      	add	r3, r2
 80012b0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7fe ff55 	bl	8000164 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 80012be:	461a      	mov	r2, r3
 80012c0:	4629      	mov	r1, r5
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fe62 	bl	8000f8c <microrl_insert_text>
			if (compl_token[1] == NULL) 
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	3304      	adds	r3, #4
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d104      	bne.n	80012dc <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 80012d2:	2201      	movs	r2, #1
 80012d4:	490a      	ldr	r1, [pc, #40]	; (8001300 <microrl_get_complite+0x158>)
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fe58 	bl	8000f8c <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fcbf 	bl	8000c60 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012e8:	461a      	mov	r2, r3
 80012ea:	2100      	movs	r1, #0
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fcef 	bl	8000cd0 <terminal_print_line>
 80012f2:	e000      	b.n	80012f6 <microrl_get_complite+0x14e>
		return;
 80012f4:	bf00      	nop
	} 
}
 80012f6:	3730      	adds	r7, #48	; 0x30
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bdb0      	pop	{r4, r5, r7, pc}
 80012fc:	0800d330 	.word	0x0800d330
 8001300:	0800d334 	.word	0x0800d334

08001304 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fbf7 	bl	8000b00 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001318:	2b00      	cmp	r3, #0
 800131a:	dd0a      	ble.n	8001332 <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	1d18      	adds	r0, r3, #4
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132c:	461a      	mov	r2, r3
 800132e:	f7ff fa08 	bl	8000742 <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001338:	f107 0208 	add.w	r2, r7, #8
 800133c:	4619      	mov	r1, r3
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fb76 	bl	8000a30 <split>
 8001344:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134c:	d109      	bne.n	8001362 <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001354:	4817      	ldr	r0, [pc, #92]	; (80013b4 <new_line_handler+0xb0>)
 8001356:	4798      	blx	r3
		pThis->print (ENDL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800135e:	4816      	ldr	r0, [pc, #88]	; (80013b8 <new_line_handler+0xb4>)
 8001360:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	2b00      	cmp	r3, #0
 8001366:	dd0c      	ble.n	8001382 <new_line_handler+0x7e>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001378:	f107 0208 	add.w	r2, r7, #8
 800137c:	4611      	mov	r1, r2
 800137e:	69f8      	ldr	r0, [r7, #28]
 8001380:	4798      	blx	r3
	print_prompt (pThis);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fb9d 	bl	8000ac2 <print_prompt>
	pThis->cmdlen = 0;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3354      	adds	r3, #84	; 0x54
 800139c:	2233      	movs	r2, #51	; 0x33
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f00b ff61 	bl	800d268 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	0800d338 	.word	0x0800d338
 80013b8:	0800d318 	.word	0x0800d318

080013bc <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00d      	beq.n	80013ea <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	4619      	mov	r1, r3
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fd4b 	bl	8000e70 <escape_process>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 81e3 	beq.w	80017a8 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 80013e8:	e1de      	b.n	80017a8 <microrl_insert_char+0x3ec>
		switch (ch) {
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	2b7e      	cmp	r3, #126	; 0x7e
 80013f0:	f200 81af 	bhi.w	8001752 <microrl_insert_char+0x396>
 80013f4:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <microrl_insert_char+0x40>)
 80013f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fa:	bf00      	nop
 80013fc:	0800168f 	.word	0x0800168f
 8001400:	080016c7 	.word	0x080016c7
 8001404:	0800173f 	.word	0x0800173f
 8001408:	08001753 	.word	0x08001753
 800140c:	0800166b 	.word	0x0800166b
 8001410:	0800169f 	.word	0x0800169f
 8001414:	08001753 	.word	0x08001753
 8001418:	080016ff 	.word	0x080016ff
 800141c:	08001621 	.word	0x08001621
 8001420:	080015f9 	.word	0x080015f9
 8001424:	08001653 	.word	0x08001653
 8001428:	08001753 	.word	0x08001753
 800142c:	080015f9 	.word	0x080015f9
 8001430:	080016f5 	.word	0x080016f5
 8001434:	08001753 	.word	0x08001753
 8001438:	080016eb 	.word	0x080016eb
 800143c:	08001753 	.word	0x08001753
 8001440:	0800171b 	.word	0x0800171b
 8001444:	08001753 	.word	0x08001753
 8001448:	08001753 	.word	0x08001753
 800144c:	08001637 	.word	0x08001637
 8001450:	08001753 	.word	0x08001753
 8001454:	08001753 	.word	0x08001753
 8001458:	08001753 	.word	0x08001753
 800145c:	08001753 	.word	0x08001753
 8001460:	08001753 	.word	0x08001753
 8001464:	08001629 	.word	0x08001629
 8001468:	08001753 	.word	0x08001753
 800146c:	08001753 	.word	0x08001753
 8001470:	08001753 	.word	0x08001753
 8001474:	08001753 	.word	0x08001753
 8001478:	08001753 	.word	0x08001753
 800147c:	08001753 	.word	0x08001753
 8001480:	08001753 	.word	0x08001753
 8001484:	08001753 	.word	0x08001753
 8001488:	08001753 	.word	0x08001753
 800148c:	08001753 	.word	0x08001753
 8001490:	08001753 	.word	0x08001753
 8001494:	08001753 	.word	0x08001753
 8001498:	08001753 	.word	0x08001753
 800149c:	08001753 	.word	0x08001753
 80014a0:	08001753 	.word	0x08001753
 80014a4:	08001753 	.word	0x08001753
 80014a8:	08001753 	.word	0x08001753
 80014ac:	08001753 	.word	0x08001753
 80014b0:	08001753 	.word	0x08001753
 80014b4:	08001753 	.word	0x08001753
 80014b8:	08001753 	.word	0x08001753
 80014bc:	08001753 	.word	0x08001753
 80014c0:	08001753 	.word	0x08001753
 80014c4:	08001753 	.word	0x08001753
 80014c8:	08001753 	.word	0x08001753
 80014cc:	08001753 	.word	0x08001753
 80014d0:	08001753 	.word	0x08001753
 80014d4:	08001753 	.word	0x08001753
 80014d8:	08001753 	.word	0x08001753
 80014dc:	08001753 	.word	0x08001753
 80014e0:	08001753 	.word	0x08001753
 80014e4:	08001753 	.word	0x08001753
 80014e8:	08001753 	.word	0x08001753
 80014ec:	08001753 	.word	0x08001753
 80014f0:	08001753 	.word	0x08001753
 80014f4:	08001753 	.word	0x08001753
 80014f8:	08001753 	.word	0x08001753
 80014fc:	08001753 	.word	0x08001753
 8001500:	08001753 	.word	0x08001753
 8001504:	08001753 	.word	0x08001753
 8001508:	08001753 	.word	0x08001753
 800150c:	08001753 	.word	0x08001753
 8001510:	08001753 	.word	0x08001753
 8001514:	08001753 	.word	0x08001753
 8001518:	08001753 	.word	0x08001753
 800151c:	08001753 	.word	0x08001753
 8001520:	08001753 	.word	0x08001753
 8001524:	08001753 	.word	0x08001753
 8001528:	08001753 	.word	0x08001753
 800152c:	08001753 	.word	0x08001753
 8001530:	08001753 	.word	0x08001753
 8001534:	08001753 	.word	0x08001753
 8001538:	08001753 	.word	0x08001753
 800153c:	08001753 	.word	0x08001753
 8001540:	08001753 	.word	0x08001753
 8001544:	08001753 	.word	0x08001753
 8001548:	08001753 	.word	0x08001753
 800154c:	08001753 	.word	0x08001753
 8001550:	08001753 	.word	0x08001753
 8001554:	08001753 	.word	0x08001753
 8001558:	08001753 	.word	0x08001753
 800155c:	08001753 	.word	0x08001753
 8001560:	08001753 	.word	0x08001753
 8001564:	08001753 	.word	0x08001753
 8001568:	08001753 	.word	0x08001753
 800156c:	08001753 	.word	0x08001753
 8001570:	08001753 	.word	0x08001753
 8001574:	08001753 	.word	0x08001753
 8001578:	08001753 	.word	0x08001753
 800157c:	08001753 	.word	0x08001753
 8001580:	08001753 	.word	0x08001753
 8001584:	08001753 	.word	0x08001753
 8001588:	08001753 	.word	0x08001753
 800158c:	08001753 	.word	0x08001753
 8001590:	08001753 	.word	0x08001753
 8001594:	08001753 	.word	0x08001753
 8001598:	08001753 	.word	0x08001753
 800159c:	08001753 	.word	0x08001753
 80015a0:	08001753 	.word	0x08001753
 80015a4:	08001753 	.word	0x08001753
 80015a8:	08001753 	.word	0x08001753
 80015ac:	08001753 	.word	0x08001753
 80015b0:	08001753 	.word	0x08001753
 80015b4:	08001753 	.word	0x08001753
 80015b8:	08001753 	.word	0x08001753
 80015bc:	08001753 	.word	0x08001753
 80015c0:	08001753 	.word	0x08001753
 80015c4:	08001753 	.word	0x08001753
 80015c8:	08001753 	.word	0x08001753
 80015cc:	08001753 	.word	0x08001753
 80015d0:	08001753 	.word	0x08001753
 80015d4:	08001753 	.word	0x08001753
 80015d8:	08001753 	.word	0x08001753
 80015dc:	08001753 	.word	0x08001753
 80015e0:	08001753 	.word	0x08001753
 80015e4:	08001753 	.word	0x08001753
 80015e8:	08001753 	.word	0x08001753
 80015ec:	08001753 	.word	0x08001753
 80015f0:	08001753 	.word	0x08001753
 80015f4:	080016ff 	.word	0x080016ff
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	789b      	ldrb	r3, [r3, #2]
 80015fc:	461a      	mov	r2, r3
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	2b0d      	cmp	r3, #13
 8001602:	d101      	bne.n	8001608 <microrl_insert_char+0x24c>
 8001604:	230a      	movs	r3, #10
 8001606:	e000      	b.n	800160a <microrl_insert_char+0x24e>
 8001608:	230d      	movs	r3, #13
 800160a:	4293      	cmp	r3, r2
 800160c:	f000 80c1 	beq.w	8001792 <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fe73 	bl	8001304 <new_line_handler>
				break;
 800161e:	e0c3      	b.n	80017a8 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fdc1 	bl	80011a8 <microrl_get_complite>
			break;
 8001626:	e0bf      	b.n	80017a8 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	705a      	strb	r2, [r3, #1]
			break;
 800162e:	e0bb      	b.n	80017a8 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fd1e 	bl	8001072 <microrl_backspace>
					while (pThis->cursor > 0) {
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800163c:	2b00      	cmp	r3, #0
 800163e:	dcf7      	bgt.n	8001630 <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001646:	461a      	mov	r2, r3
 8001648:	2100      	movs	r1, #0
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fb40 	bl	8000cd0 <terminal_print_line>
			break;
 8001650:	e0aa      	b.n	80017a8 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001658:	4855      	ldr	r0, [pc, #340]	; (80017b0 <microrl_insert_char+0x3f4>)
 800165a:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8001668:	e09e      	b.n	80017a8 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	4619      	mov	r1, r3
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff faa0 	bl	8000bc0 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800168c:	e08c      	b.n	80017a8 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fae6 	bl	8000c60 <terminal_reset_cursor>
				pThis->cursor = 0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800169c:	e084      	b.n	80017a8 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016aa:	429a      	cmp	r2, r3
 80016ac:	da73      	bge.n	8001796 <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 80016ae:	2101      	movs	r1, #1
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fa85 	bl	8000bc0 <terminal_move_cursor>
				pThis->cursor++;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80016c4:	e067      	b.n	8001796 <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d064      	beq.n	800179a <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fa73 	bl	8000bc0 <terminal_move_cursor>
				pThis->cursor--;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016e0:	1e5a      	subs	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80016e8:	e057      	b.n	800179a <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 80016ea:	2100      	movs	r1, #0
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fb8f 	bl	8000e10 <hist_search>
			break;
 80016f2:	e059      	b.n	80017a8 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 80016f4:	2101      	movs	r1, #1
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fb8a 	bl	8000e10 <hist_search>
			break;
 80016fc:	e054      	b.n	80017a8 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fcb7 	bl	8001072 <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001710:	461a      	mov	r2, r3
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fadc 	bl	8000cd0 <terminal_print_line>
			break;
 8001718:	e046      	b.n	80017a8 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff f9f0 	bl	8000b00 <terminal_newline>
				print_prompt (pThis);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff f9ce 	bl	8000ac2 <print_prompt>
				terminal_reset_cursor (pThis);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fa9a 	bl	8000c60 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001732:	461a      	mov	r2, r3
 8001734:	2100      	movs	r1, #0
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff faca 	bl	8000cd0 <terminal_print_line>
			break;
 800173c:	e034      	b.n	80017a8 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001744:	2b00      	cmp	r3, #0
 8001746:	d02a      	beq.n	800179e <microrl_insert_char+0x3e2>
				pThis->sigint();
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800174e:	4798      	blx	r3
			break;
 8001750:	e025      	b.n	800179e <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b20      	cmp	r3, #32
 8001756:	d104      	bne.n	8001762 <microrl_insert_char+0x3a6>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175e:	2b00      	cmp	r3, #0
 8001760:	d01f      	beq.n	80017a2 <microrl_insert_char+0x3e6>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b1f      	cmp	r3, #31
 8001766:	dd1c      	ble.n	80017a2 <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8001768:	463b      	mov	r3, r7
 800176a:	2201      	movs	r2, #1
 800176c:	4619      	mov	r1, r3
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fc0c 	bl	8000f8c <microrl_insert_text>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d015      	beq.n	80017a6 <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001780:	1e59      	subs	r1, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001788:	461a      	mov	r2, r3
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff faa0 	bl	8000cd0 <terminal_print_line>
			break;
 8001790:	e009      	b.n	80017a6 <microrl_insert_char+0x3ea>
					break;
 8001792:	bf00      	nop
 8001794:	e008      	b.n	80017a8 <microrl_insert_char+0x3ec>
			break;
 8001796:	bf00      	nop
 8001798:	e006      	b.n	80017a8 <microrl_insert_char+0x3ec>
			break;
 800179a:	bf00      	nop
 800179c:	e004      	b.n	80017a8 <microrl_insert_char+0x3ec>
			break;
 800179e:	bf00      	nop
 80017a0:	e002      	b.n	80017a8 <microrl_insert_char+0x3ec>
	}
 80017a2:	bf00      	nop
 80017a4:	e000      	b.n	80017a8 <microrl_insert_char+0x3ec>
			break;
 80017a6:	bf00      	nop
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	0800d32c 	.word	0x0800d32c

080017b4 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <microrl_print_char+0x20>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	79fa      	ldrb	r2, [r7, #7]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fdf8 	bl	80013bc <microrl_insert_char>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000004 	.word	0x20000004

080017d8 <print>:

void print (const char * str)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <print+0x84>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	f083 0301 	eor.w	r3, r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <print+0x1e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b1b      	cmp	r3, #27
 80017f4:	d02b      	beq.n	800184e <print+0x76>
		return;
	if (!CDC_is_ready)
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <print+0x88>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	f083 0301 	eor.w	r3, r3, #1
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d126      	bne.n	8001852 <print+0x7a>
		return;
	uint16_t len = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 8001808:	89fb      	ldrh	r3, [r7, #14]
 800180a:	3301      	adds	r3, #1
 800180c:	81fb      	strh	r3, [r7, #14]
 800180e:	89fb      	ldrh	r3, [r7, #14]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f6      	bne.n	8001808 <print+0x30>
	uint32_t timeout = HAL_GetTick();
 800181a:	f000 fe77 	bl	800250c <HAL_GetTick>
 800181e:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001820:	e006      	b.n	8001830 <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 8001822:	f000 fe73 	bl	800250c <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b04      	cmp	r3, #4
 800182e:	d807      	bhi.n	8001840 <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <print+0x8c>)
 8001832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001836:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f1      	bne.n	8001822 <print+0x4a>
 800183e:	e000      	b.n	8001842 <print+0x6a>
			break;
 8001840:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 8001842:	89fb      	ldrh	r3, [r7, #14]
 8001844:	4619      	mov	r1, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f00b f8e4 	bl	800ca14 <CDC_Transmit_FS>
 800184c:	e002      	b.n	8001854 <print+0x7c>
		return;
 800184e:	bf00      	nop
 8001850:	e000      	b.n	8001854 <print+0x7c>
		return;
 8001852:	bf00      	nop
}
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000008 	.word	0x20000008
 8001860:	200001ab 	.word	0x200001ab
 8001864:	200022f4 	.word	0x200022f4

08001868 <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	e010      	b.n	800189a <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 8001878:	490c      	ldr	r1, [pc, #48]	; (80018ac <find_color_by_name+0x44>)
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	440b      	add	r3, r1
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	79fa      	ldrb	r2, [r7, #7]
 800188c:	429a      	cmp	r2, r3
 800188e:	d101      	bne.n	8001894 <find_color_by_name+0x2c>
		{
			return i;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	e006      	b.n	80018a2 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b10      	cmp	r3, #16
 800189e:	d9eb      	bls.n	8001878 <find_color_by_name+0x10>
		}
	}
	return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	0800d900 	.word	0x0800d900

080018b0 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ffd2 	bl	8001868 <find_color_by_name>
 80018c4:	4602      	mov	r2, r0
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <print_color+0x44>)
 80018d2:	4413      	add	r3, r2
 80018d4:	3301      	adds	r3, #1
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ff7e 	bl	80017d8 <print>
	print(str);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff7b 	bl	80017d8 <print>
	print(COLOR_NC);
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <print_color+0x48>)
 80018e4:	f7ff ff78 	bl	80017d8 <print>
	return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	0800d900 	.word	0x0800d900
 80018f8:	0800d350 	.word	0x0800d350

080018fc <str_length>:

int str_length(const char * str)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001908:	e002      	b.n	8001910 <str_length+0x14>
		i++;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3301      	adds	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f6      	bne.n	800190a <str_length+0xe>
	return i;
 800191c:	68fb      	ldr	r3, [r7, #12]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <print_help>:


int print_help(int argc, const char * const * argv)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
	print(_VER);
 8001932:	4858      	ldr	r0, [pc, #352]	; (8001a94 <print_help+0x16c>)
 8001934:	f7ff ff50 	bl	80017d8 <print>
	print(ENDL);
 8001938:	4857      	ldr	r0, [pc, #348]	; (8001a98 <print_help+0x170>)
 800193a:	f7ff ff4d 	bl	80017d8 <print>
	print ("Use ");
 800193e:	4857      	ldr	r0, [pc, #348]	; (8001a9c <print_help+0x174>)
 8001940:	f7ff ff4a 	bl	80017d8 <print>
	print_color("TAB", C_GREEN);
 8001944:	2105      	movs	r1, #5
 8001946:	4856      	ldr	r0, [pc, #344]	; (8001aa0 <print_help+0x178>)
 8001948:	f7ff ffb2 	bl	80018b0 <print_color>
	print(" key for completion");
 800194c:	4855      	ldr	r0, [pc, #340]	; (8001aa4 <print_help+0x17c>)
 800194e:	f7ff ff43 	bl	80017d8 <print>
	print (ENDL);
 8001952:	4851      	ldr	r0, [pc, #324]	; (8001a98 <print_help+0x170>)
 8001954:	f7ff ff40 	bl	80017d8 <print>
	print ("Available commands:");
 8001958:	4853      	ldr	r0, [pc, #332]	; (8001aa8 <print_help+0x180>)
 800195a:	f7ff ff3d 	bl	80017d8 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	e08a      	b.n	8001a7a <print_help+0x152>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8001964:	4a51      	ldr	r2, [pc, #324]	; (8001aac <print_help+0x184>)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	019b      	lsls	r3, r3, #6
 800196a:	4413      	add	r3, r2
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001972:	d11b      	bne.n	80019ac <print_help+0x84>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3b01      	subs	r3, #1
 8001978:	4a4c      	ldr	r2, [pc, #304]	; (8001aac <print_help+0x184>)
 800197a:	019b      	lsls	r3, r3, #6
 800197c:	4413      	add	r3, r2
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001984:	d004      	beq.n	8001990 <print_help+0x68>
				print_color(" aka ", C_L_PURPLE);
 8001986:	210c      	movs	r1, #12
 8001988:	4849      	ldr	r0, [pc, #292]	; (8001ab0 <print_help+0x188>)
 800198a:	f7ff ff91 	bl	80018b0 <print_color>
 800198e:	e003      	b.n	8001998 <print_help+0x70>
			else
				print_color("/", C_L_PURPLE);
 8001990:	210c      	movs	r1, #12
 8001992:	4848      	ldr	r0, [pc, #288]	; (8001ab4 <print_help+0x18c>)
 8001994:	f7ff ff8c 	bl	80018b0 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	019b      	lsls	r3, r3, #6
 800199c:	4a43      	ldr	r2, [pc, #268]	; (8001aac <print_help+0x184>)
 800199e:	4413      	add	r3, r2
 80019a0:	3304      	adds	r3, #4
 80019a2:	210b      	movs	r1, #11
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff83 	bl	80018b0 <print_color>
 80019aa:	e063      	b.n	8001a74 <print_help+0x14c>
		}
		else
		{
			print(ENDL);
 80019ac:	483a      	ldr	r0, [pc, #232]	; (8001a98 <print_help+0x170>)
 80019ae:	f7ff ff13 	bl	80017d8 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80019b2:	f06f 0303 	mvn.w	r3, #3
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	e005      	b.n	80019c6 <print_help+0x9e>
				print(" ");
 80019ba:	483f      	ldr	r0, [pc, #252]	; (8001ab8 <print_help+0x190>)
 80019bc:	f7ff ff0c 	bl	80017d8 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	3301      	adds	r3, #1
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4a39      	ldr	r2, [pc, #228]	; (8001aac <print_help+0x184>)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	019b      	lsls	r3, r3, #6
 80019cc:	4413      	add	r3, r2
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	dbf1      	blt.n	80019ba <print_help+0x92>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	019b      	lsls	r3, r3, #6
 80019da:	4a34      	ldr	r2, [pc, #208]	; (8001aac <print_help+0x184>)
 80019dc:	4413      	add	r3, r2
 80019de:	1d1a      	adds	r2, r3, #4
 80019e0:	4932      	ldr	r1, [pc, #200]	; (8001aac <print_help+0x184>)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	019b      	lsls	r3, r3, #6
 80019e6:	440b      	add	r3, r1
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4934      	ldr	r1, [pc, #208]	; (8001abc <print_help+0x194>)
 80019ec:	5ccb      	ldrb	r3, [r1, r3]
 80019ee:	4619      	mov	r1, r3
 80019f0:	4610      	mov	r0, r2
 80019f2:	f7ff ff5d 	bl	80018b0 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e005      	b.n	8001a08 <print_help+0xe0>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 80019fc:	482e      	ldr	r0, [pc, #184]	; (8001ab8 <print_help+0x190>)
 80019fe:	f7ff feeb 	bl	80017d8 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3301      	adds	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	4a28      	ldr	r2, [pc, #160]	; (8001aac <print_help+0x184>)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	019b      	lsls	r3, r3, #6
 8001a0e:	4413      	add	r3, r2
 8001a10:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001a12:	f1c3 040c 	rsb	r4, r3, #12
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	019b      	lsls	r3, r3, #6
 8001a1a:	4a24      	ldr	r2, [pc, #144]	; (8001aac <print_help+0x184>)
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3304      	adds	r3, #4
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff6b 	bl	80018fc <str_length>
 8001a26:	4603      	mov	r3, r0
 8001a28:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbe5      	blt.n	80019fc <print_help+0xd4>
			switch (microrl_actions[i].level){
 8001a30:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <print_help+0x184>)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	019b      	lsls	r3, r3, #6
 8001a36:	4413      	add	r3, r2
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <print_help+0x11c>
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d004      	beq.n	8001a4c <print_help+0x124>
 8001a42:	e007      	b.n	8001a54 <print_help+0x12c>
			case 0:
				print ("-");
 8001a44:	481e      	ldr	r0, [pc, #120]	; (8001ac0 <print_help+0x198>)
 8001a46:	f7ff fec7 	bl	80017d8 <print>
				break;
 8001a4a:	e007      	b.n	8001a5c <print_help+0x134>
			case 1:
				print ("^");
 8001a4c:	481d      	ldr	r0, [pc, #116]	; (8001ac4 <print_help+0x19c>)
 8001a4e:	f7ff fec3 	bl	80017d8 <print>
				break;
 8001a52:	e003      	b.n	8001a5c <print_help+0x134>
			default:
				print ("#");
 8001a54:	481c      	ldr	r0, [pc, #112]	; (8001ac8 <print_help+0x1a0>)
 8001a56:	f7ff febf 	bl	80017d8 <print>
				break;
 8001a5a:	bf00      	nop
			}
			print (" ");
 8001a5c:	4816      	ldr	r0, [pc, #88]	; (8001ab8 <print_help+0x190>)
 8001a5e:	f7ff febb 	bl	80017d8 <print>
			print (microrl_actions[i].help_msg);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	019b      	lsls	r3, r3, #6
 8001a66:	3308      	adds	r3, #8
 8001a68:	4a10      	ldr	r2, [pc, #64]	; (8001aac <print_help+0x184>)
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3306      	adds	r3, #6
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff feb2 	bl	80017d8 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3301      	adds	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2b0d      	cmp	r3, #13
 8001a7e:	f67f af71 	bls.w	8001964 <print_help+0x3c>
		}
	}
	print(ENDL);
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <print_help+0x170>)
 8001a84:	f7ff fea8 	bl	80017d8 <print>
	return 0;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd90      	pop	{r4, r7, pc}
 8001a92:	bf00      	nop
 8001a94:	0800d358 	.word	0x0800d358
 8001a98:	0800d368 	.word	0x0800d368
 8001a9c:	0800d36c 	.word	0x0800d36c
 8001aa0:	0800d374 	.word	0x0800d374
 8001aa4:	0800d378 	.word	0x0800d378
 8001aa8:	0800d38c 	.word	0x0800d38c
 8001aac:	0800d580 	.word	0x0800d580
 8001ab0:	0800d3a0 	.word	0x0800d3a0
 8001ab4:	0800d3a8 	.word	0x0800d3a8
 8001ab8:	0800d3ac 	.word	0x0800d3ac
 8001abc:	0800d9bc 	.word	0x0800d9bc
 8001ac0:	0800d3b0 	.word	0x0800d3b0
 8001ac4:	0800d3b4 	.word	0x0800d3b4
 8001ac8:	0800d3b8 	.word	0x0800d3b8

08001acc <execute>:



int execute (int argc, const char * const * argv)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e050      	b.n	8001b8e <execute+0xc2>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	e03f      	b.n	8001b72 <execute+0xa6>
		{
			tokens_found = false;
 8001af2:	2300      	movs	r3, #0
 8001af4:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 8001af6:	4a52      	ldr	r2, [pc, #328]	; (8001c40 <execute+0x174>)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	019b      	lsls	r3, r3, #6
 8001afc:	4413      	add	r3, r2
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d001      	beq.n	8001b0e <execute+0x42>
				synonym_level = current_level; // save the synonym level
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d003      	beq.n	8001b1e <execute+0x52>
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	db2d      	blt.n	8001b7a <execute+0xae>
				break;
			if (current_level == i)
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d101      	bne.n	8001b2a <execute+0x5e>
				last_main_synonym = n;
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	4413      	add	r3, r2
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	019b      	lsls	r3, r3, #6
 8001b38:	4941      	ldr	r1, [pc, #260]	; (8001c40 <execute+0x174>)
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4610      	mov	r0, r2
 8001b42:	f7fe fb05 	bl	8000150 <strcmp>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10f      	bne.n	8001b6c <execute+0xa0>
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d10b      	bne.n	8001b6c <execute+0xa0>
					(i == synonym_level))
			{
				tokens_found = true;
 8001b54:	2301      	movs	r3, #1
 8001b56:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	623a      	str	r2, [r7, #32]
 8001b5e:	4a38      	ldr	r2, [pc, #224]	; (8001c40 <execute+0x174>)
 8001b60:	019b      	lsls	r3, r3, #6
 8001b62:	4413      	add	r3, r2
 8001b64:	333c      	adds	r3, #60	; 0x3c
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001b6a:	e007      	b.n	8001b7c <execute+0xb0>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b0d      	cmp	r3, #13
 8001b76:	d9bc      	bls.n	8001af2 <execute+0x26>
 8001b78:	e000      	b.n	8001b7c <execute+0xb0>
				break;
 8001b7a:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8001b7c:	7efb      	ldrb	r3, [r7, #27]
 8001b7e:	f083 0301 	eor.w	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d107      	bne.n	8001b98 <execute+0xcc>
	for (int i = 0; i < argc; i++)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	dbaa      	blt.n	8001aec <execute+0x20>
 8001b96:	e000      	b.n	8001b9a <execute+0xce>
			break;
 8001b98:	bf00      	nop
	}

	if (func != NULL)
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <execute+0xe0>
	{
		return func(argc, argv); // function found
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	6839      	ldr	r1, [r7, #0]
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
 8001ba8:	4603      	mov	r3, r0
 8001baa:	e045      	b.n	8001c38 <execute+0x16c>
	} else if (tokens_found)
 8001bac:	7efb      	ldrb	r3, [r7, #27]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d021      	beq.n	8001bf6 <execute+0x12a>
	{
		print_color ("command: '", C_L_RED);
 8001bb2:	210a      	movs	r1, #10
 8001bb4:	4823      	ldr	r0, [pc, #140]	; (8001c44 <execute+0x178>)
 8001bb6:	f7ff fe7b 	bl	80018b0 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	210a      	movs	r1, #10
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fe75 	bl	80018b0 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 8001bc6:	210a      	movs	r1, #10
 8001bc8:	481f      	ldr	r0, [pc, #124]	; (8001c48 <execute+0x17c>)
 8001bca:	f7ff fe71 	bl	80018b0 <print_color>
		print(ENDL);
 8001bce:	481f      	ldr	r0, [pc, #124]	; (8001c4c <execute+0x180>)
 8001bd0:	f7ff fe02 	bl	80017d8 <print>
		print_color ("use '", C_NC);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	481e      	ldr	r0, [pc, #120]	; (8001c50 <execute+0x184>)
 8001bd8:	f7ff fe6a 	bl	80018b0 <print_color>
		print_color ("?", C_GREEN);
 8001bdc:	2105      	movs	r1, #5
 8001bde:	481d      	ldr	r0, [pc, #116]	; (8001c54 <execute+0x188>)
 8001be0:	f7ff fe66 	bl	80018b0 <print_color>
		print_color ("' for help", C_NC);
 8001be4:	2100      	movs	r1, #0
 8001be6:	481c      	ldr	r0, [pc, #112]	; (8001c58 <execute+0x18c>)
 8001be8:	f7ff fe62 	bl	80018b0 <print_color>
		print (ENDL);
 8001bec:	4817      	ldr	r0, [pc, #92]	; (8001c4c <execute+0x180>)
 8001bee:	f7ff fdf3 	bl	80017d8 <print>
		return 1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e020      	b.n	8001c38 <execute+0x16c>
	}
	else
	{
		print_color ("command: '", C_RED);
 8001bf6:	2109      	movs	r1, #9
 8001bf8:	4812      	ldr	r0, [pc, #72]	; (8001c44 <execute+0x178>)
 8001bfa:	f7ff fe59 	bl	80018b0 <print_color>
		print_color ((char*)argv[0], C_RED);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2109      	movs	r1, #9
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fe53 	bl	80018b0 <print_color>
		print_color ("' not found", C_RED);
 8001c0a:	2109      	movs	r1, #9
 8001c0c:	4813      	ldr	r0, [pc, #76]	; (8001c5c <execute+0x190>)
 8001c0e:	f7ff fe4f 	bl	80018b0 <print_color>
		print(ENDL);
 8001c12:	480e      	ldr	r0, [pc, #56]	; (8001c4c <execute+0x180>)
 8001c14:	f7ff fde0 	bl	80017d8 <print>
		print_color ("use '", C_NC);
 8001c18:	2100      	movs	r1, #0
 8001c1a:	480d      	ldr	r0, [pc, #52]	; (8001c50 <execute+0x184>)
 8001c1c:	f7ff fe48 	bl	80018b0 <print_color>
		print_color ("?", C_GREEN);
 8001c20:	2105      	movs	r1, #5
 8001c22:	480c      	ldr	r0, [pc, #48]	; (8001c54 <execute+0x188>)
 8001c24:	f7ff fe44 	bl	80018b0 <print_color>
		print_color ("' for help", C_NC);
 8001c28:	2100      	movs	r1, #0
 8001c2a:	480b      	ldr	r0, [pc, #44]	; (8001c58 <execute+0x18c>)
 8001c2c:	f7ff fe40 	bl	80018b0 <print_color>
		print (ENDL);
 8001c30:	4806      	ldr	r0, [pc, #24]	; (8001c4c <execute+0x180>)
 8001c32:	f7ff fdd1 	bl	80017d8 <print>
		return 1;
 8001c36:	2301      	movs	r3, #1

	}
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3728      	adds	r7, #40	; 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	0800d580 	.word	0x0800d580
 8001c44:	0800d3bc 	.word	0x0800d3bc
 8001c48:	0800d3c8 	.word	0x0800d3c8
 8001c4c:	0800d368 	.word	0x0800d368
 8001c50:	0800d3e8 	.word	0x0800d3e8
 8001c54:	0800d3f0 	.word	0x0800d3f0
 8001c58:	0800d3f4 	.word	0x0800d3f4
 8001c5c:	0800d400 	.word	0x0800d400

08001c60 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	; 0x30
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
	int j = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 8001c6e:	4b5b      	ldr	r3, [pc, #364]	; (8001ddc <complet+0x17c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d11b      	bne.n	8001cb2 <complet+0x52>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c7e:	e014      	b.n	8001caa <complet+0x4a>
			if (microrl_actions[i].level == 0)
 8001c80:	4a57      	ldr	r2, [pc, #348]	; (8001de0 <complet+0x180>)
 8001c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	4413      	add	r3, r2
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10a      	bne.n	8001ca4 <complet+0x44>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c96:	0192      	lsls	r2, r2, #6
 8001c98:	4951      	ldr	r1, [pc, #324]	; (8001de0 <complet+0x180>)
 8001c9a:	440a      	add	r2, r1
 8001c9c:	3204      	adds	r2, #4
 8001c9e:	494f      	ldr	r1, [pc, #316]	; (8001ddc <complet+0x17c>)
 8001ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 8001ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cac:	2b0d      	cmp	r3, #13
 8001cae:	d9e7      	bls.n	8001c80 <complet+0x20>
 8001cb0:	e08a      	b.n	8001dc8 <complet+0x168>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	e072      	b.n	8001dbc <complet+0x15c>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	e061      	b.n	8001da0 <complet+0x140>
			{
				tokens_found = false;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 8001ce0:	4a3f      	ldr	r2, [pc, #252]	; (8001de0 <complet+0x180>)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	019b      	lsls	r3, r3, #6
 8001ce6:	4413      	add	r3, r2
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf2:	d001      	beq.n	8001cf8 <complet+0x98>
					synonym_level = current_level; // save the synonym level
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfe:	d003      	beq.n	8001d08 <complet+0xa8>
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	db4f      	blt.n	8001da8 <complet+0x148>
					break;
				if (current_level == i)
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d101      	bne.n	8001d14 <complet+0xb4>
					last_main_synonym = n;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d122      	bne.n	8001d64 <complet+0x104>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	019b      	lsls	r3, r3, #6
 8001d22:	4a2f      	ldr	r2, [pc, #188]	; (8001de0 <complet+0x180>)
 8001d24:	4413      	add	r3, r2
 8001d26:	3304      	adds	r3, #4
 8001d28:	6939      	ldr	r1, [r7, #16]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f00b faa4 	bl	800d278 <strstr>
 8001d30:	4602      	mov	r2, r0
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	019b      	lsls	r3, r3, #6
 8001d36:	492a      	ldr	r1, [pc, #168]	; (8001de0 <complet+0x180>)
 8001d38:	440b      	add	r3, r1
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d111      	bne.n	8001d64 <complet+0x104>
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d10d      	bne.n	8001d64 <complet+0x104>
										(i == synonym_level))
				{
					tokens_found = true;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 8001d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	0192      	lsls	r2, r2, #6
 8001d56:	4922      	ldr	r1, [pc, #136]	; (8001de0 <complet+0x180>)
 8001d58:	440a      	add	r2, r1
 8001d5a:	3204      	adds	r2, #4
 8001d5c:	491f      	ldr	r1, [pc, #124]	; (8001ddc <complet+0x17c>)
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001d62:	e01a      	b.n	8001d9a <complet+0x13a>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	019b      	lsls	r3, r3, #6
 8001d72:	491b      	ldr	r1, [pc, #108]	; (8001de0 <complet+0x180>)
 8001d74:	440b      	add	r3, r1
 8001d76:	3304      	adds	r3, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f7fe f9e8 	bl	8000150 <strcmp>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <complet+0x13a>
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d105      	bne.n	8001d9a <complet+0x13a>
				{
					last_main_synonym++;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	3301      	adds	r3, #1
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 8001d94:	2301      	movs	r3, #1
 8001d96:	77fb      	strb	r3, [r7, #31]
					break;
 8001d98:	e007      	b.n	8001daa <complet+0x14a>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b0d      	cmp	r3, #13
 8001da4:	d99a      	bls.n	8001cdc <complet+0x7c>
 8001da6:	e000      	b.n	8001daa <complet+0x14a>
					break;
 8001da8:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 8001daa:	7ffb      	ldrb	r3, [r7, #31]
 8001dac:	f083 0301 	eor.w	r3, r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d107      	bne.n	8001dc6 <complet+0x166>
		for (int i = 0; i < argc; i++)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	3301      	adds	r3, #1
 8001dba:	61bb      	str	r3, [r7, #24]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	db88      	blt.n	8001cd6 <complet+0x76>
 8001dc4:	e000      	b.n	8001dc8 <complet+0x168>
				break;
 8001dc6:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <complet+0x17c>)
 8001dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dcc:	2100      	movs	r1, #0
 8001dce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 8001dd2:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <complet+0x17c>)
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3730      	adds	r7, #48	; 0x30
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	200020f0 	.word	0x200020f0
 8001de0:	0800d580 	.word	0x0800d580

08001de4 <sigint>:
#endif


void sigint (void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <sigint+0x48>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]


	print (ENDL);
 8001df0:	480f      	ldr	r0, [pc, #60]	; (8001e30 <sigint+0x4c>)
 8001df2:	f7ff fcf1 	bl	80017d8 <print>
	print ("^C catched!");
 8001df6:	480f      	ldr	r0, [pc, #60]	; (8001e34 <sigint+0x50>)
 8001df8:	f7ff fcee 	bl	80017d8 <print>
	int i = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 8001e00:	e009      	b.n	8001e16 <sigint+0x32>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <sigint+0x54>)
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	4a08      	ldr	r2, [pc, #32]	; (8001e30 <sigint+0x4c>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	4619      	mov	r1, r3
 8001e12:	f7ff fad3 	bl	80013bc <microrl_insert_char>
	while (ENTER[i])
 8001e16:	4a06      	ldr	r2, [pc, #24]	; (8001e30 <sigint+0x4c>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ef      	bne.n	8001e02 <sigint+0x1e>
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200001ac 	.word	0x200001ac
 8001e30:	0800d368 	.word	0x0800d368
 8001e34:	0800d40c 	.word	0x0800d40c
 8001e38:	20000004 	.word	0x20000004

08001e3c <init_microrl>:

void init_microrl(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <init_microrl+0x38>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	490c      	ldr	r1, [pc, #48]	; (8001e78 <init_microrl+0x3c>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe ff7a 	bl	8000d40 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <init_microrl+0x38>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	490a      	ldr	r1, [pc, #40]	; (8001e7c <init_microrl+0x40>)
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe ffc0 	bl	8000dd8 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <init_microrl+0x38>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4908      	ldr	r1, [pc, #32]	; (8001e80 <init_microrl+0x44>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe ffac 	bl	8000dbc <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <init_microrl+0x38>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4906      	ldr	r1, [pc, #24]	; (8001e84 <init_microrl+0x48>)
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe ffc2 	bl	8000df4 <microrl_set_sigint_callback>
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000004 	.word	0x20000004
 8001e78:	080017d9 	.word	0x080017d9
 8001e7c:	08001acd 	.word	0x08001acd
 8001e80:	08001c61 	.word	0x08001c61
 8001e84:	08001de5 	.word	0x08001de5

08001e88 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <clear_screen+0x20>)
 8001e94:	f7ff fca0 	bl	80017d8 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8001e98:	4804      	ldr	r0, [pc, #16]	; (8001eac <clear_screen+0x24>)
 8001e9a:	f7ff fc9d 	bl	80017d8 <print>
	return 0;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	0800d418 	.word	0x0800d418
 8001eac:	0800d420 	.word	0x0800d420

08001eb0 <set_CDC_ready>:


void set_CDC_ready(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <set_CDC_ready+0x14>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	200001ab 	.word	0x200001ab

08001ec8 <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <color_toggle+0x30>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	f083 0301 	eor.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf14      	ite	ne
 8001ee0:	2301      	movne	r3, #1
 8001ee2:	2300      	moveq	r3, #0
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <color_toggle+0x30>)
 8001ee8:	701a      	strb	r2, [r3, #0]
	return 0;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000008 	.word	0x20000008

08001efc <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
	color_out = 1;
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <color_on+0x28>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 8001f0c:	2105      	movs	r1, #5
 8001f0e:	4806      	ldr	r0, [pc, #24]	; (8001f28 <color_on+0x2c>)
 8001f10:	f7ff fcce 	bl	80018b0 <print_color>
	print(ENDL);
 8001f14:	4805      	ldr	r0, [pc, #20]	; (8001f2c <color_on+0x30>)
 8001f16:	f7ff fc5f 	bl	80017d8 <print>
	return 0;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000008 	.word	0x20000008
 8001f28:	0800d424 	.word	0x0800d424
 8001f2c:	0800d368 	.word	0x0800d368

08001f30 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
	color_out = 0;
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <color_off+0x28>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8001f40:	4806      	ldr	r0, [pc, #24]	; (8001f5c <color_off+0x2c>)
 8001f42:	f7ff fc49 	bl	80017d8 <print>
	print(ENDL);
 8001f46:	4806      	ldr	r0, [pc, #24]	; (8001f60 <color_off+0x30>)
 8001f48:	f7ff fc46 	bl	80017d8 <print>
	return 0;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	0800d438 	.word	0x0800d438
 8001f60:	0800d368 	.word	0x0800d368

08001f64 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
	if (color_out)
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <color_show+0x34>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d004      	beq.n	8001f80 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8001f76:	2105      	movs	r1, #5
 8001f78:	4808      	ldr	r0, [pc, #32]	; (8001f9c <color_show+0x38>)
 8001f7a:	f7ff fc99 	bl	80018b0 <print_color>
 8001f7e:	e002      	b.n	8001f86 <color_show+0x22>
	else
		print ("Color output is OFF");
 8001f80:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <color_show+0x3c>)
 8001f82:	f7ff fc29 	bl	80017d8 <print>
	print(ENDL);
 8001f86:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <color_show+0x40>)
 8001f88:	f7ff fc26 	bl	80017d8 <print>
	return 0;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000008 	.word	0x20000008
 8001f9c:	0800d424 	.word	0x0800d424
 8001fa0:	0800d438 	.word	0x0800d438
 8001fa4:	0800d368 	.word	0x0800d368

08001fa8 <nema_toggle>:


int nema_toggle 	(int argc, const char * const * argv)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
	nema_out ^= 1;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <nema_toggle+0x30>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	f083 0301 	eor.w	r3, r3, #1
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf14      	ite	ne
 8001fc0:	2301      	movne	r3, #1
 8001fc2:	2300      	moveq	r3, #0
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <nema_toggle+0x30>)
 8001fc8:	701a      	strb	r2, [r3, #0]
	return 0;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	200001ac 	.word	0x200001ac

08001fdc <nema_on>:

int nema_on 		(int argc, const char * const * argv)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
	nema_out = 1;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <nema_on+0x28>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
	print_color ("NEMA output is ON", C_GREEN);
 8001fec:	2105      	movs	r1, #5
 8001fee:	4806      	ldr	r0, [pc, #24]	; (8002008 <nema_on+0x2c>)
 8001ff0:	f7ff fc5e 	bl	80018b0 <print_color>
	print(ENDL);
 8001ff4:	4805      	ldr	r0, [pc, #20]	; (800200c <nema_on+0x30>)
 8001ff6:	f7ff fbef 	bl	80017d8 <print>
	return 0;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200001ac 	.word	0x200001ac
 8002008:	0800d44c 	.word	0x0800d44c
 800200c:	0800d368 	.word	0x0800d368

08002010 <nema_off>:

int nema_off 		(int argc, const char * const * argv)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
	nema_out = 0;
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <nema_off+0x28>)
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
	print ("NEM output is OFF");
 8002020:	4806      	ldr	r0, [pc, #24]	; (800203c <nema_off+0x2c>)
 8002022:	f7ff fbd9 	bl	80017d8 <print>
	print(ENDL);
 8002026:	4806      	ldr	r0, [pc, #24]	; (8002040 <nema_off+0x30>)
 8002028:	f7ff fbd6 	bl	80017d8 <print>
	return 0;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200001ac 	.word	0x200001ac
 800203c:	0800d460 	.word	0x0800d460
 8002040:	0800d368 	.word	0x0800d368

08002044 <show_encoder>:


int show_encoder (int argc, const char * const * argv)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]

	uint32_t buf = encoder_value;
 800204e:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <show_encoder+0x78>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	617b      	str	r3, [r7, #20]
	char str [8];

	for (int i = 0; i < 5; i++)
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	e01d      	b.n	8002096 <show_encoder+0x52>
	{
		str[4 - i] = buf % 10 + '0';
 800205a:	6979      	ldr	r1, [r7, #20]
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <show_encoder+0x7c>)
 800205e:	fba3 2301 	umull	r2, r3, r3, r1
 8002062:	08da      	lsrs	r2, r3, #3
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	1aca      	subs	r2, r1, r3
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f1c3 0304 	rsb	r3, r3, #4
 8002076:	3230      	adds	r2, #48	; 0x30
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	f107 0118 	add.w	r1, r7, #24
 800207e:	440b      	add	r3, r1
 8002080:	f803 2c10 	strb.w	r2, [r3, #-16]
		buf /= 10;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <show_encoder+0x7c>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	08db      	lsrs	r3, r3, #3
 800208e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 5; i++)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	3301      	adds	r3, #1
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b04      	cmp	r3, #4
 800209a:	ddde      	ble.n	800205a <show_encoder+0x16>
	}
	str[5] = '\r';
 800209c:	230d      	movs	r3, #13
 800209e:	737b      	strb	r3, [r7, #13]
	str[6] = '\n';
 80020a0:	230a      	movs	r3, #10
 80020a2:	73bb      	strb	r3, [r7, #14]
	str[7] = '\0';
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]
	print(str);
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fb93 	bl	80017d8 <print>
	return 0;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	200001a8 	.word	0x200001a8
 80020c0:	cccccccd 	.word	0xcccccccd

080020c4 <get_nema>:


bool get_nema(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
	return nema_out;
 80020c8:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <get_nema+0x10>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	200001ac 	.word	0x200001ac

080020d8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <MX_SPI2_Init+0x64>)
 80020de:	4a18      	ldr	r2, [pc, #96]	; (8002140 <MX_SPI2_Init+0x68>)
 80020e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020e2:	4b16      	ldr	r3, [pc, #88]	; (800213c <MX_SPI2_Init+0x64>)
 80020e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <MX_SPI2_Init+0x64>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <MX_SPI2_Init+0x64>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <MX_SPI2_Init+0x64>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020fc:	4b0f      	ldr	r3, [pc, #60]	; (800213c <MX_SPI2_Init+0x64>)
 80020fe:	2200      	movs	r2, #0
 8002100:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <MX_SPI2_Init+0x64>)
 8002104:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002108:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <MX_SPI2_Init+0x64>)
 800210c:	2208      	movs	r2, #8
 800210e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <MX_SPI2_Init+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <MX_SPI2_Init+0x64>)
 8002118:	2200      	movs	r2, #0
 800211a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <MX_SPI2_Init+0x64>)
 800211e:	2200      	movs	r2, #0
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <MX_SPI2_Init+0x64>)
 8002124:	220a      	movs	r2, #10
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002128:	4804      	ldr	r0, [pc, #16]	; (800213c <MX_SPI2_Init+0x64>)
 800212a:	f002 ff3f 	bl	8004fac <HAL_SPI_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002134:	f7fe fab4 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	200021cc 	.word	0x200021cc
 8002140:	40003800 	.word	0x40003800

08002144 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <HAL_SPI_MspInit+0x8c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d131      	bne.n	80021c8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_SPI_MspInit+0x90>)
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <HAL_SPI_MspInit+0x90>)
 800216a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800216e:	61d3      	str	r3, [r2, #28]
 8002170:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <HAL_SPI_MspInit+0x90>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217c:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_SPI_MspInit+0x90>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <HAL_SPI_MspInit+0x90>)
 8002182:	f043 0308 	orr.w	r3, r3, #8
 8002186:	6193      	str	r3, [r2, #24]
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_SPI_MspInit+0x90>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002194:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002198:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800219e:	2303      	movs	r3, #3
 80021a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	f107 0310 	add.w	r3, r7, #16
 80021a6:	4619      	mov	r1, r3
 80021a8:	480b      	ldr	r0, [pc, #44]	; (80021d8 <HAL_SPI_MspInit+0x94>)
 80021aa:	f000 fb49 	bl	8002840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80021ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	4619      	mov	r1, r3
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <HAL_SPI_MspInit+0x94>)
 80021c4:	f000 fb3c 	bl	8002840 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80021c8:	bf00      	nop
 80021ca:	3720      	adds	r7, #32
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40003800 	.word	0x40003800
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40010c00 	.word	0x40010c00

080021dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021e2:	4b18      	ldr	r3, [pc, #96]	; (8002244 <HAL_MspInit+0x68>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	4a17      	ldr	r2, [pc, #92]	; (8002244 <HAL_MspInit+0x68>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6193      	str	r3, [r2, #24]
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_MspInit+0x68>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_MspInit+0x68>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4a11      	ldr	r2, [pc, #68]	; (8002244 <HAL_MspInit+0x68>)
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002204:	61d3      	str	r3, [r2, #28]
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_MspInit+0x68>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	210f      	movs	r1, #15
 8002216:	f06f 0001 	mvn.w	r0, #1
 800221a:	f000 fa36 	bl	800268a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_MspInit+0x6c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	4a04      	ldr	r2, [pc, #16]	; (8002248 <HAL_MspInit+0x6c>)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	40010000 	.word	0x40010000

0800224c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08c      	sub	sp, #48	; 0x30
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800225c:	2200      	movs	r2, #0
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	2019      	movs	r0, #25
 8002262:	f000 fa12 	bl	800268a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002266:	2019      	movs	r0, #25
 8002268:	f000 fa2b 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800226c:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <HAL_InitTick+0x9c>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	4a1d      	ldr	r2, [pc, #116]	; (80022e8 <HAL_InitTick+0x9c>)
 8002272:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002276:	6193      	str	r3, [r2, #24]
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_InitTick+0x9c>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002284:	f107 0210 	add.w	r2, r7, #16
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f002 fd88 	bl	8004da4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002294:	f002 fd72 	bl	8004d7c <HAL_RCC_GetPCLK2Freq>
 8002298:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229c:	4a13      	ldr	r2, [pc, #76]	; (80022ec <HAL_InitTick+0xa0>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	0c9b      	lsrs	r3, r3, #18
 80022a4:	3b01      	subs	r3, #1
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_InitTick+0xa4>)
 80022aa:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <HAL_InitTick+0xa8>)
 80022ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <HAL_InitTick+0xa4>)
 80022b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80022b6:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <HAL_InitTick+0xa4>)
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HAL_InitTick+0xa4>)
 80022be:	2200      	movs	r2, #0
 80022c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_InitTick+0xa4>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80022c8:	4809      	ldr	r0, [pc, #36]	; (80022f0 <HAL_InitTick+0xa4>)
 80022ca:	f002 fef3 	bl	80050b4 <HAL_TIM_Base_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d104      	bne.n	80022de <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80022d4:	4806      	ldr	r0, [pc, #24]	; (80022f0 <HAL_InitTick+0xa4>)
 80022d6:	f002 ff45 	bl	8005164 <HAL_TIM_Base_Start_IT>
 80022da:	4603      	mov	r3, r0
 80022dc:	e000      	b.n	80022e0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3730      	adds	r7, #48	; 0x30
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	431bde83 	.word	0x431bde83
 80022f0:	20002224 	.word	0x20002224
 80022f4:	40012c00 	.word	0x40012c00

080022f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <NMI_Handler+0x4>

080022fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002302:	e7fe      	b.n	8002302 <HardFault_Handler+0x4>

08002304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <MemManage_Handler+0x4>

0800230a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800230e:	e7fe      	b.n	800230e <BusFault_Handler+0x4>

08002310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <UsageFault_Handler+0x4>

08002316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002326:	2001      	movs	r0, #1
 8002328:	f000 fc56 	bl	8002bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}

08002330 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002334:	4802      	ldr	r0, [pc, #8]	; (8002340 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002336:	f000 fda2 	bl	8002e7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20002f88 	.word	0x20002f88

08002344 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <TIM1_UP_IRQHandler+0x10>)
 800234a:	f002 ff5d 	bl	8005208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20002224 	.word	0x20002224

08002358 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <USART2_IRQHandler+0x10>)
 800235e:	f003 f971 	bl	8005644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2000226c 	.word	0x2000226c

0800236c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <MX_USART2_UART_Init+0x50>)
 8002380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 8002384:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 800239e:	220c      	movs	r2, #12
 80023a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_USART2_UART_Init+0x4c>)
 80023b0:	f003 f8ca 	bl	8005548 <HAL_UART_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023ba:	f7fe f971 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000226c 	.word	0x2000226c
 80023c8:	40004400 	.word	0x40004400

080023cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0310 	add.w	r3, r7, #16
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a1f      	ldr	r2, [pc, #124]	; (8002464 <HAL_UART_MspInit+0x98>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d137      	bne.n	800245c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ec:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <HAL_UART_MspInit+0x9c>)
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	4a1d      	ldr	r2, [pc, #116]	; (8002468 <HAL_UART_MspInit+0x9c>)
 80023f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f6:	61d3      	str	r3, [r2, #28]
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_UART_MspInit+0x9c>)
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002404:	4b18      	ldr	r3, [pc, #96]	; (8002468 <HAL_UART_MspInit+0x9c>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4a17      	ldr	r2, [pc, #92]	; (8002468 <HAL_UART_MspInit+0x9c>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6193      	str	r3, [r2, #24]
 8002410:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_UART_MspInit+0x9c>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800241c:	2304      	movs	r3, #4
 800241e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002424:	2303      	movs	r3, #3
 8002426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	f107 0310 	add.w	r3, r7, #16
 800242c:	4619      	mov	r1, r3
 800242e:	480f      	ldr	r0, [pc, #60]	; (800246c <HAL_UART_MspInit+0xa0>)
 8002430:	f000 fa06 	bl	8002840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002434:	2308      	movs	r3, #8
 8002436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	4619      	mov	r1, r3
 8002446:	4809      	ldr	r0, [pc, #36]	; (800246c <HAL_UART_MspInit+0xa0>)
 8002448:	f000 f9fa 	bl	8002840 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800244c:	2200      	movs	r2, #0
 800244e:	2105      	movs	r1, #5
 8002450:	2026      	movs	r0, #38	; 0x26
 8002452:	f000 f91a 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002456:	2026      	movs	r0, #38	; 0x26
 8002458:	f000 f933 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800245c:	bf00      	nop
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40004400 	.word	0x40004400
 8002468:	40021000 	.word	0x40021000
 800246c:	40010800 	.word	0x40010800

08002470 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002470:	480c      	ldr	r0, [pc, #48]	; (80024a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002472:	490d      	ldr	r1, [pc, #52]	; (80024a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002474:	4a0d      	ldr	r2, [pc, #52]	; (80024ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002478:	e002      	b.n	8002480 <LoopCopyDataInit>

0800247a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800247c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247e:	3304      	adds	r3, #4

08002480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002484:	d3f9      	bcc.n	800247a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002488:	4c0a      	ldr	r4, [pc, #40]	; (80024b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800248c:	e001      	b.n	8002492 <LoopFillZerobss>

0800248e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002490:	3204      	adds	r2, #4

08002492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002494:	d3fb      	bcc.n	800248e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002496:	f7ff ff69 	bl	800236c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249a:	f00a fe99 	bl	800d1d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800249e:	f7fe f87f 	bl	80005a0 <main>
  bx lr
 80024a2:	4770      	bx	lr
  ldr r0, =_sdata
 80024a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a8:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80024ac:	0800d9e0 	.word	0x0800d9e0
  ldr r2, =_sbss
 80024b0:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80024b4:	20003274 	.word	0x20003274

080024b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024b8:	e7fe      	b.n	80024b8 <ADC1_2_IRQHandler>
	...

080024bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_Init+0x28>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <HAL_Init+0x28>)
 80024c6:	f043 0310 	orr.w	r3, r3, #16
 80024ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024cc:	2003      	movs	r0, #3
 80024ce:	f000 f8d1 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f7ff feba 	bl	800224c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d8:	f7ff fe80 	bl	80021dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40022000 	.word	0x40022000

080024e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_IncTick+0x1c>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_IncTick+0x20>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	4a03      	ldr	r2, [pc, #12]	; (8002508 <HAL_IncTick+0x20>)
 80024fa:	6013      	str	r3, [r2, #0]
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	20000014 	.word	0x20000014
 8002508:	200022b0 	.word	0x200022b0

0800250c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return uwTick;
 8002510:	4b02      	ldr	r3, [pc, #8]	; (800251c <HAL_GetTick+0x10>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	200022b0 	.word	0x200022b0

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800254c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002552:	4a04      	ldr	r2, [pc, #16]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60d3      	str	r3, [r2, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db0b      	blt.n	80025ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4906      	ldr	r1, [pc, #24]	; (80025b8 <__NVIC_EnableIRQ+0x34>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2001      	movs	r0, #1
 80025a6:	fa00 f202 	lsl.w	r2, r0, r2
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	e000e100 	.word	0xe000e100

080025bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	db0a      	blt.n	80025e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	490c      	ldr	r1, [pc, #48]	; (8002608 <__NVIC_SetPriority+0x4c>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	440b      	add	r3, r1
 80025e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e4:	e00a      	b.n	80025fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4908      	ldr	r1, [pc, #32]	; (800260c <__NVIC_SetPriority+0x50>)
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	3b04      	subs	r3, #4
 80025f4:	0112      	lsls	r2, r2, #4
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	440b      	add	r3, r1
 80025fa:	761a      	strb	r2, [r3, #24]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000e100 	.word	0xe000e100
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f1c3 0307 	rsb	r3, r3, #7
 800262a:	2b04      	cmp	r3, #4
 800262c:	bf28      	it	cs
 800262e:	2304      	movcs	r3, #4
 8002630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3304      	adds	r3, #4
 8002636:	2b06      	cmp	r3, #6
 8002638:	d902      	bls.n	8002640 <NVIC_EncodePriority+0x30>
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3b03      	subs	r3, #3
 800263e:	e000      	b.n	8002642 <NVIC_EncodePriority+0x32>
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	f04f 32ff 	mov.w	r2, #4294967295
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43da      	mvns	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	401a      	ands	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002658:	f04f 31ff 	mov.w	r1, #4294967295
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	43d9      	mvns	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	4313      	orrs	r3, r2
         );
}
 800266a:	4618      	mov	r0, r3
 800266c:	3724      	adds	r7, #36	; 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ff4f 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800269c:	f7ff ff64 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	f7ff ffb2 	bl	8002610 <NVIC_EncodePriority>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff81 	bl	80025bc <__NVIC_SetPriority>
}
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff57 	bl	8002584 <__NVIC_EnableIRQ>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d008      	beq.n	8002706 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2204      	movs	r2, #4
 80026f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e020      	b.n	8002748 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 020e 	bic.w	r2, r2, #14
 8002714:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0201 	bic.w	r2, r2, #1
 8002724:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	2101      	movs	r1, #1
 8002730:	fa01 f202 	lsl.w	r2, r1, r2
 8002734:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002746:	7bfb      	ldrb	r3, [r7, #15]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
	...

08002754 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002766:	2b02      	cmp	r3, #2
 8002768:	d005      	beq.n	8002776 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2204      	movs	r2, #4
 800276e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	e051      	b.n	800281a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 020e 	bic.w	r2, r2, #14
 8002784:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a22      	ldr	r2, [pc, #136]	; (8002824 <HAL_DMA_Abort_IT+0xd0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d029      	beq.n	80027f4 <HAL_DMA_Abort_IT+0xa0>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a20      	ldr	r2, [pc, #128]	; (8002828 <HAL_DMA_Abort_IT+0xd4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d022      	beq.n	80027f0 <HAL_DMA_Abort_IT+0x9c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1f      	ldr	r2, [pc, #124]	; (800282c <HAL_DMA_Abort_IT+0xd8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d01a      	beq.n	80027ea <HAL_DMA_Abort_IT+0x96>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_DMA_Abort_IT+0xdc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d012      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x90>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <HAL_DMA_Abort_IT+0xe0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00a      	beq.n	80027de <HAL_DMA_Abort_IT+0x8a>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <HAL_DMA_Abort_IT+0xe4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d102      	bne.n	80027d8 <HAL_DMA_Abort_IT+0x84>
 80027d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027d6:	e00e      	b.n	80027f6 <HAL_DMA_Abort_IT+0xa2>
 80027d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027dc:	e00b      	b.n	80027f6 <HAL_DMA_Abort_IT+0xa2>
 80027de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027e2:	e008      	b.n	80027f6 <HAL_DMA_Abort_IT+0xa2>
 80027e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e8:	e005      	b.n	80027f6 <HAL_DMA_Abort_IT+0xa2>
 80027ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ee:	e002      	b.n	80027f6 <HAL_DMA_Abort_IT+0xa2>
 80027f0:	2310      	movs	r3, #16
 80027f2:	e000      	b.n	80027f6 <HAL_DMA_Abort_IT+0xa2>
 80027f4:	2301      	movs	r3, #1
 80027f6:	4a11      	ldr	r2, [pc, #68]	; (800283c <HAL_DMA_Abort_IT+0xe8>)
 80027f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
    } 
  }
  return status;
 800281a:	7bfb      	ldrb	r3, [r7, #15]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40020008 	.word	0x40020008
 8002828:	4002001c 	.word	0x4002001c
 800282c:	40020030 	.word	0x40020030
 8002830:	40020044 	.word	0x40020044
 8002834:	40020058 	.word	0x40020058
 8002838:	4002006c 	.word	0x4002006c
 800283c:	40020000 	.word	0x40020000

08002840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002840:	b480      	push	{r7}
 8002842:	b08b      	sub	sp, #44	; 0x2c
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800284a:	2300      	movs	r3, #0
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800284e:	2300      	movs	r3, #0
 8002850:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002852:	e169      	b.n	8002b28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002854:	2201      	movs	r2, #1
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 8158 	bne.w	8002b22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a9a      	ldr	r2, [pc, #616]	; (8002ae0 <HAL_GPIO_Init+0x2a0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d05e      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 800287c:	4a98      	ldr	r2, [pc, #608]	; (8002ae0 <HAL_GPIO_Init+0x2a0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d875      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 8002882:	4a98      	ldr	r2, [pc, #608]	; (8002ae4 <HAL_GPIO_Init+0x2a4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d058      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 8002888:	4a96      	ldr	r2, [pc, #600]	; (8002ae4 <HAL_GPIO_Init+0x2a4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d86f      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 800288e:	4a96      	ldr	r2, [pc, #600]	; (8002ae8 <HAL_GPIO_Init+0x2a8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d052      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 8002894:	4a94      	ldr	r2, [pc, #592]	; (8002ae8 <HAL_GPIO_Init+0x2a8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d869      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 800289a:	4a94      	ldr	r2, [pc, #592]	; (8002aec <HAL_GPIO_Init+0x2ac>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d04c      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 80028a0:	4a92      	ldr	r2, [pc, #584]	; (8002aec <HAL_GPIO_Init+0x2ac>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d863      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 80028a6:	4a92      	ldr	r2, [pc, #584]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d046      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 80028ac:	4a90      	ldr	r2, [pc, #576]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d85d      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 80028b2:	2b12      	cmp	r3, #18
 80028b4:	d82a      	bhi.n	800290c <HAL_GPIO_Init+0xcc>
 80028b6:	2b12      	cmp	r3, #18
 80028b8:	d859      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 80028ba:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <HAL_GPIO_Init+0x80>)
 80028bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c0:	0800293b 	.word	0x0800293b
 80028c4:	08002915 	.word	0x08002915
 80028c8:	08002927 	.word	0x08002927
 80028cc:	08002969 	.word	0x08002969
 80028d0:	0800296f 	.word	0x0800296f
 80028d4:	0800296f 	.word	0x0800296f
 80028d8:	0800296f 	.word	0x0800296f
 80028dc:	0800296f 	.word	0x0800296f
 80028e0:	0800296f 	.word	0x0800296f
 80028e4:	0800296f 	.word	0x0800296f
 80028e8:	0800296f 	.word	0x0800296f
 80028ec:	0800296f 	.word	0x0800296f
 80028f0:	0800296f 	.word	0x0800296f
 80028f4:	0800296f 	.word	0x0800296f
 80028f8:	0800296f 	.word	0x0800296f
 80028fc:	0800296f 	.word	0x0800296f
 8002900:	0800296f 	.word	0x0800296f
 8002904:	0800291d 	.word	0x0800291d
 8002908:	08002931 	.word	0x08002931
 800290c:	4a79      	ldr	r2, [pc, #484]	; (8002af4 <HAL_GPIO_Init+0x2b4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002912:	e02c      	b.n	800296e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	623b      	str	r3, [r7, #32]
          break;
 800291a:	e029      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	3304      	adds	r3, #4
 8002922:	623b      	str	r3, [r7, #32]
          break;
 8002924:	e024      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	3308      	adds	r3, #8
 800292c:	623b      	str	r3, [r7, #32]
          break;
 800292e:	e01f      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	330c      	adds	r3, #12
 8002936:	623b      	str	r3, [r7, #32]
          break;
 8002938:	e01a      	b.n	8002970 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002942:	2304      	movs	r3, #4
 8002944:	623b      	str	r3, [r7, #32]
          break;
 8002946:	e013      	b.n	8002970 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002950:	2308      	movs	r3, #8
 8002952:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	611a      	str	r2, [r3, #16]
          break;
 800295a:	e009      	b.n	8002970 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800295c:	2308      	movs	r3, #8
 800295e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	615a      	str	r2, [r3, #20]
          break;
 8002966:	e003      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002968:	2300      	movs	r3, #0
 800296a:	623b      	str	r3, [r7, #32]
          break;
 800296c:	e000      	b.n	8002970 <HAL_GPIO_Init+0x130>
          break;
 800296e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2bff      	cmp	r3, #255	; 0xff
 8002974:	d801      	bhi.n	800297a <HAL_GPIO_Init+0x13a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	e001      	b.n	800297e <HAL_GPIO_Init+0x13e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3304      	adds	r3, #4
 800297e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2bff      	cmp	r3, #255	; 0xff
 8002984:	d802      	bhi.n	800298c <HAL_GPIO_Init+0x14c>
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	e002      	b.n	8002992 <HAL_GPIO_Init+0x152>
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	3b08      	subs	r3, #8
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	210f      	movs	r1, #15
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	fa01 f303 	lsl.w	r3, r1, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	401a      	ands	r2, r3
 80029a4:	6a39      	ldr	r1, [r7, #32]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	431a      	orrs	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80b1 	beq.w	8002b22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029c0:	4b4d      	ldr	r3, [pc, #308]	; (8002af8 <HAL_GPIO_Init+0x2b8>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	4a4c      	ldr	r2, [pc, #304]	; (8002af8 <HAL_GPIO_Init+0x2b8>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6193      	str	r3, [r2, #24]
 80029cc:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_GPIO_Init+0x2b8>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029d8:	4a48      	ldr	r2, [pc, #288]	; (8002afc <HAL_GPIO_Init+0x2bc>)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	3302      	adds	r3, #2
 80029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	220f      	movs	r2, #15
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4013      	ands	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a40      	ldr	r2, [pc, #256]	; (8002b00 <HAL_GPIO_Init+0x2c0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d013      	beq.n	8002a2c <HAL_GPIO_Init+0x1ec>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a3f      	ldr	r2, [pc, #252]	; (8002b04 <HAL_GPIO_Init+0x2c4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00d      	beq.n	8002a28 <HAL_GPIO_Init+0x1e8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a3e      	ldr	r2, [pc, #248]	; (8002b08 <HAL_GPIO_Init+0x2c8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <HAL_GPIO_Init+0x1e4>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a3d      	ldr	r2, [pc, #244]	; (8002b0c <HAL_GPIO_Init+0x2cc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_GPIO_Init+0x1e0>
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e006      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a20:	2304      	movs	r3, #4
 8002a22:	e004      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e002      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a30:	f002 0203 	and.w	r2, r2, #3
 8002a34:	0092      	lsls	r2, r2, #2
 8002a36:	4093      	lsls	r3, r2
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a3e:	492f      	ldr	r1, [pc, #188]	; (8002afc <HAL_GPIO_Init+0x2bc>)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d006      	beq.n	8002a66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a58:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	492c      	ldr	r1, [pc, #176]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]
 8002a64:	e006      	b.n	8002a74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a66:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	4928      	ldr	r1, [pc, #160]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d006      	beq.n	8002a8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a80:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4922      	ldr	r1, [pc, #136]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	491e      	ldr	r1, [pc, #120]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	4918      	ldr	r1, [pc, #96]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]
 8002ab4:	e006      	b.n	8002ac4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	4914      	ldr	r1, [pc, #80]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d021      	beq.n	8002b14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	490e      	ldr	r1, [pc, #56]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60cb      	str	r3, [r1, #12]
 8002adc:	e021      	b.n	8002b22 <HAL_GPIO_Init+0x2e2>
 8002ade:	bf00      	nop
 8002ae0:	10320000 	.word	0x10320000
 8002ae4:	10310000 	.word	0x10310000
 8002ae8:	10220000 	.word	0x10220000
 8002aec:	10210000 	.word	0x10210000
 8002af0:	10120000 	.word	0x10120000
 8002af4:	10110000 	.word	0x10110000
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40010000 	.word	0x40010000
 8002b00:	40010800 	.word	0x40010800
 8002b04:	40010c00 	.word	0x40010c00
 8002b08:	40011000 	.word	0x40011000
 8002b0c:	40011400 	.word	0x40011400
 8002b10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	4909      	ldr	r1, [pc, #36]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	3301      	adds	r3, #1
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f47f ae8e 	bne.w	8002854 <HAL_GPIO_Init+0x14>
  }
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	372c      	adds	r7, #44	; 0x2c
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	40010400 	.word	0x40010400

08002b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	887b      	ldrh	r3, [r7, #2]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e001      	b.n	8002b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	807b      	strh	r3, [r7, #2]
 8002b82:	4613      	mov	r3, r2
 8002b84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b86:	787b      	ldrb	r3, [r7, #1]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8c:	887a      	ldrh	r2, [r7, #2]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b92:	e003      	b.n	8002b9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	041a      	lsls	r2, r3, #16
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	611a      	str	r2, [r3, #16]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bb8:	887a      	ldrh	r2, [r7, #2]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	041a      	lsls	r2, r3, #16
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	887b      	ldrh	r3, [r7, #2]
 8002bc6:	400b      	ands	r3, r1
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	611a      	str	r2, [r3, #16]
}
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bee:	4a05      	ldr	r2, [pc, #20]	; (8002c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f806 	bl	8002c08 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40010400 	.word	0x40010400

08002c08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c1e:	b08b      	sub	sp, #44	; 0x2c
 8002c20:	af06      	add	r7, sp, #24
 8002c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0fd      	b.n	8002e2a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f00a f81a 	bl	800cc7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 f8f9 	bl	8005e4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	687e      	ldr	r6, [r7, #4]
 8002c62:	466d      	mov	r5, sp
 8002c64:	f106 0410 	add.w	r4, r6, #16
 8002c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	602b      	str	r3, [r5, #0]
 8002c70:	1d33      	adds	r3, r6, #4
 8002c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c74:	6838      	ldr	r0, [r7, #0]
 8002c76:	f003 f8c3 	bl	8005e00 <USB_CoreInit>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0ce      	b.n	8002e2a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f003 f8f4 	bl	8005e80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	73fb      	strb	r3, [r7, #15]
 8002c9c:	e04c      	b.n	8002d38 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	3301      	adds	r3, #1
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	b298      	uxth	r0, r3
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	3336      	adds	r3, #54	; 0x36
 8002cdc:	4602      	mov	r2, r0
 8002cde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	440b      	add	r3, r1
 8002cf0:	3303      	adds	r3, #3
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	440b      	add	r3, r1
 8002d04:	3338      	adds	r3, #56	; 0x38
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	333c      	adds	r3, #60	; 0x3c
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d1e:	7bfa      	ldrb	r2, [r7, #15]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3340      	adds	r3, #64	; 0x40
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	3301      	adds	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d3ad      	bcc.n	8002c9e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
 8002d46:	e044      	b.n	8002dd2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002db6:	7bfa      	ldrb	r2, [r7, #15]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
 8002dd2:	7bfa      	ldrb	r2, [r7, #15]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d3b5      	bcc.n	8002d48 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	687e      	ldr	r6, [r7, #4]
 8002de4:	466d      	mov	r5, sp
 8002de6:	f106 0410 	add.w	r4, r6, #16
 8002dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	602b      	str	r3, [r5, #0]
 8002df2:	1d33      	adds	r3, r6, #4
 8002df4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002df6:	6838      	ldr	r0, [r7, #0]
 8002df8:	f003 f84e 	bl	8005e98 <USB_DevInit>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2202      	movs	r2, #2
 8002e06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00d      	b.n	8002e2a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f005 f9bf 	bl	80081a6 <USB_DevDisconnect>

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e32 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_PCD_Start+0x16>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e016      	b.n	8002e76 <HAL_PCD_Start+0x44>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f002 ffe3 	bl	8005e20 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f00a f980 	bl	800d162 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f005 f993 	bl	8008192 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b088      	sub	sp, #32
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f005 f995 	bl	80081ba <USB_ReadInterrupts>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e9a:	d102      	bne.n	8002ea2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fb61 	bl	8003564 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f005 f987 	bl	80081ba <USB_ReadInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb6:	d112      	bne.n	8002ede <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eca:	b292      	uxth	r2, r2
 8002ecc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f009 ff4e 	bl	800cd72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f925 	bl	8003128 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f005 f969 	bl	80081ba <USB_ReadInterrupts>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ef2:	d10b      	bne.n	8002f0c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f06:	b292      	uxth	r2, r2
 8002f08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f005 f952 	bl	80081ba <USB_ReadInterrupts>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f20:	d10b      	bne.n	8002f3a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f34:	b292      	uxth	r2, r2
 8002f36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f005 f93b 	bl	80081ba <USB_ReadInterrupts>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4e:	d126      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0204 	bic.w	r2, r2, #4
 8002f62:	b292      	uxth	r2, r2
 8002f64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0208 	bic.w	r2, r2, #8
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f009 ff2f 	bl	800cde4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f98:	b292      	uxth	r2, r2
 8002f9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f005 f909 	bl	80081ba <USB_ReadInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb2:	f040 8084 	bne.w	80030be <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	e011      	b.n	8002fe0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	7ffb      	ldrb	r3, [r7, #31]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	441a      	add	r2, r3
 8002fc8:	7ffb      	ldrb	r3, [r7, #31]
 8002fca:	8812      	ldrh	r2, [r2, #0]
 8002fcc:	b292      	uxth	r2, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	f107 0120 	add.w	r1, r7, #32
 8002fd4:	440b      	add	r3, r1
 8002fd6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002fda:	7ffb      	ldrb	r3, [r7, #31]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	77fb      	strb	r3, [r7, #31]
 8002fe0:	7ffb      	ldrb	r3, [r7, #31]
 8002fe2:	2b07      	cmp	r3, #7
 8002fe4:	d9ea      	bls.n	8002fbc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	b292      	uxth	r2, r2
 8002ffa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003006:	b29a      	uxth	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0201 	bic.w	r2, r2, #1
 8003010:	b292      	uxth	r2, r2
 8003012:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003016:	bf00      	nop
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003020:	b29b      	uxth	r3, r3
 8003022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f6      	beq.n	8003018 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003032:	b29a      	uxth	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800303c:	b292      	uxth	r2, r2
 800303e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003042:	2300      	movs	r3, #0
 8003044:	77fb      	strb	r3, [r7, #31]
 8003046:	e010      	b.n	800306a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003048:	7ffb      	ldrb	r3, [r7, #31]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	4611      	mov	r1, r2
 8003050:	7ffa      	ldrb	r2, [r7, #31]
 8003052:	0092      	lsls	r2, r2, #2
 8003054:	440a      	add	r2, r1
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	f107 0120 	add.w	r1, r7, #32
 800305c:	440b      	add	r3, r1
 800305e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003062:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003064:	7ffb      	ldrb	r3, [r7, #31]
 8003066:	3301      	adds	r3, #1
 8003068:	77fb      	strb	r3, [r7, #31]
 800306a:	7ffb      	ldrb	r3, [r7, #31]
 800306c:	2b07      	cmp	r3, #7
 800306e:	d9eb      	bls.n	8003048 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003078:	b29a      	uxth	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0208 	orr.w	r2, r2, #8
 8003082:	b292      	uxth	r2, r2
 8003084:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003090:	b29a      	uxth	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309a:	b292      	uxth	r2, r2
 800309c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0204 	orr.w	r2, r2, #4
 80030b2:	b292      	uxth	r2, r2
 80030b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f009 fe79 	bl	800cdb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f005 f879 	bl	80081ba <USB_ReadInterrupts>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d2:	d10e      	bne.n	80030f2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030dc:	b29a      	uxth	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030e6:	b292      	uxth	r2, r2
 80030e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f009 fe32 	bl	800cd56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f005 f85f 	bl	80081ba <USB_ReadInterrupts>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003106:	d10b      	bne.n	8003120 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003110:	b29a      	uxth	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800311a:	b292      	uxth	r2, r2
 800311c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003120:	bf00      	nop
 8003122:	3720      	adds	r7, #32
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_PCD_SetAddress+0x1a>
 800313e:	2302      	movs	r3, #2
 8003140:	e013      	b.n	800316a <HAL_PCD_SetAddress+0x42>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f005 f806 	bl	800816c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	4608      	mov	r0, r1
 800317c:	4611      	mov	r1, r2
 800317e:	461a      	mov	r2, r3
 8003180:	4603      	mov	r3, r0
 8003182:	70fb      	strb	r3, [r7, #3]
 8003184:	460b      	mov	r3, r1
 8003186:	803b      	strh	r3, [r7, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003194:	2b00      	cmp	r3, #0
 8003196:	da0e      	bge.n	80031b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	705a      	strb	r2, [r3, #1]
 80031b4:	e00e      	b.n	80031d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	f003 0207 	and.w	r2, r3, #7
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031e0:	883a      	ldrh	r2, [r7, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	78ba      	ldrb	r2, [r7, #2]
 80031ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	785b      	ldrb	r3, [r3, #1]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d004      	beq.n	80031fe <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031fe:	78bb      	ldrb	r3, [r7, #2]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d102      	bne.n	800320a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_PCD_EP_Open+0xa6>
 8003214:	2302      	movs	r3, #2
 8003216:	e00e      	b.n	8003236 <HAL_PCD_EP_Open+0xc4>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68f9      	ldr	r1, [r7, #12]
 8003226:	4618      	mov	r0, r3
 8003228:	f002 fe56 	bl	8005ed8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003234:	7afb      	ldrb	r3, [r7, #11]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	460b      	mov	r3, r1
 8003248:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800324a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800324e:	2b00      	cmp	r3, #0
 8003250:	da0e      	bge.n	8003270 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	705a      	strb	r2, [r3, #1]
 800326e:	e00e      	b.n	800328e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	f003 0207 	and.w	r2, r3, #7
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	b2da      	uxtb	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_PCD_EP_Close+0x6a>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e00e      	b.n	80032c6 <HAL_PCD_EP_Close+0x88>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68f9      	ldr	r1, [r7, #12]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f003 f978 	bl	80065ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b086      	sub	sp, #24
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
 80032da:	460b      	mov	r3, r1
 80032dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032de:	7afb      	ldrb	r3, [r7, #11]
 80032e0:	f003 0207 	and.w	r2, r3, #7
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2200      	movs	r2, #0
 8003306:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2200      	movs	r2, #0
 800330c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800330e:	7afb      	ldrb	r3, [r7, #11]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	b2da      	uxtb	r2, r3
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800331a:	7afb      	ldrb	r3, [r7, #11]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	2b00      	cmp	r3, #0
 8003322:	d106      	bne.n	8003332 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6979      	ldr	r1, [r7, #20]
 800332a:	4618      	mov	r0, r3
 800332c:	f003 fb2a 	bl	8006984 <USB_EPStartXfer>
 8003330:	e005      	b.n	800333e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6979      	ldr	r1, [r7, #20]
 8003338:	4618      	mov	r0, r3
 800333a:	f003 fb23 	bl	8006984 <USB_EPStartXfer>
  }

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	f003 0207 	and.w	r2, r3, #7
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b086      	sub	sp, #24
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	460b      	mov	r3, r1
 8003384:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003386:	7afb      	ldrb	r3, [r7, #11]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4413      	add	r3, r2
 800339a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2200      	movs	r2, #0
 80033ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2201      	movs	r2, #1
 80033c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c2:	7afb      	ldrb	r3, [r7, #11]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033ce:	7afb      	ldrb	r3, [r7, #11]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d106      	bne.n	80033e6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6979      	ldr	r1, [r7, #20]
 80033de:	4618      	mov	r0, r3
 80033e0:	f003 fad0 	bl	8006984 <USB_EPStartXfer>
 80033e4:	e005      	b.n	80033f2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6979      	ldr	r1, [r7, #20]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f003 fac9 	bl	8006984 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	f003 0207 	and.w	r2, r3, #7
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	429a      	cmp	r2, r3
 8003414:	d901      	bls.n	800341a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e04c      	b.n	80034b4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800341a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800341e:	2b00      	cmp	r3, #0
 8003420:	da0e      	bge.n	8003440 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	705a      	strb	r2, [r3, #1]
 800343e:	e00c      	b.n	800345a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4413      	add	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	b2da      	uxtb	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_PCD_EP_SetStall+0x7e>
 8003476:	2302      	movs	r3, #2
 8003478:	e01c      	b.n	80034b4 <HAL_PCD_EP_SetStall+0xb8>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68f9      	ldr	r1, [r7, #12]
 8003488:	4618      	mov	r0, r3
 800348a:	f004 fd72 	bl	8007f72 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	2b00      	cmp	r3, #0
 8003496:	d108      	bne.n	80034aa <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f004 fe97 	bl	80081d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	f003 020f 	and.w	r2, r3, #15
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d901      	bls.n	80034da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e040      	b.n	800355c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	da0e      	bge.n	8003500 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2201      	movs	r2, #1
 80034fc:	705a      	strb	r2, [r3, #1]
 80034fe:	e00e      	b.n	800351e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	f003 0207 	and.w	r2, r3, #7
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	b2da      	uxtb	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_PCD_EP_ClrStall+0x82>
 800353a:	2302      	movs	r3, #2
 800353c:	e00e      	b.n	800355c <HAL_PCD_EP_ClrStall+0xa0>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68f9      	ldr	r1, [r7, #12]
 800354c:	4618      	mov	r0, r3
 800354e:	f004 fd60 	bl	8008012 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08e      	sub	sp, #56	; 0x38
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800356c:	e2ec      	b.n	8003b48 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003576:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003578:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003584:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003588:	2b00      	cmp	r3, #0
 800358a:	f040 8161 	bne.w	8003850 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800358e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b00      	cmp	r3, #0
 8003596:	d152      	bne.n	800363e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80035a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a8:	81fb      	strh	r3, [r7, #14]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	89fb      	ldrh	r3, [r7, #14]
 80035b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3328      	adds	r3, #40	; 0x28
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	3302      	adds	r3, #2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	441a      	add	r2, r3
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80035fc:	2100      	movs	r1, #0
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f009 fb8f 	bl	800cd22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 829b 	beq.w	8003b48 <PCD_EP_ISR_Handler+0x5e4>
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 8296 	bne.w	8003b48 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003622:	b2db      	uxtb	r3, r3
 8003624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003628:	b2da      	uxtb	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	b292      	uxth	r2, r2
 8003630:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800363c:	e284      	b.n	8003b48 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800364e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003654:	2b00      	cmp	r3, #0
 8003656:	d034      	beq.n	80036c2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003660:	b29b      	uxth	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	3306      	adds	r3, #6
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6818      	ldr	r0, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003696:	b29b      	uxth	r3, r3
 8003698:	f004 fdee 	bl	8008278 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036a8:	4013      	ands	r3, r2
 80036aa:	823b      	strh	r3, [r7, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	8a3a      	ldrh	r2, [r7, #16]
 80036b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036b6:	b292      	uxth	r2, r2
 80036b8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f009 fb04 	bl	800ccc8 <HAL_PCD_SetupStageCallback>
 80036c0:	e242      	b.n	8003b48 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036c2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f280 823e 	bge.w	8003b48 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036d8:	4013      	ands	r3, r2
 80036da:	83bb      	strh	r3, [r7, #28]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	8bba      	ldrh	r2, [r7, #28]
 80036e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036e6:	b292      	uxth	r2, r2
 80036e8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	3306      	adds	r3, #6
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6812      	ldr	r2, [r2, #0]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d019      	beq.n	8003752 <PCD_EP_ISR_Handler+0x1ee>
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d015      	beq.n	8003752 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	6959      	ldr	r1, [r3, #20]
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003736:	b29b      	uxth	r3, r3
 8003738:	f004 fd9e 	bl	8008278 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	441a      	add	r2, r3
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800374a:	2100      	movs	r1, #0
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f009 facd 	bl	800ccec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	b29b      	uxth	r3, r3
 800375a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 81f2 	bne.w	8003b48 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003772:	b29b      	uxth	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	4413      	add	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d112      	bne.n	80037b2 <PCD_EP_ISR_Handler+0x24e>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003796:	b29a      	uxth	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	801a      	strh	r2, [r3, #0]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	801a      	strh	r2, [r3, #0]
 80037b0:	e02f      	b.n	8003812 <PCD_EP_ISR_Handler+0x2ae>
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b3e      	cmp	r3, #62	; 0x3e
 80037b8:	d813      	bhi.n	80037e2 <PCD_EP_ISR_Handler+0x27e>
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	085b      	lsrs	r3, r3, #1
 80037c0:	633b      	str	r3, [r7, #48]	; 0x30
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <PCD_EP_ISR_Handler+0x270>
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	3301      	adds	r3, #1
 80037d2:	633b      	str	r3, [r7, #48]	; 0x30
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	029b      	lsls	r3, r3, #10
 80037da:	b29a      	uxth	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	801a      	strh	r2, [r3, #0]
 80037e0:	e017      	b.n	8003812 <PCD_EP_ISR_Handler+0x2ae>
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	633b      	str	r3, [r7, #48]	; 0x30
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <PCD_EP_ISR_Handler+0x298>
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	3b01      	subs	r3, #1
 80037fa:	633b      	str	r3, [r7, #48]	; 0x30
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	b29b      	uxth	r3, r3
 8003800:	029b      	lsls	r3, r3, #10
 8003802:	b29b      	uxth	r3, r3
 8003804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800380c:	b29a      	uxth	r2, r3
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	b29b      	uxth	r3, r3
 800381a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800381e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003822:	827b      	strh	r3, [r7, #18]
 8003824:	8a7b      	ldrh	r3, [r7, #18]
 8003826:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800382a:	827b      	strh	r3, [r7, #18]
 800382c:	8a7b      	ldrh	r3, [r7, #18]
 800382e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003832:	827b      	strh	r3, [r7, #18]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	8a7b      	ldrh	r3, [r7, #18]
 800383a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800383e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800384a:	b29b      	uxth	r3, r3
 800384c:	8013      	strh	r3, [r2, #0]
 800384e:	e17b      	b.n	8003b48 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003862:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003866:	2b00      	cmp	r3, #0
 8003868:	f280 80ea 	bge.w	8003a40 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	b29a      	uxth	r2, r3
 800387e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003882:	4013      	ands	r3, r2
 8003884:	853b      	strh	r3, [r7, #40]	; 0x28
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003896:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800389a:	b292      	uxth	r2, r2
 800389c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800389e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	7b1b      	ldrb	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d122      	bne.n	8003902 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	461a      	mov	r2, r3
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4413      	add	r3, r2
 80038d0:	3306      	adds	r3, #6
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038e4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80038e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8087 	beq.w	80039fc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	6959      	ldr	r1, [r3, #20]
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	88da      	ldrh	r2, [r3, #6]
 80038fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038fc:	f004 fcbc 	bl	8008278 <USB_ReadPMA>
 8003900:	e07c      	b.n	80039fc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	78db      	ldrb	r3, [r3, #3]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d108      	bne.n	800391c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800390a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800390c:	461a      	mov	r2, r3
 800390e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f927 	bl	8003b64 <HAL_PCD_EP_DB_Receive>
 8003916:	4603      	mov	r3, r0
 8003918:	86fb      	strh	r3, [r7, #54]	; 0x36
 800391a:	e06f      	b.n	80039fc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003936:	847b      	strh	r3, [r7, #34]	; 0x22
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	441a      	add	r2, r3
 8003946:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800394c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003954:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003958:	b29b      	uxth	r3, r3
 800395a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d021      	beq.n	80039ba <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800397e:	b29b      	uxth	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	3302      	adds	r3, #2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800399e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80039a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d02a      	beq.n	80039fc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	6959      	ldr	r1, [r3, #20]
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	891a      	ldrh	r2, [r3, #8]
 80039b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039b4:	f004 fc60 	bl	8008278 <USB_ReadPMA>
 80039b8:	e020      	b.n	80039fc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	3306      	adds	r3, #6
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039e2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80039e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	6959      	ldr	r1, [r3, #20]
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	895a      	ldrh	r2, [r3, #10]
 80039f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039f8:	f004 fc3e 	bl	8008278 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	69da      	ldr	r2, [r3, #28]
 8003a00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a02:	441a      	add	r2, r3
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a0e:	441a      	add	r2, r3
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d004      	beq.n	8003a26 <PCD_EP_ISR_Handler+0x4c2>
 8003a1c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d206      	bcs.n	8003a34 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f009 f95d 	bl	800ccec <HAL_PCD_DataOutStageCallback>
 8003a32:	e005      	b.n	8003a40 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f002 ffa2 	bl	8006984 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003a40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d07e      	beq.n	8003b48 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003a4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a78:	843b      	strh	r3, [r7, #32]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	441a      	add	r2, r3
 8003a88:	8c3b      	ldrh	r3, [r7, #32]
 8003a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	78db      	ldrb	r3, [r3, #3]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d00c      	beq.n	8003ab8 <PCD_EP_ISR_Handler+0x554>
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	78db      	ldrb	r3, [r3, #3]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d146      	bne.n	8003b3c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003aae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d141      	bne.n	8003b3c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	3302      	adds	r3, #2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	8bfb      	ldrh	r3, [r7, #30]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d906      	bls.n	8003afa <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	8bfb      	ldrh	r3, [r7, #30]
 8003af2:	1ad2      	subs	r2, r2, r3
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	619a      	str	r2, [r3, #24]
 8003af8:	e002      	b.n	8003b00 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f009 f907 	bl	800cd22 <HAL_PCD_DataInStageCallback>
 8003b14:	e018      	b.n	8003b48 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	8bfb      	ldrh	r3, [r7, #30]
 8003b1c:	441a      	add	r2, r3
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	8bfb      	ldrh	r3, [r7, #30]
 8003b28:	441a      	add	r2, r3
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b34:	4618      	mov	r0, r3
 8003b36:	f002 ff25 	bl	8006984 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003b3a:	e005      	b.n	8003b48 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b3e:	461a      	mov	r2, r3
 8003b40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f91b 	bl	8003d7e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	b21b      	sxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f6ff ad0a 	blt.w	800356e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3738      	adds	r7, #56	; 0x38
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d07e      	beq.n	8003c7a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4413      	add	r3, r2
 8003b90:	3302      	adds	r3, #2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ba4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	8b7b      	ldrh	r3, [r7, #26]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d306      	bcc.n	8003bbe <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	8b7b      	ldrh	r3, [r7, #26]
 8003bb6:	1ad2      	subs	r2, r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	619a      	str	r2, [r3, #24]
 8003bbc:	e002      	b.n	8003bc4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d123      	bne.n	8003c14 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	833b      	strh	r3, [r7, #24]
 8003be8:	8b3b      	ldrh	r3, [r7, #24]
 8003bea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bee:	833b      	strh	r3, [r7, #24]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	441a      	add	r2, r3
 8003bfe:	8b3b      	ldrh	r3, [r7, #24]
 8003c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d01f      	beq.n	8003c5e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c38:	82fb      	strh	r3, [r7, #22]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	441a      	add	r2, r3
 8003c48:	8afb      	ldrh	r3, [r7, #22]
 8003c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c5e:	8b7b      	ldrh	r3, [r7, #26]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8087 	beq.w	8003d74 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	6959      	ldr	r1, [r3, #20]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	891a      	ldrh	r2, [r3, #8]
 8003c72:	8b7b      	ldrh	r3, [r7, #26]
 8003c74:	f004 fb00 	bl	8008278 <USB_ReadPMA>
 8003c78:	e07c      	b.n	8003d74 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3306      	adds	r3, #6
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ca2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	699a      	ldr	r2, [r3, #24]
 8003ca8:	8b7b      	ldrh	r3, [r7, #26]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d306      	bcc.n	8003cbc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	8b7b      	ldrh	r3, [r7, #26]
 8003cb4:	1ad2      	subs	r2, r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	619a      	str	r2, [r3, #24]
 8003cba:	e002      	b.n	8003cc2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d123      	bne.n	8003d12 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce4:	83fb      	strh	r3, [r7, #30]
 8003ce6:	8bfb      	ldrh	r3, [r7, #30]
 8003ce8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003cec:	83fb      	strh	r3, [r7, #30]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	441a      	add	r2, r3
 8003cfc:	8bfb      	ldrh	r3, [r7, #30]
 8003cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d12:	88fb      	ldrh	r3, [r7, #6]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d11f      	bne.n	8003d5c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	83bb      	strh	r3, [r7, #28]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	441a      	add	r2, r3
 8003d46:	8bbb      	ldrh	r3, [r7, #28]
 8003d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d5c:	8b7b      	ldrh	r3, [r7, #26]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	6959      	ldr	r1, [r3, #20]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	895a      	ldrh	r2, [r3, #10]
 8003d6e:	8b7b      	ldrh	r3, [r7, #26]
 8003d70:	f004 fa82 	bl	8008278 <USB_ReadPMA>
    }
  }

  return count;
 8003d74:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b0a2      	sub	sp, #136	; 0x88
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 81c7 	beq.w	8004126 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	3302      	adds	r3, #2
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dc0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	699a      	ldr	r2, [r3, #24]
 8003dc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d907      	bls.n	8003de0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	699a      	ldr	r2, [r3, #24]
 8003dd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003dd8:	1ad2      	subs	r2, r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	619a      	str	r2, [r3, #24]
 8003dde:	e002      	b.n	8003de6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2200      	movs	r2, #0
 8003de4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f040 80b9 	bne.w	8003f62 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	785b      	ldrb	r3, [r3, #1]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d126      	bne.n	8003e46 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	4413      	add	r3, r2
 8003e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	011a      	lsls	r2, r3, #4
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	4413      	add	r3, r2
 8003e1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	801a      	strh	r2, [r3, #0]
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	801a      	strh	r2, [r3, #0]
 8003e44:	e01a      	b.n	8003e7c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	785b      	ldrb	r3, [r3, #1]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d116      	bne.n	8003e7c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	633b      	str	r3, [r7, #48]	; 0x30
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	4413      	add	r3, r2
 8003e64:	633b      	str	r3, [r7, #48]	; 0x30
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	011a      	lsls	r2, r3, #4
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	4413      	add	r3, r2
 8003e70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e78:	2200      	movs	r2, #0
 8003e7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	623b      	str	r3, [r7, #32]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	785b      	ldrb	r3, [r3, #1]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d126      	bne.n	8003ed8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	011a      	lsls	r2, r3, #4
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	801a      	strh	r2, [r3, #0]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	801a      	strh	r2, [r3, #0]
 8003ed6:	e017      	b.n	8003f08 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	785b      	ldrb	r3, [r3, #1]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d113      	bne.n	8003f08 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	4413      	add	r3, r2
 8003ef0:	623b      	str	r3, [r7, #32]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	011a      	lsls	r2, r3, #4
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	4413      	add	r3, r2
 8003efc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	2200      	movs	r2, #0
 8003f06:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f008 ff07 	bl	800cd22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 82d4 	beq.w	80044c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3a:	827b      	strh	r3, [r7, #18]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	441a      	add	r2, r3
 8003f4a:	8a7b      	ldrh	r3, [r7, #18]
 8003f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	8013      	strh	r3, [r2, #0]
 8003f60:	e2b2      	b.n	80044c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d021      	beq.n	8003fb0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	441a      	add	r2, r3
 8003f98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	f040 8286 	bne.w	80044c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fc4:	441a      	add	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	69da      	ldr	r2, [r3, #28]
 8003fce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fd2:	441a      	add	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6a1a      	ldr	r2, [r3, #32]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d309      	bcc.n	8003ff8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	6a1a      	ldr	r2, [r3, #32]
 8003fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff0:	1ad2      	subs	r2, r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	621a      	str	r2, [r3, #32]
 8003ff6:	e015      	b.n	8004024 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d107      	bne.n	8004010 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8004000:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004004:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800400e:	e009      	b.n	8004024 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2200      	movs	r2, #0
 8004022:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d155      	bne.n	80040d8 <HAL_PCD_EP_DB_Transmit+0x35a>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	63bb      	str	r3, [r7, #56]	; 0x38
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800403a:	b29b      	uxth	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	4413      	add	r3, r2
 8004042:	63bb      	str	r3, [r7, #56]	; 0x38
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	011a      	lsls	r2, r3, #4
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	4413      	add	r3, r2
 800404e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004052:	637b      	str	r3, [r7, #52]	; 0x34
 8004054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004056:	2b00      	cmp	r3, #0
 8004058:	d112      	bne.n	8004080 <HAL_PCD_EP_DB_Transmit+0x302>
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004064:	b29a      	uxth	r2, r3
 8004066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004068:	801a      	strh	r2, [r3, #0]
 800406a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004078:	b29a      	uxth	r2, r3
 800407a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407c:	801a      	strh	r2, [r3, #0]
 800407e:	e047      	b.n	8004110 <HAL_PCD_EP_DB_Transmit+0x392>
 8004080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004082:	2b3e      	cmp	r3, #62	; 0x3e
 8004084:	d811      	bhi.n	80040aa <HAL_PCD_EP_DB_Transmit+0x32c>
 8004086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	64bb      	str	r3, [r7, #72]	; 0x48
 800408c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_PCD_EP_DB_Transmit+0x31e>
 8004096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004098:	3301      	adds	r3, #1
 800409a:	64bb      	str	r3, [r7, #72]	; 0x48
 800409c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800409e:	b29b      	uxth	r3, r3
 80040a0:	029b      	lsls	r3, r3, #10
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a6:	801a      	strh	r2, [r3, #0]
 80040a8:	e032      	b.n	8004110 <HAL_PCD_EP_DB_Transmit+0x392>
 80040aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x342>
 80040ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040bc:	3b01      	subs	r3, #1
 80040be:	64bb      	str	r3, [r7, #72]	; 0x48
 80040c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	029b      	lsls	r3, r3, #10
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d4:	801a      	strh	r2, [r3, #0]
 80040d6:	e01b      	b.n	8004110 <HAL_PCD_EP_DB_Transmit+0x392>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d117      	bne.n	8004110 <HAL_PCD_EP_DB_Transmit+0x392>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	643b      	str	r3, [r7, #64]	; 0x40
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f4:	4413      	add	r3, r2
 80040f6:	643b      	str	r3, [r7, #64]	; 0x40
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	011a      	lsls	r2, r3, #4
 80040fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004100:	4413      	add	r3, r2
 8004102:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410a:	b29a      	uxth	r2, r3
 800410c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	6959      	ldr	r1, [r3, #20]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	891a      	ldrh	r2, [r3, #8]
 800411c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800411e:	b29b      	uxth	r3, r3
 8004120:	f004 f865 	bl	80081ee <USB_WritePMA>
 8004124:	e1d0      	b.n	80044c8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800412e:	b29b      	uxth	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4413      	add	r3, r2
 800413a:	3306      	adds	r3, #6
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800414e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800415a:	429a      	cmp	r2, r3
 800415c:	d307      	bcc.n	800416e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004166:	1ad2      	subs	r2, r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	619a      	str	r2, [r3, #24]
 800416c:	e002      	b.n	8004174 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2200      	movs	r2, #0
 8004172:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f040 80c4 	bne.w	8004306 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	785b      	ldrb	r3, [r3, #1]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d126      	bne.n	80041d4 <HAL_PCD_EP_DB_Transmit+0x456>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004194:	b29b      	uxth	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419a:	4413      	add	r3, r2
 800419c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	011a      	lsls	r2, r3, #4
 80041a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a6:	4413      	add	r3, r2
 80041a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80041ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041bc:	801a      	strh	r2, [r3, #0]
 80041be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041d0:	801a      	strh	r2, [r3, #0]
 80041d2:	e01a      	b.n	800420a <HAL_PCD_EP_DB_Transmit+0x48c>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	785b      	ldrb	r3, [r3, #1]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d116      	bne.n	800420a <HAL_PCD_EP_DB_Transmit+0x48c>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	677b      	str	r3, [r7, #116]	; 0x74
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f0:	4413      	add	r3, r2
 80041f2:	677b      	str	r3, [r7, #116]	; 0x74
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	011a      	lsls	r2, r3, #4
 80041fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041fc:	4413      	add	r3, r2
 80041fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004202:	673b      	str	r3, [r7, #112]	; 0x70
 8004204:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004206:	2200      	movs	r2, #0
 8004208:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	785b      	ldrb	r3, [r3, #1]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d12f      	bne.n	8004278 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004228:	b29b      	uxth	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004230:	4413      	add	r3, r2
 8004232:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	011a      	lsls	r2, r3, #4
 800423c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004240:	4413      	add	r3, r2
 8004242:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800424a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004256:	b29a      	uxth	r2, r3
 8004258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800425c:	801a      	strh	r2, [r3, #0]
 800425e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800426a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800426e:	b29a      	uxth	r2, r3
 8004270:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004274:	801a      	strh	r2, [r3, #0]
 8004276:	e017      	b.n	80042a8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	785b      	ldrb	r3, [r3, #1]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d113      	bne.n	80042a8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004288:	b29b      	uxth	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800428e:	4413      	add	r3, r2
 8004290:	67bb      	str	r3, [r7, #120]	; 0x78
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	011a      	lsls	r2, r3, #4
 8004298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800429a:	4413      	add	r3, r2
 800429c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042a4:	2200      	movs	r2, #0
 80042a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	4619      	mov	r1, r3
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f008 fd37 	bl	800cd22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f040 8104 	bne.w	80044c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	441a      	add	r2, r3
 80042ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004300:	b29b      	uxth	r3, r3
 8004302:	8013      	strh	r3, [r2, #0]
 8004304:	e0e0      	b.n	80044c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d121      	bne.n	8004354 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	441a      	add	r2, r3
 800433c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004348:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800434c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004350:	b29b      	uxth	r3, r3
 8004352:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800435a:	2b01      	cmp	r3, #1
 800435c:	f040 80b4 	bne.w	80044c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	695a      	ldr	r2, [r3, #20]
 8004364:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004368:	441a      	add	r2, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	69da      	ldr	r2, [r3, #28]
 8004372:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004376:	441a      	add	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	6a1a      	ldr	r2, [r3, #32]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	429a      	cmp	r2, r3
 8004386:	d309      	bcc.n	800439c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	6a1a      	ldr	r2, [r3, #32]
 8004392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004394:	1ad2      	subs	r2, r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	621a      	str	r2, [r3, #32]
 800439a:	e015      	b.n	80043c8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d107      	bne.n	80043b4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80043a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80043b2:	e009      	b.n	80043c8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2200      	movs	r2, #0
 80043be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	667b      	str	r3, [r7, #100]	; 0x64
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	785b      	ldrb	r3, [r3, #1]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d155      	bne.n	8004482 <HAL_PCD_EP_DB_Transmit+0x704>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ea:	4413      	add	r3, r2
 80043ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	011a      	lsls	r2, r3, #4
 80043f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043f6:	4413      	add	r3, r2
 80043f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80043fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004400:	2b00      	cmp	r3, #0
 8004402:	d112      	bne.n	800442a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800440e:	b29a      	uxth	r2, r3
 8004410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004412:	801a      	strh	r2, [r3, #0]
 8004414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	b29b      	uxth	r3, r3
 800441a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800441e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004422:	b29a      	uxth	r2, r3
 8004424:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004426:	801a      	strh	r2, [r3, #0]
 8004428:	e044      	b.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x736>
 800442a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800442c:	2b3e      	cmp	r3, #62	; 0x3e
 800442e:	d811      	bhi.n	8004454 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004432:	085b      	lsrs	r3, r3, #1
 8004434:	657b      	str	r3, [r7, #84]	; 0x54
 8004436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004442:	3301      	adds	r3, #1
 8004444:	657b      	str	r3, [r7, #84]	; 0x54
 8004446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004448:	b29b      	uxth	r3, r3
 800444a:	029b      	lsls	r3, r3, #10
 800444c:	b29a      	uxth	r2, r3
 800444e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004450:	801a      	strh	r2, [r3, #0]
 8004452:	e02f      	b.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x736>
 8004454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	657b      	str	r3, [r7, #84]	; 0x54
 800445a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004466:	3b01      	subs	r3, #1
 8004468:	657b      	str	r3, [r7, #84]	; 0x54
 800446a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800446c:	b29b      	uxth	r3, r3
 800446e:	029b      	lsls	r3, r3, #10
 8004470:	b29b      	uxth	r3, r3
 8004472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800447a:	b29a      	uxth	r2, r3
 800447c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	e018      	b.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x736>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	785b      	ldrb	r3, [r3, #1]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d114      	bne.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x736>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004492:	b29b      	uxth	r3, r3
 8004494:	461a      	mov	r2, r3
 8004496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004498:	4413      	add	r3, r2
 800449a:	667b      	str	r3, [r7, #100]	; 0x64
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	011a      	lsls	r2, r3, #4
 80044a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044a4:	4413      	add	r3, r2
 80044a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044aa:	663b      	str	r3, [r7, #96]	; 0x60
 80044ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044b2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	6959      	ldr	r1, [r3, #20]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	895a      	ldrh	r2, [r3, #10]
 80044c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	f003 fe93 	bl	80081ee <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e2:	823b      	strh	r3, [r7, #16]
 80044e4:	8a3b      	ldrh	r3, [r7, #16]
 80044e6:	f083 0310 	eor.w	r3, r3, #16
 80044ea:	823b      	strh	r3, [r7, #16]
 80044ec:	8a3b      	ldrh	r3, [r7, #16]
 80044ee:	f083 0320 	eor.w	r3, r3, #32
 80044f2:	823b      	strh	r3, [r7, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	441a      	add	r2, r3
 8004502:	8a3b      	ldrh	r3, [r7, #16]
 8004504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004514:	b29b      	uxth	r3, r3
 8004516:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3788      	adds	r7, #136	; 0x88
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004522:	b480      	push	{r7}
 8004524:	b087      	sub	sp, #28
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	607b      	str	r3, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	817b      	strh	r3, [r7, #10]
 8004530:	4613      	mov	r3, r2
 8004532:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004534:	897b      	ldrh	r3, [r7, #10]
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00b      	beq.n	8004558 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004540:	897b      	ldrh	r3, [r7, #10]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e009      	b.n	800456c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004558:	897a      	ldrh	r2, [r7, #10]
 800455a:	4613      	mov	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4413      	add	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800456c:	893b      	ldrh	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d107      	bne.n	8004582 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	b29a      	uxth	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	80da      	strh	r2, [r3, #6]
 8004580:	e00b      	b.n	800459a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2201      	movs	r2, #1
 8004586:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	b29a      	uxth	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	0c1b      	lsrs	r3, r3, #16
 8004594:	b29a      	uxth	r2, r3
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr
	...

080045a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e26c      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8087 	beq.w	80046d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045c8:	4b92      	ldr	r3, [pc, #584]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d00c      	beq.n	80045ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045d4:	4b8f      	ldr	r3, [pc, #572]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d112      	bne.n	8004606 <HAL_RCC_OscConfig+0x5e>
 80045e0:	4b8c      	ldr	r3, [pc, #560]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ec:	d10b      	bne.n	8004606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ee:	4b89      	ldr	r3, [pc, #548]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d06c      	beq.n	80046d4 <HAL_RCC_OscConfig+0x12c>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d168      	bne.n	80046d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e246      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800460e:	d106      	bne.n	800461e <HAL_RCC_OscConfig+0x76>
 8004610:	4b80      	ldr	r3, [pc, #512]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a7f      	ldr	r2, [pc, #508]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	e02e      	b.n	800467c <HAL_RCC_OscConfig+0xd4>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10c      	bne.n	8004640 <HAL_RCC_OscConfig+0x98>
 8004626:	4b7b      	ldr	r3, [pc, #492]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a7a      	ldr	r2, [pc, #488]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 800462c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	4b78      	ldr	r3, [pc, #480]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a77      	ldr	r2, [pc, #476]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	e01d      	b.n	800467c <HAL_RCC_OscConfig+0xd4>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004648:	d10c      	bne.n	8004664 <HAL_RCC_OscConfig+0xbc>
 800464a:	4b72      	ldr	r3, [pc, #456]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a71      	ldr	r2, [pc, #452]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	4b6f      	ldr	r3, [pc, #444]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a6e      	ldr	r2, [pc, #440]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e00b      	b.n	800467c <HAL_RCC_OscConfig+0xd4>
 8004664:	4b6b      	ldr	r3, [pc, #428]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a6a      	ldr	r2, [pc, #424]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 800466a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	4b68      	ldr	r3, [pc, #416]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a67      	ldr	r2, [pc, #412]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800467a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d013      	beq.n	80046ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fd ff42 	bl	800250c <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468c:	f7fd ff3e 	bl	800250c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	; 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e1fa      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800469e:	4b5d      	ldr	r3, [pc, #372]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0xe4>
 80046aa:	e014      	b.n	80046d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fd ff2e 	bl	800250c <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b4:	f7fd ff2a 	bl	800250c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b64      	cmp	r3, #100	; 0x64
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e1e6      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046c6:	4b53      	ldr	r3, [pc, #332]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0x10c>
 80046d2:	e000      	b.n	80046d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d063      	beq.n	80047aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046e2:	4b4c      	ldr	r3, [pc, #304]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046ee:	4b49      	ldr	r3, [pc, #292]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d11c      	bne.n	8004734 <HAL_RCC_OscConfig+0x18c>
 80046fa:	4b46      	ldr	r3, [pc, #280]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d116      	bne.n	8004734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004706:	4b43      	ldr	r3, [pc, #268]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <HAL_RCC_OscConfig+0x176>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d001      	beq.n	800471e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e1ba      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471e:	4b3d      	ldr	r3, [pc, #244]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4939      	ldr	r1, [pc, #228]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 800472e:	4313      	orrs	r3, r2
 8004730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004732:	e03a      	b.n	80047aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d020      	beq.n	800477e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800473c:	4b36      	ldr	r3, [pc, #216]	; (8004818 <HAL_RCC_OscConfig+0x270>)
 800473e:	2201      	movs	r2, #1
 8004740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004742:	f7fd fee3 	bl	800250c <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800474a:	f7fd fedf 	bl	800250c <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e19b      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475c:	4b2d      	ldr	r3, [pc, #180]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004768:	4b2a      	ldr	r3, [pc, #168]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4927      	ldr	r1, [pc, #156]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004778:	4313      	orrs	r3, r2
 800477a:	600b      	str	r3, [r1, #0]
 800477c:	e015      	b.n	80047aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800477e:	4b26      	ldr	r3, [pc, #152]	; (8004818 <HAL_RCC_OscConfig+0x270>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fd fec2 	bl	800250c <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478c:	f7fd febe 	bl	800250c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e17a      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800479e:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d03a      	beq.n	800482c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d019      	beq.n	80047f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047be:	4b17      	ldr	r3, [pc, #92]	; (800481c <HAL_RCC_OscConfig+0x274>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c4:	f7fd fea2 	bl	800250c <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047cc:	f7fd fe9e 	bl	800250c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e15a      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047de:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047ea:	2001      	movs	r0, #1
 80047ec:	f000 fb0a 	bl	8004e04 <RCC_Delay>
 80047f0:	e01c      	b.n	800482c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f2:	4b0a      	ldr	r3, [pc, #40]	; (800481c <HAL_RCC_OscConfig+0x274>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f8:	f7fd fe88 	bl	800250c <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047fe:	e00f      	b.n	8004820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004800:	f7fd fe84 	bl	800250c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d908      	bls.n	8004820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e140      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000
 8004818:	42420000 	.word	0x42420000
 800481c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004820:	4b9e      	ldr	r3, [pc, #632]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e9      	bne.n	8004800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 80a6 	beq.w	8004986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483a:	2300      	movs	r3, #0
 800483c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800483e:	4b97      	ldr	r3, [pc, #604]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10d      	bne.n	8004866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800484a:	4b94      	ldr	r3, [pc, #592]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	4a93      	ldr	r2, [pc, #588]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 8004850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004854:	61d3      	str	r3, [r2, #28]
 8004856:	4b91      	ldr	r3, [pc, #580]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004862:	2301      	movs	r3, #1
 8004864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004866:	4b8e      	ldr	r3, [pc, #568]	; (8004aa0 <HAL_RCC_OscConfig+0x4f8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d118      	bne.n	80048a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004872:	4b8b      	ldr	r3, [pc, #556]	; (8004aa0 <HAL_RCC_OscConfig+0x4f8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a8a      	ldr	r2, [pc, #552]	; (8004aa0 <HAL_RCC_OscConfig+0x4f8>)
 8004878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800487c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800487e:	f7fd fe45 	bl	800250c <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004886:	f7fd fe41 	bl	800250c <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b64      	cmp	r3, #100	; 0x64
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e0fd      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	4b81      	ldr	r3, [pc, #516]	; (8004aa0 <HAL_RCC_OscConfig+0x4f8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d106      	bne.n	80048ba <HAL_RCC_OscConfig+0x312>
 80048ac:	4b7b      	ldr	r3, [pc, #492]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	4a7a      	ldr	r2, [pc, #488]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	6213      	str	r3, [r2, #32]
 80048b8:	e02d      	b.n	8004916 <HAL_RCC_OscConfig+0x36e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10c      	bne.n	80048dc <HAL_RCC_OscConfig+0x334>
 80048c2:	4b76      	ldr	r3, [pc, #472]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	4a75      	ldr	r2, [pc, #468]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	6213      	str	r3, [r2, #32]
 80048ce:	4b73      	ldr	r3, [pc, #460]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	4a72      	ldr	r2, [pc, #456]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 80048d4:	f023 0304 	bic.w	r3, r3, #4
 80048d8:	6213      	str	r3, [r2, #32]
 80048da:	e01c      	b.n	8004916 <HAL_RCC_OscConfig+0x36e>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	2b05      	cmp	r3, #5
 80048e2:	d10c      	bne.n	80048fe <HAL_RCC_OscConfig+0x356>
 80048e4:	4b6d      	ldr	r3, [pc, #436]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	4a6c      	ldr	r2, [pc, #432]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 80048ea:	f043 0304 	orr.w	r3, r3, #4
 80048ee:	6213      	str	r3, [r2, #32]
 80048f0:	4b6a      	ldr	r3, [pc, #424]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	4a69      	ldr	r2, [pc, #420]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	6213      	str	r3, [r2, #32]
 80048fc:	e00b      	b.n	8004916 <HAL_RCC_OscConfig+0x36e>
 80048fe:	4b67      	ldr	r3, [pc, #412]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	4a66      	ldr	r2, [pc, #408]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 8004904:	f023 0301 	bic.w	r3, r3, #1
 8004908:	6213      	str	r3, [r2, #32]
 800490a:	4b64      	ldr	r3, [pc, #400]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	4a63      	ldr	r2, [pc, #396]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 8004910:	f023 0304 	bic.w	r3, r3, #4
 8004914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d015      	beq.n	800494a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491e:	f7fd fdf5 	bl	800250c <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004924:	e00a      	b.n	800493c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004926:	f7fd fdf1 	bl	800250c <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	f241 3288 	movw	r2, #5000	; 0x1388
 8004934:	4293      	cmp	r3, r2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e0ab      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493c:	4b57      	ldr	r3, [pc, #348]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0ee      	beq.n	8004926 <HAL_RCC_OscConfig+0x37e>
 8004948:	e014      	b.n	8004974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494a:	f7fd fddf 	bl	800250c <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004950:	e00a      	b.n	8004968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004952:	f7fd fddb 	bl	800250c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004960:	4293      	cmp	r3, r2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e095      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004968:	4b4c      	ldr	r3, [pc, #304]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1ee      	bne.n	8004952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004974:	7dfb      	ldrb	r3, [r7, #23]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d105      	bne.n	8004986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497a:	4b48      	ldr	r3, [pc, #288]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	4a47      	ldr	r2, [pc, #284]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 8004980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004984:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 8081 	beq.w	8004a92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004990:	4b42      	ldr	r3, [pc, #264]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b08      	cmp	r3, #8
 800499a:	d061      	beq.n	8004a60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d146      	bne.n	8004a32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a4:	4b3f      	ldr	r3, [pc, #252]	; (8004aa4 <HAL_RCC_OscConfig+0x4fc>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049aa:	f7fd fdaf 	bl	800250c <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b2:	f7fd fdab 	bl	800250c <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e067      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c4:	4b35      	ldr	r3, [pc, #212]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d8:	d108      	bne.n	80049ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049da:	4b30      	ldr	r3, [pc, #192]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	492d      	ldr	r1, [pc, #180]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ec:	4b2b      	ldr	r3, [pc, #172]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a19      	ldr	r1, [r3, #32]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	430b      	orrs	r3, r1
 80049fe:	4927      	ldr	r1, [pc, #156]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a04:	4b27      	ldr	r3, [pc, #156]	; (8004aa4 <HAL_RCC_OscConfig+0x4fc>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0a:	f7fd fd7f 	bl	800250c <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a12:	f7fd fd7b 	bl	800250c <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e037      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a24:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0f0      	beq.n	8004a12 <HAL_RCC_OscConfig+0x46a>
 8004a30:	e02f      	b.n	8004a92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a32:	4b1c      	ldr	r3, [pc, #112]	; (8004aa4 <HAL_RCC_OscConfig+0x4fc>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a38:	f7fd fd68 	bl	800250c <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a40:	f7fd fd64 	bl	800250c <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e020      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a52:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x498>
 8004a5e:	e018      	b.n	8004a92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e013      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_RCC_OscConfig+0x4f4>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d106      	bne.n	8004a8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d001      	beq.n	8004a92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40007000 	.word	0x40007000
 8004aa4:	42420060 	.word	0x42420060

08004aa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0d0      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004abc:	4b6a      	ldr	r3, [pc, #424]	; (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d910      	bls.n	8004aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aca:	4b67      	ldr	r3, [pc, #412]	; (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f023 0207 	bic.w	r2, r3, #7
 8004ad2:	4965      	ldr	r1, [pc, #404]	; (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ada:	4b63      	ldr	r3, [pc, #396]	; (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0b8      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d020      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b04:	4b59      	ldr	r3, [pc, #356]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	4a58      	ldr	r2, [pc, #352]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b1c:	4b53      	ldr	r3, [pc, #332]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4a52      	ldr	r2, [pc, #328]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b28:	4b50      	ldr	r3, [pc, #320]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	494d      	ldr	r1, [pc, #308]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d040      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4e:	4b47      	ldr	r3, [pc, #284]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d115      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e07f      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d107      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b66:	4b41      	ldr	r3, [pc, #260]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e073      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b76:	4b3d      	ldr	r3, [pc, #244]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e06b      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b86:	4b39      	ldr	r3, [pc, #228]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f023 0203 	bic.w	r2, r3, #3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4936      	ldr	r1, [pc, #216]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b98:	f7fd fcb8 	bl	800250c <HAL_GetTick>
 8004b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9e:	e00a      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba0:	f7fd fcb4 	bl	800250c <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e053      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb6:	4b2d      	ldr	r3, [pc, #180]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f003 020c 	and.w	r2, r3, #12
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d1eb      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b27      	ldr	r3, [pc, #156]	; (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d210      	bcs.n	8004bf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 0207 	bic.w	r2, r3, #7
 8004bde:	4922      	ldr	r1, [pc, #136]	; (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b20      	ldr	r3, [pc, #128]	; (8004c68 <HAL_RCC_ClockConfig+0x1c0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e032      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c04:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4916      	ldr	r1, [pc, #88]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	490e      	ldr	r1, [pc, #56]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c36:	f000 f821 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	490a      	ldr	r1, [pc, #40]	; (8004c70 <HAL_RCC_ClockConfig+0x1c8>)
 8004c48:	5ccb      	ldrb	r3, [r1, r3]
 8004c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4e:	4a09      	ldr	r2, [pc, #36]	; (8004c74 <HAL_RCC_ClockConfig+0x1cc>)
 8004c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c52:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <HAL_RCC_ClockConfig+0x1d0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fd faf8 	bl	800224c <HAL_InitTick>

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40022000 	.word	0x40022000
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	0800d9c0 	.word	0x0800d9c0
 8004c74:	2000000c 	.word	0x2000000c
 8004c78:	20000010 	.word	0x20000010

08004c7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c7c:	b490      	push	{r4, r7}
 8004c7e:	b08a      	sub	sp, #40	; 0x28
 8004c80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c82:	4b2a      	ldr	r3, [pc, #168]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c84:	1d3c      	adds	r4, r7, #4
 8004c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c8c:	f240 2301 	movw	r3, #513	; 0x201
 8004c90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
 8004c96:	2300      	movs	r3, #0
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ca6:	4b22      	ldr	r3, [pc, #136]	; (8004d30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d002      	beq.n	8004cbc <HAL_RCC_GetSysClockFreq+0x40>
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d003      	beq.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x46>
 8004cba:	e02d      	b.n	8004d18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cbe:	623b      	str	r3, [r7, #32]
      break;
 8004cc0:	e02d      	b.n	8004d1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	0c9b      	lsrs	r3, r3, #18
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cce:	4413      	add	r3, r2
 8004cd0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004cd4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d013      	beq.n	8004d08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ce0:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	0c5b      	lsrs	r3, r3, #17
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cee:	4413      	add	r3, r2
 8004cf0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004cf4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	4a0e      	ldr	r2, [pc, #56]	; (8004d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cfa:	fb02 f203 	mul.w	r2, r2, r3
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
 8004d06:	e004      	b.n	8004d12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	4a0b      	ldr	r2, [pc, #44]	; (8004d38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d0c:	fb02 f303 	mul.w	r3, r2, r3
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	623b      	str	r3, [r7, #32]
      break;
 8004d16:	e002      	b.n	8004d1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d18:	4b08      	ldr	r3, [pc, #32]	; (8004d3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d1a:	623b      	str	r3, [r7, #32]
      break;
 8004d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3728      	adds	r7, #40	; 0x28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc90      	pop	{r4, r7}
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	0800d474 	.word	0x0800d474
 8004d30:	40021000 	.word	0x40021000
 8004d34:	00f42400 	.word	0x00f42400
 8004d38:	003d0900 	.word	0x003d0900
 8004d3c:	007a1200 	.word	0x007a1200

08004d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d44:	4b02      	ldr	r3, [pc, #8]	; (8004d50 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d46:	681b      	ldr	r3, [r3, #0]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr
 8004d50:	2000000c 	.word	0x2000000c

08004d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d58:	f7ff fff2 	bl	8004d40 <HAL_RCC_GetHCLKFreq>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	0a1b      	lsrs	r3, r3, #8
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	4903      	ldr	r1, [pc, #12]	; (8004d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d6a:	5ccb      	ldrb	r3, [r1, r3]
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40021000 	.word	0x40021000
 8004d78:	0800d9d0 	.word	0x0800d9d0

08004d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d80:	f7ff ffde 	bl	8004d40 <HAL_RCC_GetHCLKFreq>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	0adb      	lsrs	r3, r3, #11
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	4903      	ldr	r1, [pc, #12]	; (8004da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d92:	5ccb      	ldrb	r3, [r1, r3]
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	0800d9d0 	.word	0x0800d9d0

08004da4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	220f      	movs	r2, #15
 8004db2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004db4:	4b11      	ldr	r3, [pc, #68]	; (8004dfc <HAL_RCC_GetClockConfig+0x58>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0203 	and.w	r2, r3, #3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004dc0:	4b0e      	ldr	r3, [pc, #56]	; (8004dfc <HAL_RCC_GetClockConfig+0x58>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004dcc:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <HAL_RCC_GetClockConfig+0x58>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004dd8:	4b08      	ldr	r3, [pc, #32]	; (8004dfc <HAL_RCC_GetClockConfig+0x58>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	08db      	lsrs	r3, r3, #3
 8004dde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004de6:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <HAL_RCC_GetClockConfig+0x5c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0207 	and.w	r2, r3, #7
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	40022000 	.word	0x40022000

08004e04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e0c:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <RCC_Delay+0x34>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a0a      	ldr	r2, [pc, #40]	; (8004e3c <RCC_Delay+0x38>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	0a5b      	lsrs	r3, r3, #9
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e20:	bf00      	nop
  }
  while (Delay --);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	1e5a      	subs	r2, r3, #1
 8004e26:	60fa      	str	r2, [r7, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1f9      	bne.n	8004e20 <RCC_Delay+0x1c>
}
 8004e2c:	bf00      	nop
 8004e2e:	bf00      	nop
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr
 8004e38:	2000000c 	.word	0x2000000c
 8004e3c:	10624dd3 	.word	0x10624dd3

08004e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d07d      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e60:	4b4f      	ldr	r3, [pc, #316]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10d      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e6c:	4b4c      	ldr	r3, [pc, #304]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	4a4b      	ldr	r2, [pc, #300]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e76:	61d3      	str	r3, [r2, #28]
 8004e78:	4b49      	ldr	r3, [pc, #292]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e84:	2301      	movs	r3, #1
 8004e86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e88:	4b46      	ldr	r3, [pc, #280]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d118      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e94:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a42      	ldr	r2, [pc, #264]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea0:	f7fd fb34 	bl	800250c <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea6:	e008      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea8:	f7fd fb30 	bl	800250c <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b64      	cmp	r3, #100	; 0x64
 8004eb4:	d901      	bls.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e06d      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eba:	4b3a      	ldr	r3, [pc, #232]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ec6:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d02e      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d027      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ee4:	4b2e      	ldr	r3, [pc, #184]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eee:	4b2e      	ldr	r3, [pc, #184]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ef4:	4b2c      	ldr	r3, [pc, #176]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004efa:	4a29      	ldr	r2, [pc, #164]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d014      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0a:	f7fd faff 	bl	800250c <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f10:	e00a      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f12:	f7fd fafb 	bl	800250c <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e036      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f28:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0ee      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f34:	4b1a      	ldr	r3, [pc, #104]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4917      	ldr	r1, [pc, #92]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d105      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4c:	4b14      	ldr	r3, [pc, #80]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	4a13      	ldr	r2, [pc, #76]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f64:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	490b      	ldr	r1, [pc, #44]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0310 	and.w	r3, r3, #16
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d008      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f82:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	4904      	ldr	r1, [pc, #16]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40007000 	.word	0x40007000
 8004fa8:	42420440 	.word	0x42420440

08004fac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e076      	b.n	80050ac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d108      	bne.n	8004fd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fce:	d009      	beq.n	8004fe4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	61da      	str	r2, [r3, #28]
 8004fd6:	e005      	b.n	8004fe4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fd f8a0 	bl	8002144 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800501a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005068:	ea42 0103 	orr.w	r1, r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	0c1a      	lsrs	r2, r3, #16
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f002 0204 	and.w	r2, r2, #4
 800508a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69da      	ldr	r2, [r3, #28]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800509a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e041      	b.n	800514a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f839 	bl	8005152 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3304      	adds	r3, #4
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f000 f9b4 	bl	8005460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	d001      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e03a      	b.n	80051f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a18      	ldr	r2, [pc, #96]	; (80051fc <HAL_TIM_Base_Start_IT+0x98>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00e      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x58>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a6:	d009      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x58>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a14      	ldr	r2, [pc, #80]	; (8005200 <HAL_TIM_Base_Start_IT+0x9c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x58>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a13      	ldr	r2, [pc, #76]	; (8005204 <HAL_TIM_Base_Start_IT+0xa0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d111      	bne.n	80051e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b06      	cmp	r3, #6
 80051cc:	d010      	beq.n	80051f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0201 	orr.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051de:	e007      	b.n	80051f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800

08005208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b02      	cmp	r3, #2
 800521c:	d122      	bne.n	8005264 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b02      	cmp	r3, #2
 800522a:	d11b      	bne.n	8005264 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0202 	mvn.w	r2, #2
 8005234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f8ed 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f8e0 	bl	8005418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f8ef 	bl	800543c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b04      	cmp	r3, #4
 8005270:	d122      	bne.n	80052b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b04      	cmp	r3, #4
 800527e:	d11b      	bne.n	80052b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0204 	mvn.w	r2, #4
 8005288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2202      	movs	r2, #2
 800528e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f8c3 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 80052a4:	e005      	b.n	80052b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f8b6 	bl	8005418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f8c5 	bl	800543c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d122      	bne.n	800530c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d11b      	bne.n	800530c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0208 	mvn.w	r2, #8
 80052dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2204      	movs	r2, #4
 80052e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f899 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 80052f8:	e005      	b.n	8005306 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f88c 	bl	8005418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f89b 	bl	800543c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	2b10      	cmp	r3, #16
 8005318:	d122      	bne.n	8005360 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b10      	cmp	r3, #16
 8005326:	d11b      	bne.n	8005360 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0210 	mvn.w	r2, #16
 8005330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2208      	movs	r2, #8
 8005336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f86f 	bl	800542a <HAL_TIM_IC_CaptureCallback>
 800534c:	e005      	b.n	800535a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f862 	bl	8005418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f871 	bl	800543c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b01      	cmp	r3, #1
 800536c:	d10e      	bne.n	800538c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b01      	cmp	r3, #1
 800537a:	d107      	bne.n	800538c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0201 	mvn.w	r2, #1
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fb f978 	bl	800067c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005396:	2b80      	cmp	r3, #128	; 0x80
 8005398:	d10e      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	d107      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f8bf 	bl	8005536 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d10e      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d107      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f835 	bl	800544e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d10e      	bne.n	8005410 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d107      	bne.n	8005410 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0220 	mvn.w	r2, #32
 8005408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f88a 	bl	8005524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005410:	bf00      	nop
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr

0800542a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr

0800543c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr

0800544e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a29      	ldr	r2, [pc, #164]	; (8005518 <TIM_Base_SetConfig+0xb8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00b      	beq.n	8005490 <TIM_Base_SetConfig+0x30>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547e:	d007      	beq.n	8005490 <TIM_Base_SetConfig+0x30>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a26      	ldr	r2, [pc, #152]	; (800551c <TIM_Base_SetConfig+0xbc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d003      	beq.n	8005490 <TIM_Base_SetConfig+0x30>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a25      	ldr	r2, [pc, #148]	; (8005520 <TIM_Base_SetConfig+0xc0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d108      	bne.n	80054a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a1c      	ldr	r2, [pc, #112]	; (8005518 <TIM_Base_SetConfig+0xb8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00b      	beq.n	80054c2 <TIM_Base_SetConfig+0x62>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b0:	d007      	beq.n	80054c2 <TIM_Base_SetConfig+0x62>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a19      	ldr	r2, [pc, #100]	; (800551c <TIM_Base_SetConfig+0xbc>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d003      	beq.n	80054c2 <TIM_Base_SetConfig+0x62>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a18      	ldr	r2, [pc, #96]	; (8005520 <TIM_Base_SetConfig+0xc0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d108      	bne.n	80054d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a07      	ldr	r2, [pc, #28]	; (8005518 <TIM_Base_SetConfig+0xb8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d103      	bne.n	8005508 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	615a      	str	r2, [r3, #20]
}
 800550e:	bf00      	nop
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr
 8005518:	40012c00 	.word	0x40012c00
 800551c:	40000400 	.word	0x40000400
 8005520:	40000800 	.word	0x40000800

08005524 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr

08005548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e03f      	b.n	80055da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fc ff2c 	bl	80023cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2224      	movs	r2, #36	; 0x24
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800558a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fba9 	bl	8005ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695a      	ldr	r2, [r3, #20]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	4613      	mov	r3, r2
 80055ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	d11d      	bne.n	8005638 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <HAL_UART_Receive_IT+0x26>
 8005602:	88fb      	ldrh	r3, [r7, #6]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e016      	b.n	800563a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_UART_Receive_IT+0x38>
 8005616:	2302      	movs	r3, #2
 8005618:	e00f      	b.n	800563a <HAL_UART_Receive_IT+0x58>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005628:	88fb      	ldrh	r3, [r7, #6]
 800562a:	461a      	mov	r2, r3
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 f9cf 	bl	80059d2 <UART_Start_Receive_IT>
 8005634:	4603      	mov	r3, r0
 8005636:	e000      	b.n	800563a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005638:	2302      	movs	r3, #2
  }
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08a      	sub	sp, #40	; 0x28
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005664:	2300      	movs	r3, #0
 8005666:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10d      	bne.n	8005696 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_UART_IRQHandler+0x52>
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fa7f 	bl	8005b92 <UART_Receive_IT>
      return;
 8005694:	e17b      	b.n	800598e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80b1 	beq.w	8005800 <HAL_UART_IRQHandler+0x1bc>
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d105      	bne.n	80056b4 <HAL_UART_IRQHandler+0x70>
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 80a6 	beq.w	8005800 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <HAL_UART_IRQHandler+0x90>
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	f043 0201 	orr.w	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_UART_IRQHandler+0xb0>
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	f043 0202 	orr.w	r2, r3, #2
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_UART_IRQHandler+0xd0>
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	f043 0204 	orr.w	r2, r3, #4
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00f      	beq.n	800573e <HAL_UART_IRQHandler+0xfa>
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b00      	cmp	r3, #0
 8005726:	d104      	bne.n	8005732 <HAL_UART_IRQHandler+0xee>
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f043 0208 	orr.w	r2, r3, #8
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 811e 	beq.w	8005984 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <HAL_UART_IRQHandler+0x11e>
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fa18 	bl	8005b92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	bf14      	ite	ne
 8005770:	2301      	movne	r3, #1
 8005772:	2300      	moveq	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	f003 0308 	and.w	r3, r3, #8
 8005780:	2b00      	cmp	r3, #0
 8005782:	d102      	bne.n	800578a <HAL_UART_IRQHandler+0x146>
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d031      	beq.n	80057ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f95a 	bl	8005a44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b00      	cmp	r3, #0
 800579c:	d023      	beq.n	80057e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695a      	ldr	r2, [r3, #20]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d013      	beq.n	80057de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	4a76      	ldr	r2, [pc, #472]	; (8005994 <HAL_UART_IRQHandler+0x350>)
 80057bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fc ffc6 	bl	8002754 <HAL_DMA_Abort_IT>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d016      	beq.n	80057fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057d8:	4610      	mov	r0, r2
 80057da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057dc:	e00e      	b.n	80057fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f8e3 	bl	80059aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e4:	e00a      	b.n	80057fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f8df 	bl	80059aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ec:	e006      	b.n	80057fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f8db 	bl	80059aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80057fa:	e0c3      	b.n	8005984 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	bf00      	nop
    return;
 80057fe:	e0c1      	b.n	8005984 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	2b01      	cmp	r3, #1
 8005806:	f040 80a1 	bne.w	800594c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 809b 	beq.w	800594c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	f003 0310 	and.w	r3, r3, #16
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8095 	beq.w	800594c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d04e      	beq.n	80058e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005850:	8a3b      	ldrh	r3, [r7, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 8098 	beq.w	8005988 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800585c:	8a3a      	ldrh	r2, [r7, #16]
 800585e:	429a      	cmp	r2, r3
 8005860:	f080 8092 	bcs.w	8005988 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8a3a      	ldrh	r2, [r7, #16]
 8005868:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	2b20      	cmp	r3, #32
 8005872:	d02b      	beq.n	80058cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005882:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695a      	ldr	r2, [r3, #20]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0201 	bic.w	r2, r2, #1
 8005892:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0210 	bic.w	r2, r2, #16
 80058c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fc ff09 	bl	80026de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	b29b      	uxth	r3, r3
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f86d 	bl	80059bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80058e2:	e051      	b.n	8005988 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d047      	beq.n	800598c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80058fc:	8a7b      	ldrh	r3, [r7, #18]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d044      	beq.n	800598c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005910:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695a      	ldr	r2, [r3, #20]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0201 	bic.w	r2, r2, #1
 8005920:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0210 	bic.w	r2, r2, #16
 800593e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005940:	8a7b      	ldrh	r3, [r7, #18]
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f839 	bl	80059bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800594a:	e01f      	b.n	800598c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005952:	2b00      	cmp	r3, #0
 8005954:	d008      	beq.n	8005968 <HAL_UART_IRQHandler+0x324>
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f8af 	bl	8005ac4 <UART_Transmit_IT>
    return;
 8005966:	e012      	b.n	800598e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00d      	beq.n	800598e <HAL_UART_IRQHandler+0x34a>
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f8f0 	bl	8005b62 <UART_EndTransmit_IT>
    return;
 8005982:	e004      	b.n	800598e <HAL_UART_IRQHandler+0x34a>
    return;
 8005984:	bf00      	nop
 8005986:	e002      	b.n	800598e <HAL_UART_IRQHandler+0x34a>
      return;
 8005988:	bf00      	nop
 800598a:	e000      	b.n	800598e <HAL_UART_IRQHandler+0x34a>
      return;
 800598c:	bf00      	nop
  }
}
 800598e:	3728      	adds	r7, #40	; 0x28
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	08005a9d 	.word	0x08005a9d

08005998 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr

080059aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr

080059d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b085      	sub	sp, #20
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	4613      	mov	r3, r2
 80059de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	88fa      	ldrh	r2, [r7, #6]
 80059ea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	88fa      	ldrh	r2, [r7, #6]
 80059f0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2222      	movs	r2, #34	; 0x22
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a16:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695a      	ldr	r2, [r3, #20]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0220 	orr.w	r2, r2, #32
 8005a36:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bc80      	pop	{r7}
 8005a42:	4770      	bx	lr

08005a44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a5a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695a      	ldr	r2, [r3, #20]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0201 	bic.w	r2, r2, #1
 8005a6a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d107      	bne.n	8005a84 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0210 	bic.w	r2, r2, #16
 8005a82:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr

08005a9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f7ff ff77 	bl	80059aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005abc:	bf00      	nop
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b21      	cmp	r3, #33	; 0x21
 8005ad6:	d13e      	bne.n	8005b56 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae0:	d114      	bne.n	8005b0c <UART_Transmit_IT+0x48>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d110      	bne.n	8005b0c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	461a      	mov	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005afe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	1c9a      	adds	r2, r3, #2
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	621a      	str	r2, [r3, #32]
 8005b0a:	e008      	b.n	8005b1e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	1c59      	adds	r1, r3, #1
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6211      	str	r1, [r2, #32]
 8005b16:	781a      	ldrb	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10f      	bne.n	8005b52 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e000      	b.n	8005b58 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
  }
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bc80      	pop	{r7}
 8005b60:	4770      	bx	lr

08005b62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff ff08 	bl	8005998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b086      	sub	sp, #24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b22      	cmp	r3, #34	; 0x22
 8005ba4:	f040 8099 	bne.w	8005cda <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb0:	d117      	bne.n	8005be2 <UART_Receive_IT+0x50>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d113      	bne.n	8005be2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	1c9a      	adds	r2, r3, #2
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	629a      	str	r2, [r3, #40]	; 0x28
 8005be0:	e026      	b.n	8005c30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf4:	d007      	beq.n	8005c06 <UART_Receive_IT+0x74>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10a      	bne.n	8005c14 <UART_Receive_IT+0x82>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e008      	b.n	8005c26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d148      	bne.n	8005cd6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0220 	bic.w	r2, r2, #32
 8005c52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695a      	ldr	r2, [r3, #20]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0201 	bic.w	r2, r2, #1
 8005c72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d123      	bne.n	8005ccc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0210 	bic.w	r2, r2, #16
 8005c98:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b10      	cmp	r3, #16
 8005ca6:	d10a      	bne.n	8005cbe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff fe79 	bl	80059bc <HAL_UARTEx_RxEventCallback>
 8005cca:	e002      	b.n	8005cd2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7fa fb17 	bl	8000300 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e002      	b.n	8005cdc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e000      	b.n	8005cdc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005cda:	2302      	movs	r3, #2
  }
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d1e:	f023 030c 	bic.w	r3, r3, #12
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a2c      	ldr	r2, [pc, #176]	; (8005df8 <UART_SetConfig+0x114>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d103      	bne.n	8005d54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d4c:	f7ff f816 	bl	8004d7c <HAL_RCC_GetPCLK2Freq>
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	e002      	b.n	8005d5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d54:	f7fe fffe 	bl	8004d54 <HAL_RCC_GetPCLK1Freq>
 8005d58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	009a      	lsls	r2, r3, #2
 8005d64:	441a      	add	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	4a22      	ldr	r2, [pc, #136]	; (8005dfc <UART_SetConfig+0x118>)
 8005d72:	fba2 2303 	umull	r2, r3, r2, r3
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	0119      	lsls	r1, r3, #4
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	009a      	lsls	r2, r3, #2
 8005d84:	441a      	add	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d90:	4b1a      	ldr	r3, [pc, #104]	; (8005dfc <UART_SetConfig+0x118>)
 8005d92:	fba3 0302 	umull	r0, r3, r3, r2
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	2064      	movs	r0, #100	; 0x64
 8005d9a:	fb00 f303 	mul.w	r3, r0, r3
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	3332      	adds	r3, #50	; 0x32
 8005da4:	4a15      	ldr	r2, [pc, #84]	; (8005dfc <UART_SetConfig+0x118>)
 8005da6:	fba2 2303 	umull	r2, r3, r2, r3
 8005daa:	095b      	lsrs	r3, r3, #5
 8005dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005db0:	4419      	add	r1, r3
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4613      	mov	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	009a      	lsls	r2, r3, #2
 8005dbc:	441a      	add	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <UART_SetConfig+0x118>)
 8005dca:	fba3 0302 	umull	r0, r3, r3, r2
 8005dce:	095b      	lsrs	r3, r3, #5
 8005dd0:	2064      	movs	r0, #100	; 0x64
 8005dd2:	fb00 f303 	mul.w	r3, r0, r3
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	011b      	lsls	r3, r3, #4
 8005dda:	3332      	adds	r3, #50	; 0x32
 8005ddc:	4a07      	ldr	r2, [pc, #28]	; (8005dfc <UART_SetConfig+0x118>)
 8005dde:	fba2 2303 	umull	r2, r3, r2, r3
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	f003 020f 	and.w	r2, r3, #15
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	440a      	add	r2, r1
 8005dee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005df0:	bf00      	nop
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40013800 	.word	0x40013800
 8005dfc:	51eb851f 	.word	0x51eb851f

08005e00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e00:	b084      	sub	sp, #16
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	f107 0014 	add.w	r0, r7, #20
 8005e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bc80      	pop	{r7}
 8005e1c:	b004      	add	sp, #16
 8005e1e:	4770      	bx	lr

08005e20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e30:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005e34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr

08005e4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e54:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005e58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	43db      	mvns	r3, r3
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e98:	b084      	sub	sp, #16
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	f107 0014 	add.w	r0, r7, #20
 8005ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	b004      	add	sp, #16
 8005ed6:	4770      	bx	lr

08005ed8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b09b      	sub	sp, #108	; 0x6c
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	78db      	ldrb	r3, [r3, #3]
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d81f      	bhi.n	8005f4a <USB_ActivateEndpoint+0x72>
 8005f0a:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <USB_ActivateEndpoint+0x38>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08005f21 	.word	0x08005f21
 8005f14:	08005f3d 	.word	0x08005f3d
 8005f18:	08005f53 	.word	0x08005f53
 8005f1c:	08005f2f 	.word	0x08005f2f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f28:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005f2c:	e012      	b.n	8005f54 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005f2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f32:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005f36:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005f3a:	e00b      	b.n	8005f54 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005f3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f44:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005f48:	e004      	b.n	8005f54 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005f50:	e000      	b.n	8005f54 <USB_ActivateEndpoint+0x7c>
      break;
 8005f52:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	441a      	add	r2, r3
 8005f5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	4313      	orrs	r3, r2
 8005f96:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	441a      	add	r2, r3
 8005fa4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	7b1b      	ldrb	r3, [r3, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f040 8149 	bne.w	8006258 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 8084 	beq.w	80060d8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	461a      	mov	r2, r3
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	011a      	lsls	r2, r3, #4
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ff2:	613b      	str	r3, [r7, #16]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	88db      	ldrh	r3, [r3, #6]
 8005ff8:	085b      	lsrs	r3, r3, #1
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	81fb      	strh	r3, [r7, #14]
 8006012:	89fb      	ldrh	r3, [r7, #14]
 8006014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <USB_ActivateEndpoint+0x17c>
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006032:	81bb      	strh	r3, [r7, #12]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	441a      	add	r2, r3
 800603e:	89bb      	ldrh	r3, [r7, #12]
 8006040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006050:	b29b      	uxth	r3, r3
 8006052:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	78db      	ldrb	r3, [r3, #3]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d020      	beq.n	800609e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006072:	813b      	strh	r3, [r7, #8]
 8006074:	893b      	ldrh	r3, [r7, #8]
 8006076:	f083 0320 	eor.w	r3, r3, #32
 800607a:	813b      	strh	r3, [r7, #8]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	441a      	add	r2, r3
 8006086:	893b      	ldrh	r3, [r7, #8]
 8006088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006098:	b29b      	uxth	r3, r3
 800609a:	8013      	strh	r3, [r2, #0]
 800609c:	e27f      	b.n	800659e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060b4:	817b      	strh	r3, [r7, #10]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	441a      	add	r2, r3
 80060c0:	897b      	ldrh	r3, [r7, #10]
 80060c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	8013      	strh	r3, [r2, #0]
 80060d6:	e262      	b.n	800659e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e8:	4413      	add	r3, r2
 80060ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	011a      	lsls	r2, r3, #4
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80060fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	88db      	ldrh	r3, [r3, #6]
 8006100:	085b      	lsrs	r3, r3, #1
 8006102:	b29b      	uxth	r3, r3
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	627b      	str	r3, [r7, #36]	; 0x24
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006116:	b29b      	uxth	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	4413      	add	r3, r2
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	011a      	lsls	r2, r3, #4
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	4413      	add	r3, r2
 800612a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800612e:	623b      	str	r3, [r7, #32]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d112      	bne.n	800615e <USB_ActivateEndpoint+0x286>
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006142:	b29a      	uxth	r2, r3
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	801a      	strh	r2, [r3, #0]
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006156:	b29a      	uxth	r2, r3
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	801a      	strh	r2, [r3, #0]
 800615c:	e02f      	b.n	80061be <USB_ActivateEndpoint+0x2e6>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b3e      	cmp	r3, #62	; 0x3e
 8006164:	d813      	bhi.n	800618e <USB_ActivateEndpoint+0x2b6>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	085b      	lsrs	r3, r3, #1
 800616c:	663b      	str	r3, [r7, #96]	; 0x60
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <USB_ActivateEndpoint+0x2a8>
 800617a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800617c:	3301      	adds	r3, #1
 800617e:	663b      	str	r3, [r7, #96]	; 0x60
 8006180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006182:	b29b      	uxth	r3, r3
 8006184:	029b      	lsls	r3, r3, #10
 8006186:	b29a      	uxth	r2, r3
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	801a      	strh	r2, [r3, #0]
 800618c:	e017      	b.n	80061be <USB_ActivateEndpoint+0x2e6>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	663b      	str	r3, [r7, #96]	; 0x60
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d102      	bne.n	80061a8 <USB_ActivateEndpoint+0x2d0>
 80061a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061a4:	3b01      	subs	r3, #1
 80061a6:	663b      	str	r3, [r7, #96]	; 0x60
 80061a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	029b      	lsls	r3, r3, #10
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	83fb      	strh	r3, [r7, #30]
 80061cc:	8bfb      	ldrh	r3, [r7, #30]
 80061ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d01b      	beq.n	800620e <USB_ActivateEndpoint+0x336>
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ec:	83bb      	strh	r3, [r7, #28]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	441a      	add	r2, r3
 80061f8:	8bbb      	ldrh	r3, [r7, #28]
 80061fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800620a:	b29b      	uxth	r3, r3
 800620c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006224:	837b      	strh	r3, [r7, #26]
 8006226:	8b7b      	ldrh	r3, [r7, #26]
 8006228:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800622c:	837b      	strh	r3, [r7, #26]
 800622e:	8b7b      	ldrh	r3, [r7, #26]
 8006230:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006234:	837b      	strh	r3, [r7, #26]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	441a      	add	r2, r3
 8006240:	8b7b      	ldrh	r3, [r7, #26]
 8006242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006252:	b29b      	uxth	r3, r3
 8006254:	8013      	strh	r3, [r2, #0]
 8006256:	e1a2      	b.n	800659e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	441a      	add	r2, r3
 800627c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006288:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800628c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006290:	b29b      	uxth	r3, r3
 8006292:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	65bb      	str	r3, [r7, #88]	; 0x58
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800629e:	b29b      	uxth	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062a4:	4413      	add	r3, r2
 80062a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	011a      	lsls	r2, r3, #4
 80062ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062b6:	657b      	str	r3, [r7, #84]	; 0x54
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	891b      	ldrh	r3, [r3, #8]
 80062bc:	085b      	lsrs	r3, r3, #1
 80062be:	b29b      	uxth	r3, r3
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c6:	801a      	strh	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	653b      	str	r3, [r7, #80]	; 0x50
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d8:	4413      	add	r3, r2
 80062da:	653b      	str	r3, [r7, #80]	; 0x50
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	011a      	lsls	r2, r3, #4
 80062e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80062ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	895b      	ldrh	r3, [r3, #10]
 80062f0:	085b      	lsrs	r3, r3, #1
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	785b      	ldrb	r3, [r3, #1]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f040 8091 	bne.w	8006428 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006314:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d01b      	beq.n	8006356 <USB_ActivateEndpoint+0x47e>
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29b      	uxth	r3, r3
 800632c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006334:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	441a      	add	r2, r3
 8006340:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800634a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800634e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006352:	b29b      	uxth	r3, r3
 8006354:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	873b      	strh	r3, [r7, #56]	; 0x38
 8006364:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01b      	beq.n	80063a6 <USB_ActivateEndpoint+0x4ce>
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006384:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	441a      	add	r2, r3
 8006390:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800639a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800639e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80063be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80063c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80063c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80063c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	441a      	add	r2, r3
 80063d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80063da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006404:	867b      	strh	r3, [r7, #50]	; 0x32
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	441a      	add	r2, r3
 8006410:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006422:	b29b      	uxth	r3, r3
 8006424:	8013      	strh	r3, [r2, #0]
 8006426:	e0ba      	b.n	800659e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006438:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800643c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01d      	beq.n	8006480 <USB_ActivateEndpoint+0x5a8>
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	441a      	add	r2, r3
 8006468:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800646c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647c:	b29b      	uxth	r3, r3
 800647e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006490:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01d      	beq.n	80064d8 <USB_ActivateEndpoint+0x600>
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	441a      	add	r2, r3
 80064c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80064c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	78db      	ldrb	r3, [r3, #3]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d024      	beq.n	800652a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80064fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80064fe:	f083 0320 	eor.w	r3, r3, #32
 8006502:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	441a      	add	r2, r3
 8006510:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800651c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006524:	b29b      	uxth	r3, r3
 8006526:	8013      	strh	r3, [r2, #0]
 8006528:	e01d      	b.n	8006566 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b29b      	uxth	r3, r3
 8006538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006540:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	441a      	add	r2, r3
 800654e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800655e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006562:	b29b      	uxth	r3, r3
 8006564:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	441a      	add	r2, r3
 8006588:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800658a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659a:	b29b      	uxth	r3, r3
 800659c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800659e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	376c      	adds	r7, #108	; 0x6c
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bc80      	pop	{r7}
 80065aa:	4770      	bx	lr

080065ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b08d      	sub	sp, #52	; 0x34
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	7b1b      	ldrb	r3, [r3, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f040 808e 	bne.w	80066dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	785b      	ldrb	r3, [r3, #1]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d044      	beq.n	8006652 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	81bb      	strh	r3, [r7, #12]
 80065d6:	89bb      	ldrh	r3, [r7, #12]
 80065d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01b      	beq.n	8006618 <USB_DeactivateEndpoint+0x6c>
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f6:	817b      	strh	r3, [r7, #10]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	441a      	add	r2, r3
 8006602:	897b      	ldrh	r3, [r7, #10]
 8006604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006610:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006614:	b29b      	uxth	r3, r3
 8006616:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	b29b      	uxth	r3, r3
 8006626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800662a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800662e:	813b      	strh	r3, [r7, #8]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	441a      	add	r2, r3
 800663a:	893b      	ldrh	r3, [r7, #8]
 800663c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664c:	b29b      	uxth	r3, r3
 800664e:	8013      	strh	r3, [r2, #0]
 8006650:	e192      	b.n	8006978 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	827b      	strh	r3, [r7, #18]
 8006660:	8a7b      	ldrh	r3, [r7, #18]
 8006662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d01b      	beq.n	80066a2 <USB_DeactivateEndpoint+0xf6>
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006680:	823b      	strh	r3, [r7, #16]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	441a      	add	r2, r3
 800668c:	8a3b      	ldrh	r3, [r7, #16]
 800668e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800669a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800669e:	b29b      	uxth	r3, r3
 80066a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b8:	81fb      	strh	r3, [r7, #14]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	441a      	add	r2, r3
 80066c4:	89fb      	ldrh	r3, [r7, #14]
 80066c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	8013      	strh	r3, [r2, #0]
 80066da:	e14d      	b.n	8006978 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	785b      	ldrb	r3, [r3, #1]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f040 80a5 	bne.w	8006830 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	843b      	strh	r3, [r7, #32]
 80066f4:	8c3b      	ldrh	r3, [r7, #32]
 80066f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d01b      	beq.n	8006736 <USB_DeactivateEndpoint+0x18a>
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006714:	83fb      	strh	r3, [r7, #30]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	8bfb      	ldrh	r3, [r7, #30]
 8006722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800672e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006732:	b29b      	uxth	r3, r3
 8006734:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	83bb      	strh	r3, [r7, #28]
 8006744:	8bbb      	ldrh	r3, [r7, #28]
 8006746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674a:	2b00      	cmp	r3, #0
 800674c:	d01b      	beq.n	8006786 <USB_DeactivateEndpoint+0x1da>
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006764:	837b      	strh	r3, [r7, #26]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	441a      	add	r2, r3
 8006770:	8b7b      	ldrh	r3, [r7, #26]
 8006772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800677a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800677e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006782:	b29b      	uxth	r3, r3
 8006784:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	b29b      	uxth	r3, r3
 8006794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679c:	833b      	strh	r3, [r7, #24]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	441a      	add	r2, r3
 80067a8:	8b3b      	ldrh	r3, [r7, #24]
 80067aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d4:	82fb      	strh	r3, [r7, #22]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	441a      	add	r2, r3
 80067e0:	8afb      	ldrh	r3, [r7, #22]
 80067e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29b      	uxth	r3, r3
 8006804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800680c:	82bb      	strh	r3, [r7, #20]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	441a      	add	r2, r3
 8006818:	8abb      	ldrh	r3, [r7, #20]
 800681a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800681e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800682a:	b29b      	uxth	r3, r3
 800682c:	8013      	strh	r3, [r2, #0]
 800682e:	e0a3      	b.n	8006978 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800683e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d01b      	beq.n	8006880 <USB_DeactivateEndpoint+0x2d4>
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	441a      	add	r2, r3
 800686a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800686c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687c:	b29b      	uxth	r3, r3
 800687e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800688e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01b      	beq.n	80068d0 <USB_DeactivateEndpoint+0x324>
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ae:	853b      	strh	r3, [r7, #40]	; 0x28
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	441a      	add	r2, r3
 80068ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80068bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	441a      	add	r2, r3
 80068f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006904:	b29b      	uxth	r3, r3
 8006906:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29b      	uxth	r3, r3
 8006916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800691a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800691e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	441a      	add	r2, r3
 800692a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800692c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693c:	b29b      	uxth	r3, r3
 800693e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006956:	847b      	strh	r3, [r7, #34]	; 0x22
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	441a      	add	r2, r3
 8006962:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800696c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006974:	b29b      	uxth	r3, r3
 8006976:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3734      	adds	r7, #52	; 0x34
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr

08006984 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b0cc      	sub	sp, #304	; 0x130
 8006988:	af00      	add	r7, sp, #0
 800698a:	1d3b      	adds	r3, r7, #4
 800698c:	6018      	str	r0, [r3, #0]
 800698e:	463b      	mov	r3, r7
 8006990:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006992:	463b      	mov	r3, r7
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	785b      	ldrb	r3, [r3, #1]
 8006998:	2b01      	cmp	r3, #1
 800699a:	f040 872e 	bne.w	80077fa <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800699e:	463b      	mov	r3, r7
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699a      	ldr	r2, [r3, #24]
 80069a4:	463b      	mov	r3, r7
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d905      	bls.n	80069ba <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80069ae:	463b      	mov	r3, r7
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80069b8:	e004      	b.n	80069c4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80069ba:	463b      	mov	r3, r7
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80069c4:	463b      	mov	r3, r7
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	7b1b      	ldrb	r3, [r3, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d134      	bne.n	8006a38 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80069ce:	463b      	mov	r3, r7
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6959      	ldr	r1, [r3, #20]
 80069d4:	463b      	mov	r3, r7
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	88da      	ldrh	r2, [r3, #6]
 80069da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069de:	b29b      	uxth	r3, r3
 80069e0:	1d38      	adds	r0, r7, #4
 80069e2:	6800      	ldr	r0, [r0, #0]
 80069e4:	f001 fc03 	bl	80081ee <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80069e8:	f107 0310 	add.w	r3, r7, #16
 80069ec:	1d3a      	adds	r2, r7, #4
 80069ee:	6812      	ldr	r2, [r2, #0]
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	1d3b      	adds	r3, r7, #4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	4619      	mov	r1, r3
 80069fe:	f107 0310 	add.w	r3, r7, #16
 8006a02:	f107 0210 	add.w	r2, r7, #16
 8006a06:	6812      	ldr	r2, [r2, #0]
 8006a08:	440a      	add	r2, r1
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	463b      	mov	r3, r7
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	011a      	lsls	r2, r3, #4
 8006a14:	f107 0310 	add.w	r3, r7, #16
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006a20:	f107 030c 	add.w	r3, r7, #12
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f107 030c 	add.w	r3, r7, #12
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	801a      	strh	r2, [r3, #0]
 8006a34:	f000 beac 	b.w	8007790 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006a38:	463b      	mov	r3, r7
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	78db      	ldrb	r3, [r3, #3]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	f040 838c 	bne.w	800715c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006a44:	463b      	mov	r3, r7
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6a1a      	ldr	r2, [r3, #32]
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	f240 8330 	bls.w	80070b6 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006a56:	1d3b      	adds	r3, r7, #4
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	463b      	mov	r3, r7
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006a74:	1d3b      	adds	r3, r7, #4
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	463b      	mov	r3, r7
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	441a      	add	r2, r3
 8006a82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006a9a:	463b      	mov	r3, r7
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6a1a      	ldr	r2, [r3, #32]
 8006aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa4:	1ad2      	subs	r2, r2, r3
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006aac:	1d3b      	adds	r3, r7, #4
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 819e 	beq.w	8006e04 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ac8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006acc:	1d3a      	adds	r2, r7, #4
 8006ace:	6812      	ldr	r2, [r2, #0]
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	463b      	mov	r3, r7
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	785b      	ldrb	r3, [r3, #1]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d17a      	bne.n	8006bd2 <USB_EPStartXfer+0x24e>
 8006adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ae0:	1d3a      	adds	r2, r7, #4
 8006ae2:	6812      	ldr	r2, [r2, #0]
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	1d3b      	adds	r3, r7, #4
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	4619      	mov	r1, r3
 8006af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006af6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	440a      	add	r2, r1
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	463b      	mov	r3, r7
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	011a      	lsls	r2, r3, #4
 8006b08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d11a      	bne.n	8006b58 <USB_EPStartXfer+0x1d4>
 8006b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	801a      	strh	r2, [r3, #0]
 8006b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	801a      	strh	r2, [r3, #0]
 8006b56:	e062      	b.n	8006c1e <USB_EPStartXfer+0x29a>
 8006b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b5c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b5e:	d819      	bhi.n	8006b94 <USB_EPStartXfer+0x210>
 8006b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b64:	085b      	lsrs	r3, r3, #1
 8006b66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d004      	beq.n	8006b80 <USB_EPStartXfer+0x1fc>
 8006b76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006b80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	029b      	lsls	r3, r3, #10
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	801a      	strh	r2, [r3, #0]
 8006b92:	e044      	b.n	8006c1e <USB_EPStartXfer+0x29a>
 8006b94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba2:	f003 031f 	and.w	r3, r3, #31
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d104      	bne.n	8006bb4 <USB_EPStartXfer+0x230>
 8006baa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006bb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	029b      	lsls	r3, r3, #10
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	801a      	strh	r2, [r3, #0]
 8006bd0:	e025      	b.n	8006c1e <USB_EPStartXfer+0x29a>
 8006bd2:	463b      	mov	r3, r7
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	785b      	ldrb	r3, [r3, #1]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d120      	bne.n	8006c1e <USB_EPStartXfer+0x29a>
 8006bdc:	1d3b      	adds	r3, r7, #4
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	4619      	mov	r1, r3
 8006be8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006bec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006bf0:	6812      	ldr	r2, [r2, #0]
 8006bf2:	440a      	add	r2, r1
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	463b      	mov	r3, r7
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	011a      	lsls	r2, r3, #4
 8006bfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4413      	add	r3, r2
 8006c06:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c1e:	463b      	mov	r3, r7
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	895b      	ldrh	r3, [r3, #10]
 8006c24:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c28:	463b      	mov	r3, r7
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6959      	ldr	r1, [r3, #20]
 8006c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c38:	1d38      	adds	r0, r7, #4
 8006c3a:	6800      	ldr	r0, [r0, #0]
 8006c3c:	f001 fad7 	bl	80081ee <USB_WritePMA>
            ep->xfer_buff += len;
 8006c40:	463b      	mov	r3, r7
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	695a      	ldr	r2, [r3, #20]
 8006c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c4a:	441a      	add	r2, r3
 8006c4c:	463b      	mov	r3, r7
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c52:	463b      	mov	r3, r7
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6a1a      	ldr	r2, [r3, #32]
 8006c58:	463b      	mov	r3, r7
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d909      	bls.n	8006c76 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8006c62:	463b      	mov	r3, r7
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6a1a      	ldr	r2, [r3, #32]
 8006c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c6c:	1ad2      	subs	r2, r2, r3
 8006c6e:	463b      	mov	r3, r7
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	621a      	str	r2, [r3, #32]
 8006c74:	e008      	b.n	8006c88 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c76:	463b      	mov	r3, r7
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006c80:	463b      	mov	r3, r7
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2200      	movs	r2, #0
 8006c86:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c88:	463b      	mov	r3, r7
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	785b      	ldrb	r3, [r3, #1]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d17a      	bne.n	8006d88 <USB_EPStartXfer+0x404>
 8006c92:	f107 0318 	add.w	r3, r7, #24
 8006c96:	1d3a      	adds	r2, r7, #4
 8006c98:	6812      	ldr	r2, [r2, #0]
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	1d3b      	adds	r3, r7, #4
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	f107 0318 	add.w	r3, r7, #24
 8006cac:	f107 0218 	add.w	r2, r7, #24
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	440a      	add	r2, r1
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	463b      	mov	r3, r7
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	011a      	lsls	r2, r3, #4
 8006cbe:	f107 0318 	add.w	r3, r7, #24
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006cca:	f107 0314 	add.w	r3, r7, #20
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d11a      	bne.n	8006d0e <USB_EPStartXfer+0x38a>
 8006cd8:	f107 0314 	add.w	r3, r7, #20
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	f107 0314 	add.w	r3, r7, #20
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	f107 0314 	add.w	r3, r7, #20
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	f107 0314 	add.w	r3, r7, #20
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	801a      	strh	r2, [r3, #0]
 8006d0c:	e067      	b.n	8006dde <USB_EPStartXfer+0x45a>
 8006d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d12:	2b3e      	cmp	r3, #62	; 0x3e
 8006d14:	d819      	bhi.n	8006d4a <USB_EPStartXfer+0x3c6>
 8006d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <USB_EPStartXfer+0x3b2>
 8006d2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006d30:	3301      	adds	r3, #1
 8006d32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006d36:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	029b      	lsls	r3, r3, #10
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	f107 0314 	add.w	r3, r7, #20
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	801a      	strh	r2, [r3, #0]
 8006d48:	e049      	b.n	8006dde <USB_EPStartXfer+0x45a>
 8006d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d4e:	095b      	lsrs	r3, r3, #5
 8006d50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d58:	f003 031f 	and.w	r3, r3, #31
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d104      	bne.n	8006d6a <USB_EPStartXfer+0x3e6>
 8006d60:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006d64:	3b01      	subs	r3, #1
 8006d66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006d6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	029b      	lsls	r3, r3, #10
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	f107 0314 	add.w	r3, r7, #20
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	801a      	strh	r2, [r3, #0]
 8006d86:	e02a      	b.n	8006dde <USB_EPStartXfer+0x45a>
 8006d88:	463b      	mov	r3, r7
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d125      	bne.n	8006dde <USB_EPStartXfer+0x45a>
 8006d92:	f107 0320 	add.w	r3, r7, #32
 8006d96:	1d3a      	adds	r2, r7, #4
 8006d98:	6812      	ldr	r2, [r2, #0]
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	1d3b      	adds	r3, r7, #4
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	4619      	mov	r1, r3
 8006da8:	f107 0320 	add.w	r3, r7, #32
 8006dac:	f107 0220 	add.w	r2, r7, #32
 8006db0:	6812      	ldr	r2, [r2, #0]
 8006db2:	440a      	add	r2, r1
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	463b      	mov	r3, r7
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	011a      	lsls	r2, r3, #4
 8006dbe:	f107 0320 	add.w	r3, r7, #32
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006dca:	f107 031c 	add.w	r3, r7, #28
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	f107 031c 	add.w	r3, r7, #28
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006dde:	463b      	mov	r3, r7
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	891b      	ldrh	r3, [r3, #8]
 8006de4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006de8:	463b      	mov	r3, r7
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6959      	ldr	r1, [r3, #20]
 8006dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006df8:	1d38      	adds	r0, r7, #4
 8006dfa:	6800      	ldr	r0, [r0, #0]
 8006dfc:	f001 f9f7 	bl	80081ee <USB_WritePMA>
 8006e00:	f000 bcc6 	b.w	8007790 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e04:	463b      	mov	r3, r7
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	785b      	ldrb	r3, [r3, #1]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d164      	bne.n	8006ed8 <USB_EPStartXfer+0x554>
 8006e0e:	1d3b      	adds	r3, r7, #4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e14:	1d3b      	adds	r3, r7, #4
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e22:	4413      	add	r3, r2
 8006e24:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e26:	463b      	mov	r3, r7
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	011a      	lsls	r2, r3, #4
 8006e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e30:	4413      	add	r3, r2
 8006e32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e36:	647b      	str	r3, [r7, #68]	; 0x44
 8006e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d112      	bne.n	8006e66 <USB_EPStartXfer+0x4e2>
 8006e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	e057      	b.n	8006f16 <USB_EPStartXfer+0x592>
 8006e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e6a:	2b3e      	cmp	r3, #62	; 0x3e
 8006e6c:	d817      	bhi.n	8006e9e <USB_EPStartXfer+0x51a>
 8006e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e72:	085b      	lsrs	r3, r3, #1
 8006e74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d004      	beq.n	8006e8e <USB_EPStartXfer+0x50a>
 8006e84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006e88:	3301      	adds	r3, #1
 8006e8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006e8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	029b      	lsls	r3, r3, #10
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e9a:	801a      	strh	r2, [r3, #0]
 8006e9c:	e03b      	b.n	8006f16 <USB_EPStartXfer+0x592>
 8006e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eac:	f003 031f 	and.w	r3, r3, #31
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d104      	bne.n	8006ebe <USB_EPStartXfer+0x53a>
 8006eb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ebe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	029b      	lsls	r3, r3, #10
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ed4:	801a      	strh	r2, [r3, #0]
 8006ed6:	e01e      	b.n	8006f16 <USB_EPStartXfer+0x592>
 8006ed8:	463b      	mov	r3, r7
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	785b      	ldrb	r3, [r3, #1]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d119      	bne.n	8006f16 <USB_EPStartXfer+0x592>
 8006ee2:	1d3b      	adds	r3, r7, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8006ee8:	1d3b      	adds	r3, r7, #4
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ef6:	4413      	add	r3, r2
 8006ef8:	653b      	str	r3, [r7, #80]	; 0x50
 8006efa:	463b      	mov	r3, r7
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	011a      	lsls	r2, r3, #4
 8006f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f04:	4413      	add	r3, r2
 8006f06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f16:	463b      	mov	r3, r7
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	891b      	ldrh	r3, [r3, #8]
 8006f1c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f20:	463b      	mov	r3, r7
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6959      	ldr	r1, [r3, #20]
 8006f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f30:	1d38      	adds	r0, r7, #4
 8006f32:	6800      	ldr	r0, [r0, #0]
 8006f34:	f001 f95b 	bl	80081ee <USB_WritePMA>
            ep->xfer_buff += len;
 8006f38:	463b      	mov	r3, r7
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	695a      	ldr	r2, [r3, #20]
 8006f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f42:	441a      	add	r2, r3
 8006f44:	463b      	mov	r3, r7
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f4a:	463b      	mov	r3, r7
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6a1a      	ldr	r2, [r3, #32]
 8006f50:	463b      	mov	r3, r7
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d909      	bls.n	8006f6e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8006f5a:	463b      	mov	r3, r7
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6a1a      	ldr	r2, [r3, #32]
 8006f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f64:	1ad2      	subs	r2, r2, r3
 8006f66:	463b      	mov	r3, r7
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	621a      	str	r2, [r3, #32]
 8006f6c:	e008      	b.n	8006f80 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f6e:	463b      	mov	r3, r7
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006f78:	463b      	mov	r3, r7
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f80:	1d3b      	adds	r3, r7, #4
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	643b      	str	r3, [r7, #64]	; 0x40
 8006f86:	463b      	mov	r3, r7
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	785b      	ldrb	r3, [r3, #1]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d164      	bne.n	800705a <USB_EPStartXfer+0x6d6>
 8006f90:	1d3b      	adds	r3, r7, #4
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f96:	1d3b      	adds	r3, r7, #4
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	4413      	add	r3, r2
 8006fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fa8:	463b      	mov	r3, r7
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	011a      	lsls	r2, r3, #4
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d112      	bne.n	8006fe8 <USB_EPStartXfer+0x664>
 8006fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd0:	801a      	strh	r2, [r3, #0]
 8006fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe4:	801a      	strh	r2, [r3, #0]
 8006fe6:	e054      	b.n	8007092 <USB_EPStartXfer+0x70e>
 8006fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fec:	2b3e      	cmp	r3, #62	; 0x3e
 8006fee:	d817      	bhi.n	8007020 <USB_EPStartXfer+0x69c>
 8006ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff4:	085b      	lsrs	r3, r3, #1
 8006ff6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d004      	beq.n	8007010 <USB_EPStartXfer+0x68c>
 8007006:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800700a:	3301      	adds	r3, #1
 800700c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007010:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007014:	b29b      	uxth	r3, r3
 8007016:	029b      	lsls	r3, r3, #10
 8007018:	b29a      	uxth	r2, r3
 800701a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701c:	801a      	strh	r2, [r3, #0]
 800701e:	e038      	b.n	8007092 <USB_EPStartXfer+0x70e>
 8007020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007024:	095b      	lsrs	r3, r3, #5
 8007026:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800702a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800702e:	f003 031f 	and.w	r3, r3, #31
 8007032:	2b00      	cmp	r3, #0
 8007034:	d104      	bne.n	8007040 <USB_EPStartXfer+0x6bc>
 8007036:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800703a:	3b01      	subs	r3, #1
 800703c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007040:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007044:	b29b      	uxth	r3, r3
 8007046:	029b      	lsls	r3, r3, #10
 8007048:	b29b      	uxth	r3, r3
 800704a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800704e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007052:	b29a      	uxth	r2, r3
 8007054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007056:	801a      	strh	r2, [r3, #0]
 8007058:	e01b      	b.n	8007092 <USB_EPStartXfer+0x70e>
 800705a:	463b      	mov	r3, r7
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	785b      	ldrb	r3, [r3, #1]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d116      	bne.n	8007092 <USB_EPStartXfer+0x70e>
 8007064:	1d3b      	adds	r3, r7, #4
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800706c:	b29b      	uxth	r3, r3
 800706e:	461a      	mov	r2, r3
 8007070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007072:	4413      	add	r3, r2
 8007074:	643b      	str	r3, [r7, #64]	; 0x40
 8007076:	463b      	mov	r3, r7
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	011a      	lsls	r2, r3, #4
 800707e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007080:	4413      	add	r3, r2
 8007082:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800708c:	b29a      	uxth	r2, r3
 800708e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007090:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007092:	463b      	mov	r3, r7
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	895b      	ldrh	r3, [r3, #10]
 8007098:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800709c:	463b      	mov	r3, r7
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6959      	ldr	r1, [r3, #20]
 80070a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80070ac:	1d38      	adds	r0, r7, #4
 80070ae:	6800      	ldr	r0, [r0, #0]
 80070b0:	f001 f89d 	bl	80081ee <USB_WritePMA>
 80070b4:	e36c      	b.n	8007790 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80070b6:	463b      	mov	r3, r7
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80070c0:	1d3b      	adds	r3, r7, #4
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	463b      	mov	r3, r7
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80070d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070da:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80070de:	1d3b      	adds	r3, r7, #4
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	463b      	mov	r3, r7
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	441a      	add	r2, r3
 80070ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80070f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007100:	b29b      	uxth	r3, r3
 8007102:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007104:	1d3b      	adds	r3, r7, #4
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	65fb      	str	r3, [r7, #92]	; 0x5c
 800710a:	1d3b      	adds	r3, r7, #4
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007112:	b29b      	uxth	r3, r3
 8007114:	461a      	mov	r2, r3
 8007116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007118:	4413      	add	r3, r2
 800711a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800711c:	463b      	mov	r3, r7
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	011a      	lsls	r2, r3, #4
 8007124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007126:	4413      	add	r3, r2
 8007128:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800712c:	65bb      	str	r3, [r7, #88]	; 0x58
 800712e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007132:	b29a      	uxth	r2, r3
 8007134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007136:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007138:	463b      	mov	r3, r7
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	891b      	ldrh	r3, [r3, #8]
 800713e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007142:	463b      	mov	r3, r7
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6959      	ldr	r1, [r3, #20]
 8007148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800714c:	b29b      	uxth	r3, r3
 800714e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007152:	1d38      	adds	r0, r7, #4
 8007154:	6800      	ldr	r0, [r0, #0]
 8007156:	f001 f84a 	bl	80081ee <USB_WritePMA>
 800715a:	e319      	b.n	8007790 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800715c:	1d3b      	adds	r3, r7, #4
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	463b      	mov	r3, r7
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	b29b      	uxth	r3, r3
 800716e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007176:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800717a:	1d3b      	adds	r3, r7, #4
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	463b      	mov	r3, r7
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	441a      	add	r2, r3
 8007188:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800718c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007194:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719c:	b29b      	uxth	r3, r3
 800719e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80071a0:	463b      	mov	r3, r7
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6a1a      	ldr	r2, [r3, #32]
 80071a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071aa:	1ad2      	subs	r2, r2, r3
 80071ac:	463b      	mov	r3, r7
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071b2:	1d3b      	adds	r3, r7, #4
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	463b      	mov	r3, r7
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 8162 	beq.w	8007492 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071ce:	1d3b      	adds	r3, r7, #4
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071d6:	463b      	mov	r3, r7
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	785b      	ldrb	r3, [r3, #1]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d164      	bne.n	80072aa <USB_EPStartXfer+0x926>
 80071e0:	1d3b      	adds	r3, r7, #4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80071e6:	1d3b      	adds	r3, r7, #4
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	461a      	mov	r2, r3
 80071f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071f4:	4413      	add	r3, r2
 80071f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80071f8:	463b      	mov	r3, r7
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	011a      	lsls	r2, r3, #4
 8007200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007202:	4413      	add	r3, r2
 8007204:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007208:	677b      	str	r3, [r7, #116]	; 0x74
 800720a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800720e:	2b00      	cmp	r3, #0
 8007210:	d112      	bne.n	8007238 <USB_EPStartXfer+0x8b4>
 8007212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	b29b      	uxth	r3, r3
 8007218:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800721c:	b29a      	uxth	r2, r3
 800721e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007220:	801a      	strh	r2, [r3, #0]
 8007222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	b29b      	uxth	r3, r3
 8007228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800722c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007230:	b29a      	uxth	r2, r3
 8007232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007234:	801a      	strh	r2, [r3, #0]
 8007236:	e057      	b.n	80072e8 <USB_EPStartXfer+0x964>
 8007238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800723c:	2b3e      	cmp	r3, #62	; 0x3e
 800723e:	d817      	bhi.n	8007270 <USB_EPStartXfer+0x8ec>
 8007240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007244:	085b      	lsrs	r3, r3, #1
 8007246:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800724a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d004      	beq.n	8007260 <USB_EPStartXfer+0x8dc>
 8007256:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800725a:	3301      	adds	r3, #1
 800725c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007260:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007264:	b29b      	uxth	r3, r3
 8007266:	029b      	lsls	r3, r3, #10
 8007268:	b29a      	uxth	r2, r3
 800726a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800726c:	801a      	strh	r2, [r3, #0]
 800726e:	e03b      	b.n	80072e8 <USB_EPStartXfer+0x964>
 8007270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007274:	095b      	lsrs	r3, r3, #5
 8007276:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800727a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800727e:	f003 031f 	and.w	r3, r3, #31
 8007282:	2b00      	cmp	r3, #0
 8007284:	d104      	bne.n	8007290 <USB_EPStartXfer+0x90c>
 8007286:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800728a:	3b01      	subs	r3, #1
 800728c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007290:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007294:	b29b      	uxth	r3, r3
 8007296:	029b      	lsls	r3, r3, #10
 8007298:	b29b      	uxth	r3, r3
 800729a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800729e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072a6:	801a      	strh	r2, [r3, #0]
 80072a8:	e01e      	b.n	80072e8 <USB_EPStartXfer+0x964>
 80072aa:	463b      	mov	r3, r7
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	785b      	ldrb	r3, [r3, #1]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d119      	bne.n	80072e8 <USB_EPStartXfer+0x964>
 80072b4:	1d3b      	adds	r3, r7, #4
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072bc:	b29b      	uxth	r3, r3
 80072be:	461a      	mov	r2, r3
 80072c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072c4:	4413      	add	r3, r2
 80072c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072ca:	463b      	mov	r3, r7
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	011a      	lsls	r2, r3, #4
 80072d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072d6:	4413      	add	r3, r2
 80072d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80072e8:	463b      	mov	r3, r7
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	895b      	ldrh	r3, [r3, #10]
 80072ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072f2:	463b      	mov	r3, r7
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6959      	ldr	r1, [r3, #20]
 80072f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007302:	1d38      	adds	r0, r7, #4
 8007304:	6800      	ldr	r0, [r0, #0]
 8007306:	f000 ff72 	bl	80081ee <USB_WritePMA>
          ep->xfer_buff += len;
 800730a:	463b      	mov	r3, r7
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	695a      	ldr	r2, [r3, #20]
 8007310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007314:	441a      	add	r2, r3
 8007316:	463b      	mov	r3, r7
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800731c:	463b      	mov	r3, r7
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6a1a      	ldr	r2, [r3, #32]
 8007322:	463b      	mov	r3, r7
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	429a      	cmp	r2, r3
 800732a:	d909      	bls.n	8007340 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800732c:	463b      	mov	r3, r7
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6a1a      	ldr	r2, [r3, #32]
 8007332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007336:	1ad2      	subs	r2, r2, r3
 8007338:	463b      	mov	r3, r7
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	621a      	str	r2, [r3, #32]
 800733e:	e008      	b.n	8007352 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007340:	463b      	mov	r3, r7
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800734a:	463b      	mov	r3, r7
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2200      	movs	r2, #0
 8007350:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 821a 	beq.w	8007790 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800735c:	463b      	mov	r3, r7
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	785b      	ldrb	r3, [r3, #1]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d164      	bne.n	8007430 <USB_EPStartXfer+0xaac>
 8007366:	1d3b      	adds	r3, r7, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	66bb      	str	r3, [r7, #104]	; 0x68
 800736c:	1d3b      	adds	r3, r7, #4
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007374:	b29b      	uxth	r3, r3
 8007376:	461a      	mov	r2, r3
 8007378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800737a:	4413      	add	r3, r2
 800737c:	66bb      	str	r3, [r7, #104]	; 0x68
 800737e:	463b      	mov	r3, r7
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	011a      	lsls	r2, r3, #4
 8007386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007388:	4413      	add	r3, r2
 800738a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800738e:	667b      	str	r3, [r7, #100]	; 0x64
 8007390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007394:	2b00      	cmp	r3, #0
 8007396:	d112      	bne.n	80073be <USB_EPStartXfer+0xa3a>
 8007398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	b29b      	uxth	r3, r3
 800739e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073a6:	801a      	strh	r2, [r3, #0]
 80073a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ba:	801a      	strh	r2, [r3, #0]
 80073bc:	e057      	b.n	800746e <USB_EPStartXfer+0xaea>
 80073be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c2:	2b3e      	cmp	r3, #62	; 0x3e
 80073c4:	d817      	bhi.n	80073f6 <USB_EPStartXfer+0xa72>
 80073c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ca:	085b      	lsrs	r3, r3, #1
 80073cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80073d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d004      	beq.n	80073e6 <USB_EPStartXfer+0xa62>
 80073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e0:	3301      	adds	r3, #1
 80073e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	029b      	lsls	r3, r3, #10
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073f2:	801a      	strh	r2, [r3, #0]
 80073f4:	e03b      	b.n	800746e <USB_EPStartXfer+0xaea>
 80073f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007404:	f003 031f 	and.w	r3, r3, #31
 8007408:	2b00      	cmp	r3, #0
 800740a:	d104      	bne.n	8007416 <USB_EPStartXfer+0xa92>
 800740c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007410:	3b01      	subs	r3, #1
 8007412:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800741a:	b29b      	uxth	r3, r3
 800741c:	029b      	lsls	r3, r3, #10
 800741e:	b29b      	uxth	r3, r3
 8007420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007428:	b29a      	uxth	r2, r3
 800742a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800742c:	801a      	strh	r2, [r3, #0]
 800742e:	e01e      	b.n	800746e <USB_EPStartXfer+0xaea>
 8007430:	463b      	mov	r3, r7
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d119      	bne.n	800746e <USB_EPStartXfer+0xaea>
 800743a:	1d3b      	adds	r3, r7, #4
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	673b      	str	r3, [r7, #112]	; 0x70
 8007440:	1d3b      	adds	r3, r7, #4
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007448:	b29b      	uxth	r3, r3
 800744a:	461a      	mov	r2, r3
 800744c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800744e:	4413      	add	r3, r2
 8007450:	673b      	str	r3, [r7, #112]	; 0x70
 8007452:	463b      	mov	r3, r7
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	011a      	lsls	r2, r3, #4
 800745a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800745c:	4413      	add	r3, r2
 800745e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007462:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007464:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007468:	b29a      	uxth	r2, r3
 800746a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800746c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800746e:	463b      	mov	r3, r7
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	891b      	ldrh	r3, [r3, #8]
 8007474:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007478:	463b      	mov	r3, r7
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6959      	ldr	r1, [r3, #20]
 800747e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007482:	b29b      	uxth	r3, r3
 8007484:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007488:	1d38      	adds	r0, r7, #4
 800748a:	6800      	ldr	r0, [r0, #0]
 800748c:	f000 feaf 	bl	80081ee <USB_WritePMA>
 8007490:	e17e      	b.n	8007790 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007492:	463b      	mov	r3, r7
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	785b      	ldrb	r3, [r3, #1]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d16f      	bne.n	800757c <USB_EPStartXfer+0xbf8>
 800749c:	1d3b      	adds	r3, r7, #4
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074a4:	1d3b      	adds	r3, r7, #4
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	461a      	mov	r2, r3
 80074b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074b4:	4413      	add	r3, r2
 80074b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074ba:	463b      	mov	r3, r7
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	011a      	lsls	r2, r3, #4
 80074c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074c6:	4413      	add	r3, r2
 80074c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d116      	bne.n	8007506 <USB_EPStartXfer+0xb82>
 80074d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074ea:	801a      	strh	r2, [r3, #0]
 80074ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007502:	801a      	strh	r2, [r3, #0]
 8007504:	e05f      	b.n	80075c6 <USB_EPStartXfer+0xc42>
 8007506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800750a:	2b3e      	cmp	r3, #62	; 0x3e
 800750c:	d818      	bhi.n	8007540 <USB_EPStartXfer+0xbbc>
 800750e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007512:	085b      	lsrs	r3, r3, #1
 8007514:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d004      	beq.n	800752e <USB_EPStartXfer+0xbaa>
 8007524:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007528:	3301      	adds	r3, #1
 800752a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800752e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007532:	b29b      	uxth	r3, r3
 8007534:	029b      	lsls	r3, r3, #10
 8007536:	b29a      	uxth	r2, r3
 8007538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800753c:	801a      	strh	r2, [r3, #0]
 800753e:	e042      	b.n	80075c6 <USB_EPStartXfer+0xc42>
 8007540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007544:	095b      	lsrs	r3, r3, #5
 8007546:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800754a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800754e:	f003 031f 	and.w	r3, r3, #31
 8007552:	2b00      	cmp	r3, #0
 8007554:	d104      	bne.n	8007560 <USB_EPStartXfer+0xbdc>
 8007556:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800755a:	3b01      	subs	r3, #1
 800755c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007560:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007564:	b29b      	uxth	r3, r3
 8007566:	029b      	lsls	r3, r3, #10
 8007568:	b29b      	uxth	r3, r3
 800756a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800756e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007572:	b29a      	uxth	r2, r3
 8007574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007578:	801a      	strh	r2, [r3, #0]
 800757a:	e024      	b.n	80075c6 <USB_EPStartXfer+0xc42>
 800757c:	463b      	mov	r3, r7
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	785b      	ldrb	r3, [r3, #1]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d11f      	bne.n	80075c6 <USB_EPStartXfer+0xc42>
 8007586:	1d3b      	adds	r3, r7, #4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800758e:	1d3b      	adds	r3, r7, #4
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007596:	b29b      	uxth	r3, r3
 8007598:	461a      	mov	r2, r3
 800759a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800759e:	4413      	add	r3, r2
 80075a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80075a4:	463b      	mov	r3, r7
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	011a      	lsls	r2, r3, #4
 80075ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075b0:	4413      	add	r3, r2
 80075b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075be:	b29a      	uxth	r2, r3
 80075c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075c6:	463b      	mov	r3, r7
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	891b      	ldrh	r3, [r3, #8]
 80075cc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075d0:	463b      	mov	r3, r7
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6959      	ldr	r1, [r3, #20]
 80075d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075da:	b29b      	uxth	r3, r3
 80075dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075e0:	1d38      	adds	r0, r7, #4
 80075e2:	6800      	ldr	r0, [r0, #0]
 80075e4:	f000 fe03 	bl	80081ee <USB_WritePMA>
          ep->xfer_buff += len;
 80075e8:	463b      	mov	r3, r7
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	695a      	ldr	r2, [r3, #20]
 80075ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f2:	441a      	add	r2, r3
 80075f4:	463b      	mov	r3, r7
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80075fa:	463b      	mov	r3, r7
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6a1a      	ldr	r2, [r3, #32]
 8007600:	463b      	mov	r3, r7
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	429a      	cmp	r2, r3
 8007608:	d909      	bls.n	800761e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800760a:	463b      	mov	r3, r7
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6a1a      	ldr	r2, [r3, #32]
 8007610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007614:	1ad2      	subs	r2, r2, r3
 8007616:	463b      	mov	r3, r7
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	621a      	str	r2, [r3, #32]
 800761c:	e008      	b.n	8007630 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800761e:	463b      	mov	r3, r7
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007628:	463b      	mov	r3, r7
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2200      	movs	r2, #0
 800762e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 80ab 	beq.w	8007790 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800763a:	1d3b      	adds	r3, r7, #4
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007642:	463b      	mov	r3, r7
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d16f      	bne.n	800772c <USB_EPStartXfer+0xda8>
 800764c:	1d3b      	adds	r3, r7, #4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007654:	1d3b      	adds	r3, r7, #4
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765c:	b29b      	uxth	r3, r3
 800765e:	461a      	mov	r2, r3
 8007660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007664:	4413      	add	r3, r2
 8007666:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800766a:	463b      	mov	r3, r7
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	011a      	lsls	r2, r3, #4
 8007672:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007676:	4413      	add	r3, r2
 8007678:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800767c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d116      	bne.n	80076b6 <USB_EPStartXfer+0xd32>
 8007688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007694:	b29a      	uxth	r2, r3
 8007696:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800769a:	801a      	strh	r2, [r3, #0]
 800769c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	e05b      	b.n	800776e <USB_EPStartXfer+0xdea>
 80076b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ba:	2b3e      	cmp	r3, #62	; 0x3e
 80076bc:	d818      	bhi.n	80076f0 <USB_EPStartXfer+0xd6c>
 80076be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c2:	085b      	lsrs	r3, r3, #1
 80076c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80076c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d004      	beq.n	80076de <USB_EPStartXfer+0xd5a>
 80076d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076d8:	3301      	adds	r3, #1
 80076da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80076de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	029b      	lsls	r3, r3, #10
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	e03e      	b.n	800776e <USB_EPStartXfer+0xdea>
 80076f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80076fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076fe:	f003 031f 	and.w	r3, r3, #31
 8007702:	2b00      	cmp	r3, #0
 8007704:	d104      	bne.n	8007710 <USB_EPStartXfer+0xd8c>
 8007706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800770a:	3b01      	subs	r3, #1
 800770c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007714:	b29b      	uxth	r3, r3
 8007716:	029b      	lsls	r3, r3, #10
 8007718:	b29b      	uxth	r3, r3
 800771a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800771e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007722:	b29a      	uxth	r2, r3
 8007724:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007728:	801a      	strh	r2, [r3, #0]
 800772a:	e020      	b.n	800776e <USB_EPStartXfer+0xdea>
 800772c:	463b      	mov	r3, r7
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	785b      	ldrb	r3, [r3, #1]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d11b      	bne.n	800776e <USB_EPStartXfer+0xdea>
 8007736:	1d3b      	adds	r3, r7, #4
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800773e:	b29b      	uxth	r3, r3
 8007740:	461a      	mov	r2, r3
 8007742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007746:	4413      	add	r3, r2
 8007748:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800774c:	463b      	mov	r3, r7
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	011a      	lsls	r2, r3, #4
 8007754:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007758:	4413      	add	r3, r2
 800775a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800775e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007766:	b29a      	uxth	r2, r3
 8007768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800776c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800776e:	463b      	mov	r3, r7
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	895b      	ldrh	r3, [r3, #10]
 8007774:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007778:	463b      	mov	r3, r7
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6959      	ldr	r1, [r3, #20]
 800777e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007782:	b29b      	uxth	r3, r3
 8007784:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007788:	1d38      	adds	r0, r7, #4
 800778a:	6800      	ldr	r0, [r0, #0]
 800778c:	f000 fd2f 	bl	80081ee <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007790:	1d3b      	adds	r3, r7, #4
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	463b      	mov	r3, r7
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f107 020a 	add.w	r2, r7, #10
 80077a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077ae:	8013      	strh	r3, [r2, #0]
 80077b0:	f107 030a 	add.w	r3, r7, #10
 80077b4:	f107 020a 	add.w	r2, r7, #10
 80077b8:	8812      	ldrh	r2, [r2, #0]
 80077ba:	f082 0210 	eor.w	r2, r2, #16
 80077be:	801a      	strh	r2, [r3, #0]
 80077c0:	f107 030a 	add.w	r3, r7, #10
 80077c4:	f107 020a 	add.w	r2, r7, #10
 80077c8:	8812      	ldrh	r2, [r2, #0]
 80077ca:	f082 0220 	eor.w	r2, r2, #32
 80077ce:	801a      	strh	r2, [r3, #0]
 80077d0:	1d3b      	adds	r3, r7, #4
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	463b      	mov	r3, r7
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	441a      	add	r2, r3
 80077de:	f107 030a 	add.w	r3, r7, #10
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	8013      	strh	r3, [r2, #0]
 80077f8:	e3b5      	b.n	8007f66 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80077fa:	463b      	mov	r3, r7
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	7b1b      	ldrb	r3, [r3, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	f040 8090 	bne.w	8007926 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007806:	463b      	mov	r3, r7
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	463b      	mov	r3, r7
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	429a      	cmp	r2, r3
 8007814:	d90e      	bls.n	8007834 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8007816:	463b      	mov	r3, r7
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007820:	463b      	mov	r3, r7
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	699a      	ldr	r2, [r3, #24]
 8007826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800782a:	1ad2      	subs	r2, r2, r3
 800782c:	463b      	mov	r3, r7
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	619a      	str	r2, [r3, #24]
 8007832:	e008      	b.n	8007846 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8007834:	463b      	mov	r3, r7
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800783e:	463b      	mov	r3, r7
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2200      	movs	r2, #0
 8007844:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007846:	1d3b      	adds	r3, r7, #4
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800784e:	1d3b      	adds	r3, r7, #4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007856:	b29b      	uxth	r3, r3
 8007858:	461a      	mov	r2, r3
 800785a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800785e:	4413      	add	r3, r2
 8007860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007864:	463b      	mov	r3, r7
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	011a      	lsls	r2, r3, #4
 800786c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007870:	4413      	add	r3, r2
 8007872:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007876:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800787a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800787e:	2b00      	cmp	r3, #0
 8007880:	d116      	bne.n	80078b0 <USB_EPStartXfer+0xf2c>
 8007882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	b29b      	uxth	r3, r3
 800788a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800788e:	b29a      	uxth	r2, r3
 8007890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007894:	801a      	strh	r2, [r3, #0]
 8007896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29b      	uxth	r3, r3
 800789e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078ac:	801a      	strh	r2, [r3, #0]
 80078ae:	e32c      	b.n	8007f0a <USB_EPStartXfer+0x1586>
 80078b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b4:	2b3e      	cmp	r3, #62	; 0x3e
 80078b6:	d818      	bhi.n	80078ea <USB_EPStartXfer+0xf66>
 80078b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078bc:	085b      	lsrs	r3, r3, #1
 80078be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80078c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d004      	beq.n	80078d8 <USB_EPStartXfer+0xf54>
 80078ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078d2:	3301      	adds	r3, #1
 80078d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80078d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078dc:	b29b      	uxth	r3, r3
 80078de:	029b      	lsls	r3, r3, #10
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078e6:	801a      	strh	r2, [r3, #0]
 80078e8:	e30f      	b.n	8007f0a <USB_EPStartXfer+0x1586>
 80078ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ee:	095b      	lsrs	r3, r3, #5
 80078f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80078f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f8:	f003 031f 	and.w	r3, r3, #31
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d104      	bne.n	800790a <USB_EPStartXfer+0xf86>
 8007900:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007904:	3b01      	subs	r3, #1
 8007906:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800790a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800790e:	b29b      	uxth	r3, r3
 8007910:	029b      	lsls	r3, r3, #10
 8007912:	b29b      	uxth	r3, r3
 8007914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800791c:	b29a      	uxth	r2, r3
 800791e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007922:	801a      	strh	r2, [r3, #0]
 8007924:	e2f1      	b.n	8007f0a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007926:	463b      	mov	r3, r7
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	78db      	ldrb	r3, [r3, #3]
 800792c:	2b02      	cmp	r3, #2
 800792e:	f040 818f 	bne.w	8007c50 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007932:	463b      	mov	r3, r7
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	785b      	ldrb	r3, [r3, #1]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d175      	bne.n	8007a28 <USB_EPStartXfer+0x10a4>
 800793c:	1d3b      	adds	r3, r7, #4
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007944:	1d3b      	adds	r3, r7, #4
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800794c:	b29b      	uxth	r3, r3
 800794e:	461a      	mov	r2, r3
 8007950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007954:	4413      	add	r3, r2
 8007956:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800795a:	463b      	mov	r3, r7
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	011a      	lsls	r2, r3, #4
 8007962:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007966:	4413      	add	r3, r2
 8007968:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800796c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007970:	463b      	mov	r3, r7
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d116      	bne.n	80079a8 <USB_EPStartXfer+0x1024>
 800797a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	b29b      	uxth	r3, r3
 8007982:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007986:	b29a      	uxth	r2, r3
 8007988:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800798c:	801a      	strh	r2, [r3, #0]
 800798e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29b      	uxth	r3, r3
 8007996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800799a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800799e:	b29a      	uxth	r2, r3
 80079a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079a4:	801a      	strh	r2, [r3, #0]
 80079a6:	e065      	b.n	8007a74 <USB_EPStartXfer+0x10f0>
 80079a8:	463b      	mov	r3, r7
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	2b3e      	cmp	r3, #62	; 0x3e
 80079b0:	d81a      	bhi.n	80079e8 <USB_EPStartXfer+0x1064>
 80079b2:	463b      	mov	r3, r7
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	085b      	lsrs	r3, r3, #1
 80079ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079be:	463b      	mov	r3, r7
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d004      	beq.n	80079d6 <USB_EPStartXfer+0x1052>
 80079cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d0:	3301      	adds	r3, #1
 80079d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079da:	b29b      	uxth	r3, r3
 80079dc:	029b      	lsls	r3, r3, #10
 80079de:	b29a      	uxth	r2, r3
 80079e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079e4:	801a      	strh	r2, [r3, #0]
 80079e6:	e045      	b.n	8007a74 <USB_EPStartXfer+0x10f0>
 80079e8:	463b      	mov	r3, r7
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	095b      	lsrs	r3, r3, #5
 80079f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079f4:	463b      	mov	r3, r7
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 031f 	and.w	r3, r3, #31
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d104      	bne.n	8007a0c <USB_EPStartXfer+0x1088>
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a06:	3b01      	subs	r3, #1
 8007a08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	029b      	lsls	r3, r3, #10
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a24:	801a      	strh	r2, [r3, #0]
 8007a26:	e025      	b.n	8007a74 <USB_EPStartXfer+0x10f0>
 8007a28:	463b      	mov	r3, r7
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	785b      	ldrb	r3, [r3, #1]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d120      	bne.n	8007a74 <USB_EPStartXfer+0x10f0>
 8007a32:	1d3b      	adds	r3, r7, #4
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a3a:	1d3b      	adds	r3, r7, #4
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	461a      	mov	r2, r3
 8007a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a50:	463b      	mov	r3, r7
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	011a      	lsls	r2, r3, #4
 8007a58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a66:	463b      	mov	r3, r7
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007a72:	801a      	strh	r2, [r3, #0]
 8007a74:	1d3b      	adds	r3, r7, #4
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	785b      	ldrb	r3, [r3, #1]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d175      	bne.n	8007b72 <USB_EPStartXfer+0x11ee>
 8007a86:	1d3b      	adds	r3, r7, #4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a8e:	1d3b      	adds	r3, r7, #4
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007aa4:	463b      	mov	r3, r7
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	011a      	lsls	r2, r3, #4
 8007aac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ab6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007aba:	463b      	mov	r3, r7
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d116      	bne.n	8007af2 <USB_EPStartXfer+0x116e>
 8007ac4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ad6:	801a      	strh	r2, [r3, #0]
 8007ad8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007aee:	801a      	strh	r2, [r3, #0]
 8007af0:	e061      	b.n	8007bb6 <USB_EPStartXfer+0x1232>
 8007af2:	463b      	mov	r3, r7
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	2b3e      	cmp	r3, #62	; 0x3e
 8007afa:	d81a      	bhi.n	8007b32 <USB_EPStartXfer+0x11ae>
 8007afc:	463b      	mov	r3, r7
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	085b      	lsrs	r3, r3, #1
 8007b04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b08:	463b      	mov	r3, r7
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d004      	beq.n	8007b20 <USB_EPStartXfer+0x119c>
 8007b16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	029b      	lsls	r3, r3, #10
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b2e:	801a      	strh	r2, [r3, #0]
 8007b30:	e041      	b.n	8007bb6 <USB_EPStartXfer+0x1232>
 8007b32:	463b      	mov	r3, r7
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	095b      	lsrs	r3, r3, #5
 8007b3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b3e:	463b      	mov	r3, r7
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	f003 031f 	and.w	r3, r3, #31
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d104      	bne.n	8007b56 <USB_EPStartXfer+0x11d2>
 8007b4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b50:	3b01      	subs	r3, #1
 8007b52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	029b      	lsls	r3, r3, #10
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	e021      	b.n	8007bb6 <USB_EPStartXfer+0x1232>
 8007b72:	463b      	mov	r3, r7
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	785b      	ldrb	r3, [r3, #1]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d11c      	bne.n	8007bb6 <USB_EPStartXfer+0x1232>
 8007b7c:	1d3b      	adds	r3, r7, #4
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b92:	463b      	mov	r3, r7
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	011a      	lsls	r2, r3, #4
 8007b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ba8:	463b      	mov	r3, r7
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007bb4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007bb6:	463b      	mov	r3, r7
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	69db      	ldr	r3, [r3, #28]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 81a4 	beq.w	8007f0a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007bc2:	1d3b      	adds	r3, r7, #4
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	463b      	mov	r3, r7
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007bd6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d005      	beq.n	8007bee <USB_EPStartXfer+0x126a>
 8007be2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10d      	bne.n	8007c0a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007bee:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f040 8187 	bne.w	8007f0a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007bfc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f040 8180 	bne.w	8007f0a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007c0a:	1d3b      	adds	r3, r7, #4
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	463b      	mov	r3, r7
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c24:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007c28:	1d3b      	adds	r3, r7, #4
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	463b      	mov	r3, r7
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	441a      	add	r2, r3
 8007c36:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	8013      	strh	r3, [r2, #0]
 8007c4e:	e15c      	b.n	8007f0a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007c50:	463b      	mov	r3, r7
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	78db      	ldrb	r3, [r3, #3]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	f040 8155 	bne.w	8007f06 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007c5c:	463b      	mov	r3, r7
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	463b      	mov	r3, r7
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d90e      	bls.n	8007c8a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8007c6c:	463b      	mov	r3, r7
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007c76:	463b      	mov	r3, r7
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	699a      	ldr	r2, [r3, #24]
 8007c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c80:	1ad2      	subs	r2, r2, r3
 8007c82:	463b      	mov	r3, r7
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	619a      	str	r2, [r3, #24]
 8007c88:	e008      	b.n	8007c9c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8007c8a:	463b      	mov	r3, r7
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007c94:	463b      	mov	r3, r7
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007c9c:	463b      	mov	r3, r7
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	785b      	ldrb	r3, [r3, #1]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d16f      	bne.n	8007d86 <USB_EPStartXfer+0x1402>
 8007ca6:	1d3b      	adds	r3, r7, #4
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007cae:	1d3b      	adds	r3, r7, #4
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	461a      	mov	r2, r3
 8007cba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007cc4:	463b      	mov	r3, r7
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	011a      	lsls	r2, r3, #4
 8007ccc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d116      	bne.n	8007d10 <USB_EPStartXfer+0x138c>
 8007ce2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cf4:	801a      	strh	r2, [r3, #0]
 8007cf6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d0c:	801a      	strh	r2, [r3, #0]
 8007d0e:	e05f      	b.n	8007dd0 <USB_EPStartXfer+0x144c>
 8007d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d14:	2b3e      	cmp	r3, #62	; 0x3e
 8007d16:	d818      	bhi.n	8007d4a <USB_EPStartXfer+0x13c6>
 8007d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d1c:	085b      	lsrs	r3, r3, #1
 8007d1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <USB_EPStartXfer+0x13b4>
 8007d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d32:	3301      	adds	r3, #1
 8007d34:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	029b      	lsls	r3, r3, #10
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d46:	801a      	strh	r2, [r3, #0]
 8007d48:	e042      	b.n	8007dd0 <USB_EPStartXfer+0x144c>
 8007d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d4e:	095b      	lsrs	r3, r3, #5
 8007d50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d58:	f003 031f 	and.w	r3, r3, #31
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d104      	bne.n	8007d6a <USB_EPStartXfer+0x13e6>
 8007d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d64:	3b01      	subs	r3, #1
 8007d66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	029b      	lsls	r3, r3, #10
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d82:	801a      	strh	r2, [r3, #0]
 8007d84:	e024      	b.n	8007dd0 <USB_EPStartXfer+0x144c>
 8007d86:	463b      	mov	r3, r7
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d11f      	bne.n	8007dd0 <USB_EPStartXfer+0x144c>
 8007d90:	1d3b      	adds	r3, r7, #4
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d98:	1d3b      	adds	r3, r7, #4
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	461a      	mov	r2, r3
 8007da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da8:	4413      	add	r3, r2
 8007daa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007dae:	463b      	mov	r3, r7
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	011a      	lsls	r2, r3, #4
 8007db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dba:	4413      	add	r3, r2
 8007dbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dc0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007dce:	801a      	strh	r2, [r3, #0]
 8007dd0:	1d3b      	adds	r3, r7, #4
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dd8:	463b      	mov	r3, r7
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	785b      	ldrb	r3, [r3, #1]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d16f      	bne.n	8007ec2 <USB_EPStartXfer+0x153e>
 8007de2:	1d3b      	adds	r3, r7, #4
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007dea:	1d3b      	adds	r3, r7, #4
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	461a      	mov	r2, r3
 8007df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e00:	463b      	mov	r3, r7
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	011a      	lsls	r2, r3, #4
 8007e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d116      	bne.n	8007e4c <USB_EPStartXfer+0x14c8>
 8007e1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e30:	801a      	strh	r2, [r3, #0]
 8007e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e48:	801a      	strh	r2, [r3, #0]
 8007e4a:	e05e      	b.n	8007f0a <USB_EPStartXfer+0x1586>
 8007e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e50:	2b3e      	cmp	r3, #62	; 0x3e
 8007e52:	d818      	bhi.n	8007e86 <USB_EPStartXfer+0x1502>
 8007e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e58:	085b      	lsrs	r3, r3, #1
 8007e5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d004      	beq.n	8007e74 <USB_EPStartXfer+0x14f0>
 8007e6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e6e:	3301      	adds	r3, #1
 8007e70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	029b      	lsls	r3, r3, #10
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e82:	801a      	strh	r2, [r3, #0]
 8007e84:	e041      	b.n	8007f0a <USB_EPStartXfer+0x1586>
 8007e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e8a:	095b      	lsrs	r3, r3, #5
 8007e8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e94:	f003 031f 	and.w	r3, r3, #31
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d104      	bne.n	8007ea6 <USB_EPStartXfer+0x1522>
 8007e9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ea6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	029b      	lsls	r3, r3, #10
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ebe:	801a      	strh	r2, [r3, #0]
 8007ec0:	e023      	b.n	8007f0a <USB_EPStartXfer+0x1586>
 8007ec2:	463b      	mov	r3, r7
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	785b      	ldrb	r3, [r3, #1]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d11e      	bne.n	8007f0a <USB_EPStartXfer+0x1586>
 8007ecc:	1d3b      	adds	r3, r7, #4
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007edc:	4413      	add	r3, r2
 8007ede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ee2:	463b      	mov	r3, r7
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	011a      	lsls	r2, r3, #4
 8007eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eee:	4413      	add	r3, r2
 8007ef0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f02:	801a      	strh	r2, [r3, #0]
 8007f04:	e001      	b.n	8007f0a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e02e      	b.n	8007f68 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f0a:	1d3b      	adds	r3, r7, #4
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	463b      	mov	r3, r7
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f24:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007f28:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007f2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f30:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007f34:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007f38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f3c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007f40:	1d3b      	adds	r3, r7, #4
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	463b      	mov	r3, r7
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	441a      	add	r2, r3
 8007f4e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b085      	sub	sp, #20
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	785b      	ldrb	r3, [r3, #1]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d020      	beq.n	8007fc6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f9a:	81bb      	strh	r3, [r7, #12]
 8007f9c:	89bb      	ldrh	r3, [r7, #12]
 8007f9e:	f083 0310 	eor.w	r3, r3, #16
 8007fa2:	81bb      	strh	r3, [r7, #12]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	441a      	add	r2, r3
 8007fae:	89bb      	ldrh	r3, [r7, #12]
 8007fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	8013      	strh	r3, [r2, #0]
 8007fc4:	e01f      	b.n	8008006 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fdc:	81fb      	strh	r3, [r7, #14]
 8007fde:	89fb      	ldrh	r3, [r7, #14]
 8007fe0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007fe4:	81fb      	strh	r3, [r7, #14]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	441a      	add	r2, r3
 8007ff0:	89fb      	ldrh	r3, [r7, #14]
 8007ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008002:	b29b      	uxth	r3, r3
 8008004:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr

08008012 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008012:	b480      	push	{r7}
 8008014:	b087      	sub	sp, #28
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	7b1b      	ldrb	r3, [r3, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	f040 809d 	bne.w	8008160 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	785b      	ldrb	r3, [r3, #1]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d04c      	beq.n	80080c8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	823b      	strh	r3, [r7, #16]
 800803c:	8a3b      	ldrh	r3, [r7, #16]
 800803e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008042:	2b00      	cmp	r3, #0
 8008044:	d01b      	beq.n	800807e <USB_EPClearStall+0x6c>
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	b29b      	uxth	r3, r3
 8008054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805c:	81fb      	strh	r3, [r7, #14]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	441a      	add	r2, r3
 8008068:	89fb      	ldrh	r3, [r7, #14]
 800806a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800806e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008076:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800807a:	b29b      	uxth	r3, r3
 800807c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	78db      	ldrb	r3, [r3, #3]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d06c      	beq.n	8008160 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	b29b      	uxth	r3, r3
 8008094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800809c:	81bb      	strh	r3, [r7, #12]
 800809e:	89bb      	ldrh	r3, [r7, #12]
 80080a0:	f083 0320 	eor.w	r3, r3, #32
 80080a4:	81bb      	strh	r3, [r7, #12]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	441a      	add	r2, r3
 80080b0:	89bb      	ldrh	r3, [r7, #12]
 80080b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	8013      	strh	r3, [r2, #0]
 80080c6:	e04b      	b.n	8008160 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	82fb      	strh	r3, [r7, #22]
 80080d6:	8afb      	ldrh	r3, [r7, #22]
 80080d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01b      	beq.n	8008118 <USB_EPClearStall+0x106>
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f6:	82bb      	strh	r3, [r7, #20]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	441a      	add	r2, r3
 8008102:	8abb      	ldrh	r3, [r7, #20]
 8008104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800810c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008114:	b29b      	uxth	r3, r3
 8008116:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	b29b      	uxth	r3, r3
 8008126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800812a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800812e:	827b      	strh	r3, [r7, #18]
 8008130:	8a7b      	ldrh	r3, [r7, #18]
 8008132:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008136:	827b      	strh	r3, [r7, #18]
 8008138:	8a7b      	ldrh	r3, [r7, #18]
 800813a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800813e:	827b      	strh	r3, [r7, #18]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	441a      	add	r2, r3
 800814a:	8a7b      	ldrh	r3, [r7, #18]
 800814c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800815c:	b29b      	uxth	r3, r3
 800815e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	371c      	adds	r7, #28
 8008166:	46bd      	mov	sp, r7
 8008168:	bc80      	pop	{r7}
 800816a:	4770      	bx	lr

0800816c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d103      	bne.n	8008186 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2280      	movs	r2, #128	; 0x80
 8008182:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr

08008192 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bc80      	pop	{r7}
 80081a4:	4770      	bx	lr

080081a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bc80      	pop	{r7}
 80081b8:	4770      	bx	lr

080081ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b085      	sub	sp, #20
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80081cc:	68fb      	ldr	r3, [r7, #12]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bc80      	pop	{r7}
 80081d6:	4770      	bx	lr

080081d8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bc80      	pop	{r7}
 80081ec:	4770      	bx	lr

080081ee <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b08d      	sub	sp, #52	; 0x34
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	4611      	mov	r1, r2
 80081fa:	461a      	mov	r2, r3
 80081fc:	460b      	mov	r3, r1
 80081fe:	80fb      	strh	r3, [r7, #6]
 8008200:	4613      	mov	r3, r2
 8008202:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008204:	88bb      	ldrh	r3, [r7, #4]
 8008206:	3301      	adds	r3, #1
 8008208:	085b      	lsrs	r3, r3, #1
 800820a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008214:	88fb      	ldrh	r3, [r7, #6]
 8008216:	005a      	lsls	r2, r3, #1
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008220:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008226:	e01e      	b.n	8008266 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	3301      	adds	r3, #1
 8008232:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	b29b      	uxth	r3, r3
 800823a:	021b      	lsls	r3, r3, #8
 800823c:	b29b      	uxth	r3, r3
 800823e:	461a      	mov	r2, r3
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	4313      	orrs	r3, r2
 8008244:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	b29a      	uxth	r2, r3
 800824a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800824e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008250:	3302      	adds	r3, #2
 8008252:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	3302      	adds	r3, #2
 8008258:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	3301      	adds	r3, #1
 800825e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008262:	3b01      	subs	r3, #1
 8008264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1dd      	bne.n	8008228 <USB_WritePMA+0x3a>
  }
}
 800826c:	bf00      	nop
 800826e:	bf00      	nop
 8008270:	3734      	adds	r7, #52	; 0x34
 8008272:	46bd      	mov	sp, r7
 8008274:	bc80      	pop	{r7}
 8008276:	4770      	bx	lr

08008278 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008278:	b480      	push	{r7}
 800827a:	b08b      	sub	sp, #44	; 0x2c
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	4611      	mov	r1, r2
 8008284:	461a      	mov	r2, r3
 8008286:	460b      	mov	r3, r1
 8008288:	80fb      	strh	r3, [r7, #6]
 800828a:	4613      	mov	r3, r2
 800828c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800828e:	88bb      	ldrh	r3, [r7, #4]
 8008290:	085b      	lsrs	r3, r3, #1
 8008292:	b29b      	uxth	r3, r3
 8008294:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800829e:	88fb      	ldrh	r3, [r7, #6]
 80082a0:	005a      	lsls	r2, r3, #1
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082aa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	627b      	str	r3, [r7, #36]	; 0x24
 80082b0:	e01b      	b.n	80082ea <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	3302      	adds	r3, #2
 80082be:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	3301      	adds	r3, #1
 80082cc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	0a1b      	lsrs	r3, r3, #8
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	3301      	adds	r3, #1
 80082dc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80082de:	6a3b      	ldr	r3, [r7, #32]
 80082e0:	3302      	adds	r3, #2
 80082e2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	3b01      	subs	r3, #1
 80082e8:	627b      	str	r3, [r7, #36]	; 0x24
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e0      	bne.n	80082b2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80082f0:	88bb      	ldrh	r3, [r7, #4]
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d007      	beq.n	800830c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	b29b      	uxth	r3, r3
 8008302:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	b2da      	uxtb	r2, r3
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	701a      	strb	r2, [r3, #0]
  }
}
 800830c:	bf00      	nop
 800830e:	372c      	adds	r7, #44	; 0x2c
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	4770      	bx	lr

08008316 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	460b      	mov	r3, r1
 8008320:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	7c1b      	ldrb	r3, [r3, #16]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d115      	bne.n	800835a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800832e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008332:	2202      	movs	r2, #2
 8008334:	2181      	movs	r1, #129	; 0x81
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f004 fdd7 	bl	800ceea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008346:	2202      	movs	r2, #2
 8008348:	2101      	movs	r1, #1
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f004 fdcd 	bl	800ceea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008358:	e012      	b.n	8008380 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800835a:	2340      	movs	r3, #64	; 0x40
 800835c:	2202      	movs	r2, #2
 800835e:	2181      	movs	r1, #129	; 0x81
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f004 fdc2 	bl	800ceea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800836c:	2340      	movs	r3, #64	; 0x40
 800836e:	2202      	movs	r2, #2
 8008370:	2101      	movs	r1, #1
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f004 fdb9 	bl	800ceea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008380:	2308      	movs	r3, #8
 8008382:	2203      	movs	r2, #3
 8008384:	2182      	movs	r1, #130	; 0x82
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f004 fdaf 	bl	800ceea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008392:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008396:	f004 fecf 	bl	800d138 <USBD_static_malloc>
 800839a:	4602      	mov	r2, r0
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d102      	bne.n	80083b2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80083ac:	2301      	movs	r3, #1
 80083ae:	73fb      	strb	r3, [r7, #15]
 80083b0:	e026      	b.n	8008400 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	7c1b      	ldrb	r3, [r3, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d109      	bne.n	80083f0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083e6:	2101      	movs	r1, #1
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f004 fe6f 	bl	800d0cc <USBD_LL_PrepareReceive>
 80083ee:	e007      	b.n	8008400 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083f6:	2340      	movs	r3, #64	; 0x40
 80083f8:	2101      	movs	r1, #1
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f004 fe66 	bl	800d0cc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	460b      	mov	r3, r1
 8008414:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800841a:	2181      	movs	r1, #129	; 0x81
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f004 fd8a 	bl	800cf36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008428:	2101      	movs	r1, #1
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f004 fd83 	bl	800cf36 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008438:	2182      	movs	r1, #130	; 0x82
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f004 fd7b 	bl	800cf36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00e      	beq.n	800846e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008460:	4618      	mov	r0, r3
 8008462:	f004 fe75 	bl	800d150 <USBD_static_free>
    pdev->pClassData = NULL;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800846e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008488:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800848a:	2300      	movs	r3, #0
 800848c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d039      	beq.n	8008516 <USBD_CDC_Setup+0x9e>
 80084a2:	2b20      	cmp	r3, #32
 80084a4:	d17f      	bne.n	80085a6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	88db      	ldrh	r3, [r3, #6]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d029      	beq.n	8008502 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	b25b      	sxtb	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	da11      	bge.n	80084dc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80084c4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	88d2      	ldrh	r2, [r2, #6]
 80084ca:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80084cc:	6939      	ldr	r1, [r7, #16]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	88db      	ldrh	r3, [r3, #6]
 80084d2:	461a      	mov	r2, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 fa0a 	bl	80098ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80084da:	e06b      	b.n	80085b4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	785a      	ldrb	r2, [r3, #1]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	88db      	ldrh	r3, [r3, #6]
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80084f2:	6939      	ldr	r1, [r7, #16]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	88db      	ldrh	r3, [r3, #6]
 80084f8:	461a      	mov	r2, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f001 fa25 	bl	800994a <USBD_CtlPrepareRx>
      break;
 8008500:	e058      	b.n	80085b4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	7850      	ldrb	r0, [r2, #1]
 800850e:	2200      	movs	r2, #0
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	4798      	blx	r3
      break;
 8008514:	e04e      	b.n	80085b4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	785b      	ldrb	r3, [r3, #1]
 800851a:	2b0b      	cmp	r3, #11
 800851c:	d02e      	beq.n	800857c <USBD_CDC_Setup+0x104>
 800851e:	2b0b      	cmp	r3, #11
 8008520:	dc38      	bgt.n	8008594 <USBD_CDC_Setup+0x11c>
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <USBD_CDC_Setup+0xb4>
 8008526:	2b0a      	cmp	r3, #10
 8008528:	d014      	beq.n	8008554 <USBD_CDC_Setup+0xdc>
 800852a:	e033      	b.n	8008594 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008532:	2b03      	cmp	r3, #3
 8008534:	d107      	bne.n	8008546 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008536:	f107 030c 	add.w	r3, r7, #12
 800853a:	2202      	movs	r2, #2
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f001 f9d5 	bl	80098ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008544:	e02e      	b.n	80085a4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 f966 	bl	800981a <USBD_CtlError>
            ret = USBD_FAIL;
 800854e:	2302      	movs	r3, #2
 8008550:	75fb      	strb	r3, [r7, #23]
          break;
 8008552:	e027      	b.n	80085a4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800855a:	2b03      	cmp	r3, #3
 800855c:	d107      	bne.n	800856e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800855e:	f107 030f 	add.w	r3, r7, #15
 8008562:	2201      	movs	r2, #1
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f001 f9c1 	bl	80098ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800856c:	e01a      	b.n	80085a4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f001 f952 	bl	800981a <USBD_CtlError>
            ret = USBD_FAIL;
 8008576:	2302      	movs	r3, #2
 8008578:	75fb      	strb	r3, [r7, #23]
          break;
 800857a:	e013      	b.n	80085a4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008582:	2b03      	cmp	r3, #3
 8008584:	d00d      	beq.n	80085a2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f001 f946 	bl	800981a <USBD_CtlError>
            ret = USBD_FAIL;
 800858e:	2302      	movs	r3, #2
 8008590:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008592:	e006      	b.n	80085a2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 f93f 	bl	800981a <USBD_CtlError>
          ret = USBD_FAIL;
 800859c:	2302      	movs	r3, #2
 800859e:	75fb      	strb	r3, [r7, #23]
          break;
 80085a0:	e000      	b.n	80085a4 <USBD_CDC_Setup+0x12c>
          break;
 80085a2:	bf00      	nop
      }
      break;
 80085a4:	e006      	b.n	80085b4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f001 f936 	bl	800981a <USBD_CtlError>
      ret = USBD_FAIL;
 80085ae:	2302      	movs	r3, #2
 80085b0:	75fb      	strb	r3, [r7, #23]
      break;
 80085b2:	bf00      	nop
  }

  return ret;
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3718      	adds	r7, #24
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	460b      	mov	r3, r1
 80085c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085d8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d03a      	beq.n	800865a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80085e4:	78fa      	ldrb	r2, [r7, #3]
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	4613      	mov	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	440b      	add	r3, r1
 80085f2:	331c      	adds	r3, #28
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d029      	beq.n	800864e <USBD_CDC_DataIn+0x90>
 80085fa:	78fa      	ldrb	r2, [r7, #3]
 80085fc:	6879      	ldr	r1, [r7, #4]
 80085fe:	4613      	mov	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	440b      	add	r3, r1
 8008608:	331c      	adds	r3, #28
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	78f9      	ldrb	r1, [r7, #3]
 800860e:	68b8      	ldr	r0, [r7, #8]
 8008610:	460b      	mov	r3, r1
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	440b      	add	r3, r1
 8008616:	00db      	lsls	r3, r3, #3
 8008618:	4403      	add	r3, r0
 800861a:	3338      	adds	r3, #56	; 0x38
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008622:	fb03 f301 	mul.w	r3, r3, r1
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	d110      	bne.n	800864e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800862c:	78fa      	ldrb	r2, [r7, #3]
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	440b      	add	r3, r1
 800863a:	331c      	adds	r3, #28
 800863c:	2200      	movs	r2, #0
 800863e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008640:	78f9      	ldrb	r1, [r7, #3]
 8008642:	2300      	movs	r3, #0
 8008644:	2200      	movs	r2, #0
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f004 fd1d 	bl	800d086 <USBD_LL_Transmit>
 800864c:	e003      	b.n	8008656 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	e000      	b.n	800865c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800865a:	2302      	movs	r3, #2
  }
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008676:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f004 fd48 	bl	800d112 <USBD_LL_GetRxDataSize>
 8008682:	4602      	mov	r2, r0
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00d      	beq.n	80086b0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80086a8:	4611      	mov	r1, r2
 80086aa:	4798      	blx	r3

    return USBD_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	e000      	b.n	80086b2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80086b0:	2302      	movs	r3, #2
  }
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d015      	beq.n	8008700 <USBD_CDC_EP0_RxReady+0x46>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80086da:	2bff      	cmp	r3, #255	; 0xff
 80086dc:	d010      	beq.n	8008700 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80086ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80086f4:	b292      	uxth	r2, r2
 80086f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	22ff      	movs	r2, #255	; 0xff
 80086fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2243      	movs	r2, #67	; 0x43
 8008718:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800871a:	4b03      	ldr	r3, [pc, #12]	; (8008728 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	bc80      	pop	{r7}
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	200000a0 	.word	0x200000a0

0800872c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2243      	movs	r2, #67	; 0x43
 8008738:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800873a:	4b03      	ldr	r3, [pc, #12]	; (8008748 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	bc80      	pop	{r7}
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	2000005c 	.word	0x2000005c

0800874c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2243      	movs	r2, #67	; 0x43
 8008758:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800875a:	4b03      	ldr	r3, [pc, #12]	; (8008768 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800875c:	4618      	mov	r0, r3
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	200000e4 	.word	0x200000e4

0800876c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	220a      	movs	r2, #10
 8008778:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800877a:	4b03      	ldr	r3, [pc, #12]	; (8008788 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	bc80      	pop	{r7}
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	20000018 	.word	0x20000018

0800878c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008796:	2302      	movs	r3, #2
 8008798:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d005      	beq.n	80087ac <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bc80      	pop	{r7}
 80087b6:	4770      	bx	lr

080087b8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	4613      	mov	r3, r2
 80087c4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087cc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80087d6:	88fa      	ldrh	r2, [r7, #6]
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	371c      	adds	r7, #28
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bc80      	pop	{r7}
 80087e8:	4770      	bx	lr

080087ea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b085      	sub	sp, #20
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087fa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	bc80      	pop	{r7}
 800880e:	4770      	bx	lr

08008810 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800881e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008826:	2b00      	cmp	r3, #0
 8008828:	d01c      	beq.n	8008864 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008830:	2b00      	cmp	r3, #0
 8008832:	d115      	bne.n	8008860 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2201      	movs	r2, #1
 8008838:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008852:	b29b      	uxth	r3, r3
 8008854:	2181      	movs	r1, #129	; 0x81
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f004 fc15 	bl	800d086 <USBD_LL_Transmit>

      return USBD_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	e002      	b.n	8008866 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008860:	2301      	movs	r3, #1
 8008862:	e000      	b.n	8008866 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008864:	2302      	movs	r3, #2
  }
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800887c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008884:	2b00      	cmp	r3, #0
 8008886:	d017      	beq.n	80088b8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	7c1b      	ldrb	r3, [r3, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d109      	bne.n	80088a4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800889a:	2101      	movs	r1, #1
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f004 fc15 	bl	800d0cc <USBD_LL_PrepareReceive>
 80088a2:	e007      	b.n	80088b4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088aa:	2340      	movs	r3, #64	; 0x40
 80088ac:	2101      	movs	r1, #1
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f004 fc0c 	bl	800d0cc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	e000      	b.n	80088ba <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80088b8:	2302      	movs	r3, #2
  }
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	60f8      	str	r0, [r7, #12]
 80088ca:	60b9      	str	r1, [r7, #8]
 80088cc:	4613      	mov	r3, r2
 80088ce:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80088d6:	2302      	movs	r3, #2
 80088d8:	e01a      	b.n	8008910 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	79fa      	ldrb	r2, [r7, #7]
 8008906:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f004 fa79 	bl	800ce00 <USBD_LL_Init>

  return USBD_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d006      	beq.n	800893a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	73fb      	strb	r3, [r7, #15]
 8008938:	e001      	b.n	800893e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800893a:	2302      	movs	r3, #2
 800893c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800893e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	bc80      	pop	{r7}
 8008948:	4770      	bx	lr

0800894a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b082      	sub	sp, #8
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f004 faae 	bl	800ceb4 <USBD_LL_Start>

  return USBD_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	bc80      	pop	{r7}
 8008974:	4770      	bx	lr

08008976 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	460b      	mov	r3, r1
 8008980:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008982:	2302      	movs	r3, #2
 8008984:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00c      	beq.n	80089aa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	78fa      	ldrb	r2, [r7, #3]
 800899a:	4611      	mov	r1, r2
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	4798      	blx	r3
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	78fa      	ldrb	r2, [r7, #3]
 80089ca:	4611      	mov	r1, r2
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	4798      	blx	r3

  return USBD_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b082      	sub	sp, #8
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 fed8 	bl	80097a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a00:	461a      	mov	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008a0e:	f003 031f 	and.w	r3, r3, #31
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d016      	beq.n	8008a44 <USBD_LL_SetupStage+0x6a>
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d81c      	bhi.n	8008a54 <USBD_LL_SetupStage+0x7a>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <USBD_LL_SetupStage+0x4a>
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d008      	beq.n	8008a34 <USBD_LL_SetupStage+0x5a>
 8008a22:	e017      	b.n	8008a54 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 f9cb 	bl	8008dc8 <USBD_StdDevReq>
      break;
 8008a32:	e01a      	b.n	8008a6a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fa2d 	bl	8008e9c <USBD_StdItfReq>
      break;
 8008a42:	e012      	b.n	8008a6a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fa6d 	bl	8008f2c <USBD_StdEPReq>
      break;
 8008a52:	e00a      	b.n	8008a6a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008a5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	4619      	mov	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f004 fa86 	bl	800cf74 <USBD_LL_StallEP>
      break;
 8008a68:	bf00      	nop
  }

  return USBD_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008a82:	7afb      	ldrb	r3, [r7, #11]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d14b      	bne.n	8008b20 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008a8e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d134      	bne.n	8008b04 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d919      	bls.n	8008ada <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	68da      	ldr	r2, [r3, #12]
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	1ad2      	subs	r2, r2, r3
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	68da      	ldr	r2, [r3, #12]
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d203      	bcs.n	8008ac8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	e002      	b.n	8008ace <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	461a      	mov	r2, r3
 8008ad0:	6879      	ldr	r1, [r7, #4]
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 ff57 	bl	8009986 <USBD_CtlContinueRx>
 8008ad8:	e038      	b.n	8008b4c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00a      	beq.n	8008afc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d105      	bne.n	8008afc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 ff54 	bl	80099aa <USBD_CtlSendStatus>
 8008b02:	e023      	b.n	8008b4c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b0a:	2b05      	cmp	r3, #5
 8008b0c:	d11e      	bne.n	8008b4c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008b16:	2100      	movs	r1, #0
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f004 fa2b 	bl	800cf74 <USBD_LL_StallEP>
 8008b1e:	e015      	b.n	8008b4c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00d      	beq.n	8008b48 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	d108      	bne.n	8008b48 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	7afa      	ldrb	r2, [r7, #11]
 8008b40:	4611      	mov	r1, r2
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	4798      	blx	r3
 8008b46:	e001      	b.n	8008b4c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008b48:	2302      	movs	r3, #2
 8008b4a:	e000      	b.n	8008b4e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b086      	sub	sp, #24
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	60f8      	str	r0, [r7, #12]
 8008b5e:	460b      	mov	r3, r1
 8008b60:	607a      	str	r2, [r7, #4]
 8008b62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008b64:	7afb      	ldrb	r3, [r7, #11]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d17f      	bne.n	8008c6a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3314      	adds	r3, #20
 8008b6e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d15c      	bne.n	8008c34 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d915      	bls.n	8008bb2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	1ad2      	subs	r2, r2, r3
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	6879      	ldr	r1, [r7, #4]
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f000 fec1 	bl	8009926 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2100      	movs	r1, #0
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f004 fa8e 	bl	800d0cc <USBD_LL_PrepareReceive>
 8008bb0:	e04e      	b.n	8008c50 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	6912      	ldr	r2, [r2, #16]
 8008bba:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bbe:	fb02 f201 	mul.w	r2, r2, r1
 8008bc2:	1a9b      	subs	r3, r3, r2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d11c      	bne.n	8008c02 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	689a      	ldr	r2, [r3, #8]
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d316      	bcc.n	8008c02 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	689a      	ldr	r2, [r3, #8]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d20f      	bcs.n	8008c02 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008be2:	2200      	movs	r2, #0
 8008be4:	2100      	movs	r1, #0
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 fe9d 	bl	8009926 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f004 fa66 	bl	800d0cc <USBD_LL_PrepareReceive>
 8008c00:	e026      	b.n	8008c50 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c14:	2b03      	cmp	r3, #3
 8008c16:	d105      	bne.n	8008c24 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008c24:	2180      	movs	r1, #128	; 0x80
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f004 f9a4 	bl	800cf74 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 fecf 	bl	80099d0 <USBD_CtlReceiveStatus>
 8008c32:	e00d      	b.n	8008c50 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c3a:	2b04      	cmp	r3, #4
 8008c3c:	d004      	beq.n	8008c48 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d103      	bne.n	8008c50 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008c48:	2180      	movs	r1, #128	; 0x80
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f004 f992 	bl	800cf74 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d11d      	bne.n	8008c96 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f7ff fe81 	bl	8008962 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008c68:	e015      	b.n	8008c96 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00d      	beq.n	8008c92 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d108      	bne.n	8008c92 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	7afa      	ldrb	r2, [r7, #11]
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	4798      	blx	r3
 8008c90:	e001      	b.n	8008c96 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c92:	2302      	movs	r3, #2
 8008c94:	e000      	b.n	8008c98 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ca8:	2340      	movs	r3, #64	; 0x40
 8008caa:	2200      	movs	r2, #0
 8008cac:	2100      	movs	r1, #0
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f004 f91b 	bl	800ceea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2240      	movs	r2, #64	; 0x40
 8008cc0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cc4:	2340      	movs	r3, #64	; 0x40
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	2180      	movs	r1, #128	; 0x80
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f004 f90d 	bl	800ceea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2240      	movs	r2, #64	; 0x40
 8008cda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d009      	beq.n	8008d18 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	6852      	ldr	r2, [r2, #4]
 8008d10:	b2d2      	uxtb	r2, r2
 8008d12:	4611      	mov	r1, r2
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	4798      	blx	r3
  }

  return USBD_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b083      	sub	sp, #12
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	78fa      	ldrb	r2, [r7, #3]
 8008d32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bc80      	pop	{r7}
 8008d3e:	4770      	bx	lr

08008d40 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2204      	movs	r2, #4
 8008d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bc80      	pop	{r7}
 8008d66:	4770      	bx	lr

08008d68 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	d105      	bne.n	8008d86 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bc80      	pop	{r7}
 8008d90:	4770      	bx	lr

08008d92 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b082      	sub	sp, #8
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d10b      	bne.n	8008dbc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008daa:	69db      	ldr	r3, [r3, #28]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d005      	beq.n	8008dbc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db6:	69db      	ldr	r3, [r3, #28]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
	...

08008dc8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dde:	2b40      	cmp	r3, #64	; 0x40
 8008de0:	d005      	beq.n	8008dee <USBD_StdDevReq+0x26>
 8008de2:	2b40      	cmp	r3, #64	; 0x40
 8008de4:	d84f      	bhi.n	8008e86 <USBD_StdDevReq+0xbe>
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d009      	beq.n	8008dfe <USBD_StdDevReq+0x36>
 8008dea:	2b20      	cmp	r3, #32
 8008dec:	d14b      	bne.n	8008e86 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	6839      	ldr	r1, [r7, #0]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	4798      	blx	r3
      break;
 8008dfc:	e048      	b.n	8008e90 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	785b      	ldrb	r3, [r3, #1]
 8008e02:	2b09      	cmp	r3, #9
 8008e04:	d839      	bhi.n	8008e7a <USBD_StdDevReq+0xb2>
 8008e06:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <USBD_StdDevReq+0x44>)
 8008e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0c:	08008e5d 	.word	0x08008e5d
 8008e10:	08008e71 	.word	0x08008e71
 8008e14:	08008e7b 	.word	0x08008e7b
 8008e18:	08008e67 	.word	0x08008e67
 8008e1c:	08008e7b 	.word	0x08008e7b
 8008e20:	08008e3f 	.word	0x08008e3f
 8008e24:	08008e35 	.word	0x08008e35
 8008e28:	08008e7b 	.word	0x08008e7b
 8008e2c:	08008e53 	.word	0x08008e53
 8008e30:	08008e49 	.word	0x08008e49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f9dc 	bl	80091f4 <USBD_GetDescriptor>
          break;
 8008e3c:	e022      	b.n	8008e84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fb3f 	bl	80094c4 <USBD_SetAddress>
          break;
 8008e46:	e01d      	b.n	8008e84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fb7e 	bl	800954c <USBD_SetConfig>
          break;
 8008e50:	e018      	b.n	8008e84 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fc07 	bl	8009668 <USBD_GetConfig>
          break;
 8008e5a:	e013      	b.n	8008e84 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fc37 	bl	80096d2 <USBD_GetStatus>
          break;
 8008e64:	e00e      	b.n	8008e84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fc65 	bl	8009738 <USBD_SetFeature>
          break;
 8008e6e:	e009      	b.n	8008e84 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fc74 	bl	8009760 <USBD_ClrFeature>
          break;
 8008e78:	e004      	b.n	8008e84 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fccc 	bl	800981a <USBD_CtlError>
          break;
 8008e82:	bf00      	nop
      }
      break;
 8008e84:	e004      	b.n	8008e90 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fcc6 	bl	800981a <USBD_CtlError>
      break;
 8008e8e:	bf00      	nop
  }

  return ret;
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop

08008e9c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eb2:	2b40      	cmp	r3, #64	; 0x40
 8008eb4:	d005      	beq.n	8008ec2 <USBD_StdItfReq+0x26>
 8008eb6:	2b40      	cmp	r3, #64	; 0x40
 8008eb8:	d82e      	bhi.n	8008f18 <USBD_StdItfReq+0x7c>
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <USBD_StdItfReq+0x26>
 8008ebe:	2b20      	cmp	r3, #32
 8008ec0:	d12a      	bne.n	8008f18 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d81d      	bhi.n	8008f0a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	889b      	ldrh	r3, [r3, #4]
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d813      	bhi.n	8008f00 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	4798      	blx	r3
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	88db      	ldrh	r3, [r3, #6]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d110      	bne.n	8008f14 <USBD_StdItfReq+0x78>
 8008ef2:	7bfb      	ldrb	r3, [r7, #15]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10d      	bne.n	8008f14 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fd56 	bl	80099aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008efe:	e009      	b.n	8008f14 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fc89 	bl	800981a <USBD_CtlError>
          break;
 8008f08:	e004      	b.n	8008f14 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fc84 	bl	800981a <USBD_CtlError>
          break;
 8008f12:	e000      	b.n	8008f16 <USBD_StdItfReq+0x7a>
          break;
 8008f14:	bf00      	nop
      }
      break;
 8008f16:	e004      	b.n	8008f22 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fc7d 	bl	800981a <USBD_CtlError>
      break;
 8008f20:	bf00      	nop
  }

  return USBD_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	889b      	ldrh	r3, [r3, #4]
 8008f3e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f48:	2b40      	cmp	r3, #64	; 0x40
 8008f4a:	d007      	beq.n	8008f5c <USBD_StdEPReq+0x30>
 8008f4c:	2b40      	cmp	r3, #64	; 0x40
 8008f4e:	f200 8146 	bhi.w	80091de <USBD_StdEPReq+0x2b2>
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00a      	beq.n	8008f6c <USBD_StdEPReq+0x40>
 8008f56:	2b20      	cmp	r3, #32
 8008f58:	f040 8141 	bne.w	80091de <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	6839      	ldr	r1, [r7, #0]
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	4798      	blx	r3
      break;
 8008f6a:	e13d      	b.n	80091e8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f74:	2b20      	cmp	r3, #32
 8008f76:	d10a      	bne.n	8008f8e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	4798      	blx	r3
 8008f86:	4603      	mov	r3, r0
 8008f88:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	e12d      	b.n	80091ea <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	785b      	ldrb	r3, [r3, #1]
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	d007      	beq.n	8008fa6 <USBD_StdEPReq+0x7a>
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	f300 811b 	bgt.w	80091d2 <USBD_StdEPReq+0x2a6>
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d072      	beq.n	8009086 <USBD_StdEPReq+0x15a>
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d03a      	beq.n	800901a <USBD_StdEPReq+0xee>
 8008fa4:	e115      	b.n	80091d2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d002      	beq.n	8008fb6 <USBD_StdEPReq+0x8a>
 8008fb0:	2b03      	cmp	r3, #3
 8008fb2:	d015      	beq.n	8008fe0 <USBD_StdEPReq+0xb4>
 8008fb4:	e02b      	b.n	800900e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fb6:	7bbb      	ldrb	r3, [r7, #14]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00c      	beq.n	8008fd6 <USBD_StdEPReq+0xaa>
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
 8008fbe:	2b80      	cmp	r3, #128	; 0x80
 8008fc0:	d009      	beq.n	8008fd6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f003 ffd4 	bl	800cf74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008fcc:	2180      	movs	r1, #128	; 0x80
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f003 ffd0 	bl	800cf74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fd4:	e020      	b.n	8009018 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fc1e 	bl	800981a <USBD_CtlError>
              break;
 8008fde:	e01b      	b.n	8009018 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	885b      	ldrh	r3, [r3, #2]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10e      	bne.n	8009006 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00b      	beq.n	8009006 <USBD_StdEPReq+0xda>
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
 8008ff0:	2b80      	cmp	r3, #128	; 0x80
 8008ff2:	d008      	beq.n	8009006 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	88db      	ldrh	r3, [r3, #6]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d104      	bne.n	8009006 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f003 ffb7 	bl	800cf74 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fccf 	bl	80099aa <USBD_CtlSendStatus>

              break;
 800900c:	e004      	b.n	8009018 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fc02 	bl	800981a <USBD_CtlError>
              break;
 8009016:	bf00      	nop
          }
          break;
 8009018:	e0e0      	b.n	80091dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009020:	2b02      	cmp	r3, #2
 8009022:	d002      	beq.n	800902a <USBD_StdEPReq+0xfe>
 8009024:	2b03      	cmp	r3, #3
 8009026:	d015      	beq.n	8009054 <USBD_StdEPReq+0x128>
 8009028:	e026      	b.n	8009078 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00c      	beq.n	800904a <USBD_StdEPReq+0x11e>
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	2b80      	cmp	r3, #128	; 0x80
 8009034:	d009      	beq.n	800904a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009036:	7bbb      	ldrb	r3, [r7, #14]
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f003 ff9a 	bl	800cf74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009040:	2180      	movs	r1, #128	; 0x80
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f003 ff96 	bl	800cf74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009048:	e01c      	b.n	8009084 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fbe4 	bl	800981a <USBD_CtlError>
              break;
 8009052:	e017      	b.n	8009084 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	885b      	ldrh	r3, [r3, #2]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d112      	bne.n	8009082 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800905c:	7bbb      	ldrb	r3, [r7, #14]
 800905e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009062:	2b00      	cmp	r3, #0
 8009064:	d004      	beq.n	8009070 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	4619      	mov	r1, r3
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f003 ffa1 	bl	800cfb2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fc9a 	bl	80099aa <USBD_CtlSendStatus>
              }
              break;
 8009076:	e004      	b.n	8009082 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fbcd 	bl	800981a <USBD_CtlError>
              break;
 8009080:	e000      	b.n	8009084 <USBD_StdEPReq+0x158>
              break;
 8009082:	bf00      	nop
          }
          break;
 8009084:	e0aa      	b.n	80091dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800908c:	2b02      	cmp	r3, #2
 800908e:	d002      	beq.n	8009096 <USBD_StdEPReq+0x16a>
 8009090:	2b03      	cmp	r3, #3
 8009092:	d032      	beq.n	80090fa <USBD_StdEPReq+0x1ce>
 8009094:	e097      	b.n	80091c6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009096:	7bbb      	ldrb	r3, [r7, #14]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d007      	beq.n	80090ac <USBD_StdEPReq+0x180>
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	2b80      	cmp	r3, #128	; 0x80
 80090a0:	d004      	beq.n	80090ac <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80090a2:	6839      	ldr	r1, [r7, #0]
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 fbb8 	bl	800981a <USBD_CtlError>
                break;
 80090aa:	e091      	b.n	80091d0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	da0b      	bge.n	80090cc <USBD_StdEPReq+0x1a0>
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090ba:	4613      	mov	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	3310      	adds	r3, #16
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	4413      	add	r3, r2
 80090c8:	3304      	adds	r3, #4
 80090ca:	e00b      	b.n	80090e4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090d2:	4613      	mov	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	4413      	add	r3, r2
 80090e2:	3304      	adds	r3, #4
 80090e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	2200      	movs	r2, #0
 80090ea:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2202      	movs	r2, #2
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fbfb 	bl	80098ee <USBD_CtlSendData>
              break;
 80090f8:	e06a      	b.n	80091d0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da11      	bge.n	8009126 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009102:	7bbb      	ldrb	r3, [r7, #14]
 8009104:	f003 020f 	and.w	r2, r3, #15
 8009108:	6879      	ldr	r1, [r7, #4]
 800910a:	4613      	mov	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	440b      	add	r3, r1
 8009114:	3318      	adds	r3, #24
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d117      	bne.n	800914c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fb7b 	bl	800981a <USBD_CtlError>
                  break;
 8009124:	e054      	b.n	80091d0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009126:	7bbb      	ldrb	r3, [r7, #14]
 8009128:	f003 020f 	and.w	r2, r3, #15
 800912c:	6879      	ldr	r1, [r7, #4]
 800912e:	4613      	mov	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	440b      	add	r3, r1
 8009138:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d104      	bne.n	800914c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fb68 	bl	800981a <USBD_CtlError>
                  break;
 800914a:	e041      	b.n	80091d0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800914c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009150:	2b00      	cmp	r3, #0
 8009152:	da0b      	bge.n	800916c <USBD_StdEPReq+0x240>
 8009154:	7bbb      	ldrb	r3, [r7, #14]
 8009156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800915a:	4613      	mov	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	3310      	adds	r3, #16
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	4413      	add	r3, r2
 8009168:	3304      	adds	r3, #4
 800916a:	e00b      	b.n	8009184 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800916c:	7bbb      	ldrb	r3, [r7, #14]
 800916e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009172:	4613      	mov	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	4413      	add	r3, r2
 8009182:	3304      	adds	r3, #4
 8009184:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009186:	7bbb      	ldrb	r3, [r7, #14]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d002      	beq.n	8009192 <USBD_StdEPReq+0x266>
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	2b80      	cmp	r3, #128	; 0x80
 8009190:	d103      	bne.n	800919a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	e00e      	b.n	80091b8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800919a:	7bbb      	ldrb	r3, [r7, #14]
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f003 ff26 	bl	800cff0 <USBD_LL_IsStallEP>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d003      	beq.n	80091b2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2201      	movs	r2, #1
 80091ae:	601a      	str	r2, [r3, #0]
 80091b0:	e002      	b.n	80091b8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2200      	movs	r2, #0
 80091b6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2202      	movs	r2, #2
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fb95 	bl	80098ee <USBD_CtlSendData>
              break;
 80091c4:	e004      	b.n	80091d0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fb26 	bl	800981a <USBD_CtlError>
              break;
 80091ce:	bf00      	nop
          }
          break;
 80091d0:	e004      	b.n	80091dc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fb20 	bl	800981a <USBD_CtlError>
          break;
 80091da:	bf00      	nop
      }
      break;
 80091dc:	e004      	b.n	80091e8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fb1a 	bl	800981a <USBD_CtlError>
      break;
 80091e6:	bf00      	nop
  }

  return ret;
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	885b      	ldrh	r3, [r3, #2]
 800920e:	0a1b      	lsrs	r3, r3, #8
 8009210:	b29b      	uxth	r3, r3
 8009212:	3b01      	subs	r3, #1
 8009214:	2b06      	cmp	r3, #6
 8009216:	f200 8128 	bhi.w	800946a <USBD_GetDescriptor+0x276>
 800921a:	a201      	add	r2, pc, #4	; (adr r2, 8009220 <USBD_GetDescriptor+0x2c>)
 800921c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009220:	0800923d 	.word	0x0800923d
 8009224:	08009255 	.word	0x08009255
 8009228:	08009295 	.word	0x08009295
 800922c:	0800946b 	.word	0x0800946b
 8009230:	0800946b 	.word	0x0800946b
 8009234:	0800940b 	.word	0x0800940b
 8009238:	08009437 	.word	0x08009437
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	7c12      	ldrb	r2, [r2, #16]
 8009248:	f107 0108 	add.w	r1, r7, #8
 800924c:	4610      	mov	r0, r2
 800924e:	4798      	blx	r3
 8009250:	60f8      	str	r0, [r7, #12]
      break;
 8009252:	e112      	b.n	800947a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	7c1b      	ldrb	r3, [r3, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10d      	bne.n	8009278 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009264:	f107 0208 	add.w	r2, r7, #8
 8009268:	4610      	mov	r0, r2
 800926a:	4798      	blx	r3
 800926c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3301      	adds	r3, #1
 8009272:	2202      	movs	r2, #2
 8009274:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009276:	e100      	b.n	800947a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	f107 0208 	add.w	r2, r7, #8
 8009284:	4610      	mov	r0, r2
 8009286:	4798      	blx	r3
 8009288:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3301      	adds	r3, #1
 800928e:	2202      	movs	r2, #2
 8009290:	701a      	strb	r2, [r3, #0]
      break;
 8009292:	e0f2      	b.n	800947a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	885b      	ldrh	r3, [r3, #2]
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b05      	cmp	r3, #5
 800929c:	f200 80ac 	bhi.w	80093f8 <USBD_GetDescriptor+0x204>
 80092a0:	a201      	add	r2, pc, #4	; (adr r2, 80092a8 <USBD_GetDescriptor+0xb4>)
 80092a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a6:	bf00      	nop
 80092a8:	080092c1 	.word	0x080092c1
 80092ac:	080092f5 	.word	0x080092f5
 80092b0:	08009329 	.word	0x08009329
 80092b4:	0800935d 	.word	0x0800935d
 80092b8:	08009391 	.word	0x08009391
 80092bc:	080093c5 	.word	0x080093c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00b      	beq.n	80092e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	7c12      	ldrb	r2, [r2, #16]
 80092d8:	f107 0108 	add.w	r1, r7, #8
 80092dc:	4610      	mov	r0, r2
 80092de:	4798      	blx	r3
 80092e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092e2:	e091      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fa97 	bl	800981a <USBD_CtlError>
            err++;
 80092ec:	7afb      	ldrb	r3, [r7, #11]
 80092ee:	3301      	adds	r3, #1
 80092f0:	72fb      	strb	r3, [r7, #11]
          break;
 80092f2:	e089      	b.n	8009408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00b      	beq.n	8009318 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	7c12      	ldrb	r2, [r2, #16]
 800930c:	f107 0108 	add.w	r1, r7, #8
 8009310:	4610      	mov	r0, r2
 8009312:	4798      	blx	r3
 8009314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009316:	e077      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fa7d 	bl	800981a <USBD_CtlError>
            err++;
 8009320:	7afb      	ldrb	r3, [r7, #11]
 8009322:	3301      	adds	r3, #1
 8009324:	72fb      	strb	r3, [r7, #11]
          break;
 8009326:	e06f      	b.n	8009408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00b      	beq.n	800934c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	7c12      	ldrb	r2, [r2, #16]
 8009340:	f107 0108 	add.w	r1, r7, #8
 8009344:	4610      	mov	r0, r2
 8009346:	4798      	blx	r3
 8009348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800934a:	e05d      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fa63 	bl	800981a <USBD_CtlError>
            err++;
 8009354:	7afb      	ldrb	r3, [r7, #11]
 8009356:	3301      	adds	r3, #1
 8009358:	72fb      	strb	r3, [r7, #11]
          break;
 800935a:	e055      	b.n	8009408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00b      	beq.n	8009380 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	7c12      	ldrb	r2, [r2, #16]
 8009374:	f107 0108 	add.w	r1, r7, #8
 8009378:	4610      	mov	r0, r2
 800937a:	4798      	blx	r3
 800937c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800937e:	e043      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fa49 	bl	800981a <USBD_CtlError>
            err++;
 8009388:	7afb      	ldrb	r3, [r7, #11]
 800938a:	3301      	adds	r3, #1
 800938c:	72fb      	strb	r3, [r7, #11]
          break;
 800938e:	e03b      	b.n	8009408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00b      	beq.n	80093b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	7c12      	ldrb	r2, [r2, #16]
 80093a8:	f107 0108 	add.w	r1, r7, #8
 80093ac:	4610      	mov	r0, r2
 80093ae:	4798      	blx	r3
 80093b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093b2:	e029      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fa2f 	bl	800981a <USBD_CtlError>
            err++;
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	3301      	adds	r3, #1
 80093c0:	72fb      	strb	r3, [r7, #11]
          break;
 80093c2:	e021      	b.n	8009408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00b      	beq.n	80093e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	7c12      	ldrb	r2, [r2, #16]
 80093dc:	f107 0108 	add.w	r1, r7, #8
 80093e0:	4610      	mov	r0, r2
 80093e2:	4798      	blx	r3
 80093e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093e6:	e00f      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fa15 	bl	800981a <USBD_CtlError>
            err++;
 80093f0:	7afb      	ldrb	r3, [r7, #11]
 80093f2:	3301      	adds	r3, #1
 80093f4:	72fb      	strb	r3, [r7, #11]
          break;
 80093f6:	e007      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fa0d 	bl	800981a <USBD_CtlError>
          err++;
 8009400:	7afb      	ldrb	r3, [r7, #11]
 8009402:	3301      	adds	r3, #1
 8009404:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009406:	e038      	b.n	800947a <USBD_GetDescriptor+0x286>
 8009408:	e037      	b.n	800947a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	7c1b      	ldrb	r3, [r3, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d109      	bne.n	8009426 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941a:	f107 0208 	add.w	r2, r7, #8
 800941e:	4610      	mov	r0, r2
 8009420:	4798      	blx	r3
 8009422:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009424:	e029      	b.n	800947a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f9f6 	bl	800981a <USBD_CtlError>
        err++;
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	3301      	adds	r3, #1
 8009432:	72fb      	strb	r3, [r7, #11]
      break;
 8009434:	e021      	b.n	800947a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	7c1b      	ldrb	r3, [r3, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10d      	bne.n	800945a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009446:	f107 0208 	add.w	r2, r7, #8
 800944a:	4610      	mov	r0, r2
 800944c:	4798      	blx	r3
 800944e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3301      	adds	r3, #1
 8009454:	2207      	movs	r2, #7
 8009456:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009458:	e00f      	b.n	800947a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f9dc 	bl	800981a <USBD_CtlError>
        err++;
 8009462:	7afb      	ldrb	r3, [r7, #11]
 8009464:	3301      	adds	r3, #1
 8009466:	72fb      	strb	r3, [r7, #11]
      break;
 8009468:	e007      	b.n	800947a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f9d4 	bl	800981a <USBD_CtlError>
      err++;
 8009472:	7afb      	ldrb	r3, [r7, #11]
 8009474:	3301      	adds	r3, #1
 8009476:	72fb      	strb	r3, [r7, #11]
      break;
 8009478:	bf00      	nop
  }

  if (err != 0U)
 800947a:	7afb      	ldrb	r3, [r7, #11]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d11c      	bne.n	80094ba <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009480:	893b      	ldrh	r3, [r7, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d011      	beq.n	80094aa <USBD_GetDescriptor+0x2b6>
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	88db      	ldrh	r3, [r3, #6]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00d      	beq.n	80094aa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	88da      	ldrh	r2, [r3, #6]
 8009492:	893b      	ldrh	r3, [r7, #8]
 8009494:	4293      	cmp	r3, r2
 8009496:	bf28      	it	cs
 8009498:	4613      	movcs	r3, r2
 800949a:	b29b      	uxth	r3, r3
 800949c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800949e:	893b      	ldrh	r3, [r7, #8]
 80094a0:	461a      	mov	r2, r3
 80094a2:	68f9      	ldr	r1, [r7, #12]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fa22 	bl	80098ee <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	88db      	ldrh	r3, [r3, #6]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d104      	bne.n	80094bc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fa79 	bl	80099aa <USBD_CtlSendStatus>
 80094b8:	e000      	b.n	80094bc <USBD_GetDescriptor+0x2c8>
    return;
 80094ba:	bf00      	nop
    }
  }
}
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop

080094c4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	889b      	ldrh	r3, [r3, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d130      	bne.n	8009538 <USBD_SetAddress+0x74>
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	88db      	ldrh	r3, [r3, #6]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d12c      	bne.n	8009538 <USBD_SetAddress+0x74>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	885b      	ldrh	r3, [r3, #2]
 80094e2:	2b7f      	cmp	r3, #127	; 0x7f
 80094e4:	d828      	bhi.n	8009538 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	885b      	ldrh	r3, [r3, #2]
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d104      	bne.n	8009506 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f98b 	bl	800981a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009504:	e01d      	b.n	8009542 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	7bfa      	ldrb	r2, [r7, #15]
 800950a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	4619      	mov	r1, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f003 fd98 	bl	800d048 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fa46 	bl	80099aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800951e:	7bfb      	ldrb	r3, [r7, #15]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d004      	beq.n	800952e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800952c:	e009      	b.n	8009542 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009536:	e004      	b.n	8009542 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f96d 	bl	800981a <USBD_CtlError>
  }
}
 8009540:	bf00      	nop
 8009542:	bf00      	nop
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	885b      	ldrh	r3, [r3, #2]
 800955a:	b2da      	uxtb	r2, r3
 800955c:	4b41      	ldr	r3, [pc, #260]	; (8009664 <USBD_SetConfig+0x118>)
 800955e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009560:	4b40      	ldr	r3, [pc, #256]	; (8009664 <USBD_SetConfig+0x118>)
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d904      	bls.n	8009572 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f955 	bl	800981a <USBD_CtlError>
 8009570:	e075      	b.n	800965e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009578:	2b02      	cmp	r3, #2
 800957a:	d002      	beq.n	8009582 <USBD_SetConfig+0x36>
 800957c:	2b03      	cmp	r3, #3
 800957e:	d023      	beq.n	80095c8 <USBD_SetConfig+0x7c>
 8009580:	e062      	b.n	8009648 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009582:	4b38      	ldr	r3, [pc, #224]	; (8009664 <USBD_SetConfig+0x118>)
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d01a      	beq.n	80095c0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800958a:	4b36      	ldr	r3, [pc, #216]	; (8009664 <USBD_SetConfig+0x118>)
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2203      	movs	r2, #3
 8009598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800959c:	4b31      	ldr	r3, [pc, #196]	; (8009664 <USBD_SetConfig+0x118>)
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7ff f9e7 	bl	8008976 <USBD_SetClassConfig>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d104      	bne.n	80095b8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f932 	bl	800981a <USBD_CtlError>
            return;
 80095b6:	e052      	b.n	800965e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f9f6 	bl	80099aa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80095be:	e04e      	b.n	800965e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f9f2 	bl	80099aa <USBD_CtlSendStatus>
        break;
 80095c6:	e04a      	b.n	800965e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80095c8:	4b26      	ldr	r3, [pc, #152]	; (8009664 <USBD_SetConfig+0x118>)
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d112      	bne.n	80095f6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2202      	movs	r2, #2
 80095d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80095d8:	4b22      	ldr	r3, [pc, #136]	; (8009664 <USBD_SetConfig+0x118>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	461a      	mov	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80095e2:	4b20      	ldr	r3, [pc, #128]	; (8009664 <USBD_SetConfig+0x118>)
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	4619      	mov	r1, r3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f7ff f9e3 	bl	80089b4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f9db 	bl	80099aa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80095f4:	e033      	b.n	800965e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80095f6:	4b1b      	ldr	r3, [pc, #108]	; (8009664 <USBD_SetConfig+0x118>)
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	461a      	mov	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	429a      	cmp	r2, r3
 8009602:	d01d      	beq.n	8009640 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	4619      	mov	r1, r3
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7ff f9d1 	bl	80089b4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009612:	4b14      	ldr	r3, [pc, #80]	; (8009664 <USBD_SetConfig+0x118>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800961c:	4b11      	ldr	r3, [pc, #68]	; (8009664 <USBD_SetConfig+0x118>)
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	4619      	mov	r1, r3
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7ff f9a7 	bl	8008976 <USBD_SetClassConfig>
 8009628:	4603      	mov	r3, r0
 800962a:	2b02      	cmp	r3, #2
 800962c:	d104      	bne.n	8009638 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f8f2 	bl	800981a <USBD_CtlError>
            return;
 8009636:	e012      	b.n	800965e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f9b6 	bl	80099aa <USBD_CtlSendStatus>
        break;
 800963e:	e00e      	b.n	800965e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f9b2 	bl	80099aa <USBD_CtlSendStatus>
        break;
 8009646:	e00a      	b.n	800965e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f8e5 	bl	800981a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009650:	4b04      	ldr	r3, [pc, #16]	; (8009664 <USBD_SetConfig+0x118>)
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	4619      	mov	r1, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff f9ac 	bl	80089b4 <USBD_ClrClassConfig>
        break;
 800965c:	bf00      	nop
    }
  }
}
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	200001ad 	.word	0x200001ad

08009668 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	88db      	ldrh	r3, [r3, #6]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d004      	beq.n	8009684 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f8cc 	bl	800981a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009682:	e022      	b.n	80096ca <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800968a:	2b02      	cmp	r3, #2
 800968c:	dc02      	bgt.n	8009694 <USBD_GetConfig+0x2c>
 800968e:	2b00      	cmp	r3, #0
 8009690:	dc03      	bgt.n	800969a <USBD_GetConfig+0x32>
 8009692:	e015      	b.n	80096c0 <USBD_GetConfig+0x58>
 8009694:	2b03      	cmp	r3, #3
 8009696:	d00b      	beq.n	80096b0 <USBD_GetConfig+0x48>
 8009698:	e012      	b.n	80096c0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	3308      	adds	r3, #8
 80096a4:	2201      	movs	r2, #1
 80096a6:	4619      	mov	r1, r3
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f920 	bl	80098ee <USBD_CtlSendData>
        break;
 80096ae:	e00c      	b.n	80096ca <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3304      	adds	r3, #4
 80096b4:	2201      	movs	r2, #1
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f918 	bl	80098ee <USBD_CtlSendData>
        break;
 80096be:	e004      	b.n	80096ca <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f8a9 	bl	800981a <USBD_CtlError>
        break;
 80096c8:	bf00      	nop
}
 80096ca:	bf00      	nop
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b082      	sub	sp, #8
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096e2:	3b01      	subs	r3, #1
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d81e      	bhi.n	8009726 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	88db      	ldrh	r3, [r3, #6]
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d004      	beq.n	80096fa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f891 	bl	800981a <USBD_CtlError>
        break;
 80096f8:	e01a      	b.n	8009730 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2201      	movs	r2, #1
 80096fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009706:	2b00      	cmp	r3, #0
 8009708:	d005      	beq.n	8009716 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	f043 0202 	orr.w	r2, r3, #2
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	330c      	adds	r3, #12
 800971a:	2202      	movs	r2, #2
 800971c:	4619      	mov	r1, r3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f8e5 	bl	80098ee <USBD_CtlSendData>
      break;
 8009724:	e004      	b.n	8009730 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f876 	bl	800981a <USBD_CtlError>
      break;
 800972e:	bf00      	nop
  }
}
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	885b      	ldrh	r3, [r3, #2]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d106      	bne.n	8009758 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f929 	bl	80099aa <USBD_CtlSendStatus>
  }
}
 8009758:	bf00      	nop
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009770:	3b01      	subs	r3, #1
 8009772:	2b02      	cmp	r3, #2
 8009774:	d80b      	bhi.n	800978e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	885b      	ldrh	r3, [r3, #2]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d10c      	bne.n	8009798 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f90f 	bl	80099aa <USBD_CtlSendStatus>
      }
      break;
 800978c:	e004      	b.n	8009798 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f842 	bl	800981a <USBD_CtlError>
      break;
 8009796:	e000      	b.n	800979a <USBD_ClrFeature+0x3a>
      break;
 8009798:	bf00      	nop
  }
}
 800979a:	bf00      	nop
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097a2:	b480      	push	{r7}
 80097a4:	b083      	sub	sp, #12
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	781a      	ldrb	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	785a      	ldrb	r2, [r3, #1]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	3302      	adds	r3, #2
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	3303      	adds	r3, #3
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	021b      	lsls	r3, r3, #8
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	4413      	add	r3, r2
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	3304      	adds	r3, #4
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	b29a      	uxth	r2, r3
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	3305      	adds	r3, #5
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	021b      	lsls	r3, r3, #8
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	4413      	add	r3, r2
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	3306      	adds	r3, #6
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	3307      	adds	r3, #7
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	b29b      	uxth	r3, r3
 8009804:	021b      	lsls	r3, r3, #8
 8009806:	b29b      	uxth	r3, r3
 8009808:	4413      	add	r3, r2
 800980a:	b29a      	uxth	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	80da      	strh	r2, [r3, #6]

}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	bc80      	pop	{r7}
 8009818:	4770      	bx	lr

0800981a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009824:	2180      	movs	r1, #128	; 0x80
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f003 fba4 	bl	800cf74 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800982c:	2100      	movs	r1, #0
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f003 fba0 	bl	800cf74 <USBD_LL_StallEP>
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009848:	2300      	movs	r3, #0
 800984a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d032      	beq.n	80098b8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 f834 	bl	80098c0 <USBD_GetLen>
 8009858:	4603      	mov	r3, r0
 800985a:	3301      	adds	r3, #1
 800985c:	b29b      	uxth	r3, r3
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	b29a      	uxth	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009866:	7dfb      	ldrb	r3, [r7, #23]
 8009868:	1c5a      	adds	r2, r3, #1
 800986a:	75fa      	strb	r2, [r7, #23]
 800986c:	461a      	mov	r2, r3
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	4413      	add	r3, r2
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	7812      	ldrb	r2, [r2, #0]
 8009876:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009878:	7dfb      	ldrb	r3, [r7, #23]
 800987a:	1c5a      	adds	r2, r3, #1
 800987c:	75fa      	strb	r2, [r7, #23]
 800987e:	461a      	mov	r2, r3
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	4413      	add	r3, r2
 8009884:	2203      	movs	r2, #3
 8009886:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009888:	e012      	b.n	80098b0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	1c5a      	adds	r2, r3, #1
 800988e:	60fa      	str	r2, [r7, #12]
 8009890:	7dfa      	ldrb	r2, [r7, #23]
 8009892:	1c51      	adds	r1, r2, #1
 8009894:	75f9      	strb	r1, [r7, #23]
 8009896:	4611      	mov	r1, r2
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	440a      	add	r2, r1
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	75fa      	strb	r2, [r7, #23]
 80098a6:	461a      	mov	r2, r3
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	4413      	add	r3, r2
 80098ac:	2200      	movs	r2, #0
 80098ae:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1e8      	bne.n	800988a <USBD_GetString+0x4e>
    }
  }
}
 80098b8:	bf00      	nop
 80098ba:	3718      	adds	r7, #24
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80098c8:	2300      	movs	r3, #0
 80098ca:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80098cc:	e005      	b.n	80098da <USBD_GetLen+0x1a>
  {
    len++;
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	3301      	adds	r3, #1
 80098d2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3301      	adds	r3, #1
 80098d8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1f5      	bne.n	80098ce <USBD_GetLen+0xe>
  }

  return len;
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bc80      	pop	{r7}
 80098ec:	4770      	bx	lr

080098ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	4613      	mov	r3, r2
 80098fa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2202      	movs	r2, #2
 8009900:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009904:	88fa      	ldrh	r2, [r7, #6]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800990a:	88fa      	ldrh	r2, [r7, #6]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009910:	88fb      	ldrh	r3, [r7, #6]
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	2100      	movs	r1, #0
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f003 fbb5 	bl	800d086 <USBD_LL_Transmit>

  return USBD_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b084      	sub	sp, #16
 800992a:	af00      	add	r7, sp, #0
 800992c:	60f8      	str	r0, [r7, #12]
 800992e:	60b9      	str	r1, [r7, #8]
 8009930:	4613      	mov	r3, r2
 8009932:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009934:	88fb      	ldrh	r3, [r7, #6]
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	2100      	movs	r1, #0
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f003 fba3 	bl	800d086 <USBD_LL_Transmit>

  return USBD_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	60f8      	str	r0, [r7, #12]
 8009952:	60b9      	str	r1, [r7, #8]
 8009954:	4613      	mov	r3, r2
 8009956:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2203      	movs	r2, #3
 800995c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009960:	88fa      	ldrh	r2, [r7, #6]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009968:	88fa      	ldrh	r2, [r7, #6]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009970:	88fb      	ldrh	r3, [r7, #6]
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	2100      	movs	r1, #0
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f003 fba8 	bl	800d0cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	60f8      	str	r0, [r7, #12]
 800998e:	60b9      	str	r1, [r7, #8]
 8009990:	4613      	mov	r3, r2
 8009992:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009994:	88fb      	ldrh	r3, [r7, #6]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	2100      	movs	r1, #0
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f003 fb96 	bl	800d0cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b082      	sub	sp, #8
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2204      	movs	r2, #4
 80099b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099ba:	2300      	movs	r3, #0
 80099bc:	2200      	movs	r2, #0
 80099be:	2100      	movs	r1, #0
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f003 fb60 	bl	800d086 <USBD_LL_Transmit>

  return USBD_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2205      	movs	r2, #5
 80099dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099e0:	2300      	movs	r3, #0
 80099e2:	2200      	movs	r2, #0
 80099e4:	2100      	movs	r1, #0
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f003 fb70 	bl	800d0cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099fe:	f3ef 8305 	mrs	r3, IPSR
 8009a02:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10f      	bne.n	8009a2a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8009a0e:	607b      	str	r3, [r7, #4]
  return(result);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d109      	bne.n	8009a2a <osKernelInitialize+0x32>
 8009a16:	4b10      	ldr	r3, [pc, #64]	; (8009a58 <osKernelInitialize+0x60>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d109      	bne.n	8009a32 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8009a22:	603b      	str	r3, [r7, #0]
  return(result);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d003      	beq.n	8009a32 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009a2a:	f06f 0305 	mvn.w	r3, #5
 8009a2e:	60fb      	str	r3, [r7, #12]
 8009a30:	e00c      	b.n	8009a4c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a32:	4b09      	ldr	r3, [pc, #36]	; (8009a58 <osKernelInitialize+0x60>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d105      	bne.n	8009a46 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009a3a:	4b07      	ldr	r3, [pc, #28]	; (8009a58 <osKernelInitialize+0x60>)
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	60fb      	str	r3, [r7, #12]
 8009a44:	e002      	b.n	8009a4c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009a46:	f04f 33ff 	mov.w	r3, #4294967295
 8009a4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bc80      	pop	{r7}
 8009a56:	4770      	bx	lr
 8009a58:	200001b0 	.word	0x200001b0

08009a5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a62:	f3ef 8305 	mrs	r3, IPSR
 8009a66:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10f      	bne.n	8009a8e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8009a72:	607b      	str	r3, [r7, #4]
  return(result);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d109      	bne.n	8009a8e <osKernelStart+0x32>
 8009a7a:	4b11      	ldr	r3, [pc, #68]	; (8009ac0 <osKernelStart+0x64>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	d109      	bne.n	8009a96 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a82:	f3ef 8311 	mrs	r3, BASEPRI
 8009a86:	603b      	str	r3, [r7, #0]
  return(result);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <osKernelStart+0x3a>
    stat = osErrorISR;
 8009a8e:	f06f 0305 	mvn.w	r3, #5
 8009a92:	60fb      	str	r3, [r7, #12]
 8009a94:	e00e      	b.n	8009ab4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8009a96:	4b0a      	ldr	r3, [pc, #40]	; (8009ac0 <osKernelStart+0x64>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d107      	bne.n	8009aae <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8009a9e:	4b08      	ldr	r3, [pc, #32]	; (8009ac0 <osKernelStart+0x64>)
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009aa4:	f001 f9ba 	bl	800ae1c <vTaskStartScheduler>
      stat = osOK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]
 8009aac:	e002      	b.n	8009ab4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8009aae:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	200001b0 	.word	0x200001b0

08009ac4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b092      	sub	sp, #72	; 0x48
 8009ac8:	af04      	add	r7, sp, #16
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ad4:	f3ef 8305 	mrs	r3, IPSR
 8009ad8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f040 8094 	bne.w	8009c0a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ae6:	623b      	str	r3, [r7, #32]
  return(result);
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f040 808d 	bne.w	8009c0a <osThreadNew+0x146>
 8009af0:	4b48      	ldr	r3, [pc, #288]	; (8009c14 <osThreadNew+0x150>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d106      	bne.n	8009b06 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009af8:	f3ef 8311 	mrs	r3, BASEPRI
 8009afc:	61fb      	str	r3, [r7, #28]
  return(result);
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f040 8082 	bne.w	8009c0a <osThreadNew+0x146>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d07e      	beq.n	8009c0a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8009b0c:	2380      	movs	r3, #128	; 0x80
 8009b0e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8009b10:	2318      	movs	r3, #24
 8009b12:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8009b14:	2300      	movs	r3, #0
 8009b16:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8009b18:	f107 031b 	add.w	r3, r7, #27
 8009b1c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8009b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b22:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d045      	beq.n	8009bb6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d002      	beq.n	8009b38 <osThreadNew+0x74>
        name = attr->name;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d002      	beq.n	8009b46 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d008      	beq.n	8009b5e <osThreadNew+0x9a>
 8009b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4e:	2b38      	cmp	r3, #56	; 0x38
 8009b50:	d805      	bhi.n	8009b5e <osThreadNew+0x9a>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <osThreadNew+0x9e>
        return (NULL);
 8009b5e:	2300      	movs	r3, #0
 8009b60:	e054      	b.n	8009c0c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d003      	beq.n	8009b72 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	089b      	lsrs	r3, r3, #2
 8009b70:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00e      	beq.n	8009b98 <osThreadNew+0xd4>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	2b5b      	cmp	r3, #91	; 0x5b
 8009b80:	d90a      	bls.n	8009b98 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d006      	beq.n	8009b98 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d002      	beq.n	8009b98 <osThreadNew+0xd4>
        mem = 1;
 8009b92:	2301      	movs	r3, #1
 8009b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b96:	e010      	b.n	8009bba <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10c      	bne.n	8009bba <osThreadNew+0xf6>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d108      	bne.n	8009bba <osThreadNew+0xf6>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d104      	bne.n	8009bba <osThreadNew+0xf6>
          mem = 0;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bb4:	e001      	b.n	8009bba <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d110      	bne.n	8009be2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009bc8:	9202      	str	r2, [sp, #8]
 8009bca:	9301      	str	r3, [sp, #4]
 8009bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 fed6 	bl	800a988 <xTaskCreateStatic>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	617b      	str	r3, [r7, #20]
 8009be0:	e013      	b.n	8009c0a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8009be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d110      	bne.n	8009c0a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	f107 0314 	add.w	r3, r7, #20
 8009bf0:	9301      	str	r3, [sp, #4]
 8009bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f000 ff20 	bl	800aa40 <xTaskCreate>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d001      	beq.n	8009c0a <osThreadNew+0x146>
          hTask = NULL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c0a:	697b      	ldr	r3, [r7, #20]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3738      	adds	r7, #56	; 0x38
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	200001b0 	.word	0x200001b0

08009c18 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c20:	f3ef 8305 	mrs	r3, IPSR
 8009c24:	613b      	str	r3, [r7, #16]
  return(result);
 8009c26:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10f      	bne.n	8009c4c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8009c30:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d109      	bne.n	8009c4c <osDelay+0x34>
 8009c38:	4b0d      	ldr	r3, [pc, #52]	; (8009c70 <osDelay+0x58>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d109      	bne.n	8009c54 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c40:	f3ef 8311 	mrs	r3, BASEPRI
 8009c44:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d003      	beq.n	8009c54 <osDelay+0x3c>
    stat = osErrorISR;
 8009c4c:	f06f 0305 	mvn.w	r3, #5
 8009c50:	617b      	str	r3, [r7, #20]
 8009c52:	e007      	b.n	8009c64 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009c54:	2300      	movs	r3, #0
 8009c56:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f001 f8a8 	bl	800adb4 <vTaskDelay>
    }
  }

  return (stat);
 8009c64:	697b      	ldr	r3, [r7, #20]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	200001b0 	.word	0x200001b0

08009c74 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b08c      	sub	sp, #48	; 0x30
 8009c78:	af02      	add	r7, sp, #8
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009c80:	2300      	movs	r3, #0
 8009c82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c84:	f3ef 8305 	mrs	r3, IPSR
 8009c88:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c8a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d16f      	bne.n	8009d70 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c90:	f3ef 8310 	mrs	r3, PRIMASK
 8009c94:	617b      	str	r3, [r7, #20]
  return(result);
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d169      	bne.n	8009d70 <osMessageQueueNew+0xfc>
 8009c9c:	4b37      	ldr	r3, [pc, #220]	; (8009d7c <osMessageQueueNew+0x108>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d105      	bne.n	8009cb0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ca4:	f3ef 8311 	mrs	r3, BASEPRI
 8009ca8:	613b      	str	r3, [r7, #16]
  return(result);
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d15f      	bne.n	8009d70 <osMessageQueueNew+0xfc>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d05c      	beq.n	8009d70 <osMessageQueueNew+0xfc>
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d059      	beq.n	8009d70 <osMessageQueueNew+0xfc>
    mem = -1;
 8009cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d029      	beq.n	8009d1c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d012      	beq.n	8009cf6 <osMessageQueueNew+0x82>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	2b4f      	cmp	r3, #79	; 0x4f
 8009cd6:	d90e      	bls.n	8009cf6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00a      	beq.n	8009cf6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	695a      	ldr	r2, [r3, #20]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	68b9      	ldr	r1, [r7, #8]
 8009ce8:	fb01 f303 	mul.w	r3, r1, r3
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d302      	bcc.n	8009cf6 <osMessageQueueNew+0x82>
        mem = 1;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	623b      	str	r3, [r7, #32]
 8009cf4:	e014      	b.n	8009d20 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d110      	bne.n	8009d20 <osMessageQueueNew+0xac>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10c      	bne.n	8009d20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d108      	bne.n	8009d20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d104      	bne.n	8009d20 <osMessageQueueNew+0xac>
          mem = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	623b      	str	r3, [r7, #32]
 8009d1a:	e001      	b.n	8009d20 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d10b      	bne.n	8009d3e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	691a      	ldr	r2, [r3, #16]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	2100      	movs	r1, #0
 8009d30:	9100      	str	r1, [sp, #0]
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f000 f96d 	bl	800a014 <xQueueGenericCreateStatic>
 8009d3a:	6278      	str	r0, [r7, #36]	; 0x24
 8009d3c:	e008      	b.n	8009d50 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8009d3e:	6a3b      	ldr	r3, [r7, #32]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d105      	bne.n	8009d50 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009d44:	2200      	movs	r2, #0
 8009d46:	68b9      	ldr	r1, [r7, #8]
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f000 f9da 	bl	800a102 <xQueueGenericCreate>
 8009d4e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00c      	beq.n	8009d70 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <osMessageQueueNew+0xf0>
        name = attr->name;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	61fb      	str	r3, [r7, #28]
 8009d62:	e001      	b.n	8009d68 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8009d64:	2300      	movs	r3, #0
 8009d66:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009d68:	69f9      	ldr	r1, [r7, #28]
 8009d6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d6c:	f000 fdb0 	bl	800a8d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3728      	adds	r7, #40	; 0x28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	200001b0 	.word	0x200001b0

08009d80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4a06      	ldr	r2, [pc, #24]	; (8009da8 <vApplicationGetIdleTaskMemory+0x28>)
 8009d90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	4a05      	ldr	r2, [pc, #20]	; (8009dac <vApplicationGetIdleTaskMemory+0x2c>)
 8009d96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2280      	movs	r2, #128	; 0x80
 8009d9c:	601a      	str	r2, [r3, #0]
}
 8009d9e:	bf00      	nop
 8009da0:	3714      	adds	r7, #20
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bc80      	pop	{r7}
 8009da6:	4770      	bx	lr
 8009da8:	200001b4 	.word	0x200001b4
 8009dac:	20000210 	.word	0x20000210

08009db0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4a07      	ldr	r2, [pc, #28]	; (8009ddc <vApplicationGetTimerTaskMemory+0x2c>)
 8009dc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	4a06      	ldr	r2, [pc, #24]	; (8009de0 <vApplicationGetTimerTaskMemory+0x30>)
 8009dc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dce:	601a      	str	r2, [r3, #0]
}
 8009dd0:	bf00      	nop
 8009dd2:	3714      	adds	r7, #20
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bc80      	pop	{r7}
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	20000410 	.word	0x20000410
 8009de0:	2000046c 	.word	0x2000046c

08009de4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f103 0208 	add.w	r2, r3, #8
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f103 0208 	add.w	r2, r3, #8
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f103 0208 	add.w	r2, r3, #8
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bc80      	pop	{r7}
 8009e20:	4770      	bx	lr

08009e22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bc80      	pop	{r7}
 8009e38:	4770      	bx	lr

08009e3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	689a      	ldr	r2, [r3, #8]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	1c5a      	adds	r2, r3, #1
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	601a      	str	r2, [r3, #0]
}
 8009e76:	bf00      	nop
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bc80      	pop	{r7}
 8009e7e:	4770      	bx	lr

08009e80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e96:	d103      	bne.n	8009ea0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	60fb      	str	r3, [r7, #12]
 8009e9e:	e00c      	b.n	8009eba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3308      	adds	r3, #8
 8009ea4:	60fb      	str	r3, [r7, #12]
 8009ea6:	e002      	b.n	8009eae <vListInsert+0x2e>
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	60fb      	str	r3, [r7, #12]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d2f6      	bcs.n	8009ea8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	683a      	ldr	r2, [r7, #0]
 8009ed4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	601a      	str	r2, [r3, #0]
}
 8009ee6:	bf00      	nop
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bc80      	pop	{r7}
 8009eee:	4770      	bx	lr

08009ef0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	6892      	ldr	r2, [r2, #8]
 8009f06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	6852      	ldr	r2, [r2, #4]
 8009f10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d103      	bne.n	8009f24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	689a      	ldr	r2, [r3, #8]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	1e5a      	subs	r2, r3, #1
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3714      	adds	r7, #20
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bc80      	pop	{r7}
 8009f40:	4770      	bx	lr
	...

08009f44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10a      	bne.n	8009f6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f6a:	bf00      	nop
 8009f6c:	e7fe      	b.n	8009f6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f6e:	f002 f995 	bl	800c29c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7a:	68f9      	ldr	r1, [r7, #12]
 8009f7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f7e:	fb01 f303 	mul.w	r3, r1, r3
 8009f82:	441a      	add	r2, r3
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	68f9      	ldr	r1, [r7, #12]
 8009fa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fa4:	fb01 f303 	mul.w	r3, r1, r3
 8009fa8:	441a      	add	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	22ff      	movs	r2, #255	; 0xff
 8009fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	22ff      	movs	r2, #255	; 0xff
 8009fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d114      	bne.n	8009fee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d01a      	beq.n	800a002 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	3310      	adds	r3, #16
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f001 f9ad 	bl	800b330 <xTaskRemoveFromEventList>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d012      	beq.n	800a002 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009fdc:	4b0c      	ldr	r3, [pc, #48]	; (800a010 <xQueueGenericReset+0xcc>)
 8009fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	e009      	b.n	800a002 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3310      	adds	r3, #16
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7ff fef6 	bl	8009de4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	3324      	adds	r3, #36	; 0x24
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7ff fef1 	bl	8009de4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a002:	f002 f97b 	bl	800c2fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a006:	2301      	movs	r3, #1
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	e000ed04 	.word	0xe000ed04

0800a014 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a014:	b580      	push	{r7, lr}
 800a016:	b08e      	sub	sp, #56	; 0x38
 800a018:	af02      	add	r7, sp, #8
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
 800a020:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10a      	bne.n	800a03e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a03a:	bf00      	nop
 800a03c:	e7fe      	b.n	800a03c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10a      	bne.n	800a05a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a056:	bf00      	nop
 800a058:	e7fe      	b.n	800a058 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d002      	beq.n	800a066 <xQueueGenericCreateStatic+0x52>
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <xQueueGenericCreateStatic+0x56>
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <xQueueGenericCreateStatic+0x58>
 800a06a:	2300      	movs	r3, #0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	623b      	str	r3, [r7, #32]
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d102      	bne.n	800a092 <xQueueGenericCreateStatic+0x7e>
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d101      	bne.n	800a096 <xQueueGenericCreateStatic+0x82>
 800a092:	2301      	movs	r3, #1
 800a094:	e000      	b.n	800a098 <xQueueGenericCreateStatic+0x84>
 800a096:	2300      	movs	r3, #0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10a      	bne.n	800a0b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	61fb      	str	r3, [r7, #28]
}
 800a0ae:	bf00      	nop
 800a0b0:	e7fe      	b.n	800a0b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0b2:	2350      	movs	r3, #80	; 0x50
 800a0b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	2b50      	cmp	r3, #80	; 0x50
 800a0ba:	d00a      	beq.n	800a0d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	61bb      	str	r3, [r7, #24]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00d      	beq.n	800a0f8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0e4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	68b9      	ldr	r1, [r7, #8]
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f000 f843 	bl	800a17e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3730      	adds	r7, #48	; 0x30
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a102:	b580      	push	{r7, lr}
 800a104:	b08a      	sub	sp, #40	; 0x28
 800a106:	af02      	add	r7, sp, #8
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	60b9      	str	r1, [r7, #8]
 800a10c:	4613      	mov	r3, r2
 800a10e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d10a      	bne.n	800a12c <xQueueGenericCreate+0x2a>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	613b      	str	r3, [r7, #16]
}
 800a128:	bf00      	nop
 800a12a:	e7fe      	b.n	800a12a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d102      	bne.n	800a138 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a132:	2300      	movs	r3, #0
 800a134:	61fb      	str	r3, [r7, #28]
 800a136:	e004      	b.n	800a142 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	fb02 f303 	mul.w	r3, r2, r3
 800a140:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	3350      	adds	r3, #80	; 0x50
 800a146:	4618      	mov	r0, r3
 800a148:	f002 f9a8 	bl	800c49c <pvPortMalloc>
 800a14c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00f      	beq.n	800a174 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	3350      	adds	r3, #80	; 0x50
 800a158:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a162:	79fa      	ldrb	r2, [r7, #7]
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	4613      	mov	r3, r2
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	68b9      	ldr	r1, [r7, #8]
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f000 f805 	bl	800a17e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a174:	69bb      	ldr	r3, [r7, #24]
	}
 800a176:	4618      	mov	r0, r3
 800a178:	3720      	adds	r7, #32
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b084      	sub	sp, #16
 800a182:	af00      	add	r7, sp, #0
 800a184:	60f8      	str	r0, [r7, #12]
 800a186:	60b9      	str	r1, [r7, #8]
 800a188:	607a      	str	r2, [r7, #4]
 800a18a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d103      	bne.n	800a19a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	e002      	b.n	800a1a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	69b8      	ldr	r0, [r7, #24]
 800a1b0:	f7ff fec8 	bl	8009f44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	78fa      	ldrb	r2, [r7, #3]
 800a1b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1bc:	bf00      	nop
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08e      	sub	sp, #56	; 0x38
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
 800a1d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10a      	bne.n	800a1f6 <xQueueGenericSend+0x32>
	__asm volatile
 800a1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1f2:	bf00      	nop
 800a1f4:	e7fe      	b.n	800a1f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d103      	bne.n	800a204 <xQueueGenericSend+0x40>
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <xQueueGenericSend+0x44>
 800a204:	2301      	movs	r3, #1
 800a206:	e000      	b.n	800a20a <xQueueGenericSend+0x46>
 800a208:	2300      	movs	r3, #0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10a      	bne.n	800a224 <xQueueGenericSend+0x60>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a220:	bf00      	nop
 800a222:	e7fe      	b.n	800a222 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	2b02      	cmp	r3, #2
 800a228:	d103      	bne.n	800a232 <xQueueGenericSend+0x6e>
 800a22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d101      	bne.n	800a236 <xQueueGenericSend+0x72>
 800a232:	2301      	movs	r3, #1
 800a234:	e000      	b.n	800a238 <xQueueGenericSend+0x74>
 800a236:	2300      	movs	r3, #0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10a      	bne.n	800a252 <xQueueGenericSend+0x8e>
	__asm volatile
 800a23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	623b      	str	r3, [r7, #32]
}
 800a24e:	bf00      	nop
 800a250:	e7fe      	b.n	800a250 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a252:	f001 fa67 	bl	800b724 <xTaskGetSchedulerState>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d102      	bne.n	800a262 <xQueueGenericSend+0x9e>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <xQueueGenericSend+0xa2>
 800a262:	2301      	movs	r3, #1
 800a264:	e000      	b.n	800a268 <xQueueGenericSend+0xa4>
 800a266:	2300      	movs	r3, #0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10a      	bne.n	800a282 <xQueueGenericSend+0xbe>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	61fb      	str	r3, [r7, #28]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a282:	f002 f80b 	bl	800c29c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28e:	429a      	cmp	r2, r3
 800a290:	d302      	bcc.n	800a298 <xQueueGenericSend+0xd4>
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b02      	cmp	r3, #2
 800a296:	d129      	bne.n	800a2ec <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a298:	683a      	ldr	r2, [r7, #0]
 800a29a:	68b9      	ldr	r1, [r7, #8]
 800a29c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a29e:	f000 fa07 	bl	800a6b0 <prvCopyDataToQueue>
 800a2a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d010      	beq.n	800a2ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	3324      	adds	r3, #36	; 0x24
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f001 f83d 	bl	800b330 <xTaskRemoveFromEventList>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d013      	beq.n	800a2e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a2bc:	4b3f      	ldr	r3, [pc, #252]	; (800a3bc <xQueueGenericSend+0x1f8>)
 800a2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	f3bf 8f4f 	dsb	sy
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	e00a      	b.n	800a2e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d007      	beq.n	800a2e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a2d4:	4b39      	ldr	r3, [pc, #228]	; (800a3bc <xQueueGenericSend+0x1f8>)
 800a2d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2da:	601a      	str	r2, [r3, #0]
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a2e4:	f002 f80a 	bl	800c2fc <vPortExitCritical>
				return pdPASS;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e063      	b.n	800a3b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d103      	bne.n	800a2fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2f2:	f002 f803 	bl	800c2fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	e05c      	b.n	800a3b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d106      	bne.n	800a30e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a300:	f107 0314 	add.w	r3, r7, #20
 800a304:	4618      	mov	r0, r3
 800a306:	f001 f877 	bl	800b3f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a30a:	2301      	movs	r3, #1
 800a30c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a30e:	f001 fff5 	bl	800c2fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a312:	f000 fde9 	bl	800aee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a316:	f001 ffc1 	bl	800c29c <vPortEnterCritical>
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a320:	b25b      	sxtb	r3, r3
 800a322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a326:	d103      	bne.n	800a330 <xQueueGenericSend+0x16c>
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a336:	b25b      	sxtb	r3, r3
 800a338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33c:	d103      	bne.n	800a346 <xQueueGenericSend+0x182>
 800a33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a346:	f001 ffd9 	bl	800c2fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a34a:	1d3a      	adds	r2, r7, #4
 800a34c:	f107 0314 	add.w	r3, r7, #20
 800a350:	4611      	mov	r1, r2
 800a352:	4618      	mov	r0, r3
 800a354:	f001 f866 	bl	800b424 <xTaskCheckForTimeOut>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d124      	bne.n	800a3a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a35e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a360:	f000 fa9e 	bl	800a8a0 <prvIsQueueFull>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d018      	beq.n	800a39c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	3310      	adds	r3, #16
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	4611      	mov	r1, r2
 800a372:	4618      	mov	r0, r3
 800a374:	f000 ff8c 	bl	800b290 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a37a:	f000 fa29 	bl	800a7d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a37e:	f000 fdc1 	bl	800af04 <xTaskResumeAll>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	f47f af7c 	bne.w	800a282 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a38a:	4b0c      	ldr	r3, [pc, #48]	; (800a3bc <xQueueGenericSend+0x1f8>)
 800a38c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a390:	601a      	str	r2, [r3, #0]
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	e772      	b.n	800a282 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a39c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a39e:	f000 fa17 	bl	800a7d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3a2:	f000 fdaf 	bl	800af04 <xTaskResumeAll>
 800a3a6:	e76c      	b.n	800a282 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a3a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3aa:	f000 fa11 	bl	800a7d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3ae:	f000 fda9 	bl	800af04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a3b2:	2300      	movs	r3, #0
		}
	}
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3738      	adds	r7, #56	; 0x38
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	e000ed04 	.word	0xe000ed04

0800a3c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b08e      	sub	sp, #56	; 0x38
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
 800a3cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d10a      	bne.n	800a3ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3dc:	f383 8811 	msr	BASEPRI, r3
 800a3e0:	f3bf 8f6f 	isb	sy
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3ea:	bf00      	nop
 800a3ec:	e7fe      	b.n	800a3ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d103      	bne.n	800a3fc <xQueueGenericSendFromISR+0x3c>
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <xQueueGenericSendFromISR+0x40>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e000      	b.n	800a402 <xQueueGenericSendFromISR+0x42>
 800a400:	2300      	movs	r3, #0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10a      	bne.n	800a41c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40a:	f383 8811 	msr	BASEPRI, r3
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	f3bf 8f4f 	dsb	sy
 800a416:	623b      	str	r3, [r7, #32]
}
 800a418:	bf00      	nop
 800a41a:	e7fe      	b.n	800a41a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d103      	bne.n	800a42a <xQueueGenericSendFromISR+0x6a>
 800a422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a426:	2b01      	cmp	r3, #1
 800a428:	d101      	bne.n	800a42e <xQueueGenericSendFromISR+0x6e>
 800a42a:	2301      	movs	r3, #1
 800a42c:	e000      	b.n	800a430 <xQueueGenericSendFromISR+0x70>
 800a42e:	2300      	movs	r3, #0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	61fb      	str	r3, [r7, #28]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a44a:	f001 ffe9 	bl	800c420 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a44e:	f3ef 8211 	mrs	r2, BASEPRI
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	61ba      	str	r2, [r7, #24]
 800a464:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a466:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a468:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a472:	429a      	cmp	r2, r3
 800a474:	d302      	bcc.n	800a47c <xQueueGenericSendFromISR+0xbc>
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d12c      	bne.n	800a4d6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	68b9      	ldr	r1, [r7, #8]
 800a48a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a48c:	f000 f910 	bl	800a6b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a490:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a498:	d112      	bne.n	800a4c0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d016      	beq.n	800a4d0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	3324      	adds	r3, #36	; 0x24
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 ff42 	bl	800b330 <xTaskRemoveFromEventList>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00e      	beq.n	800a4d0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00b      	beq.n	800a4d0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	e007      	b.n	800a4d0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a4c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	b25a      	sxtb	r2, r3
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a4d4:	e001      	b.n	800a4da <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	637b      	str	r3, [r7, #52]	; 0x34
 800a4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4dc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a4e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3738      	adds	r7, #56	; 0x38
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b08c      	sub	sp, #48	; 0x30
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10a      	bne.n	800a520 <xQueueReceive+0x30>
	__asm volatile
 800a50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	623b      	str	r3, [r7, #32]
}
 800a51c:	bf00      	nop
 800a51e:	e7fe      	b.n	800a51e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d103      	bne.n	800a52e <xQueueReceive+0x3e>
 800a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <xQueueReceive+0x42>
 800a52e:	2301      	movs	r3, #1
 800a530:	e000      	b.n	800a534 <xQueueReceive+0x44>
 800a532:	2300      	movs	r3, #0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10a      	bne.n	800a54e <xQueueReceive+0x5e>
	__asm volatile
 800a538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	61fb      	str	r3, [r7, #28]
}
 800a54a:	bf00      	nop
 800a54c:	e7fe      	b.n	800a54c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a54e:	f001 f8e9 	bl	800b724 <xTaskGetSchedulerState>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d102      	bne.n	800a55e <xQueueReceive+0x6e>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d101      	bne.n	800a562 <xQueueReceive+0x72>
 800a55e:	2301      	movs	r3, #1
 800a560:	e000      	b.n	800a564 <xQueueReceive+0x74>
 800a562:	2300      	movs	r3, #0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10a      	bne.n	800a57e <xQueueReceive+0x8e>
	__asm volatile
 800a568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	61bb      	str	r3, [r7, #24]
}
 800a57a:	bf00      	nop
 800a57c:	e7fe      	b.n	800a57c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a57e:	f001 fe8d 	bl	800c29c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a586:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d01f      	beq.n	800a5ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a58e:	68b9      	ldr	r1, [r7, #8]
 800a590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a592:	f000 f8f7 	bl	800a784 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a598:	1e5a      	subs	r2, r3, #1
 800a59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00f      	beq.n	800a5c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a8:	3310      	adds	r3, #16
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 fec0 	bl	800b330 <xTaskRemoveFromEventList>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d007      	beq.n	800a5c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a5b6:	4b3d      	ldr	r3, [pc, #244]	; (800a6ac <xQueueReceive+0x1bc>)
 800a5b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a5c6:	f001 fe99 	bl	800c2fc <vPortExitCritical>
				return pdPASS;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e069      	b.n	800a6a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d103      	bne.n	800a5dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5d4:	f001 fe92 	bl	800c2fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	e062      	b.n	800a6a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d106      	bne.n	800a5f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5e2:	f107 0310 	add.w	r3, r7, #16
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 ff06 	bl	800b3f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5f0:	f001 fe84 	bl	800c2fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5f4:	f000 fc78 	bl	800aee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5f8:	f001 fe50 	bl	800c29c <vPortEnterCritical>
 800a5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a602:	b25b      	sxtb	r3, r3
 800a604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a608:	d103      	bne.n	800a612 <xQueueReceive+0x122>
 800a60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a618:	b25b      	sxtb	r3, r3
 800a61a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a61e:	d103      	bne.n	800a628 <xQueueReceive+0x138>
 800a620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a628:	f001 fe68 	bl	800c2fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a62c:	1d3a      	adds	r2, r7, #4
 800a62e:	f107 0310 	add.w	r3, r7, #16
 800a632:	4611      	mov	r1, r2
 800a634:	4618      	mov	r0, r3
 800a636:	f000 fef5 	bl	800b424 <xTaskCheckForTimeOut>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d123      	bne.n	800a688 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a642:	f000 f917 	bl	800a874 <prvIsQueueEmpty>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d017      	beq.n	800a67c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64e:	3324      	adds	r3, #36	; 0x24
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	4611      	mov	r1, r2
 800a654:	4618      	mov	r0, r3
 800a656:	f000 fe1b 	bl	800b290 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a65a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a65c:	f000 f8b8 	bl	800a7d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a660:	f000 fc50 	bl	800af04 <xTaskResumeAll>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d189      	bne.n	800a57e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a66a:	4b10      	ldr	r3, [pc, #64]	; (800a6ac <xQueueReceive+0x1bc>)
 800a66c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a670:	601a      	str	r2, [r3, #0]
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	e780      	b.n	800a57e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a67c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a67e:	f000 f8a7 	bl	800a7d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a682:	f000 fc3f 	bl	800af04 <xTaskResumeAll>
 800a686:	e77a      	b.n	800a57e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a68a:	f000 f8a1 	bl	800a7d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a68e:	f000 fc39 	bl	800af04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a694:	f000 f8ee 	bl	800a874 <prvIsQueueEmpty>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f43f af6f 	beq.w	800a57e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3730      	adds	r7, #48	; 0x30
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	e000ed04 	.word	0xe000ed04

0800a6b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10d      	bne.n	800a6ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d14d      	bne.n	800a772 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f001 f840 	bl	800b760 <xTaskPriorityDisinherit>
 800a6e0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	605a      	str	r2, [r3, #4]
 800a6e8:	e043      	b.n	800a772 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d119      	bne.n	800a724 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6898      	ldr	r0, [r3, #8]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	68b9      	ldr	r1, [r7, #8]
 800a6fc:	f002 fd8c 	bl	800d218 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	689a      	ldr	r2, [r3, #8]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a708:	441a      	add	r2, r3
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	689a      	ldr	r2, [r3, #8]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	429a      	cmp	r2, r3
 800a718:	d32b      	bcc.n	800a772 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	609a      	str	r2, [r3, #8]
 800a722:	e026      	b.n	800a772 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	68d8      	ldr	r0, [r3, #12]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72c:	461a      	mov	r2, r3
 800a72e:	68b9      	ldr	r1, [r7, #8]
 800a730:	f002 fd72 	bl	800d218 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	68da      	ldr	r2, [r3, #12]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73c:	425b      	negs	r3, r3
 800a73e:	441a      	add	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	68da      	ldr	r2, [r3, #12]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d207      	bcs.n	800a760 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	685a      	ldr	r2, [r3, #4]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a758:	425b      	negs	r3, r3
 800a75a:	441a      	add	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b02      	cmp	r3, #2
 800a764:	d105      	bne.n	800a772 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	3b01      	subs	r3, #1
 800a770:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	1c5a      	adds	r2, r3, #1
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a77a:	697b      	ldr	r3, [r7, #20]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3718      	adds	r7, #24
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a792:	2b00      	cmp	r3, #0
 800a794:	d018      	beq.n	800a7c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68da      	ldr	r2, [r3, #12]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79e:	441a      	add	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68da      	ldr	r2, [r3, #12]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d303      	bcc.n	800a7b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68d9      	ldr	r1, [r3, #12]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	6838      	ldr	r0, [r7, #0]
 800a7c4:	f002 fd28 	bl	800d218 <memcpy>
	}
}
 800a7c8:	bf00      	nop
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a7d8:	f001 fd60 	bl	800c29c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7e4:	e011      	b.n	800a80a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d012      	beq.n	800a814 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	3324      	adds	r3, #36	; 0x24
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 fd9c 	bl	800b330 <xTaskRemoveFromEventList>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a7fe:	f000 fe73 	bl	800b4e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a802:	7bfb      	ldrb	r3, [r7, #15]
 800a804:	3b01      	subs	r3, #1
 800a806:	b2db      	uxtb	r3, r3
 800a808:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a80a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	dce9      	bgt.n	800a7e6 <prvUnlockQueue+0x16>
 800a812:	e000      	b.n	800a816 <prvUnlockQueue+0x46>
					break;
 800a814:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	22ff      	movs	r2, #255	; 0xff
 800a81a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a81e:	f001 fd6d 	bl	800c2fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a822:	f001 fd3b 	bl	800c29c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a82c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a82e:	e011      	b.n	800a854 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d012      	beq.n	800a85e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	3310      	adds	r3, #16
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 fd77 	bl	800b330 <xTaskRemoveFromEventList>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d001      	beq.n	800a84c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a848:	f000 fe4e 	bl	800b4e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	3b01      	subs	r3, #1
 800a850:	b2db      	uxtb	r3, r3
 800a852:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	dce9      	bgt.n	800a830 <prvUnlockQueue+0x60>
 800a85c:	e000      	b.n	800a860 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a85e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	22ff      	movs	r2, #255	; 0xff
 800a864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a868:	f001 fd48 	bl	800c2fc <vPortExitCritical>
}
 800a86c:	bf00      	nop
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a87c:	f001 fd0e 	bl	800c29c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a884:	2b00      	cmp	r3, #0
 800a886:	d102      	bne.n	800a88e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a888:	2301      	movs	r3, #1
 800a88a:	60fb      	str	r3, [r7, #12]
 800a88c:	e001      	b.n	800a892 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a88e:	2300      	movs	r3, #0
 800a890:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a892:	f001 fd33 	bl	800c2fc <vPortExitCritical>

	return xReturn;
 800a896:	68fb      	ldr	r3, [r7, #12]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8a8:	f001 fcf8 	bl	800c29c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d102      	bne.n	800a8be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	e001      	b.n	800a8c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8c2:	f001 fd1b 	bl	800c2fc <vPortExitCritical>

	return xReturn;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8da:	2300      	movs	r3, #0
 800a8dc:	60fb      	str	r3, [r7, #12]
 800a8de:	e014      	b.n	800a90a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a8e0:	4a0e      	ldr	r2, [pc, #56]	; (800a91c <vQueueAddToRegistry+0x4c>)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10b      	bne.n	800a904 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a8ec:	490b      	ldr	r1, [pc, #44]	; (800a91c <vQueueAddToRegistry+0x4c>)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a8f6:	4a09      	ldr	r2, [pc, #36]	; (800a91c <vQueueAddToRegistry+0x4c>)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	4413      	add	r3, r2
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a902:	e006      	b.n	800a912 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	3301      	adds	r3, #1
 800a908:	60fb      	str	r3, [r7, #12]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2b07      	cmp	r3, #7
 800a90e:	d9e7      	bls.n	800a8e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a910:	bf00      	nop
 800a912:	bf00      	nop
 800a914:	3714      	adds	r7, #20
 800a916:	46bd      	mov	sp, r7
 800a918:	bc80      	pop	{r7}
 800a91a:	4770      	bx	lr
 800a91c:	200022b4 	.word	0x200022b4

0800a920 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a930:	f001 fcb4 	bl	800c29c <vPortEnterCritical>
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a93a:	b25b      	sxtb	r3, r3
 800a93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a940:	d103      	bne.n	800a94a <vQueueWaitForMessageRestricted+0x2a>
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	2200      	movs	r2, #0
 800a946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a950:	b25b      	sxtb	r3, r3
 800a952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a956:	d103      	bne.n	800a960 <vQueueWaitForMessageRestricted+0x40>
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a960:	f001 fccc 	bl	800c2fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d106      	bne.n	800a97a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	3324      	adds	r3, #36	; 0x24
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	68b9      	ldr	r1, [r7, #8]
 800a974:	4618      	mov	r0, r3
 800a976:	f000 fcaf 	bl	800b2d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a97a:	6978      	ldr	r0, [r7, #20]
 800a97c:	f7ff ff28 	bl	800a7d0 <prvUnlockQueue>
	}
 800a980:	bf00      	nop
 800a982:	3718      	adds	r7, #24
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b08e      	sub	sp, #56	; 0x38
 800a98c:	af04      	add	r7, sp, #16
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
 800a994:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10a      	bne.n	800a9b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a0:	f383 8811 	msr	BASEPRI, r3
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	623b      	str	r3, [r7, #32]
}
 800a9ae:	bf00      	nop
 800a9b0:	e7fe      	b.n	800a9b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d10a      	bne.n	800a9ce <xTaskCreateStatic+0x46>
	__asm volatile
 800a9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9bc:	f383 8811 	msr	BASEPRI, r3
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	61fb      	str	r3, [r7, #28]
}
 800a9ca:	bf00      	nop
 800a9cc:	e7fe      	b.n	800a9cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a9ce:	235c      	movs	r3, #92	; 0x5c
 800a9d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	2b5c      	cmp	r3, #92	; 0x5c
 800a9d6:	d00a      	beq.n	800a9ee <xTaskCreateStatic+0x66>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	61bb      	str	r3, [r7, #24]
}
 800a9ea:	bf00      	nop
 800a9ec:	e7fe      	b.n	800a9ec <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d01e      	beq.n	800aa32 <xTaskCreateStatic+0xaa>
 800a9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d01b      	beq.n	800aa32 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa02:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	2202      	movs	r2, #2
 800aa08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	9303      	str	r3, [sp, #12]
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	9302      	str	r3, [sp, #8]
 800aa14:	f107 0314 	add.w	r3, r7, #20
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	68b9      	ldr	r1, [r7, #8]
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 f850 	bl	800aaca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa2c:	f000 f8d4 	bl	800abd8 <prvAddNewTaskToReadyList>
 800aa30:	e001      	b.n	800aa36 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa36:	697b      	ldr	r3, [r7, #20]
	}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3728      	adds	r7, #40	; 0x28
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b08c      	sub	sp, #48	; 0x30
 800aa44:	af04      	add	r7, sp, #16
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	603b      	str	r3, [r7, #0]
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa50:	88fb      	ldrh	r3, [r7, #6]
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f001 fd21 	bl	800c49c <pvPortMalloc>
 800aa5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00e      	beq.n	800aa80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800aa62:	205c      	movs	r0, #92	; 0x5c
 800aa64:	f001 fd1a 	bl	800c49c <pvPortMalloc>
 800aa68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d003      	beq.n	800aa78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	631a      	str	r2, [r3, #48]	; 0x30
 800aa76:	e005      	b.n	800aa84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa78:	6978      	ldr	r0, [r7, #20]
 800aa7a:	f001 fdd3 	bl	800c624 <vPortFree>
 800aa7e:	e001      	b.n	800aa84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa80:	2300      	movs	r3, #0
 800aa82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d017      	beq.n	800aaba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa92:	88fa      	ldrh	r2, [r7, #6]
 800aa94:	2300      	movs	r3, #0
 800aa96:	9303      	str	r3, [sp, #12]
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	9302      	str	r3, [sp, #8]
 800aa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9e:	9301      	str	r3, [sp, #4]
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	68b9      	ldr	r1, [r7, #8]
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f000 f80e 	bl	800aaca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aaae:	69f8      	ldr	r0, [r7, #28]
 800aab0:	f000 f892 	bl	800abd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aab4:	2301      	movs	r3, #1
 800aab6:	61bb      	str	r3, [r7, #24]
 800aab8:	e002      	b.n	800aac0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aaba:	f04f 33ff 	mov.w	r3, #4294967295
 800aabe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aac0:	69bb      	ldr	r3, [r7, #24]
	}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3720      	adds	r7, #32
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b088      	sub	sp, #32
 800aace:	af00      	add	r7, sp, #0
 800aad0:	60f8      	str	r0, [r7, #12]
 800aad2:	60b9      	str	r1, [r7, #8]
 800aad4:	607a      	str	r2, [r7, #4]
 800aad6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aada:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	461a      	mov	r2, r3
 800aae2:	21a5      	movs	r1, #165	; 0xa5
 800aae4:	f002 fbc0 	bl	800d268 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	4413      	add	r3, r2
 800aaf8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	f023 0307 	bic.w	r3, r3, #7
 800ab00:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	f003 0307 	and.w	r3, r3, #7
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00a      	beq.n	800ab22 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	617b      	str	r3, [r7, #20]
}
 800ab1e:	bf00      	nop
 800ab20:	e7fe      	b.n	800ab20 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab22:	2300      	movs	r3, #0
 800ab24:	61fb      	str	r3, [r7, #28]
 800ab26:	e012      	b.n	800ab4e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	7819      	ldrb	r1, [r3, #0]
 800ab30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	4413      	add	r3, r2
 800ab36:	3334      	adds	r3, #52	; 0x34
 800ab38:	460a      	mov	r2, r1
 800ab3a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	4413      	add	r3, r2
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d006      	beq.n	800ab56 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	61fb      	str	r3, [r7, #28]
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	2b0f      	cmp	r3, #15
 800ab52:	d9e9      	bls.n	800ab28 <prvInitialiseNewTask+0x5e>
 800ab54:	e000      	b.n	800ab58 <prvInitialiseNewTask+0x8e>
		{
			break;
 800ab56:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab62:	2b37      	cmp	r3, #55	; 0x37
 800ab64:	d901      	bls.n	800ab6a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab66:	2337      	movs	r3, #55	; 0x37
 800ab68:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab6e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab74:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab78:	2200      	movs	r2, #0
 800ab7a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7e:	3304      	adds	r3, #4
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7ff f94e 	bl	8009e22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	3318      	adds	r3, #24
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff f949 	bl	8009e22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab94:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aba4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	2200      	movs	r2, #0
 800abaa:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800abac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	68f9      	ldr	r1, [r7, #12]
 800abb8:	69b8      	ldr	r0, [r7, #24]
 800abba:	f001 fa81 	bl	800c0c0 <pxPortInitialiseStack>
 800abbe:	4602      	mov	r2, r0
 800abc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800abc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d002      	beq.n	800abd0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800abca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abd0:	bf00      	nop
 800abd2:	3720      	adds	r7, #32
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800abe0:	f001 fb5c 	bl	800c29c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800abe4:	4b2d      	ldr	r3, [pc, #180]	; (800ac9c <prvAddNewTaskToReadyList+0xc4>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	3301      	adds	r3, #1
 800abea:	4a2c      	ldr	r2, [pc, #176]	; (800ac9c <prvAddNewTaskToReadyList+0xc4>)
 800abec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800abee:	4b2c      	ldr	r3, [pc, #176]	; (800aca0 <prvAddNewTaskToReadyList+0xc8>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d109      	bne.n	800ac0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abf6:	4a2a      	ldr	r2, [pc, #168]	; (800aca0 <prvAddNewTaskToReadyList+0xc8>)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800abfc:	4b27      	ldr	r3, [pc, #156]	; (800ac9c <prvAddNewTaskToReadyList+0xc4>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d110      	bne.n	800ac26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac04:	f000 fc94 	bl	800b530 <prvInitialiseTaskLists>
 800ac08:	e00d      	b.n	800ac26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac0a:	4b26      	ldr	r3, [pc, #152]	; (800aca4 <prvAddNewTaskToReadyList+0xcc>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d109      	bne.n	800ac26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac12:	4b23      	ldr	r3, [pc, #140]	; (800aca0 <prvAddNewTaskToReadyList+0xc8>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d802      	bhi.n	800ac26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac20:	4a1f      	ldr	r2, [pc, #124]	; (800aca0 <prvAddNewTaskToReadyList+0xc8>)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac26:	4b20      	ldr	r3, [pc, #128]	; (800aca8 <prvAddNewTaskToReadyList+0xd0>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	4a1e      	ldr	r2, [pc, #120]	; (800aca8 <prvAddNewTaskToReadyList+0xd0>)
 800ac2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac30:	4b1d      	ldr	r3, [pc, #116]	; (800aca8 <prvAddNewTaskToReadyList+0xd0>)
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac3c:	4b1b      	ldr	r3, [pc, #108]	; (800acac <prvAddNewTaskToReadyList+0xd4>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d903      	bls.n	800ac4c <prvAddNewTaskToReadyList+0x74>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac48:	4a18      	ldr	r2, [pc, #96]	; (800acac <prvAddNewTaskToReadyList+0xd4>)
 800ac4a:	6013      	str	r3, [r2, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac50:	4613      	mov	r3, r2
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	4413      	add	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4a15      	ldr	r2, [pc, #84]	; (800acb0 <prvAddNewTaskToReadyList+0xd8>)
 800ac5a:	441a      	add	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	3304      	adds	r3, #4
 800ac60:	4619      	mov	r1, r3
 800ac62:	4610      	mov	r0, r2
 800ac64:	f7ff f8e9 	bl	8009e3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac68:	f001 fb48 	bl	800c2fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac6c:	4b0d      	ldr	r3, [pc, #52]	; (800aca4 <prvAddNewTaskToReadyList+0xcc>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00e      	beq.n	800ac92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac74:	4b0a      	ldr	r3, [pc, #40]	; (800aca0 <prvAddNewTaskToReadyList+0xc8>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d207      	bcs.n	800ac92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac82:	4b0c      	ldr	r3, [pc, #48]	; (800acb4 <prvAddNewTaskToReadyList+0xdc>)
 800ac84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac88:	601a      	str	r2, [r3, #0]
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac92:	bf00      	nop
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20000d40 	.word	0x20000d40
 800aca0:	2000086c 	.word	0x2000086c
 800aca4:	20000d4c 	.word	0x20000d4c
 800aca8:	20000d5c 	.word	0x20000d5c
 800acac:	20000d48 	.word	0x20000d48
 800acb0:	20000870 	.word	0x20000870
 800acb4:	e000ed04 	.word	0xe000ed04

0800acb8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b08a      	sub	sp, #40	; 0x28
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800acc2:	2300      	movs	r3, #0
 800acc4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10a      	bne.n	800ace2 <vTaskDelayUntil+0x2a>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	617b      	str	r3, [r7, #20]
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10a      	bne.n	800acfe <vTaskDelayUntil+0x46>
	__asm volatile
 800ace8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acec:	f383 8811 	msr	BASEPRI, r3
 800acf0:	f3bf 8f6f 	isb	sy
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	613b      	str	r3, [r7, #16]
}
 800acfa:	bf00      	nop
 800acfc:	e7fe      	b.n	800acfc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800acfe:	4b2a      	ldr	r3, [pc, #168]	; (800ada8 <vTaskDelayUntil+0xf0>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00a      	beq.n	800ad1c <vTaskDelayUntil+0x64>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	60fb      	str	r3, [r7, #12]
}
 800ad18:	bf00      	nop
 800ad1a:	e7fe      	b.n	800ad1a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800ad1c:	f000 f8e4 	bl	800aee8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ad20:	4b22      	ldr	r3, [pc, #136]	; (800adac <vTaskDelayUntil+0xf4>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	683a      	ldr	r2, [r7, #0]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6a3a      	ldr	r2, [r7, #32]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d20b      	bcs.n	800ad52 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	69fa      	ldr	r2, [r7, #28]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d211      	bcs.n	800ad68 <vTaskDelayUntil+0xb0>
 800ad44:	69fa      	ldr	r2, [r7, #28]
 800ad46:	6a3b      	ldr	r3, [r7, #32]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d90d      	bls.n	800ad68 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ad50:	e00a      	b.n	800ad68 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	69fa      	ldr	r2, [r7, #28]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d303      	bcc.n	800ad64 <vTaskDelayUntil+0xac>
 800ad5c:	69fa      	ldr	r2, [r7, #28]
 800ad5e:	6a3b      	ldr	r3, [r7, #32]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d901      	bls.n	800ad68 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ad64:	2301      	movs	r3, #1
 800ad66:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	69fa      	ldr	r2, [r7, #28]
 800ad6c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ad6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d006      	beq.n	800ad82 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ad74:	69fa      	ldr	r2, [r7, #28]
 800ad76:	6a3b      	ldr	r3, [r7, #32]
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f000 fe39 	bl	800b9f4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ad82:	f000 f8bf 	bl	800af04 <xTaskResumeAll>
 800ad86:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d107      	bne.n	800ad9e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800ad8e:	4b08      	ldr	r3, [pc, #32]	; (800adb0 <vTaskDelayUntil+0xf8>)
 800ad90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad94:	601a      	str	r2, [r3, #0]
 800ad96:	f3bf 8f4f 	dsb	sy
 800ad9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad9e:	bf00      	nop
 800ada0:	3728      	adds	r7, #40	; 0x28
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	20000d68 	.word	0x20000d68
 800adac:	20000d44 	.word	0x20000d44
 800adb0:	e000ed04 	.word	0xe000ed04

0800adb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800adbc:	2300      	movs	r3, #0
 800adbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d017      	beq.n	800adf6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800adc6:	4b13      	ldr	r3, [pc, #76]	; (800ae14 <vTaskDelay+0x60>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00a      	beq.n	800ade4 <vTaskDelay+0x30>
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	60bb      	str	r3, [r7, #8]
}
 800ade0:	bf00      	nop
 800ade2:	e7fe      	b.n	800ade2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ade4:	f000 f880 	bl	800aee8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ade8:	2100      	movs	r1, #0
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fe02 	bl	800b9f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800adf0:	f000 f888 	bl	800af04 <xTaskResumeAll>
 800adf4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d107      	bne.n	800ae0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800adfc:	4b06      	ldr	r3, [pc, #24]	; (800ae18 <vTaskDelay+0x64>)
 800adfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	f3bf 8f4f 	dsb	sy
 800ae08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae0c:	bf00      	nop
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	20000d68 	.word	0x20000d68
 800ae18:	e000ed04 	.word	0xe000ed04

0800ae1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b08a      	sub	sp, #40	; 0x28
 800ae20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae22:	2300      	movs	r3, #0
 800ae24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae26:	2300      	movs	r3, #0
 800ae28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae2a:	463a      	mov	r2, r7
 800ae2c:	1d39      	adds	r1, r7, #4
 800ae2e:	f107 0308 	add.w	r3, r7, #8
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fe ffa4 	bl	8009d80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	9202      	str	r2, [sp, #8]
 800ae40:	9301      	str	r3, [sp, #4]
 800ae42:	2300      	movs	r3, #0
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	2300      	movs	r3, #0
 800ae48:	460a      	mov	r2, r1
 800ae4a:	4921      	ldr	r1, [pc, #132]	; (800aed0 <vTaskStartScheduler+0xb4>)
 800ae4c:	4821      	ldr	r0, [pc, #132]	; (800aed4 <vTaskStartScheduler+0xb8>)
 800ae4e:	f7ff fd9b 	bl	800a988 <xTaskCreateStatic>
 800ae52:	4603      	mov	r3, r0
 800ae54:	4a20      	ldr	r2, [pc, #128]	; (800aed8 <vTaskStartScheduler+0xbc>)
 800ae56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae58:	4b1f      	ldr	r3, [pc, #124]	; (800aed8 <vTaskStartScheduler+0xbc>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d002      	beq.n	800ae66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae60:	2301      	movs	r3, #1
 800ae62:	617b      	str	r3, [r7, #20]
 800ae64:	e001      	b.n	800ae6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d102      	bne.n	800ae76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae70:	f000 fe14 	bl	800ba9c <xTimerCreateTimerTask>
 800ae74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d116      	bne.n	800aeaa <vTaskStartScheduler+0x8e>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	613b      	str	r3, [r7, #16]
}
 800ae8e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae90:	4b12      	ldr	r3, [pc, #72]	; (800aedc <vTaskStartScheduler+0xc0>)
 800ae92:	f04f 32ff 	mov.w	r2, #4294967295
 800ae96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae98:	4b11      	ldr	r3, [pc, #68]	; (800aee0 <vTaskStartScheduler+0xc4>)
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ae9e:	4b11      	ldr	r3, [pc, #68]	; (800aee4 <vTaskStartScheduler+0xc8>)
 800aea0:	2200      	movs	r2, #0
 800aea2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aea4:	f001 f988 	bl	800c1b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aea8:	e00e      	b.n	800aec8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb0:	d10a      	bne.n	800aec8 <vTaskStartScheduler+0xac>
	__asm volatile
 800aeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	60fb      	str	r3, [r7, #12]
}
 800aec4:	bf00      	nop
 800aec6:	e7fe      	b.n	800aec6 <vTaskStartScheduler+0xaa>
}
 800aec8:	bf00      	nop
 800aeca:	3718      	adds	r7, #24
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	0800d484 	.word	0x0800d484
 800aed4:	0800b501 	.word	0x0800b501
 800aed8:	20000d64 	.word	0x20000d64
 800aedc:	20000d60 	.word	0x20000d60
 800aee0:	20000d4c 	.word	0x20000d4c
 800aee4:	20000d44 	.word	0x20000d44

0800aee8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aee8:	b480      	push	{r7}
 800aeea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800aeec:	4b04      	ldr	r3, [pc, #16]	; (800af00 <vTaskSuspendAll+0x18>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3301      	adds	r3, #1
 800aef2:	4a03      	ldr	r2, [pc, #12]	; (800af00 <vTaskSuspendAll+0x18>)
 800aef4:	6013      	str	r3, [r2, #0]
}
 800aef6:	bf00      	nop
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bc80      	pop	{r7}
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	20000d68 	.word	0x20000d68

0800af04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af0a:	2300      	movs	r3, #0
 800af0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af0e:	2300      	movs	r3, #0
 800af10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af12:	4b42      	ldr	r3, [pc, #264]	; (800b01c <xTaskResumeAll+0x118>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d10a      	bne.n	800af30 <xTaskResumeAll+0x2c>
	__asm volatile
 800af1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	603b      	str	r3, [r7, #0]
}
 800af2c:	bf00      	nop
 800af2e:	e7fe      	b.n	800af2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af30:	f001 f9b4 	bl	800c29c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af34:	4b39      	ldr	r3, [pc, #228]	; (800b01c <xTaskResumeAll+0x118>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3b01      	subs	r3, #1
 800af3a:	4a38      	ldr	r2, [pc, #224]	; (800b01c <xTaskResumeAll+0x118>)
 800af3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af3e:	4b37      	ldr	r3, [pc, #220]	; (800b01c <xTaskResumeAll+0x118>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d162      	bne.n	800b00c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af46:	4b36      	ldr	r3, [pc, #216]	; (800b020 <xTaskResumeAll+0x11c>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d05e      	beq.n	800b00c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af4e:	e02f      	b.n	800afb0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800af50:	4b34      	ldr	r3, [pc, #208]	; (800b024 <xTaskResumeAll+0x120>)
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	3318      	adds	r3, #24
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fe ffc7 	bl	8009ef0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	3304      	adds	r3, #4
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe ffc2 	bl	8009ef0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af70:	4b2d      	ldr	r3, [pc, #180]	; (800b028 <xTaskResumeAll+0x124>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	429a      	cmp	r2, r3
 800af76:	d903      	bls.n	800af80 <xTaskResumeAll+0x7c>
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7c:	4a2a      	ldr	r2, [pc, #168]	; (800b028 <xTaskResumeAll+0x124>)
 800af7e:	6013      	str	r3, [r2, #0]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af84:	4613      	mov	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4413      	add	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	4a27      	ldr	r2, [pc, #156]	; (800b02c <xTaskResumeAll+0x128>)
 800af8e:	441a      	add	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	3304      	adds	r3, #4
 800af94:	4619      	mov	r1, r3
 800af96:	4610      	mov	r0, r2
 800af98:	f7fe ff4f 	bl	8009e3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa0:	4b23      	ldr	r3, [pc, #140]	; (800b030 <xTaskResumeAll+0x12c>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d302      	bcc.n	800afb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800afaa:	4b22      	ldr	r3, [pc, #136]	; (800b034 <xTaskResumeAll+0x130>)
 800afac:	2201      	movs	r2, #1
 800afae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afb0:	4b1c      	ldr	r3, [pc, #112]	; (800b024 <xTaskResumeAll+0x120>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1cb      	bne.n	800af50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d001      	beq.n	800afc2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800afbe:	f000 fb8d 	bl	800b6dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800afc2:	4b1d      	ldr	r3, [pc, #116]	; (800b038 <xTaskResumeAll+0x134>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d010      	beq.n	800aff0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800afce:	f000 f845 	bl	800b05c <xTaskIncrementTick>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d002      	beq.n	800afde <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800afd8:	4b16      	ldr	r3, [pc, #88]	; (800b034 <xTaskResumeAll+0x130>)
 800afda:	2201      	movs	r2, #1
 800afdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1f1      	bne.n	800afce <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800afea:	4b13      	ldr	r3, [pc, #76]	; (800b038 <xTaskResumeAll+0x134>)
 800afec:	2200      	movs	r2, #0
 800afee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aff0:	4b10      	ldr	r3, [pc, #64]	; (800b034 <xTaskResumeAll+0x130>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d009      	beq.n	800b00c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aff8:	2301      	movs	r3, #1
 800affa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800affc:	4b0f      	ldr	r3, [pc, #60]	; (800b03c <xTaskResumeAll+0x138>)
 800affe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b00c:	f001 f976 	bl	800c2fc <vPortExitCritical>

	return xAlreadyYielded;
 800b010:	68bb      	ldr	r3, [r7, #8]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	20000d68 	.word	0x20000d68
 800b020:	20000d40 	.word	0x20000d40
 800b024:	20000d00 	.word	0x20000d00
 800b028:	20000d48 	.word	0x20000d48
 800b02c:	20000870 	.word	0x20000870
 800b030:	2000086c 	.word	0x2000086c
 800b034:	20000d54 	.word	0x20000d54
 800b038:	20000d50 	.word	0x20000d50
 800b03c:	e000ed04 	.word	0xe000ed04

0800b040 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b046:	4b04      	ldr	r3, [pc, #16]	; (800b058 <xTaskGetTickCount+0x18>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b04c:	687b      	ldr	r3, [r7, #4]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	370c      	adds	r7, #12
 800b052:	46bd      	mov	sp, r7
 800b054:	bc80      	pop	{r7}
 800b056:	4770      	bx	lr
 800b058:	20000d44 	.word	0x20000d44

0800b05c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b062:	2300      	movs	r3, #0
 800b064:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b066:	4b51      	ldr	r3, [pc, #324]	; (800b1ac <xTaskIncrementTick+0x150>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f040 808e 	bne.w	800b18c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b070:	4b4f      	ldr	r3, [pc, #316]	; (800b1b0 <xTaskIncrementTick+0x154>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3301      	adds	r3, #1
 800b076:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b078:	4a4d      	ldr	r2, [pc, #308]	; (800b1b0 <xTaskIncrementTick+0x154>)
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d120      	bne.n	800b0c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b084:	4b4b      	ldr	r3, [pc, #300]	; (800b1b4 <xTaskIncrementTick+0x158>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00a      	beq.n	800b0a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b092:	f383 8811 	msr	BASEPRI, r3
 800b096:	f3bf 8f6f 	isb	sy
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	603b      	str	r3, [r7, #0]
}
 800b0a0:	bf00      	nop
 800b0a2:	e7fe      	b.n	800b0a2 <xTaskIncrementTick+0x46>
 800b0a4:	4b43      	ldr	r3, [pc, #268]	; (800b1b4 <xTaskIncrementTick+0x158>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	60fb      	str	r3, [r7, #12]
 800b0aa:	4b43      	ldr	r3, [pc, #268]	; (800b1b8 <xTaskIncrementTick+0x15c>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a41      	ldr	r2, [pc, #260]	; (800b1b4 <xTaskIncrementTick+0x158>)
 800b0b0:	6013      	str	r3, [r2, #0]
 800b0b2:	4a41      	ldr	r2, [pc, #260]	; (800b1b8 <xTaskIncrementTick+0x15c>)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6013      	str	r3, [r2, #0]
 800b0b8:	4b40      	ldr	r3, [pc, #256]	; (800b1bc <xTaskIncrementTick+0x160>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	4a3f      	ldr	r2, [pc, #252]	; (800b1bc <xTaskIncrementTick+0x160>)
 800b0c0:	6013      	str	r3, [r2, #0]
 800b0c2:	f000 fb0b 	bl	800b6dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0c6:	4b3e      	ldr	r3, [pc, #248]	; (800b1c0 <xTaskIncrementTick+0x164>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d34e      	bcc.n	800b16e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0d0:	4b38      	ldr	r3, [pc, #224]	; (800b1b4 <xTaskIncrementTick+0x158>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <xTaskIncrementTick+0x82>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e000      	b.n	800b0e0 <xTaskIncrementTick+0x84>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d004      	beq.n	800b0ee <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0e4:	4b36      	ldr	r3, [pc, #216]	; (800b1c0 <xTaskIncrementTick+0x164>)
 800b0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ea:	601a      	str	r2, [r3, #0]
					break;
 800b0ec:	e03f      	b.n	800b16e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b0ee:	4b31      	ldr	r3, [pc, #196]	; (800b1b4 <xTaskIncrementTick+0x158>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	429a      	cmp	r2, r3
 800b104:	d203      	bcs.n	800b10e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b106:	4a2e      	ldr	r2, [pc, #184]	; (800b1c0 <xTaskIncrementTick+0x164>)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6013      	str	r3, [r2, #0]
						break;
 800b10c:	e02f      	b.n	800b16e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	3304      	adds	r3, #4
 800b112:	4618      	mov	r0, r3
 800b114:	f7fe feec 	bl	8009ef0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d004      	beq.n	800b12a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	3318      	adds	r3, #24
 800b124:	4618      	mov	r0, r3
 800b126:	f7fe fee3 	bl	8009ef0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b12e:	4b25      	ldr	r3, [pc, #148]	; (800b1c4 <xTaskIncrementTick+0x168>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	429a      	cmp	r2, r3
 800b134:	d903      	bls.n	800b13e <xTaskIncrementTick+0xe2>
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13a:	4a22      	ldr	r2, [pc, #136]	; (800b1c4 <xTaskIncrementTick+0x168>)
 800b13c:	6013      	str	r3, [r2, #0]
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b142:	4613      	mov	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4413      	add	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	4a1f      	ldr	r2, [pc, #124]	; (800b1c8 <xTaskIncrementTick+0x16c>)
 800b14c:	441a      	add	r2, r3
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	3304      	adds	r3, #4
 800b152:	4619      	mov	r1, r3
 800b154:	4610      	mov	r0, r2
 800b156:	f7fe fe70 	bl	8009e3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b15e:	4b1b      	ldr	r3, [pc, #108]	; (800b1cc <xTaskIncrementTick+0x170>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b164:	429a      	cmp	r2, r3
 800b166:	d3b3      	bcc.n	800b0d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b168:	2301      	movs	r3, #1
 800b16a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b16c:	e7b0      	b.n	800b0d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b16e:	4b17      	ldr	r3, [pc, #92]	; (800b1cc <xTaskIncrementTick+0x170>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b174:	4914      	ldr	r1, [pc, #80]	; (800b1c8 <xTaskIncrementTick+0x16c>)
 800b176:	4613      	mov	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	440b      	add	r3, r1
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d907      	bls.n	800b196 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b186:	2301      	movs	r3, #1
 800b188:	617b      	str	r3, [r7, #20]
 800b18a:	e004      	b.n	800b196 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b18c:	4b10      	ldr	r3, [pc, #64]	; (800b1d0 <xTaskIncrementTick+0x174>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	3301      	adds	r3, #1
 800b192:	4a0f      	ldr	r2, [pc, #60]	; (800b1d0 <xTaskIncrementTick+0x174>)
 800b194:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b196:	4b0f      	ldr	r3, [pc, #60]	; (800b1d4 <xTaskIncrementTick+0x178>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b1a2:	697b      	ldr	r3, [r7, #20]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3718      	adds	r7, #24
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	20000d68 	.word	0x20000d68
 800b1b0:	20000d44 	.word	0x20000d44
 800b1b4:	20000cf8 	.word	0x20000cf8
 800b1b8:	20000cfc 	.word	0x20000cfc
 800b1bc:	20000d58 	.word	0x20000d58
 800b1c0:	20000d60 	.word	0x20000d60
 800b1c4:	20000d48 	.word	0x20000d48
 800b1c8:	20000870 	.word	0x20000870
 800b1cc:	2000086c 	.word	0x2000086c
 800b1d0:	20000d50 	.word	0x20000d50
 800b1d4:	20000d54 	.word	0x20000d54

0800b1d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b1de:	4b27      	ldr	r3, [pc, #156]	; (800b27c <vTaskSwitchContext+0xa4>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d003      	beq.n	800b1ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b1e6:	4b26      	ldr	r3, [pc, #152]	; (800b280 <vTaskSwitchContext+0xa8>)
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b1ec:	e041      	b.n	800b272 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b1ee:	4b24      	ldr	r3, [pc, #144]	; (800b280 <vTaskSwitchContext+0xa8>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b1f4:	4b23      	ldr	r3, [pc, #140]	; (800b284 <vTaskSwitchContext+0xac>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	60fb      	str	r3, [r7, #12]
 800b1fa:	e010      	b.n	800b21e <vTaskSwitchContext+0x46>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10a      	bne.n	800b218 <vTaskSwitchContext+0x40>
	__asm volatile
 800b202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b206:	f383 8811 	msr	BASEPRI, r3
 800b20a:	f3bf 8f6f 	isb	sy
 800b20e:	f3bf 8f4f 	dsb	sy
 800b212:	607b      	str	r3, [r7, #4]
}
 800b214:	bf00      	nop
 800b216:	e7fe      	b.n	800b216 <vTaskSwitchContext+0x3e>
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	3b01      	subs	r3, #1
 800b21c:	60fb      	str	r3, [r7, #12]
 800b21e:	491a      	ldr	r1, [pc, #104]	; (800b288 <vTaskSwitchContext+0xb0>)
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	4613      	mov	r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4413      	add	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	440b      	add	r3, r1
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d0e4      	beq.n	800b1fc <vTaskSwitchContext+0x24>
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	4613      	mov	r3, r2
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	4413      	add	r3, r2
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	4a12      	ldr	r2, [pc, #72]	; (800b288 <vTaskSwitchContext+0xb0>)
 800b23e:	4413      	add	r3, r2
 800b240:	60bb      	str	r3, [r7, #8]
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	685a      	ldr	r2, [r3, #4]
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	605a      	str	r2, [r3, #4]
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	685a      	ldr	r2, [r3, #4]
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	3308      	adds	r3, #8
 800b254:	429a      	cmp	r2, r3
 800b256:	d104      	bne.n	800b262 <vTaskSwitchContext+0x8a>
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	685a      	ldr	r2, [r3, #4]
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	605a      	str	r2, [r3, #4]
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	4a08      	ldr	r2, [pc, #32]	; (800b28c <vTaskSwitchContext+0xb4>)
 800b26a:	6013      	str	r3, [r2, #0]
 800b26c:	4a05      	ldr	r2, [pc, #20]	; (800b284 <vTaskSwitchContext+0xac>)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6013      	str	r3, [r2, #0]
}
 800b272:	bf00      	nop
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	bc80      	pop	{r7}
 800b27a:	4770      	bx	lr
 800b27c:	20000d68 	.word	0x20000d68
 800b280:	20000d54 	.word	0x20000d54
 800b284:	20000d48 	.word	0x20000d48
 800b288:	20000870 	.word	0x20000870
 800b28c:	2000086c 	.word	0x2000086c

0800b290 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d10a      	bne.n	800b2b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	60fb      	str	r3, [r7, #12]
}
 800b2b2:	bf00      	nop
 800b2b4:	e7fe      	b.n	800b2b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2b6:	4b07      	ldr	r3, [pc, #28]	; (800b2d4 <vTaskPlaceOnEventList+0x44>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	3318      	adds	r3, #24
 800b2bc:	4619      	mov	r1, r3
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f7fe fdde 	bl	8009e80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	6838      	ldr	r0, [r7, #0]
 800b2c8:	f000 fb94 	bl	800b9f4 <prvAddCurrentTaskToDelayedList>
}
 800b2cc:	bf00      	nop
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	2000086c 	.word	0x2000086c

0800b2d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10a      	bne.n	800b300 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ee:	f383 8811 	msr	BASEPRI, r3
 800b2f2:	f3bf 8f6f 	isb	sy
 800b2f6:	f3bf 8f4f 	dsb	sy
 800b2fa:	617b      	str	r3, [r7, #20]
}
 800b2fc:	bf00      	nop
 800b2fe:	e7fe      	b.n	800b2fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b300:	4b0a      	ldr	r3, [pc, #40]	; (800b32c <vTaskPlaceOnEventListRestricted+0x54>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	3318      	adds	r3, #24
 800b306:	4619      	mov	r1, r3
 800b308:	68f8      	ldr	r0, [r7, #12]
 800b30a:	f7fe fd96 	bl	8009e3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d002      	beq.n	800b31a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b314:	f04f 33ff 	mov.w	r3, #4294967295
 800b318:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b31a:	6879      	ldr	r1, [r7, #4]
 800b31c:	68b8      	ldr	r0, [r7, #8]
 800b31e:	f000 fb69 	bl	800b9f4 <prvAddCurrentTaskToDelayedList>
	}
 800b322:	bf00      	nop
 800b324:	3718      	adds	r7, #24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	2000086c 	.word	0x2000086c

0800b330 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10a      	bne.n	800b35c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	60fb      	str	r3, [r7, #12]
}
 800b358:	bf00      	nop
 800b35a:	e7fe      	b.n	800b35a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	3318      	adds	r3, #24
 800b360:	4618      	mov	r0, r3
 800b362:	f7fe fdc5 	bl	8009ef0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b366:	4b1e      	ldr	r3, [pc, #120]	; (800b3e0 <xTaskRemoveFromEventList+0xb0>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d11d      	bne.n	800b3aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	3304      	adds	r3, #4
 800b372:	4618      	mov	r0, r3
 800b374:	f7fe fdbc 	bl	8009ef0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b37c:	4b19      	ldr	r3, [pc, #100]	; (800b3e4 <xTaskRemoveFromEventList+0xb4>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	429a      	cmp	r2, r3
 800b382:	d903      	bls.n	800b38c <xTaskRemoveFromEventList+0x5c>
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b388:	4a16      	ldr	r2, [pc, #88]	; (800b3e4 <xTaskRemoveFromEventList+0xb4>)
 800b38a:	6013      	str	r3, [r2, #0]
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b390:	4613      	mov	r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4413      	add	r3, r2
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	4a13      	ldr	r2, [pc, #76]	; (800b3e8 <xTaskRemoveFromEventList+0xb8>)
 800b39a:	441a      	add	r2, r3
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	3304      	adds	r3, #4
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	4610      	mov	r0, r2
 800b3a4:	f7fe fd49 	bl	8009e3a <vListInsertEnd>
 800b3a8:	e005      	b.n	800b3b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	3318      	adds	r3, #24
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	480e      	ldr	r0, [pc, #56]	; (800b3ec <xTaskRemoveFromEventList+0xbc>)
 800b3b2:	f7fe fd42 	bl	8009e3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ba:	4b0d      	ldr	r3, [pc, #52]	; (800b3f0 <xTaskRemoveFromEventList+0xc0>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d905      	bls.n	800b3d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b3c8:	4b0a      	ldr	r3, [pc, #40]	; (800b3f4 <xTaskRemoveFromEventList+0xc4>)
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	601a      	str	r2, [r3, #0]
 800b3ce:	e001      	b.n	800b3d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b3d4:	697b      	ldr	r3, [r7, #20]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3718      	adds	r7, #24
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	20000d68 	.word	0x20000d68
 800b3e4:	20000d48 	.word	0x20000d48
 800b3e8:	20000870 	.word	0x20000870
 800b3ec:	20000d00 	.word	0x20000d00
 800b3f0:	2000086c 	.word	0x2000086c
 800b3f4:	20000d54 	.word	0x20000d54

0800b3f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b400:	4b06      	ldr	r3, [pc, #24]	; (800b41c <vTaskInternalSetTimeOutState+0x24>)
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b408:	4b05      	ldr	r3, [pc, #20]	; (800b420 <vTaskInternalSetTimeOutState+0x28>)
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	605a      	str	r2, [r3, #4]
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	bc80      	pop	{r7}
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	20000d58 	.word	0x20000d58
 800b420:	20000d44 	.word	0x20000d44

0800b424 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b088      	sub	sp, #32
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d10a      	bne.n	800b44a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b438:	f383 8811 	msr	BASEPRI, r3
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	613b      	str	r3, [r7, #16]
}
 800b446:	bf00      	nop
 800b448:	e7fe      	b.n	800b448 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d10a      	bne.n	800b466 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	60fb      	str	r3, [r7, #12]
}
 800b462:	bf00      	nop
 800b464:	e7fe      	b.n	800b464 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b466:	f000 ff19 	bl	800c29c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b46a:	4b1d      	ldr	r3, [pc, #116]	; (800b4e0 <xTaskCheckForTimeOut+0xbc>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	69ba      	ldr	r2, [r7, #24]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b482:	d102      	bne.n	800b48a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b484:	2300      	movs	r3, #0
 800b486:	61fb      	str	r3, [r7, #28]
 800b488:	e023      	b.n	800b4d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	4b15      	ldr	r3, [pc, #84]	; (800b4e4 <xTaskCheckForTimeOut+0xc0>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	429a      	cmp	r2, r3
 800b494:	d007      	beq.n	800b4a6 <xTaskCheckForTimeOut+0x82>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	69ba      	ldr	r2, [r7, #24]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d302      	bcc.n	800b4a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	61fb      	str	r3, [r7, #28]
 800b4a4:	e015      	b.n	800b4d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	697a      	ldr	r2, [r7, #20]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d20b      	bcs.n	800b4c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	1ad2      	subs	r2, r2, r3
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7ff ff9b 	bl	800b3f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	61fb      	str	r3, [r7, #28]
 800b4c6:	e004      	b.n	800b4d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4d2:	f000 ff13 	bl	800c2fc <vPortExitCritical>

	return xReturn;
 800b4d6:	69fb      	ldr	r3, [r7, #28]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3720      	adds	r7, #32
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	20000d44 	.word	0x20000d44
 800b4e4:	20000d58 	.word	0x20000d58

0800b4e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4ec:	4b03      	ldr	r3, [pc, #12]	; (800b4fc <vTaskMissedYield+0x14>)
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	601a      	str	r2, [r3, #0]
}
 800b4f2:	bf00      	nop
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bc80      	pop	{r7}
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	20000d54 	.word	0x20000d54

0800b500 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b508:	f000 f852 	bl	800b5b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b50c:	4b06      	ldr	r3, [pc, #24]	; (800b528 <prvIdleTask+0x28>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d9f9      	bls.n	800b508 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b514:	4b05      	ldr	r3, [pc, #20]	; (800b52c <prvIdleTask+0x2c>)
 800b516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b51a:	601a      	str	r2, [r3, #0]
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b524:	e7f0      	b.n	800b508 <prvIdleTask+0x8>
 800b526:	bf00      	nop
 800b528:	20000870 	.word	0x20000870
 800b52c:	e000ed04 	.word	0xe000ed04

0800b530 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b536:	2300      	movs	r3, #0
 800b538:	607b      	str	r3, [r7, #4]
 800b53a:	e00c      	b.n	800b556 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	4a12      	ldr	r2, [pc, #72]	; (800b590 <prvInitialiseTaskLists+0x60>)
 800b548:	4413      	add	r3, r2
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fe fc4a 	bl	8009de4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	3301      	adds	r3, #1
 800b554:	607b      	str	r3, [r7, #4]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2b37      	cmp	r3, #55	; 0x37
 800b55a:	d9ef      	bls.n	800b53c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b55c:	480d      	ldr	r0, [pc, #52]	; (800b594 <prvInitialiseTaskLists+0x64>)
 800b55e:	f7fe fc41 	bl	8009de4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b562:	480d      	ldr	r0, [pc, #52]	; (800b598 <prvInitialiseTaskLists+0x68>)
 800b564:	f7fe fc3e 	bl	8009de4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b568:	480c      	ldr	r0, [pc, #48]	; (800b59c <prvInitialiseTaskLists+0x6c>)
 800b56a:	f7fe fc3b 	bl	8009de4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b56e:	480c      	ldr	r0, [pc, #48]	; (800b5a0 <prvInitialiseTaskLists+0x70>)
 800b570:	f7fe fc38 	bl	8009de4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b574:	480b      	ldr	r0, [pc, #44]	; (800b5a4 <prvInitialiseTaskLists+0x74>)
 800b576:	f7fe fc35 	bl	8009de4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b57a:	4b0b      	ldr	r3, [pc, #44]	; (800b5a8 <prvInitialiseTaskLists+0x78>)
 800b57c:	4a05      	ldr	r2, [pc, #20]	; (800b594 <prvInitialiseTaskLists+0x64>)
 800b57e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b580:	4b0a      	ldr	r3, [pc, #40]	; (800b5ac <prvInitialiseTaskLists+0x7c>)
 800b582:	4a05      	ldr	r2, [pc, #20]	; (800b598 <prvInitialiseTaskLists+0x68>)
 800b584:	601a      	str	r2, [r3, #0]
}
 800b586:	bf00      	nop
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	20000870 	.word	0x20000870
 800b594:	20000cd0 	.word	0x20000cd0
 800b598:	20000ce4 	.word	0x20000ce4
 800b59c:	20000d00 	.word	0x20000d00
 800b5a0:	20000d14 	.word	0x20000d14
 800b5a4:	20000d2c 	.word	0x20000d2c
 800b5a8:	20000cf8 	.word	0x20000cf8
 800b5ac:	20000cfc 	.word	0x20000cfc

0800b5b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5b6:	e019      	b.n	800b5ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5b8:	f000 fe70 	bl	800c29c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b5bc:	4b10      	ldr	r3, [pc, #64]	; (800b600 <prvCheckTasksWaitingTermination+0x50>)
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fe fc91 	bl	8009ef0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5ce:	4b0d      	ldr	r3, [pc, #52]	; (800b604 <prvCheckTasksWaitingTermination+0x54>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	4a0b      	ldr	r2, [pc, #44]	; (800b604 <prvCheckTasksWaitingTermination+0x54>)
 800b5d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5d8:	4b0b      	ldr	r3, [pc, #44]	; (800b608 <prvCheckTasksWaitingTermination+0x58>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	4a0a      	ldr	r2, [pc, #40]	; (800b608 <prvCheckTasksWaitingTermination+0x58>)
 800b5e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5e2:	f000 fe8b 	bl	800c2fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f848 	bl	800b67c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5ec:	4b06      	ldr	r3, [pc, #24]	; (800b608 <prvCheckTasksWaitingTermination+0x58>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1e1      	bne.n	800b5b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5f4:	bf00      	nop
 800b5f6:	bf00      	nop
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	20000d14 	.word	0x20000d14
 800b604:	20000d40 	.word	0x20000d40
 800b608:	20000d28 	.word	0x20000d28

0800b60c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800b614:	2300      	movs	r3, #0
 800b616:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b618:	e005      	b.n	800b626 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	3301      	adds	r3, #1
 800b61e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	3301      	adds	r3, #1
 800b624:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	2ba5      	cmp	r3, #165	; 0xa5
 800b62c:	d0f5      	beq.n	800b61a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	089b      	lsrs	r3, r3, #2
 800b632:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	b29b      	uxth	r3, r3
	}
 800b638:	4618      	mov	r0, r3
 800b63a:	3714      	adds	r7, #20
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bc80      	pop	{r7}
 800b640:	4770      	bx	lr
	...

0800b644 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d102      	bne.n	800b658 <uxTaskGetStackHighWaterMark+0x14>
 800b652:	4b09      	ldr	r3, [pc, #36]	; (800b678 <uxTaskGetStackHighWaterMark+0x34>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	e000      	b.n	800b65a <uxTaskGetStackHighWaterMark+0x16>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b660:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800b662:	6938      	ldr	r0, [r7, #16]
 800b664:	f7ff ffd2 	bl	800b60c <prvTaskCheckFreeStackSpace>
 800b668:	4603      	mov	r3, r0
 800b66a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800b66c:	68fb      	ldr	r3, [r7, #12]
	}
 800b66e:	4618      	mov	r0, r3
 800b670:	3718      	adds	r7, #24
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	2000086c 	.word	0x2000086c

0800b67c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d108      	bne.n	800b6a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b692:	4618      	mov	r0, r3
 800b694:	f000 ffc6 	bl	800c624 <vPortFree>
				vPortFree( pxTCB );
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 ffc3 	bl	800c624 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b69e:	e018      	b.n	800b6d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d103      	bne.n	800b6b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 ffba 	bl	800c624 <vPortFree>
	}
 800b6b0:	e00f      	b.n	800b6d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d00a      	beq.n	800b6d2 <prvDeleteTCB+0x56>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	60fb      	str	r3, [r7, #12]
}
 800b6ce:	bf00      	nop
 800b6d0:	e7fe      	b.n	800b6d0 <prvDeleteTCB+0x54>
	}
 800b6d2:	bf00      	nop
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
	...

0800b6dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6e2:	4b0e      	ldr	r3, [pc, #56]	; (800b71c <prvResetNextTaskUnblockTime+0x40>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d101      	bne.n	800b6f0 <prvResetNextTaskUnblockTime+0x14>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e000      	b.n	800b6f2 <prvResetNextTaskUnblockTime+0x16>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d004      	beq.n	800b700 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6f6:	4b0a      	ldr	r3, [pc, #40]	; (800b720 <prvResetNextTaskUnblockTime+0x44>)
 800b6f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6fc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b6fe:	e008      	b.n	800b712 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b700:	4b06      	ldr	r3, [pc, #24]	; (800b71c <prvResetNextTaskUnblockTime+0x40>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	4a04      	ldr	r2, [pc, #16]	; (800b720 <prvResetNextTaskUnblockTime+0x44>)
 800b710:	6013      	str	r3, [r2, #0]
}
 800b712:	bf00      	nop
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	bc80      	pop	{r7}
 800b71a:	4770      	bx	lr
 800b71c:	20000cf8 	.word	0x20000cf8
 800b720:	20000d60 	.word	0x20000d60

0800b724 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b72a:	4b0b      	ldr	r3, [pc, #44]	; (800b758 <xTaskGetSchedulerState+0x34>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d102      	bne.n	800b738 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b732:	2301      	movs	r3, #1
 800b734:	607b      	str	r3, [r7, #4]
 800b736:	e008      	b.n	800b74a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b738:	4b08      	ldr	r3, [pc, #32]	; (800b75c <xTaskGetSchedulerState+0x38>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d102      	bne.n	800b746 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b740:	2302      	movs	r3, #2
 800b742:	607b      	str	r3, [r7, #4]
 800b744:	e001      	b.n	800b74a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b746:	2300      	movs	r3, #0
 800b748:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b74a:	687b      	ldr	r3, [r7, #4]
	}
 800b74c:	4618      	mov	r0, r3
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	bc80      	pop	{r7}
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	20000d4c 	.word	0x20000d4c
 800b75c:	20000d68 	.word	0x20000d68

0800b760 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b76c:	2300      	movs	r3, #0
 800b76e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d056      	beq.n	800b824 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b776:	4b2e      	ldr	r3, [pc, #184]	; (800b830 <xTaskPriorityDisinherit+0xd0>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	693a      	ldr	r2, [r7, #16]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d00a      	beq.n	800b796 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b784:	f383 8811 	msr	BASEPRI, r3
 800b788:	f3bf 8f6f 	isb	sy
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	60fb      	str	r3, [r7, #12]
}
 800b792:	bf00      	nop
 800b794:	e7fe      	b.n	800b794 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d10a      	bne.n	800b7b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	60bb      	str	r3, [r7, #8]
}
 800b7b0:	bf00      	nop
 800b7b2:	e7fe      	b.n	800b7b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7b8:	1e5a      	subs	r2, r3, #1
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d02c      	beq.n	800b824 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d128      	bne.n	800b824 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	3304      	adds	r3, #4
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fe fb8a 	bl	8009ef0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f4:	4b0f      	ldr	r3, [pc, #60]	; (800b834 <xTaskPriorityDisinherit+0xd4>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d903      	bls.n	800b804 <xTaskPriorityDisinherit+0xa4>
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b800:	4a0c      	ldr	r2, [pc, #48]	; (800b834 <xTaskPriorityDisinherit+0xd4>)
 800b802:	6013      	str	r3, [r2, #0]
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b808:	4613      	mov	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4413      	add	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4a09      	ldr	r2, [pc, #36]	; (800b838 <xTaskPriorityDisinherit+0xd8>)
 800b812:	441a      	add	r2, r3
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	3304      	adds	r3, #4
 800b818:	4619      	mov	r1, r3
 800b81a:	4610      	mov	r0, r2
 800b81c:	f7fe fb0d 	bl	8009e3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b820:	2301      	movs	r3, #1
 800b822:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b824:	697b      	ldr	r3, [r7, #20]
	}
 800b826:	4618      	mov	r0, r3
 800b828:	3718      	adds	r7, #24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	2000086c 	.word	0x2000086c
 800b834:	20000d48 	.word	0x20000d48
 800b838:	20000870 	.word	0x20000870

0800b83c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b846:	f000 fd29 	bl	800c29c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b84a:	4b1e      	ldr	r3, [pc, #120]	; (800b8c4 <ulTaskNotifyTake+0x88>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b850:	2b00      	cmp	r3, #0
 800b852:	d113      	bne.n	800b87c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b854:	4b1b      	ldr	r3, [pc, #108]	; (800b8c4 <ulTaskNotifyTake+0x88>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2201      	movs	r2, #1
 800b85a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00b      	beq.n	800b87c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b864:	2101      	movs	r1, #1
 800b866:	6838      	ldr	r0, [r7, #0]
 800b868:	f000 f8c4 	bl	800b9f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b86c:	4b16      	ldr	r3, [pc, #88]	; (800b8c8 <ulTaskNotifyTake+0x8c>)
 800b86e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b872:	601a      	str	r2, [r3, #0]
 800b874:	f3bf 8f4f 	dsb	sy
 800b878:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b87c:	f000 fd3e 	bl	800c2fc <vPortExitCritical>

		taskENTER_CRITICAL();
 800b880:	f000 fd0c 	bl	800c29c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b884:	4b0f      	ldr	r3, [pc, #60]	; (800b8c4 <ulTaskNotifyTake+0x88>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b88a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00c      	beq.n	800b8ac <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d004      	beq.n	800b8a2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800b898:	4b0a      	ldr	r3, [pc, #40]	; (800b8c4 <ulTaskNotifyTake+0x88>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2200      	movs	r2, #0
 800b89e:	655a      	str	r2, [r3, #84]	; 0x54
 800b8a0:	e004      	b.n	800b8ac <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800b8a2:	4b08      	ldr	r3, [pc, #32]	; (800b8c4 <ulTaskNotifyTake+0x88>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	3a01      	subs	r2, #1
 800b8aa:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b8ac:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <ulTaskNotifyTake+0x88>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800b8b6:	f000 fd21 	bl	800c2fc <vPortExitCritical>

		return ulReturn;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
	}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	2000086c 	.word	0x2000086c
 800b8c8:	e000ed04 	.word	0xe000ed04

0800b8cc <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b08a      	sub	sp, #40	; 0x28
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d10a      	bne.n	800b8f2 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800b8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	61bb      	str	r3, [r7, #24]
}
 800b8ee:	bf00      	nop
 800b8f0:	e7fe      	b.n	800b8f0 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8f2:	f000 fd95 	bl	800c420 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800b8fa:	f3ef 8211 	mrs	r2, BASEPRI
 800b8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	617a      	str	r2, [r7, #20]
 800b910:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b912:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b914:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b918:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b91c:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b920:	2202      	movs	r2, #2
 800b922:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800b926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92a:	1c5a      	adds	r2, r3, #1
 800b92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92e:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b930:	7ffb      	ldrb	r3, [r7, #31]
 800b932:	2b01      	cmp	r3, #1
 800b934:	d147      	bne.n	800b9c6 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00a      	beq.n	800b954 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b942:	f383 8811 	msr	BASEPRI, r3
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	60fb      	str	r3, [r7, #12]
}
 800b950:	bf00      	nop
 800b952:	e7fe      	b.n	800b952 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b954:	4b21      	ldr	r3, [pc, #132]	; (800b9dc <vTaskNotifyGiveFromISR+0x110>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d11d      	bne.n	800b998 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95e:	3304      	adds	r3, #4
 800b960:	4618      	mov	r0, r3
 800b962:	f7fe fac5 	bl	8009ef0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96a:	4b1d      	ldr	r3, [pc, #116]	; (800b9e0 <vTaskNotifyGiveFromISR+0x114>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d903      	bls.n	800b97a <vTaskNotifyGiveFromISR+0xae>
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b976:	4a1a      	ldr	r2, [pc, #104]	; (800b9e0 <vTaskNotifyGiveFromISR+0x114>)
 800b978:	6013      	str	r3, [r2, #0]
 800b97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97e:	4613      	mov	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4a17      	ldr	r2, [pc, #92]	; (800b9e4 <vTaskNotifyGiveFromISR+0x118>)
 800b988:	441a      	add	r2, r3
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	3304      	adds	r3, #4
 800b98e:	4619      	mov	r1, r3
 800b990:	4610      	mov	r0, r2
 800b992:	f7fe fa52 	bl	8009e3a <vListInsertEnd>
 800b996:	e005      	b.n	800b9a4 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99a:	3318      	adds	r3, #24
 800b99c:	4619      	mov	r1, r3
 800b99e:	4812      	ldr	r0, [pc, #72]	; (800b9e8 <vTaskNotifyGiveFromISR+0x11c>)
 800b9a0:	f7fe fa4b 	bl	8009e3a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a8:	4b10      	ldr	r3, [pc, #64]	; (800b9ec <vTaskNotifyGiveFromISR+0x120>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d909      	bls.n	800b9c6 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d003      	beq.n	800b9c0 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	601a      	str	r2, [r3, #0]
 800b9be:	e002      	b.n	800b9c6 <vTaskNotifyGiveFromISR+0xfa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800b9c0:	4b0b      	ldr	r3, [pc, #44]	; (800b9f0 <vTaskNotifyGiveFromISR+0x124>)
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	601a      	str	r2, [r3, #0]
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	f383 8811 	msr	BASEPRI, r3
}
 800b9d0:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800b9d2:	bf00      	nop
 800b9d4:	3728      	adds	r7, #40	; 0x28
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	20000d68 	.word	0x20000d68
 800b9e0:	20000d48 	.word	0x20000d48
 800b9e4:	20000870 	.word	0x20000870
 800b9e8:	20000d00 	.word	0x20000d00
 800b9ec:	2000086c 	.word	0x2000086c
 800b9f0:	20000d54 	.word	0x20000d54

0800b9f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b9fe:	4b21      	ldr	r3, [pc, #132]	; (800ba84 <prvAddCurrentTaskToDelayedList+0x90>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba04:	4b20      	ldr	r3, [pc, #128]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3304      	adds	r3, #4
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fe fa70 	bl	8009ef0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba16:	d10a      	bne.n	800ba2e <prvAddCurrentTaskToDelayedList+0x3a>
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d007      	beq.n	800ba2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba1e:	4b1a      	ldr	r3, [pc, #104]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	3304      	adds	r3, #4
 800ba24:	4619      	mov	r1, r3
 800ba26:	4819      	ldr	r0, [pc, #100]	; (800ba8c <prvAddCurrentTaskToDelayedList+0x98>)
 800ba28:	f7fe fa07 	bl	8009e3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba2c:	e026      	b.n	800ba7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4413      	add	r3, r2
 800ba34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba36:	4b14      	ldr	r3, [pc, #80]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d209      	bcs.n	800ba5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba46:	4b12      	ldr	r3, [pc, #72]	; (800ba90 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	4b0f      	ldr	r3, [pc, #60]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3304      	adds	r3, #4
 800ba50:	4619      	mov	r1, r3
 800ba52:	4610      	mov	r0, r2
 800ba54:	f7fe fa14 	bl	8009e80 <vListInsert>
}
 800ba58:	e010      	b.n	800ba7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba5a:	4b0e      	ldr	r3, [pc, #56]	; (800ba94 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	4b0a      	ldr	r3, [pc, #40]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3304      	adds	r3, #4
 800ba64:	4619      	mov	r1, r3
 800ba66:	4610      	mov	r0, r2
 800ba68:	f7fe fa0a 	bl	8009e80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba6c:	4b0a      	ldr	r3, [pc, #40]	; (800ba98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d202      	bcs.n	800ba7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ba76:	4a08      	ldr	r2, [pc, #32]	; (800ba98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	6013      	str	r3, [r2, #0]
}
 800ba7c:	bf00      	nop
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	20000d44 	.word	0x20000d44
 800ba88:	2000086c 	.word	0x2000086c
 800ba8c:	20000d2c 	.word	0x20000d2c
 800ba90:	20000cfc 	.word	0x20000cfc
 800ba94:	20000cf8 	.word	0x20000cf8
 800ba98:	20000d60 	.word	0x20000d60

0800ba9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b08a      	sub	sp, #40	; 0x28
 800baa0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800baa2:	2300      	movs	r3, #0
 800baa4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800baa6:	f000 facb 	bl	800c040 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800baaa:	4b1c      	ldr	r3, [pc, #112]	; (800bb1c <xTimerCreateTimerTask+0x80>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d021      	beq.n	800baf6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bab2:	2300      	movs	r3, #0
 800bab4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bab6:	2300      	movs	r3, #0
 800bab8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800baba:	1d3a      	adds	r2, r7, #4
 800babc:	f107 0108 	add.w	r1, r7, #8
 800bac0:	f107 030c 	add.w	r3, r7, #12
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7fe f973 	bl	8009db0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800baca:	6879      	ldr	r1, [r7, #4]
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	9202      	str	r2, [sp, #8]
 800bad2:	9301      	str	r3, [sp, #4]
 800bad4:	2302      	movs	r3, #2
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	2300      	movs	r3, #0
 800bada:	460a      	mov	r2, r1
 800badc:	4910      	ldr	r1, [pc, #64]	; (800bb20 <xTimerCreateTimerTask+0x84>)
 800bade:	4811      	ldr	r0, [pc, #68]	; (800bb24 <xTimerCreateTimerTask+0x88>)
 800bae0:	f7fe ff52 	bl	800a988 <xTaskCreateStatic>
 800bae4:	4603      	mov	r3, r0
 800bae6:	4a10      	ldr	r2, [pc, #64]	; (800bb28 <xTimerCreateTimerTask+0x8c>)
 800bae8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800baea:	4b0f      	ldr	r3, [pc, #60]	; (800bb28 <xTimerCreateTimerTask+0x8c>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d001      	beq.n	800baf6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800baf2:	2301      	movs	r3, #1
 800baf4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10a      	bne.n	800bb12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb00:	f383 8811 	msr	BASEPRI, r3
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	613b      	str	r3, [r7, #16]
}
 800bb0e:	bf00      	nop
 800bb10:	e7fe      	b.n	800bb10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb12:	697b      	ldr	r3, [r7, #20]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3718      	adds	r7, #24
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	20000d9c 	.word	0x20000d9c
 800bb20:	0800d48c 	.word	0x0800d48c
 800bb24:	0800bc49 	.word	0x0800bc49
 800bb28:	20000da0 	.word	0x20000da0

0800bb2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b08a      	sub	sp, #40	; 0x28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
 800bb38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10a      	bne.n	800bb5a <xTimerGenericCommand+0x2e>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb48:	f383 8811 	msr	BASEPRI, r3
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	623b      	str	r3, [r7, #32]
}
 800bb56:	bf00      	nop
 800bb58:	e7fe      	b.n	800bb58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bb5a:	4b1a      	ldr	r3, [pc, #104]	; (800bbc4 <xTimerGenericCommand+0x98>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d02a      	beq.n	800bbb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	2b05      	cmp	r3, #5
 800bb72:	dc18      	bgt.n	800bba6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bb74:	f7ff fdd6 	bl	800b724 <xTaskGetSchedulerState>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	d109      	bne.n	800bb92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb7e:	4b11      	ldr	r3, [pc, #68]	; (800bbc4 <xTimerGenericCommand+0x98>)
 800bb80:	6818      	ldr	r0, [r3, #0]
 800bb82:	f107 0110 	add.w	r1, r7, #16
 800bb86:	2300      	movs	r3, #0
 800bb88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb8a:	f7fe fb1b 	bl	800a1c4 <xQueueGenericSend>
 800bb8e:	6278      	str	r0, [r7, #36]	; 0x24
 800bb90:	e012      	b.n	800bbb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb92:	4b0c      	ldr	r3, [pc, #48]	; (800bbc4 <xTimerGenericCommand+0x98>)
 800bb94:	6818      	ldr	r0, [r3, #0]
 800bb96:	f107 0110 	add.w	r1, r7, #16
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f7fe fb11 	bl	800a1c4 <xQueueGenericSend>
 800bba2:	6278      	str	r0, [r7, #36]	; 0x24
 800bba4:	e008      	b.n	800bbb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bba6:	4b07      	ldr	r3, [pc, #28]	; (800bbc4 <xTimerGenericCommand+0x98>)
 800bba8:	6818      	ldr	r0, [r3, #0]
 800bbaa:	f107 0110 	add.w	r1, r7, #16
 800bbae:	2300      	movs	r3, #0
 800bbb0:	683a      	ldr	r2, [r7, #0]
 800bbb2:	f7fe fc05 	bl	800a3c0 <xQueueGenericSendFromISR>
 800bbb6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3728      	adds	r7, #40	; 0x28
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	20000d9c 	.word	0x20000d9c

0800bbc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b088      	sub	sp, #32
 800bbcc:	af02      	add	r7, sp, #8
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbd2:	4b1c      	ldr	r3, [pc, #112]	; (800bc44 <prvProcessExpiredTimer+0x7c>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	3304      	adds	r3, #4
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fe f985 	bl	8009ef0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	69db      	ldr	r3, [r3, #28]
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d122      	bne.n	800bc34 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	699a      	ldr	r2, [r3, #24]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	18d1      	adds	r1, r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	683a      	ldr	r2, [r7, #0]
 800bbfa:	6978      	ldr	r0, [r7, #20]
 800bbfc:	f000 f8c8 	bl	800bd90 <prvInsertTimerInActiveList>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d016      	beq.n	800bc34 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc06:	2300      	movs	r3, #0
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	2100      	movs	r1, #0
 800bc10:	6978      	ldr	r0, [r7, #20]
 800bc12:	f7ff ff8b 	bl	800bb2c <xTimerGenericCommand>
 800bc16:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10a      	bne.n	800bc34 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	60fb      	str	r3, [r7, #12]
}
 800bc30:	bf00      	nop
 800bc32:	e7fe      	b.n	800bc32 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc38:	6978      	ldr	r0, [r7, #20]
 800bc3a:	4798      	blx	r3
}
 800bc3c:	bf00      	nop
 800bc3e:	3718      	adds	r7, #24
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	20000d94 	.word	0x20000d94

0800bc48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc50:	f107 0308 	add.w	r3, r7, #8
 800bc54:	4618      	mov	r0, r3
 800bc56:	f000 f857 	bl	800bd08 <prvGetNextExpireTime>
 800bc5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	4619      	mov	r1, r3
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f000 f803 	bl	800bc6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bc66:	f000 f8d5 	bl	800be14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc6a:	e7f1      	b.n	800bc50 <prvTimerTask+0x8>

0800bc6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bc76:	f7ff f937 	bl	800aee8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc7a:	f107 0308 	add.w	r3, r7, #8
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f000 f866 	bl	800bd50 <prvSampleTimeNow>
 800bc84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d130      	bne.n	800bcee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10a      	bne.n	800bca8 <prvProcessTimerOrBlockTask+0x3c>
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d806      	bhi.n	800bca8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc9a:	f7ff f933 	bl	800af04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc9e:	68f9      	ldr	r1, [r7, #12]
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f7ff ff91 	bl	800bbc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bca6:	e024      	b.n	800bcf2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d008      	beq.n	800bcc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bcae:	4b13      	ldr	r3, [pc, #76]	; (800bcfc <prvProcessTimerOrBlockTask+0x90>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	bf0c      	ite	eq
 800bcb8:	2301      	moveq	r3, #1
 800bcba:	2300      	movne	r3, #0
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bcc0:	4b0f      	ldr	r3, [pc, #60]	; (800bd00 <prvProcessTimerOrBlockTask+0x94>)
 800bcc2:	6818      	ldr	r0, [r3, #0]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	683a      	ldr	r2, [r7, #0]
 800bccc:	4619      	mov	r1, r3
 800bcce:	f7fe fe27 	bl	800a920 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bcd2:	f7ff f917 	bl	800af04 <xTaskResumeAll>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10a      	bne.n	800bcf2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bcdc:	4b09      	ldr	r3, [pc, #36]	; (800bd04 <prvProcessTimerOrBlockTask+0x98>)
 800bcde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bce2:	601a      	str	r2, [r3, #0]
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	f3bf 8f6f 	isb	sy
}
 800bcec:	e001      	b.n	800bcf2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bcee:	f7ff f909 	bl	800af04 <xTaskResumeAll>
}
 800bcf2:	bf00      	nop
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20000d98 	.word	0x20000d98
 800bd00:	20000d9c 	.word	0x20000d9c
 800bd04:	e000ed04 	.word	0xe000ed04

0800bd08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd10:	4b0e      	ldr	r3, [pc, #56]	; (800bd4c <prvGetNextExpireTime+0x44>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	bf0c      	ite	eq
 800bd1a:	2301      	moveq	r3, #1
 800bd1c:	2300      	movne	r3, #0
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	461a      	mov	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d105      	bne.n	800bd3a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd2e:	4b07      	ldr	r3, [pc, #28]	; (800bd4c <prvGetNextExpireTime+0x44>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	60fb      	str	r3, [r7, #12]
 800bd38:	e001      	b.n	800bd3e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3714      	adds	r7, #20
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bc80      	pop	{r7}
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop
 800bd4c:	20000d94 	.word	0x20000d94

0800bd50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bd58:	f7ff f972 	bl	800b040 <xTaskGetTickCount>
 800bd5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bd5e:	4b0b      	ldr	r3, [pc, #44]	; (800bd8c <prvSampleTimeNow+0x3c>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	68fa      	ldr	r2, [r7, #12]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d205      	bcs.n	800bd74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd68:	f000 f908 	bl	800bf7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	e002      	b.n	800bd7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2200      	movs	r2, #0
 800bd78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd7a:	4a04      	ldr	r2, [pc, #16]	; (800bd8c <prvSampleTimeNow+0x3c>)
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd80:	68fb      	ldr	r3, [r7, #12]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20000da4 	.word	0x20000da4

0800bd90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
 800bd9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	68ba      	ldr	r2, [r7, #8]
 800bda6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d812      	bhi.n	800bddc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	1ad2      	subs	r2, r2, r3
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	699b      	ldr	r3, [r3, #24]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d302      	bcc.n	800bdca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	617b      	str	r3, [r7, #20]
 800bdc8:	e01b      	b.n	800be02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bdca:	4b10      	ldr	r3, [pc, #64]	; (800be0c <prvInsertTimerInActiveList+0x7c>)
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	f7fe f853 	bl	8009e80 <vListInsert>
 800bdda:	e012      	b.n	800be02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d206      	bcs.n	800bdf2 <prvInsertTimerInActiveList+0x62>
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d302      	bcc.n	800bdf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bdec:	2301      	movs	r3, #1
 800bdee:	617b      	str	r3, [r7, #20]
 800bdf0:	e007      	b.n	800be02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bdf2:	4b07      	ldr	r3, [pc, #28]	; (800be10 <prvInsertTimerInActiveList+0x80>)
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	3304      	adds	r3, #4
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	f7fe f83f 	bl	8009e80 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be02:	697b      	ldr	r3, [r7, #20]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3718      	adds	r7, #24
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	20000d98 	.word	0x20000d98
 800be10:	20000d94 	.word	0x20000d94

0800be14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b08e      	sub	sp, #56	; 0x38
 800be18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be1a:	e09d      	b.n	800bf58 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	da18      	bge.n	800be54 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be22:	1d3b      	adds	r3, r7, #4
 800be24:	3304      	adds	r3, #4
 800be26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10a      	bne.n	800be44 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	61fb      	str	r3, [r7, #28]
}
 800be40:	bf00      	nop
 800be42:	e7fe      	b.n	800be42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800be44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be4a:	6850      	ldr	r0, [r2, #4]
 800be4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be4e:	6892      	ldr	r2, [r2, #8]
 800be50:	4611      	mov	r1, r2
 800be52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	db7d      	blt.n	800bf56 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800be5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d004      	beq.n	800be70 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be68:	3304      	adds	r3, #4
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fe f840 	bl	8009ef0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be70:	463b      	mov	r3, r7
 800be72:	4618      	mov	r0, r3
 800be74:	f7ff ff6c 	bl	800bd50 <prvSampleTimeNow>
 800be78:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b09      	cmp	r3, #9
 800be7e:	d86b      	bhi.n	800bf58 <prvProcessReceivedCommands+0x144>
 800be80:	a201      	add	r2, pc, #4	; (adr r2, 800be88 <prvProcessReceivedCommands+0x74>)
 800be82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be86:	bf00      	nop
 800be88:	0800beb1 	.word	0x0800beb1
 800be8c:	0800beb1 	.word	0x0800beb1
 800be90:	0800beb1 	.word	0x0800beb1
 800be94:	0800bf59 	.word	0x0800bf59
 800be98:	0800bf0d 	.word	0x0800bf0d
 800be9c:	0800bf45 	.word	0x0800bf45
 800bea0:	0800beb1 	.word	0x0800beb1
 800bea4:	0800beb1 	.word	0x0800beb1
 800bea8:	0800bf59 	.word	0x0800bf59
 800beac:	0800bf0d 	.word	0x0800bf0d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800beb0:	68ba      	ldr	r2, [r7, #8]
 800beb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb4:	699b      	ldr	r3, [r3, #24]
 800beb6:	18d1      	adds	r1, r2, r3
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bebe:	f7ff ff67 	bl	800bd90 <prvInsertTimerInActiveList>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d047      	beq.n	800bf58 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800becc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bece:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed2:	69db      	ldr	r3, [r3, #28]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d13f      	bne.n	800bf58 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bedc:	699b      	ldr	r3, [r3, #24]
 800bede:	441a      	add	r2, r3
 800bee0:	2300      	movs	r3, #0
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	2300      	movs	r3, #0
 800bee6:	2100      	movs	r1, #0
 800bee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beea:	f7ff fe1f 	bl	800bb2c <xTimerGenericCommand>
 800beee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bef0:	6a3b      	ldr	r3, [r7, #32]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d130      	bne.n	800bf58 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800bef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befa:	f383 8811 	msr	BASEPRI, r3
 800befe:	f3bf 8f6f 	isb	sy
 800bf02:	f3bf 8f4f 	dsb	sy
 800bf06:	61bb      	str	r3, [r7, #24]
}
 800bf08:	bf00      	nop
 800bf0a:	e7fe      	b.n	800bf0a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf14:	699b      	ldr	r3, [r3, #24]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10a      	bne.n	800bf30 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800bf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1e:	f383 8811 	msr	BASEPRI, r3
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	617b      	str	r3, [r7, #20]
}
 800bf2c:	bf00      	nop
 800bf2e:	e7fe      	b.n	800bf2e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf32:	699a      	ldr	r2, [r3, #24]
 800bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf36:	18d1      	adds	r1, r2, r3
 800bf38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf3e:	f7ff ff27 	bl	800bd90 <prvInsertTimerInActiveList>
					break;
 800bf42:	e009      	b.n	800bf58 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d104      	bne.n	800bf58 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800bf4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf50:	f000 fb68 	bl	800c624 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf54:	e000      	b.n	800bf58 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bf56:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf58:	4b07      	ldr	r3, [pc, #28]	; (800bf78 <prvProcessReceivedCommands+0x164>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	1d39      	adds	r1, r7, #4
 800bf5e:	2200      	movs	r2, #0
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7fe fac5 	bl	800a4f0 <xQueueReceive>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f47f af57 	bne.w	800be1c <prvProcessReceivedCommands+0x8>
	}
}
 800bf6e:	bf00      	nop
 800bf70:	bf00      	nop
 800bf72:	3730      	adds	r7, #48	; 0x30
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	20000d9c 	.word	0x20000d9c

0800bf7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b088      	sub	sp, #32
 800bf80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf82:	e045      	b.n	800c010 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf84:	4b2c      	ldr	r3, [pc, #176]	; (800c038 <prvSwitchTimerLists+0xbc>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf8e:	4b2a      	ldr	r3, [pc, #168]	; (800c038 <prvSwitchTimerLists+0xbc>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	3304      	adds	r3, #4
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7fd ffa7 	bl	8009ef0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	69db      	ldr	r3, [r3, #28]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d12e      	bne.n	800c010 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	699b      	ldr	r3, [r3, #24]
 800bfb6:	693a      	ldr	r2, [r7, #16]
 800bfb8:	4413      	add	r3, r2
 800bfba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d90e      	bls.n	800bfe2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfd0:	4b19      	ldr	r3, [pc, #100]	; (800c038 <prvSwitchTimerLists+0xbc>)
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	4619      	mov	r1, r3
 800bfda:	4610      	mov	r0, r2
 800bfdc:	f7fd ff50 	bl	8009e80 <vListInsert>
 800bfe0:	e016      	b.n	800c010 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	693a      	ldr	r2, [r7, #16]
 800bfea:	2100      	movs	r1, #0
 800bfec:	68f8      	ldr	r0, [r7, #12]
 800bfee:	f7ff fd9d 	bl	800bb2c <xTimerGenericCommand>
 800bff2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10a      	bne.n	800c010 <prvSwitchTimerLists+0x94>
	__asm volatile
 800bffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffe:	f383 8811 	msr	BASEPRI, r3
 800c002:	f3bf 8f6f 	isb	sy
 800c006:	f3bf 8f4f 	dsb	sy
 800c00a:	603b      	str	r3, [r7, #0]
}
 800c00c:	bf00      	nop
 800c00e:	e7fe      	b.n	800c00e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c010:	4b09      	ldr	r3, [pc, #36]	; (800c038 <prvSwitchTimerLists+0xbc>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1b4      	bne.n	800bf84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c01a:	4b07      	ldr	r3, [pc, #28]	; (800c038 <prvSwitchTimerLists+0xbc>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c020:	4b06      	ldr	r3, [pc, #24]	; (800c03c <prvSwitchTimerLists+0xc0>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4a04      	ldr	r2, [pc, #16]	; (800c038 <prvSwitchTimerLists+0xbc>)
 800c026:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c028:	4a04      	ldr	r2, [pc, #16]	; (800c03c <prvSwitchTimerLists+0xc0>)
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	6013      	str	r3, [r2, #0]
}
 800c02e:	bf00      	nop
 800c030:	3718      	adds	r7, #24
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	20000d94 	.word	0x20000d94
 800c03c:	20000d98 	.word	0x20000d98

0800c040 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c046:	f000 f929 	bl	800c29c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c04a:	4b15      	ldr	r3, [pc, #84]	; (800c0a0 <prvCheckForValidListAndQueue+0x60>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d120      	bne.n	800c094 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c052:	4814      	ldr	r0, [pc, #80]	; (800c0a4 <prvCheckForValidListAndQueue+0x64>)
 800c054:	f7fd fec6 	bl	8009de4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c058:	4813      	ldr	r0, [pc, #76]	; (800c0a8 <prvCheckForValidListAndQueue+0x68>)
 800c05a:	f7fd fec3 	bl	8009de4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c05e:	4b13      	ldr	r3, [pc, #76]	; (800c0ac <prvCheckForValidListAndQueue+0x6c>)
 800c060:	4a10      	ldr	r2, [pc, #64]	; (800c0a4 <prvCheckForValidListAndQueue+0x64>)
 800c062:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c064:	4b12      	ldr	r3, [pc, #72]	; (800c0b0 <prvCheckForValidListAndQueue+0x70>)
 800c066:	4a10      	ldr	r2, [pc, #64]	; (800c0a8 <prvCheckForValidListAndQueue+0x68>)
 800c068:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c06a:	2300      	movs	r3, #0
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	4b11      	ldr	r3, [pc, #68]	; (800c0b4 <prvCheckForValidListAndQueue+0x74>)
 800c070:	4a11      	ldr	r2, [pc, #68]	; (800c0b8 <prvCheckForValidListAndQueue+0x78>)
 800c072:	2110      	movs	r1, #16
 800c074:	200a      	movs	r0, #10
 800c076:	f7fd ffcd 	bl	800a014 <xQueueGenericCreateStatic>
 800c07a:	4603      	mov	r3, r0
 800c07c:	4a08      	ldr	r2, [pc, #32]	; (800c0a0 <prvCheckForValidListAndQueue+0x60>)
 800c07e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c080:	4b07      	ldr	r3, [pc, #28]	; (800c0a0 <prvCheckForValidListAndQueue+0x60>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d005      	beq.n	800c094 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c088:	4b05      	ldr	r3, [pc, #20]	; (800c0a0 <prvCheckForValidListAndQueue+0x60>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	490b      	ldr	r1, [pc, #44]	; (800c0bc <prvCheckForValidListAndQueue+0x7c>)
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fe fc1e 	bl	800a8d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c094:	f000 f932 	bl	800c2fc <vPortExitCritical>
}
 800c098:	bf00      	nop
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	20000d9c 	.word	0x20000d9c
 800c0a4:	20000d6c 	.word	0x20000d6c
 800c0a8:	20000d80 	.word	0x20000d80
 800c0ac:	20000d94 	.word	0x20000d94
 800c0b0:	20000d98 	.word	0x20000d98
 800c0b4:	20000e48 	.word	0x20000e48
 800c0b8:	20000da8 	.word	0x20000da8
 800c0bc:	0800d494 	.word	0x0800d494

0800c0c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b085      	sub	sp, #20
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	3b04      	subs	r3, #4
 800c0d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c0d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	3b04      	subs	r3, #4
 800c0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	f023 0201 	bic.w	r2, r3, #1
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	3b04      	subs	r3, #4
 800c0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0f0:	4a08      	ldr	r2, [pc, #32]	; (800c114 <pxPortInitialiseStack+0x54>)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	3b14      	subs	r3, #20
 800c0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	3b20      	subs	r3, #32
 800c106:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c108:	68fb      	ldr	r3, [r7, #12]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	bc80      	pop	{r7}
 800c112:	4770      	bx	lr
 800c114:	0800c119 	.word	0x0800c119

0800c118 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c11e:	2300      	movs	r3, #0
 800c120:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c122:	4b12      	ldr	r3, [pc, #72]	; (800c16c <prvTaskExitError+0x54>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c12a:	d00a      	beq.n	800c142 <prvTaskExitError+0x2a>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	60fb      	str	r3, [r7, #12]
}
 800c13e:	bf00      	nop
 800c140:	e7fe      	b.n	800c140 <prvTaskExitError+0x28>
	__asm volatile
 800c142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c146:	f383 8811 	msr	BASEPRI, r3
 800c14a:	f3bf 8f6f 	isb	sy
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	60bb      	str	r3, [r7, #8]
}
 800c154:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c156:	bf00      	nop
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d0fc      	beq.n	800c158 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c15e:	bf00      	nop
 800c160:	bf00      	nop
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	bc80      	pop	{r7}
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop
 800c16c:	20000128 	.word	0x20000128

0800c170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c170:	4b07      	ldr	r3, [pc, #28]	; (800c190 <pxCurrentTCBConst2>)
 800c172:	6819      	ldr	r1, [r3, #0]
 800c174:	6808      	ldr	r0, [r1, #0]
 800c176:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c17a:	f380 8809 	msr	PSP, r0
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f04f 0000 	mov.w	r0, #0
 800c186:	f380 8811 	msr	BASEPRI, r0
 800c18a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c18e:	4770      	bx	lr

0800c190 <pxCurrentTCBConst2>:
 800c190:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c194:	bf00      	nop
 800c196:	bf00      	nop

0800c198 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c198:	4806      	ldr	r0, [pc, #24]	; (800c1b4 <prvPortStartFirstTask+0x1c>)
 800c19a:	6800      	ldr	r0, [r0, #0]
 800c19c:	6800      	ldr	r0, [r0, #0]
 800c19e:	f380 8808 	msr	MSP, r0
 800c1a2:	b662      	cpsie	i
 800c1a4:	b661      	cpsie	f
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	f3bf 8f6f 	isb	sy
 800c1ae:	df00      	svc	0
 800c1b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1b2:	bf00      	nop
 800c1b4:	e000ed08 	.word	0xe000ed08

0800c1b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1be:	4b32      	ldr	r3, [pc, #200]	; (800c288 <xPortStartScheduler+0xd0>)
 800c1c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	22ff      	movs	r2, #255	; 0xff
 800c1ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1d8:	78fb      	ldrb	r3, [r7, #3]
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	4b2a      	ldr	r3, [pc, #168]	; (800c28c <xPortStartScheduler+0xd4>)
 800c1e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1e6:	4b2a      	ldr	r3, [pc, #168]	; (800c290 <xPortStartScheduler+0xd8>)
 800c1e8:	2207      	movs	r2, #7
 800c1ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1ec:	e009      	b.n	800c202 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c1ee:	4b28      	ldr	r3, [pc, #160]	; (800c290 <xPortStartScheduler+0xd8>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	4a26      	ldr	r2, [pc, #152]	; (800c290 <xPortStartScheduler+0xd8>)
 800c1f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c1f8:	78fb      	ldrb	r3, [r7, #3]
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	005b      	lsls	r3, r3, #1
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c202:	78fb      	ldrb	r3, [r7, #3]
 800c204:	b2db      	uxtb	r3, r3
 800c206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c20a:	2b80      	cmp	r3, #128	; 0x80
 800c20c:	d0ef      	beq.n	800c1ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c20e:	4b20      	ldr	r3, [pc, #128]	; (800c290 <xPortStartScheduler+0xd8>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f1c3 0307 	rsb	r3, r3, #7
 800c216:	2b04      	cmp	r3, #4
 800c218:	d00a      	beq.n	800c230 <xPortStartScheduler+0x78>
	__asm volatile
 800c21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	60bb      	str	r3, [r7, #8]
}
 800c22c:	bf00      	nop
 800c22e:	e7fe      	b.n	800c22e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c230:	4b17      	ldr	r3, [pc, #92]	; (800c290 <xPortStartScheduler+0xd8>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	021b      	lsls	r3, r3, #8
 800c236:	4a16      	ldr	r2, [pc, #88]	; (800c290 <xPortStartScheduler+0xd8>)
 800c238:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c23a:	4b15      	ldr	r3, [pc, #84]	; (800c290 <xPortStartScheduler+0xd8>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c242:	4a13      	ldr	r2, [pc, #76]	; (800c290 <xPortStartScheduler+0xd8>)
 800c244:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	b2da      	uxtb	r2, r3
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c24e:	4b11      	ldr	r3, [pc, #68]	; (800c294 <xPortStartScheduler+0xdc>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a10      	ldr	r2, [pc, #64]	; (800c294 <xPortStartScheduler+0xdc>)
 800c254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c258:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c25a:	4b0e      	ldr	r3, [pc, #56]	; (800c294 <xPortStartScheduler+0xdc>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a0d      	ldr	r2, [pc, #52]	; (800c294 <xPortStartScheduler+0xdc>)
 800c260:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c264:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c266:	f000 f8b9 	bl	800c3dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c26a:	4b0b      	ldr	r3, [pc, #44]	; (800c298 <xPortStartScheduler+0xe0>)
 800c26c:	2200      	movs	r2, #0
 800c26e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c270:	f7ff ff92 	bl	800c198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c274:	f7fe ffb0 	bl	800b1d8 <vTaskSwitchContext>
	prvTaskExitError();
 800c278:	f7ff ff4e 	bl	800c118 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	e000e400 	.word	0xe000e400
 800c28c:	20000e98 	.word	0x20000e98
 800c290:	20000e9c 	.word	0x20000e9c
 800c294:	e000ed20 	.word	0xe000ed20
 800c298:	20000128 	.word	0x20000128

0800c29c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
	__asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	607b      	str	r3, [r7, #4]
}
 800c2b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c2b6:	4b0f      	ldr	r3, [pc, #60]	; (800c2f4 <vPortEnterCritical+0x58>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	4a0d      	ldr	r2, [pc, #52]	; (800c2f4 <vPortEnterCritical+0x58>)
 800c2be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2c0:	4b0c      	ldr	r3, [pc, #48]	; (800c2f4 <vPortEnterCritical+0x58>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d10f      	bne.n	800c2e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c2c8:	4b0b      	ldr	r3, [pc, #44]	; (800c2f8 <vPortEnterCritical+0x5c>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d00a      	beq.n	800c2e8 <vPortEnterCritical+0x4c>
	__asm volatile
 800c2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d6:	f383 8811 	msr	BASEPRI, r3
 800c2da:	f3bf 8f6f 	isb	sy
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	603b      	str	r3, [r7, #0]
}
 800c2e4:	bf00      	nop
 800c2e6:	e7fe      	b.n	800c2e6 <vPortEnterCritical+0x4a>
	}
}
 800c2e8:	bf00      	nop
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bc80      	pop	{r7}
 800c2f0:	4770      	bx	lr
 800c2f2:	bf00      	nop
 800c2f4:	20000128 	.word	0x20000128
 800c2f8:	e000ed04 	.word	0xe000ed04

0800c2fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c302:	4b11      	ldr	r3, [pc, #68]	; (800c348 <vPortExitCritical+0x4c>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10a      	bne.n	800c320 <vPortExitCritical+0x24>
	__asm volatile
 800c30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30e:	f383 8811 	msr	BASEPRI, r3
 800c312:	f3bf 8f6f 	isb	sy
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	607b      	str	r3, [r7, #4]
}
 800c31c:	bf00      	nop
 800c31e:	e7fe      	b.n	800c31e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c320:	4b09      	ldr	r3, [pc, #36]	; (800c348 <vPortExitCritical+0x4c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	3b01      	subs	r3, #1
 800c326:	4a08      	ldr	r2, [pc, #32]	; (800c348 <vPortExitCritical+0x4c>)
 800c328:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c32a:	4b07      	ldr	r3, [pc, #28]	; (800c348 <vPortExitCritical+0x4c>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d105      	bne.n	800c33e <vPortExitCritical+0x42>
 800c332:	2300      	movs	r3, #0
 800c334:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	f383 8811 	msr	BASEPRI, r3
}
 800c33c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c33e:	bf00      	nop
 800c340:	370c      	adds	r7, #12
 800c342:	46bd      	mov	sp, r7
 800c344:	bc80      	pop	{r7}
 800c346:	4770      	bx	lr
 800c348:	20000128 	.word	0x20000128
 800c34c:	00000000 	.word	0x00000000

0800c350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c350:	f3ef 8009 	mrs	r0, PSP
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	4b0d      	ldr	r3, [pc, #52]	; (800c390 <pxCurrentTCBConst>)
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c360:	6010      	str	r0, [r2, #0]
 800c362:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c366:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c36a:	f380 8811 	msr	BASEPRI, r0
 800c36e:	f7fe ff33 	bl	800b1d8 <vTaskSwitchContext>
 800c372:	f04f 0000 	mov.w	r0, #0
 800c376:	f380 8811 	msr	BASEPRI, r0
 800c37a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c37e:	6819      	ldr	r1, [r3, #0]
 800c380:	6808      	ldr	r0, [r1, #0]
 800c382:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c386:	f380 8809 	msr	PSP, r0
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	4770      	bx	lr

0800c390 <pxCurrentTCBConst>:
 800c390:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c394:	bf00      	nop
 800c396:	bf00      	nop

0800c398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
	__asm volatile
 800c39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a2:	f383 8811 	msr	BASEPRI, r3
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	607b      	str	r3, [r7, #4]
}
 800c3b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c3b2:	f7fe fe53 	bl	800b05c <xTaskIncrementTick>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d003      	beq.n	800c3c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3bc:	4b06      	ldr	r3, [pc, #24]	; (800c3d8 <SysTick_Handler+0x40>)
 800c3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3c2:	601a      	str	r2, [r3, #0]
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	f383 8811 	msr	BASEPRI, r3
}
 800c3ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c3d0:	bf00      	nop
 800c3d2:	3708      	adds	r7, #8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	e000ed04 	.word	0xe000ed04

0800c3dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c3dc:	b480      	push	{r7}
 800c3de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c3e0:	4b0a      	ldr	r3, [pc, #40]	; (800c40c <vPortSetupTimerInterrupt+0x30>)
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c3e6:	4b0a      	ldr	r3, [pc, #40]	; (800c410 <vPortSetupTimerInterrupt+0x34>)
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3ec:	4b09      	ldr	r3, [pc, #36]	; (800c414 <vPortSetupTimerInterrupt+0x38>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a09      	ldr	r2, [pc, #36]	; (800c418 <vPortSetupTimerInterrupt+0x3c>)
 800c3f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3f6:	099b      	lsrs	r3, r3, #6
 800c3f8:	4a08      	ldr	r2, [pc, #32]	; (800c41c <vPortSetupTimerInterrupt+0x40>)
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c3fe:	4b03      	ldr	r3, [pc, #12]	; (800c40c <vPortSetupTimerInterrupt+0x30>)
 800c400:	2207      	movs	r2, #7
 800c402:	601a      	str	r2, [r3, #0]
}
 800c404:	bf00      	nop
 800c406:	46bd      	mov	sp, r7
 800c408:	bc80      	pop	{r7}
 800c40a:	4770      	bx	lr
 800c40c:	e000e010 	.word	0xe000e010
 800c410:	e000e018 	.word	0xe000e018
 800c414:	2000000c 	.word	0x2000000c
 800c418:	10624dd3 	.word	0x10624dd3
 800c41c:	e000e014 	.word	0xe000e014

0800c420 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c426:	f3ef 8305 	mrs	r3, IPSR
 800c42a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2b0f      	cmp	r3, #15
 800c430:	d914      	bls.n	800c45c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c432:	4a16      	ldr	r2, [pc, #88]	; (800c48c <vPortValidateInterruptPriority+0x6c>)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	4413      	add	r3, r2
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c43c:	4b14      	ldr	r3, [pc, #80]	; (800c490 <vPortValidateInterruptPriority+0x70>)
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	7afa      	ldrb	r2, [r7, #11]
 800c442:	429a      	cmp	r2, r3
 800c444:	d20a      	bcs.n	800c45c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44a:	f383 8811 	msr	BASEPRI, r3
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f3bf 8f4f 	dsb	sy
 800c456:	607b      	str	r3, [r7, #4]
}
 800c458:	bf00      	nop
 800c45a:	e7fe      	b.n	800c45a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c45c:	4b0d      	ldr	r3, [pc, #52]	; (800c494 <vPortValidateInterruptPriority+0x74>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c464:	4b0c      	ldr	r3, [pc, #48]	; (800c498 <vPortValidateInterruptPriority+0x78>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d90a      	bls.n	800c482 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	603b      	str	r3, [r7, #0]
}
 800c47e:	bf00      	nop
 800c480:	e7fe      	b.n	800c480 <vPortValidateInterruptPriority+0x60>
	}
 800c482:	bf00      	nop
 800c484:	3714      	adds	r7, #20
 800c486:	46bd      	mov	sp, r7
 800c488:	bc80      	pop	{r7}
 800c48a:	4770      	bx	lr
 800c48c:	e000e3f0 	.word	0xe000e3f0
 800c490:	20000e98 	.word	0x20000e98
 800c494:	e000ed0c 	.word	0xe000ed0c
 800c498:	20000e9c 	.word	0x20000e9c

0800c49c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b08a      	sub	sp, #40	; 0x28
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c4a8:	f7fe fd1e 	bl	800aee8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c4ac:	4b58      	ldr	r3, [pc, #352]	; (800c610 <pvPortMalloc+0x174>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d101      	bne.n	800c4b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c4b4:	f000 f910 	bl	800c6d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c4b8:	4b56      	ldr	r3, [pc, #344]	; (800c614 <pvPortMalloc+0x178>)
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	4013      	ands	r3, r2
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f040 808e 	bne.w	800c5e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d01d      	beq.n	800c508 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c4cc:	2208      	movs	r2, #8
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f003 0307 	and.w	r3, r3, #7
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d014      	beq.n	800c508 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f023 0307 	bic.w	r3, r3, #7
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f003 0307 	and.w	r3, r3, #7
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00a      	beq.n	800c508 <pvPortMalloc+0x6c>
	__asm volatile
 800c4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f6:	f383 8811 	msr	BASEPRI, r3
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	617b      	str	r3, [r7, #20]
}
 800c504:	bf00      	nop
 800c506:	e7fe      	b.n	800c506 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d069      	beq.n	800c5e2 <pvPortMalloc+0x146>
 800c50e:	4b42      	ldr	r3, [pc, #264]	; (800c618 <pvPortMalloc+0x17c>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	429a      	cmp	r2, r3
 800c516:	d864      	bhi.n	800c5e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c518:	4b40      	ldr	r3, [pc, #256]	; (800c61c <pvPortMalloc+0x180>)
 800c51a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c51c:	4b3f      	ldr	r3, [pc, #252]	; (800c61c <pvPortMalloc+0x180>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c522:	e004      	b.n	800c52e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c526:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	429a      	cmp	r2, r3
 800c536:	d903      	bls.n	800c540 <pvPortMalloc+0xa4>
 800c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1f1      	bne.n	800c524 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c540:	4b33      	ldr	r3, [pc, #204]	; (800c610 <pvPortMalloc+0x174>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c546:	429a      	cmp	r2, r3
 800c548:	d04b      	beq.n	800c5e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c54a:	6a3b      	ldr	r3, [r7, #32]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2208      	movs	r2, #8
 800c550:	4413      	add	r3, r2
 800c552:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	6a3b      	ldr	r3, [r7, #32]
 800c55a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55e:	685a      	ldr	r2, [r3, #4]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	1ad2      	subs	r2, r2, r3
 800c564:	2308      	movs	r3, #8
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	429a      	cmp	r2, r3
 800c56a:	d91f      	bls.n	800c5ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4413      	add	r3, r2
 800c572:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	f003 0307 	and.w	r3, r3, #7
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00a      	beq.n	800c594 <pvPortMalloc+0xf8>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	613b      	str	r3, [r7, #16]
}
 800c590:	bf00      	nop
 800c592:	e7fe      	b.n	800c592 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	685a      	ldr	r2, [r3, #4]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	1ad2      	subs	r2, r2, r3
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c5a6:	69b8      	ldr	r0, [r7, #24]
 800c5a8:	f000 f8f8 	bl	800c79c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c5ac:	4b1a      	ldr	r3, [pc, #104]	; (800c618 <pvPortMalloc+0x17c>)
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	1ad3      	subs	r3, r2, r3
 800c5b6:	4a18      	ldr	r2, [pc, #96]	; (800c618 <pvPortMalloc+0x17c>)
 800c5b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c5ba:	4b17      	ldr	r3, [pc, #92]	; (800c618 <pvPortMalloc+0x17c>)
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	4b18      	ldr	r3, [pc, #96]	; (800c620 <pvPortMalloc+0x184>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d203      	bcs.n	800c5ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c5c6:	4b14      	ldr	r3, [pc, #80]	; (800c618 <pvPortMalloc+0x17c>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a15      	ldr	r2, [pc, #84]	; (800c620 <pvPortMalloc+0x184>)
 800c5cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d0:	685a      	ldr	r2, [r3, #4]
 800c5d2:	4b10      	ldr	r3, [pc, #64]	; (800c614 <pvPortMalloc+0x178>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	431a      	orrs	r2, r3
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5de:	2200      	movs	r2, #0
 800c5e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c5e2:	f7fe fc8f 	bl	800af04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	f003 0307 	and.w	r3, r3, #7
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00a      	beq.n	800c606 <pvPortMalloc+0x16a>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	60fb      	str	r3, [r7, #12]
}
 800c602:	bf00      	nop
 800c604:	e7fe      	b.n	800c604 <pvPortMalloc+0x168>
	return pvReturn;
 800c606:	69fb      	ldr	r3, [r7, #28]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3728      	adds	r7, #40	; 0x28
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	20001ea8 	.word	0x20001ea8
 800c614:	20001eb4 	.word	0x20001eb4
 800c618:	20001eac 	.word	0x20001eac
 800c61c:	20001ea0 	.word	0x20001ea0
 800c620:	20001eb0 	.word	0x20001eb0

0800c624 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d048      	beq.n	800c6c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c636:	2308      	movs	r3, #8
 800c638:	425b      	negs	r3, r3
 800c63a:	697a      	ldr	r2, [r7, #20]
 800c63c:	4413      	add	r3, r2
 800c63e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	685a      	ldr	r2, [r3, #4]
 800c648:	4b21      	ldr	r3, [pc, #132]	; (800c6d0 <vPortFree+0xac>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4013      	ands	r3, r2
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10a      	bne.n	800c668 <vPortFree+0x44>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	60fb      	str	r3, [r7, #12]
}
 800c664:	bf00      	nop
 800c666:	e7fe      	b.n	800c666 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00a      	beq.n	800c686 <vPortFree+0x62>
	__asm volatile
 800c670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c674:	f383 8811 	msr	BASEPRI, r3
 800c678:	f3bf 8f6f 	isb	sy
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	60bb      	str	r3, [r7, #8]
}
 800c682:	bf00      	nop
 800c684:	e7fe      	b.n	800c684 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	685a      	ldr	r2, [r3, #4]
 800c68a:	4b11      	ldr	r3, [pc, #68]	; (800c6d0 <vPortFree+0xac>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4013      	ands	r3, r2
 800c690:	2b00      	cmp	r3, #0
 800c692:	d019      	beq.n	800c6c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d115      	bne.n	800c6c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	685a      	ldr	r2, [r3, #4]
 800c6a0:	4b0b      	ldr	r3, [pc, #44]	; (800c6d0 <vPortFree+0xac>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	43db      	mvns	r3, r3
 800c6a6:	401a      	ands	r2, r3
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c6ac:	f7fe fc1c 	bl	800aee8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	685a      	ldr	r2, [r3, #4]
 800c6b4:	4b07      	ldr	r3, [pc, #28]	; (800c6d4 <vPortFree+0xb0>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	4a06      	ldr	r2, [pc, #24]	; (800c6d4 <vPortFree+0xb0>)
 800c6bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6be:	6938      	ldr	r0, [r7, #16]
 800c6c0:	f000 f86c 	bl	800c79c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c6c4:	f7fe fc1e 	bl	800af04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c6c8:	bf00      	nop
 800c6ca:	3718      	adds	r7, #24
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	20001eb4 	.word	0x20001eb4
 800c6d4:	20001eac 	.word	0x20001eac

0800c6d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c6de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c6e4:	4b27      	ldr	r3, [pc, #156]	; (800c784 <prvHeapInit+0xac>)
 800c6e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f003 0307 	and.w	r3, r3, #7
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d00c      	beq.n	800c70c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	3307      	adds	r3, #7
 800c6f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f023 0307 	bic.w	r3, r3, #7
 800c6fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c700:	68ba      	ldr	r2, [r7, #8]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	4a1f      	ldr	r2, [pc, #124]	; (800c784 <prvHeapInit+0xac>)
 800c708:	4413      	add	r3, r2
 800c70a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c710:	4a1d      	ldr	r2, [pc, #116]	; (800c788 <prvHeapInit+0xb0>)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c716:	4b1c      	ldr	r3, [pc, #112]	; (800c788 <prvHeapInit+0xb0>)
 800c718:	2200      	movs	r2, #0
 800c71a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	68ba      	ldr	r2, [r7, #8]
 800c720:	4413      	add	r3, r2
 800c722:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c724:	2208      	movs	r2, #8
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	1a9b      	subs	r3, r3, r2
 800c72a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f023 0307 	bic.w	r3, r3, #7
 800c732:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	4a15      	ldr	r2, [pc, #84]	; (800c78c <prvHeapInit+0xb4>)
 800c738:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c73a:	4b14      	ldr	r3, [pc, #80]	; (800c78c <prvHeapInit+0xb4>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2200      	movs	r2, #0
 800c740:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c742:	4b12      	ldr	r3, [pc, #72]	; (800c78c <prvHeapInit+0xb4>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2200      	movs	r2, #0
 800c748:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	1ad2      	subs	r2, r2, r3
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c758:	4b0c      	ldr	r3, [pc, #48]	; (800c78c <prvHeapInit+0xb4>)
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	4a0a      	ldr	r2, [pc, #40]	; (800c790 <prvHeapInit+0xb8>)
 800c766:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	4a09      	ldr	r2, [pc, #36]	; (800c794 <prvHeapInit+0xbc>)
 800c76e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c770:	4b09      	ldr	r3, [pc, #36]	; (800c798 <prvHeapInit+0xc0>)
 800c772:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c776:	601a      	str	r2, [r3, #0]
}
 800c778:	bf00      	nop
 800c77a:	3714      	adds	r7, #20
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bc80      	pop	{r7}
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	20000ea0 	.word	0x20000ea0
 800c788:	20001ea0 	.word	0x20001ea0
 800c78c:	20001ea8 	.word	0x20001ea8
 800c790:	20001eb0 	.word	0x20001eb0
 800c794:	20001eac 	.word	0x20001eac
 800c798:	20001eb4 	.word	0x20001eb4

0800c79c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c79c:	b480      	push	{r7}
 800c79e:	b085      	sub	sp, #20
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c7a4:	4b27      	ldr	r3, [pc, #156]	; (800c844 <prvInsertBlockIntoFreeList+0xa8>)
 800c7a6:	60fb      	str	r3, [r7, #12]
 800c7a8:	e002      	b.n	800c7b0 <prvInsertBlockIntoFreeList+0x14>
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	60fb      	str	r3, [r7, #12]
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d8f7      	bhi.n	800c7aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	68ba      	ldr	r2, [r7, #8]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d108      	bne.n	800c7de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	685a      	ldr	r2, [r3, #4]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	441a      	add	r2, r3
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	68ba      	ldr	r2, [r7, #8]
 800c7e8:	441a      	add	r2, r3
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d118      	bne.n	800c824 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681a      	ldr	r2, [r3, #0]
 800c7f6:	4b14      	ldr	r3, [pc, #80]	; (800c848 <prvInsertBlockIntoFreeList+0xac>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d00d      	beq.n	800c81a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	685a      	ldr	r2, [r3, #4]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	441a      	add	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	601a      	str	r2, [r3, #0]
 800c818:	e008      	b.n	800c82c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c81a:	4b0b      	ldr	r3, [pc, #44]	; (800c848 <prvInsertBlockIntoFreeList+0xac>)
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	601a      	str	r2, [r3, #0]
 800c822:	e003      	b.n	800c82c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	429a      	cmp	r2, r3
 800c832:	d002      	beq.n	800c83a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	687a      	ldr	r2, [r7, #4]
 800c838:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c83a:	bf00      	nop
 800c83c:	3714      	adds	r7, #20
 800c83e:	46bd      	mov	sp, r7
 800c840:	bc80      	pop	{r7}
 800c842:	4770      	bx	lr
 800c844:	20001ea0 	.word	0x20001ea0
 800c848:	20001ea8 	.word	0x20001ea8

0800c84c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c850:	2200      	movs	r2, #0
 800c852:	4912      	ldr	r1, [pc, #72]	; (800c89c <MX_USB_DEVICE_Init+0x50>)
 800c854:	4812      	ldr	r0, [pc, #72]	; (800c8a0 <MX_USB_DEVICE_Init+0x54>)
 800c856:	f7fc f834 	bl	80088c2 <USBD_Init>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d001      	beq.n	800c864 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c860:	f7f3 ff1e 	bl	80006a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c864:	490f      	ldr	r1, [pc, #60]	; (800c8a4 <MX_USB_DEVICE_Init+0x58>)
 800c866:	480e      	ldr	r0, [pc, #56]	; (800c8a0 <MX_USB_DEVICE_Init+0x54>)
 800c868:	f7fc f856 	bl	8008918 <USBD_RegisterClass>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d001      	beq.n	800c876 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c872:	f7f3 ff15 	bl	80006a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c876:	490c      	ldr	r1, [pc, #48]	; (800c8a8 <MX_USB_DEVICE_Init+0x5c>)
 800c878:	4809      	ldr	r0, [pc, #36]	; (800c8a0 <MX_USB_DEVICE_Init+0x54>)
 800c87a:	f7fb ff87 	bl	800878c <USBD_CDC_RegisterInterface>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d001      	beq.n	800c888 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c884:	f7f3 ff0c 	bl	80006a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c888:	4805      	ldr	r0, [pc, #20]	; (800c8a0 <MX_USB_DEVICE_Init+0x54>)
 800c88a:	f7fc f85e 	bl	800894a <USBD_Start>
 800c88e:	4603      	mov	r3, r0
 800c890:	2b00      	cmp	r3, #0
 800c892:	d001      	beq.n	800c898 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c894:	f7f3 ff04 	bl	80006a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c898:	bf00      	nop
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	2000013c 	.word	0x2000013c
 800c8a0:	200022f4 	.word	0x200022f4
 800c8a4:	20000024 	.word	0x20000024
 800c8a8:	2000012c 	.word	0x2000012c

0800c8ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	4905      	ldr	r1, [pc, #20]	; (800c8c8 <CDC_Init_FS+0x1c>)
 800c8b4:	4805      	ldr	r0, [pc, #20]	; (800c8cc <CDC_Init_FS+0x20>)
 800c8b6:	f7fb ff7f 	bl	80087b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c8ba:	4905      	ldr	r1, [pc, #20]	; (800c8d0 <CDC_Init_FS+0x24>)
 800c8bc:	4803      	ldr	r0, [pc, #12]	; (800c8cc <CDC_Init_FS+0x20>)
 800c8be:	f7fb ff94 	bl	80087ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c8c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	200029a0 	.word	0x200029a0
 800c8cc:	200022f4 	.word	0x200022f4
 800c8d0:	200025b8 	.word	0x200025b8

0800c8d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c8d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bc80      	pop	{r7}
 800c8e0:	4770      	bx	lr
	...

0800c8e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	6039      	str	r1, [r7, #0]
 800c8ee:	71fb      	strb	r3, [r7, #7]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c8f4:	79fb      	ldrb	r3, [r7, #7]
 800c8f6:	2b23      	cmp	r3, #35	; 0x23
 800c8f8:	d84a      	bhi.n	800c990 <CDC_Control_FS+0xac>
 800c8fa:	a201      	add	r2, pc, #4	; (adr r2, 800c900 <CDC_Control_FS+0x1c>)
 800c8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c900:	0800c991 	.word	0x0800c991
 800c904:	0800c991 	.word	0x0800c991
 800c908:	0800c991 	.word	0x0800c991
 800c90c:	0800c991 	.word	0x0800c991
 800c910:	0800c991 	.word	0x0800c991
 800c914:	0800c991 	.word	0x0800c991
 800c918:	0800c991 	.word	0x0800c991
 800c91c:	0800c991 	.word	0x0800c991
 800c920:	0800c991 	.word	0x0800c991
 800c924:	0800c991 	.word	0x0800c991
 800c928:	0800c991 	.word	0x0800c991
 800c92c:	0800c991 	.word	0x0800c991
 800c930:	0800c991 	.word	0x0800c991
 800c934:	0800c991 	.word	0x0800c991
 800c938:	0800c991 	.word	0x0800c991
 800c93c:	0800c991 	.word	0x0800c991
 800c940:	0800c991 	.word	0x0800c991
 800c944:	0800c991 	.word	0x0800c991
 800c948:	0800c991 	.word	0x0800c991
 800c94c:	0800c991 	.word	0x0800c991
 800c950:	0800c991 	.word	0x0800c991
 800c954:	0800c991 	.word	0x0800c991
 800c958:	0800c991 	.word	0x0800c991
 800c95c:	0800c991 	.word	0x0800c991
 800c960:	0800c991 	.word	0x0800c991
 800c964:	0800c991 	.word	0x0800c991
 800c968:	0800c991 	.word	0x0800c991
 800c96c:	0800c991 	.word	0x0800c991
 800c970:	0800c991 	.word	0x0800c991
 800c974:	0800c991 	.word	0x0800c991
 800c978:	0800c991 	.word	0x0800c991
 800c97c:	0800c991 	.word	0x0800c991
 800c980:	0800c991 	.word	0x0800c991
 800c984:	0800c991 	.word	0x0800c991
 800c988:	0800c991 	.word	0x0800c991
 800c98c:	0800c991 	.word	0x0800c991
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c990:	bf00      	nop
  }

  return (USBD_OK);
 800c992:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c994:	4618      	mov	r0, r3
 800c996:	370c      	adds	r7, #12
 800c998:	46bd      	mov	sp, r7
 800c99a:	bc80      	pop	{r7}
 800c99c:	4770      	bx	lr
 800c99e:	bf00      	nop

0800c9a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	60fb      	str	r3, [r7, #12]
 800c9b2:	e00c      	b.n	800c9ce <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800c9b4:	4b14      	ldr	r3, [pc, #80]	; (800ca08 <CDC_Receive_FS+0x68>)
 800c9b6:	6818      	ldr	r0, [r3, #0]
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	18d1      	adds	r1, r2, r3
 800c9be:	f107 0208 	add.w	r2, r7, #8
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	f7fd fcfc 	bl	800a3c0 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	60fb      	str	r3, [r7, #12]
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d3ed      	bcc.n	800c9b4 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c9d8:	6879      	ldr	r1, [r7, #4]
 800c9da:	480c      	ldr	r0, [pc, #48]	; (800ca0c <CDC_Receive_FS+0x6c>)
 800c9dc:	f7fb ff05 	bl	80087ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c9e0:	480a      	ldr	r0, [pc, #40]	; (800ca0c <CDC_Receive_FS+0x6c>)
 800c9e2:	f7fb ff44 	bl	800886e <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d007      	beq.n	800c9fc <CDC_Receive_FS+0x5c>
 800c9ec:	4b08      	ldr	r3, [pc, #32]	; (800ca10 <CDC_Receive_FS+0x70>)
 800c9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9f2:	601a      	str	r2, [r3, #0]
 800c9f4:	f3bf 8f4f 	dsb	sy
 800c9f8:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800c9fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	200020ec 	.word	0x200020ec
 800ca0c:	200022f4 	.word	0x200022f4
 800ca10:	e000ed04 	.word	0xe000ed04

0800ca14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ca20:	2300      	movs	r3, #0
 800ca22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ca24:	4b0d      	ldr	r3, [pc, #52]	; (800ca5c <CDC_Transmit_FS+0x48>)
 800ca26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d001      	beq.n	800ca3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ca36:	2301      	movs	r3, #1
 800ca38:	e00b      	b.n	800ca52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ca3a:	887b      	ldrh	r3, [r7, #2]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	6879      	ldr	r1, [r7, #4]
 800ca40:	4806      	ldr	r0, [pc, #24]	; (800ca5c <CDC_Transmit_FS+0x48>)
 800ca42:	f7fb feb9 	bl	80087b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ca46:	4805      	ldr	r0, [pc, #20]	; (800ca5c <CDC_Transmit_FS+0x48>)
 800ca48:	f7fb fee2 	bl	8008810 <USBD_CDC_TransmitPacket>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ca50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3710      	adds	r7, #16
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	200022f4 	.word	0x200022f4

0800ca60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	4603      	mov	r3, r0
 800ca68:	6039      	str	r1, [r7, #0]
 800ca6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	2212      	movs	r2, #18
 800ca70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ca72:	4b03      	ldr	r3, [pc, #12]	; (800ca80 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bc80      	pop	{r7}
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	20000158 	.word	0x20000158

0800ca84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b083      	sub	sp, #12
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	6039      	str	r1, [r7, #0]
 800ca8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	2204      	movs	r2, #4
 800ca94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ca96:	4b03      	ldr	r3, [pc, #12]	; (800caa4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bc80      	pop	{r7}
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	2000016c 	.word	0x2000016c

0800caa8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	4603      	mov	r3, r0
 800cab0:	6039      	str	r1, [r7, #0]
 800cab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cab4:	79fb      	ldrb	r3, [r7, #7]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d105      	bne.n	800cac6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800caba:	683a      	ldr	r2, [r7, #0]
 800cabc:	4907      	ldr	r1, [pc, #28]	; (800cadc <USBD_FS_ProductStrDescriptor+0x34>)
 800cabe:	4808      	ldr	r0, [pc, #32]	; (800cae0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cac0:	f7fc febc 	bl	800983c <USBD_GetString>
 800cac4:	e004      	b.n	800cad0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cac6:	683a      	ldr	r2, [r7, #0]
 800cac8:	4904      	ldr	r1, [pc, #16]	; (800cadc <USBD_FS_ProductStrDescriptor+0x34>)
 800caca:	4805      	ldr	r0, [pc, #20]	; (800cae0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cacc:	f7fc feb6 	bl	800983c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cad0:	4b02      	ldr	r3, [pc, #8]	; (800cadc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	20002d88 	.word	0x20002d88
 800cae0:	0800d49c 	.word	0x0800d49c

0800cae4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	4603      	mov	r3, r0
 800caec:	6039      	str	r1, [r7, #0]
 800caee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800caf0:	683a      	ldr	r2, [r7, #0]
 800caf2:	4904      	ldr	r1, [pc, #16]	; (800cb04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800caf4:	4804      	ldr	r0, [pc, #16]	; (800cb08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800caf6:	f7fc fea1 	bl	800983c <USBD_GetString>
  return USBD_StrDesc;
 800cafa:	4b02      	ldr	r3, [pc, #8]	; (800cb04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	20002d88 	.word	0x20002d88
 800cb08:	0800d4a8 	.word	0x0800d4a8

0800cb0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	4603      	mov	r3, r0
 800cb14:	6039      	str	r1, [r7, #0]
 800cb16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	221a      	movs	r2, #26
 800cb1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cb1e:	f000 f843 	bl	800cba8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cb22:	4b02      	ldr	r3, [pc, #8]	; (800cb2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	20000170 	.word	0x20000170

0800cb30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	4603      	mov	r3, r0
 800cb38:	6039      	str	r1, [r7, #0]
 800cb3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cb3c:	79fb      	ldrb	r3, [r7, #7]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d105      	bne.n	800cb4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	4907      	ldr	r1, [pc, #28]	; (800cb64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb46:	4808      	ldr	r0, [pc, #32]	; (800cb68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb48:	f7fc fe78 	bl	800983c <USBD_GetString>
 800cb4c:	e004      	b.n	800cb58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb4e:	683a      	ldr	r2, [r7, #0]
 800cb50:	4904      	ldr	r1, [pc, #16]	; (800cb64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb52:	4805      	ldr	r0, [pc, #20]	; (800cb68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb54:	f7fc fe72 	bl	800983c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb58:	4b02      	ldr	r3, [pc, #8]	; (800cb64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	20002d88 	.word	0x20002d88
 800cb68:	0800d4bc 	.word	0x0800d4bc

0800cb6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	4603      	mov	r3, r0
 800cb74:	6039      	str	r1, [r7, #0]
 800cb76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb78:	79fb      	ldrb	r3, [r7, #7]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d105      	bne.n	800cb8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	4907      	ldr	r1, [pc, #28]	; (800cba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb82:	4808      	ldr	r0, [pc, #32]	; (800cba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb84:	f7fc fe5a 	bl	800983c <USBD_GetString>
 800cb88:	e004      	b.n	800cb94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb8a:	683a      	ldr	r2, [r7, #0]
 800cb8c:	4904      	ldr	r1, [pc, #16]	; (800cba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb8e:	4805      	ldr	r0, [pc, #20]	; (800cba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb90:	f7fc fe54 	bl	800983c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb94:	4b02      	ldr	r3, [pc, #8]	; (800cba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	20002d88 	.word	0x20002d88
 800cba4:	0800d4c8 	.word	0x0800d4c8

0800cba8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cbae:	4b0f      	ldr	r3, [pc, #60]	; (800cbec <Get_SerialNum+0x44>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cbb4:	4b0e      	ldr	r3, [pc, #56]	; (800cbf0 <Get_SerialNum+0x48>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cbba:	4b0e      	ldr	r3, [pc, #56]	; (800cbf4 <Get_SerialNum+0x4c>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cbc0:	68fa      	ldr	r2, [r7, #12]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4413      	add	r3, r2
 800cbc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d009      	beq.n	800cbe2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cbce:	2208      	movs	r2, #8
 800cbd0:	4909      	ldr	r1, [pc, #36]	; (800cbf8 <Get_SerialNum+0x50>)
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f000 f814 	bl	800cc00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cbd8:	2204      	movs	r2, #4
 800cbda:	4908      	ldr	r1, [pc, #32]	; (800cbfc <Get_SerialNum+0x54>)
 800cbdc:	68b8      	ldr	r0, [r7, #8]
 800cbde:	f000 f80f 	bl	800cc00 <IntToUnicode>
  }
}
 800cbe2:	bf00      	nop
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	1ffff7e8 	.word	0x1ffff7e8
 800cbf0:	1ffff7ec 	.word	0x1ffff7ec
 800cbf4:	1ffff7f0 	.word	0x1ffff7f0
 800cbf8:	20000172 	.word	0x20000172
 800cbfc:	20000182 	.word	0x20000182

0800cc00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b087      	sub	sp, #28
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cc12:	2300      	movs	r3, #0
 800cc14:	75fb      	strb	r3, [r7, #23]
 800cc16:	e027      	b.n	800cc68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	0f1b      	lsrs	r3, r3, #28
 800cc1c:	2b09      	cmp	r3, #9
 800cc1e:	d80b      	bhi.n	800cc38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	0f1b      	lsrs	r3, r3, #28
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	7dfb      	ldrb	r3, [r7, #23]
 800cc28:	005b      	lsls	r3, r3, #1
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	440b      	add	r3, r1
 800cc30:	3230      	adds	r2, #48	; 0x30
 800cc32:	b2d2      	uxtb	r2, r2
 800cc34:	701a      	strb	r2, [r3, #0]
 800cc36:	e00a      	b.n	800cc4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	0f1b      	lsrs	r3, r3, #28
 800cc3c:	b2da      	uxtb	r2, r3
 800cc3e:	7dfb      	ldrb	r3, [r7, #23]
 800cc40:	005b      	lsls	r3, r3, #1
 800cc42:	4619      	mov	r1, r3
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	440b      	add	r3, r1
 800cc48:	3237      	adds	r2, #55	; 0x37
 800cc4a:	b2d2      	uxtb	r2, r2
 800cc4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	011b      	lsls	r3, r3, #4
 800cc52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cc54:	7dfb      	ldrb	r3, [r7, #23]
 800cc56:	005b      	lsls	r3, r3, #1
 800cc58:	3301      	adds	r3, #1
 800cc5a:	68ba      	ldr	r2, [r7, #8]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	2200      	movs	r2, #0
 800cc60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cc62:	7dfb      	ldrb	r3, [r7, #23]
 800cc64:	3301      	adds	r3, #1
 800cc66:	75fb      	strb	r3, [r7, #23]
 800cc68:	7dfa      	ldrb	r2, [r7, #23]
 800cc6a:	79fb      	ldrb	r3, [r7, #7]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d3d3      	bcc.n	800cc18 <IntToUnicode+0x18>
  }
}
 800cc70:	bf00      	nop
 800cc72:	bf00      	nop
 800cc74:	371c      	adds	r7, #28
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bc80      	pop	{r7}
 800cc7a:	4770      	bx	lr

0800cc7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a0d      	ldr	r2, [pc, #52]	; (800ccc0 <HAL_PCD_MspInit+0x44>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d113      	bne.n	800ccb6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cc8e:	4b0d      	ldr	r3, [pc, #52]	; (800ccc4 <HAL_PCD_MspInit+0x48>)
 800cc90:	69db      	ldr	r3, [r3, #28]
 800cc92:	4a0c      	ldr	r2, [pc, #48]	; (800ccc4 <HAL_PCD_MspInit+0x48>)
 800cc94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cc98:	61d3      	str	r3, [r2, #28]
 800cc9a:	4b0a      	ldr	r3, [pc, #40]	; (800ccc4 <HAL_PCD_MspInit+0x48>)
 800cc9c:	69db      	ldr	r3, [r3, #28]
 800cc9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cca2:	60fb      	str	r3, [r7, #12]
 800cca4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800cca6:	2200      	movs	r2, #0
 800cca8:	2105      	movs	r1, #5
 800ccaa:	2014      	movs	r0, #20
 800ccac:	f7f5 fced 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ccb0:	2014      	movs	r0, #20
 800ccb2:	f7f5 fd06 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ccb6:	bf00      	nop
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	40005c00 	.word	0x40005c00
 800ccc4:	40021000 	.word	0x40021000

0800ccc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ccdc:	4619      	mov	r1, r3
 800ccde:	4610      	mov	r0, r2
 800cce0:	f7fb fe7b 	bl	80089da <USBD_LL_SetupStage>
}
 800cce4:	bf00      	nop
 800cce6:	3708      	adds	r7, #8
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ccfe:	78fa      	ldrb	r2, [r7, #3]
 800cd00:	6879      	ldr	r1, [r7, #4]
 800cd02:	4613      	mov	r3, r2
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	4413      	add	r3, r2
 800cd08:	00db      	lsls	r3, r3, #3
 800cd0a:	440b      	add	r3, r1
 800cd0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	78fb      	ldrb	r3, [r7, #3]
 800cd14:	4619      	mov	r1, r3
 800cd16:	f7fb fead 	bl	8008a74 <USBD_LL_DataOutStage>
}
 800cd1a:	bf00      	nop
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b082      	sub	sp, #8
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cd34:	78fa      	ldrb	r2, [r7, #3]
 800cd36:	6879      	ldr	r1, [r7, #4]
 800cd38:	4613      	mov	r3, r2
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	4413      	add	r3, r2
 800cd3e:	00db      	lsls	r3, r3, #3
 800cd40:	440b      	add	r3, r1
 800cd42:	333c      	adds	r3, #60	; 0x3c
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	78fb      	ldrb	r3, [r7, #3]
 800cd48:	4619      	mov	r1, r3
 800cd4a:	f7fb ff04 	bl	8008b56 <USBD_LL_DataInStage>
}
 800cd4e:	bf00      	nop
 800cd50:	3708      	adds	r7, #8
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b082      	sub	sp, #8
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7fc f814 	bl	8008d92 <USBD_LL_SOF>
}
 800cd6a:	bf00      	nop
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b084      	sub	sp, #16
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	689b      	ldr	r3, [r3, #8]
 800cd82:	2b02      	cmp	r3, #2
 800cd84:	d001      	beq.n	800cd8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cd86:	f7f3 fc8b 	bl	80006a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cd90:	7bfa      	ldrb	r2, [r7, #15]
 800cd92:	4611      	mov	r1, r2
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7fb ffc4 	bl	8008d22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7fb ff7d 	bl	8008ca0 <USBD_LL_Reset>
}
 800cda6:	bf00      	nop
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
	...

0800cdb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fb ffbe 	bl	8008d40 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	699b      	ldr	r3, [r3, #24]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d005      	beq.n	800cdd8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cdcc:	4b04      	ldr	r3, [pc, #16]	; (800cde0 <HAL_PCD_SuspendCallback+0x30>)
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	4a03      	ldr	r2, [pc, #12]	; (800cde0 <HAL_PCD_SuspendCallback+0x30>)
 800cdd2:	f043 0306 	orr.w	r3, r3, #6
 800cdd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cdd8:	bf00      	nop
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	e000ed00 	.word	0xe000ed00

0800cde4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7fb ffb8 	bl	8008d68 <USBD_LL_Resume>
}
 800cdf8:	bf00      	nop
 800cdfa:	3708      	adds	r7, #8
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ce08:	4a28      	ldr	r2, [pc, #160]	; (800ceac <USBD_LL_Init+0xac>)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4a26      	ldr	r2, [pc, #152]	; (800ceac <USBD_LL_Init+0xac>)
 800ce14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ce18:	4b24      	ldr	r3, [pc, #144]	; (800ceac <USBD_LL_Init+0xac>)
 800ce1a:	4a25      	ldr	r2, [pc, #148]	; (800ceb0 <USBD_LL_Init+0xb0>)
 800ce1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ce1e:	4b23      	ldr	r3, [pc, #140]	; (800ceac <USBD_LL_Init+0xac>)
 800ce20:	2208      	movs	r2, #8
 800ce22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ce24:	4b21      	ldr	r3, [pc, #132]	; (800ceac <USBD_LL_Init+0xac>)
 800ce26:	2202      	movs	r2, #2
 800ce28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ce2a:	4b20      	ldr	r3, [pc, #128]	; (800ceac <USBD_LL_Init+0xac>)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ce30:	4b1e      	ldr	r3, [pc, #120]	; (800ceac <USBD_LL_Init+0xac>)
 800ce32:	2200      	movs	r2, #0
 800ce34:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ce36:	4b1d      	ldr	r3, [pc, #116]	; (800ceac <USBD_LL_Init+0xac>)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ce3c:	481b      	ldr	r0, [pc, #108]	; (800ceac <USBD_LL_Init+0xac>)
 800ce3e:	f7f5 feed 	bl	8002c1c <HAL_PCD_Init>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d001      	beq.n	800ce4c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ce48:	f7f3 fc2a 	bl	80006a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce52:	2318      	movs	r3, #24
 800ce54:	2200      	movs	r2, #0
 800ce56:	2100      	movs	r1, #0
 800ce58:	f7f7 fb63 	bl	8004522 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce62:	2358      	movs	r3, #88	; 0x58
 800ce64:	2200      	movs	r2, #0
 800ce66:	2180      	movs	r1, #128	; 0x80
 800ce68:	f7f7 fb5b 	bl	8004522 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce72:	23c0      	movs	r3, #192	; 0xc0
 800ce74:	2200      	movs	r2, #0
 800ce76:	2181      	movs	r1, #129	; 0x81
 800ce78:	f7f7 fb53 	bl	8004522 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce82:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ce86:	2200      	movs	r2, #0
 800ce88:	2101      	movs	r1, #1
 800ce8a:	f7f7 fb4a 	bl	8004522 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce98:	2200      	movs	r2, #0
 800ce9a:	2182      	movs	r1, #130	; 0x82
 800ce9c:	f7f7 fb41 	bl	8004522 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cea0:	2300      	movs	r3, #0
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	20002f88 	.word	0x20002f88
 800ceb0:	40005c00 	.word	0x40005c00

0800ceb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cebc:	2300      	movs	r3, #0
 800cebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cec0:	2300      	movs	r3, #0
 800cec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7f5 ffb1 	bl	8002e32 <HAL_PCD_Start>
 800ced0:	4603      	mov	r3, r0
 800ced2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ced4:	7bfb      	ldrb	r3, [r7, #15]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f000 f94e 	bl	800d178 <USBD_Get_USB_Status>
 800cedc:	4603      	mov	r3, r0
 800cede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cee0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b084      	sub	sp, #16
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
 800cef2:	4608      	mov	r0, r1
 800cef4:	4611      	mov	r1, r2
 800cef6:	461a      	mov	r2, r3
 800cef8:	4603      	mov	r3, r0
 800cefa:	70fb      	strb	r3, [r7, #3]
 800cefc:	460b      	mov	r3, r1
 800cefe:	70bb      	strb	r3, [r7, #2]
 800cf00:	4613      	mov	r3, r2
 800cf02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf04:	2300      	movs	r3, #0
 800cf06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf12:	78bb      	ldrb	r3, [r7, #2]
 800cf14:	883a      	ldrh	r2, [r7, #0]
 800cf16:	78f9      	ldrb	r1, [r7, #3]
 800cf18:	f7f6 f92b 	bl	8003172 <HAL_PCD_EP_Open>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf20:	7bfb      	ldrb	r3, [r7, #15]
 800cf22:	4618      	mov	r0, r3
 800cf24:	f000 f928 	bl	800d178 <USBD_Get_USB_Status>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b084      	sub	sp, #16
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
 800cf3e:	460b      	mov	r3, r1
 800cf40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf42:	2300      	movs	r3, #0
 800cf44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf46:	2300      	movs	r3, #0
 800cf48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf50:	78fa      	ldrb	r2, [r7, #3]
 800cf52:	4611      	mov	r1, r2
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7f6 f972 	bl	800323e <HAL_PCD_EP_Close>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf5e:	7bfb      	ldrb	r3, [r7, #15]
 800cf60:	4618      	mov	r0, r3
 800cf62:	f000 f909 	bl	800d178 <USBD_Get_USB_Status>
 800cf66:	4603      	mov	r3, r0
 800cf68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf80:	2300      	movs	r3, #0
 800cf82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf84:	2300      	movs	r3, #0
 800cf86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf8e:	78fa      	ldrb	r2, [r7, #3]
 800cf90:	4611      	mov	r1, r2
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7f6 fa32 	bl	80033fc <HAL_PCD_EP_SetStall>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf9c:	7bfb      	ldrb	r3, [r7, #15]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f000 f8ea 	bl	800d178 <USBD_Get_USB_Status>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfa8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b084      	sub	sp, #16
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
 800cfba:	460b      	mov	r3, r1
 800cfbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfcc:	78fa      	ldrb	r2, [r7, #3]
 800cfce:	4611      	mov	r1, r2
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7f6 fa73 	bl	80034bc <HAL_PCD_EP_ClrStall>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfda:	7bfb      	ldrb	r3, [r7, #15]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f000 f8cb 	bl	800d178 <USBD_Get_USB_Status>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfe6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3710      	adds	r7, #16
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b085      	sub	sp, #20
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	460b      	mov	r3, r1
 800cffa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d002:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	da0c      	bge.n	800d026 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d00c:	78fb      	ldrb	r3, [r7, #3]
 800d00e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d012:	68f9      	ldr	r1, [r7, #12]
 800d014:	1c5a      	adds	r2, r3, #1
 800d016:	4613      	mov	r3, r2
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	4413      	add	r3, r2
 800d01c:	00db      	lsls	r3, r3, #3
 800d01e:	440b      	add	r3, r1
 800d020:	3302      	adds	r3, #2
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	e00b      	b.n	800d03e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d026:	78fb      	ldrb	r3, [r7, #3]
 800d028:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d02c:	68f9      	ldr	r1, [r7, #12]
 800d02e:	4613      	mov	r3, r2
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	4413      	add	r3, r2
 800d034:	00db      	lsls	r3, r3, #3
 800d036:	440b      	add	r3, r1
 800d038:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d03c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3714      	adds	r7, #20
 800d042:	46bd      	mov	sp, r7
 800d044:	bc80      	pop	{r7}
 800d046:	4770      	bx	lr

0800d048 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	460b      	mov	r3, r1
 800d052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d054:	2300      	movs	r3, #0
 800d056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d058:	2300      	movs	r3, #0
 800d05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d062:	78fa      	ldrb	r2, [r7, #3]
 800d064:	4611      	mov	r1, r2
 800d066:	4618      	mov	r0, r3
 800d068:	f7f6 f85e 	bl	8003128 <HAL_PCD_SetAddress>
 800d06c:	4603      	mov	r3, r0
 800d06e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d070:	7bfb      	ldrb	r3, [r7, #15]
 800d072:	4618      	mov	r0, r3
 800d074:	f000 f880 	bl	800d178 <USBD_Get_USB_Status>
 800d078:	4603      	mov	r3, r0
 800d07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b086      	sub	sp, #24
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	60f8      	str	r0, [r7, #12]
 800d08e:	607a      	str	r2, [r7, #4]
 800d090:	461a      	mov	r2, r3
 800d092:	460b      	mov	r3, r1
 800d094:	72fb      	strb	r3, [r7, #11]
 800d096:	4613      	mov	r3, r2
 800d098:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d09a:	2300      	movs	r3, #0
 800d09c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d0a8:	893b      	ldrh	r3, [r7, #8]
 800d0aa:	7af9      	ldrb	r1, [r7, #11]
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	f7f6 f962 	bl	8003376 <HAL_PCD_EP_Transmit>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0b6:	7dfb      	ldrb	r3, [r7, #23]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f000 f85d 	bl	800d178 <USBD_Get_USB_Status>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d0c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3718      	adds	r7, #24
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b086      	sub	sp, #24
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	607a      	str	r2, [r7, #4]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	460b      	mov	r3, r1
 800d0da:	72fb      	strb	r3, [r7, #11]
 800d0dc:	4613      	mov	r3, r2
 800d0de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d0ee:	893b      	ldrh	r3, [r7, #8]
 800d0f0:	7af9      	ldrb	r1, [r7, #11]
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	f7f6 f8eb 	bl	80032ce <HAL_PCD_EP_Receive>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0fc:	7dfb      	ldrb	r3, [r7, #23]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f000 f83a 	bl	800d178 <USBD_Get_USB_Status>
 800d104:	4603      	mov	r3, r0
 800d106:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d108:	7dbb      	ldrb	r3, [r7, #22]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3718      	adds	r7, #24
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b082      	sub	sp, #8
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	460b      	mov	r3, r1
 800d11c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d124:	78fa      	ldrb	r2, [r7, #3]
 800d126:	4611      	mov	r1, r2
 800d128:	4618      	mov	r0, r3
 800d12a:	f7f6 f90d 	bl	8003348 <HAL_PCD_EP_GetRxCount>
 800d12e:	4603      	mov	r3, r0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d140:	4b02      	ldr	r3, [pc, #8]	; (800d14c <USBD_static_malloc+0x14>)
}
 800d142:	4618      	mov	r0, r3
 800d144:	370c      	adds	r7, #12
 800d146:	46bd      	mov	sp, r7
 800d148:	bc80      	pop	{r7}
 800d14a:	4770      	bx	lr
 800d14c:	20001eb8 	.word	0x20001eb8

0800d150 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]

}
 800d158:	bf00      	nop
 800d15a:	370c      	adds	r7, #12
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bc80      	pop	{r7}
 800d160:	4770      	bx	lr

0800d162 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d162:	b480      	push	{r7}
 800d164:	b083      	sub	sp, #12
 800d166:	af00      	add	r7, sp, #0
 800d168:	6078      	str	r0, [r7, #4]
 800d16a:	460b      	mov	r3, r1
 800d16c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d16e:	bf00      	nop
 800d170:	370c      	adds	r7, #12
 800d172:	46bd      	mov	sp, r7
 800d174:	bc80      	pop	{r7}
 800d176:	4770      	bx	lr

0800d178 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	4603      	mov	r3, r0
 800d180:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d182:	2300      	movs	r3, #0
 800d184:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d186:	79fb      	ldrb	r3, [r7, #7]
 800d188:	2b03      	cmp	r3, #3
 800d18a:	d817      	bhi.n	800d1bc <USBD_Get_USB_Status+0x44>
 800d18c:	a201      	add	r2, pc, #4	; (adr r2, 800d194 <USBD_Get_USB_Status+0x1c>)
 800d18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d192:	bf00      	nop
 800d194:	0800d1a5 	.word	0x0800d1a5
 800d198:	0800d1ab 	.word	0x0800d1ab
 800d19c:	0800d1b1 	.word	0x0800d1b1
 800d1a0:	0800d1b7 	.word	0x0800d1b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d1a8:	e00b      	b.n	800d1c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d1aa:	2302      	movs	r3, #2
 800d1ac:	73fb      	strb	r3, [r7, #15]
    break;
 800d1ae:	e008      	b.n	800d1c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d1b4:	e005      	b.n	800d1c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d1b6:	2302      	movs	r3, #2
 800d1b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d1ba:	e002      	b.n	800d1c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d1bc:	2302      	movs	r3, #2
 800d1be:	73fb      	strb	r3, [r7, #15]
    break;
 800d1c0:	bf00      	nop
  }
  return usb_status;
 800d1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3714      	adds	r7, #20
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bc80      	pop	{r7}
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop

0800d1d0 <__libc_init_array>:
 800d1d0:	b570      	push	{r4, r5, r6, lr}
 800d1d2:	2600      	movs	r6, #0
 800d1d4:	4d0c      	ldr	r5, [pc, #48]	; (800d208 <__libc_init_array+0x38>)
 800d1d6:	4c0d      	ldr	r4, [pc, #52]	; (800d20c <__libc_init_array+0x3c>)
 800d1d8:	1b64      	subs	r4, r4, r5
 800d1da:	10a4      	asrs	r4, r4, #2
 800d1dc:	42a6      	cmp	r6, r4
 800d1de:	d109      	bne.n	800d1f4 <__libc_init_array+0x24>
 800d1e0:	f000 f862 	bl	800d2a8 <_init>
 800d1e4:	2600      	movs	r6, #0
 800d1e6:	4d0a      	ldr	r5, [pc, #40]	; (800d210 <__libc_init_array+0x40>)
 800d1e8:	4c0a      	ldr	r4, [pc, #40]	; (800d214 <__libc_init_array+0x44>)
 800d1ea:	1b64      	subs	r4, r4, r5
 800d1ec:	10a4      	asrs	r4, r4, #2
 800d1ee:	42a6      	cmp	r6, r4
 800d1f0:	d105      	bne.n	800d1fe <__libc_init_array+0x2e>
 800d1f2:	bd70      	pop	{r4, r5, r6, pc}
 800d1f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1f8:	4798      	blx	r3
 800d1fa:	3601      	adds	r6, #1
 800d1fc:	e7ee      	b.n	800d1dc <__libc_init_array+0xc>
 800d1fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800d202:	4798      	blx	r3
 800d204:	3601      	adds	r6, #1
 800d206:	e7f2      	b.n	800d1ee <__libc_init_array+0x1e>
 800d208:	0800d9d8 	.word	0x0800d9d8
 800d20c:	0800d9d8 	.word	0x0800d9d8
 800d210:	0800d9d8 	.word	0x0800d9d8
 800d214:	0800d9dc 	.word	0x0800d9dc

0800d218 <memcpy>:
 800d218:	440a      	add	r2, r1
 800d21a:	4291      	cmp	r1, r2
 800d21c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d220:	d100      	bne.n	800d224 <memcpy+0xc>
 800d222:	4770      	bx	lr
 800d224:	b510      	push	{r4, lr}
 800d226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d22a:	4291      	cmp	r1, r2
 800d22c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d230:	d1f9      	bne.n	800d226 <memcpy+0xe>
 800d232:	bd10      	pop	{r4, pc}

0800d234 <memmove>:
 800d234:	4288      	cmp	r0, r1
 800d236:	b510      	push	{r4, lr}
 800d238:	eb01 0402 	add.w	r4, r1, r2
 800d23c:	d902      	bls.n	800d244 <memmove+0x10>
 800d23e:	4284      	cmp	r4, r0
 800d240:	4623      	mov	r3, r4
 800d242:	d807      	bhi.n	800d254 <memmove+0x20>
 800d244:	1e43      	subs	r3, r0, #1
 800d246:	42a1      	cmp	r1, r4
 800d248:	d008      	beq.n	800d25c <memmove+0x28>
 800d24a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d24e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d252:	e7f8      	b.n	800d246 <memmove+0x12>
 800d254:	4601      	mov	r1, r0
 800d256:	4402      	add	r2, r0
 800d258:	428a      	cmp	r2, r1
 800d25a:	d100      	bne.n	800d25e <memmove+0x2a>
 800d25c:	bd10      	pop	{r4, pc}
 800d25e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d266:	e7f7      	b.n	800d258 <memmove+0x24>

0800d268 <memset>:
 800d268:	4603      	mov	r3, r0
 800d26a:	4402      	add	r2, r0
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d100      	bne.n	800d272 <memset+0xa>
 800d270:	4770      	bx	lr
 800d272:	f803 1b01 	strb.w	r1, [r3], #1
 800d276:	e7f9      	b.n	800d26c <memset+0x4>

0800d278 <strstr>:
 800d278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d27a:	780c      	ldrb	r4, [r1, #0]
 800d27c:	b164      	cbz	r4, 800d298 <strstr+0x20>
 800d27e:	4603      	mov	r3, r0
 800d280:	781a      	ldrb	r2, [r3, #0]
 800d282:	4618      	mov	r0, r3
 800d284:	1c5e      	adds	r6, r3, #1
 800d286:	b90a      	cbnz	r2, 800d28c <strstr+0x14>
 800d288:	4610      	mov	r0, r2
 800d28a:	e005      	b.n	800d298 <strstr+0x20>
 800d28c:	4294      	cmp	r4, r2
 800d28e:	d108      	bne.n	800d2a2 <strstr+0x2a>
 800d290:	460d      	mov	r5, r1
 800d292:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800d296:	b902      	cbnz	r2, 800d29a <strstr+0x22>
 800d298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d29a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800d29e:	4297      	cmp	r7, r2
 800d2a0:	d0f7      	beq.n	800d292 <strstr+0x1a>
 800d2a2:	4633      	mov	r3, r6
 800d2a4:	e7ec      	b.n	800d280 <strstr+0x8>
	...

0800d2a8 <_init>:
 800d2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2aa:	bf00      	nop
 800d2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ae:	bc08      	pop	{r3}
 800d2b0:	469e      	mov	lr, r3
 800d2b2:	4770      	bx	lr

0800d2b4 <_fini>:
 800d2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2b6:	bf00      	nop
 800d2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ba:	bc08      	pop	{r3}
 800d2bc:	469e      	mov	lr, r3
 800d2be:	4770      	bx	lr
