
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd90  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000864  0800dea0  0800dea0  0001dea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e704  0800e704  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800e704  0800e704  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e704  0800e704  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e704  0800e704  0001e704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e708  0800e708  0001e708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800e70c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003490  20000190  0800e89c  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003620  0800e89c  00023620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c15d  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005dca  00000000  00000000  0004c316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df0  00000000  00000000  000520e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bd8  00000000  00000000  00053ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e711  00000000  00000000  00055aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024025  00000000  00000000  000741b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c529  00000000  00000000  000981de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134707  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c14  00000000  00000000  0013475c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000190 	.word	0x20000190
 800012c:	00000000 	.word	0x00000000
 8000130:	0800de88 	.word	0x0800de88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000194 	.word	0x20000194
 800014c:	0800de88 	.word	0x0800de88

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (32, sizeof(uint8_t), &qUSB_rcv_attributes);
 8000178:	4a1e      	ldr	r2, [pc, #120]	; (80001f4 <MX_FREERTOS_Init+0x80>)
 800017a:	2101      	movs	r1, #1
 800017c:	2020      	movs	r0, #32
 800017e:	f00a fb65 	bl	800a84c <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a1c      	ldr	r2, [pc, #112]	; (80001f8 <MX_FREERTOS_Init+0x84>)
 8000186:	6013      	str	r3, [r2, #0]

  /* creation of qVFD */
  qVFDHandle = osMessageQueueNew (16, sizeof(uint16_t), &qVFD_attributes);
 8000188:	4a1c      	ldr	r2, [pc, #112]	; (80001fc <MX_FREERTOS_Init+0x88>)
 800018a:	2102      	movs	r1, #2
 800018c:	2010      	movs	r0, #16
 800018e:	f00a fb5d 	bl	800a84c <osMessageQueueNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a1a      	ldr	r2, [pc, #104]	; (8000200 <MX_FREERTOS_Init+0x8c>)
 8000196:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000198:	4a1a      	ldr	r2, [pc, #104]	; (8000204 <MX_FREERTOS_Init+0x90>)
 800019a:	2100      	movs	r1, #0
 800019c:	481a      	ldr	r0, [pc, #104]	; (8000208 <MX_FREERTOS_Init+0x94>)
 800019e:	f00a fa7d 	bl	800a69c <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a19      	ldr	r2, [pc, #100]	; (800020c <MX_FREERTOS_Init+0x98>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 80001a8:	4a19      	ldr	r2, [pc, #100]	; (8000210 <MX_FREERTOS_Init+0x9c>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	4819      	ldr	r0, [pc, #100]	; (8000214 <MX_FREERTOS_Init+0xa0>)
 80001ae:	f00a fa75 	bl	800a69c <osThreadNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a18      	ldr	r2, [pc, #96]	; (8000218 <MX_FREERTOS_Init+0xa4>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 80001b8:	4a18      	ldr	r2, [pc, #96]	; (800021c <MX_FREERTOS_Init+0xa8>)
 80001ba:	2100      	movs	r1, #0
 80001bc:	4818      	ldr	r0, [pc, #96]	; (8000220 <MX_FREERTOS_Init+0xac>)
 80001be:	f00a fa6d 	bl	800a69c <osThreadNew>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <MX_FREERTOS_Init+0xb0>)
 80001c6:	6013      	str	r3, [r2, #0]

  /* creation of UARTtask */
  UARTtaskHandle = osThreadNew(StartUARTtask, NULL, &UARTtask_attributes);
 80001c8:	4a17      	ldr	r2, [pc, #92]	; (8000228 <MX_FREERTOS_Init+0xb4>)
 80001ca:	2100      	movs	r1, #0
 80001cc:	4817      	ldr	r0, [pc, #92]	; (800022c <MX_FREERTOS_Init+0xb8>)
 80001ce:	f00a fa65 	bl	800a69c <osThreadNew>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a16      	ldr	r2, [pc, #88]	; (8000230 <MX_FREERTOS_Init+0xbc>)
 80001d6:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(StartEncoder, NULL, &Encoder_attributes);
 80001d8:	4a16      	ldr	r2, [pc, #88]	; (8000234 <MX_FREERTOS_Init+0xc0>)
 80001da:	2100      	movs	r1, #0
 80001dc:	4816      	ldr	r0, [pc, #88]	; (8000238 <MX_FREERTOS_Init+0xc4>)
 80001de:	f00a fa5d 	bl	800a69c <osThreadNew>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a15      	ldr	r2, [pc, #84]	; (800023c <MX_FREERTOS_Init+0xc8>)
 80001e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 80001e8:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <MX_FREERTOS_Init+0x84>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a14      	ldr	r2, [pc, #80]	; (8000240 <MX_FREERTOS_Init+0xcc>)
 80001ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	0800e23c 	.word	0x0800e23c
 80001f8:	20002488 	.word	0x20002488
 80001fc:	0800e254 	.word	0x0800e254
 8000200:	2000248c 	.word	0x2000248c
 8000204:	0800e188 	.word	0x0800e188
 8000208:	08000245 	.word	0x08000245
 800020c:	20002478 	.word	0x20002478
 8000210:	0800e1ac 	.word	0x0800e1ac
 8000214:	0800027d 	.word	0x0800027d
 8000218:	2000247c 	.word	0x2000247c
 800021c:	0800e1d0 	.word	0x0800e1d0
 8000220:	080003a5 	.word	0x080003a5
 8000224:	20002484 	.word	0x20002484
 8000228:	0800e1f4 	.word	0x0800e1f4
 800022c:	080003ed 	.word	0x080003ed
 8000230:	20002480 	.word	0x20002480
 8000234:	0800e218 	.word	0x0800e218
 8000238:	08000429 	.word	0x08000429
 800023c:	20002494 	.word	0x20002494
 8000240:	20002490 	.word	0x20002490

08000244 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800024c:	f00d f8ee 	bl	800d42c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000256:	4808      	ldr	r0, [pc, #32]	; (8000278 <StartDefaultTask+0x34>)
 8000258:	f003 f897 	bl	800338a <HAL_GPIO_WritePin>
  osDelay(10);
 800025c:	200a      	movs	r0, #10
 800025e:	f00a fac7 	bl	800a7f0 <osDelay>
  init_microrl();
 8000262:	f002 f9b5 	bl	80025d0 <init_microrl>
  set_CDC_ready(); // allow to send
 8000266:	f002 f9ed 	bl	8002644 <set_CDC_ready>

  //vTaskDelete(NULL);
  /* Infinite loop */
  for(;;)
  {
    process_encoder();
 800026a:	f000 fc37 	bl	8000adc <process_encoder>
    osDelay(1);
 800026e:	2001      	movs	r0, #1
 8000270:	f00a fabe 	bl	800a7f0 <osDelay>
    process_encoder();
 8000274:	e7f9      	b.n	800026a <StartDefaultTask+0x26>
 8000276:	bf00      	nop
 8000278:	40010800 	.word	0x40010800

0800027c <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 8000284:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000288:	617b      	str	r3, [r7, #20]

	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 800028a:	f00b fcc5 	bl	800bc18 <xTaskGetTickCount>
 800028e:	4603      	mov	r3, r0
 8000290:	613b      	str	r3, [r7, #16]

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000296:	483d      	ldr	r0, [pc, #244]	; (800038c <StartLEDheartbeat+0x110>)
 8000298:	f003 f88f 	bl	80033ba <HAL_GPIO_TogglePin>

		if (xTaskGetTickCount() > 10000)
 800029c:	f00b fcbc 	bl	800bc18 <xTaskGetTickCount>
 80002a0:	4603      	mov	r3, r0
 80002a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d968      	bls.n	800037c <StartLEDheartbeat+0x100>
		{
				static uint8_t cnt = 0;
				const uint16_t temp = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	81fb      	strh	r3, [r7, #14]
				if (cnt == DIGITS || (cnt == DIGITS + ALPHAS || cnt == 0 ))
 80002ae:	4b38      	ldr	r3, [pc, #224]	; (8000390 <StartLEDheartbeat+0x114>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	220a      	movs	r2, #10
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d00c      	beq.n	80002d2 <StartLEDheartbeat+0x56>
 80002b8:	4b35      	ldr	r3, [pc, #212]	; (8000390 <StartLEDheartbeat+0x114>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	461a      	mov	r2, r3
 80002be:	230a      	movs	r3, #10
 80002c0:	4619      	mov	r1, r3
 80002c2:	231a      	movs	r3, #26
 80002c4:	440b      	add	r3, r1
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d003      	beq.n	80002d2 <StartLEDheartbeat+0x56>
 80002ca:	4b31      	ldr	r3, [pc, #196]	; (8000390 <StartLEDheartbeat+0x114>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d107      	bne.n	80002e2 <StartLEDheartbeat+0x66>
					xQueueSendToBack(qVFDHandle, &temp, 10);
 80002d2:	4b30      	ldr	r3, [pc, #192]	; (8000394 <StartLEDheartbeat+0x118>)
 80002d4:	6818      	ldr	r0, [r3, #0]
 80002d6:	f107 010e 	add.w	r1, r7, #14
 80002da:	2300      	movs	r3, #0
 80002dc:	220a      	movs	r2, #10
 80002de:	f00a fd5d 	bl	800ad9c <xQueueGenericSend>
				if (cnt < DIGITS)
 80002e2:	4b2b      	ldr	r3, [pc, #172]	; (8000390 <StartLEDheartbeat+0x114>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	220a      	movs	r2, #10
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d20b      	bcs.n	8000304 <StartLEDheartbeat+0x88>
					xQueueSendToBack(qVFDHandle, &vfd_digits[cnt], 10);
 80002ec:	4b29      	ldr	r3, [pc, #164]	; (8000394 <StartLEDheartbeat+0x118>)
 80002ee:	6818      	ldr	r0, [r3, #0]
 80002f0:	4b27      	ldr	r3, [pc, #156]	; (8000390 <StartLEDheartbeat+0x114>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	4a28      	ldr	r2, [pc, #160]	; (8000398 <StartLEDheartbeat+0x11c>)
 80002f8:	1899      	adds	r1, r3, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	220a      	movs	r2, #10
 80002fe:	f00a fd4d 	bl	800ad9c <xQueueGenericSend>
 8000302:	e027      	b.n	8000354 <StartLEDheartbeat+0xd8>
				else if (cnt < DIGITS + ALPHAS)
 8000304:	4b22      	ldr	r3, [pc, #136]	; (8000390 <StartLEDheartbeat+0x114>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	461a      	mov	r2, r3
 800030a:	230a      	movs	r3, #10
 800030c:	4619      	mov	r1, r3
 800030e:	231a      	movs	r3, #26
 8000310:	440b      	add	r3, r1
 8000312:	429a      	cmp	r2, r3
 8000314:	da0e      	bge.n	8000334 <StartLEDheartbeat+0xb8>
					xQueueSendToBack(qVFDHandle, &vfd_alpha[cnt-DIGITS], 10);
 8000316:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <StartLEDheartbeat+0x118>)
 8000318:	6818      	ldr	r0, [r3, #0]
 800031a:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <StartLEDheartbeat+0x114>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	461a      	mov	r2, r3
 8000320:	230a      	movs	r3, #10
 8000322:	1ad3      	subs	r3, r2, r3
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	4a1d      	ldr	r2, [pc, #116]	; (800039c <StartLEDheartbeat+0x120>)
 8000328:	1899      	adds	r1, r3, r2
 800032a:	2300      	movs	r3, #0
 800032c:	220a      	movs	r2, #10
 800032e:	f00a fd35 	bl	800ad9c <xQueueGenericSend>
 8000332:	e00f      	b.n	8000354 <StartLEDheartbeat+0xd8>
				else
					xQueueSendToBack(qVFDHandle, &vfd_alpha_ru[cnt-DIGITS-ALPHAS], 10);
 8000334:	4b17      	ldr	r3, [pc, #92]	; (8000394 <StartLEDheartbeat+0x118>)
 8000336:	6818      	ldr	r0, [r3, #0]
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <StartLEDheartbeat+0x114>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	461a      	mov	r2, r3
 800033e:	230a      	movs	r3, #10
 8000340:	1ad3      	subs	r3, r2, r3
 8000342:	221a      	movs	r2, #26
 8000344:	1a9b      	subs	r3, r3, r2
 8000346:	005b      	lsls	r3, r3, #1
 8000348:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <StartLEDheartbeat+0x124>)
 800034a:	1899      	adds	r1, r3, r2
 800034c:	2300      	movs	r3, #0
 800034e:	220a      	movs	r2, #10
 8000350:	f00a fd24 	bl	800ad9c <xQueueGenericSend>
				if (++cnt >= ALPHAS + DIGITS + ALPHAR)
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <StartLEDheartbeat+0x114>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <StartLEDheartbeat+0x114>)
 800035e:	701a      	strb	r2, [r3, #0]
 8000360:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <StartLEDheartbeat+0x114>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	461a      	mov	r2, r3
 8000366:	231a      	movs	r3, #26
 8000368:	4619      	mov	r1, r3
 800036a:	230a      	movs	r3, #10
 800036c:	440b      	add	r3, r1
 800036e:	2121      	movs	r1, #33	; 0x21
 8000370:	440b      	add	r3, r1
 8000372:	429a      	cmp	r2, r3
 8000374:	db02      	blt.n	800037c <StartLEDheartbeat+0x100>
					cnt = 0;
 8000376:	4b06      	ldr	r3, [pc, #24]	; (8000390 <StartLEDheartbeat+0x114>)
 8000378:	2200      	movs	r2, #0
 800037a:	701a      	strb	r2, [r3, #0]

		}

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	6979      	ldr	r1, [r7, #20]
 8000382:	4618      	mov	r0, r3
 8000384:	f00b fa84 	bl	800b890 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000388:	e77f      	b.n	800028a <StartLEDheartbeat+0xe>
 800038a:	bf00      	nop
 800038c:	40011000 	.word	0x40011000
 8000390:	200001ae 	.word	0x200001ae
 8000394:	2000248c 	.word	0x2000248c
 8000398:	0800e0fc 	.word	0x0800e0fc
 800039c:	0800e110 	.word	0x0800e110
 80003a0:	0800e144 	.word	0x0800e144

080003a4 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 80003ac:	2000      	movs	r0, #0
 80003ae:	f00b ff35 	bl	800c21c <uxTaskGetStackHighWaterMark>
 80003b2:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80003b8:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <StartUSB_rcv+0x44>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f107 010f 	add.w	r1, r7, #15
 80003c0:	f04f 32ff 	mov.w	r2, #4294967295
 80003c4:	4618      	mov	r0, r3
 80003c6:	f00a fe7f 	bl	800b0c8 <xQueueReceive>
	  microrl_print_char(buf);
 80003ca:	7bfb      	ldrb	r3, [r7, #15]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f001 fdbb 	bl	8001f48 <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80003d2:	2000      	movs	r0, #0
 80003d4:	f00b ff22 	bl	800c21c <uxTaskGetStackHighWaterMark>
 80003d8:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 80003da:	693a      	ldr	r2, [r7, #16]
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	429a      	cmp	r2, r3
 80003e0:	d2ea      	bcs.n	80003b8 <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80003e6:	e7e7      	b.n	80003b8 <StartUSB_rcv+0x14>
 80003e8:	20002490 	.word	0x20002490

080003ec <StartUARTtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTtask */
void StartUARTtask(void *argument)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  uint8_t data;
  for(;;)
  {
	HAL_UART_Receive_IT(&huart2, &data, 1);
 80003f4:	f107 030f 	add.w	r3, r7, #15
 80003f8:	2201      	movs	r2, #1
 80003fa:	4619      	mov	r1, r3
 80003fc:	4809      	ldr	r0, [pc, #36]	; (8000424 <StartUARTtask+0x38>)
 80003fe:	f005 fedc 	bl	80061ba <HAL_UART_Receive_IT>
	/* Wait to be notified of an interrupt. */
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8000402:	f04f 31ff 	mov.w	r1, #4294967295
 8000406:	2001      	movs	r0, #1
 8000408:	f00c f804 	bl	800c414 <ulTaskNotifyTake>
	if (get_nema())
 800040c:	f002 fa64 	bl	80028d8 <get_nema>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d0ee      	beq.n	80003f4 <StartUARTtask+0x8>
		CDC_Transmit_FS(&data, 1);
 8000416:	f107 030f 	add.w	r3, r7, #15
 800041a:	2101      	movs	r1, #1
 800041c:	4618      	mov	r0, r3
 800041e:	f00d f8e9 	bl	800d5f4 <CDC_Transmit_FS>
	HAL_UART_Receive_IT(&huart2, &data, 1);
 8000422:	e7e7      	b.n	80003f4 <StartUARTtask+0x8>
 8000424:	20002618 	.word	0x20002618

08000428 <StartEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoder */
void StartEncoder(void *argument)
{
 8000428:	b5b0      	push	{r4, r5, r7, lr}
 800042a:	b0a6      	sub	sp, #152	; 0x98
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]

	static bool invert = true;
	static bool released = true;


  osDelay(500);
 8000430:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000434:	f00a f9dc 	bl	800a7f0 <osDelay>
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000438:	2201      	movs	r2, #1
 800043a:	2120      	movs	r1, #32
 800043c:	48be      	ldr	r0, [pc, #760]	; (8000738 <StartEncoder+0x310>)
 800043e:	f002 ffa4 	bl	800338a <HAL_GPIO_WritePin>
  union VFD {
	  uint8_t arr2[11][3];
	  uint8_t arr1[11*3];
  } vfd;

  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000442:	2300      	movs	r3, #0
 8000444:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000448:	e00b      	b.n	8000462 <StartEncoder+0x3a>
  {
	  vfd.arr1[i] = 0xFF;
 800044a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800044e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000452:	4413      	add	r3, r2
 8000454:	22ff      	movs	r2, #255	; 0xff
 8000456:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000458:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800045c:	3301      	adds	r3, #1
 800045e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000462:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000466:	2b20      	cmp	r3, #32
 8000468:	d9ef      	bls.n	800044a <StartEncoder+0x22>
  }
  uint8_t data;


  data = 0b01000000; // command 2, write to Display port
 800046a:	2340      	movs	r3, #64	; 0x40
 800046c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000476:	48b0      	ldr	r0, [pc, #704]	; (8000738 <StartEncoder+0x310>)
 8000478:	f002 ff87 	bl	800338a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800047c:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000480:	f04f 33ff 	mov.w	r3, #4294967295
 8000484:	2201      	movs	r2, #1
 8000486:	48ad      	ldr	r0, [pc, #692]	; (800073c <StartEncoder+0x314>)
 8000488:	f005 fa1e 	bl	80058c8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000492:	48a9      	ldr	r0, [pc, #676]	; (8000738 <StartEncoder+0x310>)
 8000494:	f002 ff79 	bl	800338a <HAL_GPIO_WritePin>
  osDelay(10);
 8000498:	200a      	movs	r0, #10
 800049a:	f00a f9a9 	bl	800a7f0 <osDelay>
  data = 0b11000000; // command 3, set address to 0
 800049e:	23c0      	movs	r3, #192	; 0xc0
 80004a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004aa:	48a3      	ldr	r0, [pc, #652]	; (8000738 <StartEncoder+0x310>)
 80004ac:	f002 ff6d 	bl	800338a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004b0:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295
 80004b8:	2201      	movs	r2, #1
 80004ba:	48a0      	ldr	r0, [pc, #640]	; (800073c <StartEncoder+0x314>)
 80004bc:	f005 fa04 	bl	80058c8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80004c0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80004c4:	f04f 33ff 	mov.w	r3, #4294967295
 80004c8:	2221      	movs	r2, #33	; 0x21
 80004ca:	489c      	ldr	r0, [pc, #624]	; (800073c <StartEncoder+0x314>)
 80004cc:	f005 f9fc 	bl	80058c8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d6:	4898      	ldr	r0, [pc, #608]	; (8000738 <StartEncoder+0x310>)
 80004d8:	f002 ff57 	bl	800338a <HAL_GPIO_WritePin>
  osDelay(10);
 80004dc:	200a      	movs	r0, #10
 80004de:	f00a f987 	bl	800a7f0 <osDelay>
  // init display, 11 digits 17 segments
  data = 0b00000111; // command 1, 11 digits 17 segments
 80004e2:	2307      	movs	r3, #7
 80004e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ee:	4892      	ldr	r0, [pc, #584]	; (8000738 <StartEncoder+0x310>)
 80004f0:	f002 ff4b 	bl	800338a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004f4:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80004f8:	f04f 33ff 	mov.w	r3, #4294967295
 80004fc:	2201      	movs	r2, #1
 80004fe:	488f      	ldr	r0, [pc, #572]	; (800073c <StartEncoder+0x314>)
 8000500:	f005 f9e2 	bl	80058c8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800050a:	488b      	ldr	r0, [pc, #556]	; (8000738 <StartEncoder+0x310>)
 800050c:	f002 ff3d 	bl	800338a <HAL_GPIO_WritePin>
  osDelay(10);
 8000510:	200a      	movs	r0, #10
 8000512:	f00a f96d 	bl	800a7f0 <osDelay>

  for (uint8_t i = 0; i <= 0b111; i++)
 8000516:	2300      	movs	r3, #0
 8000518:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800051c:	e02d      	b.n	800057a <StartEncoder+0x152>
  {
	  data = 0b10000000; // command 4
 800051e:	2380      	movs	r3, #128	; 0x80
 8000520:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  data |= 1<<3; // enable/disable display
 8000524:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000528:	f043 0308 	orr.w	r3, r3, #8
 800052c:	b2db      	uxtb	r3, r3
 800052e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  data |= i; // set brightness
 8000532:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000536:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800053a:	4313      	orrs	r3, r2
 800053c:	b2db      	uxtb	r3, r3
 800053e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	487b      	ldr	r0, [pc, #492]	; (8000738 <StartEncoder+0x310>)
 800054a:	f002 ff1e 	bl	800338a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800054e:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000552:	f04f 33ff 	mov.w	r3, #4294967295
 8000556:	2201      	movs	r2, #1
 8000558:	4878      	ldr	r0, [pc, #480]	; (800073c <StartEncoder+0x314>)
 800055a:	f005 f9b5 	bl	80058c8 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800055e:	2201      	movs	r2, #1
 8000560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000564:	4874      	ldr	r0, [pc, #464]	; (8000738 <StartEncoder+0x310>)
 8000566:	f002 ff10 	bl	800338a <HAL_GPIO_WritePin>
	  osDelay(250);
 800056a:	20fa      	movs	r0, #250	; 0xfa
 800056c:	f00a f940 	bl	800a7f0 <osDelay>
  for (uint8_t i = 0; i <= 0b111; i++)
 8000570:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000574:	3301      	adds	r3, #1
 8000576:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800057a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800057e:	2b07      	cmp	r3, #7
 8000580:	d9cd      	bls.n	800051e <StartEncoder+0xf6>
  }



  for (int i = 0; i < 11; i++)
 8000582:	2300      	movs	r3, #0
 8000584:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000588:	e041      	b.n	800060e <StartEncoder+0x1e6>
  {
	  for (int b = 0; b < 3; b++) // erasing from right to left
 800058a:	2300      	movs	r3, #0
 800058c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000590:	e012      	b.n	80005b8 <StartEncoder+0x190>
	  {
		  vfd.arr2[i][b] = 0;
 8000592:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000596:	4613      	mov	r3, r2
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	4413      	add	r3, r2
 800059c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80005a0:	441a      	add	r2, r3
 80005a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005a6:	4413      	add	r3, r2
 80005a8:	3b58      	subs	r3, #88	; 0x58
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
	  for (int b = 0; b < 3; b++) // erasing from right to left
 80005ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005b2:	3301      	adds	r3, #1
 80005b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80005b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005bc:	2b02      	cmp	r3, #2
 80005be:	dde8      	ble.n	8000592 <StartEncoder+0x16a>
	  }
	  data = 0b11000000; // command 3, set address to 0
 80005c0:	23c0      	movs	r3, #192	; 0xc0
 80005c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005cc:	485a      	ldr	r0, [pc, #360]	; (8000738 <StartEncoder+0x310>)
 80005ce:	f002 fedc 	bl	800338a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80005d2:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	2201      	movs	r2, #1
 80005dc:	4857      	ldr	r0, [pc, #348]	; (800073c <StartEncoder+0x314>)
 80005de:	f005 f973 	bl	80058c8 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80005e2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	2221      	movs	r2, #33	; 0x21
 80005ec:	4853      	ldr	r0, [pc, #332]	; (800073c <StartEncoder+0x314>)
 80005ee:	f005 f96b 	bl	80058c8 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f8:	484f      	ldr	r0, [pc, #316]	; (8000738 <StartEncoder+0x310>)
 80005fa:	f002 fec6 	bl	800338a <HAL_GPIO_WritePin>
	  osDelay(150);
 80005fe:	2096      	movs	r0, #150	; 0x96
 8000600:	f00a f8f6 	bl	800a7f0 <osDelay>
  for (int i = 0; i < 11; i++)
 8000604:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000608:	3301      	adds	r3, #1
 800060a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800060e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000612:	2b0a      	cmp	r3, #10
 8000614:	ddb9      	ble.n	800058a <StartEncoder+0x162>
  }
  osDelay (500);
 8000616:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061a:	f00a f8e9 	bl	800a7f0 <osDelay>

  //erase everything... just in case
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 800061e:	2300      	movs	r3, #0
 8000620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000624:	e00b      	b.n	800063e <StartEncoder+0x216>
	  vfd.arr1[a] = 0;
 8000626:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800062a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800062e:	4413      	add	r3, r2
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000638:	3301      	adds	r3, #1
 800063a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800063e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000642:	2b20      	cmp	r3, #32
 8000644:	d9ef      	bls.n	8000626 <StartEncoder+0x1fe>


  // fill everything
    for (int j = 1; j < 15; j++)
 8000646:	2301      	movs	r3, #1
 8000648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800064c:	e05d      	b.n	800070a <StartEncoder+0x2e2>
    {
  	  uint32_t temp = 1<<j;
 800064e:	2201      	movs	r2, #1
 8000650:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000654:	fa02 f303 	lsl.w	r3, r2, r3
 8000658:	667b      	str	r3, [r7, #100]	; 0x64
  	  for (int i = 1; i < 11; i++)
 800065a:	2301      	movs	r3, #1
 800065c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800065e:	e02a      	b.n	80006b6 <StartEncoder+0x28e>
  	  {
  		  for (int b = 0; b < 3; b++)
 8000660:	2300      	movs	r3, #0
 8000662:	67bb      	str	r3, [r7, #120]	; 0x78
 8000664:	e021      	b.n	80006aa <StartEncoder+0x282>
  		  {
  			  vfd.arr2[i][b] |= (temp>>(b<<3))&0xFF;
 8000666:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000672:	441a      	add	r2, r3
 8000674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000676:	4413      	add	r3, r2
 8000678:	3b58      	subs	r3, #88	; 0x58
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000682:	fa21 f303 	lsr.w	r3, r1, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	4313      	orrs	r3, r2
 800068a:	b2d9      	uxtb	r1, r3
 800068c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800068e:	4613      	mov	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4413      	add	r3, r2
 8000694:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000698:	441a      	add	r2, r3
 800069a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800069c:	4413      	add	r3, r2
 800069e:	3b58      	subs	r3, #88	; 0x58
 80006a0:	460a      	mov	r2, r1
 80006a2:	701a      	strb	r2, [r3, #0]
  		  for (int b = 0; b < 3; b++)
 80006a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006a6:	3301      	adds	r3, #1
 80006a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80006aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	ddda      	ble.n	8000666 <StartEncoder+0x23e>
  	  for (int i = 1; i < 11; i++)
 80006b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006b2:	3301      	adds	r3, #1
 80006b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80006b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006b8:	2b0a      	cmp	r3, #10
 80006ba:	ddd1      	ble.n	8000660 <StartEncoder+0x238>
  		  }
  	  }
  	  data = 0b11000000; // command 3, set address to 0
 80006bc:	23c0      	movs	r3, #192	; 0xc0
 80006be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c8:	481b      	ldr	r0, [pc, #108]	; (8000738 <StartEncoder+0x310>)
 80006ca:	f002 fe5e 	bl	800338a <HAL_GPIO_WritePin>
  	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80006ce:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
 80006d6:	2201      	movs	r2, #1
 80006d8:	4818      	ldr	r0, [pc, #96]	; (800073c <StartEncoder+0x314>)
 80006da:	f005 f8f5 	bl	80058c8 <HAL_SPI_Transmit>
  	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80006de:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	2221      	movs	r2, #33	; 0x21
 80006e8:	4814      	ldr	r0, [pc, #80]	; (800073c <StartEncoder+0x314>)
 80006ea:	f005 f8ed 	bl	80058c8 <HAL_SPI_Transmit>
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f4:	4810      	ldr	r0, [pc, #64]	; (8000738 <StartEncoder+0x310>)
 80006f6:	f002 fe48 	bl	800338a <HAL_GPIO_WritePin>
  	  osDelay(100);
 80006fa:	2064      	movs	r0, #100	; 0x64
 80006fc:	f00a f878 	bl	800a7f0 <osDelay>
    for (int j = 1; j < 15; j++)
 8000700:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000704:	3301      	adds	r3, #1
 8000706:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800070a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800070e:	2b0e      	cmp	r3, #14
 8000710:	dd9d      	ble.n	800064e <StartEncoder+0x226>
    }

    const uint8_t arr[][2] = {{6, 0},
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <StartEncoder+0x318>)
 8000714:	f107 040c 	add.w	r4, r7, #12
 8000718:	461d      	mov	r5, r3
 800071a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000726:	682b      	ldr	r3, [r5, #0]
 8000728:	8023      	strh	r3, [r4, #0]
					   {9, 16},
					   {10, 16},
					   {10, 15},
    };

    for (int j = 0; j < sizeof(arr)/2; j++)
 800072a:	2300      	movs	r3, #0
 800072c:	677b      	str	r3, [r7, #116]	; 0x74
 800072e:	e06d      	b.n	800080c <StartEncoder+0x3e4>
    {
		for (int b = 0; b < 3; b++)
 8000730:	2300      	movs	r3, #0
 8000732:	673b      	str	r3, [r7, #112]	; 0x70
 8000734:	e042      	b.n	80007bc <StartEncoder+0x394>
 8000736:	bf00      	nop
 8000738:	40010c00 	.word	0x40010c00
 800073c:	20002578 	.word	0x20002578
 8000740:	0800def0 	.word	0x0800def0
		  vfd.arr2[arr[j][0]][b] |= ((1<<arr[j][1])>>(b<<3))&0xFF;
 8000744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800074c:	4413      	add	r3, r2
 800074e:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8000752:	461a      	mov	r2, r3
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800075e:	441a      	add	r2, r3
 8000760:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000762:	4413      	add	r3, r2
 8000764:	3b58      	subs	r3, #88	; 0x58
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b25a      	sxtb	r2, r3
 800076a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8000772:	440b      	add	r3, r1
 8000774:	f813 3c8b 	ldrb.w	r3, [r3, #-139]
 8000778:	4619      	mov	r1, r3
 800077a:	2301      	movs	r3, #1
 800077c:	fa03 f101 	lsl.w	r1, r3, r1
 8000780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	fa41 f303 	asr.w	r3, r1, r3
 8000788:	b25b      	sxtb	r3, r3
 800078a:	4313      	orrs	r3, r2
 800078c:	b259      	sxtb	r1, r3
 800078e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000796:	4413      	add	r3, r2
 8000798:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 800079c:	461a      	mov	r2, r3
 800079e:	b2c9      	uxtb	r1, r1
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80007aa:	441a      	add	r2, r3
 80007ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007ae:	4413      	add	r3, r2
 80007b0:	3b58      	subs	r3, #88	; 0x58
 80007b2:	460a      	mov	r2, r1
 80007b4:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++)
 80007b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007b8:	3301      	adds	r3, #1
 80007ba:	673b      	str	r3, [r7, #112]	; 0x70
 80007bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007be:	2b02      	cmp	r3, #2
 80007c0:	ddc0      	ble.n	8000744 <StartEncoder+0x31c>
		data = 0b11000000; // command 3, set address to 0
 80007c2:	23c0      	movs	r3, #192	; 0xc0
 80007c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ce:	48a9      	ldr	r0, [pc, #676]	; (8000a74 <StartEncoder+0x64c>)
 80007d0:	f002 fddb 	bl	800338a <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80007d4:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	2201      	movs	r2, #1
 80007de:	48a6      	ldr	r0, [pc, #664]	; (8000a78 <StartEncoder+0x650>)
 80007e0:	f005 f872 	bl	80058c8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80007e4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	2221      	movs	r2, #33	; 0x21
 80007ee:	48a2      	ldr	r0, [pc, #648]	; (8000a78 <StartEncoder+0x650>)
 80007f0:	f005 f86a 	bl	80058c8 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fa:	489e      	ldr	r0, [pc, #632]	; (8000a74 <StartEncoder+0x64c>)
 80007fc:	f002 fdc5 	bl	800338a <HAL_GPIO_WritePin>
		osDelay(100);
 8000800:	2064      	movs	r0, #100	; 0x64
 8000802:	f009 fff5 	bl	800a7f0 <osDelay>
    for (int j = 0; j < sizeof(arr)/2; j++)
 8000806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000808:	3301      	adds	r3, #1
 800080a:	677b      	str	r3, [r7, #116]	; 0x74
 800080c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800080e:	2b18      	cmp	r3, #24
 8000810:	d98e      	bls.n	8000730 <StartEncoder+0x308>
    }

    osDelay(500);
 8000812:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000816:	f009 ffeb 	bl	800a7f0 <osDelay>

    //erase everything... just in case
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 800081a:	2300      	movs	r3, #0
 800081c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800081e:	e008      	b.n	8000832 <StartEncoder+0x40a>
  	  vfd.arr1[a] = 0;
 8000820:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000826:	4413      	add	r3, r2
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 800082c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800082e:	3301      	adds	r3, #1
 8000830:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000834:	2b20      	cmp	r3, #32
 8000836:	d9f3      	bls.n	8000820 <StartEncoder+0x3f8>
//    {
//        vfd.arr2[i+1][0] = vfd_digits[i]&0xFF;
//        vfd.arr2[i+1][1] = (vfd_digits[i]>>8)&0xFF;
//    }

	data = 0b11000000; // command 3, set address to 0
 8000838:	23c0      	movs	r3, #192	; 0xc0
 800083a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000844:	488b      	ldr	r0, [pc, #556]	; (8000a74 <StartEncoder+0x64c>)
 8000846:	f002 fda0 	bl	800338a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800084a:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	2201      	movs	r2, #1
 8000854:	4888      	ldr	r0, [pc, #544]	; (8000a78 <StartEncoder+0x650>)
 8000856:	f005 f837 	bl	80058c8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 800085a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	2221      	movs	r2, #33	; 0x21
 8000864:	4884      	ldr	r0, [pc, #528]	; (8000a78 <StartEncoder+0x650>)
 8000866:	f005 f82f 	bl	80058c8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000870:	4880      	ldr	r0, [pc, #512]	; (8000a74 <StartEncoder+0x64c>)
 8000872:	f002 fd8a 	bl	800338a <HAL_GPIO_WritePin>

  /* Infinite loop */
  for(;;)
  {
	  uint16_t buf;
	  if(qVFDHandle && xQueueReceive(qVFDHandle, &buf, 1))
 8000876:	4b81      	ldr	r3, [pc, #516]	; (8000a7c <StartEncoder+0x654>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d064      	beq.n	8000948 <StartEncoder+0x520>
 800087e:	4b7f      	ldr	r3, [pc, #508]	; (8000a7c <StartEncoder+0x654>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f107 010a 	add.w	r1, r7, #10
 8000886:	2201      	movs	r2, #1
 8000888:	4618      	mov	r0, r3
 800088a:	f00a fc1d 	bl	800b0c8 <xQueueReceive>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d059      	beq.n	8000948 <StartEncoder+0x520>
	  {
		    for (int i = 10; i > 1; i--)
 8000894:	230a      	movs	r3, #10
 8000896:	66bb      	str	r3, [r7, #104]	; 0x68
 8000898:	e02a      	b.n	80008f0 <StartEncoder+0x4c8>
		    {
				vfd.arr2[i][0] = vfd.arr2[i-1][0];
 800089a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800089c:	1e5a      	subs	r2, r3, #1
 800089e:	4613      	mov	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4413      	add	r3, r2
 80008a4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80008a8:	4413      	add	r3, r2
 80008aa:	3b58      	subs	r3, #88	; 0x58
 80008ac:	7819      	ldrb	r1, [r3, #0]
 80008ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80008ba:	4413      	add	r3, r2
 80008bc:	3b58      	subs	r3, #88	; 0x58
 80008be:	460a      	mov	r2, r1
 80008c0:	701a      	strb	r2, [r3, #0]
				vfd.arr2[i][1] = vfd.arr2[i-1][1];
 80008c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008c4:	1e5a      	subs	r2, r3, #1
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80008d0:	4413      	add	r3, r2
 80008d2:	3b57      	subs	r3, #87	; 0x57
 80008d4:	7819      	ldrb	r1, [r3, #0]
 80008d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80008e2:	4413      	add	r3, r2
 80008e4:	3b57      	subs	r3, #87	; 0x57
 80008e6:	460a      	mov	r2, r1
 80008e8:	701a      	strb	r2, [r3, #0]
		    for (int i = 10; i > 1; i--)
 80008ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008ec:	3b01      	subs	r3, #1
 80008ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80008f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	dcd1      	bgt.n	800089a <StartEncoder+0x472>
		    }
			vfd.arr2[1][0] = buf & 0xFF;
 80008f6:	897b      	ldrh	r3, [r7, #10]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			vfd.arr2[1][1] = (buf>>8)&0xFF;
 80008fe:	897b      	ldrh	r3, [r7, #10]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	b29b      	uxth	r3, r3
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			data = 0b11000000; // command 3, set address to 0
 800090a:	23c0      	movs	r3, #192	; 0xc0
 800090c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000916:	4857      	ldr	r0, [pc, #348]	; (8000a74 <StartEncoder+0x64c>)
 8000918:	f002 fd37 	bl	800338a <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800091c:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000920:	f04f 33ff 	mov.w	r3, #4294967295
 8000924:	2201      	movs	r2, #1
 8000926:	4854      	ldr	r0, [pc, #336]	; (8000a78 <StartEncoder+0x650>)
 8000928:	f004 ffce 	bl	80058c8 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 800092c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000930:	f04f 33ff 	mov.w	r3, #4294967295
 8000934:	2221      	movs	r2, #33	; 0x21
 8000936:	4850      	ldr	r0, [pc, #320]	; (8000a78 <StartEncoder+0x650>)
 8000938:	f004 ffc6 	bl	80058c8 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000942:	484c      	ldr	r0, [pc, #304]	; (8000a74 <StartEncoder+0x64c>)
 8000944:	f002 fd21 	bl	800338a <HAL_GPIO_WritePin>
	  }

	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 8000948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094c:	4849      	ldr	r0, [pc, #292]	; (8000a74 <StartEncoder+0x64c>)
 800094e:	f002 fd05 	bl	800335c <HAL_GPIO_ReadPin>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d003      	beq.n	8000960 <StartEncoder+0x538>
	  {
		  released = true;
 8000958:	4b49      	ldr	r3, [pc, #292]	; (8000a80 <StartEncoder+0x658>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e015      	b.n	800098c <StartEncoder+0x564>
	  } else if (released)
 8000960:	4b47      	ldr	r3, [pc, #284]	; (8000a80 <StartEncoder+0x658>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d011      	beq.n	800098c <StartEncoder+0x564>
	  {
		  released = false;
 8000968:	4b45      	ldr	r3, [pc, #276]	; (8000a80 <StartEncoder+0x658>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
		  invert = !invert;
 800096e:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <StartEncoder+0x65c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	bf14      	ite	ne
 8000976:	2301      	movne	r3, #1
 8000978:	2300      	moveq	r3, #0
 800097a:	b2db      	uxtb	r3, r3
 800097c:	f083 0301 	eor.w	r3, r3, #1
 8000980:	b2db      	uxtb	r3, r3
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b3e      	ldr	r3, [pc, #248]	; (8000a84 <StartEncoder+0x65c>)
 800098a:	701a      	strb	r2, [r3, #0]
	  }

	  data = 0b01000001; // command 2, write to LED port
 800098c:	2341      	movs	r3, #65	; 0x41
 800098e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000998:	4836      	ldr	r0, [pc, #216]	; (8000a74 <StartEncoder+0x64c>)
 800099a:	f002 fcf6 	bl	800338a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800099e:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	2201      	movs	r2, #1
 80009a8:	4833      	ldr	r0, [pc, #204]	; (8000a78 <StartEncoder+0x650>)
 80009aa:	f004 ff8d 	bl	80058c8 <HAL_SPI_Transmit>
	  osDelay(10);
 80009ae:	200a      	movs	r0, #10
 80009b0:	f009 ff1e 	bl	800a7f0 <osDelay>

	  data = ~(1<<((encoder_value >> 2)&0b11));
 80009b4:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <StartEncoder+0x660>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	f003 0303 	and.w	r3, r3, #3
 80009c0:	2201      	movs	r2, #1
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
//	  if (invert)
//		  data =~data;
	  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, invert);
 80009d0:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <StartEncoder+0x65c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	2120      	movs	r1, #32
 80009d8:	4826      	ldr	r0, [pc, #152]	; (8000a74 <StartEncoder+0x64c>)
 80009da:	f002 fcd6 	bl	800338a <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80009de:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	2201      	movs	r2, #1
 80009e8:	4823      	ldr	r0, [pc, #140]	; (8000a78 <StartEncoder+0x650>)
 80009ea:	f004 ff6d 	bl	80058c8 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f4:	481f      	ldr	r0, [pc, #124]	; (8000a74 <StartEncoder+0x64c>)
 80009f6:	f002 fcc8 	bl	800338a <HAL_GPIO_WritePin>

	  osDelay(10);
 80009fa:	200a      	movs	r0, #10
 80009fc:	f009 fef8 	bl	800a7f0 <osDelay>
	  data = 0b10000000; // command 4
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  data |= invert<<3; // enable/disable display
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <StartEncoder+0x65c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	b25a      	sxtb	r2, r3
 8000a0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000a12:	b25b      	sxtb	r3, r3
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  data |= ((encoder_value >> 2) - 1)&0b111; // set brightness
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <StartEncoder+0x660>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	b25a      	sxtb	r2, r3
 8000a34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4a:	480a      	ldr	r0, [pc, #40]	; (8000a74 <StartEncoder+0x64c>)
 8000a4c:	f002 fc9d 	bl	800338a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000a50:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <StartEncoder+0x650>)
 8000a5c:	f004 ff34 	bl	80058c8 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a66:	4803      	ldr	r0, [pc, #12]	; (8000a74 <StartEncoder+0x64c>)
 8000a68:	f002 fc8f 	bl	800338a <HAL_GPIO_WritePin>
	  osDelay(10);
 8000a6c:	200a      	movs	r0, #10
 8000a6e:	f009 febf 	bl	800a7f0 <osDelay>
  {
 8000a72:	e700      	b.n	8000876 <StartEncoder+0x44e>
 8000a74:	40010c00 	.word	0x40010c00
 8000a78:	20002578 	.word	0x20002578
 8000a7c:	2000248c 	.word	0x2000248c
 8000a80:	20000000 	.word	0x20000000
 8000a84:	20000001 	.word	0x20000001
 8000a88:	200001ac 	.word	0x200001ac

08000a8c <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_UART_RxCpltCallback+0x44>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d115      	bne.n	8000ac8 <HAL_UART_RxCpltCallback+0x3c>
		return;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]


   /* Notify the task that the transmission is complete by setting the TX_BIT
   in the task's notification value. */
	vTaskNotifyGiveFromISR( UARTtaskHandle,
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_UART_RxCpltCallback+0x48>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f107 020c 	add.w	r2, r7, #12
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f00b fcfa 	bl	800c4a4 <vTaskNotifyGiveFromISR>

   /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
   should be performed to ensure the interrupt returns directly to the highest
   priority task.  The macro used for this purpose is dependent on the port in
   use and may be called portEND_SWITCHING_ISR(). */
   portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d009      	beq.n	8000aca <HAL_UART_RxCpltCallback+0x3e>
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_UART_RxCpltCallback+0x4c>)
 8000ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	f3bf 8f4f 	dsb	sy
 8000ac2:	f3bf 8f6f 	isb	sy
 8000ac6:	e000      	b.n	8000aca <HAL_UART_RxCpltCallback+0x3e>
		return;
 8000ac8:	bf00      	nop
}
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20002618 	.word	0x20002618
 8000ad4:	20002480 	.word	0x20002480
 8000ad8:	e000ed04 	.word	0xe000ed04

08000adc <process_encoder>:

void process_encoder(void)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000ae2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae6:	483c      	ldr	r0, [pc, #240]	; (8000bd8 <process_encoder+0xfc>)
 8000ae8:	f002 fc38 	bl	800335c <HAL_GPIO_ReadPin>
 8000aec:	4603      	mov	r3, r0
 8000aee:	461c      	mov	r4, r3
		   0b10*HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin));
 8000af0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af4:	4838      	ldr	r0, [pc, #224]	; (8000bd8 <process_encoder+0xfc>)
 8000af6:	f002 fc31 	bl	800335c <HAL_GPIO_ReadPin>
 8000afa:	4603      	mov	r3, r0
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	4423      	add	r3, r4
 8000b02:	71fb      	strb	r3, [r7, #7]
	switch(old)
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <process_encoder+0x100>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d85e      	bhi.n	8000bca <process_encoder+0xee>
 8000b0c:	a201      	add	r2, pc, #4	; (adr r2, 8000b14 <process_encoder+0x38>)
 8000b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b12:	bf00      	nop
 8000b14:	08000b4b 	.word	0x08000b4b
 8000b18:	08000b71 	.word	0x08000b71
 8000b1c:	08000b25 	.word	0x08000b25
 8000b20:	08000b97 	.word	0x08000b97
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	d105      	bne.n	8000b36 <process_encoder+0x5a>
 8000b2a:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <process_encoder+0x104>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <process_encoder+0x104>)
 8000b34:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d13f      	bne.n	8000bbc <process_encoder+0xe0>
 8000b3c:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <process_encoder+0x104>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <process_encoder+0x104>)
 8000b46:	801a      	strh	r2, [r3, #0]
			break;
 8000b48:	e038      	b.n	8000bbc <process_encoder+0xe0>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d105      	bne.n	8000b5c <process_encoder+0x80>
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <process_encoder+0x104>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <process_encoder+0x104>)
 8000b5a:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d12e      	bne.n	8000bc0 <process_encoder+0xe4>
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <process_encoder+0x104>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <process_encoder+0x104>)
 8000b6c:	801a      	strh	r2, [r3, #0]
			break;
 8000b6e:	e027      	b.n	8000bc0 <process_encoder+0xe4>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d105      	bne.n	8000b82 <process_encoder+0xa6>
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <process_encoder+0x104>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <process_encoder+0x104>)
 8000b80:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b03      	cmp	r3, #3
 8000b86:	d11d      	bne.n	8000bc4 <process_encoder+0xe8>
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <process_encoder+0x104>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <process_encoder+0x104>)
 8000b92:	801a      	strh	r2, [r3, #0]
			break;
 8000b94:	e016      	b.n	8000bc4 <process_encoder+0xe8>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d105      	bne.n	8000ba8 <process_encoder+0xcc>
 8000b9c:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <process_encoder+0x104>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <process_encoder+0x104>)
 8000ba6:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d10c      	bne.n	8000bc8 <process_encoder+0xec>
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <process_encoder+0x104>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <process_encoder+0x104>)
 8000bb8:	801a      	strh	r2, [r3, #0]
			break;
 8000bba:	e005      	b.n	8000bc8 <process_encoder+0xec>
			break;
 8000bbc:	bf00      	nop
 8000bbe:	e004      	b.n	8000bca <process_encoder+0xee>
			break;
 8000bc0:	bf00      	nop
 8000bc2:	e002      	b.n	8000bca <process_encoder+0xee>
			break;
 8000bc4:	bf00      	nop
 8000bc6:	e000      	b.n	8000bca <process_encoder+0xee>
			break;
 8000bc8:	bf00      	nop
			}
		}
	old = new;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <process_encoder+0x100>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	7013      	strb	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	40010c00 	.word	0x40010c00
 8000bdc:	200001af 	.word	0x200001af
 8000be0:	200001ac 	.word	0x200001ac

08000be4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf8:	4b49      	ldr	r3, [pc, #292]	; (8000d20 <MX_GPIO_Init+0x13c>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a48      	ldr	r2, [pc, #288]	; (8000d20 <MX_GPIO_Init+0x13c>)
 8000bfe:	f043 0310 	orr.w	r3, r3, #16
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b46      	ldr	r3, [pc, #280]	; (8000d20 <MX_GPIO_Init+0x13c>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0310 	and.w	r3, r3, #16
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c10:	4b43      	ldr	r3, [pc, #268]	; (8000d20 <MX_GPIO_Init+0x13c>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a42      	ldr	r2, [pc, #264]	; (8000d20 <MX_GPIO_Init+0x13c>)
 8000c16:	f043 0320 	orr.w	r3, r3, #32
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b40      	ldr	r3, [pc, #256]	; (8000d20 <MX_GPIO_Init+0x13c>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0320 	and.w	r3, r3, #32
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <MX_GPIO_Init+0x13c>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a3c      	ldr	r2, [pc, #240]	; (8000d20 <MX_GPIO_Init+0x13c>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <MX_GPIO_Init+0x13c>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c40:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <MX_GPIO_Init+0x13c>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a36      	ldr	r2, [pc, #216]	; (8000d20 <MX_GPIO_Init+0x13c>)
 8000c46:	f043 0308 	orr.w	r3, r3, #8
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <MX_GPIO_Init+0x13c>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0308 	and.w	r3, r3, #8
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5e:	4831      	ldr	r0, [pc, #196]	; (8000d24 <MX_GPIO_Init+0x140>)
 8000c60:	f002 fb93 	bl	800338a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 8000c6a:	482f      	ldr	r0, [pc, #188]	; (8000d28 <MX_GPIO_Init+0x144>)
 8000c6c:	f002 fb8d 	bl	800338a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c76:	482d      	ldr	r0, [pc, #180]	; (8000d2c <MX_GPIO_Init+0x148>)
 8000c78:	f002 fb87 	bl	800338a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	4619      	mov	r1, r3
 8000c94:	4823      	ldr	r0, [pc, #140]	; (8000d24 <MX_GPIO_Init+0x140>)
 8000c96:	f002 f9dd 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9e:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	4619      	mov	r1, r3
 8000cac:	481f      	ldr	r0, [pc, #124]	; (8000d2c <MX_GPIO_Init+0x148>)
 8000cae:	f002 f9d1 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin|enc_s_Pin;
 8000cb2:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4818      	ldr	r0, [pc, #96]	; (8000d28 <MX_GPIO_Init+0x144>)
 8000cc8:	f002 f9c4 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000ccc:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 8000cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4810      	ldr	r0, [pc, #64]	; (8000d28 <MX_GPIO_Init+0x144>)
 8000ce6:	f002 f9b5 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	480a      	ldr	r0, [pc, #40]	; (8000d2c <MX_GPIO_Init+0x148>)
 8000d04:	f002 f9a6 	bl	8003054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2105      	movs	r1, #5
 8000d0c:	2006      	movs	r0, #6
 8000d0e:	f002 f8c6 	bl	8002e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d12:	2006      	movs	r0, #6
 8000d14:	f002 f8df 	bl	8002ed6 <HAL_NVIC_EnableIRQ>

}
 8000d18:	bf00      	nop
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40011000 	.word	0x40011000
 8000d28:	40010c00 	.word	0x40010c00
 8000d2c:	40010800 	.word	0x40010800
 8000d30:	10110000 	.word	0x10110000

08000d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d38:	f001 ffca 	bl	8002cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3c:	f000 f80d 	bl	8000d5a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d40:	f7ff ff50 	bl	8000be4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000d44:	f001 fdd2 	bl	80028ec <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000d48:	f001 ff20 	bl	8002b8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000d4c:	f009 fc40 	bl	800a5d0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000d50:	f7ff fa10 	bl	8000174 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000d54:	f009 fc6e 	bl	800a634 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <main+0x24>

08000d5a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b094      	sub	sp, #80	; 0x50
 8000d5e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d64:	2228      	movs	r2, #40	; 0x28
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f00d f86d 	bl	800de48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000da8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 f802 	bl	8004dbc <HAL_RCC_OscConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000dbe:	f000 f839 	bl	8000e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc2:	230f      	movs	r3, #15
 8000dc4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2102      	movs	r1, #2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f004 fa6c 	bl	80052bc <HAL_RCC_ClockConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dea:	f000 f823 	bl	8000e34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dee:	2310      	movs	r3, #16
 8000df0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 fc2b 	bl	8005654 <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e04:	f000 f816 	bl	8000e34 <Error_Handler>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3750      	adds	r7, #80	; 0x50
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e22:	f001 ff6b 	bl	8002cfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40012c00 	.word	0x40012c00

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <Error_Handler+0x8>

08000e3e <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b085      	sub	sp, #20
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	5c8a      	ldrb	r2, [r1, r2]
 8000e52:	4413      	add	r3, r2
 8000e54:	3301      	adds	r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e5c:	dd02      	ble.n	8000e64 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	3b40      	subs	r3, #64	; 0x40
 8000e62:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	5cd3      	ldrb	r3, [r2, r3]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <hist_is_space_for_new+0x1a>
		return true;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e01e      	b.n	8000ecc <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	429a      	cmp	r2, r3
 8000e98:	db0c      	blt.n	8000eb4 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	da0c      	bge.n	8000eca <hist_is_space_for_new+0x56>
			return true;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e00b      	b.n	8000ecc <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	da01      	bge.n	8000eca <hist_is_space_for_new+0x56>
			return true;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <hist_is_space_for_new+0x58>
	}
	return false;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr

08000ed6 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b3e      	cmp	r3, #62	; 0x3e
 8000ee6:	dc61      	bgt.n	8000fac <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8000ee8:	e002      	b.n	8000ef0 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff ffa7 	bl	8000e3e <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f7ff ffbe 	bl	8000e74 <hist_is_space_for_new>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f5      	beq.n	8000eea <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	5cd3      	ldrb	r3, [r2, r3]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d105      	bne.n	8000f16 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	b2d1      	uxtb	r1, r2
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	da0a      	bge.n	8000f3a <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f00c ff60 	bl	800ddf8 <memcpy>
 8000f38:	e018      	b.n	8000f6c <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000f42:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f00c ff50 	bl	800ddf8 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	18d1      	adds	r1, r2, r3
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	f00c ff46 	bl	800ddf8 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	b2d1      	uxtb	r1, r2
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f8c:	dd05      	ble.n	8000f9a <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	649a      	str	r2, [r3, #72]	; 0x48
 8000faa:	e000      	b.n	8000fae <hist_save_line+0xd8>
		return;
 8000fac:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	; 0x30
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8000fca:	e010      	b.n	8000fee <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd0:	4413      	add	r3, r2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fd8:	4413      	add	r3, r2
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8000fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fde:	2b3f      	cmp	r3, #63	; 0x3f
 8000fe0:	dd02      	ble.n	8000fe8 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8000fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe4:	3b40      	subs	r3, #64	; 0x40
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8000fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fea:	3301      	adds	r3, #1
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1e8      	bne.n	8000fcc <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d176      	bne.n	80010ee <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001006:	429a      	cmp	r2, r3
 8001008:	f2c0 80d6 	blt.w	80011b8 <hist_restore_line+0x204>
			int header = pThis->begin;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8001016:	e010      	b.n	800103a <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	4413      	add	r3, r2
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001024:	4413      	add	r3, r2
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	2b3f      	cmp	r3, #63	; 0x3f
 800102c:	dd02      	ble.n	8001034 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	3b40      	subs	r3, #64	; 0x40
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	3301      	adds	r3, #1
 8001038:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <hist_restore_line+0xa2>
 8001046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	1e5a      	subs	r2, r3, #1
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001052:	429a      	cmp	r2, r3
 8001054:	d1e0      	bne.n	8001018 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 80aa 	beq.w	80011b8 <hist_restore_line+0x204>
					pThis->cur++;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	4413      	add	r3, r2
 800107c:	2b3f      	cmp	r3, #63	; 0x3f
 800107e:	dc11      	bgt.n	80010a4 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8001080:	2233      	movs	r2, #51	; 0x33
 8001082:	2100      	movs	r1, #0
 8001084:	68b8      	ldr	r0, [r7, #8]
 8001086:	f00c fedf 	bl	800de48 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	3301      	adds	r3, #1
 8001090:	18d1      	adds	r1, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68b8      	ldr	r0, [r7, #8]
 800109e:	f00c feab 	bl	800ddf8 <memcpy>
 80010a2:	e01f      	b.n	80010e4 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80010aa:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 80010ac:	2233      	movs	r2, #51	; 0x33
 80010ae:	2100      	movs	r1, #0
 80010b0:	68b8      	ldr	r0, [r7, #8]
 80010b2:	f00c fec9 	bl	800de48 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	3301      	adds	r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4619      	mov	r1, r3
 80010c2:	68b8      	ldr	r0, [r7, #8]
 80010c4:	f00c fe98 	bl	800ddf8 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	18d0      	adds	r0, r2, r3
 80010ce:	68f9      	ldr	r1, [r7, #12]
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	461a      	mov	r2, r3
 80010e0:	f00c fe8a 	bl	800ddf8 <memcpy>
				}
				return pThis->ring_buf[header];
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	4413      	add	r3, r2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	e066      	b.n	80011bc <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	dd5e      	ble.n	80011b4 <hist_restore_line+0x200>
				pThis->cur--;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010fa:	1e5a      	subs	r2, r3, #1
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 800110a:	e010      	b.n	800112e <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	4413      	add	r3, r2
 800111a:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	2b3f      	cmp	r3, #63	; 0x3f
 8001120:	dd02      	ble.n	8001128 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3b40      	subs	r3, #64	; 0x40
 8001126:	61fb      	str	r3, [r7, #28]
				j++;
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	3301      	adds	r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	4413      	add	r3, r2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d006      	beq.n	8001148 <hist_restore_line+0x194>
 800113a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	1ad2      	subs	r2, r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001144:	429a      	cmp	r2, r3
 8001146:	d1e1      	bne.n	800110c <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	4413      	add	r3, r2
 8001156:	2b3f      	cmp	r3, #63	; 0x3f
 8001158:	dc0c      	bgt.n	8001174 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	3301      	adds	r3, #1
 8001160:	18d1      	adds	r1, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68b8      	ldr	r0, [r7, #8]
 800116e:	f00c fe43 	bl	800ddf8 <memcpy>
 8001172:	e01a      	b.n	80011aa <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800117a:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3301      	adds	r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	4619      	mov	r1, r3
 8001188:	68b8      	ldr	r0, [r7, #8]
 800118a:	f00c fe35 	bl	800ddf8 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	18d0      	adds	r0, r2, r3
 8001194:	68f9      	ldr	r1, [r7, #12]
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	4413      	add	r3, r2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	f00c fe27 	bl	800ddf8 <memcpy>
			}
			return pThis->ring_buf[header];
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	e003      	b.n	80011bc <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	e001      	b.n	80011bc <hist_restore_line+0x208>
		}
	}
	return -1;
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3730      	adds	r7, #48	; 0x30
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
	int i = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
	int ind = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 80011d8:	e002      	b.n	80011e0 <split+0x1c>
			ind++;
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	3301      	adds	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4413      	add	r3, r2
 80011e6:	3354      	adds	r3, #84	; 0x54
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d103      	bne.n	80011f6 <split+0x32>
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	dbf1      	blt.n	80011da <split+0x16>
		}
		if (!(ind < limit)) return i;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	db01      	blt.n	8001202 <split+0x3e>
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	e024      	b.n	800124c <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	1c58      	adds	r0, r3, #1
 800120e:	6178      	str	r0, [r7, #20]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	4403      	add	r3, r0
 8001216:	440a      	add	r2, r1
 8001218:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b04      	cmp	r3, #4
 800121e:	dd05      	ble.n	800122c <split+0x68>
			return -1;
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	e012      	b.n	800124c <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	3301      	adds	r3, #1
 800122a:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4413      	add	r3, r2
 8001232:	3354      	adds	r3, #84	; 0x54
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <split+0x7e>
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	429a      	cmp	r2, r3
 8001240:	dbf1      	blt.n	8001226 <split+0x62>
		}
		if (!(ind < limit)) return i;
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	429a      	cmp	r2, r3
 8001248:	dbca      	blt.n	80011e0 <split+0x1c>
 800124a:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 800124c:	4618      	mov	r0, r3
 800124e:	371c      	adds	r7, #28
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr

08001256 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001268:	4610      	mov	r0, r2
 800126a:	4798      	blx	r3
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001282:	4803      	ldr	r0, [pc, #12]	; (8001290 <terminal_backspace+0x1c>)
 8001284:	4798      	blx	r3
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	0800df34 	.word	0x0800df34

08001294 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012a2:	4803      	ldr	r0, [pc, #12]	; (80012b0 <terminal_newline+0x1c>)
 80012a4:	4798      	blx	r3
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	0800df3c 	.word	0x0800df3c

080012b4 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	2300      	movs	r3, #0
 80012c4:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d0:	d235      	bcs.n	800133e <u16bit_to_str+0x8a>
		while (nmb > 0) {
 80012d2:	e01a      	b.n	800130a <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <u16bit_to_str+0x9c>)
 80012d8:	fba3 2301 	umull	r2, r3, r3, r1
 80012dc:	08da      	lsrs	r2, r3, #3
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	1aca      	subs	r2, r1, r3
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	1c59      	adds	r1, r3, #1
 80012ee:	6179      	str	r1, [r7, #20]
 80012f0:	3230      	adds	r2, #48	; 0x30
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	f107 0118 	add.w	r1, r7, #24
 80012f8:	440b      	add	r3, r1
 80012fa:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a13      	ldr	r2, [pc, #76]	; (8001350 <u16bit_to_str+0x9c>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	08db      	lsrs	r3, r3, #3
 8001308:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1e1      	bne.n	80012d4 <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	e00f      	b.n	8001336 <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	1e5a      	subs	r2, r3, #1
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	1c59      	adds	r1, r3, #1
 8001322:	6039      	str	r1, [r7, #0]
 8001324:	f107 0118 	add.w	r1, r7, #24
 8001328:	440a      	add	r2, r1
 800132a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800132e:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	3301      	adds	r3, #1
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	429a      	cmp	r2, r3
 800133c:	dbeb      	blt.n	8001316 <u16bit_to_str+0x62>
	}
	*buf = '\0';
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
	return buf;
 8001344:	683b      	ldr	r3, [r7, #0]
}
 8001346:	4618      	mov	r0, r3
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	cccccccd 	.word	0xcccccccd

08001354 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <terminal_move_cursor+0x94>)
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	4611      	mov	r1, r2
 8001378:	8019      	strh	r1, [r3, #0]
 800137a:	3302      	adds	r3, #2
 800137c:	0c12      	lsrs	r2, r2, #16
 800137e:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	dd0f      	ble.n	80013a6 <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	3302      	adds	r3, #2
 800138e:	4619      	mov	r1, r3
 8001390:	4610      	mov	r0, r2
 8001392:	f7ff ff8f 	bl	80012b4 <u16bit_to_str>
 8001396:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	4914      	ldr	r1, [pc, #80]	; (80013ec <terminal_move_cursor+0x98>)
 800139c:	461a      	mov	r2, r3
 800139e:	460b      	mov	r3, r1
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	8013      	strh	r3, [r2, #0]
 80013a4:	e013      	b.n	80013ce <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	da18      	bge.n	80013de <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	425b      	negs	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	3302      	adds	r3, #2
 80013b8:	4619      	mov	r1, r3
 80013ba:	4610      	mov	r0, r2
 80013bc:	f7ff ff7a 	bl	80012b4 <u16bit_to_str>
 80013c0:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	490a      	ldr	r1, [pc, #40]	; (80013f0 <terminal_move_cursor+0x9c>)
 80013c6:	461a      	mov	r2, r3
 80013c8:	460b      	mov	r3, r1
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013d4:	f107 020c 	add.w	r2, r7, #12
 80013d8:	4610      	mov	r0, r2
 80013da:	4798      	blx	r3
 80013dc:	e000      	b.n	80013e0 <terminal_move_cursor+0x8c>
		return;
 80013de:	bf00      	nop
}
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	0800df40 	.word	0x0800df40
 80013ec:	0800df44 	.word	0x0800df44
 80013f0:	0800df48 	.word	0x0800df48

080013f4 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	4a15      	ldr	r2, [pc, #84]	; (8001458 <terminal_reset_cursor+0x64>)
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	4611      	mov	r1, r2
 8001406:	8019      	strh	r1, [r3, #0]
 8001408:	3302      	adds	r3, #2
 800140a:	0c12      	lsrs	r2, r2, #16
 800140c:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	3302      	adds	r3, #2
 8001414:	4619      	mov	r1, r3
 8001416:	203a      	movs	r0, #58	; 0x3a
 8001418:	f7ff ff4c 	bl	80012b4 <u16bit_to_str>
 800141c:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	4a0e      	ldr	r2, [pc, #56]	; (800145c <terminal_reset_cursor+0x68>)
 8001422:	6810      	ldr	r0, [r2, #0]
 8001424:	6018      	str	r0, [r3, #0]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3303      	adds	r3, #3
 800142a:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 800142c:	69f9      	ldr	r1, [r7, #28]
 800142e:	2005      	movs	r0, #5
 8001430:	f7ff ff40 	bl	80012b4 <u16bit_to_str>
 8001434:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	4909      	ldr	r1, [pc, #36]	; (8001460 <terminal_reset_cursor+0x6c>)
 800143a:	461a      	mov	r2, r3
 800143c:	460b      	mov	r3, r1
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001448:	f107 020c 	add.w	r2, r7, #12
 800144c:	4610      	mov	r0, r2
 800144e:	4798      	blx	r3
}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	0800df40 	.word	0x0800df40
 800145c:	0800df4c 	.word	0x0800df4c
 8001460:	0800df44 	.word	0x0800df44

08001464 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001476:	4816      	ldr	r0, [pc, #88]	; (80014d0 <terminal_print_line+0x6c>)
 8001478:	4798      	blx	r3

	char nch [] = {0,0};
 800147a:	2300      	movs	r3, #0
 800147c:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	e014      	b.n	80014ae <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	4413      	add	r3, r2
 800148a:	3354      	adds	r3, #84	; 0x54
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8001490:	7c3b      	ldrb	r3, [r7, #16]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <terminal_print_line+0x36>
			nch[0] = ' ';
 8001496:	2320      	movs	r3, #32
 8001498:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014a0:	f107 0210 	add.w	r2, r7, #16
 80014a4:	4610      	mov	r0, r2
 80014a6:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3301      	adds	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dbe4      	blt.n	8001484 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f7ff ff9a 	bl	80013f4 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f7ff ff46 	bl	8001354 <terminal_move_cursor>
}
 80014c8:	bf00      	nop
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	0800df50 	.word	0x0800df50

080014d4 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3354      	adds	r3, #84	; 0x54
 80014e2:	2233      	movs	r2, #51	; 0x33
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f00c fcae 	bl	800de48 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3304      	adds	r3, #4
 80014f0:	2240      	movs	r2, #64	; 0x40
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00c fca7 	bl	800de48 <memset>
	pThis->ring_hist.begin = 0;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <microrl_init+0x78>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000004 	.word	0x20000004

08001550 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	1d18      	adds	r0, r3, #4
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3354      	adds	r3, #84	; 0x54
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff fcfb 	bl	8000fb4 <hist_restore_line>
 80015be:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	db1a      	blt.n	80015fc <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4413      	add	r3, r2
 80015cc:	3354      	adds	r3, #84	; 0x54
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ff04 	bl	80013f4 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015f2:	461a      	mov	r2, r3
 80015f4:	2100      	movs	r1, #0
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff34 	bl	8001464 <terminal_print_line>
	}
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	2b5b      	cmp	r3, #91	; 0x5b
 8001614:	d104      	bne.n	8001620 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]
		return 0;
 800161c:	2300      	movs	r3, #0
 800161e:	e07b      	b.n	8001718 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d14f      	bne.n	80016c8 <escape_process+0xc4>
		if (ch == 'A') {
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	2b41      	cmp	r3, #65	; 0x41
 800162c:	d105      	bne.n	800163a <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 800162e:	2100      	movs	r1, #0
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ffb7 	bl	80015a4 <hist_search>
#endif
			return 1;
 8001636:	2301      	movs	r3, #1
 8001638:	e06e      	b.n	8001718 <escape_process+0x114>
		} else if (ch == 'B') {
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	2b42      	cmp	r3, #66	; 0x42
 800163e:	d105      	bne.n	800164c <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8001640:	2101      	movs	r1, #1
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffae 	bl	80015a4 <hist_search>
#endif
			return 1;
 8001648:	2301      	movs	r3, #1
 800164a:	e065      	b.n	8001718 <escape_process+0x114>
		} else if (ch == 'C') {
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	2b43      	cmp	r3, #67	; 0x43
 8001650:	d114      	bne.n	800167c <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800165e:	429a      	cmp	r2, r3
 8001660:	da0a      	bge.n	8001678 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 8001662:	2101      	movs	r1, #1
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff fe75 	bl	8001354 <terminal_move_cursor>
				pThis->cursor++;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001678:	2301      	movs	r3, #1
 800167a:	e04d      	b.n	8001718 <escape_process+0x114>
		} else if (ch == 'D') {
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	2b44      	cmp	r3, #68	; 0x44
 8001680:	d112      	bne.n	80016a8 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001688:	2b00      	cmp	r3, #0
 800168a:	dd0b      	ble.n	80016a4 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fe5f 	bl	8001354 <terminal_move_cursor>
				pThis->cursor--;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800169c:	1e5a      	subs	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e037      	b.n	8001718 <escape_process+0x114>
		} else if (ch == '7') {
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	2b37      	cmp	r3, #55	; 0x37
 80016ac:	d104      	bne.n	80016b8 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2202      	movs	r2, #2
 80016b2:	701a      	strb	r2, [r3, #0]
			return 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	e02f      	b.n	8001718 <escape_process+0x114>
		} else if (ch == '8') {
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	2b38      	cmp	r3, #56	; 0x38
 80016bc:	d12b      	bne.n	8001716 <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2203      	movs	r2, #3
 80016c2:	701a      	strb	r2, [r3, #0]
			return 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e027      	b.n	8001718 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	2b7e      	cmp	r3, #126	; 0x7e
 80016cc:	d123      	bne.n	8001716 <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d108      	bne.n	80016e8 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fe8c 	bl	80013f4 <terminal_reset_cursor>
			pThis->cursor = 0;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e017      	b.n	8001718 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d112      	bne.n	8001716 <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	4619      	mov	r1, r3
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fe27 	bl	8001354 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	2b32      	cmp	r3, #50	; 0x32
 8001738:	dc60      	bgt.n	80017fc <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001746:	4619      	mov	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	440b      	add	r3, r1
 800174c:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3354      	adds	r3, #84	; 0x54
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 8001758:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001766:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8001768:	461a      	mov	r2, r3
 800176a:	f00c fb53 	bl	800de14 <memmove>
		for (i = 0; i < len; i++) {
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	e025      	b.n	80017c0 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	441a      	add	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	440b      	add	r3, r1
 8001784:	7811      	ldrb	r1, [r2, #0]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4413      	add	r3, r2
 800178a:	460a      	mov	r2, r1
 800178c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	4413      	add	r3, r2
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4413      	add	r3, r2
 800179e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017a2:	2b20      	cmp	r3, #32
 80017a4:	d109      	bne.n	80017ba <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	4413      	add	r3, r2
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbd5      	blt.n	8001774 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	441a      	add	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	441a      	add	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	4413      	add	r3, r2
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <microrl_insert_text+0xde>
	}
	return false;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd31      	ble.n	800187c <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff fd2b 	bl	8001274 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800182a:	3b01      	subs	r3, #1
 800182c:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3354      	adds	r3, #84	; 0x54
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 8001838:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 800184a:	461a      	mov	r2, r3
 800184c:	f00c fae2 	bl	800de14 <memmove>
		pThis->cursor--;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001856:	1e5a      	subs	r2, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001874:	1e5a      	subs	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f7fe fc66 	bl	8000164 <strlen>
 8001898:	4603      	mov	r3, r0
 800189a:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e019      	b.n	80018d6 <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fc59 	bl	8000164 <strlen>
 80018b2:	4602      	mov	r2, r0
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d20a      	bcs.n	80018d0 <common_len+0x4c>
			shortest = arr[i];
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f7fe fc4c 	bl	8000164 <strlen>
 80018cc:	4603      	mov	r3, r0
 80018ce:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3301      	adds	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1de      	bne.n	80018a2 <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e01f      	b.n	800192a <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	e012      	b.n	8001916 <common_len+0x92>
			if (shortest[i] != arr[j][i])
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	4413      	add	r3, r2
 80018f6:	781a      	ldrb	r2, [r3, #0]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	440b      	add	r3, r1
 8001900:	6819      	ldr	r1, [r3, #0]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	440b      	add	r3, r1
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <common_len+0x8c>
				return i;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	e011      	b.n	8001934 <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	3301      	adds	r3, #1
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e5      	bne.n	80018f0 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	429a      	cmp	r2, r3
 8001930:	dbdb      	blt.n	80018ea <common_len+0x66>

	return i;
 8001932:	697b      	ldr	r3, [r7, #20]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 800193c:	b5b0      	push	{r4, r5, r7, lr}
 800193e:	b08c      	sub	sp, #48	; 0x30
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 809c 	beq.w	8001a88 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001956:	f107 020c 	add.w	r2, r7, #12
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff fc31 	bl	80011c4 <split>
 8001962:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800196a:	3b01      	subs	r3, #1
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001974:	2b00      	cmp	r3, #0
 8001976:	d109      	bne.n	800198c <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8001978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001984:	4413      	add	r3, r2
 8001986:	4a42      	ldr	r2, [pc, #264]	; (8001a90 <microrl_get_complite+0x154>)
 8001988:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001992:	f107 020c 	add.w	r2, r7, #12
 8001996:	4611      	mov	r1, r2
 8001998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800199a:	4798      	blx	r3
 800199c:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d071      	beq.n	8001a8a <microrl_get_complite+0x14e>
		int i = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	3304      	adds	r3, #4
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fbd3 	bl	8000164 <strlen>
 80019be:	4603      	mov	r3, r0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
 80019c2:	e026      	b.n	8001a12 <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 80019c4:	6a38      	ldr	r0, [r7, #32]
 80019c6:	f7ff ff5d 	bl	8001884 <common_len>
 80019ca:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff fc61 	bl	8001294 <terminal_newline>
			while (compl_token [i] != NULL) {
 80019d2:	e011      	b.n	80019f8 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019dc:	0092      	lsls	r2, r2, #2
 80019de:	6a39      	ldr	r1, [r7, #32]
 80019e0:	440a      	add	r2, r1
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	4610      	mov	r0, r2
 80019e6:	4798      	blx	r3
				pThis->print (" ");
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ee:	4829      	ldr	r0, [pc, #164]	; (8001a94 <microrl_get_complite+0x158>)
 80019f0:	4798      	blx	r3
				i++;
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	3301      	adds	r3, #1
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 80019f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	6a3a      	ldr	r2, [r7, #32]
 80019fe:	4413      	add	r3, r2
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1e6      	bne.n	80019d4 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fc44 	bl	8001294 <terminal_newline>
			print_prompt (pThis);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fc22 	bl	8001256 <print_prompt>
		}
		
		if (len) {
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d02b      	beq.n	8001a70 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	681c      	ldr	r4, [r3, #0]
 8001a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a26:	4413      	add	r3, r2
 8001a28:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fb99 	bl	8000164 <strlen>
 8001a32:	4603      	mov	r3, r0
 8001a34:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 8001a36:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a42:	4413      	add	r3, r2
 8001a44:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fb8b 	bl	8000164 <strlen>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001a52:	461a      	mov	r2, r3
 8001a54:	4629      	mov	r1, r5
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fe62 	bl	8001720 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	3304      	adds	r3, #4
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d104      	bne.n	8001a70 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 8001a66:	2201      	movs	r2, #1
 8001a68:	490a      	ldr	r1, [pc, #40]	; (8001a94 <microrl_get_complite+0x158>)
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fe58 	bl	8001720 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff fcbf 	bl	80013f4 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	2100      	movs	r1, #0
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff fcef 	bl	8001464 <terminal_print_line>
 8001a86:	e000      	b.n	8001a8a <microrl_get_complite+0x14e>
		return;
 8001a88:	bf00      	nop
	} 
}
 8001a8a:	3730      	adds	r7, #48	; 0x30
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a90:	0800df54 	.word	0x0800df54
 8001a94:	0800df58 	.word	0x0800df58

08001a98 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff fbf7 	bl	8001294 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	dd0a      	ble.n	8001ac6 <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	1d18      	adds	r0, r3, #4
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f7ff fa08 	bl	8000ed6 <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001acc:	f107 0208 	add.w	r2, r7, #8
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fb76 	bl	80011c4 <split>
 8001ad8:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d109      	bne.n	8001af6 <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ae8:	4817      	ldr	r0, [pc, #92]	; (8001b48 <new_line_handler+0xb0>)
 8001aea:	4798      	blx	r3
		pThis->print (ENDL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001af2:	4816      	ldr	r0, [pc, #88]	; (8001b4c <new_line_handler+0xb4>)
 8001af4:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	dd0c      	ble.n	8001b16 <new_line_handler+0x7e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0c:	f107 0208 	add.w	r2, r7, #8
 8001b10:	4611      	mov	r1, r2
 8001b12:	69f8      	ldr	r0, [r7, #28]
 8001b14:	4798      	blx	r3
	print_prompt (pThis);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fb9d 	bl	8001256 <print_prompt>
	pThis->cmdlen = 0;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3354      	adds	r3, #84	; 0x54
 8001b30:	2233      	movs	r2, #51	; 0x33
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f00c f987 	bl	800de48 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8001b40:	bf00      	nop
 8001b42:	3720      	adds	r7, #32
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	0800df5c 	.word	0x0800df5c
 8001b4c:	0800df3c 	.word	0x0800df3c

08001b50 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	785b      	ldrb	r3, [r3, #1]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00d      	beq.n	8001b7e <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	4619      	mov	r1, r3
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff fd4b 	bl	8001604 <escape_process>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 81e3 	beq.w	8001f3c <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8001b7c:	e1de      	b.n	8001f3c <microrl_insert_char+0x3ec>
		switch (ch) {
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	2b7e      	cmp	r3, #126	; 0x7e
 8001b84:	f200 81af 	bhi.w	8001ee6 <microrl_insert_char+0x396>
 8001b88:	a201      	add	r2, pc, #4	; (adr r2, 8001b90 <microrl_insert_char+0x40>)
 8001b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8e:	bf00      	nop
 8001b90:	08001e23 	.word	0x08001e23
 8001b94:	08001e5b 	.word	0x08001e5b
 8001b98:	08001ed3 	.word	0x08001ed3
 8001b9c:	08001ee7 	.word	0x08001ee7
 8001ba0:	08001dff 	.word	0x08001dff
 8001ba4:	08001e33 	.word	0x08001e33
 8001ba8:	08001ee7 	.word	0x08001ee7
 8001bac:	08001e93 	.word	0x08001e93
 8001bb0:	08001db5 	.word	0x08001db5
 8001bb4:	08001d8d 	.word	0x08001d8d
 8001bb8:	08001de7 	.word	0x08001de7
 8001bbc:	08001ee7 	.word	0x08001ee7
 8001bc0:	08001d8d 	.word	0x08001d8d
 8001bc4:	08001e89 	.word	0x08001e89
 8001bc8:	08001ee7 	.word	0x08001ee7
 8001bcc:	08001e7f 	.word	0x08001e7f
 8001bd0:	08001ee7 	.word	0x08001ee7
 8001bd4:	08001eaf 	.word	0x08001eaf
 8001bd8:	08001ee7 	.word	0x08001ee7
 8001bdc:	08001ee7 	.word	0x08001ee7
 8001be0:	08001dcb 	.word	0x08001dcb
 8001be4:	08001ee7 	.word	0x08001ee7
 8001be8:	08001ee7 	.word	0x08001ee7
 8001bec:	08001ee7 	.word	0x08001ee7
 8001bf0:	08001ee7 	.word	0x08001ee7
 8001bf4:	08001ee7 	.word	0x08001ee7
 8001bf8:	08001dbd 	.word	0x08001dbd
 8001bfc:	08001ee7 	.word	0x08001ee7
 8001c00:	08001ee7 	.word	0x08001ee7
 8001c04:	08001ee7 	.word	0x08001ee7
 8001c08:	08001ee7 	.word	0x08001ee7
 8001c0c:	08001ee7 	.word	0x08001ee7
 8001c10:	08001ee7 	.word	0x08001ee7
 8001c14:	08001ee7 	.word	0x08001ee7
 8001c18:	08001ee7 	.word	0x08001ee7
 8001c1c:	08001ee7 	.word	0x08001ee7
 8001c20:	08001ee7 	.word	0x08001ee7
 8001c24:	08001ee7 	.word	0x08001ee7
 8001c28:	08001ee7 	.word	0x08001ee7
 8001c2c:	08001ee7 	.word	0x08001ee7
 8001c30:	08001ee7 	.word	0x08001ee7
 8001c34:	08001ee7 	.word	0x08001ee7
 8001c38:	08001ee7 	.word	0x08001ee7
 8001c3c:	08001ee7 	.word	0x08001ee7
 8001c40:	08001ee7 	.word	0x08001ee7
 8001c44:	08001ee7 	.word	0x08001ee7
 8001c48:	08001ee7 	.word	0x08001ee7
 8001c4c:	08001ee7 	.word	0x08001ee7
 8001c50:	08001ee7 	.word	0x08001ee7
 8001c54:	08001ee7 	.word	0x08001ee7
 8001c58:	08001ee7 	.word	0x08001ee7
 8001c5c:	08001ee7 	.word	0x08001ee7
 8001c60:	08001ee7 	.word	0x08001ee7
 8001c64:	08001ee7 	.word	0x08001ee7
 8001c68:	08001ee7 	.word	0x08001ee7
 8001c6c:	08001ee7 	.word	0x08001ee7
 8001c70:	08001ee7 	.word	0x08001ee7
 8001c74:	08001ee7 	.word	0x08001ee7
 8001c78:	08001ee7 	.word	0x08001ee7
 8001c7c:	08001ee7 	.word	0x08001ee7
 8001c80:	08001ee7 	.word	0x08001ee7
 8001c84:	08001ee7 	.word	0x08001ee7
 8001c88:	08001ee7 	.word	0x08001ee7
 8001c8c:	08001ee7 	.word	0x08001ee7
 8001c90:	08001ee7 	.word	0x08001ee7
 8001c94:	08001ee7 	.word	0x08001ee7
 8001c98:	08001ee7 	.word	0x08001ee7
 8001c9c:	08001ee7 	.word	0x08001ee7
 8001ca0:	08001ee7 	.word	0x08001ee7
 8001ca4:	08001ee7 	.word	0x08001ee7
 8001ca8:	08001ee7 	.word	0x08001ee7
 8001cac:	08001ee7 	.word	0x08001ee7
 8001cb0:	08001ee7 	.word	0x08001ee7
 8001cb4:	08001ee7 	.word	0x08001ee7
 8001cb8:	08001ee7 	.word	0x08001ee7
 8001cbc:	08001ee7 	.word	0x08001ee7
 8001cc0:	08001ee7 	.word	0x08001ee7
 8001cc4:	08001ee7 	.word	0x08001ee7
 8001cc8:	08001ee7 	.word	0x08001ee7
 8001ccc:	08001ee7 	.word	0x08001ee7
 8001cd0:	08001ee7 	.word	0x08001ee7
 8001cd4:	08001ee7 	.word	0x08001ee7
 8001cd8:	08001ee7 	.word	0x08001ee7
 8001cdc:	08001ee7 	.word	0x08001ee7
 8001ce0:	08001ee7 	.word	0x08001ee7
 8001ce4:	08001ee7 	.word	0x08001ee7
 8001ce8:	08001ee7 	.word	0x08001ee7
 8001cec:	08001ee7 	.word	0x08001ee7
 8001cf0:	08001ee7 	.word	0x08001ee7
 8001cf4:	08001ee7 	.word	0x08001ee7
 8001cf8:	08001ee7 	.word	0x08001ee7
 8001cfc:	08001ee7 	.word	0x08001ee7
 8001d00:	08001ee7 	.word	0x08001ee7
 8001d04:	08001ee7 	.word	0x08001ee7
 8001d08:	08001ee7 	.word	0x08001ee7
 8001d0c:	08001ee7 	.word	0x08001ee7
 8001d10:	08001ee7 	.word	0x08001ee7
 8001d14:	08001ee7 	.word	0x08001ee7
 8001d18:	08001ee7 	.word	0x08001ee7
 8001d1c:	08001ee7 	.word	0x08001ee7
 8001d20:	08001ee7 	.word	0x08001ee7
 8001d24:	08001ee7 	.word	0x08001ee7
 8001d28:	08001ee7 	.word	0x08001ee7
 8001d2c:	08001ee7 	.word	0x08001ee7
 8001d30:	08001ee7 	.word	0x08001ee7
 8001d34:	08001ee7 	.word	0x08001ee7
 8001d38:	08001ee7 	.word	0x08001ee7
 8001d3c:	08001ee7 	.word	0x08001ee7
 8001d40:	08001ee7 	.word	0x08001ee7
 8001d44:	08001ee7 	.word	0x08001ee7
 8001d48:	08001ee7 	.word	0x08001ee7
 8001d4c:	08001ee7 	.word	0x08001ee7
 8001d50:	08001ee7 	.word	0x08001ee7
 8001d54:	08001ee7 	.word	0x08001ee7
 8001d58:	08001ee7 	.word	0x08001ee7
 8001d5c:	08001ee7 	.word	0x08001ee7
 8001d60:	08001ee7 	.word	0x08001ee7
 8001d64:	08001ee7 	.word	0x08001ee7
 8001d68:	08001ee7 	.word	0x08001ee7
 8001d6c:	08001ee7 	.word	0x08001ee7
 8001d70:	08001ee7 	.word	0x08001ee7
 8001d74:	08001ee7 	.word	0x08001ee7
 8001d78:	08001ee7 	.word	0x08001ee7
 8001d7c:	08001ee7 	.word	0x08001ee7
 8001d80:	08001ee7 	.word	0x08001ee7
 8001d84:	08001ee7 	.word	0x08001ee7
 8001d88:	08001e93 	.word	0x08001e93
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	789b      	ldrb	r3, [r3, #2]
 8001d90:	461a      	mov	r2, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b0d      	cmp	r3, #13
 8001d96:	d101      	bne.n	8001d9c <microrl_insert_char+0x24c>
 8001d98:	230a      	movs	r3, #10
 8001d9a:	e000      	b.n	8001d9e <microrl_insert_char+0x24e>
 8001d9c:	230d      	movs	r3, #13
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	f000 80c1 	beq.w	8001f26 <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff fe73 	bl	8001a98 <new_line_handler>
				break;
 8001db2:	e0c3      	b.n	8001f3c <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff fdc1 	bl	800193c <microrl_get_complite>
			break;
 8001dba:	e0bf      	b.n	8001f3c <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	705a      	strb	r2, [r3, #1]
			break;
 8001dc2:	e0bb      	b.n	8001f3c <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fd1e 	bl	8001806 <microrl_backspace>
					while (pThis->cursor > 0) {
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	dcf7      	bgt.n	8001dc4 <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dda:	461a      	mov	r2, r3
 8001ddc:	2100      	movs	r1, #0
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff fb40 	bl	8001464 <terminal_print_line>
			break;
 8001de4:	e0aa      	b.n	8001f3c <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dec:	4855      	ldr	r0, [pc, #340]	; (8001f44 <microrl_insert_char+0x3f4>)
 8001dee:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8001dfc:	e09e      	b.n	8001f3c <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff faa0 	bl	8001354 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001e20:	e08c      	b.n	8001f3c <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff fae6 	bl	80013f4 <terminal_reset_cursor>
				pThis->cursor = 0;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001e30:	e084      	b.n	8001f3c <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	da73      	bge.n	8001f2a <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 8001e42:	2101      	movs	r1, #1
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff fa85 	bl	8001354 <terminal_move_cursor>
				pThis->cursor++;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001e58:	e067      	b.n	8001f2a <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d064      	beq.n	8001f2e <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff fa73 	bl	8001354 <terminal_move_cursor>
				pThis->cursor--;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e74:	1e5a      	subs	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001e7c:	e057      	b.n	8001f2e <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 8001e7e:	2100      	movs	r1, #0
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff fb8f 	bl	80015a4 <hist_search>
			break;
 8001e86:	e059      	b.n	8001f3c <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 8001e88:	2101      	movs	r1, #1
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fb8a 	bl	80015a4 <hist_search>
			break;
 8001e90:	e054      	b.n	8001f3c <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fcb7 	bl	8001806 <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fadc 	bl	8001464 <terminal_print_line>
			break;
 8001eac:	e046      	b.n	8001f3c <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff f9f0 	bl	8001294 <terminal_newline>
				print_prompt (pThis);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff f9ce 	bl	8001256 <print_prompt>
				terminal_reset_cursor (pThis);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fa9a 	bl	80013f4 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2100      	movs	r1, #0
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff faca 	bl	8001464 <terminal_print_line>
			break;
 8001ed0:	e034      	b.n	8001f3c <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d02a      	beq.n	8001f32 <microrl_insert_char+0x3e2>
				pThis->sigint();
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ee2:	4798      	blx	r3
			break;
 8001ee4:	e025      	b.n	8001f32 <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	d104      	bne.n	8001ef6 <microrl_insert_char+0x3a6>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d01f      	beq.n	8001f36 <microrl_insert_char+0x3e6>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b1f      	cmp	r3, #31
 8001efa:	dd1c      	ble.n	8001f36 <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8001efc:	463b      	mov	r3, r7
 8001efe:	2201      	movs	r2, #1
 8001f00:	4619      	mov	r1, r3
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fc0c 	bl	8001720 <microrl_insert_text>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d015      	beq.n	8001f3a <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f14:	1e59      	subs	r1, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff faa0 	bl	8001464 <terminal_print_line>
			break;
 8001f24:	e009      	b.n	8001f3a <microrl_insert_char+0x3ea>
					break;
 8001f26:	bf00      	nop
 8001f28:	e008      	b.n	8001f3c <microrl_insert_char+0x3ec>
			break;
 8001f2a:	bf00      	nop
 8001f2c:	e006      	b.n	8001f3c <microrl_insert_char+0x3ec>
			break;
 8001f2e:	bf00      	nop
 8001f30:	e004      	b.n	8001f3c <microrl_insert_char+0x3ec>
			break;
 8001f32:	bf00      	nop
 8001f34:	e002      	b.n	8001f3c <microrl_insert_char+0x3ec>
	}
 8001f36:	bf00      	nop
 8001f38:	e000      	b.n	8001f3c <microrl_insert_char+0x3ec>
			break;
 8001f3a:	bf00      	nop
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	0800df50 	.word	0x0800df50

08001f48 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <microrl_print_char+0x20>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	79fa      	ldrb	r2, [r7, #7]
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fdf8 	bl	8001b50 <microrl_insert_char>
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000008 	.word	0x20000008

08001f6c <print>:

void print (const char * str)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 8001f74:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <print+0x84>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	f083 0301 	eor.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <print+0x1e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b1b      	cmp	r3, #27
 8001f88:	d02b      	beq.n	8001fe2 <print+0x76>
		return;
	if (!CDC_is_ready)
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <print+0x88>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	f083 0301 	eor.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d126      	bne.n	8001fe6 <print+0x7a>
		return;
	uint16_t len = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 8001f9c:	89fb      	ldrh	r3, [r7, #14]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	81fb      	strh	r3, [r7, #14]
 8001fa2:	89fb      	ldrh	r3, [r7, #14]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f6      	bne.n	8001f9c <print+0x30>
	uint32_t timeout = HAL_GetTick();
 8001fae:	f000 feb7 	bl	8002d20 <HAL_GetTick>
 8001fb2:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001fb4:	e006      	b.n	8001fc4 <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 8001fb6:	f000 feb3 	bl	8002d20 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d807      	bhi.n	8001fd4 <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <print+0x8c>)
 8001fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001fca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f1      	bne.n	8001fb6 <print+0x4a>
 8001fd2:	e000      	b.n	8001fd6 <print+0x6a>
			break;
 8001fd4:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f00b fb0a 	bl	800d5f4 <CDC_Transmit_FS>
 8001fe0:	e002      	b.n	8001fe8 <print+0x7c>
		return;
 8001fe2:	bf00      	nop
 8001fe4:	e000      	b.n	8001fe8 <print+0x7c>
		return;
 8001fe6:	bf00      	nop
}
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000000c 	.word	0x2000000c
 8001ff4:	200001b0 	.word	0x200001b0
 8001ff8:	200026a0 	.word	0x200026a0

08001ffc <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	e010      	b.n	800202e <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 800200c:	490c      	ldr	r1, [pc, #48]	; (8002040 <find_color_by_name+0x44>)
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	440b      	add	r3, r1
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	79fa      	ldrb	r2, [r7, #7]
 8002020:	429a      	cmp	r2, r3
 8002022:	d101      	bne.n	8002028 <find_color_by_name+0x2c>
		{
			return i;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	e006      	b.n	8002036 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3301      	adds	r3, #1
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b10      	cmp	r3, #16
 8002032:	d9eb      	bls.n	800200c <find_color_by_name+0x10>
		}
	}
	return 0;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	0800e62c 	.word	0x0800e62c

08002044 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ffd2 	bl	8001ffc <find_color_by_name>
 8002058:	4602      	mov	r2, r0
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	4a08      	ldr	r2, [pc, #32]	; (8002088 <print_color+0x44>)
 8002066:	4413      	add	r3, r2
 8002068:	3301      	adds	r3, #1
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff7e 	bl	8001f6c <print>
	print(str);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff7b 	bl	8001f6c <print>
	print(COLOR_NC);
 8002076:	4805      	ldr	r0, [pc, #20]	; (800208c <print_color+0x48>)
 8002078:	f7ff ff78 	bl	8001f6c <print>
	return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	0800e62c 	.word	0x0800e62c
 800208c:	0800df74 	.word	0x0800df74

08002090 <str_length>:

int str_length(const char * str)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
	while (str[i])
 800209c:	e002      	b.n	80020a4 <str_length+0x14>
		i++;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3301      	adds	r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
	while (str[i])
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f6      	bne.n	800209e <str_length+0xe>
	return i;
 80020b0:	68fb      	ldr	r3, [r7, #12]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <print_help>:


int print_help(int argc, const char * const * argv)
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
	print(_VER);
 80020c6:	4858      	ldr	r0, [pc, #352]	; (8002228 <print_help+0x16c>)
 80020c8:	f7ff ff50 	bl	8001f6c <print>
	print(ENDL);
 80020cc:	4857      	ldr	r0, [pc, #348]	; (800222c <print_help+0x170>)
 80020ce:	f7ff ff4d 	bl	8001f6c <print>
	print ("Use ");
 80020d2:	4857      	ldr	r0, [pc, #348]	; (8002230 <print_help+0x174>)
 80020d4:	f7ff ff4a 	bl	8001f6c <print>
	print_color("TAB", C_GREEN);
 80020d8:	2105      	movs	r1, #5
 80020da:	4856      	ldr	r0, [pc, #344]	; (8002234 <print_help+0x178>)
 80020dc:	f7ff ffb2 	bl	8002044 <print_color>
	print(" key for completion");
 80020e0:	4855      	ldr	r0, [pc, #340]	; (8002238 <print_help+0x17c>)
 80020e2:	f7ff ff43 	bl	8001f6c <print>
	print (ENDL);
 80020e6:	4851      	ldr	r0, [pc, #324]	; (800222c <print_help+0x170>)
 80020e8:	f7ff ff40 	bl	8001f6c <print>
	print ("Available commands:");
 80020ec:	4853      	ldr	r0, [pc, #332]	; (800223c <print_help+0x180>)
 80020ee:	f7ff ff3d 	bl	8001f6c <print>
	for (int i = 0; i < microrl_actions_length; i++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	e08a      	b.n	800220e <print_help+0x152>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 80020f8:	4a51      	ldr	r2, [pc, #324]	; (8002240 <print_help+0x184>)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	019b      	lsls	r3, r3, #6
 80020fe:	4413      	add	r3, r2
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002106:	d11b      	bne.n	8002140 <print_help+0x84>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	3b01      	subs	r3, #1
 800210c:	4a4c      	ldr	r2, [pc, #304]	; (8002240 <print_help+0x184>)
 800210e:	019b      	lsls	r3, r3, #6
 8002110:	4413      	add	r3, r2
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002118:	d004      	beq.n	8002124 <print_help+0x68>
				print_color(" aka ", C_L_PURPLE);
 800211a:	210c      	movs	r1, #12
 800211c:	4849      	ldr	r0, [pc, #292]	; (8002244 <print_help+0x188>)
 800211e:	f7ff ff91 	bl	8002044 <print_color>
 8002122:	e003      	b.n	800212c <print_help+0x70>
			else
				print_color("/", C_L_PURPLE);
 8002124:	210c      	movs	r1, #12
 8002126:	4848      	ldr	r0, [pc, #288]	; (8002248 <print_help+0x18c>)
 8002128:	f7ff ff8c 	bl	8002044 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	019b      	lsls	r3, r3, #6
 8002130:	4a43      	ldr	r2, [pc, #268]	; (8002240 <print_help+0x184>)
 8002132:	4413      	add	r3, r2
 8002134:	3304      	adds	r3, #4
 8002136:	210b      	movs	r1, #11
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff83 	bl	8002044 <print_color>
 800213e:	e063      	b.n	8002208 <print_help+0x14c>
		}
		else
		{
			print(ENDL);
 8002140:	483a      	ldr	r0, [pc, #232]	; (800222c <print_help+0x170>)
 8002142:	f7ff ff13 	bl	8001f6c <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8002146:	f06f 0303 	mvn.w	r3, #3
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	e005      	b.n	800215a <print_help+0x9e>
				print(" ");
 800214e:	483f      	ldr	r0, [pc, #252]	; (800224c <print_help+0x190>)
 8002150:	f7ff ff0c 	bl	8001f6c <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	3301      	adds	r3, #1
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	4a39      	ldr	r2, [pc, #228]	; (8002240 <print_help+0x184>)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	019b      	lsls	r3, r3, #6
 8002160:	4413      	add	r3, r2
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	429a      	cmp	r2, r3
 8002168:	dbf1      	blt.n	800214e <print_help+0x92>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	019b      	lsls	r3, r3, #6
 800216e:	4a34      	ldr	r2, [pc, #208]	; (8002240 <print_help+0x184>)
 8002170:	4413      	add	r3, r2
 8002172:	1d1a      	adds	r2, r3, #4
 8002174:	4932      	ldr	r1, [pc, #200]	; (8002240 <print_help+0x184>)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	440b      	add	r3, r1
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4934      	ldr	r1, [pc, #208]	; (8002250 <print_help+0x194>)
 8002180:	5ccb      	ldrb	r3, [r1, r3]
 8002182:	4619      	mov	r1, r3
 8002184:	4610      	mov	r0, r2
 8002186:	f7ff ff5d 	bl	8002044 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	e005      	b.n	800219c <print_help+0xe0>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 8002190:	482e      	ldr	r0, [pc, #184]	; (800224c <print_help+0x190>)
 8002192:	f7ff feeb 	bl	8001f6c <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3301      	adds	r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	4a28      	ldr	r2, [pc, #160]	; (8002240 <print_help+0x184>)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	019b      	lsls	r3, r3, #6
 80021a2:	4413      	add	r3, r2
 80021a4:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80021a6:	f1c3 040c 	rsb	r4, r3, #12
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	019b      	lsls	r3, r3, #6
 80021ae:	4a24      	ldr	r2, [pc, #144]	; (8002240 <print_help+0x184>)
 80021b0:	4413      	add	r3, r2
 80021b2:	3304      	adds	r3, #4
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff6b 	bl	8002090 <str_length>
 80021ba:	4603      	mov	r3, r0
 80021bc:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	dbe5      	blt.n	8002190 <print_help+0xd4>
			switch (microrl_actions[i].level){
 80021c4:	4a1e      	ldr	r2, [pc, #120]	; (8002240 <print_help+0x184>)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	019b      	lsls	r3, r3, #6
 80021ca:	4413      	add	r3, r2
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <print_help+0x11c>
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d004      	beq.n	80021e0 <print_help+0x124>
 80021d6:	e007      	b.n	80021e8 <print_help+0x12c>
			case 0:
				print ("-");
 80021d8:	481e      	ldr	r0, [pc, #120]	; (8002254 <print_help+0x198>)
 80021da:	f7ff fec7 	bl	8001f6c <print>
				break;
 80021de:	e007      	b.n	80021f0 <print_help+0x134>
			case 1:
				print ("^");
 80021e0:	481d      	ldr	r0, [pc, #116]	; (8002258 <print_help+0x19c>)
 80021e2:	f7ff fec3 	bl	8001f6c <print>
				break;
 80021e6:	e003      	b.n	80021f0 <print_help+0x134>
			default:
				print ("#");
 80021e8:	481c      	ldr	r0, [pc, #112]	; (800225c <print_help+0x1a0>)
 80021ea:	f7ff febf 	bl	8001f6c <print>
				break;
 80021ee:	bf00      	nop
			}
			print (" ");
 80021f0:	4816      	ldr	r0, [pc, #88]	; (800224c <print_help+0x190>)
 80021f2:	f7ff febb 	bl	8001f6c <print>
			print (microrl_actions[i].help_msg);
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	019b      	lsls	r3, r3, #6
 80021fa:	3308      	adds	r3, #8
 80021fc:	4a10      	ldr	r2, [pc, #64]	; (8002240 <print_help+0x184>)
 80021fe:	4413      	add	r3, r2
 8002200:	3306      	adds	r3, #6
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff feb2 	bl	8001f6c <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3301      	adds	r3, #1
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b0e      	cmp	r3, #14
 8002212:	f67f af71 	bls.w	80020f8 <print_help+0x3c>
		}
	}
	print(ENDL);
 8002216:	4805      	ldr	r0, [pc, #20]	; (800222c <print_help+0x170>)
 8002218:	f7ff fea8 	bl	8001f6c <print>
	return 0;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd90      	pop	{r4, r7, pc}
 8002226:	bf00      	nop
 8002228:	0800df7c 	.word	0x0800df7c
 800222c:	0800df8c 	.word	0x0800df8c
 8002230:	0800df90 	.word	0x0800df90
 8002234:	0800df98 	.word	0x0800df98
 8002238:	0800df9c 	.word	0x0800df9c
 800223c:	0800dfb0 	.word	0x0800dfb0
 8002240:	0800e26c 	.word	0x0800e26c
 8002244:	0800dfc4 	.word	0x0800dfc4
 8002248:	0800dfcc 	.word	0x0800dfcc
 800224c:	0800dfd0 	.word	0x0800dfd0
 8002250:	0800e6e8 	.word	0x0800e6e8
 8002254:	0800dfd4 	.word	0x0800dfd4
 8002258:	0800dfd8 	.word	0x0800dfd8
 800225c:	0800dfdc 	.word	0x0800dfdc

08002260 <execute>:



int execute (int argc, const char * const * argv)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 800226a:	2300      	movs	r3, #0
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 8002276:	2300      	movs	r3, #0
 8002278:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e050      	b.n	8002322 <execute+0xc2>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	e03f      	b.n	8002306 <execute+0xa6>
		{
			tokens_found = false;
 8002286:	2300      	movs	r3, #0
 8002288:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 800228a:	4a52      	ldr	r2, [pc, #328]	; (80023d4 <execute+0x174>)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	019b      	lsls	r3, r3, #6
 8002290:	4413      	add	r3, r2
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d001      	beq.n	80022a2 <execute+0x42>
				synonym_level = current_level; // save the synonym level
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d003      	beq.n	80022b2 <execute+0x52>
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	db2d      	blt.n	800230e <execute+0xae>
				break;
			if (current_level == i)
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d101      	bne.n	80022be <execute+0x5e>
				last_main_synonym = n;
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	019b      	lsls	r3, r3, #6
 80022cc:	4941      	ldr	r1, [pc, #260]	; (80023d4 <execute+0x174>)
 80022ce:	440b      	add	r3, r1
 80022d0:	3304      	adds	r3, #4
 80022d2:	4619      	mov	r1, r3
 80022d4:	4610      	mov	r0, r2
 80022d6:	f7fd ff3b 	bl	8000150 <strcmp>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10f      	bne.n	8002300 <execute+0xa0>
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d10b      	bne.n	8002300 <execute+0xa0>
					(i == synonym_level))
			{
				tokens_found = true;
 80022e8:	2301      	movs	r3, #1
 80022ea:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	623a      	str	r2, [r7, #32]
 80022f2:	4a38      	ldr	r2, [pc, #224]	; (80023d4 <execute+0x174>)
 80022f4:	019b      	lsls	r3, r3, #6
 80022f6:	4413      	add	r3, r2
 80022f8:	333c      	adds	r3, #60	; 0x3c
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80022fe:	e007      	b.n	8002310 <execute+0xb0>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	3301      	adds	r3, #1
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b0e      	cmp	r3, #14
 800230a:	d9bc      	bls.n	8002286 <execute+0x26>
 800230c:	e000      	b.n	8002310 <execute+0xb0>
				break;
 800230e:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8002310:	7efb      	ldrb	r3, [r7, #27]
 8002312:	f083 0301 	eor.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d107      	bne.n	800232c <execute+0xcc>
	for (int i = 0; i < argc; i++)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	3301      	adds	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	dbaa      	blt.n	8002280 <execute+0x20>
 800232a:	e000      	b.n	800232e <execute+0xce>
			break;
 800232c:	bf00      	nop
	}

	if (func != NULL)
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <execute+0xe0>
	{
		return func(argc, argv); // function found
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	6839      	ldr	r1, [r7, #0]
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
 800233c:	4603      	mov	r3, r0
 800233e:	e045      	b.n	80023cc <execute+0x16c>
	} else if (tokens_found)
 8002340:	7efb      	ldrb	r3, [r7, #27]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d021      	beq.n	800238a <execute+0x12a>
	{
		print_color ("command: '", C_L_RED);
 8002346:	210a      	movs	r1, #10
 8002348:	4823      	ldr	r0, [pc, #140]	; (80023d8 <execute+0x178>)
 800234a:	f7ff fe7b 	bl	8002044 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	210a      	movs	r1, #10
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fe75 	bl	8002044 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 800235a:	210a      	movs	r1, #10
 800235c:	481f      	ldr	r0, [pc, #124]	; (80023dc <execute+0x17c>)
 800235e:	f7ff fe71 	bl	8002044 <print_color>
		print(ENDL);
 8002362:	481f      	ldr	r0, [pc, #124]	; (80023e0 <execute+0x180>)
 8002364:	f7ff fe02 	bl	8001f6c <print>
		print_color ("use '", C_NC);
 8002368:	2100      	movs	r1, #0
 800236a:	481e      	ldr	r0, [pc, #120]	; (80023e4 <execute+0x184>)
 800236c:	f7ff fe6a 	bl	8002044 <print_color>
		print_color ("?", C_GREEN);
 8002370:	2105      	movs	r1, #5
 8002372:	481d      	ldr	r0, [pc, #116]	; (80023e8 <execute+0x188>)
 8002374:	f7ff fe66 	bl	8002044 <print_color>
		print_color ("' for help", C_NC);
 8002378:	2100      	movs	r1, #0
 800237a:	481c      	ldr	r0, [pc, #112]	; (80023ec <execute+0x18c>)
 800237c:	f7ff fe62 	bl	8002044 <print_color>
		print (ENDL);
 8002380:	4817      	ldr	r0, [pc, #92]	; (80023e0 <execute+0x180>)
 8002382:	f7ff fdf3 	bl	8001f6c <print>
		return 1;
 8002386:	2301      	movs	r3, #1
 8002388:	e020      	b.n	80023cc <execute+0x16c>
	}
	else
	{
		print_color ("command: '", C_RED);
 800238a:	2109      	movs	r1, #9
 800238c:	4812      	ldr	r0, [pc, #72]	; (80023d8 <execute+0x178>)
 800238e:	f7ff fe59 	bl	8002044 <print_color>
		print_color ((char*)argv[0], C_RED);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2109      	movs	r1, #9
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fe53 	bl	8002044 <print_color>
		print_color ("' not found", C_RED);
 800239e:	2109      	movs	r1, #9
 80023a0:	4813      	ldr	r0, [pc, #76]	; (80023f0 <execute+0x190>)
 80023a2:	f7ff fe4f 	bl	8002044 <print_color>
		print(ENDL);
 80023a6:	480e      	ldr	r0, [pc, #56]	; (80023e0 <execute+0x180>)
 80023a8:	f7ff fde0 	bl	8001f6c <print>
		print_color ("use '", C_NC);
 80023ac:	2100      	movs	r1, #0
 80023ae:	480d      	ldr	r0, [pc, #52]	; (80023e4 <execute+0x184>)
 80023b0:	f7ff fe48 	bl	8002044 <print_color>
		print_color ("?", C_GREEN);
 80023b4:	2105      	movs	r1, #5
 80023b6:	480c      	ldr	r0, [pc, #48]	; (80023e8 <execute+0x188>)
 80023b8:	f7ff fe44 	bl	8002044 <print_color>
		print_color ("' for help", C_NC);
 80023bc:	2100      	movs	r1, #0
 80023be:	480b      	ldr	r0, [pc, #44]	; (80023ec <execute+0x18c>)
 80023c0:	f7ff fe40 	bl	8002044 <print_color>
		print (ENDL);
 80023c4:	4806      	ldr	r0, [pc, #24]	; (80023e0 <execute+0x180>)
 80023c6:	f7ff fdd1 	bl	8001f6c <print>
		return 1;
 80023ca:	2301      	movs	r3, #1

	}
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3728      	adds	r7, #40	; 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	0800e26c 	.word	0x0800e26c
 80023d8:	0800dfe0 	.word	0x0800dfe0
 80023dc:	0800dfec 	.word	0x0800dfec
 80023e0:	0800df8c 	.word	0x0800df8c
 80023e4:	0800e00c 	.word	0x0800e00c
 80023e8:	0800e014 	.word	0x0800e014
 80023ec:	0800e018 	.word	0x0800e018
 80023f0:	0800e024 	.word	0x0800e024

080023f4 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	; 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
	int j = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 8002402:	4b5b      	ldr	r3, [pc, #364]	; (8002570 <complet+0x17c>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d11b      	bne.n	8002446 <complet+0x52>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 800240e:	2300      	movs	r3, #0
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
 8002412:	e014      	b.n	800243e <complet+0x4a>
			if (microrl_actions[i].level == 0)
 8002414:	4a57      	ldr	r2, [pc, #348]	; (8002574 <complet+0x180>)
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	019b      	lsls	r3, r3, #6
 800241a:	4413      	add	r3, r2
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <complet+0x44>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 8002422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800242a:	0192      	lsls	r2, r2, #6
 800242c:	4951      	ldr	r1, [pc, #324]	; (8002574 <complet+0x180>)
 800242e:	440a      	add	r2, r1
 8002430:	3204      	adds	r2, #4
 8002432:	494f      	ldr	r1, [pc, #316]	; (8002570 <complet+0x17c>)
 8002434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	3301      	adds	r3, #1
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	2b0e      	cmp	r3, #14
 8002442:	d9e7      	bls.n	8002414 <complet+0x20>
 8002444:	e08a      	b.n	800255c <complet+0x168>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800244c:	3b01      	subs	r3, #1
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	4413      	add	r3, r2
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 8002460:	2300      	movs	r3, #0
 8002462:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	e072      	b.n	8002550 <complet+0x15c>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e061      	b.n	8002534 <complet+0x140>
			{
				tokens_found = false;
 8002470:	2300      	movs	r3, #0
 8002472:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 8002474:	4a3f      	ldr	r2, [pc, #252]	; (8002574 <complet+0x180>)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	019b      	lsls	r3, r3, #6
 800247a:	4413      	add	r3, r2
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002486:	d001      	beq.n	800248c <complet+0x98>
					synonym_level = current_level; // save the synonym level
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002492:	d003      	beq.n	800249c <complet+0xa8>
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	429a      	cmp	r2, r3
 800249a:	db4f      	blt.n	800253c <complet+0x148>
					break;
				if (current_level == i)
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d101      	bne.n	80024a8 <complet+0xb4>
					last_main_synonym = n;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d122      	bne.n	80024f8 <complet+0x104>
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	019b      	lsls	r3, r3, #6
 80024b6:	4a2f      	ldr	r2, [pc, #188]	; (8002574 <complet+0x180>)
 80024b8:	4413      	add	r3, r2
 80024ba:	3304      	adds	r3, #4
 80024bc:	6939      	ldr	r1, [r7, #16]
 80024be:	4618      	mov	r0, r3
 80024c0:	f00b fcca 	bl	800de58 <strstr>
 80024c4:	4602      	mov	r2, r0
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	019b      	lsls	r3, r3, #6
 80024ca:	492a      	ldr	r1, [pc, #168]	; (8002574 <complet+0x180>)
 80024cc:	440b      	add	r3, r1
 80024ce:	3304      	adds	r3, #4
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d111      	bne.n	80024f8 <complet+0x104>
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d10d      	bne.n	80024f8 <complet+0x104>
										(i == synonym_level))
				{
					tokens_found = true;
 80024dc:	2301      	movs	r3, #1
 80024de:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	0192      	lsls	r2, r2, #6
 80024ea:	4922      	ldr	r1, [pc, #136]	; (8002574 <complet+0x180>)
 80024ec:	440a      	add	r2, r1
 80024ee:	3204      	adds	r2, #4
 80024f0:	491f      	ldr	r1, [pc, #124]	; (8002570 <complet+0x17c>)
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80024f6:	e01a      	b.n	800252e <complet+0x13a>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	019b      	lsls	r3, r3, #6
 8002506:	491b      	ldr	r1, [pc, #108]	; (8002574 <complet+0x180>)
 8002508:	440b      	add	r3, r1
 800250a:	3304      	adds	r3, #4
 800250c:	4619      	mov	r1, r3
 800250e:	4610      	mov	r0, r2
 8002510:	f7fd fe1e 	bl	8000150 <strcmp>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <complet+0x13a>
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	429a      	cmp	r2, r3
 8002520:	d105      	bne.n	800252e <complet+0x13a>
				{
					last_main_synonym++;
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	3301      	adds	r3, #1
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 8002528:	2301      	movs	r3, #1
 800252a:	77fb      	strb	r3, [r7, #31]
					break;
 800252c:	e007      	b.n	800253e <complet+0x14a>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3301      	adds	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	2b0e      	cmp	r3, #14
 8002538:	d99a      	bls.n	8002470 <complet+0x7c>
 800253a:	e000      	b.n	800253e <complet+0x14a>
					break;
 800253c:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 800253e:	7ffb      	ldrb	r3, [r7, #31]
 8002540:	f083 0301 	eor.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d107      	bne.n	800255a <complet+0x166>
		for (int i = 0; i < argc; i++)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	3301      	adds	r3, #1
 800254e:	61bb      	str	r3, [r7, #24]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	db88      	blt.n	800246a <complet+0x76>
 8002558:	e000      	b.n	800255c <complet+0x168>
				break;
 800255a:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <complet+0x17c>)
 800255e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002560:	2100      	movs	r1, #0
 8002562:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 8002566:	4b02      	ldr	r3, [pc, #8]	; (8002570 <complet+0x17c>)
}
 8002568:	4618      	mov	r0, r3
 800256a:	3730      	adds	r7, #48	; 0x30
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20002498 	.word	0x20002498
 8002574:	0800e26c 	.word	0x0800e26c

08002578 <sigint>:
#endif


void sigint (void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <sigint+0x48>)
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]


	print (ENDL);
 8002584:	480f      	ldr	r0, [pc, #60]	; (80025c4 <sigint+0x4c>)
 8002586:	f7ff fcf1 	bl	8001f6c <print>
	print ("^C catched!");
 800258a:	480f      	ldr	r0, [pc, #60]	; (80025c8 <sigint+0x50>)
 800258c:	f7ff fcee 	bl	8001f6c <print>
	int i = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 8002594:	e009      	b.n	80025aa <sigint+0x32>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <sigint+0x54>)
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	4a08      	ldr	r2, [pc, #32]	; (80025c4 <sigint+0x4c>)
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	4619      	mov	r1, r3
 80025a6:	f7ff fad3 	bl	8001b50 <microrl_insert_char>
	while (ENTER[i])
 80025aa:	4a06      	ldr	r2, [pc, #24]	; (80025c4 <sigint+0x4c>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4413      	add	r3, r2
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ef      	bne.n	8002596 <sigint+0x1e>
}
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	200001b1 	.word	0x200001b1
 80025c4:	0800df8c 	.word	0x0800df8c
 80025c8:	0800e030 	.word	0x0800e030
 80025cc:	20000008 	.word	0x20000008

080025d0 <init_microrl>:

void init_microrl(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <init_microrl+0x38>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <init_microrl+0x3c>)
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe ff7a 	bl	80014d4 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <init_microrl+0x38>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	490a      	ldr	r1, [pc, #40]	; (8002610 <init_microrl+0x40>)
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe ffc0 	bl	800156c <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <init_microrl+0x38>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4908      	ldr	r1, [pc, #32]	; (8002614 <init_microrl+0x44>)
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe ffac 	bl	8001550 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <init_microrl+0x38>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4906      	ldr	r1, [pc, #24]	; (8002618 <init_microrl+0x48>)
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe ffc2 	bl	8001588 <microrl_set_sigint_callback>
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000008 	.word	0x20000008
 800260c:	08001f6d 	.word	0x08001f6d
 8002610:	08002261 	.word	0x08002261
 8002614:	080023f5 	.word	0x080023f5
 8002618:	08002579 	.word	0x08002579

0800261c <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <clear_screen+0x20>)
 8002628:	f7ff fca0 	bl	8001f6c <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 800262c:	4804      	ldr	r0, [pc, #16]	; (8002640 <clear_screen+0x24>)
 800262e:	f7ff fc9d 	bl	8001f6c <print>
	return 0;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	0800e03c 	.word	0x0800e03c
 8002640:	0800e044 	.word	0x0800e044

08002644 <set_CDC_ready>:


void set_CDC_ready(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <set_CDC_ready+0x14>)
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	200001b0 	.word	0x200001b0

0800265c <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <color_toggle+0x30>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	f083 0301 	eor.w	r3, r3, #1
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf14      	ite	ne
 8002674:	2301      	movne	r3, #1
 8002676:	2300      	moveq	r3, #0
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4b04      	ldr	r3, [pc, #16]	; (800268c <color_toggle+0x30>)
 800267c:	701a      	strb	r2, [r3, #0]
	return 0;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	2000000c 	.word	0x2000000c

08002690 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	color_out = 1;
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <color_on+0x28>)
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 80026a0:	2105      	movs	r1, #5
 80026a2:	4806      	ldr	r0, [pc, #24]	; (80026bc <color_on+0x2c>)
 80026a4:	f7ff fcce 	bl	8002044 <print_color>
	print(ENDL);
 80026a8:	4805      	ldr	r0, [pc, #20]	; (80026c0 <color_on+0x30>)
 80026aa:	f7ff fc5f 	bl	8001f6c <print>
	return 0;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	2000000c 	.word	0x2000000c
 80026bc:	0800e048 	.word	0x0800e048
 80026c0:	0800df8c 	.word	0x0800df8c

080026c4 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
	color_out = 0;
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <color_off+0x28>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 80026d4:	4806      	ldr	r0, [pc, #24]	; (80026f0 <color_off+0x2c>)
 80026d6:	f7ff fc49 	bl	8001f6c <print>
	print(ENDL);
 80026da:	4806      	ldr	r0, [pc, #24]	; (80026f4 <color_off+0x30>)
 80026dc:	f7ff fc46 	bl	8001f6c <print>
	return 0;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000000c 	.word	0x2000000c
 80026f0:	0800e05c 	.word	0x0800e05c
 80026f4:	0800df8c 	.word	0x0800df8c

080026f8 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
	if (color_out)
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <color_show+0x34>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d004      	beq.n	8002714 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 800270a:	2105      	movs	r1, #5
 800270c:	4808      	ldr	r0, [pc, #32]	; (8002730 <color_show+0x38>)
 800270e:	f7ff fc99 	bl	8002044 <print_color>
 8002712:	e002      	b.n	800271a <color_show+0x22>
	else
		print ("Color output is OFF");
 8002714:	4807      	ldr	r0, [pc, #28]	; (8002734 <color_show+0x3c>)
 8002716:	f7ff fc29 	bl	8001f6c <print>
	print(ENDL);
 800271a:	4807      	ldr	r0, [pc, #28]	; (8002738 <color_show+0x40>)
 800271c:	f7ff fc26 	bl	8001f6c <print>
	return 0;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	2000000c 	.word	0x2000000c
 8002730:	0800e048 	.word	0x0800e048
 8002734:	0800e05c 	.word	0x0800e05c
 8002738:	0800df8c 	.word	0x0800df8c

0800273c <nema_toggle>:


int nema_toggle 	(int argc, const char * const * argv)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
	nema_out ^= 1;
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <nema_toggle+0x30>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	f083 0301 	eor.w	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <nema_toggle+0x30>)
 800275c:	701a      	strb	r2, [r3, #0]
	return 0;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	200001b1 	.word	0x200001b1

08002770 <nema_on>:

int nema_on 		(int argc, const char * const * argv)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
	nema_out = 1;
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <nema_on+0x28>)
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]
	print_color ("NEMA output is ON", C_GREEN);
 8002780:	2105      	movs	r1, #5
 8002782:	4806      	ldr	r0, [pc, #24]	; (800279c <nema_on+0x2c>)
 8002784:	f7ff fc5e 	bl	8002044 <print_color>
	print(ENDL);
 8002788:	4805      	ldr	r0, [pc, #20]	; (80027a0 <nema_on+0x30>)
 800278a:	f7ff fbef 	bl	8001f6c <print>
	return 0;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	200001b1 	.word	0x200001b1
 800279c:	0800e070 	.word	0x0800e070
 80027a0:	0800df8c 	.word	0x0800df8c

080027a4 <nema_off>:

int nema_off 		(int argc, const char * const * argv)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
	nema_out = 0;
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <nema_off+0x28>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
	print ("NEM output is OFF");
 80027b4:	4806      	ldr	r0, [pc, #24]	; (80027d0 <nema_off+0x2c>)
 80027b6:	f7ff fbd9 	bl	8001f6c <print>
	print(ENDL);
 80027ba:	4806      	ldr	r0, [pc, #24]	; (80027d4 <nema_off+0x30>)
 80027bc:	f7ff fbd6 	bl	8001f6c <print>
	return 0;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200001b1 	.word	0x200001b1
 80027d0:	0800e084 	.word	0x0800e084
 80027d4:	0800df8c 	.word	0x0800df8c

080027d8 <vfd>:

int vfd 		(int argc, const char * const * argv)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
	uint32_t dig = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
	char * pchar = argv[1];
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	60fb      	str	r3, [r7, #12]
	while (*pchar)
 80027ec:	e00e      	b.n	800280c <vfd+0x34>
	{
		dig *= 10;
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	60bb      	str	r3, [r7, #8]
		dig += *(pchar++) - '0';
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	60fa      	str	r2, [r7, #12]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	3b30      	subs	r3, #48	; 0x30
 8002804:	461a      	mov	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4413      	add	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
	while (*pchar)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1ec      	bne.n	80027ee <vfd+0x16>
	}
	dig = dig;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	60bb      	str	r3, [r7, #8]
	xQueueSendToBack(qVFDHandle, &dig, 100);
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <vfd+0x7c>)
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	f107 0108 	add.w	r1, r7, #8
 8002820:	2300      	movs	r3, #0
 8002822:	2264      	movs	r2, #100	; 0x64
 8002824:	f008 faba 	bl	800ad9c <xQueueGenericSend>
	xQueueSendToBack(qVFDHandle, &dig, 100);
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <vfd+0x7c>)
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	f107 0108 	add.w	r1, r7, #8
 8002830:	2300      	movs	r3, #0
 8002832:	2264      	movs	r2, #100	; 0x64
 8002834:	f008 fab2 	bl	800ad9c <xQueueGenericSend>
	xQueueSendToBack(qVFDHandle, &dig, 100);
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <vfd+0x7c>)
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	f107 0108 	add.w	r1, r7, #8
 8002840:	2300      	movs	r3, #0
 8002842:	2264      	movs	r2, #100	; 0x64
 8002844:	f008 faaa 	bl	800ad9c <xQueueGenericSend>
	return 0;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000248c 	.word	0x2000248c

08002858 <show_encoder>:


int show_encoder (int argc, const char * const * argv)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]

	uint32_t buf = encoder_value;
 8002862:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <show_encoder+0x78>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	617b      	str	r3, [r7, #20]
	char str [8];

	for (int i = 0; i < 5; i++)
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	e01d      	b.n	80028aa <show_encoder+0x52>
	{
		str[4 - i] = buf % 10 + '0';
 800286e:	6979      	ldr	r1, [r7, #20]
 8002870:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <show_encoder+0x7c>)
 8002872:	fba3 2301 	umull	r2, r3, r3, r1
 8002876:	08da      	lsrs	r2, r3, #3
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	1aca      	subs	r2, r1, r3
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f1c3 0304 	rsb	r3, r3, #4
 800288a:	3230      	adds	r2, #48	; 0x30
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	f107 0118 	add.w	r1, r7, #24
 8002892:	440b      	add	r3, r1
 8002894:	f803 2c10 	strb.w	r2, [r3, #-16]
		buf /= 10;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	4a0e      	ldr	r2, [pc, #56]	; (80028d4 <show_encoder+0x7c>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	08db      	lsrs	r3, r3, #3
 80028a2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 5; i++)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	3301      	adds	r3, #1
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	ddde      	ble.n	800286e <show_encoder+0x16>
	}
	str[5] = '\r';
 80028b0:	230d      	movs	r3, #13
 80028b2:	737b      	strb	r3, [r7, #13]
	str[6] = '\n';
 80028b4:	230a      	movs	r3, #10
 80028b6:	73bb      	strb	r3, [r7, #14]
	str[7] = '\0';
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]
	print(str);
 80028bc:	f107 0308 	add.w	r3, r7, #8
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fb53 	bl	8001f6c <print>
	return 0;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	200001ac 	.word	0x200001ac
 80028d4:	cccccccd 	.word	0xcccccccd

080028d8 <get_nema>:


bool get_nema(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
	return nema_out;
 80028dc:	4b02      	ldr	r3, [pc, #8]	; (80028e8 <get_nema+0x10>)
 80028de:	781b      	ldrb	r3, [r3, #0]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr
 80028e8:	200001b1 	.word	0x200001b1

080028ec <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <MX_SPI2_Init+0x64>)
 80028f2:	4a18      	ldr	r2, [pc, #96]	; (8002954 <MX_SPI2_Init+0x68>)
 80028f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028f6:	4b16      	ldr	r3, [pc, #88]	; (8002950 <MX_SPI2_Init+0x64>)
 80028f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <MX_SPI2_Init+0x64>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <MX_SPI2_Init+0x64>)
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800290a:	4b11      	ldr	r3, [pc, #68]	; (8002950 <MX_SPI2_Init+0x64>)
 800290c:	2202      	movs	r2, #2
 800290e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002910:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <MX_SPI2_Init+0x64>)
 8002912:	2201      	movs	r2, #1
 8002914:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002916:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <MX_SPI2_Init+0x64>)
 8002918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800291e:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <MX_SPI2_Init+0x64>)
 8002920:	2218      	movs	r2, #24
 8002922:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <MX_SPI2_Init+0x64>)
 8002926:	2280      	movs	r2, #128	; 0x80
 8002928:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <MX_SPI2_Init+0x64>)
 800292c:	2200      	movs	r2, #0
 800292e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002930:	4b07      	ldr	r3, [pc, #28]	; (8002950 <MX_SPI2_Init+0x64>)
 8002932:	2200      	movs	r2, #0
 8002934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <MX_SPI2_Init+0x64>)
 8002938:	220a      	movs	r2, #10
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800293c:	4804      	ldr	r0, [pc, #16]	; (8002950 <MX_SPI2_Init+0x64>)
 800293e:	f002 ff3f 	bl	80057c0 <HAL_SPI_Init>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002948:	f7fe fa74 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20002578 	.word	0x20002578
 8002954:	40003800 	.word	0x40003800

08002958 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0310 	add.w	r3, r7, #16
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <HAL_SPI_MspInit+0x8c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d131      	bne.n	80029dc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_SPI_MspInit+0x90>)
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	4a1a      	ldr	r2, [pc, #104]	; (80029e8 <HAL_SPI_MspInit+0x90>)
 800297e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002982:	61d3      	str	r3, [r2, #28]
 8002984:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_SPI_MspInit+0x90>)
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002990:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_SPI_MspInit+0x90>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <HAL_SPI_MspInit+0x90>)
 8002996:	f043 0308 	orr.w	r3, r3, #8
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_SPI_MspInit+0x90>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80029a8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80029ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b2:	2303      	movs	r3, #3
 80029b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b6:	f107 0310 	add.w	r3, r7, #16
 80029ba:	4619      	mov	r1, r3
 80029bc:	480b      	ldr	r0, [pc, #44]	; (80029ec <HAL_SPI_MspInit+0x94>)
 80029be:	f000 fb49 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80029c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	4619      	mov	r1, r3
 80029d6:	4805      	ldr	r0, [pc, #20]	; (80029ec <HAL_SPI_MspInit+0x94>)
 80029d8:	f000 fb3c 	bl	8003054 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80029dc:	bf00      	nop
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40003800 	.word	0x40003800
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40010c00 	.word	0x40010c00

080029f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029f6:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_MspInit+0x68>)
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <HAL_MspInit+0x68>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6193      	str	r3, [r2, #24]
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_MspInit+0x68>)
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_MspInit+0x68>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	4a11      	ldr	r2, [pc, #68]	; (8002a58 <HAL_MspInit+0x68>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a18:	61d3      	str	r3, [r2, #28]
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <HAL_MspInit+0x68>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	210f      	movs	r1, #15
 8002a2a:	f06f 0001 	mvn.w	r0, #1
 8002a2e:	f000 fa36 	bl	8002e9e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_MspInit+0x6c>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <HAL_MspInit+0x6c>)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40010000 	.word	0x40010000

08002a60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	; 0x30
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002a70:	2200      	movs	r2, #0
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	2019      	movs	r0, #25
 8002a76:	f000 fa12 	bl	8002e9e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002a7a:	2019      	movs	r0, #25
 8002a7c:	f000 fa2b 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a80:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <HAL_InitTick+0x9c>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <HAL_InitTick+0x9c>)
 8002a86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a8a:	6193      	str	r3, [r2, #24]
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_InitTick+0x9c>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a98:	f107 0210 	add.w	r2, r7, #16
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f002 fd88 	bl	80055b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002aa8:	f002 fd72 	bl	8005590 <HAL_RCC_GetPCLK2Freq>
 8002aac:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <HAL_InitTick+0xa0>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	0c9b      	lsrs	r3, r3, #18
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <HAL_InitTick+0xa4>)
 8002abe:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <HAL_InitTick+0xa8>)
 8002ac0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <HAL_InitTick+0xa4>)
 8002ac4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ac8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002aca:	4a0e      	ldr	r2, [pc, #56]	; (8002b04 <HAL_InitTick+0xa4>)
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ace:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <HAL_InitTick+0xa4>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_InitTick+0xa4>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002adc:	4809      	ldr	r0, [pc, #36]	; (8002b04 <HAL_InitTick+0xa4>)
 8002ade:	f003 f8d5 	bl	8005c8c <HAL_TIM_Base_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d104      	bne.n	8002af2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002ae8:	4806      	ldr	r0, [pc, #24]	; (8002b04 <HAL_InitTick+0xa4>)
 8002aea:	f003 f927 	bl	8005d3c <HAL_TIM_Base_Start_IT>
 8002aee:	4603      	mov	r3, r0
 8002af0:	e000      	b.n	8002af4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3730      	adds	r7, #48	; 0x30
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	431bde83 	.word	0x431bde83
 8002b04:	200025d0 	.word	0x200025d0
 8002b08:	40012c00 	.word	0x40012c00

08002b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <NMI_Handler+0x4>

08002b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <HardFault_Handler+0x4>

08002b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <MemManage_Handler+0x4>

08002b1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <BusFault_Handler+0x4>

08002b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <UsageFault_Handler+0x4>

08002b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f000 fc56 	bl	80033ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002b4a:	f000 fda2 	bl	8003692 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20003334 	.word	0x20003334

08002b58 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <TIM1_UP_IRQHandler+0x10>)
 8002b5e:	f003 f93f 	bl	8005de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200025d0 	.word	0x200025d0

08002b6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <USART2_IRQHandler+0x10>)
 8002b72:	f003 fb53 	bl	800621c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20002618 	.word	0x20002618

08002b80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <MX_USART2_UART_Init+0x4c>)
 8002b92:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <MX_USART2_UART_Init+0x50>)
 8002b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <MX_USART2_UART_Init+0x4c>)
 8002b98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <MX_USART2_UART_Init+0x4c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <MX_USART2_UART_Init+0x4c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002baa:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <MX_USART2_UART_Init+0x4c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <MX_USART2_UART_Init+0x4c>)
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <MX_USART2_UART_Init+0x4c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <MX_USART2_UART_Init+0x4c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bc2:	4805      	ldr	r0, [pc, #20]	; (8002bd8 <MX_USART2_UART_Init+0x4c>)
 8002bc4:	f003 faac 	bl	8006120 <HAL_UART_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bce:	f7fe f931 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20002618 	.word	0x20002618
 8002bdc:	40004400 	.word	0x40004400

08002be0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1f      	ldr	r2, [pc, #124]	; (8002c78 <HAL_UART_MspInit+0x98>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d137      	bne.n	8002c70 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c00:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <HAL_UART_MspInit+0x9c>)
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	4a1d      	ldr	r2, [pc, #116]	; (8002c7c <HAL_UART_MspInit+0x9c>)
 8002c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c0a:	61d3      	str	r3, [r2, #28]
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <HAL_UART_MspInit+0x9c>)
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <HAL_UART_MspInit+0x9c>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <HAL_UART_MspInit+0x9c>)
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	6193      	str	r3, [r2, #24]
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_UART_MspInit+0x9c>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c30:	2304      	movs	r3, #4
 8002c32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3c:	f107 0310 	add.w	r3, r7, #16
 8002c40:	4619      	mov	r1, r3
 8002c42:	480f      	ldr	r0, [pc, #60]	; (8002c80 <HAL_UART_MspInit+0xa0>)
 8002c44:	f000 fa06 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c48:	2308      	movs	r3, #8
 8002c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c54:	f107 0310 	add.w	r3, r7, #16
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4809      	ldr	r0, [pc, #36]	; (8002c80 <HAL_UART_MspInit+0xa0>)
 8002c5c:	f000 f9fa 	bl	8003054 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2105      	movs	r1, #5
 8002c64:	2026      	movs	r0, #38	; 0x26
 8002c66:	f000 f91a 	bl	8002e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c6a:	2026      	movs	r0, #38	; 0x26
 8002c6c:	f000 f933 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c70:	bf00      	nop
 8002c72:	3720      	adds	r7, #32
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40004400 	.word	0x40004400
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40010800 	.word	0x40010800

08002c84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c84:	480c      	ldr	r0, [pc, #48]	; (8002cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c86:	490d      	ldr	r1, [pc, #52]	; (8002cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c88:	4a0d      	ldr	r2, [pc, #52]	; (8002cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c8c:	e002      	b.n	8002c94 <LoopCopyDataInit>

08002c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c92:	3304      	adds	r3, #4

08002c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c98:	d3f9      	bcc.n	8002c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c9c:	4c0a      	ldr	r4, [pc, #40]	; (8002cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca0:	e001      	b.n	8002ca6 <LoopFillZerobss>

08002ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca4:	3204      	adds	r2, #4

08002ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca8:	d3fb      	bcc.n	8002ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002caa:	f7ff ff69 	bl	8002b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cae:	f00b f87f 	bl	800ddb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cb2:	f7fe f83f 	bl	8000d34 <main>
  bx lr
 8002cb6:	4770      	bx	lr
  ldr r0, =_sdata
 8002cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cbc:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002cc0:	0800e70c 	.word	0x0800e70c
  ldr r2, =_sbss
 8002cc4:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8002cc8:	20003620 	.word	0x20003620

08002ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ccc:	e7fe      	b.n	8002ccc <ADC1_2_IRQHandler>
	...

08002cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_Init+0x28>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <HAL_Init+0x28>)
 8002cda:	f043 0310 	orr.w	r3, r3, #16
 8002cde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	f000 f8d1 	bl	8002e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7ff feba 	bl	8002a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cec:	f7ff fe80 	bl	80029f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40022000 	.word	0x40022000

08002cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_IncTick+0x1c>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_IncTick+0x20>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a03      	ldr	r2, [pc, #12]	; (8002d1c <HAL_IncTick+0x20>)
 8002d0e:	6013      	str	r3, [r2, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	20000018 	.word	0x20000018
 8002d1c:	2000265c 	.word	0x2000265c

08002d20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return uwTick;
 8002d24:	4b02      	ldr	r3, [pc, #8]	; (8002d30 <HAL_GetTick+0x10>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	2000265c 	.word	0x2000265c

08002d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <__NVIC_SetPriorityGrouping+0x44>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d50:	4013      	ands	r3, r2
 8002d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d66:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <__NVIC_SetPriorityGrouping+0x44>)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	60d3      	str	r3, [r2, #12]
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <__NVIC_GetPriorityGrouping+0x18>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	0a1b      	lsrs	r3, r3, #8
 8002d86:	f003 0307 	and.w	r3, r3, #7
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	db0b      	blt.n	8002dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	f003 021f 	and.w	r2, r3, #31
 8002db0:	4906      	ldr	r1, [pc, #24]	; (8002dcc <__NVIC_EnableIRQ+0x34>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	2001      	movs	r0, #1
 8002dba:	fa00 f202 	lsl.w	r2, r0, r2
 8002dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	e000e100 	.word	0xe000e100

08002dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	6039      	str	r1, [r7, #0]
 8002dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	db0a      	blt.n	8002dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	490c      	ldr	r1, [pc, #48]	; (8002e1c <__NVIC_SetPriority+0x4c>)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	0112      	lsls	r2, r2, #4
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	440b      	add	r3, r1
 8002df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df8:	e00a      	b.n	8002e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4908      	ldr	r1, [pc, #32]	; (8002e20 <__NVIC_SetPriority+0x50>)
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	3b04      	subs	r3, #4
 8002e08:	0112      	lsls	r2, r2, #4
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	761a      	strb	r2, [r3, #24]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	e000e100 	.word	0xe000e100
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	; 0x24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f1c3 0307 	rsb	r3, r3, #7
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	bf28      	it	cs
 8002e42:	2304      	movcs	r3, #4
 8002e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	2b06      	cmp	r3, #6
 8002e4c:	d902      	bls.n	8002e54 <NVIC_EncodePriority+0x30>
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3b03      	subs	r3, #3
 8002e52:	e000      	b.n	8002e56 <NVIC_EncodePriority+0x32>
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e58:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43da      	mvns	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	401a      	ands	r2, r3
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	43d9      	mvns	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e7c:	4313      	orrs	r3, r2
         );
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3724      	adds	r7, #36	; 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff ff4f 	bl	8002d34 <__NVIC_SetPriorityGrouping>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb0:	f7ff ff64 	bl	8002d7c <__NVIC_GetPriorityGrouping>
 8002eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	6978      	ldr	r0, [r7, #20]
 8002ebc:	f7ff ffb2 	bl	8002e24 <NVIC_EncodePriority>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff81 	bl	8002dd0 <__NVIC_SetPriority>
}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff57 	bl	8002d98 <__NVIC_EnableIRQ>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d008      	beq.n	8002f1a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e020      	b.n	8002f5c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 020e 	bic.w	r2, r2, #14
 8002f28:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0201 	bic.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f42:	2101      	movs	r1, #1
 8002f44:	fa01 f202 	lsl.w	r2, r1, r2
 8002f48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d005      	beq.n	8002f8a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2204      	movs	r2, #4
 8002f82:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e051      	b.n	800302e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 020e 	bic.w	r2, r2, #14
 8002f98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0201 	bic.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a22      	ldr	r2, [pc, #136]	; (8003038 <HAL_DMA_Abort_IT+0xd0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d029      	beq.n	8003008 <HAL_DMA_Abort_IT+0xa0>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a20      	ldr	r2, [pc, #128]	; (800303c <HAL_DMA_Abort_IT+0xd4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d022      	beq.n	8003004 <HAL_DMA_Abort_IT+0x9c>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1f      	ldr	r2, [pc, #124]	; (8003040 <HAL_DMA_Abort_IT+0xd8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d01a      	beq.n	8002ffe <HAL_DMA_Abort_IT+0x96>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <HAL_DMA_Abort_IT+0xdc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d012      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x90>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1c      	ldr	r2, [pc, #112]	; (8003048 <HAL_DMA_Abort_IT+0xe0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00a      	beq.n	8002ff2 <HAL_DMA_Abort_IT+0x8a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1a      	ldr	r2, [pc, #104]	; (800304c <HAL_DMA_Abort_IT+0xe4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d102      	bne.n	8002fec <HAL_DMA_Abort_IT+0x84>
 8002fe6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fea:	e00e      	b.n	800300a <HAL_DMA_Abort_IT+0xa2>
 8002fec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ff0:	e00b      	b.n	800300a <HAL_DMA_Abort_IT+0xa2>
 8002ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ff6:	e008      	b.n	800300a <HAL_DMA_Abort_IT+0xa2>
 8002ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ffc:	e005      	b.n	800300a <HAL_DMA_Abort_IT+0xa2>
 8002ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003002:	e002      	b.n	800300a <HAL_DMA_Abort_IT+0xa2>
 8003004:	2310      	movs	r3, #16
 8003006:	e000      	b.n	800300a <HAL_DMA_Abort_IT+0xa2>
 8003008:	2301      	movs	r3, #1
 800300a:	4a11      	ldr	r2, [pc, #68]	; (8003050 <HAL_DMA_Abort_IT+0xe8>)
 800300c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
    } 
  }
  return status;
 800302e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40020008 	.word	0x40020008
 800303c:	4002001c 	.word	0x4002001c
 8003040:	40020030 	.word	0x40020030
 8003044:	40020044 	.word	0x40020044
 8003048:	40020058 	.word	0x40020058
 800304c:	4002006c 	.word	0x4002006c
 8003050:	40020000 	.word	0x40020000

08003054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003054:	b480      	push	{r7}
 8003056:	b08b      	sub	sp, #44	; 0x2c
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003062:	2300      	movs	r3, #0
 8003064:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003066:	e169      	b.n	800333c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003068:	2201      	movs	r2, #1
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	429a      	cmp	r2, r3
 8003082:	f040 8158 	bne.w	8003336 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a9a      	ldr	r2, [pc, #616]	; (80032f4 <HAL_GPIO_Init+0x2a0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d05e      	beq.n	800314e <HAL_GPIO_Init+0xfa>
 8003090:	4a98      	ldr	r2, [pc, #608]	; (80032f4 <HAL_GPIO_Init+0x2a0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d875      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 8003096:	4a98      	ldr	r2, [pc, #608]	; (80032f8 <HAL_GPIO_Init+0x2a4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d058      	beq.n	800314e <HAL_GPIO_Init+0xfa>
 800309c:	4a96      	ldr	r2, [pc, #600]	; (80032f8 <HAL_GPIO_Init+0x2a4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d86f      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 80030a2:	4a96      	ldr	r2, [pc, #600]	; (80032fc <HAL_GPIO_Init+0x2a8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d052      	beq.n	800314e <HAL_GPIO_Init+0xfa>
 80030a8:	4a94      	ldr	r2, [pc, #592]	; (80032fc <HAL_GPIO_Init+0x2a8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d869      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 80030ae:	4a94      	ldr	r2, [pc, #592]	; (8003300 <HAL_GPIO_Init+0x2ac>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d04c      	beq.n	800314e <HAL_GPIO_Init+0xfa>
 80030b4:	4a92      	ldr	r2, [pc, #584]	; (8003300 <HAL_GPIO_Init+0x2ac>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d863      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 80030ba:	4a92      	ldr	r2, [pc, #584]	; (8003304 <HAL_GPIO_Init+0x2b0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d046      	beq.n	800314e <HAL_GPIO_Init+0xfa>
 80030c0:	4a90      	ldr	r2, [pc, #576]	; (8003304 <HAL_GPIO_Init+0x2b0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d85d      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 80030c6:	2b12      	cmp	r3, #18
 80030c8:	d82a      	bhi.n	8003120 <HAL_GPIO_Init+0xcc>
 80030ca:	2b12      	cmp	r3, #18
 80030cc:	d859      	bhi.n	8003182 <HAL_GPIO_Init+0x12e>
 80030ce:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <HAL_GPIO_Init+0x80>)
 80030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d4:	0800314f 	.word	0x0800314f
 80030d8:	08003129 	.word	0x08003129
 80030dc:	0800313b 	.word	0x0800313b
 80030e0:	0800317d 	.word	0x0800317d
 80030e4:	08003183 	.word	0x08003183
 80030e8:	08003183 	.word	0x08003183
 80030ec:	08003183 	.word	0x08003183
 80030f0:	08003183 	.word	0x08003183
 80030f4:	08003183 	.word	0x08003183
 80030f8:	08003183 	.word	0x08003183
 80030fc:	08003183 	.word	0x08003183
 8003100:	08003183 	.word	0x08003183
 8003104:	08003183 	.word	0x08003183
 8003108:	08003183 	.word	0x08003183
 800310c:	08003183 	.word	0x08003183
 8003110:	08003183 	.word	0x08003183
 8003114:	08003183 	.word	0x08003183
 8003118:	08003131 	.word	0x08003131
 800311c:	08003145 	.word	0x08003145
 8003120:	4a79      	ldr	r2, [pc, #484]	; (8003308 <HAL_GPIO_Init+0x2b4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003126:	e02c      	b.n	8003182 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	623b      	str	r3, [r7, #32]
          break;
 800312e:	e029      	b.n	8003184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	3304      	adds	r3, #4
 8003136:	623b      	str	r3, [r7, #32]
          break;
 8003138:	e024      	b.n	8003184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	3308      	adds	r3, #8
 8003140:	623b      	str	r3, [r7, #32]
          break;
 8003142:	e01f      	b.n	8003184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	330c      	adds	r3, #12
 800314a:	623b      	str	r3, [r7, #32]
          break;
 800314c:	e01a      	b.n	8003184 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d102      	bne.n	800315c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003156:	2304      	movs	r3, #4
 8003158:	623b      	str	r3, [r7, #32]
          break;
 800315a:	e013      	b.n	8003184 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d105      	bne.n	8003170 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003164:	2308      	movs	r3, #8
 8003166:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	611a      	str	r2, [r3, #16]
          break;
 800316e:	e009      	b.n	8003184 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003170:	2308      	movs	r3, #8
 8003172:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	615a      	str	r2, [r3, #20]
          break;
 800317a:	e003      	b.n	8003184 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800317c:	2300      	movs	r3, #0
 800317e:	623b      	str	r3, [r7, #32]
          break;
 8003180:	e000      	b.n	8003184 <HAL_GPIO_Init+0x130>
          break;
 8003182:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2bff      	cmp	r3, #255	; 0xff
 8003188:	d801      	bhi.n	800318e <HAL_GPIO_Init+0x13a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	e001      	b.n	8003192 <HAL_GPIO_Init+0x13e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3304      	adds	r3, #4
 8003192:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2bff      	cmp	r3, #255	; 0xff
 8003198:	d802      	bhi.n	80031a0 <HAL_GPIO_Init+0x14c>
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	e002      	b.n	80031a6 <HAL_GPIO_Init+0x152>
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	3b08      	subs	r3, #8
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	210f      	movs	r1, #15
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	401a      	ands	r2, r3
 80031b8:	6a39      	ldr	r1, [r7, #32]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	fa01 f303 	lsl.w	r3, r1, r3
 80031c0:	431a      	orrs	r2, r3
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80b1 	beq.w	8003336 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031d4:	4b4d      	ldr	r3, [pc, #308]	; (800330c <HAL_GPIO_Init+0x2b8>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	4a4c      	ldr	r2, [pc, #304]	; (800330c <HAL_GPIO_Init+0x2b8>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6193      	str	r3, [r2, #24]
 80031e0:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_GPIO_Init+0x2b8>)
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031ec:	4a48      	ldr	r2, [pc, #288]	; (8003310 <HAL_GPIO_Init+0x2bc>)
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	220f      	movs	r2, #15
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4013      	ands	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a40      	ldr	r2, [pc, #256]	; (8003314 <HAL_GPIO_Init+0x2c0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d013      	beq.n	8003240 <HAL_GPIO_Init+0x1ec>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a3f      	ldr	r2, [pc, #252]	; (8003318 <HAL_GPIO_Init+0x2c4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00d      	beq.n	800323c <HAL_GPIO_Init+0x1e8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a3e      	ldr	r2, [pc, #248]	; (800331c <HAL_GPIO_Init+0x2c8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d007      	beq.n	8003238 <HAL_GPIO_Init+0x1e4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a3d      	ldr	r2, [pc, #244]	; (8003320 <HAL_GPIO_Init+0x2cc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d101      	bne.n	8003234 <HAL_GPIO_Init+0x1e0>
 8003230:	2303      	movs	r3, #3
 8003232:	e006      	b.n	8003242 <HAL_GPIO_Init+0x1ee>
 8003234:	2304      	movs	r3, #4
 8003236:	e004      	b.n	8003242 <HAL_GPIO_Init+0x1ee>
 8003238:	2302      	movs	r3, #2
 800323a:	e002      	b.n	8003242 <HAL_GPIO_Init+0x1ee>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_GPIO_Init+0x1ee>
 8003240:	2300      	movs	r3, #0
 8003242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003244:	f002 0203 	and.w	r2, r2, #3
 8003248:	0092      	lsls	r2, r2, #2
 800324a:	4093      	lsls	r3, r2
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003252:	492f      	ldr	r1, [pc, #188]	; (8003310 <HAL_GPIO_Init+0x2bc>)
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3302      	adds	r3, #2
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d006      	beq.n	800327a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800326c:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	492c      	ldr	r1, [pc, #176]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	600b      	str	r3, [r1, #0]
 8003278:	e006      	b.n	8003288 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800327a:	4b2a      	ldr	r3, [pc, #168]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	43db      	mvns	r3, r3
 8003282:	4928      	ldr	r1, [pc, #160]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 8003284:	4013      	ands	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003294:	4b23      	ldr	r3, [pc, #140]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4922      	ldr	r1, [pc, #136]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032a2:	4b20      	ldr	r3, [pc, #128]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	491e      	ldr	r1, [pc, #120]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d006      	beq.n	80032ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032bc:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	4918      	ldr	r1, [pc, #96]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	608b      	str	r3, [r1, #8]
 80032c8:	e006      	b.n	80032d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032ca:	4b16      	ldr	r3, [pc, #88]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	4914      	ldr	r1, [pc, #80]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d021      	beq.n	8003328 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	490e      	ldr	r1, [pc, #56]	; (8003324 <HAL_GPIO_Init+0x2d0>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60cb      	str	r3, [r1, #12]
 80032f0:	e021      	b.n	8003336 <HAL_GPIO_Init+0x2e2>
 80032f2:	bf00      	nop
 80032f4:	10320000 	.word	0x10320000
 80032f8:	10310000 	.word	0x10310000
 80032fc:	10220000 	.word	0x10220000
 8003300:	10210000 	.word	0x10210000
 8003304:	10120000 	.word	0x10120000
 8003308:	10110000 	.word	0x10110000
 800330c:	40021000 	.word	0x40021000
 8003310:	40010000 	.word	0x40010000
 8003314:	40010800 	.word	0x40010800
 8003318:	40010c00 	.word	0x40010c00
 800331c:	40011000 	.word	0x40011000
 8003320:	40011400 	.word	0x40011400
 8003324:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_GPIO_Init+0x304>)
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	43db      	mvns	r3, r3
 8003330:	4909      	ldr	r1, [pc, #36]	; (8003358 <HAL_GPIO_Init+0x304>)
 8003332:	4013      	ands	r3, r2
 8003334:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	3301      	adds	r3, #1
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	fa22 f303 	lsr.w	r3, r2, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	f47f ae8e 	bne.w	8003068 <HAL_GPIO_Init+0x14>
  }
}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	372c      	adds	r7, #44	; 0x2c
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	40010400 	.word	0x40010400

0800335c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	887b      	ldrh	r3, [r7, #2]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
 8003378:	e001      	b.n	800337e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800337e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	460b      	mov	r3, r1
 8003394:	807b      	strh	r3, [r7, #2]
 8003396:	4613      	mov	r3, r2
 8003398:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800339a:	787b      	ldrb	r3, [r7, #1]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a0:	887a      	ldrh	r2, [r7, #2]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033a6:	e003      	b.n	80033b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033a8:	887b      	ldrh	r3, [r7, #2]
 80033aa:	041a      	lsls	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	611a      	str	r2, [r3, #16]
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr

080033ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b085      	sub	sp, #20
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	460b      	mov	r3, r1
 80033c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033cc:	887a      	ldrh	r2, [r7, #2]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4013      	ands	r3, r2
 80033d2:	041a      	lsls	r2, r3, #16
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	43d9      	mvns	r1, r3
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	400b      	ands	r3, r1
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	611a      	str	r2, [r3, #16]
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033f6:	4b08      	ldr	r3, [pc, #32]	; (8003418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d006      	beq.n	8003410 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003402:	4a05      	ldr	r2, [pc, #20]	; (8003418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	4618      	mov	r0, r3
 800340c:	f000 f806 	bl	800341c <HAL_GPIO_EXTI_Callback>
  }
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40010400 	.word	0x40010400

0800341c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003432:	b08b      	sub	sp, #44	; 0x2c
 8003434:	af06      	add	r7, sp, #24
 8003436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e0fd      	b.n	800363e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f00a fa00 	bl	800d85c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2203      	movs	r2, #3
 8003460:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f003 fadb 	bl	8006a24 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	687e      	ldr	r6, [r7, #4]
 8003476:	466d      	mov	r5, sp
 8003478:	f106 0410 	add.w	r4, r6, #16
 800347c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800347e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	602b      	str	r3, [r5, #0]
 8003484:	1d33      	adds	r3, r6, #4
 8003486:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003488:	6838      	ldr	r0, [r7, #0]
 800348a:	f003 faa5 	bl	80069d8 <USB_CoreInit>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0ce      	b.n	800363e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f003 fad6 	bl	8006a58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ac:	2300      	movs	r3, #0
 80034ae:	73fb      	strb	r3, [r7, #15]
 80034b0:	e04c      	b.n	800354c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	440b      	add	r3, r1
 80034c2:	3301      	adds	r3, #1
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	440b      	add	r3, r1
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	b298      	uxth	r0, r3
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	440b      	add	r3, r1
 80034ee:	3336      	adds	r3, #54	; 0x36
 80034f0:	4602      	mov	r2, r0
 80034f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	440b      	add	r3, r1
 8003504:	3303      	adds	r3, #3
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800350a:	7bfa      	ldrb	r2, [r7, #15]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	440b      	add	r3, r1
 8003518:	3338      	adds	r3, #56	; 0x38
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800351e:	7bfa      	ldrb	r2, [r7, #15]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	440b      	add	r3, r1
 800352c:	333c      	adds	r3, #60	; 0x3c
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	440b      	add	r3, r1
 8003540:	3340      	adds	r3, #64	; 0x40
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	3301      	adds	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
 800354c:	7bfa      	ldrb	r2, [r7, #15]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	429a      	cmp	r2, r3
 8003554:	d3ad      	bcc.n	80034b2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]
 800355a:	e044      	b.n	80035e6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	440b      	add	r3, r1
 800356a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003572:	7bfa      	ldrb	r2, [r7, #15]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	440b      	add	r3, r1
 8003596:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	440b      	add	r3, r1
 80035ac:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	440b      	add	r3, r1
 80035c2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	440b      	add	r3, r1
 80035d8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	3301      	adds	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d3b5      	bcc.n	800355c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	603b      	str	r3, [r7, #0]
 80035f6:	687e      	ldr	r6, [r7, #4]
 80035f8:	466d      	mov	r5, sp
 80035fa:	f106 0410 	add.w	r4, r6, #16
 80035fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	602b      	str	r3, [r5, #0]
 8003606:	1d33      	adds	r3, r6, #4
 8003608:	cb0e      	ldmia	r3, {r1, r2, r3}
 800360a:	6838      	ldr	r0, [r7, #0]
 800360c:	f003 fa30 	bl	8006a70 <USB_DevInit>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2202      	movs	r2, #2
 800361a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e00d      	b.n	800363e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f005 fba1 	bl	8008d7e <USB_DevDisconnect>

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003646 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_PCD_Start+0x16>
 8003658:	2302      	movs	r3, #2
 800365a:	e016      	b.n	800368a <HAL_PCD_Start+0x44>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f003 f9c5 	bl	80069f8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800366e:	2101      	movs	r1, #1
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f00a fb66 	bl	800dd42 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f005 fb75 	bl	8008d6a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b088      	sub	sp, #32
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f005 fb77 	bl	8008d92 <USB_ReadInterrupts>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ae:	d102      	bne.n	80036b6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fb61 	bl	8003d78 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f005 fb69 	bl	8008d92 <USB_ReadInterrupts>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ca:	d112      	bne.n	80036f2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036de:	b292      	uxth	r2, r2
 80036e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f00a f934 	bl	800d952 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80036ea:	2100      	movs	r1, #0
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f925 	bl	800393c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f005 fb4b 	bl	8008d92 <USB_ReadInterrupts>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003702:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003706:	d10b      	bne.n	8003720 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003710:	b29a      	uxth	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800371a:	b292      	uxth	r2, r2
 800371c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f005 fb34 	bl	8008d92 <USB_ReadInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003734:	d10b      	bne.n	800374e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003748:	b292      	uxth	r2, r2
 800374a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f005 fb1d 	bl	8008d92 <USB_ReadInterrupts>
 8003758:	4603      	mov	r3, r0
 800375a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800375e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003762:	d126      	bne.n	80037b2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800376c:	b29a      	uxth	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0204 	bic.w	r2, r2, #4
 8003776:	b292      	uxth	r2, r2
 8003778:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003784:	b29a      	uxth	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0208 	bic.w	r2, r2, #8
 800378e:	b292      	uxth	r2, r2
 8003790:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f00a f915 	bl	800d9c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037ac:	b292      	uxth	r2, r2
 80037ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f005 faeb 	bl	8008d92 <USB_ReadInterrupts>
 80037bc:	4603      	mov	r3, r0
 80037be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c6:	f040 8084 	bne.w	80038d2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e011      	b.n	80037f4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	7ffb      	ldrb	r3, [r7, #31]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	441a      	add	r2, r3
 80037dc:	7ffb      	ldrb	r3, [r7, #31]
 80037de:	8812      	ldrh	r2, [r2, #0]
 80037e0:	b292      	uxth	r2, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	f107 0120 	add.w	r1, r7, #32
 80037e8:	440b      	add	r3, r1
 80037ea:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80037ee:	7ffb      	ldrb	r3, [r7, #31]
 80037f0:	3301      	adds	r3, #1
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	7ffb      	ldrb	r3, [r7, #31]
 80037f6:	2b07      	cmp	r3, #7
 80037f8:	d9ea      	bls.n	80037d0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003802:	b29a      	uxth	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0201 	orr.w	r2, r2, #1
 800380c:	b292      	uxth	r2, r2
 800380e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800381a:	b29a      	uxth	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	b292      	uxth	r2, r2
 8003826:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800382a:	bf00      	nop
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003834:	b29b      	uxth	r3, r3
 8003836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f6      	beq.n	800382c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003846:	b29a      	uxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003850:	b292      	uxth	r2, r2
 8003852:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003856:	2300      	movs	r3, #0
 8003858:	77fb      	strb	r3, [r7, #31]
 800385a:	e010      	b.n	800387e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800385c:	7ffb      	ldrb	r3, [r7, #31]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	4611      	mov	r1, r2
 8003864:	7ffa      	ldrb	r2, [r7, #31]
 8003866:	0092      	lsls	r2, r2, #2
 8003868:	440a      	add	r2, r1
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	f107 0120 	add.w	r1, r7, #32
 8003870:	440b      	add	r3, r1
 8003872:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003876:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003878:	7ffb      	ldrb	r3, [r7, #31]
 800387a:	3301      	adds	r3, #1
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	7ffb      	ldrb	r3, [r7, #31]
 8003880:	2b07      	cmp	r3, #7
 8003882:	d9eb      	bls.n	800385c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800388c:	b29a      	uxth	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0208 	orr.w	r2, r2, #8
 8003896:	b292      	uxth	r2, r2
 8003898:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ae:	b292      	uxth	r2, r2
 80038b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0204 	orr.w	r2, r2, #4
 80038c6:	b292      	uxth	r2, r2
 80038c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f00a f85f 	bl	800d990 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f005 fa5b 	bl	8008d92 <USB_ReadInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e6:	d10e      	bne.n	8003906 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038fa:	b292      	uxth	r2, r2
 80038fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f00a f818 	bl	800d936 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f005 fa41 	bl	8008d92 <USB_ReadInterrupts>
 8003910:	4603      	mov	r3, r0
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800391a:	d10b      	bne.n	8003934 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800392e:	b292      	uxth	r2, r2
 8003930:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003934:	bf00      	nop
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_PCD_SetAddress+0x1a>
 8003952:	2302      	movs	r3, #2
 8003954:	e013      	b.n	800397e <HAL_PCD_SetAddress+0x42>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f005 f9e8 	bl	8008d44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	4608      	mov	r0, r1
 8003990:	4611      	mov	r1, r2
 8003992:	461a      	mov	r2, r3
 8003994:	4603      	mov	r3, r0
 8003996:	70fb      	strb	r3, [r7, #3]
 8003998:	460b      	mov	r3, r1
 800399a:	803b      	strh	r3, [r7, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	da0e      	bge.n	80039ca <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	4413      	add	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	705a      	strb	r2, [r3, #1]
 80039c8:	e00e      	b.n	80039e8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	f003 0207 	and.w	r2, r3, #7
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	4413      	add	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039f4:	883a      	ldrh	r2, [r7, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	78ba      	ldrb	r2, [r7, #2]
 80039fe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d004      	beq.n	8003a12 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a12:	78bb      	ldrb	r3, [r7, #2]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d102      	bne.n	8003a1e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_PCD_EP_Open+0xa6>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e00e      	b.n	8003a4a <HAL_PCD_EP_Open+0xc4>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68f9      	ldr	r1, [r7, #12]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f003 f838 	bl	8006ab0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003a48:	7afb      	ldrb	r3, [r7, #11]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	da0e      	bge.n	8003a84 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	705a      	strb	r2, [r3, #1]
 8003a82:	e00e      	b.n	8003aa2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	f003 0207 	and.w	r2, r3, #7
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_PCD_EP_Close+0x6a>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e00e      	b.n	8003ada <HAL_PCD_EP_Close+0x88>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68f9      	ldr	r1, [r7, #12]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f003 fb5a 	bl	8007184 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b086      	sub	sp, #24
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
 8003aee:	460b      	mov	r3, r1
 8003af0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	f003 0207 	and.w	r2, r3, #7
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b22:	7afb      	ldrb	r3, [r7, #11]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b2e:	7afb      	ldrb	r3, [r7, #11]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d106      	bne.n	8003b46 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6979      	ldr	r1, [r7, #20]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f003 fd0c 	bl	800755c <USB_EPStartXfer>
 8003b44:	e005      	b.n	8003b52 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6979      	ldr	r1, [r7, #20]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f003 fd05 	bl	800755c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	f003 0207 	and.w	r2, r3, #7
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	440b      	add	r3, r1
 8003b7a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003b7e:	681b      	ldr	r3, [r3, #0]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b086      	sub	sp, #24
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
 8003b96:	460b      	mov	r3, r1
 8003b98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b9a:	7afb      	ldrb	r3, [r7, #11]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4413      	add	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd6:	7afb      	ldrb	r3, [r7, #11]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003be2:	7afb      	ldrb	r3, [r7, #11]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d106      	bne.n	8003bfa <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6979      	ldr	r1, [r7, #20]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f003 fcb2 	bl	800755c <USB_EPStartXfer>
 8003bf8:	e005      	b.n	8003c06 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6979      	ldr	r1, [r7, #20]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f003 fcab 	bl	800755c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	f003 0207 	and.w	r2, r3, #7
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d901      	bls.n	8003c2e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e04c      	b.n	8003cc8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	da0e      	bge.n	8003c54 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	705a      	strb	r2, [r3, #1]
 8003c52:	e00c      	b.n	8003c6e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_PCD_EP_SetStall+0x7e>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e01c      	b.n	8003cc8 <HAL_PCD_EP_SetStall+0xb8>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68f9      	ldr	r1, [r7, #12]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f004 ff54 	bl	8008b4a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d108      	bne.n	8003cbe <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f005 f879 	bl	8008db0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	f003 020f 	and.w	r2, r3, #15
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d901      	bls.n	8003cee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e040      	b.n	8003d70 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	da0e      	bge.n	8003d14 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	705a      	strb	r2, [r3, #1]
 8003d12:	e00e      	b.n	8003d32 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	f003 0207 	and.w	r2, r3, #7
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_PCD_EP_ClrStall+0x82>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e00e      	b.n	8003d70 <HAL_PCD_EP_ClrStall+0xa0>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68f9      	ldr	r1, [r7, #12]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f004 ff42 	bl	8008bea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08e      	sub	sp, #56	; 0x38
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d80:	e2ec      	b.n	800435c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d8a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003d98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f040 8161 	bne.w	8004064 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003da2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d152      	bne.n	8003e52 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbc:	81fb      	strh	r3, [r7, #14]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	89fb      	ldrh	r3, [r7, #14]
 8003dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3328      	adds	r3, #40	; 0x28
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	3302      	adds	r3, #2
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	441a      	add	r2, r3
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003e10:	2100      	movs	r1, #0
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f009 fd75 	bl	800d902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 829b 	beq.w	800435c <PCD_EP_ISR_Handler+0x5e4>
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f040 8296 	bne.w	800435c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	b292      	uxth	r2, r2
 8003e44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e50:	e284      	b.n	800435c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003e62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d034      	beq.n	8003ed6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4413      	add	r3, r2
 8003e80:	3306      	adds	r3, #6
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	f004 ffd0 	bl	8008e50 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	823b      	strh	r3, [r7, #16]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	8a3a      	ldrh	r2, [r7, #16]
 8003ec6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003eca:	b292      	uxth	r2, r2
 8003ecc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f009 fcea 	bl	800d8a8 <HAL_PCD_SetupStageCallback>
 8003ed4:	e242      	b.n	800435c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ed6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f280 823e 	bge.w	800435c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003eec:	4013      	ands	r3, r2
 8003eee:	83bb      	strh	r3, [r7, #28]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	8bba      	ldrh	r2, [r7, #28]
 8003ef6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003efa:	b292      	uxth	r2, r2
 8003efc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4413      	add	r3, r2
 8003f12:	3306      	adds	r3, #6
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d019      	beq.n	8003f66 <PCD_EP_ISR_Handler+0x1ee>
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d015      	beq.n	8003f66 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	6959      	ldr	r1, [r3, #20]
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	f004 ff80 	bl	8008e50 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	441a      	add	r2, r3
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003f5e:	2100      	movs	r1, #0
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f009 fcb3 	bl	800d8cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 81f2 	bne.w	800435c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d112      	bne.n	8003fc6 <PCD_EP_ISR_Handler+0x24e>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	801a      	strh	r2, [r3, #0]
 8003fc4:	e02f      	b.n	8004026 <PCD_EP_ISR_Handler+0x2ae>
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b3e      	cmp	r3, #62	; 0x3e
 8003fcc:	d813      	bhi.n	8003ff6 <PCD_EP_ISR_Handler+0x27e>
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <PCD_EP_ISR_Handler+0x270>
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	029b      	lsls	r3, r3, #10
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	801a      	strh	r2, [r3, #0]
 8003ff4:	e017      	b.n	8004026 <PCD_EP_ISR_Handler+0x2ae>
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <PCD_EP_ISR_Handler+0x298>
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	3b01      	subs	r3, #1
 800400e:	633b      	str	r3, [r7, #48]	; 0x30
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	b29b      	uxth	r3, r3
 8004014:	029b      	lsls	r3, r3, #10
 8004016:	b29b      	uxth	r3, r3
 8004018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800401c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004020:	b29a      	uxth	r2, r3
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	827b      	strh	r3, [r7, #18]
 8004038:	8a7b      	ldrh	r3, [r7, #18]
 800403a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800403e:	827b      	strh	r3, [r7, #18]
 8004040:	8a7b      	ldrh	r3, [r7, #18]
 8004042:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004046:	827b      	strh	r3, [r7, #18]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	8a7b      	ldrh	r3, [r7, #18]
 800404e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800405a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405e:	b29b      	uxth	r3, r3
 8004060:	8013      	strh	r3, [r2, #0]
 8004062:	e17b      	b.n	800435c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004076:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800407a:	2b00      	cmp	r3, #0
 800407c:	f280 80ea 	bge.w	8004254 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b29a      	uxth	r2, r3
 8004092:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004096:	4013      	ands	r3, r2
 8004098:	853b      	strh	r3, [r7, #40]	; 0x28
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80040aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040ae:	b292      	uxth	r2, r2
 80040b0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80040b2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	7b1b      	ldrb	r3, [r3, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d122      	bne.n	8004116 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d8:	b29b      	uxth	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	3306      	adds	r3, #6
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040f8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80040fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8087 	beq.w	8004210 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	6959      	ldr	r1, [r3, #20]
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	88da      	ldrh	r2, [r3, #6]
 800410e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004110:	f004 fe9e 	bl	8008e50 <USB_ReadPMA>
 8004114:	e07c      	b.n	8004210 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	78db      	ldrb	r3, [r3, #3]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d108      	bne.n	8004130 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800411e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004120:	461a      	mov	r2, r3
 8004122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f927 	bl	8004378 <HAL_PCD_EP_DB_Receive>
 800412a:	4603      	mov	r3, r0
 800412c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800412e:	e06f      	b.n	8004210 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29b      	uxth	r3, r3
 8004142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414a:	847b      	strh	r3, [r7, #34]	; 0x22
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	441a      	add	r2, r3
 800415a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800415c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004168:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800416c:	b29b      	uxth	r3, r3
 800416e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d021      	beq.n	80041ce <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004192:	b29b      	uxth	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	3302      	adds	r3, #2
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041b2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80041b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d02a      	beq.n	8004210 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	6959      	ldr	r1, [r3, #20]
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	891a      	ldrh	r2, [r3, #8]
 80041c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041c8:	f004 fe42 	bl	8008e50 <USB_ReadPMA>
 80041cc:	e020      	b.n	8004210 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4413      	add	r3, r2
 80041e2:	3306      	adds	r3, #6
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041f6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80041f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d008      	beq.n	8004210 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	6959      	ldr	r1, [r3, #20]
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	895a      	ldrh	r2, [r3, #10]
 800420a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800420c:	f004 fe20 	bl	8008e50 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004216:	441a      	add	r2, r3
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004222:	441a      	add	r2, r3
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d004      	beq.n	800423a <PCD_EP_ISR_Handler+0x4c2>
 8004230:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	429a      	cmp	r2, r3
 8004238:	d206      	bcs.n	8004248 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f009 fb43 	bl	800d8cc <HAL_PCD_DataOutStageCallback>
 8004246:	e005      	b.n	8004254 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800424e:	4618      	mov	r0, r3
 8004250:	f003 f984 	bl	800755c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004254:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425a:	2b00      	cmp	r3, #0
 800425c:	d07e      	beq.n	800435c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800425e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	4413      	add	r3, r2
 8004270:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29b      	uxth	r3, r3
 8004284:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428c:	843b      	strh	r3, [r7, #32]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	441a      	add	r2, r3
 800429c:	8c3b      	ldrh	r3, [r7, #32]
 800429e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	78db      	ldrb	r3, [r3, #3]
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d00c      	beq.n	80042cc <PCD_EP_ISR_Handler+0x554>
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	78db      	ldrb	r3, [r3, #3]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d008      	beq.n	80042cc <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d146      	bne.n	8004350 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80042c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d141      	bne.n	8004350 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4413      	add	r3, r2
 80042e0:	3302      	adds	r3, #2
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042f4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	8bfb      	ldrh	r3, [r7, #30]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d906      	bls.n	800430e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	699a      	ldr	r2, [r3, #24]
 8004304:	8bfb      	ldrh	r3, [r7, #30]
 8004306:	1ad2      	subs	r2, r2, r3
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	619a      	str	r2, [r3, #24]
 800430c:	e002      	b.n	8004314 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	2200      	movs	r2, #0
 8004312:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d106      	bne.n	800432a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f009 faed 	bl	800d902 <HAL_PCD_DataInStageCallback>
 8004328:	e018      	b.n	800435c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	8bfb      	ldrh	r3, [r7, #30]
 8004330:	441a      	add	r2, r3
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	69da      	ldr	r2, [r3, #28]
 800433a:	8bfb      	ldrh	r3, [r7, #30]
 800433c:	441a      	add	r2, r3
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004348:	4618      	mov	r0, r3
 800434a:	f003 f907 	bl	800755c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800434e:	e005      	b.n	800435c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004350:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004352:	461a      	mov	r2, r3
 8004354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f91b 	bl	8004592 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004364:	b29b      	uxth	r3, r3
 8004366:	b21b      	sxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	f6ff ad0a 	blt.w	8003d82 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3738      	adds	r7, #56	; 0x38
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	4613      	mov	r3, r2
 8004384:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d07e      	beq.n	800448e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004398:	b29b      	uxth	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	4413      	add	r3, r2
 80043a4:	3302      	adds	r3, #2
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	8b7b      	ldrh	r3, [r7, #26]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d306      	bcc.n	80043d2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	699a      	ldr	r2, [r3, #24]
 80043c8:	8b7b      	ldrh	r3, [r7, #26]
 80043ca:	1ad2      	subs	r2, r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	619a      	str	r2, [r3, #24]
 80043d0:	e002      	b.n	80043d8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2200      	movs	r2, #0
 80043d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d123      	bne.n	8004428 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fa:	833b      	strh	r3, [r7, #24]
 80043fc:	8b3b      	ldrh	r3, [r7, #24]
 80043fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004402:	833b      	strh	r3, [r7, #24]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	441a      	add	r2, r3
 8004412:	8b3b      	ldrh	r3, [r7, #24]
 8004414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800441c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004424:	b29b      	uxth	r3, r3
 8004426:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01f      	beq.n	8004472 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	b29b      	uxth	r3, r3
 8004444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444c:	82fb      	strh	r3, [r7, #22]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	441a      	add	r2, r3
 800445c:	8afb      	ldrh	r3, [r7, #22]
 800445e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800446a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800446e:	b29b      	uxth	r3, r3
 8004470:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004472:	8b7b      	ldrh	r3, [r7, #26]
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8087 	beq.w	8004588 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	6959      	ldr	r1, [r3, #20]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	891a      	ldrh	r2, [r3, #8]
 8004486:	8b7b      	ldrh	r3, [r7, #26]
 8004488:	f004 fce2 	bl	8008e50 <USB_ReadPMA>
 800448c:	e07c      	b.n	8004588 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004496:	b29b      	uxth	r3, r3
 8004498:	461a      	mov	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4413      	add	r3, r2
 80044a2:	3306      	adds	r3, #6
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044b6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	699a      	ldr	r2, [r3, #24]
 80044bc:	8b7b      	ldrh	r3, [r7, #26]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d306      	bcc.n	80044d0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	8b7b      	ldrh	r3, [r7, #26]
 80044c8:	1ad2      	subs	r2, r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	619a      	str	r2, [r3, #24]
 80044ce:	e002      	b.n	80044d6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2200      	movs	r2, #0
 80044d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d123      	bne.n	8004526 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f8:	83fb      	strh	r3, [r7, #30]
 80044fa:	8bfb      	ldrh	r3, [r7, #30]
 80044fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004500:	83fb      	strh	r3, [r7, #30]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	441a      	add	r2, r3
 8004510:	8bfb      	ldrh	r3, [r7, #30]
 8004512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800451a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004522:	b29b      	uxth	r3, r3
 8004524:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d11f      	bne.n	8004570 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b29b      	uxth	r3, r3
 8004542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454a:	83bb      	strh	r3, [r7, #28]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	441a      	add	r2, r3
 800455a:	8bbb      	ldrh	r3, [r7, #28]
 800455c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004568:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800456c:	b29b      	uxth	r3, r3
 800456e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004570:	8b7b      	ldrh	r3, [r7, #26]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d008      	beq.n	8004588 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	6959      	ldr	r1, [r3, #20]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	895a      	ldrh	r2, [r3, #10]
 8004582:	8b7b      	ldrh	r3, [r7, #26]
 8004584:	f004 fc64 	bl	8008e50 <USB_ReadPMA>
    }
  }

  return count;
 8004588:	8b7b      	ldrh	r3, [r7, #26]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3720      	adds	r7, #32
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b0a2      	sub	sp, #136	; 0x88
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	4613      	mov	r3, r2
 800459e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045a0:	88fb      	ldrh	r3, [r7, #6]
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 81c7 	beq.w	800493a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4413      	add	r3, r2
 80045c0:	3302      	adds	r3, #2
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	699a      	ldr	r2, [r3, #24]
 80045dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d907      	bls.n	80045f4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	699a      	ldr	r2, [r3, #24]
 80045e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045ec:	1ad2      	subs	r2, r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	619a      	str	r2, [r3, #24]
 80045f2:	e002      	b.n	80045fa <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2200      	movs	r2, #0
 80045f8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f040 80b9 	bne.w	8004776 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	785b      	ldrb	r3, [r3, #1]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d126      	bne.n	800465a <HAL_PCD_EP_DB_Transmit+0xc8>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461a:	b29b      	uxth	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004620:	4413      	add	r3, r2
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	011a      	lsls	r2, r3, #4
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	4413      	add	r3, r2
 800462e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b29b      	uxth	r3, r3
 800463a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800463e:	b29a      	uxth	r2, r3
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	801a      	strh	r2, [r3, #0]
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	b29b      	uxth	r3, r3
 800464a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800464e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004652:	b29a      	uxth	r2, r3
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	801a      	strh	r2, [r3, #0]
 8004658:	e01a      	b.n	8004690 <HAL_PCD_EP_DB_Transmit+0xfe>
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	785b      	ldrb	r3, [r3, #1]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d116      	bne.n	8004690 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	633b      	str	r3, [r7, #48]	; 0x30
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004670:	b29b      	uxth	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	4413      	add	r3, r2
 8004678:	633b      	str	r3, [r7, #48]	; 0x30
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	011a      	lsls	r2, r3, #4
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	4413      	add	r3, r2
 8004684:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800468a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468c:	2200      	movs	r2, #0
 800468e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	623b      	str	r3, [r7, #32]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	785b      	ldrb	r3, [r3, #1]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d126      	bne.n	80046ec <HAL_PCD_EP_DB_Transmit+0x15a>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	61bb      	str	r3, [r7, #24]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	4413      	add	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	011a      	lsls	r2, r3, #4
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	4413      	add	r3, r2
 80046c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	801a      	strh	r2, [r3, #0]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	e017      	b.n	800471c <HAL_PCD_EP_DB_Transmit+0x18a>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	785b      	ldrb	r3, [r3, #1]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d113      	bne.n	800471c <HAL_PCD_EP_DB_Transmit+0x18a>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	4413      	add	r3, r2
 8004704:	623b      	str	r3, [r7, #32]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	011a      	lsls	r2, r3, #4
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	4413      	add	r3, r2
 8004710:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	2200      	movs	r2, #0
 800471a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	4619      	mov	r1, r3
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f009 f8ed 	bl	800d902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 82d4 	beq.w	8004cdc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474e:	827b      	strh	r3, [r7, #18]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	441a      	add	r2, r3
 800475e:	8a7b      	ldrh	r3, [r7, #18]
 8004760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004768:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800476c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004770:	b29b      	uxth	r3, r3
 8004772:	8013      	strh	r3, [r2, #0]
 8004774:	e2b2      	b.n	8004cdc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004776:	88fb      	ldrh	r3, [r7, #6]
 8004778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d021      	beq.n	80047c4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	441a      	add	r2, r3
 80047ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80047b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	f040 8286 	bne.w	8004cdc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	695a      	ldr	r2, [r3, #20]
 80047d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047d8:	441a      	add	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	69da      	ldr	r2, [r3, #28]
 80047e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047e6:	441a      	add	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	6a1a      	ldr	r2, [r3, #32]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d309      	bcc.n	800480c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	6a1a      	ldr	r2, [r3, #32]
 8004802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004804:	1ad2      	subs	r2, r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	621a      	str	r2, [r3, #32]
 800480a:	e015      	b.n	8004838 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d107      	bne.n	8004824 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8004814:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004818:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004822:	e009      	b.n	8004838 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2200      	movs	r2, #0
 8004836:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	785b      	ldrb	r3, [r3, #1]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d155      	bne.n	80048ec <HAL_PCD_EP_DB_Transmit+0x35a>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	63bb      	str	r3, [r7, #56]	; 0x38
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484e:	b29b      	uxth	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	4413      	add	r3, r2
 8004856:	63bb      	str	r3, [r7, #56]	; 0x38
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	011a      	lsls	r2, r3, #4
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	4413      	add	r3, r2
 8004862:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004866:	637b      	str	r3, [r7, #52]	; 0x34
 8004868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486a:	2b00      	cmp	r3, #0
 800486c:	d112      	bne.n	8004894 <HAL_PCD_EP_DB_Transmit+0x302>
 800486e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	b29b      	uxth	r3, r3
 8004874:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004878:	b29a      	uxth	r2, r3
 800487a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487c:	801a      	strh	r2, [r3, #0]
 800487e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800488c:	b29a      	uxth	r2, r3
 800488e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004890:	801a      	strh	r2, [r3, #0]
 8004892:	e047      	b.n	8004924 <HAL_PCD_EP_DB_Transmit+0x392>
 8004894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004896:	2b3e      	cmp	r3, #62	; 0x3e
 8004898:	d811      	bhi.n	80048be <HAL_PCD_EP_DB_Transmit+0x32c>
 800489a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	64bb      	str	r3, [r7, #72]	; 0x48
 80048a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_PCD_EP_DB_Transmit+0x31e>
 80048aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ac:	3301      	adds	r3, #1
 80048ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80048b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	029b      	lsls	r3, r3, #10
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ba:	801a      	strh	r2, [r3, #0]
 80048bc:	e032      	b.n	8004924 <HAL_PCD_EP_DB_Transmit+0x392>
 80048be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c0:	095b      	lsrs	r3, r3, #5
 80048c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d102      	bne.n	80048d4 <HAL_PCD_EP_DB_Transmit+0x342>
 80048ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d0:	3b01      	subs	r3, #1
 80048d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	029b      	lsls	r3, r3, #10
 80048da:	b29b      	uxth	r3, r3
 80048dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e8:	801a      	strh	r2, [r3, #0]
 80048ea:	e01b      	b.n	8004924 <HAL_PCD_EP_DB_Transmit+0x392>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	785b      	ldrb	r3, [r3, #1]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d117      	bne.n	8004924 <HAL_PCD_EP_DB_Transmit+0x392>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	643b      	str	r3, [r7, #64]	; 0x40
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004902:	b29b      	uxth	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004908:	4413      	add	r3, r2
 800490a:	643b      	str	r3, [r7, #64]	; 0x40
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	011a      	lsls	r2, r3, #4
 8004912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004914:	4413      	add	r3, r2
 8004916:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800491c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800491e:	b29a      	uxth	r2, r3
 8004920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004922:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	6959      	ldr	r1, [r3, #20]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	891a      	ldrh	r2, [r3, #8]
 8004930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004932:	b29b      	uxth	r3, r3
 8004934:	f004 fa47 	bl	8008dc6 <USB_WritePMA>
 8004938:	e1d0      	b.n	8004cdc <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004942:	b29b      	uxth	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	4413      	add	r3, r2
 800494e:	3306      	adds	r3, #6
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	6812      	ldr	r2, [r2, #0]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004962:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800496e:	429a      	cmp	r2, r3
 8004970:	d307      	bcc.n	8004982 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	699a      	ldr	r2, [r3, #24]
 8004976:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800497a:	1ad2      	subs	r2, r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	619a      	str	r2, [r3, #24]
 8004980:	e002      	b.n	8004988 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2200      	movs	r2, #0
 8004986:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	2b00      	cmp	r3, #0
 800498e:	f040 80c4 	bne.w	8004b1a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	785b      	ldrb	r3, [r3, #1]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d126      	bne.n	80049e8 <HAL_PCD_EP_DB_Transmit+0x456>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ae:	4413      	add	r3, r2
 80049b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	011a      	lsls	r2, r3, #4
 80049b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ba:	4413      	add	r3, r2
 80049bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80049c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049d0:	801a      	strh	r2, [r3, #0]
 80049d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049e4:	801a      	strh	r2, [r3, #0]
 80049e6:	e01a      	b.n	8004a1e <HAL_PCD_EP_DB_Transmit+0x48c>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d116      	bne.n	8004a1e <HAL_PCD_EP_DB_Transmit+0x48c>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	677b      	str	r3, [r7, #116]	; 0x74
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	461a      	mov	r2, r3
 8004a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a04:	4413      	add	r3, r2
 8004a06:	677b      	str	r3, [r7, #116]	; 0x74
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	011a      	lsls	r2, r3, #4
 8004a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a10:	4413      	add	r3, r2
 8004a12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a16:	673b      	str	r3, [r7, #112]	; 0x70
 8004a18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	785b      	ldrb	r3, [r3, #1]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d12f      	bne.n	8004a8c <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a44:	4413      	add	r3, r2
 8004a46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	011a      	lsls	r2, r3, #4
 8004a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a54:	4413      	add	r3, r2
 8004a56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a70:	801a      	strh	r2, [r3, #0]
 8004a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a88:	801a      	strh	r2, [r3, #0]
 8004a8a:	e017      	b.n	8004abc <HAL_PCD_EP_DB_Transmit+0x52a>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	785b      	ldrb	r3, [r3, #1]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d113      	bne.n	8004abc <HAL_PCD_EP_DB_Transmit+0x52a>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aa2:	4413      	add	r3, r2
 8004aa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	011a      	lsls	r2, r3, #4
 8004aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aae:	4413      	add	r3, r2
 8004ab0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ab4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ab6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ab8:	2200      	movs	r2, #0
 8004aba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f008 ff1d 	bl	800d902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f040 8104 	bne.w	8004cdc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	441a      	add	r2, r3
 8004b00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	8013      	strh	r3, [r2, #0]
 8004b18:	e0e0      	b.n	8004cdc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d121      	bne.n	8004b68 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	441a      	add	r2, r3
 8004b50:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	f040 80b4 	bne.w	8004cdc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	695a      	ldr	r2, [r3, #20]
 8004b78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b7c:	441a      	add	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	69da      	ldr	r2, [r3, #28]
 8004b86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b8a:	441a      	add	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6a1a      	ldr	r2, [r3, #32]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d309      	bcc.n	8004bb0 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	6a1a      	ldr	r2, [r3, #32]
 8004ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba8:	1ad2      	subs	r2, r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	621a      	str	r2, [r3, #32]
 8004bae:	e015      	b.n	8004bdc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d107      	bne.n	8004bc8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004bb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bbc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004bc6:	e009      	b.n	8004bdc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	667b      	str	r3, [r7, #100]	; 0x64
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d155      	bne.n	8004c96 <HAL_PCD_EP_DB_Transmit+0x704>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bfe:	4413      	add	r3, r2
 8004c00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	011a      	lsls	r2, r3, #4
 8004c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c10:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d112      	bne.n	8004c3e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c3a:	801a      	strh	r2, [r3, #0]
 8004c3c:	e044      	b.n	8004cc8 <HAL_PCD_EP_DB_Transmit+0x736>
 8004c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c40:	2b3e      	cmp	r3, #62	; 0x3e
 8004c42:	d811      	bhi.n	8004c68 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	657b      	str	r3, [r7, #84]	; 0x54
 8004c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c56:	3301      	adds	r3, #1
 8004c58:	657b      	str	r3, [r7, #84]	; 0x54
 8004c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	029b      	lsls	r3, r3, #10
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c64:	801a      	strh	r2, [r3, #0]
 8004c66:	e02f      	b.n	8004cc8 <HAL_PCD_EP_DB_Transmit+0x736>
 8004c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d102      	bne.n	8004c7e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	029b      	lsls	r3, r3, #10
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c92:	801a      	strh	r2, [r3, #0]
 8004c94:	e018      	b.n	8004cc8 <HAL_PCD_EP_DB_Transmit+0x736>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	785b      	ldrb	r3, [r3, #1]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d114      	bne.n	8004cc8 <HAL_PCD_EP_DB_Transmit+0x736>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cac:	4413      	add	r3, r2
 8004cae:	667b      	str	r3, [r7, #100]	; 0x64
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	011a      	lsls	r2, r3, #4
 8004cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cb8:	4413      	add	r3, r2
 8004cba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cbe:	663b      	str	r3, [r7, #96]	; 0x60
 8004cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cc6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6959      	ldr	r1, [r3, #20]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	895a      	ldrh	r2, [r3, #10]
 8004cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	f004 f875 	bl	8008dc6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf6:	823b      	strh	r3, [r7, #16]
 8004cf8:	8a3b      	ldrh	r3, [r7, #16]
 8004cfa:	f083 0310 	eor.w	r3, r3, #16
 8004cfe:	823b      	strh	r3, [r7, #16]
 8004d00:	8a3b      	ldrh	r3, [r7, #16]
 8004d02:	f083 0320 	eor.w	r3, r3, #32
 8004d06:	823b      	strh	r3, [r7, #16]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	8a3b      	ldrh	r3, [r7, #16]
 8004d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3788      	adds	r7, #136	; 0x88
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b087      	sub	sp, #28
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	607b      	str	r3, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	817b      	strh	r3, [r7, #10]
 8004d44:	4613      	mov	r3, r2
 8004d46:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004d48:	897b      	ldrh	r3, [r7, #10]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00b      	beq.n	8004d6c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d54:	897b      	ldrh	r3, [r7, #10]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	e009      	b.n	8004d80 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d6c:	897a      	ldrh	r2, [r7, #10]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004d80:	893b      	ldrh	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d107      	bne.n	8004d96 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	80da      	strh	r2, [r3, #6]
 8004d94:	e00b      	b.n	8004dae <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	0c1b      	lsrs	r3, r3, #16
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr
	...

08004dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e26c      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 8087 	beq.w	8004eea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ddc:	4b92      	ldr	r3, [pc, #584]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f003 030c 	and.w	r3, r3, #12
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d00c      	beq.n	8004e02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004de8:	4b8f      	ldr	r3, [pc, #572]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d112      	bne.n	8004e1a <HAL_RCC_OscConfig+0x5e>
 8004df4:	4b8c      	ldr	r3, [pc, #560]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e00:	d10b      	bne.n	8004e1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e02:	4b89      	ldr	r3, [pc, #548]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d06c      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x12c>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d168      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e246      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e22:	d106      	bne.n	8004e32 <HAL_RCC_OscConfig+0x76>
 8004e24:	4b80      	ldr	r3, [pc, #512]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a7f      	ldr	r2, [pc, #508]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	e02e      	b.n	8004e90 <HAL_RCC_OscConfig+0xd4>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10c      	bne.n	8004e54 <HAL_RCC_OscConfig+0x98>
 8004e3a:	4b7b      	ldr	r3, [pc, #492]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a7a      	ldr	r2, [pc, #488]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	4b78      	ldr	r3, [pc, #480]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a77      	ldr	r2, [pc, #476]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	e01d      	b.n	8004e90 <HAL_RCC_OscConfig+0xd4>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0xbc>
 8004e5e:	4b72      	ldr	r3, [pc, #456]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a71      	ldr	r2, [pc, #452]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	4b6f      	ldr	r3, [pc, #444]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a6e      	ldr	r2, [pc, #440]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e00b      	b.n	8004e90 <HAL_RCC_OscConfig+0xd4>
 8004e78:	4b6b      	ldr	r3, [pc, #428]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a6a      	ldr	r2, [pc, #424]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	4b68      	ldr	r3, [pc, #416]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a67      	ldr	r2, [pc, #412]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d013      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e98:	f7fd ff42 	bl	8002d20 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea0:	f7fd ff3e 	bl	8002d20 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b64      	cmp	r3, #100	; 0x64
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e1fa      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb2:	4b5d      	ldr	r3, [pc, #372]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0xe4>
 8004ebe:	e014      	b.n	8004eea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec0:	f7fd ff2e 	bl	8002d20 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec8:	f7fd ff2a 	bl	8002d20 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	; 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e1e6      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eda:	4b53      	ldr	r3, [pc, #332]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x10c>
 8004ee6:	e000      	b.n	8004eea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d063      	beq.n	8004fbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ef6:	4b4c      	ldr	r3, [pc, #304]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f02:	4b49      	ldr	r3, [pc, #292]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f003 030c 	and.w	r3, r3, #12
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d11c      	bne.n	8004f48 <HAL_RCC_OscConfig+0x18c>
 8004f0e:	4b46      	ldr	r3, [pc, #280]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d116      	bne.n	8004f48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1a:	4b43      	ldr	r3, [pc, #268]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_RCC_OscConfig+0x176>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d001      	beq.n	8004f32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e1ba      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f32:	4b3d      	ldr	r3, [pc, #244]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4939      	ldr	r1, [pc, #228]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f46:	e03a      	b.n	8004fbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d020      	beq.n	8004f92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f50:	4b36      	ldr	r3, [pc, #216]	; (800502c <HAL_RCC_OscConfig+0x270>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f56:	f7fd fee3 	bl	8002d20 <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f5e:	f7fd fedf 	bl	8002d20 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e19b      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f70:	4b2d      	ldr	r3, [pc, #180]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7c:	4b2a      	ldr	r3, [pc, #168]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4927      	ldr	r1, [pc, #156]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	600b      	str	r3, [r1, #0]
 8004f90:	e015      	b.n	8004fbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f92:	4b26      	ldr	r3, [pc, #152]	; (800502c <HAL_RCC_OscConfig+0x270>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f98:	f7fd fec2 	bl	8002d20 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa0:	f7fd febe 	bl	8002d20 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e17a      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb2:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f0      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d03a      	beq.n	8005040 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d019      	beq.n	8005006 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fd2:	4b17      	ldr	r3, [pc, #92]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd8:	f7fd fea2 	bl	8002d20 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe0:	f7fd fe9e 	bl	8002d20 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e15a      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff2:	4b0d      	ldr	r3, [pc, #52]	; (8005028 <HAL_RCC_OscConfig+0x26c>)
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ffe:	2001      	movs	r0, #1
 8005000:	f000 fb0a 	bl	8005618 <RCC_Delay>
 8005004:	e01c      	b.n	8005040 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005006:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <HAL_RCC_OscConfig+0x274>)
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500c:	f7fd fe88 	bl	8002d20 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005012:	e00f      	b.n	8005034 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005014:	f7fd fe84 	bl	8002d20 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d908      	bls.n	8005034 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e140      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
 8005026:	bf00      	nop
 8005028:	40021000 	.word	0x40021000
 800502c:	42420000 	.word	0x42420000
 8005030:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005034:	4b9e      	ldr	r3, [pc, #632]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e9      	bne.n	8005014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 80a6 	beq.w	800519a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800504e:	2300      	movs	r3, #0
 8005050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005052:	4b97      	ldr	r3, [pc, #604]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10d      	bne.n	800507a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800505e:	4b94      	ldr	r3, [pc, #592]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	4a93      	ldr	r2, [pc, #588]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005068:	61d3      	str	r3, [r2, #28]
 800506a:	4b91      	ldr	r3, [pc, #580]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005076:	2301      	movs	r3, #1
 8005078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507a:	4b8e      	ldr	r3, [pc, #568]	; (80052b4 <HAL_RCC_OscConfig+0x4f8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005082:	2b00      	cmp	r3, #0
 8005084:	d118      	bne.n	80050b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005086:	4b8b      	ldr	r3, [pc, #556]	; (80052b4 <HAL_RCC_OscConfig+0x4f8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a8a      	ldr	r2, [pc, #552]	; (80052b4 <HAL_RCC_OscConfig+0x4f8>)
 800508c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005092:	f7fd fe45 	bl	8002d20 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509a:	f7fd fe41 	bl	8002d20 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b64      	cmp	r3, #100	; 0x64
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e0fd      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ac:	4b81      	ldr	r3, [pc, #516]	; (80052b4 <HAL_RCC_OscConfig+0x4f8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d106      	bne.n	80050ce <HAL_RCC_OscConfig+0x312>
 80050c0:	4b7b      	ldr	r3, [pc, #492]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	4a7a      	ldr	r2, [pc, #488]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 80050c6:	f043 0301 	orr.w	r3, r3, #1
 80050ca:	6213      	str	r3, [r2, #32]
 80050cc:	e02d      	b.n	800512a <HAL_RCC_OscConfig+0x36e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10c      	bne.n	80050f0 <HAL_RCC_OscConfig+0x334>
 80050d6:	4b76      	ldr	r3, [pc, #472]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	4a75      	ldr	r2, [pc, #468]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	6213      	str	r3, [r2, #32]
 80050e2:	4b73      	ldr	r3, [pc, #460]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	4a72      	ldr	r2, [pc, #456]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 80050e8:	f023 0304 	bic.w	r3, r3, #4
 80050ec:	6213      	str	r3, [r2, #32]
 80050ee:	e01c      	b.n	800512a <HAL_RCC_OscConfig+0x36e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	2b05      	cmp	r3, #5
 80050f6:	d10c      	bne.n	8005112 <HAL_RCC_OscConfig+0x356>
 80050f8:	4b6d      	ldr	r3, [pc, #436]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	4a6c      	ldr	r2, [pc, #432]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 80050fe:	f043 0304 	orr.w	r3, r3, #4
 8005102:	6213      	str	r3, [r2, #32]
 8005104:	4b6a      	ldr	r3, [pc, #424]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	4a69      	ldr	r2, [pc, #420]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	6213      	str	r3, [r2, #32]
 8005110:	e00b      	b.n	800512a <HAL_RCC_OscConfig+0x36e>
 8005112:	4b67      	ldr	r3, [pc, #412]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	4a66      	ldr	r2, [pc, #408]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005118:	f023 0301 	bic.w	r3, r3, #1
 800511c:	6213      	str	r3, [r2, #32]
 800511e:	4b64      	ldr	r3, [pc, #400]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	4a63      	ldr	r2, [pc, #396]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005124:	f023 0304 	bic.w	r3, r3, #4
 8005128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d015      	beq.n	800515e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005132:	f7fd fdf5 	bl	8002d20 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005138:	e00a      	b.n	8005150 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513a:	f7fd fdf1 	bl	8002d20 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f241 3288 	movw	r2, #5000	; 0x1388
 8005148:	4293      	cmp	r3, r2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e0ab      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005150:	4b57      	ldr	r3, [pc, #348]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ee      	beq.n	800513a <HAL_RCC_OscConfig+0x37e>
 800515c:	e014      	b.n	8005188 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515e:	f7fd fddf 	bl	8002d20 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005164:	e00a      	b.n	800517c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fd fddb 	bl	8002d20 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	; 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e095      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517c:	4b4c      	ldr	r3, [pc, #304]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1ee      	bne.n	8005166 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005188:	7dfb      	ldrb	r3, [r7, #23]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d105      	bne.n	800519a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800518e:	4b48      	ldr	r3, [pc, #288]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	4a47      	ldr	r2, [pc, #284]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005198:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 8081 	beq.w	80052a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051a4:	4b42      	ldr	r3, [pc, #264]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f003 030c 	and.w	r3, r3, #12
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d061      	beq.n	8005274 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d146      	bne.n	8005246 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b8:	4b3f      	ldr	r3, [pc, #252]	; (80052b8 <HAL_RCC_OscConfig+0x4fc>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051be:	f7fd fdaf 	bl	8002d20 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c6:	f7fd fdab 	bl	8002d20 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e067      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051d8:	4b35      	ldr	r3, [pc, #212]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1f0      	bne.n	80051c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ec:	d108      	bne.n	8005200 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051ee:	4b30      	ldr	r3, [pc, #192]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	492d      	ldr	r1, [pc, #180]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005200:	4b2b      	ldr	r3, [pc, #172]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a19      	ldr	r1, [r3, #32]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	430b      	orrs	r3, r1
 8005212:	4927      	ldr	r1, [pc, #156]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005214:	4313      	orrs	r3, r2
 8005216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005218:	4b27      	ldr	r3, [pc, #156]	; (80052b8 <HAL_RCC_OscConfig+0x4fc>)
 800521a:	2201      	movs	r2, #1
 800521c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521e:	f7fd fd7f 	bl	8002d20 <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005226:	f7fd fd7b 	bl	8002d20 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e037      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005238:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f0      	beq.n	8005226 <HAL_RCC_OscConfig+0x46a>
 8005244:	e02f      	b.n	80052a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005246:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <HAL_RCC_OscConfig+0x4fc>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524c:	f7fd fd68 	bl	8002d20 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005254:	f7fd fd64 	bl	8002d20 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e020      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005266:	4b12      	ldr	r3, [pc, #72]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f0      	bne.n	8005254 <HAL_RCC_OscConfig+0x498>
 8005272:	e018      	b.n	80052a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e013      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_RCC_OscConfig+0x4f4>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	429a      	cmp	r2, r3
 8005292:	d106      	bne.n	80052a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529e:	429a      	cmp	r2, r3
 80052a0:	d001      	beq.n	80052a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40021000 	.word	0x40021000
 80052b4:	40007000 	.word	0x40007000
 80052b8:	42420060 	.word	0x42420060

080052bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0d0      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052d0:	4b6a      	ldr	r3, [pc, #424]	; (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d910      	bls.n	8005300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052de:	4b67      	ldr	r3, [pc, #412]	; (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 0207 	bic.w	r2, r3, #7
 80052e6:	4965      	ldr	r1, [pc, #404]	; (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ee:	4b63      	ldr	r3, [pc, #396]	; (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0b8      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d020      	beq.n	800534e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005318:	4b59      	ldr	r3, [pc, #356]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4a58      	ldr	r2, [pc, #352]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800531e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005322:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005330:	4b53      	ldr	r3, [pc, #332]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a52      	ldr	r2, [pc, #328]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005336:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800533a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800533c:	4b50      	ldr	r3, [pc, #320]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	494d      	ldr	r1, [pc, #308]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800534a:	4313      	orrs	r3, r2
 800534c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d040      	beq.n	80053dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d107      	bne.n	8005372 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005362:	4b47      	ldr	r3, [pc, #284]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d115      	bne.n	800539a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e07f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800537a:	4b41      	ldr	r3, [pc, #260]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e073      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538a:	4b3d      	ldr	r3, [pc, #244]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e06b      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800539a:	4b39      	ldr	r3, [pc, #228]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f023 0203 	bic.w	r2, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	4936      	ldr	r1, [pc, #216]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053ac:	f7fd fcb8 	bl	8002d20 <HAL_GetTick>
 80053b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b4:	f7fd fcb4 	bl	8002d20 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e053      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ca:	4b2d      	ldr	r3, [pc, #180]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f003 020c 	and.w	r2, r3, #12
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	429a      	cmp	r2, r3
 80053da:	d1eb      	bne.n	80053b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053dc:	4b27      	ldr	r3, [pc, #156]	; (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d210      	bcs.n	800540c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ea:	4b24      	ldr	r3, [pc, #144]	; (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f023 0207 	bic.w	r2, r3, #7
 80053f2:	4922      	ldr	r1, [pc, #136]	; (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fa:	4b20      	ldr	r3, [pc, #128]	; (800547c <HAL_RCC_ClockConfig+0x1c0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d001      	beq.n	800540c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e032      	b.n	8005472 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4916      	ldr	r1, [pc, #88]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005426:	4313      	orrs	r3, r2
 8005428:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005436:	4b12      	ldr	r3, [pc, #72]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	490e      	ldr	r1, [pc, #56]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005446:	4313      	orrs	r3, r2
 8005448:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800544a:	f000 f821 	bl	8005490 <HAL_RCC_GetSysClockFreq>
 800544e:	4602      	mov	r2, r0
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	490a      	ldr	r1, [pc, #40]	; (8005484 <HAL_RCC_ClockConfig+0x1c8>)
 800545c:	5ccb      	ldrb	r3, [r1, r3]
 800545e:	fa22 f303 	lsr.w	r3, r2, r3
 8005462:	4a09      	ldr	r2, [pc, #36]	; (8005488 <HAL_RCC_ClockConfig+0x1cc>)
 8005464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005466:	4b09      	ldr	r3, [pc, #36]	; (800548c <HAL_RCC_ClockConfig+0x1d0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fd faf8 	bl	8002a60 <HAL_InitTick>

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40022000 	.word	0x40022000
 8005480:	40021000 	.word	0x40021000
 8005484:	0800e6ec 	.word	0x0800e6ec
 8005488:	20000010 	.word	0x20000010
 800548c:	20000014 	.word	0x20000014

08005490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005490:	b490      	push	{r4, r7}
 8005492:	b08a      	sub	sp, #40	; 0x28
 8005494:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005496:	4b2a      	ldr	r3, [pc, #168]	; (8005540 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005498:	1d3c      	adds	r4, r7, #4
 800549a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800549c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80054a0:	f240 2301 	movw	r3, #513	; 0x201
 80054a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	61fb      	str	r3, [r7, #28]
 80054aa:	2300      	movs	r3, #0
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	2300      	movs	r3, #0
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054ba:	4b22      	ldr	r3, [pc, #136]	; (8005544 <HAL_RCC_GetSysClockFreq+0xb4>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	f003 030c 	and.w	r3, r3, #12
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d002      	beq.n	80054d0 <HAL_RCC_GetSysClockFreq+0x40>
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d003      	beq.n	80054d6 <HAL_RCC_GetSysClockFreq+0x46>
 80054ce:	e02d      	b.n	800552c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054d0:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054d2:	623b      	str	r3, [r7, #32]
      break;
 80054d4:	e02d      	b.n	8005532 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	0c9b      	lsrs	r3, r3, #18
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054e2:	4413      	add	r3, r2
 80054e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80054e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d013      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054f4:	4b13      	ldr	r3, [pc, #76]	; (8005544 <HAL_RCC_GetSysClockFreq+0xb4>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	0c5b      	lsrs	r3, r3, #17
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005502:	4413      	add	r3, r2
 8005504:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005508:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	4a0e      	ldr	r2, [pc, #56]	; (8005548 <HAL_RCC_GetSysClockFreq+0xb8>)
 800550e:	fb02 f203 	mul.w	r2, r2, r3
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	fbb2 f3f3 	udiv	r3, r2, r3
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
 800551a:	e004      	b.n	8005526 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	4a0b      	ldr	r2, [pc, #44]	; (800554c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005520:	fb02 f303 	mul.w	r3, r2, r3
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	623b      	str	r3, [r7, #32]
      break;
 800552a:	e002      	b.n	8005532 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800552c:	4b08      	ldr	r3, [pc, #32]	; (8005550 <HAL_RCC_GetSysClockFreq+0xc0>)
 800552e:	623b      	str	r3, [r7, #32]
      break;
 8005530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005532:	6a3b      	ldr	r3, [r7, #32]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3728      	adds	r7, #40	; 0x28
 8005538:	46bd      	mov	sp, r7
 800553a:	bc90      	pop	{r4, r7}
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	0800e098 	.word	0x0800e098
 8005544:	40021000 	.word	0x40021000
 8005548:	00f42400 	.word	0x00f42400
 800554c:	003d0900 	.word	0x003d0900
 8005550:	007a1200 	.word	0x007a1200

08005554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005558:	4b02      	ldr	r3, [pc, #8]	; (8005564 <HAL_RCC_GetHCLKFreq+0x10>)
 800555a:	681b      	ldr	r3, [r3, #0]
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	20000010 	.word	0x20000010

08005568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800556c:	f7ff fff2 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	0a1b      	lsrs	r3, r3, #8
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4903      	ldr	r1, [pc, #12]	; (800558c <HAL_RCC_GetPCLK1Freq+0x24>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40021000 	.word	0x40021000
 800558c:	0800e6fc 	.word	0x0800e6fc

08005590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005594:	f7ff ffde 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 8005598:	4602      	mov	r2, r0
 800559a:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	0adb      	lsrs	r3, r3, #11
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	4903      	ldr	r1, [pc, #12]	; (80055b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055a6:	5ccb      	ldrb	r3, [r1, r3]
 80055a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40021000 	.word	0x40021000
 80055b4:	0800e6fc 	.word	0x0800e6fc

080055b8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	220f      	movs	r2, #15
 80055c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055c8:	4b11      	ldr	r3, [pc, #68]	; (8005610 <HAL_RCC_GetClockConfig+0x58>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f003 0203 	and.w	r2, r3, #3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055d4:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <HAL_RCC_GetClockConfig+0x58>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055e0:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <HAL_RCC_GetClockConfig+0x58>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80055ec:	4b08      	ldr	r3, [pc, #32]	; (8005610 <HAL_RCC_GetClockConfig+0x58>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	08db      	lsrs	r3, r3, #3
 80055f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <HAL_RCC_GetClockConfig+0x5c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0207 	and.w	r2, r3, #7
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	bc80      	pop	{r7}
 800560e:	4770      	bx	lr
 8005610:	40021000 	.word	0x40021000
 8005614:	40022000 	.word	0x40022000

08005618 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <RCC_Delay+0x34>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a0a      	ldr	r2, [pc, #40]	; (8005650 <RCC_Delay+0x38>)
 8005626:	fba2 2303 	umull	r2, r3, r2, r3
 800562a:	0a5b      	lsrs	r3, r3, #9
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	fb02 f303 	mul.w	r3, r2, r3
 8005632:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005634:	bf00      	nop
  }
  while (Delay --);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	1e5a      	subs	r2, r3, #1
 800563a:	60fa      	str	r2, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1f9      	bne.n	8005634 <RCC_Delay+0x1c>
}
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr
 800564c:	20000010 	.word	0x20000010
 8005650:	10624dd3 	.word	0x10624dd3

08005654 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	613b      	str	r3, [r7, #16]
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d07d      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005670:	2300      	movs	r3, #0
 8005672:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005674:	4b4f      	ldr	r3, [pc, #316]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10d      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005680:	4b4c      	ldr	r3, [pc, #304]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	4a4b      	ldr	r2, [pc, #300]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800568a:	61d3      	str	r3, [r2, #28]
 800568c:	4b49      	ldr	r3, [pc, #292]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005698:	2301      	movs	r3, #1
 800569a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569c:	4b46      	ldr	r3, [pc, #280]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d118      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056a8:	4b43      	ldr	r3, [pc, #268]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a42      	ldr	r2, [pc, #264]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056b4:	f7fd fb34 	bl	8002d20 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ba:	e008      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056bc:	f7fd fb30 	bl	8002d20 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b64      	cmp	r3, #100	; 0x64
 80056c8:	d901      	bls.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e06d      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ce:	4b3a      	ldr	r3, [pc, #232]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0f0      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056da:	4b36      	ldr	r3, [pc, #216]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d02e      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d027      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056f8:	4b2e      	ldr	r3, [pc, #184]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005700:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005702:	4b2e      	ldr	r3, [pc, #184]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005704:	2201      	movs	r2, #1
 8005706:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005708:	4b2c      	ldr	r3, [pc, #176]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800570e:	4a29      	ldr	r2, [pc, #164]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d014      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571e:	f7fd faff 	bl	8002d20 <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005724:	e00a      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005726:	f7fd fafb 	bl	8002d20 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	f241 3288 	movw	r2, #5000	; 0x1388
 8005734:	4293      	cmp	r3, r2
 8005736:	d901      	bls.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e036      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573c:	4b1d      	ldr	r3, [pc, #116]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0ee      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005748:	4b1a      	ldr	r3, [pc, #104]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	4917      	ldr	r1, [pc, #92]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005756:	4313      	orrs	r3, r2
 8005758:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800575a:	7dfb      	ldrb	r3, [r7, #23]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d105      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005760:	4b14      	ldr	r3, [pc, #80]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	4a13      	ldr	r2, [pc, #76]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800576a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d008      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005778:	4b0e      	ldr	r3, [pc, #56]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	490b      	ldr	r1, [pc, #44]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005786:	4313      	orrs	r3, r2
 8005788:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0310 	and.w	r3, r3, #16
 8005792:	2b00      	cmp	r3, #0
 8005794:	d008      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005796:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	4904      	ldr	r1, [pc, #16]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40021000 	.word	0x40021000
 80057b8:	40007000 	.word	0x40007000
 80057bc:	42420440 	.word	0x42420440

080057c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e076      	b.n	80058c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d108      	bne.n	80057ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e2:	d009      	beq.n	80057f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	61da      	str	r2, [r3, #28]
 80057ea:	e005      	b.n	80057f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fd f8a0 	bl	8002958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800582e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587c:	ea42 0103 	orr.w	r1, r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	0c1a      	lsrs	r2, r3, #16
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f002 0204 	and.w	r2, r2, #4
 800589e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	69da      	ldr	r2, [r3, #28]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	603b      	str	r3, [r7, #0]
 80058d4:	4613      	mov	r3, r2
 80058d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <HAL_SPI_Transmit+0x22>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e126      	b.n	8005b38 <HAL_SPI_Transmit+0x270>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058f2:	f7fd fa15 	bl	8002d20 <HAL_GetTick>
 80058f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058f8:	88fb      	ldrh	r3, [r7, #6]
 80058fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b01      	cmp	r3, #1
 8005906:	d002      	beq.n	800590e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005908:	2302      	movs	r3, #2
 800590a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800590c:	e10b      	b.n	8005b26 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <HAL_SPI_Transmit+0x52>
 8005914:	88fb      	ldrh	r3, [r7, #6]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800591e:	e102      	b.n	8005b26 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2203      	movs	r2, #3
 8005924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	88fa      	ldrh	r2, [r7, #6]
 8005938:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	88fa      	ldrh	r2, [r7, #6]
 800593e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005966:	d10f      	bne.n	8005988 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005976:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005986:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005992:	2b40      	cmp	r3, #64	; 0x40
 8005994:	d007      	beq.n	80059a6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ae:	d14b      	bne.n	8005a48 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_SPI_Transmit+0xf6>
 80059b8:	8afb      	ldrh	r3, [r7, #22]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d13e      	bne.n	8005a3c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c2:	881a      	ldrh	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	1c9a      	adds	r2, r3, #2
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059e2:	e02b      	b.n	8005a3c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d112      	bne.n	8005a18 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	881a      	ldrh	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	1c9a      	adds	r2, r3, #2
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a16:	e011      	b.n	8005a3c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a18:	f7fd f982 	bl	8002d20 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d803      	bhi.n	8005a30 <HAL_SPI_Transmit+0x168>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2e:	d102      	bne.n	8005a36 <HAL_SPI_Transmit+0x16e>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d102      	bne.n	8005a3c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a3a:	e074      	b.n	8005b26 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1ce      	bne.n	80059e4 <HAL_SPI_Transmit+0x11c>
 8005a46:	e04c      	b.n	8005ae2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_SPI_Transmit+0x18e>
 8005a50:	8afb      	ldrh	r3, [r7, #22]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d140      	bne.n	8005ad8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	330c      	adds	r3, #12
 8005a60:	7812      	ldrb	r2, [r2, #0]
 8005a62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a7c:	e02c      	b.n	8005ad8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d113      	bne.n	8005ab4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	330c      	adds	r3, #12
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ab2:	e011      	b.n	8005ad8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ab4:	f7fd f934 	bl	8002d20 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d803      	bhi.n	8005acc <HAL_SPI_Transmit+0x204>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aca:	d102      	bne.n	8005ad2 <HAL_SPI_Transmit+0x20a>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d102      	bne.n	8005ad8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ad6:	e026      	b.n	8005b26 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1cd      	bne.n	8005a7e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f8b2 	bl	8005c50 <SPI_EndRxTxTransaction>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10a      	bne.n	8005b16 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b00:	2300      	movs	r3, #0
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	613b      	str	r3, [r7, #16]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	77fb      	strb	r3, [r7, #31]
 8005b22:	e000      	b.n	8005b26 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005b24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b36:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b50:	f7fd f8e6 	bl	8002d20 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	1a9b      	subs	r3, r3, r2
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b60:	f7fd f8de 	bl	8002d20 <HAL_GetTick>
 8005b64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b66:	4b39      	ldr	r3, [pc, #228]	; (8005c4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	015b      	lsls	r3, r3, #5
 8005b6c:	0d1b      	lsrs	r3, r3, #20
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	fb02 f303 	mul.w	r3, r2, r3
 8005b74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b76:	e054      	b.n	8005c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7e:	d050      	beq.n	8005c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b80:	f7fd f8ce 	bl	8002d20 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d902      	bls.n	8005b96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d13d      	bne.n	8005c12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ba4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bae:	d111      	bne.n	8005bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb8:	d004      	beq.n	8005bc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc2:	d107      	bne.n	8005bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bdc:	d10f      	bne.n	8005bfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e017      	b.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	bf0c      	ite	eq
 8005c32:	2301      	moveq	r3, #1
 8005c34:	2300      	movne	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d19b      	bne.n	8005b78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000010 	.word	0x20000010

08005c50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2200      	movs	r2, #0
 8005c64:	2180      	movs	r1, #128	; 0x80
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff ff6a 	bl	8005b40 <SPI_WaitFlagStateUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d007      	beq.n	8005c82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c76:	f043 0220 	orr.w	r2, r3, #32
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e000      	b.n	8005c84 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e041      	b.n	8005d22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f839 	bl	8005d2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	f000 f9b4 	bl	8006038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr

08005d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d001      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e03a      	b.n	8005dca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0201 	orr.w	r2, r2, #1
 8005d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a18      	ldr	r2, [pc, #96]	; (8005dd4 <HAL_TIM_Base_Start_IT+0x98>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00e      	beq.n	8005d94 <HAL_TIM_Base_Start_IT+0x58>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d7e:	d009      	beq.n	8005d94 <HAL_TIM_Base_Start_IT+0x58>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a14      	ldr	r2, [pc, #80]	; (8005dd8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d004      	beq.n	8005d94 <HAL_TIM_Base_Start_IT+0x58>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <HAL_TIM_Base_Start_IT+0xa0>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d111      	bne.n	8005db8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b06      	cmp	r3, #6
 8005da4:	d010      	beq.n	8005dc8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0201 	orr.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db6:	e007      	b.n	8005dc8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800

08005de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d122      	bne.n	8005e3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d11b      	bne.n	8005e3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f06f 0202 	mvn.w	r2, #2
 8005e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f8ed 	bl	8006002 <HAL_TIM_IC_CaptureCallback>
 8005e28:	e005      	b.n	8005e36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f8e0 	bl	8005ff0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f8ef 	bl	8006014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d122      	bne.n	8005e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d11b      	bne.n	8005e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f06f 0204 	mvn.w	r2, #4
 8005e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2202      	movs	r2, #2
 8005e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f8c3 	bl	8006002 <HAL_TIM_IC_CaptureCallback>
 8005e7c:	e005      	b.n	8005e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f8b6 	bl	8005ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f8c5 	bl	8006014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b08      	cmp	r3, #8
 8005e9c:	d122      	bne.n	8005ee4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d11b      	bne.n	8005ee4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f06f 0208 	mvn.w	r2, #8
 8005eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2204      	movs	r2, #4
 8005eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f899 	bl	8006002 <HAL_TIM_IC_CaptureCallback>
 8005ed0:	e005      	b.n	8005ede <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f88c 	bl	8005ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f89b 	bl	8006014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f003 0310 	and.w	r3, r3, #16
 8005eee:	2b10      	cmp	r3, #16
 8005ef0:	d122      	bne.n	8005f38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f003 0310 	and.w	r3, r3, #16
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d11b      	bne.n	8005f38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f06f 0210 	mvn.w	r2, #16
 8005f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f86f 	bl	8006002 <HAL_TIM_IC_CaptureCallback>
 8005f24:	e005      	b.n	8005f32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f862 	bl	8005ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f871 	bl	8006014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d10e      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d107      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f06f 0201 	mvn.w	r2, #1
 8005f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fa ff56 	bl	8000e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6e:	2b80      	cmp	r3, #128	; 0x80
 8005f70:	d10e      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7c:	2b80      	cmp	r3, #128	; 0x80
 8005f7e:	d107      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f8bf 	bl	800610e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9a:	2b40      	cmp	r3, #64	; 0x40
 8005f9c:	d10e      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa8:	2b40      	cmp	r3, #64	; 0x40
 8005faa:	d107      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f835 	bl	8006026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b20      	cmp	r3, #32
 8005fc8:	d10e      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0320 	and.w	r3, r3, #32
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d107      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0220 	mvn.w	r2, #32
 8005fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f88a 	bl	80060fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fe8:	bf00      	nop
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr

08006002 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr

08006014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	bc80      	pop	{r7}
 8006024:	4770      	bx	lr

08006026 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr

08006038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a29      	ldr	r2, [pc, #164]	; (80060f0 <TIM_Base_SetConfig+0xb8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00b      	beq.n	8006068 <TIM_Base_SetConfig+0x30>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006056:	d007      	beq.n	8006068 <TIM_Base_SetConfig+0x30>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a26      	ldr	r2, [pc, #152]	; (80060f4 <TIM_Base_SetConfig+0xbc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_Base_SetConfig+0x30>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a25      	ldr	r2, [pc, #148]	; (80060f8 <TIM_Base_SetConfig+0xc0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d108      	bne.n	800607a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1c      	ldr	r2, [pc, #112]	; (80060f0 <TIM_Base_SetConfig+0xb8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00b      	beq.n	800609a <TIM_Base_SetConfig+0x62>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006088:	d007      	beq.n	800609a <TIM_Base_SetConfig+0x62>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a19      	ldr	r2, [pc, #100]	; (80060f4 <TIM_Base_SetConfig+0xbc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d003      	beq.n	800609a <TIM_Base_SetConfig+0x62>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a18      	ldr	r2, [pc, #96]	; (80060f8 <TIM_Base_SetConfig+0xc0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d108      	bne.n	80060ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a07      	ldr	r2, [pc, #28]	; (80060f0 <TIM_Base_SetConfig+0xb8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d103      	bne.n	80060e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	615a      	str	r2, [r3, #20]
}
 80060e6:	bf00      	nop
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bc80      	pop	{r7}
 80060ee:	4770      	bx	lr
 80060f0:	40012c00 	.word	0x40012c00
 80060f4:	40000400 	.word	0x40000400
 80060f8:	40000800 	.word	0x40000800

080060fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	bc80      	pop	{r7}
 800610c:	4770      	bx	lr

0800610e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	bc80      	pop	{r7}
 800611e:	4770      	bx	lr

08006120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e03f      	b.n	80061b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d106      	bne.n	800614c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7fc fd4a 	bl	8002be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2224      	movs	r2, #36	; 0x24
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fba9 	bl	80068bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695a      	ldr	r2, [r3, #20]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b084      	sub	sp, #16
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	4613      	mov	r3, r2
 80061c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d11d      	bne.n	8006210 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_UART_Receive_IT+0x26>
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e016      	b.n	8006212 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_UART_Receive_IT+0x38>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e00f      	b.n	8006212 <HAL_UART_Receive_IT+0x58>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	461a      	mov	r2, r3
 8006204:	68b9      	ldr	r1, [r7, #8]
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 f9cf 	bl	80065aa <UART_Start_Receive_IT>
 800620c:	4603      	mov	r3, r0
 800620e:	e000      	b.n	8006212 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006210:	2302      	movs	r3, #2
  }
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08a      	sub	sp, #40	; 0x28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800623c:	2300      	movs	r3, #0
 800623e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006240:	2300      	movs	r3, #0
 8006242:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10d      	bne.n	800626e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	d008      	beq.n	800626e <HAL_UART_IRQHandler+0x52>
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fa7f 	bl	800676a <UART_Receive_IT>
      return;
 800626c:	e17b      	b.n	8006566 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 80b1 	beq.w	80063d8 <HAL_UART_IRQHandler+0x1bc>
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d105      	bne.n	800628c <HAL_UART_IRQHandler+0x70>
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 80a6 	beq.w	80063d8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <HAL_UART_IRQHandler+0x90>
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a4:	f043 0201 	orr.w	r2, r3, #1
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <HAL_UART_IRQHandler+0xb0>
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c4:	f043 0202 	orr.w	r2, r3, #2
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <HAL_UART_IRQHandler+0xd0>
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e4:	f043 0204 	orr.w	r2, r3, #4
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00f      	beq.n	8006316 <HAL_UART_IRQHandler+0xfa>
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d104      	bne.n	800630a <HAL_UART_IRQHandler+0xee>
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	f043 0208 	orr.w	r2, r3, #8
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 811e 	beq.w	800655c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d007      	beq.n	800633a <HAL_UART_IRQHandler+0x11e>
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fa18 	bl	800676a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	2b00      	cmp	r3, #0
 8006346:	bf14      	ite	ne
 8006348:	2301      	movne	r3, #1
 800634a:	2300      	moveq	r3, #0
 800634c:	b2db      	uxtb	r3, r3
 800634e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	f003 0308 	and.w	r3, r3, #8
 8006358:	2b00      	cmp	r3, #0
 800635a:	d102      	bne.n	8006362 <HAL_UART_IRQHandler+0x146>
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d031      	beq.n	80063c6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f95a 	bl	800661c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d023      	beq.n	80063be <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695a      	ldr	r2, [r3, #20]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006384:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	2b00      	cmp	r3, #0
 800638c:	d013      	beq.n	80063b6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	4a76      	ldr	r2, [pc, #472]	; (800656c <HAL_UART_IRQHandler+0x350>)
 8006394:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	4618      	mov	r0, r3
 800639c:	f7fc fde4 	bl	8002f68 <HAL_DMA_Abort_IT>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d016      	beq.n	80063d4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063b0:	4610      	mov	r0, r2
 80063b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b4:	e00e      	b.n	80063d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f8e3 	bl	8006582 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063bc:	e00a      	b.n	80063d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f8df 	bl	8006582 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c4:	e006      	b.n	80063d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f8db 	bl	8006582 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063d2:	e0c3      	b.n	800655c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d4:	bf00      	nop
    return;
 80063d6:	e0c1      	b.n	800655c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	2b01      	cmp	r3, #1
 80063de:	f040 80a1 	bne.w	8006524 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	f003 0310 	and.w	r3, r3, #16
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 809b 	beq.w	8006524 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8095 	beq.w	8006524 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063fa:	2300      	movs	r3, #0
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d04e      	beq.n	80064bc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006428:	8a3b      	ldrh	r3, [r7, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 8098 	beq.w	8006560 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006434:	8a3a      	ldrh	r2, [r7, #16]
 8006436:	429a      	cmp	r2, r3
 8006438:	f080 8092 	bcs.w	8006560 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8a3a      	ldrh	r2, [r7, #16]
 8006440:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	2b20      	cmp	r3, #32
 800644a:	d02b      	beq.n	80064a4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800645a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695a      	ldr	r2, [r3, #20]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0201 	bic.w	r2, r2, #1
 800646a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695a      	ldr	r2, [r3, #20]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800647a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68da      	ldr	r2, [r3, #12]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0210 	bic.w	r2, r2, #16
 8006498:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fc fd27 	bl	8002ef2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f86d 	bl	8006594 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80064ba:	e051      	b.n	8006560 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d047      	beq.n	8006564 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80064d4:	8a7b      	ldrh	r3, [r7, #18]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d044      	beq.n	8006564 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064e8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	695a      	ldr	r2, [r3, #20]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f022 0201 	bic.w	r2, r2, #1
 80064f8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0210 	bic.w	r2, r2, #16
 8006516:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006518:	8a7b      	ldrh	r3, [r7, #18]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f839 	bl	8006594 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006522:	e01f      	b.n	8006564 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652a:	2b00      	cmp	r3, #0
 800652c:	d008      	beq.n	8006540 <HAL_UART_IRQHandler+0x324>
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f8af 	bl	800669c <UART_Transmit_IT>
    return;
 800653e:	e012      	b.n	8006566 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00d      	beq.n	8006566 <HAL_UART_IRQHandler+0x34a>
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	d008      	beq.n	8006566 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f8f0 	bl	800673a <UART_EndTransmit_IT>
    return;
 800655a:	e004      	b.n	8006566 <HAL_UART_IRQHandler+0x34a>
    return;
 800655c:	bf00      	nop
 800655e:	e002      	b.n	8006566 <HAL_UART_IRQHandler+0x34a>
      return;
 8006560:	bf00      	nop
 8006562:	e000      	b.n	8006566 <HAL_UART_IRQHandler+0x34a>
      return;
 8006564:	bf00      	nop
  }
}
 8006566:	3728      	adds	r7, #40	; 0x28
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	08006675 	.word	0x08006675

08006570 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	bc80      	pop	{r7}
 8006580:	4770      	bx	lr

08006582 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr

08006594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr

080065aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b085      	sub	sp, #20
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	60f8      	str	r0, [r7, #12]
 80065b2:	60b9      	str	r1, [r7, #8]
 80065b4:	4613      	mov	r3, r2
 80065b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	88fa      	ldrh	r2, [r7, #6]
 80065c2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	88fa      	ldrh	r2, [r7, #6]
 80065c8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2222      	movs	r2, #34	; 0x22
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ee:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	695a      	ldr	r2, [r3, #20]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0201 	orr.w	r2, r2, #1
 80065fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0220 	orr.w	r2, r2, #32
 800660e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	bc80      	pop	{r7}
 800661a:	4770      	bx	lr

0800661c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006632:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695a      	ldr	r2, [r3, #20]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0201 	bic.w	r2, r2, #1
 8006642:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006648:	2b01      	cmp	r3, #1
 800664a:	d107      	bne.n	800665c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0210 	bic.w	r2, r2, #16
 800665a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2220      	movs	r2, #32
 8006660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	631a      	str	r2, [r3, #48]	; 0x30
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr

08006674 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006680:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f7ff ff77 	bl	8006582 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b21      	cmp	r3, #33	; 0x21
 80066ae:	d13e      	bne.n	800672e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b8:	d114      	bne.n	80066e4 <UART_Transmit_IT+0x48>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d110      	bne.n	80066e4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	1c9a      	adds	r2, r3, #2
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	621a      	str	r2, [r3, #32]
 80066e2:	e008      	b.n	80066f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	1c59      	adds	r1, r3, #1
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	6211      	str	r1, [r2, #32]
 80066ee:	781a      	ldrb	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b29b      	uxth	r3, r3
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	4619      	mov	r1, r3
 8006704:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10f      	bne.n	800672a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006718:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006728:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	e000      	b.n	8006730 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800672e:	2302      	movs	r3, #2
  }
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr

0800673a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b082      	sub	sp, #8
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006750:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff ff08 	bl	8006570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b086      	sub	sp, #24
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b22      	cmp	r3, #34	; 0x22
 800677c:	f040 8099 	bne.w	80068b2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006788:	d117      	bne.n	80067ba <UART_Receive_IT+0x50>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d113      	bne.n	80067ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b2:	1c9a      	adds	r2, r3, #2
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	629a      	str	r2, [r3, #40]	; 0x28
 80067b8:	e026      	b.n	8006808 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067be:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067cc:	d007      	beq.n	80067de <UART_Receive_IT+0x74>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <UART_Receive_IT+0x82>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	e008      	b.n	80067fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800680c:	b29b      	uxth	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	b29b      	uxth	r3, r3
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	4619      	mov	r1, r3
 8006816:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006818:	2b00      	cmp	r3, #0
 800681a:	d148      	bne.n	80068ae <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0220 	bic.w	r2, r2, #32
 800682a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800683a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	695a      	ldr	r2, [r3, #20]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0201 	bic.w	r2, r2, #1
 800684a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2220      	movs	r2, #32
 8006850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006858:	2b01      	cmp	r3, #1
 800685a:	d123      	bne.n	80068a4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0210 	bic.w	r2, r2, #16
 8006870:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0310 	and.w	r3, r3, #16
 800687c:	2b10      	cmp	r3, #16
 800687e:	d10a      	bne.n	8006896 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006880:	2300      	movs	r3, #0
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff fe79 	bl	8006594 <HAL_UARTEx_RxEventCallback>
 80068a2:	e002      	b.n	80068aa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7fa f8f1 	bl	8000a8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e002      	b.n	80068b4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	e000      	b.n	80068b4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80068b2:	2302      	movs	r3, #2
  }
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689a      	ldr	r2, [r3, #8]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80068f6:	f023 030c 	bic.w	r3, r3, #12
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	68b9      	ldr	r1, [r7, #8]
 8006900:	430b      	orrs	r3, r1
 8006902:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	699a      	ldr	r2, [r3, #24]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a2c      	ldr	r2, [pc, #176]	; (80069d0 <UART_SetConfig+0x114>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d103      	bne.n	800692c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006924:	f7fe fe34 	bl	8005590 <HAL_RCC_GetPCLK2Freq>
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	e002      	b.n	8006932 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800692c:	f7fe fe1c 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8006930:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4613      	mov	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	009a      	lsls	r2, r3, #2
 800693c:	441a      	add	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	fbb2 f3f3 	udiv	r3, r2, r3
 8006948:	4a22      	ldr	r2, [pc, #136]	; (80069d4 <UART_SetConfig+0x118>)
 800694a:	fba2 2303 	umull	r2, r3, r2, r3
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	0119      	lsls	r1, r3, #4
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	009a      	lsls	r2, r3, #2
 800695c:	441a      	add	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	fbb2 f2f3 	udiv	r2, r2, r3
 8006968:	4b1a      	ldr	r3, [pc, #104]	; (80069d4 <UART_SetConfig+0x118>)
 800696a:	fba3 0302 	umull	r0, r3, r3, r2
 800696e:	095b      	lsrs	r3, r3, #5
 8006970:	2064      	movs	r0, #100	; 0x64
 8006972:	fb00 f303 	mul.w	r3, r0, r3
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	3332      	adds	r3, #50	; 0x32
 800697c:	4a15      	ldr	r2, [pc, #84]	; (80069d4 <UART_SetConfig+0x118>)
 800697e:	fba2 2303 	umull	r2, r3, r2, r3
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006988:	4419      	add	r1, r3
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4613      	mov	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	009a      	lsls	r2, r3, #2
 8006994:	441a      	add	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	fbb2 f2f3 	udiv	r2, r2, r3
 80069a0:	4b0c      	ldr	r3, [pc, #48]	; (80069d4 <UART_SetConfig+0x118>)
 80069a2:	fba3 0302 	umull	r0, r3, r3, r2
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	2064      	movs	r0, #100	; 0x64
 80069aa:	fb00 f303 	mul.w	r3, r0, r3
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	011b      	lsls	r3, r3, #4
 80069b2:	3332      	adds	r3, #50	; 0x32
 80069b4:	4a07      	ldr	r2, [pc, #28]	; (80069d4 <UART_SetConfig+0x118>)
 80069b6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	f003 020f 	and.w	r2, r3, #15
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	440a      	add	r2, r1
 80069c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80069c8:	bf00      	nop
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	40013800 	.word	0x40013800
 80069d4:	51eb851f 	.word	0x51eb851f

080069d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069d8:	b084      	sub	sp, #16
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	f107 0014 	add.w	r0, r7, #20
 80069e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bc80      	pop	{r7}
 80069f4:	b004      	add	sp, #16
 80069f6:	4770      	bx	lr

080069f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a08:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006a0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr

08006a24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a2c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006a30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	43db      	mvns	r3, r3
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	4013      	ands	r3, r2
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bc80      	pop	{r7}
 8006a56:	4770      	bx	lr

08006a58 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr

08006a70 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a70:	b084      	sub	sp, #16
 8006a72:	b480      	push	{r7}
 8006a74:	b083      	sub	sp, #12
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	f107 0014 	add.w	r0, r7, #20
 8006a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	b004      	add	sp, #16
 8006aae:	4770      	bx	lr

08006ab0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b09b      	sub	sp, #108	; 0x6c
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	78db      	ldrb	r3, [r3, #3]
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d81f      	bhi.n	8006b22 <USB_ActivateEndpoint+0x72>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <USB_ActivateEndpoint+0x38>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006af9 	.word	0x08006af9
 8006aec:	08006b15 	.word	0x08006b15
 8006af0:	08006b2b 	.word	0x08006b2b
 8006af4:	08006b07 	.word	0x08006b07
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006af8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b00:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006b04:	e012      	b.n	8006b2c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006b06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b0a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006b0e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006b12:	e00b      	b.n	8006b2c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006b14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b1c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006b20:	e004      	b.n	8006b2c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006b28:	e000      	b.n	8006b2c <USB_ActivateEndpoint+0x7c>
      break;
 8006b2a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	441a      	add	r2, r3
 8006b36:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	441a      	add	r2, r3
 8006b7c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	7b1b      	ldrb	r3, [r3, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f040 8149 	bne.w	8006e30 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	785b      	ldrb	r3, [r3, #1]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 8084 	beq.w	8006cb0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	4413      	add	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	011a      	lsls	r2, r3, #4
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	88db      	ldrh	r3, [r3, #6]
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	005b      	lsls	r3, r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	81fb      	strh	r3, [r7, #14]
 8006bea:	89fb      	ldrh	r3, [r7, #14]
 8006bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01b      	beq.n	8006c2c <USB_ActivateEndpoint+0x17c>
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0a:	81bb      	strh	r3, [r7, #12]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	441a      	add	r2, r3
 8006c16:	89bb      	ldrh	r3, [r7, #12]
 8006c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	78db      	ldrb	r3, [r3, #3]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d020      	beq.n	8006c76 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c4a:	813b      	strh	r3, [r7, #8]
 8006c4c:	893b      	ldrh	r3, [r7, #8]
 8006c4e:	f083 0320 	eor.w	r3, r3, #32
 8006c52:	813b      	strh	r3, [r7, #8]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	441a      	add	r2, r3
 8006c5e:	893b      	ldrh	r3, [r7, #8]
 8006c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	8013      	strh	r3, [r2, #0]
 8006c74:	e27f      	b.n	8007176 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c8c:	817b      	strh	r3, [r7, #10]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	441a      	add	r2, r3
 8006c98:	897b      	ldrh	r3, [r7, #10]
 8006c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	8013      	strh	r3, [r2, #0]
 8006cae:	e262      	b.n	8007176 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc0:	4413      	add	r3, r2
 8006cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	011a      	lsls	r2, r3, #4
 8006cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	88db      	ldrh	r3, [r3, #6]
 8006cd8:	085b      	lsrs	r3, r3, #1
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	4413      	add	r3, r2
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	011a      	lsls	r2, r3, #4
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	4413      	add	r3, r2
 8006d02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d06:	623b      	str	r3, [r7, #32]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d112      	bne.n	8006d36 <USB_ActivateEndpoint+0x286>
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	801a      	strh	r2, [r3, #0]
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	801a      	strh	r2, [r3, #0]
 8006d34:	e02f      	b.n	8006d96 <USB_ActivateEndpoint+0x2e6>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d3c:	d813      	bhi.n	8006d66 <USB_ActivateEndpoint+0x2b6>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	085b      	lsrs	r3, r3, #1
 8006d44:	663b      	str	r3, [r7, #96]	; 0x60
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <USB_ActivateEndpoint+0x2a8>
 8006d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d54:	3301      	adds	r3, #1
 8006d56:	663b      	str	r3, [r7, #96]	; 0x60
 8006d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	029b      	lsls	r3, r3, #10
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	801a      	strh	r2, [r3, #0]
 8006d64:	e017      	b.n	8006d96 <USB_ActivateEndpoint+0x2e6>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f003 031f 	and.w	r3, r3, #31
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <USB_ActivateEndpoint+0x2d0>
 8006d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	663b      	str	r3, [r7, #96]	; 0x60
 8006d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	029b      	lsls	r3, r3, #10
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	83fb      	strh	r3, [r7, #30]
 8006da4:	8bfb      	ldrh	r3, [r7, #30]
 8006da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d01b      	beq.n	8006de6 <USB_ActivateEndpoint+0x336>
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc4:	83bb      	strh	r3, [r7, #28]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	441a      	add	r2, r3
 8006dd0:	8bbb      	ldrh	r3, [r7, #28]
 8006dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfc:	837b      	strh	r3, [r7, #26]
 8006dfe:	8b7b      	ldrh	r3, [r7, #26]
 8006e00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e04:	837b      	strh	r3, [r7, #26]
 8006e06:	8b7b      	ldrh	r3, [r7, #26]
 8006e08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e0c:	837b      	strh	r3, [r7, #26]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	441a      	add	r2, r3
 8006e18:	8b7b      	ldrh	r3, [r7, #26]
 8006e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	8013      	strh	r3, [r2, #0]
 8006e2e:	e1a2      	b.n	8007176 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e46:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	441a      	add	r2, r3
 8006e54:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e60:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e7c:	4413      	add	r3, r2
 8006e7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	011a      	lsls	r2, r3, #4
 8006e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e8e:	657b      	str	r3, [r7, #84]	; 0x54
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	891b      	ldrh	r3, [r3, #8]
 8006e94:	085b      	lsrs	r3, r3, #1
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e9e:	801a      	strh	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eb0:	4413      	add	r3, r2
 8006eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	011a      	lsls	r2, r3, #4
 8006eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	895b      	ldrh	r3, [r3, #10]
 8006ec8:	085b      	lsrs	r3, r3, #1
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	785b      	ldrb	r3, [r3, #1]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f040 8091 	bne.w	8007000 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006eec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d01b      	beq.n	8006f2e <USB_ActivateEndpoint+0x47e>
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	441a      	add	r2, r3
 8006f18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	873b      	strh	r3, [r7, #56]	; 0x38
 8006f3c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d01b      	beq.n	8006f7e <USB_ActivateEndpoint+0x4ce>
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	441a      	add	r2, r3
 8006f68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f94:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006f96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006f98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f9c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006f9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006fa0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fa4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	441a      	add	r2, r3
 8006fb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fdc:	867b      	strh	r3, [r7, #50]	; 0x32
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	441a      	add	r2, r3
 8006fe8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	8013      	strh	r3, [r2, #0]
 8006ffe:	e0ba      	b.n	8007176 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007010:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d01d      	beq.n	8007058 <USB_ActivateEndpoint+0x5a8>
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	b29b      	uxth	r3, r3
 800702a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007032:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	441a      	add	r2, r3
 8007040:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800704c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007054:	b29b      	uxth	r3, r3
 8007056:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007068:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01d      	beq.n	80070b0 <USB_ActivateEndpoint+0x600>
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	b29b      	uxth	r3, r3
 8007082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	441a      	add	r2, r3
 8007098:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800709c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	78db      	ldrb	r3, [r3, #3]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d024      	beq.n	8007102 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80070d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070d6:	f083 0320 	eor.w	r3, r3, #32
 80070da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	441a      	add	r2, r3
 80070e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	8013      	strh	r3, [r2, #0]
 8007100:	e01d      	b.n	800713e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007118:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	441a      	add	r2, r3
 8007126:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800712a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800712e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713a:	b29b      	uxth	r3, r3
 800713c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	b29b      	uxth	r3, r3
 800714c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007154:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	441a      	add	r2, r3
 8007160:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800716a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800716e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007172:	b29b      	uxth	r3, r3
 8007174:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007176:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800717a:	4618      	mov	r0, r3
 800717c:	376c      	adds	r7, #108	; 0x6c
 800717e:	46bd      	mov	sp, r7
 8007180:	bc80      	pop	{r7}
 8007182:	4770      	bx	lr

08007184 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007184:	b480      	push	{r7}
 8007186:	b08d      	sub	sp, #52	; 0x34
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	7b1b      	ldrb	r3, [r3, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	f040 808e 	bne.w	80072b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	785b      	ldrb	r3, [r3, #1]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d044      	beq.n	800722a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	81bb      	strh	r3, [r7, #12]
 80071ae:	89bb      	ldrh	r3, [r7, #12]
 80071b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01b      	beq.n	80071f0 <USB_DeactivateEndpoint+0x6c>
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ce:	817b      	strh	r3, [r7, #10]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	441a      	add	r2, r3
 80071da:	897b      	ldrh	r3, [r7, #10]
 80071dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007206:	813b      	strh	r3, [r7, #8]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	441a      	add	r2, r3
 8007212:	893b      	ldrh	r3, [r7, #8]
 8007214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007224:	b29b      	uxth	r3, r3
 8007226:	8013      	strh	r3, [r2, #0]
 8007228:	e192      	b.n	8007550 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	827b      	strh	r3, [r7, #18]
 8007238:	8a7b      	ldrh	r3, [r7, #18]
 800723a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d01b      	beq.n	800727a <USB_DeactivateEndpoint+0xf6>
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29b      	uxth	r3, r3
 8007250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007258:	823b      	strh	r3, [r7, #16]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	441a      	add	r2, r3
 8007264:	8a3b      	ldrh	r3, [r7, #16]
 8007266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800726e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007276:	b29b      	uxth	r3, r3
 8007278:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	b29b      	uxth	r3, r3
 8007288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800728c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007290:	81fb      	strh	r3, [r7, #14]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	441a      	add	r2, r3
 800729c:	89fb      	ldrh	r3, [r7, #14]
 800729e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	8013      	strh	r3, [r2, #0]
 80072b2:	e14d      	b.n	8007550 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	785b      	ldrb	r3, [r3, #1]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f040 80a5 	bne.w	8007408 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	881b      	ldrh	r3, [r3, #0]
 80072ca:	843b      	strh	r3, [r7, #32]
 80072cc:	8c3b      	ldrh	r3, [r7, #32]
 80072ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d01b      	beq.n	800730e <USB_DeactivateEndpoint+0x18a>
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ec:	83fb      	strh	r3, [r7, #30]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	441a      	add	r2, r3
 80072f8:	8bfb      	ldrh	r3, [r7, #30]
 80072fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007302:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730a:	b29b      	uxth	r3, r3
 800730c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	83bb      	strh	r3, [r7, #28]
 800731c:	8bbb      	ldrh	r3, [r7, #28]
 800731e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01b      	beq.n	800735e <USB_DeactivateEndpoint+0x1da>
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29b      	uxth	r3, r3
 8007334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733c:	837b      	strh	r3, [r7, #26]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	441a      	add	r2, r3
 8007348:	8b7b      	ldrh	r3, [r7, #26]
 800734a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800734e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007356:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800735a:	b29b      	uxth	r3, r3
 800735c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	b29b      	uxth	r3, r3
 800736c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007374:	833b      	strh	r3, [r7, #24]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	441a      	add	r2, r3
 8007380:	8b3b      	ldrh	r3, [r7, #24]
 8007382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800738a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800738e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007392:	b29b      	uxth	r3, r3
 8007394:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ac:	82fb      	strh	r3, [r7, #22]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	441a      	add	r2, r3
 80073b8:	8afb      	ldrh	r3, [r7, #22]
 80073ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073e4:	82bb      	strh	r3, [r7, #20]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	441a      	add	r2, r3
 80073f0:	8abb      	ldrh	r3, [r7, #20]
 80073f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007402:	b29b      	uxth	r3, r3
 8007404:	8013      	strh	r3, [r2, #0]
 8007406:	e0a3      	b.n	8007550 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007416:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01b      	beq.n	8007458 <USB_DeactivateEndpoint+0x2d4>
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	b29b      	uxth	r3, r3
 800742e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007436:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	441a      	add	r2, r3
 8007442:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800744c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007454:	b29b      	uxth	r3, r3
 8007456:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007466:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01b      	beq.n	80074a8 <USB_DeactivateEndpoint+0x324>
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	b29b      	uxth	r3, r3
 800747e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007486:	853b      	strh	r3, [r7, #40]	; 0x28
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	441a      	add	r2, r3
 8007492:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800749c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	441a      	add	r2, r3
 80074ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074dc:	b29b      	uxth	r3, r3
 80074de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	441a      	add	r2, r3
 8007502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800750c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007514:	b29b      	uxth	r3, r3
 8007516:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	b29b      	uxth	r3, r3
 8007526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800752a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	441a      	add	r2, r3
 800753a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800753c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800754c:	b29b      	uxth	r3, r3
 800754e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3734      	adds	r7, #52	; 0x34
 8007556:	46bd      	mov	sp, r7
 8007558:	bc80      	pop	{r7}
 800755a:	4770      	bx	lr

0800755c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b0cc      	sub	sp, #304	; 0x130
 8007560:	af00      	add	r7, sp, #0
 8007562:	1d3b      	adds	r3, r7, #4
 8007564:	6018      	str	r0, [r3, #0]
 8007566:	463b      	mov	r3, r7
 8007568:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800756a:	463b      	mov	r3, r7
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	2b01      	cmp	r3, #1
 8007572:	f040 872e 	bne.w	80083d2 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007576:	463b      	mov	r3, r7
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	699a      	ldr	r2, [r3, #24]
 800757c:	463b      	mov	r3, r7
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	429a      	cmp	r2, r3
 8007584:	d905      	bls.n	8007592 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007586:	463b      	mov	r3, r7
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007590:	e004      	b.n	800759c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007592:	463b      	mov	r3, r7
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800759c:	463b      	mov	r3, r7
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	7b1b      	ldrb	r3, [r3, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d134      	bne.n	8007610 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80075a6:	463b      	mov	r3, r7
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6959      	ldr	r1, [r3, #20]
 80075ac:	463b      	mov	r3, r7
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	88da      	ldrh	r2, [r3, #6]
 80075b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	1d38      	adds	r0, r7, #4
 80075ba:	6800      	ldr	r0, [r0, #0]
 80075bc:	f001 fc03 	bl	8008dc6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075c0:	f107 0310 	add.w	r3, r7, #16
 80075c4:	1d3a      	adds	r2, r7, #4
 80075c6:	6812      	ldr	r2, [r2, #0]
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	1d3b      	adds	r3, r7, #4
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	4619      	mov	r1, r3
 80075d6:	f107 0310 	add.w	r3, r7, #16
 80075da:	f107 0210 	add.w	r2, r7, #16
 80075de:	6812      	ldr	r2, [r2, #0]
 80075e0:	440a      	add	r2, r1
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	463b      	mov	r3, r7
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	011a      	lsls	r2, r3, #4
 80075ec:	f107 0310 	add.w	r3, r7, #16
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4413      	add	r3, r2
 80075f4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80075f8:	f107 030c 	add.w	r3, r7, #12
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007602:	b29a      	uxth	r2, r3
 8007604:	f107 030c 	add.w	r3, r7, #12
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	801a      	strh	r2, [r3, #0]
 800760c:	f000 beac 	b.w	8008368 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007610:	463b      	mov	r3, r7
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	78db      	ldrb	r3, [r3, #3]
 8007616:	2b02      	cmp	r3, #2
 8007618:	f040 838c 	bne.w	8007d34 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800761c:	463b      	mov	r3, r7
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6a1a      	ldr	r2, [r3, #32]
 8007622:	463b      	mov	r3, r7
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	429a      	cmp	r2, r3
 800762a:	f240 8330 	bls.w	8007c8e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800762e:	1d3b      	adds	r3, r7, #4
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	463b      	mov	r3, r7
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	b29b      	uxth	r3, r3
 8007640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007648:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800764c:	1d3b      	adds	r3, r7, #4
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	463b      	mov	r3, r7
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	441a      	add	r2, r3
 800765a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800765e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007666:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800766a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800766e:	b29b      	uxth	r3, r3
 8007670:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007672:	463b      	mov	r3, r7
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6a1a      	ldr	r2, [r3, #32]
 8007678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800767c:	1ad2      	subs	r2, r2, r3
 800767e:	463b      	mov	r3, r7
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007684:	1d3b      	adds	r3, r7, #4
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	463b      	mov	r3, r7
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	b29b      	uxth	r3, r3
 8007696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 819e 	beq.w	80079dc <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076a4:	1d3a      	adds	r2, r7, #4
 80076a6:	6812      	ldr	r2, [r2, #0]
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	463b      	mov	r3, r7
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	785b      	ldrb	r3, [r3, #1]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d17a      	bne.n	80077aa <USB_EPStartXfer+0x24e>
 80076b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076b8:	1d3a      	adds	r2, r7, #4
 80076ba:	6812      	ldr	r2, [r2, #0]
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	1d3b      	adds	r3, r7, #4
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	4619      	mov	r1, r3
 80076ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	440a      	add	r2, r1
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	463b      	mov	r3, r7
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	011a      	lsls	r2, r3, #4
 80076e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4413      	add	r3, r2
 80076e8:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80076ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d11a      	bne.n	8007730 <USB_EPStartXfer+0x1d4>
 80076fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	b29b      	uxth	r3, r3
 8007704:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007708:	b29a      	uxth	r2, r3
 800770a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	801a      	strh	r2, [r3, #0]
 8007712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	b29b      	uxth	r3, r3
 800771c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007724:	b29a      	uxth	r2, r3
 8007726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	801a      	strh	r2, [r3, #0]
 800772e:	e062      	b.n	80077f6 <USB_EPStartXfer+0x29a>
 8007730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007734:	2b3e      	cmp	r3, #62	; 0x3e
 8007736:	d819      	bhi.n	800776c <USB_EPStartXfer+0x210>
 8007738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800773c:	085b      	lsrs	r3, r3, #1
 800773e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d004      	beq.n	8007758 <USB_EPStartXfer+0x1fc>
 800774e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007752:	3301      	adds	r3, #1
 8007754:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007758:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800775c:	b29b      	uxth	r3, r3
 800775e:	029b      	lsls	r3, r3, #10
 8007760:	b29a      	uxth	r2, r3
 8007762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	801a      	strh	r2, [r3, #0]
 800776a:	e044      	b.n	80077f6 <USB_EPStartXfer+0x29a>
 800776c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007770:	095b      	lsrs	r3, r3, #5
 8007772:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777a:	f003 031f 	and.w	r3, r3, #31
 800777e:	2b00      	cmp	r3, #0
 8007780:	d104      	bne.n	800778c <USB_EPStartXfer+0x230>
 8007782:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007786:	3b01      	subs	r3, #1
 8007788:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800778c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007790:	b29b      	uxth	r3, r3
 8007792:	029b      	lsls	r3, r3, #10
 8007794:	b29b      	uxth	r3, r3
 8007796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800779a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800779e:	b29a      	uxth	r2, r3
 80077a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	e025      	b.n	80077f6 <USB_EPStartXfer+0x29a>
 80077aa:	463b      	mov	r3, r7
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d120      	bne.n	80077f6 <USB_EPStartXfer+0x29a>
 80077b4:	1d3b      	adds	r3, r7, #4
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077bc:	b29b      	uxth	r3, r3
 80077be:	4619      	mov	r1, r3
 80077c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80077c8:	6812      	ldr	r2, [r2, #0]
 80077ca:	440a      	add	r2, r1
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	463b      	mov	r3, r7
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	011a      	lsls	r2, r3, #4
 80077d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4413      	add	r3, r2
 80077de:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80077e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80077f6:	463b      	mov	r3, r7
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	895b      	ldrh	r3, [r3, #10]
 80077fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007800:	463b      	mov	r3, r7
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6959      	ldr	r1, [r3, #20]
 8007806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800780a:	b29b      	uxth	r3, r3
 800780c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007810:	1d38      	adds	r0, r7, #4
 8007812:	6800      	ldr	r0, [r0, #0]
 8007814:	f001 fad7 	bl	8008dc6 <USB_WritePMA>
            ep->xfer_buff += len;
 8007818:	463b      	mov	r3, r7
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695a      	ldr	r2, [r3, #20]
 800781e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007822:	441a      	add	r2, r3
 8007824:	463b      	mov	r3, r7
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800782a:	463b      	mov	r3, r7
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6a1a      	ldr	r2, [r3, #32]
 8007830:	463b      	mov	r3, r7
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	429a      	cmp	r2, r3
 8007838:	d909      	bls.n	800784e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800783a:	463b      	mov	r3, r7
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6a1a      	ldr	r2, [r3, #32]
 8007840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007844:	1ad2      	subs	r2, r2, r3
 8007846:	463b      	mov	r3, r7
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	621a      	str	r2, [r3, #32]
 800784c:	e008      	b.n	8007860 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800784e:	463b      	mov	r3, r7
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6a1b      	ldr	r3, [r3, #32]
 8007854:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007858:	463b      	mov	r3, r7
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2200      	movs	r2, #0
 800785e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007860:	463b      	mov	r3, r7
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	785b      	ldrb	r3, [r3, #1]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d17a      	bne.n	8007960 <USB_EPStartXfer+0x404>
 800786a:	f107 0318 	add.w	r3, r7, #24
 800786e:	1d3a      	adds	r2, r7, #4
 8007870:	6812      	ldr	r2, [r2, #0]
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	1d3b      	adds	r3, r7, #4
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800787c:	b29b      	uxth	r3, r3
 800787e:	4619      	mov	r1, r3
 8007880:	f107 0318 	add.w	r3, r7, #24
 8007884:	f107 0218 	add.w	r2, r7, #24
 8007888:	6812      	ldr	r2, [r2, #0]
 800788a:	440a      	add	r2, r1
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	463b      	mov	r3, r7
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	011a      	lsls	r2, r3, #4
 8007896:	f107 0318 	add.w	r3, r7, #24
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4413      	add	r3, r2
 800789e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80078a2:	f107 0314 	add.w	r3, r7, #20
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d11a      	bne.n	80078e6 <USB_EPStartXfer+0x38a>
 80078b0:	f107 0314 	add.w	r3, r7, #20
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078be:	b29a      	uxth	r2, r3
 80078c0:	f107 0314 	add.w	r3, r7, #20
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	801a      	strh	r2, [r3, #0]
 80078c8:	f107 0314 	add.w	r3, r7, #20
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078da:	b29a      	uxth	r2, r3
 80078dc:	f107 0314 	add.w	r3, r7, #20
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	e067      	b.n	80079b6 <USB_EPStartXfer+0x45a>
 80078e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ea:	2b3e      	cmp	r3, #62	; 0x3e
 80078ec:	d819      	bhi.n	8007922 <USB_EPStartXfer+0x3c6>
 80078ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f2:	085b      	lsrs	r3, r3, #1
 80078f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80078f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	d004      	beq.n	800790e <USB_EPStartXfer+0x3b2>
 8007904:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007908:	3301      	adds	r3, #1
 800790a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800790e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007912:	b29b      	uxth	r3, r3
 8007914:	029b      	lsls	r3, r3, #10
 8007916:	b29a      	uxth	r2, r3
 8007918:	f107 0314 	add.w	r3, r7, #20
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	801a      	strh	r2, [r3, #0]
 8007920:	e049      	b.n	80079b6 <USB_EPStartXfer+0x45a>
 8007922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007926:	095b      	lsrs	r3, r3, #5
 8007928:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800792c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	2b00      	cmp	r3, #0
 8007936:	d104      	bne.n	8007942 <USB_EPStartXfer+0x3e6>
 8007938:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800793c:	3b01      	subs	r3, #1
 800793e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007942:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007946:	b29b      	uxth	r3, r3
 8007948:	029b      	lsls	r3, r3, #10
 800794a:	b29b      	uxth	r3, r3
 800794c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007954:	b29a      	uxth	r2, r3
 8007956:	f107 0314 	add.w	r3, r7, #20
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	801a      	strh	r2, [r3, #0]
 800795e:	e02a      	b.n	80079b6 <USB_EPStartXfer+0x45a>
 8007960:	463b      	mov	r3, r7
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	785b      	ldrb	r3, [r3, #1]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d125      	bne.n	80079b6 <USB_EPStartXfer+0x45a>
 800796a:	f107 0320 	add.w	r3, r7, #32
 800796e:	1d3a      	adds	r2, r7, #4
 8007970:	6812      	ldr	r2, [r2, #0]
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	1d3b      	adds	r3, r7, #4
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800797c:	b29b      	uxth	r3, r3
 800797e:	4619      	mov	r1, r3
 8007980:	f107 0320 	add.w	r3, r7, #32
 8007984:	f107 0220 	add.w	r2, r7, #32
 8007988:	6812      	ldr	r2, [r2, #0]
 800798a:	440a      	add	r2, r1
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	463b      	mov	r3, r7
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	011a      	lsls	r2, r3, #4
 8007996:	f107 0320 	add.w	r3, r7, #32
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4413      	add	r3, r2
 800799e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80079a2:	f107 031c 	add.w	r3, r7, #28
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	f107 031c 	add.w	r3, r7, #28
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80079b6:	463b      	mov	r3, r7
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	891b      	ldrh	r3, [r3, #8]
 80079bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079c0:	463b      	mov	r3, r7
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6959      	ldr	r1, [r3, #20]
 80079c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80079d0:	1d38      	adds	r0, r7, #4
 80079d2:	6800      	ldr	r0, [r0, #0]
 80079d4:	f001 f9f7 	bl	8008dc6 <USB_WritePMA>
 80079d8:	f000 bcc6 	b.w	8008368 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079dc:	463b      	mov	r3, r7
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	785b      	ldrb	r3, [r3, #1]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d164      	bne.n	8007ab0 <USB_EPStartXfer+0x554>
 80079e6:	1d3b      	adds	r3, r7, #4
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80079ec:	1d3b      	adds	r3, r7, #4
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	461a      	mov	r2, r3
 80079f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079fa:	4413      	add	r3, r2
 80079fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80079fe:	463b      	mov	r3, r7
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	011a      	lsls	r2, r3, #4
 8007a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a08:	4413      	add	r3, r2
 8007a0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d112      	bne.n	8007a3e <USB_EPStartXfer+0x4e2>
 8007a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a26:	801a      	strh	r2, [r3, #0]
 8007a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a3a:	801a      	strh	r2, [r3, #0]
 8007a3c:	e057      	b.n	8007aee <USB_EPStartXfer+0x592>
 8007a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a42:	2b3e      	cmp	r3, #62	; 0x3e
 8007a44:	d817      	bhi.n	8007a76 <USB_EPStartXfer+0x51a>
 8007a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a4a:	085b      	lsrs	r3, r3, #1
 8007a4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d004      	beq.n	8007a66 <USB_EPStartXfer+0x50a>
 8007a5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a60:	3301      	adds	r3, #1
 8007a62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	029b      	lsls	r3, r3, #10
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a72:	801a      	strh	r2, [r3, #0]
 8007a74:	e03b      	b.n	8007aee <USB_EPStartXfer+0x592>
 8007a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a7a:	095b      	lsrs	r3, r3, #5
 8007a7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a84:	f003 031f 	and.w	r3, r3, #31
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d104      	bne.n	8007a96 <USB_EPStartXfer+0x53a>
 8007a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a90:	3b01      	subs	r3, #1
 8007a92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a96:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	029b      	lsls	r3, r3, #10
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aac:	801a      	strh	r2, [r3, #0]
 8007aae:	e01e      	b.n	8007aee <USB_EPStartXfer+0x592>
 8007ab0:	463b      	mov	r3, r7
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	785b      	ldrb	r3, [r3, #1]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d119      	bne.n	8007aee <USB_EPStartXfer+0x592>
 8007aba:	1d3b      	adds	r3, r7, #4
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	653b      	str	r3, [r7, #80]	; 0x50
 8007ac0:	1d3b      	adds	r3, r7, #4
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	461a      	mov	r2, r3
 8007acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ace:	4413      	add	r3, r2
 8007ad0:	653b      	str	r3, [r7, #80]	; 0x50
 8007ad2:	463b      	mov	r3, r7
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	011a      	lsls	r2, r3, #4
 8007ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007adc:	4413      	add	r3, r2
 8007ade:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007aee:	463b      	mov	r3, r7
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	891b      	ldrh	r3, [r3, #8]
 8007af4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007af8:	463b      	mov	r3, r7
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6959      	ldr	r1, [r3, #20]
 8007afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b08:	1d38      	adds	r0, r7, #4
 8007b0a:	6800      	ldr	r0, [r0, #0]
 8007b0c:	f001 f95b 	bl	8008dc6 <USB_WritePMA>
            ep->xfer_buff += len;
 8007b10:	463b      	mov	r3, r7
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	695a      	ldr	r2, [r3, #20]
 8007b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b1a:	441a      	add	r2, r3
 8007b1c:	463b      	mov	r3, r7
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007b22:	463b      	mov	r3, r7
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6a1a      	ldr	r2, [r3, #32]
 8007b28:	463b      	mov	r3, r7
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d909      	bls.n	8007b46 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8007b32:	463b      	mov	r3, r7
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6a1a      	ldr	r2, [r3, #32]
 8007b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b3c:	1ad2      	subs	r2, r2, r3
 8007b3e:	463b      	mov	r3, r7
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	621a      	str	r2, [r3, #32]
 8007b44:	e008      	b.n	8007b58 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8007b46:	463b      	mov	r3, r7
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007b50:	463b      	mov	r3, r7
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2200      	movs	r2, #0
 8007b56:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b58:	1d3b      	adds	r3, r7, #4
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b5e:	463b      	mov	r3, r7
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	785b      	ldrb	r3, [r3, #1]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d164      	bne.n	8007c32 <USB_EPStartXfer+0x6d6>
 8007b68:	1d3b      	adds	r3, r7, #4
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b6e:	1d3b      	adds	r3, r7, #4
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	461a      	mov	r2, r3
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7c:	4413      	add	r3, r2
 8007b7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b80:	463b      	mov	r3, r7
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	011a      	lsls	r2, r3, #4
 8007b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
 8007b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d112      	bne.n	8007bc0 <USB_EPStartXfer+0x664>
 8007b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba8:	801a      	strh	r2, [r3, #0]
 8007baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bbc:	801a      	strh	r2, [r3, #0]
 8007bbe:	e054      	b.n	8007c6a <USB_EPStartXfer+0x70e>
 8007bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc4:	2b3e      	cmp	r3, #62	; 0x3e
 8007bc6:	d817      	bhi.n	8007bf8 <USB_EPStartXfer+0x69c>
 8007bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bcc:	085b      	lsrs	r3, r3, #1
 8007bce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d004      	beq.n	8007be8 <USB_EPStartXfer+0x68c>
 8007bde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007be2:	3301      	adds	r3, #1
 8007be4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007be8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	029b      	lsls	r3, r3, #10
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf4:	801a      	strh	r2, [r3, #0]
 8007bf6:	e038      	b.n	8007c6a <USB_EPStartXfer+0x70e>
 8007bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bfc:	095b      	lsrs	r3, r3, #5
 8007bfe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c06:	f003 031f 	and.w	r3, r3, #31
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d104      	bne.n	8007c18 <USB_EPStartXfer+0x6bc>
 8007c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007c12:	3b01      	subs	r3, #1
 8007c14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007c18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	029b      	lsls	r3, r3, #10
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2e:	801a      	strh	r2, [r3, #0]
 8007c30:	e01b      	b.n	8007c6a <USB_EPStartXfer+0x70e>
 8007c32:	463b      	mov	r3, r7
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	785b      	ldrb	r3, [r3, #1]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d116      	bne.n	8007c6a <USB_EPStartXfer+0x70e>
 8007c3c:	1d3b      	adds	r3, r7, #4
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	461a      	mov	r2, r3
 8007c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c4a:	4413      	add	r3, r2
 8007c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c4e:	463b      	mov	r3, r7
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	011a      	lsls	r2, r3, #4
 8007c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c58:	4413      	add	r3, r2
 8007c5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c6a:	463b      	mov	r3, r7
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	895b      	ldrh	r3, [r3, #10]
 8007c70:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c74:	463b      	mov	r3, r7
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6959      	ldr	r1, [r3, #20]
 8007c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c84:	1d38      	adds	r0, r7, #4
 8007c86:	6800      	ldr	r0, [r0, #0]
 8007c88:	f001 f89d 	bl	8008dc6 <USB_WritePMA>
 8007c8c:	e36c      	b.n	8008368 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007c8e:	463b      	mov	r3, r7
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007c98:	1d3b      	adds	r3, r7, #4
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	463b      	mov	r3, r7
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	881b      	ldrh	r3, [r3, #0]
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007cb6:	1d3b      	adds	r3, r7, #4
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	463b      	mov	r3, r7
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	441a      	add	r2, r3
 8007cc4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007cdc:	1d3b      	adds	r3, r7, #4
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ce2:	1d3b      	adds	r3, r7, #4
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	461a      	mov	r2, r3
 8007cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cf0:	4413      	add	r3, r2
 8007cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	011a      	lsls	r2, r3, #4
 8007cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cfe:	4413      	add	r3, r2
 8007d00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d04:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d10:	463b      	mov	r3, r7
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	891b      	ldrh	r3, [r3, #8]
 8007d16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6959      	ldr	r1, [r3, #20]
 8007d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d2a:	1d38      	adds	r0, r7, #4
 8007d2c:	6800      	ldr	r0, [r0, #0]
 8007d2e:	f001 f84a 	bl	8008dc6 <USB_WritePMA>
 8007d32:	e319      	b.n	8008368 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007d34:	1d3b      	adds	r3, r7, #4
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	463b      	mov	r3, r7
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007d52:	1d3b      	adds	r3, r7, #4
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	463b      	mov	r3, r7
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	441a      	add	r2, r3
 8007d60:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d6c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007d78:	463b      	mov	r3, r7
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6a1a      	ldr	r2, [r3, #32]
 8007d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d82:	1ad2      	subs	r2, r2, r3
 8007d84:	463b      	mov	r3, r7
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d8a:	1d3b      	adds	r3, r7, #4
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	463b      	mov	r3, r7
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 8162 	beq.w	800806a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007da6:	1d3b      	adds	r3, r7, #4
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dae:	463b      	mov	r3, r7
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	785b      	ldrb	r3, [r3, #1]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d164      	bne.n	8007e82 <USB_EPStartXfer+0x926>
 8007db8:	1d3b      	adds	r3, r7, #4
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dbe:	1d3b      	adds	r3, r7, #4
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dcc:	4413      	add	r3, r2
 8007dce:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dd0:	463b      	mov	r3, r7
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	011a      	lsls	r2, r3, #4
 8007dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dda:	4413      	add	r3, r2
 8007ddc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007de0:	677b      	str	r3, [r7, #116]	; 0x74
 8007de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d112      	bne.n	8007e10 <USB_EPStartXfer+0x8b4>
 8007dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007df8:	801a      	strh	r2, [r3, #0]
 8007dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e0c:	801a      	strh	r2, [r3, #0]
 8007e0e:	e057      	b.n	8007ec0 <USB_EPStartXfer+0x964>
 8007e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e14:	2b3e      	cmp	r3, #62	; 0x3e
 8007e16:	d817      	bhi.n	8007e48 <USB_EPStartXfer+0x8ec>
 8007e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e1c:	085b      	lsrs	r3, r3, #1
 8007e1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d004      	beq.n	8007e38 <USB_EPStartXfer+0x8dc>
 8007e2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e32:	3301      	adds	r3, #1
 8007e34:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007e38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	029b      	lsls	r3, r3, #10
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e44:	801a      	strh	r2, [r3, #0]
 8007e46:	e03b      	b.n	8007ec0 <USB_EPStartXfer+0x964>
 8007e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e4c:	095b      	lsrs	r3, r3, #5
 8007e4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e56:	f003 031f 	and.w	r3, r3, #31
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d104      	bne.n	8007e68 <USB_EPStartXfer+0x90c>
 8007e5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e62:	3b01      	subs	r3, #1
 8007e64:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007e68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	029b      	lsls	r3, r3, #10
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e7e:	801a      	strh	r2, [r3, #0]
 8007e80:	e01e      	b.n	8007ec0 <USB_EPStartXfer+0x964>
 8007e82:	463b      	mov	r3, r7
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	785b      	ldrb	r3, [r3, #1]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d119      	bne.n	8007ec0 <USB_EPStartXfer+0x964>
 8007e8c:	1d3b      	adds	r3, r7, #4
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	461a      	mov	r2, r3
 8007e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	011a      	lsls	r2, r3, #4
 8007eaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007eae:	4413      	add	r3, r2
 8007eb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007eb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007eb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ebe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007ec0:	463b      	mov	r3, r7
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	895b      	ldrh	r3, [r3, #10]
 8007ec6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007eca:	463b      	mov	r3, r7
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6959      	ldr	r1, [r3, #20]
 8007ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007eda:	1d38      	adds	r0, r7, #4
 8007edc:	6800      	ldr	r0, [r0, #0]
 8007ede:	f000 ff72 	bl	8008dc6 <USB_WritePMA>
          ep->xfer_buff += len;
 8007ee2:	463b      	mov	r3, r7
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	695a      	ldr	r2, [r3, #20]
 8007ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eec:	441a      	add	r2, r3
 8007eee:	463b      	mov	r3, r7
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007ef4:	463b      	mov	r3, r7
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6a1a      	ldr	r2, [r3, #32]
 8007efa:	463b      	mov	r3, r7
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d909      	bls.n	8007f18 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8007f04:	463b      	mov	r3, r7
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6a1a      	ldr	r2, [r3, #32]
 8007f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f0e:	1ad2      	subs	r2, r2, r3
 8007f10:	463b      	mov	r3, r7
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	621a      	str	r2, [r3, #32]
 8007f16:	e008      	b.n	8007f2a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007f18:	463b      	mov	r3, r7
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007f22:	463b      	mov	r3, r7
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2200      	movs	r2, #0
 8007f28:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 821a 	beq.w	8008368 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f34:	463b      	mov	r3, r7
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	785b      	ldrb	r3, [r3, #1]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d164      	bne.n	8008008 <USB_EPStartXfer+0xaac>
 8007f3e:	1d3b      	adds	r3, r7, #4
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f44:	1d3b      	adds	r3, r7, #4
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	461a      	mov	r2, r3
 8007f50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f52:	4413      	add	r3, r2
 8007f54:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f56:	463b      	mov	r3, r7
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	011a      	lsls	r2, r3, #4
 8007f5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f60:	4413      	add	r3, r2
 8007f62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f66:	667b      	str	r3, [r7, #100]	; 0x64
 8007f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d112      	bne.n	8007f96 <USB_EPStartXfer+0xa3a>
 8007f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f7e:	801a      	strh	r2, [r3, #0]
 8007f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f92:	801a      	strh	r2, [r3, #0]
 8007f94:	e057      	b.n	8008046 <USB_EPStartXfer+0xaea>
 8007f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f9a:	2b3e      	cmp	r3, #62	; 0x3e
 8007f9c:	d817      	bhi.n	8007fce <USB_EPStartXfer+0xa72>
 8007f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fa2:	085b      	lsrs	r3, r3, #1
 8007fa4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d004      	beq.n	8007fbe <USB_EPStartXfer+0xa62>
 8007fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb8:	3301      	adds	r3, #1
 8007fba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	029b      	lsls	r3, r3, #10
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fca:	801a      	strh	r2, [r3, #0]
 8007fcc:	e03b      	b.n	8008046 <USB_EPStartXfer+0xaea>
 8007fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fdc:	f003 031f 	and.w	r3, r3, #31
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <USB_EPStartXfer+0xa92>
 8007fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	029b      	lsls	r3, r3, #10
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008000:	b29a      	uxth	r2, r3
 8008002:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	e01e      	b.n	8008046 <USB_EPStartXfer+0xaea>
 8008008:	463b      	mov	r3, r7
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	785b      	ldrb	r3, [r3, #1]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d119      	bne.n	8008046 <USB_EPStartXfer+0xaea>
 8008012:	1d3b      	adds	r3, r7, #4
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	673b      	str	r3, [r7, #112]	; 0x70
 8008018:	1d3b      	adds	r3, r7, #4
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008020:	b29b      	uxth	r3, r3
 8008022:	461a      	mov	r2, r3
 8008024:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008026:	4413      	add	r3, r2
 8008028:	673b      	str	r3, [r7, #112]	; 0x70
 800802a:	463b      	mov	r3, r7
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	011a      	lsls	r2, r3, #4
 8008032:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008034:	4413      	add	r3, r2
 8008036:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800803a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800803c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008040:	b29a      	uxth	r2, r3
 8008042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008044:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008046:	463b      	mov	r3, r7
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	891b      	ldrh	r3, [r3, #8]
 800804c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008050:	463b      	mov	r3, r7
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6959      	ldr	r1, [r3, #20]
 8008056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800805a:	b29b      	uxth	r3, r3
 800805c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008060:	1d38      	adds	r0, r7, #4
 8008062:	6800      	ldr	r0, [r0, #0]
 8008064:	f000 feaf 	bl	8008dc6 <USB_WritePMA>
 8008068:	e17e      	b.n	8008368 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800806a:	463b      	mov	r3, r7
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	785b      	ldrb	r3, [r3, #1]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d16f      	bne.n	8008154 <USB_EPStartXfer+0xbf8>
 8008074:	1d3b      	adds	r3, r7, #4
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800807c:	1d3b      	adds	r3, r7, #4
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008084:	b29b      	uxth	r3, r3
 8008086:	461a      	mov	r2, r3
 8008088:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800808c:	4413      	add	r3, r2
 800808e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008092:	463b      	mov	r3, r7
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	011a      	lsls	r2, r3, #4
 800809a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800809e:	4413      	add	r3, r2
 80080a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d116      	bne.n	80080de <USB_EPStartXfer+0xb82>
 80080b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080bc:	b29a      	uxth	r2, r3
 80080be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080c2:	801a      	strh	r2, [r3, #0]
 80080c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080da:	801a      	strh	r2, [r3, #0]
 80080dc:	e05f      	b.n	800819e <USB_EPStartXfer+0xc42>
 80080de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e2:	2b3e      	cmp	r3, #62	; 0x3e
 80080e4:	d818      	bhi.n	8008118 <USB_EPStartXfer+0xbbc>
 80080e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ea:	085b      	lsrs	r3, r3, #1
 80080ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80080f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d004      	beq.n	8008106 <USB_EPStartXfer+0xbaa>
 80080fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008100:	3301      	adds	r3, #1
 8008102:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008106:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800810a:	b29b      	uxth	r3, r3
 800810c:	029b      	lsls	r3, r3, #10
 800810e:	b29a      	uxth	r2, r3
 8008110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008114:	801a      	strh	r2, [r3, #0]
 8008116:	e042      	b.n	800819e <USB_EPStartXfer+0xc42>
 8008118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800811c:	095b      	lsrs	r3, r3, #5
 800811e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008126:	f003 031f 	and.w	r3, r3, #31
 800812a:	2b00      	cmp	r3, #0
 800812c:	d104      	bne.n	8008138 <USB_EPStartXfer+0xbdc>
 800812e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008132:	3b01      	subs	r3, #1
 8008134:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008138:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800813c:	b29b      	uxth	r3, r3
 800813e:	029b      	lsls	r3, r3, #10
 8008140:	b29b      	uxth	r3, r3
 8008142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800814a:	b29a      	uxth	r2, r3
 800814c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008150:	801a      	strh	r2, [r3, #0]
 8008152:	e024      	b.n	800819e <USB_EPStartXfer+0xc42>
 8008154:	463b      	mov	r3, r7
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d11f      	bne.n	800819e <USB_EPStartXfer+0xc42>
 800815e:	1d3b      	adds	r3, r7, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008166:	1d3b      	adds	r3, r7, #4
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800816e:	b29b      	uxth	r3, r3
 8008170:	461a      	mov	r2, r3
 8008172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008176:	4413      	add	r3, r2
 8008178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800817c:	463b      	mov	r3, r7
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	011a      	lsls	r2, r3, #4
 8008184:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008188:	4413      	add	r3, r2
 800818a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800818e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008196:	b29a      	uxth	r2, r3
 8008198:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800819c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800819e:	463b      	mov	r3, r7
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	891b      	ldrh	r3, [r3, #8]
 80081a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081a8:	463b      	mov	r3, r7
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6959      	ldr	r1, [r3, #20]
 80081ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80081b8:	1d38      	adds	r0, r7, #4
 80081ba:	6800      	ldr	r0, [r0, #0]
 80081bc:	f000 fe03 	bl	8008dc6 <USB_WritePMA>
          ep->xfer_buff += len;
 80081c0:	463b      	mov	r3, r7
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	695a      	ldr	r2, [r3, #20]
 80081c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ca:	441a      	add	r2, r3
 80081cc:	463b      	mov	r3, r7
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80081d2:	463b      	mov	r3, r7
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6a1a      	ldr	r2, [r3, #32]
 80081d8:	463b      	mov	r3, r7
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d909      	bls.n	80081f6 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80081e2:	463b      	mov	r3, r7
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6a1a      	ldr	r2, [r3, #32]
 80081e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ec:	1ad2      	subs	r2, r2, r3
 80081ee:	463b      	mov	r3, r7
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	621a      	str	r2, [r3, #32]
 80081f4:	e008      	b.n	8008208 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80081f6:	463b      	mov	r3, r7
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008200:	463b      	mov	r3, r7
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2200      	movs	r2, #0
 8008206:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 80ab 	beq.w	8008368 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008212:	1d3b      	adds	r3, r7, #4
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800821a:	463b      	mov	r3, r7
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	785b      	ldrb	r3, [r3, #1]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d16f      	bne.n	8008304 <USB_EPStartXfer+0xda8>
 8008224:	1d3b      	adds	r3, r7, #4
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800822c:	1d3b      	adds	r3, r7, #4
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008234:	b29b      	uxth	r3, r3
 8008236:	461a      	mov	r2, r3
 8008238:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800823c:	4413      	add	r3, r2
 800823e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008242:	463b      	mov	r3, r7
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	011a      	lsls	r2, r3, #4
 800824a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800824e:	4413      	add	r3, r2
 8008250:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800825c:	2b00      	cmp	r3, #0
 800825e:	d116      	bne.n	800828e <USB_EPStartXfer+0xd32>
 8008260:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	b29b      	uxth	r3, r3
 8008268:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800826c:	b29a      	uxth	r2, r3
 800826e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008272:	801a      	strh	r2, [r3, #0]
 8008274:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	b29b      	uxth	r3, r3
 800827c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008284:	b29a      	uxth	r2, r3
 8008286:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800828a:	801a      	strh	r2, [r3, #0]
 800828c:	e05b      	b.n	8008346 <USB_EPStartXfer+0xdea>
 800828e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008292:	2b3e      	cmp	r3, #62	; 0x3e
 8008294:	d818      	bhi.n	80082c8 <USB_EPStartXfer+0xd6c>
 8008296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800829a:	085b      	lsrs	r3, r3, #1
 800829c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80082a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d004      	beq.n	80082b6 <USB_EPStartXfer+0xd5a>
 80082ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082b0:	3301      	adds	r3, #1
 80082b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80082b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	029b      	lsls	r3, r3, #10
 80082be:	b29a      	uxth	r2, r3
 80082c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082c4:	801a      	strh	r2, [r3, #0]
 80082c6:	e03e      	b.n	8008346 <USB_EPStartXfer+0xdea>
 80082c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082cc:	095b      	lsrs	r3, r3, #5
 80082ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80082d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082d6:	f003 031f 	and.w	r3, r3, #31
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d104      	bne.n	80082e8 <USB_EPStartXfer+0xd8c>
 80082de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082e2:	3b01      	subs	r3, #1
 80082e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80082e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	029b      	lsls	r3, r3, #10
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008300:	801a      	strh	r2, [r3, #0]
 8008302:	e020      	b.n	8008346 <USB_EPStartXfer+0xdea>
 8008304:	463b      	mov	r3, r7
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	785b      	ldrb	r3, [r3, #1]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d11b      	bne.n	8008346 <USB_EPStartXfer+0xdea>
 800830e:	1d3b      	adds	r3, r7, #4
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008316:	b29b      	uxth	r3, r3
 8008318:	461a      	mov	r2, r3
 800831a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800831e:	4413      	add	r3, r2
 8008320:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008324:	463b      	mov	r3, r7
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	011a      	lsls	r2, r3, #4
 800832c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008330:	4413      	add	r3, r2
 8008332:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800833a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800833e:	b29a      	uxth	r2, r3
 8008340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008344:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008346:	463b      	mov	r3, r7
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	895b      	ldrh	r3, [r3, #10]
 800834c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008350:	463b      	mov	r3, r7
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6959      	ldr	r1, [r3, #20]
 8008356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800835a:	b29b      	uxth	r3, r3
 800835c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008360:	1d38      	adds	r0, r7, #4
 8008362:	6800      	ldr	r0, [r0, #0]
 8008364:	f000 fd2f 	bl	8008dc6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008368:	1d3b      	adds	r3, r7, #4
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	463b      	mov	r3, r7
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	b29b      	uxth	r3, r3
 800837a:	f107 020a 	add.w	r2, r7, #10
 800837e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008386:	8013      	strh	r3, [r2, #0]
 8008388:	f107 030a 	add.w	r3, r7, #10
 800838c:	f107 020a 	add.w	r2, r7, #10
 8008390:	8812      	ldrh	r2, [r2, #0]
 8008392:	f082 0210 	eor.w	r2, r2, #16
 8008396:	801a      	strh	r2, [r3, #0]
 8008398:	f107 030a 	add.w	r3, r7, #10
 800839c:	f107 020a 	add.w	r2, r7, #10
 80083a0:	8812      	ldrh	r2, [r2, #0]
 80083a2:	f082 0220 	eor.w	r2, r2, #32
 80083a6:	801a      	strh	r2, [r3, #0]
 80083a8:	1d3b      	adds	r3, r7, #4
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	463b      	mov	r3, r7
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	441a      	add	r2, r3
 80083b6:	f107 030a 	add.w	r3, r7, #10
 80083ba:	881b      	ldrh	r3, [r3, #0]
 80083bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	8013      	strh	r3, [r2, #0]
 80083d0:	e3b5      	b.n	8008b3e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80083d2:	463b      	mov	r3, r7
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	7b1b      	ldrb	r3, [r3, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f040 8090 	bne.w	80084fe <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80083de:	463b      	mov	r3, r7
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	699a      	ldr	r2, [r3, #24]
 80083e4:	463b      	mov	r3, r7
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d90e      	bls.n	800840c <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80083ee:	463b      	mov	r3, r7
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80083f8:	463b      	mov	r3, r7
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699a      	ldr	r2, [r3, #24]
 80083fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008402:	1ad2      	subs	r2, r2, r3
 8008404:	463b      	mov	r3, r7
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	619a      	str	r2, [r3, #24]
 800840a:	e008      	b.n	800841e <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800840c:	463b      	mov	r3, r7
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008416:	463b      	mov	r3, r7
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2200      	movs	r2, #0
 800841c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800841e:	1d3b      	adds	r3, r7, #4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008426:	1d3b      	adds	r3, r7, #4
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800842e:	b29b      	uxth	r3, r3
 8008430:	461a      	mov	r2, r3
 8008432:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008436:	4413      	add	r3, r2
 8008438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800843c:	463b      	mov	r3, r7
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	011a      	lsls	r2, r3, #4
 8008444:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008448:	4413      	add	r3, r2
 800844a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800844e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d116      	bne.n	8008488 <USB_EPStartXfer+0xf2c>
 800845a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008466:	b29a      	uxth	r2, r3
 8008468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800846c:	801a      	strh	r2, [r3, #0]
 800846e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	b29b      	uxth	r3, r3
 8008476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800847a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800847e:	b29a      	uxth	r2, r3
 8008480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008484:	801a      	strh	r2, [r3, #0]
 8008486:	e32c      	b.n	8008ae2 <USB_EPStartXfer+0x1586>
 8008488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800848c:	2b3e      	cmp	r3, #62	; 0x3e
 800848e:	d818      	bhi.n	80084c2 <USB_EPStartXfer+0xf66>
 8008490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008494:	085b      	lsrs	r3, r3, #1
 8008496:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800849a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d004      	beq.n	80084b0 <USB_EPStartXfer+0xf54>
 80084a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084aa:	3301      	adds	r3, #1
 80084ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	029b      	lsls	r3, r3, #10
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084be:	801a      	strh	r2, [r3, #0]
 80084c0:	e30f      	b.n	8008ae2 <USB_EPStartXfer+0x1586>
 80084c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084c6:	095b      	lsrs	r3, r3, #5
 80084c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084d0:	f003 031f 	and.w	r3, r3, #31
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d104      	bne.n	80084e2 <USB_EPStartXfer+0xf86>
 80084d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084dc:	3b01      	subs	r3, #1
 80084de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	029b      	lsls	r3, r3, #10
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084fa:	801a      	strh	r2, [r3, #0]
 80084fc:	e2f1      	b.n	8008ae2 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80084fe:	463b      	mov	r3, r7
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	78db      	ldrb	r3, [r3, #3]
 8008504:	2b02      	cmp	r3, #2
 8008506:	f040 818f 	bne.w	8008828 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800850a:	463b      	mov	r3, r7
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	785b      	ldrb	r3, [r3, #1]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d175      	bne.n	8008600 <USB_EPStartXfer+0x10a4>
 8008514:	1d3b      	adds	r3, r7, #4
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800851c:	1d3b      	adds	r3, r7, #4
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008524:	b29b      	uxth	r3, r3
 8008526:	461a      	mov	r2, r3
 8008528:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800852c:	4413      	add	r3, r2
 800852e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008532:	463b      	mov	r3, r7
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	011a      	lsls	r2, r3, #4
 800853a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800853e:	4413      	add	r3, r2
 8008540:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008544:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008548:	463b      	mov	r3, r7
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d116      	bne.n	8008580 <USB_EPStartXfer+0x1024>
 8008552:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	b29b      	uxth	r3, r3
 800855a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800855e:	b29a      	uxth	r2, r3
 8008560:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008564:	801a      	strh	r2, [r3, #0]
 8008566:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	b29b      	uxth	r3, r3
 800856e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008576:	b29a      	uxth	r2, r3
 8008578:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800857c:	801a      	strh	r2, [r3, #0]
 800857e:	e065      	b.n	800864c <USB_EPStartXfer+0x10f0>
 8008580:	463b      	mov	r3, r7
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	2b3e      	cmp	r3, #62	; 0x3e
 8008588:	d81a      	bhi.n	80085c0 <USB_EPStartXfer+0x1064>
 800858a:	463b      	mov	r3, r7
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	085b      	lsrs	r3, r3, #1
 8008592:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008596:	463b      	mov	r3, r7
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d004      	beq.n	80085ae <USB_EPStartXfer+0x1052>
 80085a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a8:	3301      	adds	r3, #1
 80085aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	029b      	lsls	r3, r3, #10
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085bc:	801a      	strh	r2, [r3, #0]
 80085be:	e045      	b.n	800864c <USB_EPStartXfer+0x10f0>
 80085c0:	463b      	mov	r3, r7
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	095b      	lsrs	r3, r3, #5
 80085c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085cc:	463b      	mov	r3, r7
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	f003 031f 	and.w	r3, r3, #31
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d104      	bne.n	80085e4 <USB_EPStartXfer+0x1088>
 80085da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085de:	3b01      	subs	r3, #1
 80085e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	029b      	lsls	r3, r3, #10
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085fc:	801a      	strh	r2, [r3, #0]
 80085fe:	e025      	b.n	800864c <USB_EPStartXfer+0x10f0>
 8008600:	463b      	mov	r3, r7
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	785b      	ldrb	r3, [r3, #1]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d120      	bne.n	800864c <USB_EPStartXfer+0x10f0>
 800860a:	1d3b      	adds	r3, r7, #4
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008612:	1d3b      	adds	r3, r7, #4
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800861a:	b29b      	uxth	r3, r3
 800861c:	461a      	mov	r2, r3
 800861e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008622:	4413      	add	r3, r2
 8008624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008628:	463b      	mov	r3, r7
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	011a      	lsls	r2, r3, #4
 8008630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008634:	4413      	add	r3, r2
 8008636:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800863a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800863e:	463b      	mov	r3, r7
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	b29a      	uxth	r2, r3
 8008646:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800864a:	801a      	strh	r2, [r3, #0]
 800864c:	1d3b      	adds	r3, r7, #4
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008654:	463b      	mov	r3, r7
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	785b      	ldrb	r3, [r3, #1]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d175      	bne.n	800874a <USB_EPStartXfer+0x11ee>
 800865e:	1d3b      	adds	r3, r7, #4
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008666:	1d3b      	adds	r3, r7, #4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800866e:	b29b      	uxth	r3, r3
 8008670:	461a      	mov	r2, r3
 8008672:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008676:	4413      	add	r3, r2
 8008678:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800867c:	463b      	mov	r3, r7
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	011a      	lsls	r2, r3, #4
 8008684:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008688:	4413      	add	r3, r2
 800868a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800868e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008692:	463b      	mov	r3, r7
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d116      	bne.n	80086ca <USB_EPStartXfer+0x116e>
 800869c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086ae:	801a      	strh	r2, [r3, #0]
 80086b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086b4:	881b      	ldrh	r3, [r3, #0]
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086c6:	801a      	strh	r2, [r3, #0]
 80086c8:	e061      	b.n	800878e <USB_EPStartXfer+0x1232>
 80086ca:	463b      	mov	r3, r7
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b3e      	cmp	r3, #62	; 0x3e
 80086d2:	d81a      	bhi.n	800870a <USB_EPStartXfer+0x11ae>
 80086d4:	463b      	mov	r3, r7
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	085b      	lsrs	r3, r3, #1
 80086dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086e0:	463b      	mov	r3, r7
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d004      	beq.n	80086f8 <USB_EPStartXfer+0x119c>
 80086ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086f2:	3301      	adds	r3, #1
 80086f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	029b      	lsls	r3, r3, #10
 8008700:	b29a      	uxth	r2, r3
 8008702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008706:	801a      	strh	r2, [r3, #0]
 8008708:	e041      	b.n	800878e <USB_EPStartXfer+0x1232>
 800870a:	463b      	mov	r3, r7
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	095b      	lsrs	r3, r3, #5
 8008712:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008716:	463b      	mov	r3, r7
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	f003 031f 	and.w	r3, r3, #31
 8008720:	2b00      	cmp	r3, #0
 8008722:	d104      	bne.n	800872e <USB_EPStartXfer+0x11d2>
 8008724:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008728:	3b01      	subs	r3, #1
 800872a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800872e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008732:	b29b      	uxth	r3, r3
 8008734:	029b      	lsls	r3, r3, #10
 8008736:	b29b      	uxth	r3, r3
 8008738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800873c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008740:	b29a      	uxth	r2, r3
 8008742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008746:	801a      	strh	r2, [r3, #0]
 8008748:	e021      	b.n	800878e <USB_EPStartXfer+0x1232>
 800874a:	463b      	mov	r3, r7
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	785b      	ldrb	r3, [r3, #1]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d11c      	bne.n	800878e <USB_EPStartXfer+0x1232>
 8008754:	1d3b      	adds	r3, r7, #4
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800875c:	b29b      	uxth	r3, r3
 800875e:	461a      	mov	r2, r3
 8008760:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008764:	4413      	add	r3, r2
 8008766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800876a:	463b      	mov	r3, r7
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	011a      	lsls	r2, r3, #4
 8008772:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008776:	4413      	add	r3, r2
 8008778:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800877c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008780:	463b      	mov	r3, r7
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	b29a      	uxth	r2, r3
 8008788:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800878c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800878e:	463b      	mov	r3, r7
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 81a4 	beq.w	8008ae2 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800879a:	1d3b      	adds	r3, r7, #4
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	463b      	mov	r3, r7
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	881b      	ldrh	r3, [r3, #0]
 80087aa:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087ae:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d005      	beq.n	80087c6 <USB_EPStartXfer+0x126a>
 80087ba:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10d      	bne.n	80087e2 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087c6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f040 8187 	bne.w	8008ae2 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f040 8180 	bne.w	8008ae2 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80087e2:	1d3b      	adds	r3, r7, #4
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	463b      	mov	r3, r7
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087fc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008800:	1d3b      	adds	r3, r7, #4
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	463b      	mov	r3, r7
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	441a      	add	r2, r3
 800880e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800881a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800881e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008822:	b29b      	uxth	r3, r3
 8008824:	8013      	strh	r3, [r2, #0]
 8008826:	e15c      	b.n	8008ae2 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008828:	463b      	mov	r3, r7
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	78db      	ldrb	r3, [r3, #3]
 800882e:	2b01      	cmp	r3, #1
 8008830:	f040 8155 	bne.w	8008ade <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008834:	463b      	mov	r3, r7
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	699a      	ldr	r2, [r3, #24]
 800883a:	463b      	mov	r3, r7
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	429a      	cmp	r2, r3
 8008842:	d90e      	bls.n	8008862 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8008844:	463b      	mov	r3, r7
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800884e:	463b      	mov	r3, r7
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	699a      	ldr	r2, [r3, #24]
 8008854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008858:	1ad2      	subs	r2, r2, r3
 800885a:	463b      	mov	r3, r7
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	619a      	str	r2, [r3, #24]
 8008860:	e008      	b.n	8008874 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8008862:	463b      	mov	r3, r7
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800886c:	463b      	mov	r3, r7
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2200      	movs	r2, #0
 8008872:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008874:	463b      	mov	r3, r7
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	785b      	ldrb	r3, [r3, #1]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d16f      	bne.n	800895e <USB_EPStartXfer+0x1402>
 800887e:	1d3b      	adds	r3, r7, #4
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008886:	1d3b      	adds	r3, r7, #4
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800888e:	b29b      	uxth	r3, r3
 8008890:	461a      	mov	r2, r3
 8008892:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008896:	4413      	add	r3, r2
 8008898:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800889c:	463b      	mov	r3, r7
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	011a      	lsls	r2, r3, #4
 80088a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088a8:	4413      	add	r3, r2
 80088aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d116      	bne.n	80088e8 <USB_EPStartXfer+0x138c>
 80088ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088cc:	801a      	strh	r2, [r3, #0]
 80088ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088de:	b29a      	uxth	r2, r3
 80088e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088e4:	801a      	strh	r2, [r3, #0]
 80088e6:	e05f      	b.n	80089a8 <USB_EPStartXfer+0x144c>
 80088e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ec:	2b3e      	cmp	r3, #62	; 0x3e
 80088ee:	d818      	bhi.n	8008922 <USB_EPStartXfer+0x13c6>
 80088f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f4:	085b      	lsrs	r3, r3, #1
 80088f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	2b00      	cmp	r3, #0
 8008904:	d004      	beq.n	8008910 <USB_EPStartXfer+0x13b4>
 8008906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800890a:	3301      	adds	r3, #1
 800890c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008914:	b29b      	uxth	r3, r3
 8008916:	029b      	lsls	r3, r3, #10
 8008918:	b29a      	uxth	r2, r3
 800891a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800891e:	801a      	strh	r2, [r3, #0]
 8008920:	e042      	b.n	80089a8 <USB_EPStartXfer+0x144c>
 8008922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008926:	095b      	lsrs	r3, r3, #5
 8008928:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800892c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008930:	f003 031f 	and.w	r3, r3, #31
 8008934:	2b00      	cmp	r3, #0
 8008936:	d104      	bne.n	8008942 <USB_EPStartXfer+0x13e6>
 8008938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800893c:	3b01      	subs	r3, #1
 800893e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008946:	b29b      	uxth	r3, r3
 8008948:	029b      	lsls	r3, r3, #10
 800894a:	b29b      	uxth	r3, r3
 800894c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008954:	b29a      	uxth	r2, r3
 8008956:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800895a:	801a      	strh	r2, [r3, #0]
 800895c:	e024      	b.n	80089a8 <USB_EPStartXfer+0x144c>
 800895e:	463b      	mov	r3, r7
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	785b      	ldrb	r3, [r3, #1]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d11f      	bne.n	80089a8 <USB_EPStartXfer+0x144c>
 8008968:	1d3b      	adds	r3, r7, #4
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008970:	1d3b      	adds	r3, r7, #4
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008978:	b29b      	uxth	r3, r3
 800897a:	461a      	mov	r2, r3
 800897c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008980:	4413      	add	r3, r2
 8008982:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008986:	463b      	mov	r3, r7
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	011a      	lsls	r2, r3, #4
 800898e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008992:	4413      	add	r3, r2
 8008994:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008998:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800899c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80089a6:	801a      	strh	r2, [r3, #0]
 80089a8:	1d3b      	adds	r3, r7, #4
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80089b0:	463b      	mov	r3, r7
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	785b      	ldrb	r3, [r3, #1]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d16f      	bne.n	8008a9a <USB_EPStartXfer+0x153e>
 80089ba:	1d3b      	adds	r3, r7, #4
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089c2:	1d3b      	adds	r3, r7, #4
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	461a      	mov	r2, r3
 80089ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089d2:	4413      	add	r3, r2
 80089d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089d8:	463b      	mov	r3, r7
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	011a      	lsls	r2, r3, #4
 80089e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089e4:	4413      	add	r3, r2
 80089e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d116      	bne.n	8008a24 <USB_EPStartXfer+0x14c8>
 80089f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089fa:	881b      	ldrh	r3, [r3, #0]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a08:	801a      	strh	r2, [r3, #0]
 8008a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a20:	801a      	strh	r2, [r3, #0]
 8008a22:	e05e      	b.n	8008ae2 <USB_EPStartXfer+0x1586>
 8008a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a28:	2b3e      	cmp	r3, #62	; 0x3e
 8008a2a:	d818      	bhi.n	8008a5e <USB_EPStartXfer+0x1502>
 8008a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a30:	085b      	lsrs	r3, r3, #1
 8008a32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d004      	beq.n	8008a4c <USB_EPStartXfer+0x14f0>
 8008a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a46:	3301      	adds	r3, #1
 8008a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	029b      	lsls	r3, r3, #10
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a5a:	801a      	strh	r2, [r3, #0]
 8008a5c:	e041      	b.n	8008ae2 <USB_EPStartXfer+0x1586>
 8008a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a62:	095b      	lsrs	r3, r3, #5
 8008a64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a6c:	f003 031f 	and.w	r3, r3, #31
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d104      	bne.n	8008a7e <USB_EPStartXfer+0x1522>
 8008a74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	029b      	lsls	r3, r3, #10
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a96:	801a      	strh	r2, [r3, #0]
 8008a98:	e023      	b.n	8008ae2 <USB_EPStartXfer+0x1586>
 8008a9a:	463b      	mov	r3, r7
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	785b      	ldrb	r3, [r3, #1]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d11e      	bne.n	8008ae2 <USB_EPStartXfer+0x1586>
 8008aa4:	1d3b      	adds	r3, r7, #4
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008aba:	463b      	mov	r3, r7
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	011a      	lsls	r2, r3, #4
 8008ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ada:	801a      	strh	r2, [r3, #0]
 8008adc:	e001      	b.n	8008ae2 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e02e      	b.n	8008b40 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ae2:	1d3b      	adds	r3, r7, #4
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b00:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b08:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b0c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b14:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b18:	1d3b      	adds	r3, r7, #4
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	463b      	mov	r3, r7
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	441a      	add	r2, r3
 8008b26:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b085      	sub	sp, #20
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	785b      	ldrb	r3, [r3, #1]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d020      	beq.n	8008b9e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b72:	81bb      	strh	r3, [r7, #12]
 8008b74:	89bb      	ldrh	r3, [r7, #12]
 8008b76:	f083 0310 	eor.w	r3, r3, #16
 8008b7a:	81bb      	strh	r3, [r7, #12]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	441a      	add	r2, r3
 8008b86:	89bb      	ldrh	r3, [r7, #12]
 8008b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	8013      	strh	r3, [r2, #0]
 8008b9c:	e01f      	b.n	8008bde <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb4:	81fb      	strh	r3, [r7, #14]
 8008bb6:	89fb      	ldrh	r3, [r7, #14]
 8008bb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bbc:	81fb      	strh	r3, [r7, #14]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	441a      	add	r2, r3
 8008bc8:	89fb      	ldrh	r3, [r7, #14]
 8008bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bc80      	pop	{r7}
 8008be8:	4770      	bx	lr

08008bea <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b087      	sub	sp, #28
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	7b1b      	ldrb	r3, [r3, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f040 809d 	bne.w	8008d38 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	785b      	ldrb	r3, [r3, #1]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d04c      	beq.n	8008ca0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	823b      	strh	r3, [r7, #16]
 8008c14:	8a3b      	ldrh	r3, [r7, #16]
 8008c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d01b      	beq.n	8008c56 <USB_EPClearStall+0x6c>
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c34:	81fb      	strh	r3, [r7, #14]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	441a      	add	r2, r3
 8008c40:	89fb      	ldrh	r3, [r7, #14]
 8008c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	78db      	ldrb	r3, [r3, #3]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d06c      	beq.n	8008d38 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c74:	81bb      	strh	r3, [r7, #12]
 8008c76:	89bb      	ldrh	r3, [r7, #12]
 8008c78:	f083 0320 	eor.w	r3, r3, #32
 8008c7c:	81bb      	strh	r3, [r7, #12]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	441a      	add	r2, r3
 8008c88:	89bb      	ldrh	r3, [r7, #12]
 8008c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	8013      	strh	r3, [r2, #0]
 8008c9e:	e04b      	b.n	8008d38 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	82fb      	strh	r3, [r7, #22]
 8008cae:	8afb      	ldrh	r3, [r7, #22]
 8008cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d01b      	beq.n	8008cf0 <USB_EPClearStall+0x106>
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cce:	82bb      	strh	r3, [r7, #20]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	441a      	add	r2, r3
 8008cda:	8abb      	ldrh	r3, [r7, #20]
 8008cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	881b      	ldrh	r3, [r3, #0]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d06:	827b      	strh	r3, [r7, #18]
 8008d08:	8a7b      	ldrh	r3, [r7, #18]
 8008d0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d0e:	827b      	strh	r3, [r7, #18]
 8008d10:	8a7b      	ldrh	r3, [r7, #18]
 8008d12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d16:	827b      	strh	r3, [r7, #18]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	441a      	add	r2, r3
 8008d22:	8a7b      	ldrh	r3, [r7, #18]
 8008d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bc80      	pop	{r7}
 8008d42:	4770      	bx	lr

08008d44 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008d50:	78fb      	ldrb	r3, [r7, #3]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d103      	bne.n	8008d5e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2280      	movs	r2, #128	; 0x80
 8008d5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bc80      	pop	{r7}
 8008d68:	4770      	bx	lr

08008d6a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bc80      	pop	{r7}
 8008d7c:	4770      	bx	lr

08008d7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b083      	sub	sp, #12
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bc80      	pop	{r7}
 8008d90:	4770      	bx	lr

08008d92 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b085      	sub	sp, #20
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008da4:	68fb      	ldr	r3, [r7, #12]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bc80      	pop	{r7}
 8008dae:	4770      	bx	lr

08008db0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bc80      	pop	{r7}
 8008dc4:	4770      	bx	lr

08008dc6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b08d      	sub	sp, #52	; 0x34
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	80fb      	strh	r3, [r7, #6]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008ddc:	88bb      	ldrh	r3, [r7, #4]
 8008dde:	3301      	adds	r3, #1
 8008de0:	085b      	lsrs	r3, r3, #1
 8008de2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008dec:	88fb      	ldrh	r3, [r7, #6]
 8008dee:	005a      	lsls	r2, r3, #1
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008df8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dfe:	e01e      	b.n	8008e3e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e08:	3301      	adds	r3, #1
 8008e0a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	021b      	lsls	r3, r3, #8
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	461a      	mov	r2, r3
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e24:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e28:	3302      	adds	r3, #2
 8008e2a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2e:	3302      	adds	r3, #2
 8008e30:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	3301      	adds	r3, #1
 8008e36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1dd      	bne.n	8008e00 <USB_WritePMA+0x3a>
  }
}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop
 8008e48:	3734      	adds	r7, #52	; 0x34
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bc80      	pop	{r7}
 8008e4e:	4770      	bx	lr

08008e50 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b08b      	sub	sp, #44	; 0x2c
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	460b      	mov	r3, r1
 8008e60:	80fb      	strh	r3, [r7, #6]
 8008e62:	4613      	mov	r3, r2
 8008e64:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008e66:	88bb      	ldrh	r3, [r7, #4]
 8008e68:	085b      	lsrs	r3, r3, #1
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e76:	88fb      	ldrh	r3, [r7, #6]
 8008e78:	005a      	lsls	r2, r3, #1
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e82:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	627b      	str	r3, [r7, #36]	; 0x24
 8008e88:	e01b      	b.n	8008ec2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	881b      	ldrh	r3, [r3, #0]
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	3302      	adds	r3, #2
 8008e96:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	0a1b      	lsrs	r3, r3, #8
 8008eaa:	b2da      	uxtb	r2, r3
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	3302      	adds	r3, #2
 8008eba:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1e0      	bne.n	8008e8a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008ec8:	88bb      	ldrh	r3, [r7, #4]
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d007      	beq.n	8008ee4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	701a      	strb	r2, [r3, #0]
  }
}
 8008ee4:	bf00      	nop
 8008ee6:	372c      	adds	r7, #44	; 0x2c
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bc80      	pop	{r7}
 8008eec:	4770      	bx	lr

08008eee <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	7c1b      	ldrb	r3, [r3, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d115      	bne.n	8008f32 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	2181      	movs	r1, #129	; 0x81
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f004 fddb 	bl	800daca <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f1e:	2202      	movs	r2, #2
 8008f20:	2101      	movs	r1, #1
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f004 fdd1 	bl	800daca <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008f30:	e012      	b.n	8008f58 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f32:	2340      	movs	r3, #64	; 0x40
 8008f34:	2202      	movs	r2, #2
 8008f36:	2181      	movs	r1, #129	; 0x81
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f004 fdc6 	bl	800daca <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f44:	2340      	movs	r3, #64	; 0x40
 8008f46:	2202      	movs	r2, #2
 8008f48:	2101      	movs	r1, #1
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f004 fdbd 	bl	800daca <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008f58:	2308      	movs	r3, #8
 8008f5a:	2203      	movs	r2, #3
 8008f5c:	2182      	movs	r1, #130	; 0x82
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f004 fdb3 	bl	800daca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f6a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008f6e:	f004 fed3 	bl	800dd18 <USBD_static_malloc>
 8008f72:	4602      	mov	r2, r0
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d102      	bne.n	8008f8a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008f84:	2301      	movs	r3, #1
 8008f86:	73fb      	strb	r3, [r7, #15]
 8008f88:	e026      	b.n	8008fd8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f90:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	7c1b      	ldrb	r3, [r3, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d109      	bne.n	8008fc8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f004 fe73 	bl	800dcac <USBD_LL_PrepareReceive>
 8008fc6:	e007      	b.n	8008fd8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fce:	2340      	movs	r3, #64	; 0x40
 8008fd0:	2101      	movs	r1, #1
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f004 fe6a 	bl	800dcac <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b084      	sub	sp, #16
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	460b      	mov	r3, r1
 8008fec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ff2:	2181      	movs	r1, #129	; 0x81
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f004 fd8e 	bl	800db16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009000:	2101      	movs	r1, #1
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f004 fd87 	bl	800db16 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009010:	2182      	movs	r1, #130	; 0x82
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f004 fd7f 	bl	800db16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00e      	beq.n	8009046 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009038:	4618      	mov	r0, r3
 800903a:	f004 fe79 	bl	800dd30 <USBD_static_free>
    pdev->pClassData = NULL;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009046:	7bfb      	ldrb	r3, [r7, #15]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009060:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009066:	2300      	movs	r3, #0
 8009068:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009076:	2b00      	cmp	r3, #0
 8009078:	d039      	beq.n	80090ee <USBD_CDC_Setup+0x9e>
 800907a:	2b20      	cmp	r3, #32
 800907c:	d17f      	bne.n	800917e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	88db      	ldrh	r3, [r3, #6]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d029      	beq.n	80090da <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	b25b      	sxtb	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	da11      	bge.n	80090b4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800909c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	88d2      	ldrh	r2, [r2, #6]
 80090a2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80090a4:	6939      	ldr	r1, [r7, #16]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	88db      	ldrh	r3, [r3, #6]
 80090aa:	461a      	mov	r2, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 fa0a 	bl	800a4c6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80090b2:	e06b      	b.n	800918c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	785a      	ldrb	r2, [r3, #1]
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	88db      	ldrh	r3, [r3, #6]
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80090ca:	6939      	ldr	r1, [r7, #16]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	88db      	ldrh	r3, [r3, #6]
 80090d0:	461a      	mov	r2, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f001 fa25 	bl	800a522 <USBD_CtlPrepareRx>
      break;
 80090d8:	e058      	b.n	800918c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	7850      	ldrb	r0, [r2, #1]
 80090e6:	2200      	movs	r2, #0
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	4798      	blx	r3
      break;
 80090ec:	e04e      	b.n	800918c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	785b      	ldrb	r3, [r3, #1]
 80090f2:	2b0b      	cmp	r3, #11
 80090f4:	d02e      	beq.n	8009154 <USBD_CDC_Setup+0x104>
 80090f6:	2b0b      	cmp	r3, #11
 80090f8:	dc38      	bgt.n	800916c <USBD_CDC_Setup+0x11c>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d002      	beq.n	8009104 <USBD_CDC_Setup+0xb4>
 80090fe:	2b0a      	cmp	r3, #10
 8009100:	d014      	beq.n	800912c <USBD_CDC_Setup+0xdc>
 8009102:	e033      	b.n	800916c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800910a:	2b03      	cmp	r3, #3
 800910c:	d107      	bne.n	800911e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800910e:	f107 030c 	add.w	r3, r7, #12
 8009112:	2202      	movs	r2, #2
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f001 f9d5 	bl	800a4c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800911c:	e02e      	b.n	800917c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f001 f966 	bl	800a3f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009126:	2302      	movs	r3, #2
 8009128:	75fb      	strb	r3, [r7, #23]
          break;
 800912a:	e027      	b.n	800917c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009132:	2b03      	cmp	r3, #3
 8009134:	d107      	bne.n	8009146 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009136:	f107 030f 	add.w	r3, r7, #15
 800913a:	2201      	movs	r2, #1
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f001 f9c1 	bl	800a4c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009144:	e01a      	b.n	800917c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f001 f952 	bl	800a3f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800914e:	2302      	movs	r3, #2
 8009150:	75fb      	strb	r3, [r7, #23]
          break;
 8009152:	e013      	b.n	800917c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915a:	2b03      	cmp	r3, #3
 800915c:	d00d      	beq.n	800917a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f001 f946 	bl	800a3f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009166:	2302      	movs	r3, #2
 8009168:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800916a:	e006      	b.n	800917a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f001 f93f 	bl	800a3f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009174:	2302      	movs	r3, #2
 8009176:	75fb      	strb	r3, [r7, #23]
          break;
 8009178:	e000      	b.n	800917c <USBD_CDC_Setup+0x12c>
          break;
 800917a:	bf00      	nop
      }
      break;
 800917c:	e006      	b.n	800918c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f001 f936 	bl	800a3f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009186:	2302      	movs	r3, #2
 8009188:	75fb      	strb	r3, [r7, #23]
      break;
 800918a:	bf00      	nop
  }

  return ret;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3718      	adds	r7, #24
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	460b      	mov	r3, r1
 80091a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091b0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d03a      	beq.n	8009232 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80091bc:	78fa      	ldrb	r2, [r7, #3]
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	440b      	add	r3, r1
 80091ca:	331c      	adds	r3, #28
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d029      	beq.n	8009226 <USBD_CDC_DataIn+0x90>
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	6879      	ldr	r1, [r7, #4]
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	440b      	add	r3, r1
 80091e0:	331c      	adds	r3, #28
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	78f9      	ldrb	r1, [r7, #3]
 80091e6:	68b8      	ldr	r0, [r7, #8]
 80091e8:	460b      	mov	r3, r1
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	440b      	add	r3, r1
 80091ee:	00db      	lsls	r3, r3, #3
 80091f0:	4403      	add	r3, r0
 80091f2:	3338      	adds	r3, #56	; 0x38
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	fbb2 f1f3 	udiv	r1, r2, r3
 80091fa:	fb03 f301 	mul.w	r3, r3, r1
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d110      	bne.n	8009226 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009204:	78fa      	ldrb	r2, [r7, #3]
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	4613      	mov	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	440b      	add	r3, r1
 8009212:	331c      	adds	r3, #28
 8009214:	2200      	movs	r2, #0
 8009216:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009218:	78f9      	ldrb	r1, [r7, #3]
 800921a:	2300      	movs	r3, #0
 800921c:	2200      	movs	r2, #0
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f004 fd21 	bl	800dc66 <USBD_LL_Transmit>
 8009224:	e003      	b.n	800922e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	e000      	b.n	8009234 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009232:	2302      	movs	r3, #2
  }
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800924e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f004 fd4c 	bl	800dcf2 <USBD_LL_GetRxDataSize>
 800925a:	4602      	mov	r2, r0
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00d      	beq.n	8009288 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009280:	4611      	mov	r1, r2
 8009282:	4798      	blx	r3

    return USBD_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	e000      	b.n	800928a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009288:	2302      	movs	r3, #2
  }
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d015      	beq.n	80092d8 <USBD_CDC_EP0_RxReady+0x46>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80092b2:	2bff      	cmp	r3, #255	; 0xff
 80092b4:	d010      	beq.n	80092d8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80092c4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80092cc:	b292      	uxth	r2, r2
 80092ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	22ff      	movs	r2, #255	; 0xff
 80092d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2243      	movs	r2, #67	; 0x43
 80092f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80092f2:	4b03      	ldr	r3, [pc, #12]	; (8009300 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bc80      	pop	{r7}
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	200000a4 	.word	0x200000a4

08009304 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2243      	movs	r2, #67	; 0x43
 8009310:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009312:	4b03      	ldr	r3, [pc, #12]	; (8009320 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009314:	4618      	mov	r0, r3
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	bc80      	pop	{r7}
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	20000060 	.word	0x20000060

08009324 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2243      	movs	r2, #67	; 0x43
 8009330:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009332:	4b03      	ldr	r3, [pc, #12]	; (8009340 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	bc80      	pop	{r7}
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	200000e8 	.word	0x200000e8

08009344 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	220a      	movs	r2, #10
 8009350:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009352:	4b03      	ldr	r3, [pc, #12]	; (8009360 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009354:	4618      	mov	r0, r3
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	bc80      	pop	{r7}
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	2000001c 	.word	0x2000001c

08009364 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800936e:	2302      	movs	r3, #2
 8009370:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d005      	beq.n	8009384 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009384:	7bfb      	ldrb	r3, [r7, #15]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	bc80      	pop	{r7}
 800938e:	4770      	bx	lr

08009390 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	4613      	mov	r3, r2
 800939c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80093ae:	88fa      	ldrh	r2, [r7, #6]
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	371c      	adds	r7, #28
 80093bc:	46bd      	mov	sp, r7
 80093be:	bc80      	pop	{r7}
 80093c0:	4770      	bx	lr

080093c2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b085      	sub	sp, #20
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bc80      	pop	{r7}
 80093e6:	4770      	bx	lr

080093e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d01c      	beq.n	800943c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009408:	2b00      	cmp	r3, #0
 800940a:	d115      	bne.n	8009438 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2201      	movs	r2, #1
 8009410:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800942a:	b29b      	uxth	r3, r3
 800942c:	2181      	movs	r1, #129	; 0x81
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f004 fc19 	bl	800dc66 <USBD_LL_Transmit>

      return USBD_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	e002      	b.n	800943e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009438:	2301      	movs	r3, #1
 800943a:	e000      	b.n	800943e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800943c:	2302      	movs	r3, #2
  }
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009454:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800945c:	2b00      	cmp	r3, #0
 800945e:	d017      	beq.n	8009490 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	7c1b      	ldrb	r3, [r3, #16]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d109      	bne.n	800947c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800946e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009472:	2101      	movs	r1, #1
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f004 fc19 	bl	800dcac <USBD_LL_PrepareReceive>
 800947a:	e007      	b.n	800948c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009482:	2340      	movs	r3, #64	; 0x40
 8009484:	2101      	movs	r1, #1
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f004 fc10 	bl	800dcac <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	e000      	b.n	8009492 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009490:	2302      	movs	r3, #2
  }
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	60f8      	str	r0, [r7, #12]
 80094a2:	60b9      	str	r1, [r7, #8]
 80094a4:	4613      	mov	r3, r2
 80094a6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d101      	bne.n	80094b2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80094ae:	2302      	movs	r3, #2
 80094b0:	e01a      	b.n	80094e8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	79fa      	ldrb	r2, [r7, #7]
 80094de:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f004 fa7d 	bl	800d9e0 <USBD_LL_Init>

  return USBD_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d006      	beq.n	8009512 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]
 8009510:	e001      	b.n	8009516 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009512:	2302      	movs	r3, #2
 8009514:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009516:	7bfb      	ldrb	r3, [r7, #15]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	bc80      	pop	{r7}
 8009520:	4770      	bx	lr

08009522 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b082      	sub	sp, #8
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f004 fab2 	bl	800da94 <USBD_LL_Start>

  return USBD_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800953a:	b480      	push	{r7}
 800953c:	b083      	sub	sp, #12
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	bc80      	pop	{r7}
 800954c:	4770      	bx	lr

0800954e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	460b      	mov	r3, r1
 8009558:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800955a:	2302      	movs	r3, #2
 800955c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00c      	beq.n	8009582 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	78fa      	ldrb	r2, [r7, #3]
 8009572:	4611      	mov	r1, r2
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	4798      	blx	r3
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009582:	7bfb      	ldrb	r3, [r7, #15]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	78fa      	ldrb	r2, [r7, #3]
 80095a2:	4611      	mov	r1, r2
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	4798      	blx	r3

  return USBD_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 fed8 	bl	800a37a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80095d8:	461a      	mov	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095e6:	f003 031f 	and.w	r3, r3, #31
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d016      	beq.n	800961c <USBD_LL_SetupStage+0x6a>
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d81c      	bhi.n	800962c <USBD_LL_SetupStage+0x7a>
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d002      	beq.n	80095fc <USBD_LL_SetupStage+0x4a>
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d008      	beq.n	800960c <USBD_LL_SetupStage+0x5a>
 80095fa:	e017      	b.n	800962c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f9cb 	bl	80099a0 <USBD_StdDevReq>
      break;
 800960a:	e01a      	b.n	8009642 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fa2d 	bl	8009a74 <USBD_StdItfReq>
      break;
 800961a:	e012      	b.n	8009642 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fa6d 	bl	8009b04 <USBD_StdEPReq>
      break;
 800962a:	e00a      	b.n	8009642 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009632:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009636:	b2db      	uxtb	r3, r3
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f004 fa8a 	bl	800db54 <USBD_LL_StallEP>
      break;
 8009640:	bf00      	nop
  }

  return USBD_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	460b      	mov	r3, r1
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800965a:	7afb      	ldrb	r3, [r7, #11]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d14b      	bne.n	80096f8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009666:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800966e:	2b03      	cmp	r3, #3
 8009670:	d134      	bne.n	80096dc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	68da      	ldr	r2, [r3, #12]
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	429a      	cmp	r2, r3
 800967c:	d919      	bls.n	80096b2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	1ad2      	subs	r2, r2, r3
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009694:	429a      	cmp	r2, r3
 8009696:	d203      	bcs.n	80096a0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800969c:	b29b      	uxth	r3, r3
 800969e:	e002      	b.n	80096a6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	461a      	mov	r2, r3
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 ff57 	bl	800a55e <USBD_CtlContinueRx>
 80096b0:	e038      	b.n	8009724 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00a      	beq.n	80096d4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80096c4:	2b03      	cmp	r3, #3
 80096c6:	d105      	bne.n	80096d4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 ff54 	bl	800a582 <USBD_CtlSendStatus>
 80096da:	e023      	b.n	8009724 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096e2:	2b05      	cmp	r3, #5
 80096e4:	d11e      	bne.n	8009724 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80096ee:	2100      	movs	r1, #0
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f004 fa2f 	bl	800db54 <USBD_LL_StallEP>
 80096f6:	e015      	b.n	8009724 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00d      	beq.n	8009720 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800970a:	2b03      	cmp	r3, #3
 800970c:	d108      	bne.n	8009720 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	7afa      	ldrb	r2, [r7, #11]
 8009718:	4611      	mov	r1, r2
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	4798      	blx	r3
 800971e:	e001      	b.n	8009724 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009720:	2302      	movs	r3, #2
 8009722:	e000      	b.n	8009726 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b086      	sub	sp, #24
 8009732:	af00      	add	r7, sp, #0
 8009734:	60f8      	str	r0, [r7, #12]
 8009736:	460b      	mov	r3, r1
 8009738:	607a      	str	r2, [r7, #4]
 800973a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800973c:	7afb      	ldrb	r3, [r7, #11]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d17f      	bne.n	8009842 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3314      	adds	r3, #20
 8009746:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800974e:	2b02      	cmp	r3, #2
 8009750:	d15c      	bne.n	800980c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	68da      	ldr	r2, [r3, #12]
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	429a      	cmp	r2, r3
 800975c:	d915      	bls.n	800978a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	68da      	ldr	r2, [r3, #12]
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	1ad2      	subs	r2, r2, r3
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	b29b      	uxth	r3, r3
 8009772:	461a      	mov	r2, r3
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f000 fec1 	bl	800a4fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800977c:	2300      	movs	r3, #0
 800977e:	2200      	movs	r2, #0
 8009780:	2100      	movs	r1, #0
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f004 fa92 	bl	800dcac <USBD_LL_PrepareReceive>
 8009788:	e04e      	b.n	8009828 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	6912      	ldr	r2, [r2, #16]
 8009792:	fbb3 f1f2 	udiv	r1, r3, r2
 8009796:	fb02 f201 	mul.w	r2, r2, r1
 800979a:	1a9b      	subs	r3, r3, r2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d11c      	bne.n	80097da <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	689a      	ldr	r2, [r3, #8]
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d316      	bcc.n	80097da <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	689a      	ldr	r2, [r3, #8]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d20f      	bcs.n	80097da <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80097ba:	2200      	movs	r2, #0
 80097bc:	2100      	movs	r1, #0
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f000 fe9d 	bl	800a4fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097cc:	2300      	movs	r3, #0
 80097ce:	2200      	movs	r2, #0
 80097d0:	2100      	movs	r1, #0
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f004 fa6a 	bl	800dcac <USBD_LL_PrepareReceive>
 80097d8:	e026      	b.n	8009828 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00a      	beq.n	80097fc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d105      	bne.n	80097fc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80097fc:	2180      	movs	r1, #128	; 0x80
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f004 f9a8 	bl	800db54 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 fecf 	bl	800a5a8 <USBD_CtlReceiveStatus>
 800980a:	e00d      	b.n	8009828 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009812:	2b04      	cmp	r3, #4
 8009814:	d004      	beq.n	8009820 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800981c:	2b00      	cmp	r3, #0
 800981e:	d103      	bne.n	8009828 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009820:	2180      	movs	r1, #128	; 0x80
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f004 f996 	bl	800db54 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800982e:	2b01      	cmp	r3, #1
 8009830:	d11d      	bne.n	800986e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f7ff fe81 	bl	800953a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009840:	e015      	b.n	800986e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00d      	beq.n	800986a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009854:	2b03      	cmp	r3, #3
 8009856:	d108      	bne.n	800986a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	7afa      	ldrb	r2, [r7, #11]
 8009862:	4611      	mov	r1, r2
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	4798      	blx	r3
 8009868:	e001      	b.n	800986e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800986a:	2302      	movs	r3, #2
 800986c:	e000      	b.n	8009870 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009880:	2340      	movs	r3, #64	; 0x40
 8009882:	2200      	movs	r2, #0
 8009884:	2100      	movs	r1, #0
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f004 f91f 	bl	800daca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2240      	movs	r2, #64	; 0x40
 8009898:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800989c:	2340      	movs	r3, #64	; 0x40
 800989e:	2200      	movs	r2, #0
 80098a0:	2180      	movs	r1, #128	; 0x80
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f004 f911 	bl	800daca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2240      	movs	r2, #64	; 0x40
 80098b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d009      	beq.n	80098f0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	6852      	ldr	r2, [r2, #4]
 80098e8:	b2d2      	uxtb	r2, r2
 80098ea:	4611      	mov	r1, r2
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	4798      	blx	r3
  }

  return USBD_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b083      	sub	sp, #12
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	460b      	mov	r3, r1
 8009904:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	78fa      	ldrb	r2, [r7, #3]
 800990a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	bc80      	pop	{r7}
 8009916:	4770      	bx	lr

08009918 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2204      	movs	r2, #4
 8009930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	bc80      	pop	{r7}
 800993e:	4770      	bx	lr

08009940 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800994e:	2b04      	cmp	r3, #4
 8009950:	d105      	bne.n	800995e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	bc80      	pop	{r7}
 8009968:	4770      	bx	lr

0800996a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009978:	2b03      	cmp	r3, #3
 800997a:	d10b      	bne.n	8009994 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009982:	69db      	ldr	r3, [r3, #28]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d005      	beq.n	8009994 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
	...

080099a0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099b6:	2b40      	cmp	r3, #64	; 0x40
 80099b8:	d005      	beq.n	80099c6 <USBD_StdDevReq+0x26>
 80099ba:	2b40      	cmp	r3, #64	; 0x40
 80099bc:	d84f      	bhi.n	8009a5e <USBD_StdDevReq+0xbe>
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d009      	beq.n	80099d6 <USBD_StdDevReq+0x36>
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d14b      	bne.n	8009a5e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	4798      	blx	r3
      break;
 80099d4:	e048      	b.n	8009a68 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	785b      	ldrb	r3, [r3, #1]
 80099da:	2b09      	cmp	r3, #9
 80099dc:	d839      	bhi.n	8009a52 <USBD_StdDevReq+0xb2>
 80099de:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <USBD_StdDevReq+0x44>)
 80099e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e4:	08009a35 	.word	0x08009a35
 80099e8:	08009a49 	.word	0x08009a49
 80099ec:	08009a53 	.word	0x08009a53
 80099f0:	08009a3f 	.word	0x08009a3f
 80099f4:	08009a53 	.word	0x08009a53
 80099f8:	08009a17 	.word	0x08009a17
 80099fc:	08009a0d 	.word	0x08009a0d
 8009a00:	08009a53 	.word	0x08009a53
 8009a04:	08009a2b 	.word	0x08009a2b
 8009a08:	08009a21 	.word	0x08009a21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f9dc 	bl	8009dcc <USBD_GetDescriptor>
          break;
 8009a14:	e022      	b.n	8009a5c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fb3f 	bl	800a09c <USBD_SetAddress>
          break;
 8009a1e:	e01d      	b.n	8009a5c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fb7e 	bl	800a124 <USBD_SetConfig>
          break;
 8009a28:	e018      	b.n	8009a5c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fc07 	bl	800a240 <USBD_GetConfig>
          break;
 8009a32:	e013      	b.n	8009a5c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fc37 	bl	800a2aa <USBD_GetStatus>
          break;
 8009a3c:	e00e      	b.n	8009a5c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fc65 	bl	800a310 <USBD_SetFeature>
          break;
 8009a46:	e009      	b.n	8009a5c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fc74 	bl	800a338 <USBD_ClrFeature>
          break;
 8009a50:	e004      	b.n	8009a5c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009a52:	6839      	ldr	r1, [r7, #0]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fccc 	bl	800a3f2 <USBD_CtlError>
          break;
 8009a5a:	bf00      	nop
      }
      break;
 8009a5c:	e004      	b.n	8009a68 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fcc6 	bl	800a3f2 <USBD_CtlError>
      break;
 8009a66:	bf00      	nop
  }

  return ret;
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop

08009a74 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a8a:	2b40      	cmp	r3, #64	; 0x40
 8009a8c:	d005      	beq.n	8009a9a <USBD_StdItfReq+0x26>
 8009a8e:	2b40      	cmp	r3, #64	; 0x40
 8009a90:	d82e      	bhi.n	8009af0 <USBD_StdItfReq+0x7c>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <USBD_StdItfReq+0x26>
 8009a96:	2b20      	cmp	r3, #32
 8009a98:	d12a      	bne.n	8009af0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d81d      	bhi.n	8009ae2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	889b      	ldrh	r3, [r3, #4]
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d813      	bhi.n	8009ad8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	6839      	ldr	r1, [r7, #0]
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	4798      	blx	r3
 8009abe:	4603      	mov	r3, r0
 8009ac0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	88db      	ldrh	r3, [r3, #6]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d110      	bne.n	8009aec <USBD_StdItfReq+0x78>
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10d      	bne.n	8009aec <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fd56 	bl	800a582 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ad6:	e009      	b.n	8009aec <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fc89 	bl	800a3f2 <USBD_CtlError>
          break;
 8009ae0:	e004      	b.n	8009aec <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fc84 	bl	800a3f2 <USBD_CtlError>
          break;
 8009aea:	e000      	b.n	8009aee <USBD_StdItfReq+0x7a>
          break;
 8009aec:	bf00      	nop
      }
      break;
 8009aee:	e004      	b.n	8009afa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fc7d 	bl	800a3f2 <USBD_CtlError>
      break;
 8009af8:	bf00      	nop
  }

  return USBD_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	889b      	ldrh	r3, [r3, #4]
 8009b16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b20:	2b40      	cmp	r3, #64	; 0x40
 8009b22:	d007      	beq.n	8009b34 <USBD_StdEPReq+0x30>
 8009b24:	2b40      	cmp	r3, #64	; 0x40
 8009b26:	f200 8146 	bhi.w	8009db6 <USBD_StdEPReq+0x2b2>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <USBD_StdEPReq+0x40>
 8009b2e:	2b20      	cmp	r3, #32
 8009b30:	f040 8141 	bne.w	8009db6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	4798      	blx	r3
      break;
 8009b42:	e13d      	b.n	8009dc0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b4c:	2b20      	cmp	r3, #32
 8009b4e:	d10a      	bne.n	8009b66 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	4798      	blx	r3
 8009b5e:	4603      	mov	r3, r0
 8009b60:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	e12d      	b.n	8009dc2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	785b      	ldrb	r3, [r3, #1]
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d007      	beq.n	8009b7e <USBD_StdEPReq+0x7a>
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	f300 811b 	bgt.w	8009daa <USBD_StdEPReq+0x2a6>
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d072      	beq.n	8009c5e <USBD_StdEPReq+0x15a>
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d03a      	beq.n	8009bf2 <USBD_StdEPReq+0xee>
 8009b7c:	e115      	b.n	8009daa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d002      	beq.n	8009b8e <USBD_StdEPReq+0x8a>
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	d015      	beq.n	8009bb8 <USBD_StdEPReq+0xb4>
 8009b8c:	e02b      	b.n	8009be6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00c      	beq.n	8009bae <USBD_StdEPReq+0xaa>
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
 8009b96:	2b80      	cmp	r3, #128	; 0x80
 8009b98:	d009      	beq.n	8009bae <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b9a:	7bbb      	ldrb	r3, [r7, #14]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f003 ffd8 	bl	800db54 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009ba4:	2180      	movs	r1, #128	; 0x80
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f003 ffd4 	bl	800db54 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bac:	e020      	b.n	8009bf0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fc1e 	bl	800a3f2 <USBD_CtlError>
              break;
 8009bb6:	e01b      	b.n	8009bf0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	885b      	ldrh	r3, [r3, #2]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10e      	bne.n	8009bde <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00b      	beq.n	8009bde <USBD_StdEPReq+0xda>
 8009bc6:	7bbb      	ldrb	r3, [r7, #14]
 8009bc8:	2b80      	cmp	r3, #128	; 0x80
 8009bca:	d008      	beq.n	8009bde <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	88db      	ldrh	r3, [r3, #6]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d104      	bne.n	8009bde <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f003 ffbb 	bl	800db54 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fccf 	bl	800a582 <USBD_CtlSendStatus>

              break;
 8009be4:	e004      	b.n	8009bf0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fc02 	bl	800a3f2 <USBD_CtlError>
              break;
 8009bee:	bf00      	nop
          }
          break;
 8009bf0:	e0e0      	b.n	8009db4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d002      	beq.n	8009c02 <USBD_StdEPReq+0xfe>
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d015      	beq.n	8009c2c <USBD_StdEPReq+0x128>
 8009c00:	e026      	b.n	8009c50 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c02:	7bbb      	ldrb	r3, [r7, #14]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00c      	beq.n	8009c22 <USBD_StdEPReq+0x11e>
 8009c08:	7bbb      	ldrb	r3, [r7, #14]
 8009c0a:	2b80      	cmp	r3, #128	; 0x80
 8009c0c:	d009      	beq.n	8009c22 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009c0e:	7bbb      	ldrb	r3, [r7, #14]
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f003 ff9e 	bl	800db54 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009c18:	2180      	movs	r1, #128	; 0x80
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f003 ff9a 	bl	800db54 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c20:	e01c      	b.n	8009c5c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009c22:	6839      	ldr	r1, [r7, #0]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fbe4 	bl	800a3f2 <USBD_CtlError>
              break;
 8009c2a:	e017      	b.n	8009c5c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	885b      	ldrh	r3, [r3, #2]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d112      	bne.n	8009c5a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c34:	7bbb      	ldrb	r3, [r7, #14]
 8009c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d004      	beq.n	8009c48 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f003 ffa5 	bl	800db92 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fc9a 	bl	800a582 <USBD_CtlSendStatus>
              }
              break;
 8009c4e:	e004      	b.n	8009c5a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fbcd 	bl	800a3f2 <USBD_CtlError>
              break;
 8009c58:	e000      	b.n	8009c5c <USBD_StdEPReq+0x158>
              break;
 8009c5a:	bf00      	nop
          }
          break;
 8009c5c:	e0aa      	b.n	8009db4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d002      	beq.n	8009c6e <USBD_StdEPReq+0x16a>
 8009c68:	2b03      	cmp	r3, #3
 8009c6a:	d032      	beq.n	8009cd2 <USBD_StdEPReq+0x1ce>
 8009c6c:	e097      	b.n	8009d9e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c6e:	7bbb      	ldrb	r3, [r7, #14]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d007      	beq.n	8009c84 <USBD_StdEPReq+0x180>
 8009c74:	7bbb      	ldrb	r3, [r7, #14]
 8009c76:	2b80      	cmp	r3, #128	; 0x80
 8009c78:	d004      	beq.n	8009c84 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fbb8 	bl	800a3f2 <USBD_CtlError>
                break;
 8009c82:	e091      	b.n	8009da8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	da0b      	bge.n	8009ca4 <USBD_StdEPReq+0x1a0>
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
 8009c8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c92:	4613      	mov	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	3310      	adds	r3, #16
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	e00b      	b.n	8009cbc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
 8009ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009caa:	4613      	mov	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	4413      	add	r3, r2
 8009cba:	3304      	adds	r3, #4
 8009cbc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fbfb 	bl	800a4c6 <USBD_CtlSendData>
              break;
 8009cd0:	e06a      	b.n	8009da8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009cd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	da11      	bge.n	8009cfe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009cda:	7bbb      	ldrb	r3, [r7, #14]
 8009cdc:	f003 020f 	and.w	r2, r3, #15
 8009ce0:	6879      	ldr	r1, [r7, #4]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	440b      	add	r3, r1
 8009cec:	3318      	adds	r3, #24
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d117      	bne.n	8009d24 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009cf4:	6839      	ldr	r1, [r7, #0]
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fb7b 	bl	800a3f2 <USBD_CtlError>
                  break;
 8009cfc:	e054      	b.n	8009da8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
 8009d00:	f003 020f 	and.w	r2, r3, #15
 8009d04:	6879      	ldr	r1, [r7, #4]
 8009d06:	4613      	mov	r3, r2
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4413      	add	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	440b      	add	r3, r1
 8009d10:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d104      	bne.n	8009d24 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009d1a:	6839      	ldr	r1, [r7, #0]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fb68 	bl	800a3f2 <USBD_CtlError>
                  break;
 8009d22:	e041      	b.n	8009da8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	da0b      	bge.n	8009d44 <USBD_StdEPReq+0x240>
 8009d2c:	7bbb      	ldrb	r3, [r7, #14]
 8009d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d32:	4613      	mov	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	3310      	adds	r3, #16
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	4413      	add	r3, r2
 8009d40:	3304      	adds	r3, #4
 8009d42:	e00b      	b.n	8009d5c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	4413      	add	r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	4413      	add	r3, r2
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d5e:	7bbb      	ldrb	r3, [r7, #14]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <USBD_StdEPReq+0x266>
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	2b80      	cmp	r3, #128	; 0x80
 8009d68:	d103      	bne.n	8009d72 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	e00e      	b.n	8009d90 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f003 ff2a 	bl	800dbd0 <USBD_LL_IsStallEP>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2201      	movs	r2, #1
 8009d86:	601a      	str	r2, [r3, #0]
 8009d88:	e002      	b.n	8009d90 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	2202      	movs	r2, #2
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fb95 	bl	800a4c6 <USBD_CtlSendData>
              break;
 8009d9c:	e004      	b.n	8009da8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009d9e:	6839      	ldr	r1, [r7, #0]
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fb26 	bl	800a3f2 <USBD_CtlError>
              break;
 8009da6:	bf00      	nop
          }
          break;
 8009da8:	e004      	b.n	8009db4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fb20 	bl	800a3f2 <USBD_CtlError>
          break;
 8009db2:	bf00      	nop
      }
      break;
 8009db4:	e004      	b.n	8009dc0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fb1a 	bl	800a3f2 <USBD_CtlError>
      break;
 8009dbe:	bf00      	nop
  }

  return ret;
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
	...

08009dcc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009dde:	2300      	movs	r3, #0
 8009de0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	885b      	ldrh	r3, [r3, #2]
 8009de6:	0a1b      	lsrs	r3, r3, #8
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	3b01      	subs	r3, #1
 8009dec:	2b06      	cmp	r3, #6
 8009dee:	f200 8128 	bhi.w	800a042 <USBD_GetDescriptor+0x276>
 8009df2:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <USBD_GetDescriptor+0x2c>)
 8009df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df8:	08009e15 	.word	0x08009e15
 8009dfc:	08009e2d 	.word	0x08009e2d
 8009e00:	08009e6d 	.word	0x08009e6d
 8009e04:	0800a043 	.word	0x0800a043
 8009e08:	0800a043 	.word	0x0800a043
 8009e0c:	08009fe3 	.word	0x08009fe3
 8009e10:	0800a00f 	.word	0x0800a00f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	7c12      	ldrb	r2, [r2, #16]
 8009e20:	f107 0108 	add.w	r1, r7, #8
 8009e24:	4610      	mov	r0, r2
 8009e26:	4798      	blx	r3
 8009e28:	60f8      	str	r0, [r7, #12]
      break;
 8009e2a:	e112      	b.n	800a052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	7c1b      	ldrb	r3, [r3, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10d      	bne.n	8009e50 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3c:	f107 0208 	add.w	r2, r7, #8
 8009e40:	4610      	mov	r0, r2
 8009e42:	4798      	blx	r3
 8009e44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e4e:	e100      	b.n	800a052 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e58:	f107 0208 	add.w	r2, r7, #8
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	4798      	blx	r3
 8009e60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	3301      	adds	r3, #1
 8009e66:	2202      	movs	r2, #2
 8009e68:	701a      	strb	r2, [r3, #0]
      break;
 8009e6a:	e0f2      	b.n	800a052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	885b      	ldrh	r3, [r3, #2]
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b05      	cmp	r3, #5
 8009e74:	f200 80ac 	bhi.w	8009fd0 <USBD_GetDescriptor+0x204>
 8009e78:	a201      	add	r2, pc, #4	; (adr r2, 8009e80 <USBD_GetDescriptor+0xb4>)
 8009e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7e:	bf00      	nop
 8009e80:	08009e99 	.word	0x08009e99
 8009e84:	08009ecd 	.word	0x08009ecd
 8009e88:	08009f01 	.word	0x08009f01
 8009e8c:	08009f35 	.word	0x08009f35
 8009e90:	08009f69 	.word	0x08009f69
 8009e94:	08009f9d 	.word	0x08009f9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00b      	beq.n	8009ebc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	7c12      	ldrb	r2, [r2, #16]
 8009eb0:	f107 0108 	add.w	r1, r7, #8
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	4798      	blx	r3
 8009eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eba:	e091      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fa97 	bl	800a3f2 <USBD_CtlError>
            err++;
 8009ec4:	7afb      	ldrb	r3, [r7, #11]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eca:	e089      	b.n	8009fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00b      	beq.n	8009ef0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	7c12      	ldrb	r2, [r2, #16]
 8009ee4:	f107 0108 	add.w	r1, r7, #8
 8009ee8:	4610      	mov	r0, r2
 8009eea:	4798      	blx	r3
 8009eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eee:	e077      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ef0:	6839      	ldr	r1, [r7, #0]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fa7d 	bl	800a3f2 <USBD_CtlError>
            err++;
 8009ef8:	7afb      	ldrb	r3, [r7, #11]
 8009efa:	3301      	adds	r3, #1
 8009efc:	72fb      	strb	r3, [r7, #11]
          break;
 8009efe:	e06f      	b.n	8009fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00b      	beq.n	8009f24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	7c12      	ldrb	r2, [r2, #16]
 8009f18:	f107 0108 	add.w	r1, r7, #8
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	4798      	blx	r3
 8009f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f22:	e05d      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fa63 	bl	800a3f2 <USBD_CtlError>
            err++;
 8009f2c:	7afb      	ldrb	r3, [r7, #11]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	72fb      	strb	r3, [r7, #11]
          break;
 8009f32:	e055      	b.n	8009fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00b      	beq.n	8009f58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	7c12      	ldrb	r2, [r2, #16]
 8009f4c:	f107 0108 	add.w	r1, r7, #8
 8009f50:	4610      	mov	r0, r2
 8009f52:	4798      	blx	r3
 8009f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f56:	e043      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fa49 	bl	800a3f2 <USBD_CtlError>
            err++;
 8009f60:	7afb      	ldrb	r3, [r7, #11]
 8009f62:	3301      	adds	r3, #1
 8009f64:	72fb      	strb	r3, [r7, #11]
          break;
 8009f66:	e03b      	b.n	8009fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00b      	beq.n	8009f8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	7c12      	ldrb	r2, [r2, #16]
 8009f80:	f107 0108 	add.w	r1, r7, #8
 8009f84:	4610      	mov	r0, r2
 8009f86:	4798      	blx	r3
 8009f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f8a:	e029      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fa2f 	bl	800a3f2 <USBD_CtlError>
            err++;
 8009f94:	7afb      	ldrb	r3, [r7, #11]
 8009f96:	3301      	adds	r3, #1
 8009f98:	72fb      	strb	r3, [r7, #11]
          break;
 8009f9a:	e021      	b.n	8009fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00b      	beq.n	8009fc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	7c12      	ldrb	r2, [r2, #16]
 8009fb4:	f107 0108 	add.w	r1, r7, #8
 8009fb8:	4610      	mov	r0, r2
 8009fba:	4798      	blx	r3
 8009fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fbe:	e00f      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fa15 	bl	800a3f2 <USBD_CtlError>
            err++;
 8009fc8:	7afb      	ldrb	r3, [r7, #11]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8009fce:	e007      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009fd0:	6839      	ldr	r1, [r7, #0]
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fa0d 	bl	800a3f2 <USBD_CtlError>
          err++;
 8009fd8:	7afb      	ldrb	r3, [r7, #11]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009fde:	e038      	b.n	800a052 <USBD_GetDescriptor+0x286>
 8009fe0:	e037      	b.n	800a052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	7c1b      	ldrb	r3, [r3, #16]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d109      	bne.n	8009ffe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff2:	f107 0208 	add.w	r2, r7, #8
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	4798      	blx	r3
 8009ffa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ffc:	e029      	b.n	800a052 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f9f6 	bl	800a3f2 <USBD_CtlError>
        err++;
 800a006:	7afb      	ldrb	r3, [r7, #11]
 800a008:	3301      	adds	r3, #1
 800a00a:	72fb      	strb	r3, [r7, #11]
      break;
 800a00c:	e021      	b.n	800a052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	7c1b      	ldrb	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10d      	bne.n	800a032 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01e:	f107 0208 	add.w	r2, r7, #8
 800a022:	4610      	mov	r0, r2
 800a024:	4798      	blx	r3
 800a026:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3301      	adds	r3, #1
 800a02c:	2207      	movs	r2, #7
 800a02e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a030:	e00f      	b.n	800a052 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f9dc 	bl	800a3f2 <USBD_CtlError>
        err++;
 800a03a:	7afb      	ldrb	r3, [r7, #11]
 800a03c:	3301      	adds	r3, #1
 800a03e:	72fb      	strb	r3, [r7, #11]
      break;
 800a040:	e007      	b.n	800a052 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 f9d4 	bl	800a3f2 <USBD_CtlError>
      err++;
 800a04a:	7afb      	ldrb	r3, [r7, #11]
 800a04c:	3301      	adds	r3, #1
 800a04e:	72fb      	strb	r3, [r7, #11]
      break;
 800a050:	bf00      	nop
  }

  if (err != 0U)
 800a052:	7afb      	ldrb	r3, [r7, #11]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d11c      	bne.n	800a092 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a058:	893b      	ldrh	r3, [r7, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d011      	beq.n	800a082 <USBD_GetDescriptor+0x2b6>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	88db      	ldrh	r3, [r3, #6]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00d      	beq.n	800a082 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	88da      	ldrh	r2, [r3, #6]
 800a06a:	893b      	ldrh	r3, [r7, #8]
 800a06c:	4293      	cmp	r3, r2
 800a06e:	bf28      	it	cs
 800a070:	4613      	movcs	r3, r2
 800a072:	b29b      	uxth	r3, r3
 800a074:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a076:	893b      	ldrh	r3, [r7, #8]
 800a078:	461a      	mov	r2, r3
 800a07a:	68f9      	ldr	r1, [r7, #12]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fa22 	bl	800a4c6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	88db      	ldrh	r3, [r3, #6]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d104      	bne.n	800a094 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fa79 	bl	800a582 <USBD_CtlSendStatus>
 800a090:	e000      	b.n	800a094 <USBD_GetDescriptor+0x2c8>
    return;
 800a092:	bf00      	nop
    }
  }
}
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop

0800a09c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	889b      	ldrh	r3, [r3, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d130      	bne.n	800a110 <USBD_SetAddress+0x74>
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	88db      	ldrh	r3, [r3, #6]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d12c      	bne.n	800a110 <USBD_SetAddress+0x74>
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	885b      	ldrh	r3, [r3, #2]
 800a0ba:	2b7f      	cmp	r3, #127	; 0x7f
 800a0bc:	d828      	bhi.n	800a110 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	885b      	ldrh	r3, [r3, #2]
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d104      	bne.n	800a0de <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a0d4:	6839      	ldr	r1, [r7, #0]
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f98b 	bl	800a3f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0dc:	e01d      	b.n	800a11a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	7bfa      	ldrb	r2, [r7, #15]
 800a0e2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f003 fd9c 	bl	800dc28 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fa46 	bl	800a582 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d004      	beq.n	800a106 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2202      	movs	r2, #2
 800a100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a104:	e009      	b.n	800a11a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a10e:	e004      	b.n	800a11a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f96d 	bl	800a3f2 <USBD_CtlError>
  }
}
 800a118:	bf00      	nop
 800a11a:	bf00      	nop
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
	...

0800a124 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	885b      	ldrh	r3, [r3, #2]
 800a132:	b2da      	uxtb	r2, r3
 800a134:	4b41      	ldr	r3, [pc, #260]	; (800a23c <USBD_SetConfig+0x118>)
 800a136:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a138:	4b40      	ldr	r3, [pc, #256]	; (800a23c <USBD_SetConfig+0x118>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d904      	bls.n	800a14a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f955 	bl	800a3f2 <USBD_CtlError>
 800a148:	e075      	b.n	800a236 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a150:	2b02      	cmp	r3, #2
 800a152:	d002      	beq.n	800a15a <USBD_SetConfig+0x36>
 800a154:	2b03      	cmp	r3, #3
 800a156:	d023      	beq.n	800a1a0 <USBD_SetConfig+0x7c>
 800a158:	e062      	b.n	800a220 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a15a:	4b38      	ldr	r3, [pc, #224]	; (800a23c <USBD_SetConfig+0x118>)
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d01a      	beq.n	800a198 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a162:	4b36      	ldr	r3, [pc, #216]	; (800a23c <USBD_SetConfig+0x118>)
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2203      	movs	r2, #3
 800a170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a174:	4b31      	ldr	r3, [pc, #196]	; (800a23c <USBD_SetConfig+0x118>)
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7ff f9e7 	bl	800954e <USBD_SetClassConfig>
 800a180:	4603      	mov	r3, r0
 800a182:	2b02      	cmp	r3, #2
 800a184:	d104      	bne.n	800a190 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a186:	6839      	ldr	r1, [r7, #0]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f932 	bl	800a3f2 <USBD_CtlError>
            return;
 800a18e:	e052      	b.n	800a236 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f9f6 	bl	800a582 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a196:	e04e      	b.n	800a236 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f9f2 	bl	800a582 <USBD_CtlSendStatus>
        break;
 800a19e:	e04a      	b.n	800a236 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a1a0:	4b26      	ldr	r3, [pc, #152]	; (800a23c <USBD_SetConfig+0x118>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d112      	bne.n	800a1ce <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a1b0:	4b22      	ldr	r3, [pc, #136]	; (800a23c <USBD_SetConfig+0x118>)
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a1ba:	4b20      	ldr	r3, [pc, #128]	; (800a23c <USBD_SetConfig+0x118>)
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7ff f9e3 	bl	800958c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f9db 	bl	800a582 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a1cc:	e033      	b.n	800a236 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a1ce:	4b1b      	ldr	r3, [pc, #108]	; (800a23c <USBD_SetConfig+0x118>)
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d01d      	beq.n	800a218 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f7ff f9d1 	bl	800958c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a1ea:	4b14      	ldr	r3, [pc, #80]	; (800a23c <USBD_SetConfig+0x118>)
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a1f4:	4b11      	ldr	r3, [pc, #68]	; (800a23c <USBD_SetConfig+0x118>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7ff f9a7 	bl	800954e <USBD_SetClassConfig>
 800a200:	4603      	mov	r3, r0
 800a202:	2b02      	cmp	r3, #2
 800a204:	d104      	bne.n	800a210 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f8f2 	bl	800a3f2 <USBD_CtlError>
            return;
 800a20e:	e012      	b.n	800a236 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f9b6 	bl	800a582 <USBD_CtlSendStatus>
        break;
 800a216:	e00e      	b.n	800a236 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 f9b2 	bl	800a582 <USBD_CtlSendStatus>
        break;
 800a21e:	e00a      	b.n	800a236 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f8e5 	bl	800a3f2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a228:	4b04      	ldr	r3, [pc, #16]	; (800a23c <USBD_SetConfig+0x118>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	4619      	mov	r1, r3
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f7ff f9ac 	bl	800958c <USBD_ClrClassConfig>
        break;
 800a234:	bf00      	nop
    }
  }
}
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	200001b2 	.word	0x200001b2

0800a240 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	88db      	ldrh	r3, [r3, #6]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d004      	beq.n	800a25c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f8cc 	bl	800a3f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a25a:	e022      	b.n	800a2a2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a262:	2b02      	cmp	r3, #2
 800a264:	dc02      	bgt.n	800a26c <USBD_GetConfig+0x2c>
 800a266:	2b00      	cmp	r3, #0
 800a268:	dc03      	bgt.n	800a272 <USBD_GetConfig+0x32>
 800a26a:	e015      	b.n	800a298 <USBD_GetConfig+0x58>
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d00b      	beq.n	800a288 <USBD_GetConfig+0x48>
 800a270:	e012      	b.n	800a298 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	3308      	adds	r3, #8
 800a27c:	2201      	movs	r2, #1
 800a27e:	4619      	mov	r1, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f920 	bl	800a4c6 <USBD_CtlSendData>
        break;
 800a286:	e00c      	b.n	800a2a2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3304      	adds	r3, #4
 800a28c:	2201      	movs	r2, #1
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 f918 	bl	800a4c6 <USBD_CtlSendData>
        break;
 800a296:	e004      	b.n	800a2a2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f8a9 	bl	800a3f2 <USBD_CtlError>
        break;
 800a2a0:	bf00      	nop
}
 800a2a2:	bf00      	nop
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b082      	sub	sp, #8
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d81e      	bhi.n	800a2fe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	88db      	ldrh	r3, [r3, #6]
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d004      	beq.n	800a2d2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f891 	bl	800a3f2 <USBD_CtlError>
        break;
 800a2d0:	e01a      	b.n	800a308 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d005      	beq.n	800a2ee <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	f043 0202 	orr.w	r2, r3, #2
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	330c      	adds	r3, #12
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f8e5 	bl	800a4c6 <USBD_CtlSendData>
      break;
 800a2fc:	e004      	b.n	800a308 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f876 	bl	800a3f2 <USBD_CtlError>
      break;
 800a306:	bf00      	nop
  }
}
 800a308:	bf00      	nop
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	885b      	ldrh	r3, [r3, #2]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d106      	bne.n	800a330 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f929 	bl	800a582 <USBD_CtlSendStatus>
  }
}
 800a330:	bf00      	nop
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a348:	3b01      	subs	r3, #1
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d80b      	bhi.n	800a366 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	885b      	ldrh	r3, [r3, #2]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d10c      	bne.n	800a370 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f90f 	bl	800a582 <USBD_CtlSendStatus>
      }
      break;
 800a364:	e004      	b.n	800a370 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a366:	6839      	ldr	r1, [r7, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f842 	bl	800a3f2 <USBD_CtlError>
      break;
 800a36e:	e000      	b.n	800a372 <USBD_ClrFeature+0x3a>
      break;
 800a370:	bf00      	nop
  }
}
 800a372:	bf00      	nop
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b083      	sub	sp, #12
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	781a      	ldrb	r2, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	785a      	ldrb	r2, [r3, #1]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	3302      	adds	r3, #2
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	3303      	adds	r3, #3
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	021b      	lsls	r3, r3, #8
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	4413      	add	r3, r2
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	3305      	adds	r3, #5
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	021b      	lsls	r3, r3, #8
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	4413      	add	r3, r2
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	3306      	adds	r3, #6
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	3307      	adds	r3, #7
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	021b      	lsls	r3, r3, #8
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	4413      	add	r3, r2
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	80da      	strh	r2, [r3, #6]

}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bc80      	pop	{r7}
 800a3f0:	4770      	bx	lr

0800a3f2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a3fc:	2180      	movs	r1, #128	; 0x80
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f003 fba8 	bl	800db54 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a404:	2100      	movs	r1, #0
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f003 fba4 	bl	800db54 <USBD_LL_StallEP>
}
 800a40c:	bf00      	nop
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a420:	2300      	movs	r3, #0
 800a422:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d032      	beq.n	800a490 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f000 f834 	bl	800a498 <USBD_GetLen>
 800a430:	4603      	mov	r3, r0
 800a432:	3301      	adds	r3, #1
 800a434:	b29b      	uxth	r3, r3
 800a436:	005b      	lsls	r3, r3, #1
 800a438:	b29a      	uxth	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	1c5a      	adds	r2, r3, #1
 800a442:	75fa      	strb	r2, [r7, #23]
 800a444:	461a      	mov	r2, r3
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	4413      	add	r3, r2
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	7812      	ldrb	r2, [r2, #0]
 800a44e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a450:	7dfb      	ldrb	r3, [r7, #23]
 800a452:	1c5a      	adds	r2, r3, #1
 800a454:	75fa      	strb	r2, [r7, #23]
 800a456:	461a      	mov	r2, r3
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	4413      	add	r3, r2
 800a45c:	2203      	movs	r2, #3
 800a45e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a460:	e012      	b.n	800a488 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	1c5a      	adds	r2, r3, #1
 800a466:	60fa      	str	r2, [r7, #12]
 800a468:	7dfa      	ldrb	r2, [r7, #23]
 800a46a:	1c51      	adds	r1, r2, #1
 800a46c:	75f9      	strb	r1, [r7, #23]
 800a46e:	4611      	mov	r1, r2
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	440a      	add	r2, r1
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a478:	7dfb      	ldrb	r3, [r7, #23]
 800a47a:	1c5a      	adds	r2, r3, #1
 800a47c:	75fa      	strb	r2, [r7, #23]
 800a47e:	461a      	mov	r2, r3
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	4413      	add	r3, r2
 800a484:	2200      	movs	r2, #0
 800a486:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1e8      	bne.n	800a462 <USBD_GetString+0x4e>
    }
  }
}
 800a490:	bf00      	nop
 800a492:	3718      	adds	r7, #24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a4a4:	e005      	b.n	800a4b2 <USBD_GetLen+0x1a>
  {
    len++;
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1f5      	bne.n	800a4a6 <USBD_GetLen+0xe>
  }

  return len;
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bc80      	pop	{r7}
 800a4c4:	4770      	bx	lr

0800a4c6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	60f8      	str	r0, [r7, #12]
 800a4ce:	60b9      	str	r1, [r7, #8]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a4dc:	88fa      	ldrh	r2, [r7, #6]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a4e2:	88fa      	ldrh	r2, [r7, #6]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4e8:	88fb      	ldrh	r3, [r7, #6]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f003 fbb9 	bl	800dc66 <USBD_LL_Transmit>

  return USBD_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	60f8      	str	r0, [r7, #12]
 800a506:	60b9      	str	r1, [r7, #8]
 800a508:	4613      	mov	r3, r2
 800a50a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a50c:	88fb      	ldrh	r3, [r7, #6]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	2100      	movs	r1, #0
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f003 fba7 	bl	800dc66 <USBD_LL_Transmit>

  return USBD_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b084      	sub	sp, #16
 800a526:	af00      	add	r7, sp, #0
 800a528:	60f8      	str	r0, [r7, #12]
 800a52a:	60b9      	str	r1, [r7, #8]
 800a52c:	4613      	mov	r3, r2
 800a52e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2203      	movs	r2, #3
 800a534:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a538:	88fa      	ldrh	r2, [r7, #6]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a540:	88fa      	ldrh	r2, [r7, #6]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a548:	88fb      	ldrh	r3, [r7, #6]
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	2100      	movs	r1, #0
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f003 fbac 	bl	800dcac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b084      	sub	sp, #16
 800a562:	af00      	add	r7, sp, #0
 800a564:	60f8      	str	r0, [r7, #12]
 800a566:	60b9      	str	r1, [r7, #8]
 800a568:	4613      	mov	r3, r2
 800a56a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a56c:	88fb      	ldrh	r3, [r7, #6]
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	2100      	movs	r1, #0
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f003 fb9a 	bl	800dcac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b082      	sub	sp, #8
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2204      	movs	r2, #4
 800a58e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a592:	2300      	movs	r3, #0
 800a594:	2200      	movs	r2, #0
 800a596:	2100      	movs	r1, #0
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f003 fb64 	bl	800dc66 <USBD_LL_Transmit>

  return USBD_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2205      	movs	r2, #5
 800a5b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	2100      	movs	r1, #0
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f003 fb74 	bl	800dcac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a5d0:	b480      	push	{r7}
 800a5d2:	b085      	sub	sp, #20
 800a5d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5d6:	f3ef 8305 	mrs	r3, IPSR
 800a5da:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10f      	bne.n	800a602 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5e2:	f3ef 8310 	mrs	r3, PRIMASK
 800a5e6:	607b      	str	r3, [r7, #4]
  return(result);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d109      	bne.n	800a602 <osKernelInitialize+0x32>
 800a5ee:	4b10      	ldr	r3, [pc, #64]	; (800a630 <osKernelInitialize+0x60>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d109      	bne.n	800a60a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a5f6:	f3ef 8311 	mrs	r3, BASEPRI
 800a5fa:	603b      	str	r3, [r7, #0]
  return(result);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a602:	f06f 0305 	mvn.w	r3, #5
 800a606:	60fb      	str	r3, [r7, #12]
 800a608:	e00c      	b.n	800a624 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a60a:	4b09      	ldr	r3, [pc, #36]	; (800a630 <osKernelInitialize+0x60>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d105      	bne.n	800a61e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800a612:	4b07      	ldr	r3, [pc, #28]	; (800a630 <osKernelInitialize+0x60>)
 800a614:	2201      	movs	r2, #1
 800a616:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a618:	2300      	movs	r3, #0
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	e002      	b.n	800a624 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a61e:	f04f 33ff 	mov.w	r3, #4294967295
 800a622:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a624:	68fb      	ldr	r3, [r7, #12]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bc80      	pop	{r7}
 800a62e:	4770      	bx	lr
 800a630:	200001b4 	.word	0x200001b4

0800a634 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a63a:	f3ef 8305 	mrs	r3, IPSR
 800a63e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a640:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a642:	2b00      	cmp	r3, #0
 800a644:	d10f      	bne.n	800a666 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a646:	f3ef 8310 	mrs	r3, PRIMASK
 800a64a:	607b      	str	r3, [r7, #4]
  return(result);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d109      	bne.n	800a666 <osKernelStart+0x32>
 800a652:	4b11      	ldr	r3, [pc, #68]	; (800a698 <osKernelStart+0x64>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b02      	cmp	r3, #2
 800a658:	d109      	bne.n	800a66e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a65a:	f3ef 8311 	mrs	r3, BASEPRI
 800a65e:	603b      	str	r3, [r7, #0]
  return(result);
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d003      	beq.n	800a66e <osKernelStart+0x3a>
    stat = osErrorISR;
 800a666:	f06f 0305 	mvn.w	r3, #5
 800a66a:	60fb      	str	r3, [r7, #12]
 800a66c:	e00e      	b.n	800a68c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800a66e:	4b0a      	ldr	r3, [pc, #40]	; (800a698 <osKernelStart+0x64>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2b01      	cmp	r3, #1
 800a674:	d107      	bne.n	800a686 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800a676:	4b08      	ldr	r3, [pc, #32]	; (800a698 <osKernelStart+0x64>)
 800a678:	2202      	movs	r2, #2
 800a67a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a67c:	f001 f9ba 	bl	800b9f4 <vTaskStartScheduler>
      stat = osOK;
 800a680:	2300      	movs	r3, #0
 800a682:	60fb      	str	r3, [r7, #12]
 800a684:	e002      	b.n	800a68c <osKernelStart+0x58>
    } else {
      stat = osError;
 800a686:	f04f 33ff 	mov.w	r3, #4294967295
 800a68a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a68c:	68fb      	ldr	r3, [r7, #12]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	200001b4 	.word	0x200001b4

0800a69c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b092      	sub	sp, #72	; 0x48
 800a6a0:	af04      	add	r7, sp, #16
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6ac:	f3ef 8305 	mrs	r3, IPSR
 800a6b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f040 8094 	bne.w	800a7e2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6ba:	f3ef 8310 	mrs	r3, PRIMASK
 800a6be:	623b      	str	r3, [r7, #32]
  return(result);
 800a6c0:	6a3b      	ldr	r3, [r7, #32]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f040 808d 	bne.w	800a7e2 <osThreadNew+0x146>
 800a6c8:	4b48      	ldr	r3, [pc, #288]	; (800a7ec <osThreadNew+0x150>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b02      	cmp	r3, #2
 800a6ce:	d106      	bne.n	800a6de <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a6d0:	f3ef 8311 	mrs	r3, BASEPRI
 800a6d4:	61fb      	str	r3, [r7, #28]
  return(result);
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f040 8082 	bne.w	800a7e2 <osThreadNew+0x146>
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d07e      	beq.n	800a7e2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800a6e4:	2380      	movs	r3, #128	; 0x80
 800a6e6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800a6e8:	2318      	movs	r3, #24
 800a6ea:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800a6f0:	f107 031b 	add.w	r3, r7, #27
 800a6f4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800a6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6fa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d045      	beq.n	800a78e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d002      	beq.n	800a710 <osThreadNew+0x74>
        name = attr->name;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a720:	2b00      	cmp	r3, #0
 800a722:	d008      	beq.n	800a736 <osThreadNew+0x9a>
 800a724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a726:	2b38      	cmp	r3, #56	; 0x38
 800a728:	d805      	bhi.n	800a736 <osThreadNew+0x9a>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <osThreadNew+0x9e>
        return (NULL);
 800a736:	2300      	movs	r3, #0
 800a738:	e054      	b.n	800a7e4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	695b      	ldr	r3, [r3, #20]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d003      	beq.n	800a74a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	089b      	lsrs	r3, r3, #2
 800a748:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00e      	beq.n	800a770 <osThreadNew+0xd4>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	2b5b      	cmp	r3, #91	; 0x5b
 800a758:	d90a      	bls.n	800a770 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d006      	beq.n	800a770 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d002      	beq.n	800a770 <osThreadNew+0xd4>
        mem = 1;
 800a76a:	2301      	movs	r3, #1
 800a76c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a76e:	e010      	b.n	800a792 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10c      	bne.n	800a792 <osThreadNew+0xf6>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d108      	bne.n	800a792 <osThreadNew+0xf6>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d104      	bne.n	800a792 <osThreadNew+0xf6>
          mem = 0;
 800a788:	2300      	movs	r3, #0
 800a78a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a78c:	e001      	b.n	800a792 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800a78e:	2300      	movs	r3, #0
 800a790:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800a792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a794:	2b01      	cmp	r3, #1
 800a796:	d110      	bne.n	800a7ba <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7a0:	9202      	str	r2, [sp, #8]
 800a7a2:	9301      	str	r3, [sp, #4]
 800a7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f000 fed6 	bl	800b560 <xTaskCreateStatic>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	617b      	str	r3, [r7, #20]
 800a7b8:	e013      	b.n	800a7e2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d110      	bne.n	800a7e2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	f107 0314 	add.w	r3, r7, #20
 800a7c8:	9301      	str	r3, [sp, #4]
 800a7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 ff20 	bl	800b618 <xTaskCreate>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d001      	beq.n	800a7e2 <osThreadNew+0x146>
          hTask = NULL;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a7e2:	697b      	ldr	r3, [r7, #20]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3738      	adds	r7, #56	; 0x38
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	200001b4 	.word	0x200001b4

0800a7f0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7f8:	f3ef 8305 	mrs	r3, IPSR
 800a7fc:	613b      	str	r3, [r7, #16]
  return(result);
 800a7fe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a800:	2b00      	cmp	r3, #0
 800a802:	d10f      	bne.n	800a824 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a804:	f3ef 8310 	mrs	r3, PRIMASK
 800a808:	60fb      	str	r3, [r7, #12]
  return(result);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d109      	bne.n	800a824 <osDelay+0x34>
 800a810:	4b0d      	ldr	r3, [pc, #52]	; (800a848 <osDelay+0x58>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b02      	cmp	r3, #2
 800a816:	d109      	bne.n	800a82c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a818:	f3ef 8311 	mrs	r3, BASEPRI
 800a81c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d003      	beq.n	800a82c <osDelay+0x3c>
    stat = osErrorISR;
 800a824:	f06f 0305 	mvn.w	r3, #5
 800a828:	617b      	str	r3, [r7, #20]
 800a82a:	e007      	b.n	800a83c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d002      	beq.n	800a83c <osDelay+0x4c>
      vTaskDelay(ticks);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f001 f8a8 	bl	800b98c <vTaskDelay>
    }
  }

  return (stat);
 800a83c:	697b      	ldr	r3, [r7, #20]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3718      	adds	r7, #24
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	200001b4 	.word	0x200001b4

0800a84c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b08c      	sub	sp, #48	; 0x30
 800a850:	af02      	add	r7, sp, #8
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a858:	2300      	movs	r3, #0
 800a85a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a85c:	f3ef 8305 	mrs	r3, IPSR
 800a860:	61bb      	str	r3, [r7, #24]
  return(result);
 800a862:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a864:	2b00      	cmp	r3, #0
 800a866:	d16f      	bne.n	800a948 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a868:	f3ef 8310 	mrs	r3, PRIMASK
 800a86c:	617b      	str	r3, [r7, #20]
  return(result);
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d169      	bne.n	800a948 <osMessageQueueNew+0xfc>
 800a874:	4b37      	ldr	r3, [pc, #220]	; (800a954 <osMessageQueueNew+0x108>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d105      	bne.n	800a888 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a87c:	f3ef 8311 	mrs	r3, BASEPRI
 800a880:	613b      	str	r3, [r7, #16]
  return(result);
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d15f      	bne.n	800a948 <osMessageQueueNew+0xfc>
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d05c      	beq.n	800a948 <osMessageQueueNew+0xfc>
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d059      	beq.n	800a948 <osMessageQueueNew+0xfc>
    mem = -1;
 800a894:	f04f 33ff 	mov.w	r3, #4294967295
 800a898:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d029      	beq.n	800a8f4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d012      	beq.n	800a8ce <osMessageQueueNew+0x82>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	2b4f      	cmp	r3, #79	; 0x4f
 800a8ae:	d90e      	bls.n	800a8ce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00a      	beq.n	800a8ce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	695a      	ldr	r2, [r3, #20]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	68b9      	ldr	r1, [r7, #8]
 800a8c0:	fb01 f303 	mul.w	r3, r1, r3
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d302      	bcc.n	800a8ce <osMessageQueueNew+0x82>
        mem = 1;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	623b      	str	r3, [r7, #32]
 800a8cc:	e014      	b.n	800a8f8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d110      	bne.n	800a8f8 <osMessageQueueNew+0xac>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10c      	bne.n	800a8f8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d108      	bne.n	800a8f8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d104      	bne.n	800a8f8 <osMessageQueueNew+0xac>
          mem = 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	623b      	str	r3, [r7, #32]
 800a8f2:	e001      	b.n	800a8f8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d10b      	bne.n	800a916 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	691a      	ldr	r2, [r3, #16]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	2100      	movs	r1, #0
 800a908:	9100      	str	r1, [sp, #0]
 800a90a:	68b9      	ldr	r1, [r7, #8]
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f000 f96d 	bl	800abec <xQueueGenericCreateStatic>
 800a912:	6278      	str	r0, [r7, #36]	; 0x24
 800a914:	e008      	b.n	800a928 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d105      	bne.n	800a928 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a91c:	2200      	movs	r2, #0
 800a91e:	68b9      	ldr	r1, [r7, #8]
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f000 f9da 	bl	800acda <xQueueGenericCreate>
 800a926:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00c      	beq.n	800a948 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d003      	beq.n	800a93c <osMessageQueueNew+0xf0>
        name = attr->name;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	61fb      	str	r3, [r7, #28]
 800a93a:	e001      	b.n	800a940 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a93c:	2300      	movs	r3, #0
 800a93e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a940:	69f9      	ldr	r1, [r7, #28]
 800a942:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a944:	f000 fdb0 	bl	800b4a8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3728      	adds	r7, #40	; 0x28
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	200001b4 	.word	0x200001b4

0800a958 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	4a06      	ldr	r2, [pc, #24]	; (800a980 <vApplicationGetIdleTaskMemory+0x28>)
 800a968:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	4a05      	ldr	r2, [pc, #20]	; (800a984 <vApplicationGetIdleTaskMemory+0x2c>)
 800a96e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2280      	movs	r2, #128	; 0x80
 800a974:	601a      	str	r2, [r3, #0]
}
 800a976:	bf00      	nop
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bc80      	pop	{r7}
 800a97e:	4770      	bx	lr
 800a980:	200001b8 	.word	0x200001b8
 800a984:	20000214 	.word	0x20000214

0800a988 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	4a07      	ldr	r2, [pc, #28]	; (800a9b4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a998:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	4a06      	ldr	r2, [pc, #24]	; (800a9b8 <vApplicationGetTimerTaskMemory+0x30>)
 800a99e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9a6:	601a      	str	r2, [r3, #0]
}
 800a9a8:	bf00      	nop
 800a9aa:	3714      	adds	r7, #20
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bc80      	pop	{r7}
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	20000414 	.word	0x20000414
 800a9b8:	20000470 	.word	0x20000470

0800a9bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f103 0208 	add.w	r2, r3, #8
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f103 0208 	add.w	r2, r3, #8
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f103 0208 	add.w	r2, r3, #8
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bc80      	pop	{r7}
 800a9f8:	4770      	bx	lr

0800a9fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b083      	sub	sp, #12
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bc80      	pop	{r7}
 800aa10:	4770      	bx	lr

0800aa12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa12:	b480      	push	{r7}
 800aa14:	b085      	sub	sp, #20
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
 800aa1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	689a      	ldr	r2, [r3, #8]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	1c5a      	adds	r2, r3, #1
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	601a      	str	r2, [r3, #0]
}
 800aa4e:	bf00      	nop
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bc80      	pop	{r7}
 800aa56:	4770      	bx	lr

0800aa58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa6e:	d103      	bne.n	800aa78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	e00c      	b.n	800aa92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	3308      	adds	r3, #8
 800aa7c:	60fb      	str	r3, [r7, #12]
 800aa7e:	e002      	b.n	800aa86 <vListInsert+0x2e>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	60fb      	str	r3, [r7, #12]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d2f6      	bcs.n	800aa80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	685a      	ldr	r2, [r3, #4]
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	1c5a      	adds	r2, r3, #1
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	601a      	str	r2, [r3, #0]
}
 800aabe:	bf00      	nop
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bc80      	pop	{r7}
 800aac6:	4770      	bx	lr

0800aac8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	6892      	ldr	r2, [r2, #8]
 800aade:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	6852      	ldr	r2, [r2, #4]
 800aae8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d103      	bne.n	800aafc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	689a      	ldr	r2, [r3, #8]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	1e5a      	subs	r2, r3, #1
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3714      	adds	r7, #20
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bc80      	pop	{r7}
 800ab18:	4770      	bx	lr
	...

0800ab1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10a      	bne.n	800ab46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab42:	bf00      	nop
 800ab44:	e7fe      	b.n	800ab44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab46:	f002 f999 	bl	800ce7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab52:	68f9      	ldr	r1, [r7, #12]
 800ab54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab56:	fb01 f303 	mul.w	r3, r1, r3
 800ab5a:	441a      	add	r2, r3
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab76:	3b01      	subs	r3, #1
 800ab78:	68f9      	ldr	r1, [r7, #12]
 800ab7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab7c:	fb01 f303 	mul.w	r3, r1, r3
 800ab80:	441a      	add	r2, r3
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	22ff      	movs	r2, #255	; 0xff
 800ab8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	22ff      	movs	r2, #255	; 0xff
 800ab92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d114      	bne.n	800abc6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d01a      	beq.n	800abda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	3310      	adds	r3, #16
 800aba8:	4618      	mov	r0, r3
 800abaa:	f001 f9ad 	bl	800bf08 <xTaskRemoveFromEventList>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d012      	beq.n	800abda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800abb4:	4b0c      	ldr	r3, [pc, #48]	; (800abe8 <xQueueGenericReset+0xcc>)
 800abb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	e009      	b.n	800abda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	3310      	adds	r3, #16
 800abca:	4618      	mov	r0, r3
 800abcc:	f7ff fef6 	bl	800a9bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	3324      	adds	r3, #36	; 0x24
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7ff fef1 	bl	800a9bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800abda:	f002 f97f 	bl	800cedc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800abde:	2301      	movs	r3, #1
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	e000ed04 	.word	0xe000ed04

0800abec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800abec:	b580      	push	{r7, lr}
 800abee:	b08e      	sub	sp, #56	; 0x38
 800abf0:	af02      	add	r7, sp, #8
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d10a      	bne.n	800ac16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ac00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac04:	f383 8811 	msr	BASEPRI, r3
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac12:	bf00      	nop
 800ac14:	e7fe      	b.n	800ac14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10a      	bne.n	800ac32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ac1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac2e:	bf00      	nop
 800ac30:	e7fe      	b.n	800ac30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d002      	beq.n	800ac3e <xQueueGenericCreateStatic+0x52>
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <xQueueGenericCreateStatic+0x56>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e000      	b.n	800ac44 <xQueueGenericCreateStatic+0x58>
 800ac42:	2300      	movs	r3, #0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d10a      	bne.n	800ac5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	623b      	str	r3, [r7, #32]
}
 800ac5a:	bf00      	nop
 800ac5c:	e7fe      	b.n	800ac5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d102      	bne.n	800ac6a <xQueueGenericCreateStatic+0x7e>
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d101      	bne.n	800ac6e <xQueueGenericCreateStatic+0x82>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e000      	b.n	800ac70 <xQueueGenericCreateStatic+0x84>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10a      	bne.n	800ac8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	61fb      	str	r3, [r7, #28]
}
 800ac86:	bf00      	nop
 800ac88:	e7fe      	b.n	800ac88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac8a:	2350      	movs	r3, #80	; 0x50
 800ac8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	2b50      	cmp	r3, #80	; 0x50
 800ac92:	d00a      	beq.n	800acaa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ac94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac98:	f383 8811 	msr	BASEPRI, r3
 800ac9c:	f3bf 8f6f 	isb	sy
 800aca0:	f3bf 8f4f 	dsb	sy
 800aca4:	61bb      	str	r3, [r7, #24]
}
 800aca6:	bf00      	nop
 800aca8:	e7fe      	b.n	800aca8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800acae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00d      	beq.n	800acd0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800acb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acbc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800acc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	4613      	mov	r3, r2
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	68b9      	ldr	r1, [r7, #8]
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f000 f843 	bl	800ad56 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800acd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3730      	adds	r7, #48	; 0x30
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b08a      	sub	sp, #40	; 0x28
 800acde:	af02      	add	r7, sp, #8
 800ace0:	60f8      	str	r0, [r7, #12]
 800ace2:	60b9      	str	r1, [r7, #8]
 800ace4:	4613      	mov	r3, r2
 800ace6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10a      	bne.n	800ad04 <xQueueGenericCreate+0x2a>
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	613b      	str	r3, [r7, #16]
}
 800ad00:	bf00      	nop
 800ad02:	e7fe      	b.n	800ad02 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d102      	bne.n	800ad10 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	61fb      	str	r3, [r7, #28]
 800ad0e:	e004      	b.n	800ad1a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	fb02 f303 	mul.w	r3, r2, r3
 800ad18:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	3350      	adds	r3, #80	; 0x50
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f002 f9ac 	bl	800d07c <pvPortMalloc>
 800ad24:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00f      	beq.n	800ad4c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	3350      	adds	r3, #80	; 0x50
 800ad30:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad3a:	79fa      	ldrb	r2, [r7, #7]
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	4613      	mov	r3, r2
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	68b9      	ldr	r1, [r7, #8]
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f000 f805 	bl	800ad56 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ad4c:	69bb      	ldr	r3, [r7, #24]
	}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3720      	adds	r7, #32
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	60b9      	str	r1, [r7, #8]
 800ad60:	607a      	str	r2, [r7, #4]
 800ad62:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d103      	bne.n	800ad72 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	69ba      	ldr	r2, [r7, #24]
 800ad6e:	601a      	str	r2, [r3, #0]
 800ad70:	e002      	b.n	800ad78 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad84:	2101      	movs	r1, #1
 800ad86:	69b8      	ldr	r0, [r7, #24]
 800ad88:	f7ff fec8 	bl	800ab1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	78fa      	ldrb	r2, [r7, #3]
 800ad90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad94:	bf00      	nop
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08e      	sub	sp, #56	; 0x38
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800adaa:	2300      	movs	r3, #0
 800adac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10a      	bne.n	800adce <xQueueGenericSend+0x32>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800adca:	bf00      	nop
 800adcc:	e7fe      	b.n	800adcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d103      	bne.n	800addc <xQueueGenericSend+0x40>
 800add4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add8:	2b00      	cmp	r3, #0
 800adda:	d101      	bne.n	800ade0 <xQueueGenericSend+0x44>
 800addc:	2301      	movs	r3, #1
 800adde:	e000      	b.n	800ade2 <xQueueGenericSend+0x46>
 800ade0:	2300      	movs	r3, #0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10a      	bne.n	800adfc <xQueueGenericSend+0x60>
	__asm volatile
 800ade6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adf8:	bf00      	nop
 800adfa:	e7fe      	b.n	800adfa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d103      	bne.n	800ae0a <xQueueGenericSend+0x6e>
 800ae02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d101      	bne.n	800ae0e <xQueueGenericSend+0x72>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e000      	b.n	800ae10 <xQueueGenericSend+0x74>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10a      	bne.n	800ae2a <xQueueGenericSend+0x8e>
	__asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	623b      	str	r3, [r7, #32]
}
 800ae26:	bf00      	nop
 800ae28:	e7fe      	b.n	800ae28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae2a:	f001 fa67 	bl	800c2fc <xTaskGetSchedulerState>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d102      	bne.n	800ae3a <xQueueGenericSend+0x9e>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d101      	bne.n	800ae3e <xQueueGenericSend+0xa2>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e000      	b.n	800ae40 <xQueueGenericSend+0xa4>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10a      	bne.n	800ae5a <xQueueGenericSend+0xbe>
	__asm volatile
 800ae44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae48:	f383 8811 	msr	BASEPRI, r3
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	61fb      	str	r3, [r7, #28]
}
 800ae56:	bf00      	nop
 800ae58:	e7fe      	b.n	800ae58 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae5a:	f002 f80f 	bl	800ce7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d302      	bcc.n	800ae70 <xQueueGenericSend+0xd4>
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d129      	bne.n	800aec4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	68b9      	ldr	r1, [r7, #8]
 800ae74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae76:	f000 fa07 	bl	800b288 <prvCopyDataToQueue>
 800ae7a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d010      	beq.n	800aea6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae86:	3324      	adds	r3, #36	; 0x24
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f001 f83d 	bl	800bf08 <xTaskRemoveFromEventList>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d013      	beq.n	800aebc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae94:	4b3f      	ldr	r3, [pc, #252]	; (800af94 <xQueueGenericSend+0x1f8>)
 800ae96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae9a:	601a      	str	r2, [r3, #0]
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	e00a      	b.n	800aebc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d007      	beq.n	800aebc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aeac:	4b39      	ldr	r3, [pc, #228]	; (800af94 <xQueueGenericSend+0x1f8>)
 800aeae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeb2:	601a      	str	r2, [r3, #0]
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aebc:	f002 f80e 	bl	800cedc <vPortExitCritical>
				return pdPASS;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e063      	b.n	800af8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d103      	bne.n	800aed2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aeca:	f002 f807 	bl	800cedc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aece:	2300      	movs	r3, #0
 800aed0:	e05c      	b.n	800af8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d106      	bne.n	800aee6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aed8:	f107 0314 	add.w	r3, r7, #20
 800aedc:	4618      	mov	r0, r3
 800aede:	f001 f877 	bl	800bfd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aee2:	2301      	movs	r3, #1
 800aee4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aee6:	f001 fff9 	bl	800cedc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aeea:	f000 fde9 	bl	800bac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aeee:	f001 ffc5 	bl	800ce7c <vPortEnterCritical>
 800aef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aef8:	b25b      	sxtb	r3, r3
 800aefa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefe:	d103      	bne.n	800af08 <xQueueGenericSend+0x16c>
 800af00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af02:	2200      	movs	r2, #0
 800af04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af0e:	b25b      	sxtb	r3, r3
 800af10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af14:	d103      	bne.n	800af1e <xQueueGenericSend+0x182>
 800af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af1e:	f001 ffdd 	bl	800cedc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af22:	1d3a      	adds	r2, r7, #4
 800af24:	f107 0314 	add.w	r3, r7, #20
 800af28:	4611      	mov	r1, r2
 800af2a:	4618      	mov	r0, r3
 800af2c:	f001 f866 	bl	800bffc <xTaskCheckForTimeOut>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d124      	bne.n	800af80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af38:	f000 fa9e 	bl	800b478 <prvIsQueueFull>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d018      	beq.n	800af74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	3310      	adds	r3, #16
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	4611      	mov	r1, r2
 800af4a:	4618      	mov	r0, r3
 800af4c:	f000 ff8c 	bl	800be68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af52:	f000 fa29 	bl	800b3a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af56:	f000 fdc1 	bl	800badc <xTaskResumeAll>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f47f af7c 	bne.w	800ae5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af62:	4b0c      	ldr	r3, [pc, #48]	; (800af94 <xQueueGenericSend+0x1f8>)
 800af64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af68:	601a      	str	r2, [r3, #0]
 800af6a:	f3bf 8f4f 	dsb	sy
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	e772      	b.n	800ae5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af76:	f000 fa17 	bl	800b3a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af7a:	f000 fdaf 	bl	800badc <xTaskResumeAll>
 800af7e:	e76c      	b.n	800ae5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af82:	f000 fa11 	bl	800b3a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af86:	f000 fda9 	bl	800badc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af8a:	2300      	movs	r3, #0
		}
	}
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3738      	adds	r7, #56	; 0x38
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	e000ed04 	.word	0xe000ed04

0800af98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b08e      	sub	sp, #56	; 0x38
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10a      	bne.n	800afc6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afc2:	bf00      	nop
 800afc4:	e7fe      	b.n	800afc4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d103      	bne.n	800afd4 <xQueueGenericSendFromISR+0x3c>
 800afcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d101      	bne.n	800afd8 <xQueueGenericSendFromISR+0x40>
 800afd4:	2301      	movs	r3, #1
 800afd6:	e000      	b.n	800afda <xQueueGenericSendFromISR+0x42>
 800afd8:	2300      	movs	r3, #0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d10a      	bne.n	800aff4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800afde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe2:	f383 8811 	msr	BASEPRI, r3
 800afe6:	f3bf 8f6f 	isb	sy
 800afea:	f3bf 8f4f 	dsb	sy
 800afee:	623b      	str	r3, [r7, #32]
}
 800aff0:	bf00      	nop
 800aff2:	e7fe      	b.n	800aff2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d103      	bne.n	800b002 <xQueueGenericSendFromISR+0x6a>
 800affa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800affe:	2b01      	cmp	r3, #1
 800b000:	d101      	bne.n	800b006 <xQueueGenericSendFromISR+0x6e>
 800b002:	2301      	movs	r3, #1
 800b004:	e000      	b.n	800b008 <xQueueGenericSendFromISR+0x70>
 800b006:	2300      	movs	r3, #0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10a      	bne.n	800b022 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	61fb      	str	r3, [r7, #28]
}
 800b01e:	bf00      	nop
 800b020:	e7fe      	b.n	800b020 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b022:	f001 ffed 	bl	800d000 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b026:	f3ef 8211 	mrs	r2, BASEPRI
 800b02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02e:	f383 8811 	msr	BASEPRI, r3
 800b032:	f3bf 8f6f 	isb	sy
 800b036:	f3bf 8f4f 	dsb	sy
 800b03a:	61ba      	str	r2, [r7, #24]
 800b03c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b03e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b040:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d302      	bcc.n	800b054 <xQueueGenericSendFromISR+0xbc>
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	2b02      	cmp	r3, #2
 800b052:	d12c      	bne.n	800b0ae <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b05a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	68b9      	ldr	r1, [r7, #8]
 800b062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b064:	f000 f910 	bl	800b288 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b068:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b070:	d112      	bne.n	800b098 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b076:	2b00      	cmp	r3, #0
 800b078:	d016      	beq.n	800b0a8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07c:	3324      	adds	r3, #36	; 0x24
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 ff42 	bl	800bf08 <xTaskRemoveFromEventList>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00e      	beq.n	800b0a8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00b      	beq.n	800b0a8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	601a      	str	r2, [r3, #0]
 800b096:	e007      	b.n	800b0a8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b098:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b09c:	3301      	adds	r3, #1
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	b25a      	sxtb	r2, r3
 800b0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b0ac:	e001      	b.n	800b0b2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	637b      	str	r3, [r7, #52]	; 0x34
 800b0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b0bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3738      	adds	r7, #56	; 0x38
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b08c      	sub	sp, #48	; 0x30
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d10a      	bne.n	800b0f8 <xQueueReceive+0x30>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	623b      	str	r3, [r7, #32]
}
 800b0f4:	bf00      	nop
 800b0f6:	e7fe      	b.n	800b0f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d103      	bne.n	800b106 <xQueueReceive+0x3e>
 800b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b102:	2b00      	cmp	r3, #0
 800b104:	d101      	bne.n	800b10a <xQueueReceive+0x42>
 800b106:	2301      	movs	r3, #1
 800b108:	e000      	b.n	800b10c <xQueueReceive+0x44>
 800b10a:	2300      	movs	r3, #0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10a      	bne.n	800b126 <xQueueReceive+0x5e>
	__asm volatile
 800b110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b114:	f383 8811 	msr	BASEPRI, r3
 800b118:	f3bf 8f6f 	isb	sy
 800b11c:	f3bf 8f4f 	dsb	sy
 800b120:	61fb      	str	r3, [r7, #28]
}
 800b122:	bf00      	nop
 800b124:	e7fe      	b.n	800b124 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b126:	f001 f8e9 	bl	800c2fc <xTaskGetSchedulerState>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d102      	bne.n	800b136 <xQueueReceive+0x6e>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d101      	bne.n	800b13a <xQueueReceive+0x72>
 800b136:	2301      	movs	r3, #1
 800b138:	e000      	b.n	800b13c <xQueueReceive+0x74>
 800b13a:	2300      	movs	r3, #0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10a      	bne.n	800b156 <xQueueReceive+0x8e>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	61bb      	str	r3, [r7, #24]
}
 800b152:	bf00      	nop
 800b154:	e7fe      	b.n	800b154 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b156:	f001 fe91 	bl	800ce7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b15e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	2b00      	cmp	r3, #0
 800b164:	d01f      	beq.n	800b1a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b166:	68b9      	ldr	r1, [r7, #8]
 800b168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b16a:	f000 f8f7 	bl	800b35c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b170:	1e5a      	subs	r2, r3, #1
 800b172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b174:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00f      	beq.n	800b19e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b180:	3310      	adds	r3, #16
 800b182:	4618      	mov	r0, r3
 800b184:	f000 fec0 	bl	800bf08 <xTaskRemoveFromEventList>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d007      	beq.n	800b19e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b18e:	4b3d      	ldr	r3, [pc, #244]	; (800b284 <xQueueReceive+0x1bc>)
 800b190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b194:	601a      	str	r2, [r3, #0]
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b19e:	f001 fe9d 	bl	800cedc <vPortExitCritical>
				return pdPASS;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e069      	b.n	800b27a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d103      	bne.n	800b1b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1ac:	f001 fe96 	bl	800cedc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	e062      	b.n	800b27a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d106      	bne.n	800b1c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1ba:	f107 0310 	add.w	r3, r7, #16
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f000 ff06 	bl	800bfd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1c8:	f001 fe88 	bl	800cedc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1cc:	f000 fc78 	bl	800bac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1d0:	f001 fe54 	bl	800ce7c <vPortEnterCritical>
 800b1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1da:	b25b      	sxtb	r3, r3
 800b1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e0:	d103      	bne.n	800b1ea <xQueueReceive+0x122>
 800b1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1f0:	b25b      	sxtb	r3, r3
 800b1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f6:	d103      	bne.n	800b200 <xQueueReceive+0x138>
 800b1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b200:	f001 fe6c 	bl	800cedc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b204:	1d3a      	adds	r2, r7, #4
 800b206:	f107 0310 	add.w	r3, r7, #16
 800b20a:	4611      	mov	r1, r2
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 fef5 	bl	800bffc <xTaskCheckForTimeOut>
 800b212:	4603      	mov	r3, r0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d123      	bne.n	800b260 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b21a:	f000 f917 	bl	800b44c <prvIsQueueEmpty>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d017      	beq.n	800b254 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b226:	3324      	adds	r3, #36	; 0x24
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	4611      	mov	r1, r2
 800b22c:	4618      	mov	r0, r3
 800b22e:	f000 fe1b 	bl	800be68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b234:	f000 f8b8 	bl	800b3a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b238:	f000 fc50 	bl	800badc <xTaskResumeAll>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d189      	bne.n	800b156 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b242:	4b10      	ldr	r3, [pc, #64]	; (800b284 <xQueueReceive+0x1bc>)
 800b244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	e780      	b.n	800b156 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b256:	f000 f8a7 	bl	800b3a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b25a:	f000 fc3f 	bl	800badc <xTaskResumeAll>
 800b25e:	e77a      	b.n	800b156 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b262:	f000 f8a1 	bl	800b3a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b266:	f000 fc39 	bl	800badc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b26a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b26c:	f000 f8ee 	bl	800b44c <prvIsQueueEmpty>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	f43f af6f 	beq.w	800b156 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b278:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3730      	adds	r7, #48	; 0x30
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	e000ed04 	.word	0xe000ed04

0800b288 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b294:	2300      	movs	r3, #0
 800b296:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10d      	bne.n	800b2c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d14d      	bne.n	800b34a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f001 f840 	bl	800c338 <xTaskPriorityDisinherit>
 800b2b8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	605a      	str	r2, [r3, #4]
 800b2c0:	e043      	b.n	800b34a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d119      	bne.n	800b2fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6898      	ldr	r0, [r3, #8]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	68b9      	ldr	r1, [r7, #8]
 800b2d4:	f002 fd90 	bl	800ddf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	689a      	ldr	r2, [r3, #8]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e0:	441a      	add	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	689a      	ldr	r2, [r3, #8]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d32b      	bcc.n	800b34a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	609a      	str	r2, [r3, #8]
 800b2fa:	e026      	b.n	800b34a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	68d8      	ldr	r0, [r3, #12]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b304:	461a      	mov	r2, r3
 800b306:	68b9      	ldr	r1, [r7, #8]
 800b308:	f002 fd76 	bl	800ddf8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	68da      	ldr	r2, [r3, #12]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b314:	425b      	negs	r3, r3
 800b316:	441a      	add	r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	68da      	ldr	r2, [r3, #12]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	429a      	cmp	r2, r3
 800b326:	d207      	bcs.n	800b338 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	685a      	ldr	r2, [r3, #4]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b330:	425b      	negs	r3, r3
 800b332:	441a      	add	r2, r3
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d105      	bne.n	800b34a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d002      	beq.n	800b34a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	3b01      	subs	r3, #1
 800b348:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	1c5a      	adds	r2, r3, #1
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b352:	697b      	ldr	r3, [r7, #20]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3718      	adds	r7, #24
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d018      	beq.n	800b3a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	68da      	ldr	r2, [r3, #12]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b376:	441a      	add	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68da      	ldr	r2, [r3, #12]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	429a      	cmp	r2, r3
 800b386:	d303      	bcc.n	800b390 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	68d9      	ldr	r1, [r3, #12]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b398:	461a      	mov	r2, r3
 800b39a:	6838      	ldr	r0, [r7, #0]
 800b39c:	f002 fd2c 	bl	800ddf8 <memcpy>
	}
}
 800b3a0:	bf00      	nop
 800b3a2:	3708      	adds	r7, #8
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b3b0:	f001 fd64 	bl	800ce7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3bc:	e011      	b.n	800b3e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d012      	beq.n	800b3ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	3324      	adds	r3, #36	; 0x24
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f000 fd9c 	bl	800bf08 <xTaskRemoveFromEventList>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d001      	beq.n	800b3da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b3d6:	f000 fe73 	bl	800c0c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b3da:	7bfb      	ldrb	r3, [r7, #15]
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	dce9      	bgt.n	800b3be <prvUnlockQueue+0x16>
 800b3ea:	e000      	b.n	800b3ee <prvUnlockQueue+0x46>
					break;
 800b3ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	22ff      	movs	r2, #255	; 0xff
 800b3f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b3f6:	f001 fd71 	bl	800cedc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b3fa:	f001 fd3f 	bl	800ce7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b404:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b406:	e011      	b.n	800b42c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	691b      	ldr	r3, [r3, #16]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d012      	beq.n	800b436 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	3310      	adds	r3, #16
 800b414:	4618      	mov	r0, r3
 800b416:	f000 fd77 	bl	800bf08 <xTaskRemoveFromEventList>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d001      	beq.n	800b424 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b420:	f000 fe4e 	bl	800c0c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b424:	7bbb      	ldrb	r3, [r7, #14]
 800b426:	3b01      	subs	r3, #1
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b42c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b430:	2b00      	cmp	r3, #0
 800b432:	dce9      	bgt.n	800b408 <prvUnlockQueue+0x60>
 800b434:	e000      	b.n	800b438 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b436:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	22ff      	movs	r2, #255	; 0xff
 800b43c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b440:	f001 fd4c 	bl	800cedc <vPortExitCritical>
}
 800b444:	bf00      	nop
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b454:	f001 fd12 	bl	800ce7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d102      	bne.n	800b466 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b460:	2301      	movs	r3, #1
 800b462:	60fb      	str	r3, [r7, #12]
 800b464:	e001      	b.n	800b46a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b466:	2300      	movs	r3, #0
 800b468:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b46a:	f001 fd37 	bl	800cedc <vPortExitCritical>

	return xReturn;
 800b46e:	68fb      	ldr	r3, [r7, #12]
}
 800b470:	4618      	mov	r0, r3
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b480:	f001 fcfc 	bl	800ce7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d102      	bne.n	800b496 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b490:	2301      	movs	r3, #1
 800b492:	60fb      	str	r3, [r7, #12]
 800b494:	e001      	b.n	800b49a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b496:	2300      	movs	r3, #0
 800b498:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b49a:	f001 fd1f 	bl	800cedc <vPortExitCritical>

	return xReturn;
 800b49e:	68fb      	ldr	r3, [r7, #12]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	60fb      	str	r3, [r7, #12]
 800b4b6:	e014      	b.n	800b4e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b4b8:	4a0e      	ldr	r2, [pc, #56]	; (800b4f4 <vQueueAddToRegistry+0x4c>)
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10b      	bne.n	800b4dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b4c4:	490b      	ldr	r1, [pc, #44]	; (800b4f4 <vQueueAddToRegistry+0x4c>)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b4ce:	4a09      	ldr	r2, [pc, #36]	; (800b4f4 <vQueueAddToRegistry+0x4c>)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	00db      	lsls	r3, r3, #3
 800b4d4:	4413      	add	r3, r2
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b4da:	e006      	b.n	800b4ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	60fb      	str	r3, [r7, #12]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2b07      	cmp	r3, #7
 800b4e6:	d9e7      	bls.n	800b4b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b4e8:	bf00      	nop
 800b4ea:	bf00      	nop
 800b4ec:	3714      	adds	r7, #20
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bc80      	pop	{r7}
 800b4f2:	4770      	bx	lr
 800b4f4:	20002660 	.word	0x20002660

0800b4f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b508:	f001 fcb8 	bl	800ce7c <vPortEnterCritical>
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b512:	b25b      	sxtb	r3, r3
 800b514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b518:	d103      	bne.n	800b522 <vQueueWaitForMessageRestricted+0x2a>
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b528:	b25b      	sxtb	r3, r3
 800b52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52e:	d103      	bne.n	800b538 <vQueueWaitForMessageRestricted+0x40>
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	2200      	movs	r2, #0
 800b534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b538:	f001 fcd0 	bl	800cedc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b540:	2b00      	cmp	r3, #0
 800b542:	d106      	bne.n	800b552 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	3324      	adds	r3, #36	; 0x24
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	68b9      	ldr	r1, [r7, #8]
 800b54c:	4618      	mov	r0, r3
 800b54e:	f000 fcaf 	bl	800beb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b552:	6978      	ldr	r0, [r7, #20]
 800b554:	f7ff ff28 	bl	800b3a8 <prvUnlockQueue>
	}
 800b558:	bf00      	nop
 800b55a:	3718      	adds	r7, #24
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b560:	b580      	push	{r7, lr}
 800b562:	b08e      	sub	sp, #56	; 0x38
 800b564:	af04      	add	r7, sp, #16
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
 800b56c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b570:	2b00      	cmp	r3, #0
 800b572:	d10a      	bne.n	800b58a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	623b      	str	r3, [r7, #32]
}
 800b586:	bf00      	nop
 800b588:	e7fe      	b.n	800b588 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10a      	bne.n	800b5a6 <xTaskCreateStatic+0x46>
	__asm volatile
 800b590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	61fb      	str	r3, [r7, #28]
}
 800b5a2:	bf00      	nop
 800b5a4:	e7fe      	b.n	800b5a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b5a6:	235c      	movs	r3, #92	; 0x5c
 800b5a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	2b5c      	cmp	r3, #92	; 0x5c
 800b5ae:	d00a      	beq.n	800b5c6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	61bb      	str	r3, [r7, #24]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d01e      	beq.n	800b60a <xTaskCreateStatic+0xaa>
 800b5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d01b      	beq.n	800b60a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5de:	2202      	movs	r2, #2
 800b5e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	9303      	str	r3, [sp, #12]
 800b5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ea:	9302      	str	r3, [sp, #8]
 800b5ec:	f107 0314 	add.w	r3, r7, #20
 800b5f0:	9301      	str	r3, [sp, #4]
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	68b9      	ldr	r1, [r7, #8]
 800b5fc:	68f8      	ldr	r0, [r7, #12]
 800b5fe:	f000 f850 	bl	800b6a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b602:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b604:	f000 f8d4 	bl	800b7b0 <prvAddNewTaskToReadyList>
 800b608:	e001      	b.n	800b60e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b60a:	2300      	movs	r3, #0
 800b60c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b60e:	697b      	ldr	r3, [r7, #20]
	}
 800b610:	4618      	mov	r0, r3
 800b612:	3728      	adds	r7, #40	; 0x28
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08c      	sub	sp, #48	; 0x30
 800b61c:	af04      	add	r7, sp, #16
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	603b      	str	r3, [r7, #0]
 800b624:	4613      	mov	r3, r2
 800b626:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b628:	88fb      	ldrh	r3, [r7, #6]
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	4618      	mov	r0, r3
 800b62e:	f001 fd25 	bl	800d07c <pvPortMalloc>
 800b632:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00e      	beq.n	800b658 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b63a:	205c      	movs	r0, #92	; 0x5c
 800b63c:	f001 fd1e 	bl	800d07c <pvPortMalloc>
 800b640:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d003      	beq.n	800b650 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	697a      	ldr	r2, [r7, #20]
 800b64c:	631a      	str	r2, [r3, #48]	; 0x30
 800b64e:	e005      	b.n	800b65c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b650:	6978      	ldr	r0, [r7, #20]
 800b652:	f001 fdd7 	bl	800d204 <vPortFree>
 800b656:	e001      	b.n	800b65c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b658:	2300      	movs	r3, #0
 800b65a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d017      	beq.n	800b692 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	2200      	movs	r2, #0
 800b666:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b66a:	88fa      	ldrh	r2, [r7, #6]
 800b66c:	2300      	movs	r3, #0
 800b66e:	9303      	str	r3, [sp, #12]
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	9302      	str	r3, [sp, #8]
 800b674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b676:	9301      	str	r3, [sp, #4]
 800b678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67a:	9300      	str	r3, [sp, #0]
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	68b9      	ldr	r1, [r7, #8]
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f000 f80e 	bl	800b6a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b686:	69f8      	ldr	r0, [r7, #28]
 800b688:	f000 f892 	bl	800b7b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b68c:	2301      	movs	r3, #1
 800b68e:	61bb      	str	r3, [r7, #24]
 800b690:	e002      	b.n	800b698 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b692:	f04f 33ff 	mov.w	r3, #4294967295
 800b696:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b698:	69bb      	ldr	r3, [r7, #24]
	}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3720      	adds	r7, #32
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b088      	sub	sp, #32
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	60f8      	str	r0, [r7, #12]
 800b6aa:	60b9      	str	r1, [r7, #8]
 800b6ac:	607a      	str	r2, [r7, #4]
 800b6ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	21a5      	movs	r1, #165	; 0xa5
 800b6bc:	f002 fbc4 	bl	800de48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	4413      	add	r3, r2
 800b6d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b6d2:	69bb      	ldr	r3, [r7, #24]
 800b6d4:	f023 0307 	bic.w	r3, r3, #7
 800b6d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	f003 0307 	and.w	r3, r3, #7
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00a      	beq.n	800b6fa <prvInitialiseNewTask+0x58>
	__asm volatile
 800b6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e8:	f383 8811 	msr	BASEPRI, r3
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	617b      	str	r3, [r7, #20]
}
 800b6f6:	bf00      	nop
 800b6f8:	e7fe      	b.n	800b6f8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	61fb      	str	r3, [r7, #28]
 800b6fe:	e012      	b.n	800b726 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	4413      	add	r3, r2
 800b706:	7819      	ldrb	r1, [r3, #0]
 800b708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	4413      	add	r3, r2
 800b70e:	3334      	adds	r3, #52	; 0x34
 800b710:	460a      	mov	r2, r1
 800b712:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b714:	68ba      	ldr	r2, [r7, #8]
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	4413      	add	r3, r2
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d006      	beq.n	800b72e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	3301      	adds	r3, #1
 800b724:	61fb      	str	r3, [r7, #28]
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	2b0f      	cmp	r3, #15
 800b72a:	d9e9      	bls.n	800b700 <prvInitialiseNewTask+0x5e>
 800b72c:	e000      	b.n	800b730 <prvInitialiseNewTask+0x8e>
		{
			break;
 800b72e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b732:	2200      	movs	r2, #0
 800b734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73a:	2b37      	cmp	r3, #55	; 0x37
 800b73c:	d901      	bls.n	800b742 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b73e:	2337      	movs	r3, #55	; 0x37
 800b740:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b746:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b74c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b750:	2200      	movs	r2, #0
 800b752:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b756:	3304      	adds	r3, #4
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff f94e 	bl	800a9fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b760:	3318      	adds	r3, #24
 800b762:	4618      	mov	r0, r3
 800b764:	f7ff f949 	bl	800a9fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b76c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b770:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b77c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b780:	2200      	movs	r2, #0
 800b782:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b786:	2200      	movs	r2, #0
 800b788:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b78c:	683a      	ldr	r2, [r7, #0]
 800b78e:	68f9      	ldr	r1, [r7, #12]
 800b790:	69b8      	ldr	r0, [r7, #24]
 800b792:	f001 fa81 	bl	800cc98 <pxPortInitialiseStack>
 800b796:	4602      	mov	r2, r0
 800b798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d002      	beq.n	800b7a8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7a8:	bf00      	nop
 800b7aa:	3720      	adds	r7, #32
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7b8:	f001 fb60 	bl	800ce7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7bc:	4b2d      	ldr	r3, [pc, #180]	; (800b874 <prvAddNewTaskToReadyList+0xc4>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	4a2c      	ldr	r2, [pc, #176]	; (800b874 <prvAddNewTaskToReadyList+0xc4>)
 800b7c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7c6:	4b2c      	ldr	r3, [pc, #176]	; (800b878 <prvAddNewTaskToReadyList+0xc8>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d109      	bne.n	800b7e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7ce:	4a2a      	ldr	r2, [pc, #168]	; (800b878 <prvAddNewTaskToReadyList+0xc8>)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7d4:	4b27      	ldr	r3, [pc, #156]	; (800b874 <prvAddNewTaskToReadyList+0xc4>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d110      	bne.n	800b7fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b7dc:	f000 fc94 	bl	800c108 <prvInitialiseTaskLists>
 800b7e0:	e00d      	b.n	800b7fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b7e2:	4b26      	ldr	r3, [pc, #152]	; (800b87c <prvAddNewTaskToReadyList+0xcc>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d109      	bne.n	800b7fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b7ea:	4b23      	ldr	r3, [pc, #140]	; (800b878 <prvAddNewTaskToReadyList+0xc8>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d802      	bhi.n	800b7fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b7f8:	4a1f      	ldr	r2, [pc, #124]	; (800b878 <prvAddNewTaskToReadyList+0xc8>)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b7fe:	4b20      	ldr	r3, [pc, #128]	; (800b880 <prvAddNewTaskToReadyList+0xd0>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	3301      	adds	r3, #1
 800b804:	4a1e      	ldr	r2, [pc, #120]	; (800b880 <prvAddNewTaskToReadyList+0xd0>)
 800b806:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b808:	4b1d      	ldr	r3, [pc, #116]	; (800b880 <prvAddNewTaskToReadyList+0xd0>)
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b814:	4b1b      	ldr	r3, [pc, #108]	; (800b884 <prvAddNewTaskToReadyList+0xd4>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d903      	bls.n	800b824 <prvAddNewTaskToReadyList+0x74>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b820:	4a18      	ldr	r2, [pc, #96]	; (800b884 <prvAddNewTaskToReadyList+0xd4>)
 800b822:	6013      	str	r3, [r2, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b828:	4613      	mov	r3, r2
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	4413      	add	r3, r2
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	4a15      	ldr	r2, [pc, #84]	; (800b888 <prvAddNewTaskToReadyList+0xd8>)
 800b832:	441a      	add	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	3304      	adds	r3, #4
 800b838:	4619      	mov	r1, r3
 800b83a:	4610      	mov	r0, r2
 800b83c:	f7ff f8e9 	bl	800aa12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b840:	f001 fb4c 	bl	800cedc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b844:	4b0d      	ldr	r3, [pc, #52]	; (800b87c <prvAddNewTaskToReadyList+0xcc>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00e      	beq.n	800b86a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b84c:	4b0a      	ldr	r3, [pc, #40]	; (800b878 <prvAddNewTaskToReadyList+0xc8>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b856:	429a      	cmp	r2, r3
 800b858:	d207      	bcs.n	800b86a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b85a:	4b0c      	ldr	r3, [pc, #48]	; (800b88c <prvAddNewTaskToReadyList+0xdc>)
 800b85c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b860:	601a      	str	r2, [r3, #0]
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b86a:	bf00      	nop
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	20000d44 	.word	0x20000d44
 800b878:	20000870 	.word	0x20000870
 800b87c:	20000d50 	.word	0x20000d50
 800b880:	20000d60 	.word	0x20000d60
 800b884:	20000d4c 	.word	0x20000d4c
 800b888:	20000874 	.word	0x20000874
 800b88c:	e000ed04 	.word	0xe000ed04

0800b890 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b890:	b580      	push	{r7, lr}
 800b892:	b08a      	sub	sp, #40	; 0x28
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b89a:	2300      	movs	r3, #0
 800b89c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10a      	bne.n	800b8ba <vTaskDelayUntil+0x2a>
	__asm volatile
 800b8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	617b      	str	r3, [r7, #20]
}
 800b8b6:	bf00      	nop
 800b8b8:	e7fe      	b.n	800b8b8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10a      	bne.n	800b8d6 <vTaskDelayUntil+0x46>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	613b      	str	r3, [r7, #16]
}
 800b8d2:	bf00      	nop
 800b8d4:	e7fe      	b.n	800b8d4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b8d6:	4b2a      	ldr	r3, [pc, #168]	; (800b980 <vTaskDelayUntil+0xf0>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00a      	beq.n	800b8f4 <vTaskDelayUntil+0x64>
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e2:	f383 8811 	msr	BASEPRI, r3
 800b8e6:	f3bf 8f6f 	isb	sy
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	60fb      	str	r3, [r7, #12]
}
 800b8f0:	bf00      	nop
 800b8f2:	e7fe      	b.n	800b8f2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b8f4:	f000 f8e4 	bl	800bac0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b8f8:	4b22      	ldr	r3, [pc, #136]	; (800b984 <vTaskDelayUntil+0xf4>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	4413      	add	r3, r2
 800b906:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6a3a      	ldr	r2, [r7, #32]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d20b      	bcs.n	800b92a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	69fa      	ldr	r2, [r7, #28]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d211      	bcs.n	800b940 <vTaskDelayUntil+0xb0>
 800b91c:	69fa      	ldr	r2, [r7, #28]
 800b91e:	6a3b      	ldr	r3, [r7, #32]
 800b920:	429a      	cmp	r2, r3
 800b922:	d90d      	bls.n	800b940 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b924:	2301      	movs	r3, #1
 800b926:	627b      	str	r3, [r7, #36]	; 0x24
 800b928:	e00a      	b.n	800b940 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	69fa      	ldr	r2, [r7, #28]
 800b930:	429a      	cmp	r2, r3
 800b932:	d303      	bcc.n	800b93c <vTaskDelayUntil+0xac>
 800b934:	69fa      	ldr	r2, [r7, #28]
 800b936:	6a3b      	ldr	r3, [r7, #32]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d901      	bls.n	800b940 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b93c:	2301      	movs	r3, #1
 800b93e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	69fa      	ldr	r2, [r7, #28]
 800b944:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d006      	beq.n	800b95a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b94c:	69fa      	ldr	r2, [r7, #28]
 800b94e:	6a3b      	ldr	r3, [r7, #32]
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	2100      	movs	r1, #0
 800b954:	4618      	mov	r0, r3
 800b956:	f000 fe39 	bl	800c5cc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b95a:	f000 f8bf 	bl	800badc <xTaskResumeAll>
 800b95e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d107      	bne.n	800b976 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b966:	4b08      	ldr	r3, [pc, #32]	; (800b988 <vTaskDelayUntil+0xf8>)
 800b968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b96c:	601a      	str	r2, [r3, #0]
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b976:	bf00      	nop
 800b978:	3728      	adds	r7, #40	; 0x28
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	20000d6c 	.word	0x20000d6c
 800b984:	20000d48 	.word	0x20000d48
 800b988:	e000ed04 	.word	0xe000ed04

0800b98c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b994:	2300      	movs	r3, #0
 800b996:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d017      	beq.n	800b9ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b99e:	4b13      	ldr	r3, [pc, #76]	; (800b9ec <vTaskDelay+0x60>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00a      	beq.n	800b9bc <vTaskDelay+0x30>
	__asm volatile
 800b9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9aa:	f383 8811 	msr	BASEPRI, r3
 800b9ae:	f3bf 8f6f 	isb	sy
 800b9b2:	f3bf 8f4f 	dsb	sy
 800b9b6:	60bb      	str	r3, [r7, #8]
}
 800b9b8:	bf00      	nop
 800b9ba:	e7fe      	b.n	800b9ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b9bc:	f000 f880 	bl	800bac0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fe02 	bl	800c5cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b9c8:	f000 f888 	bl	800badc <xTaskResumeAll>
 800b9cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d107      	bne.n	800b9e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b9d4:	4b06      	ldr	r3, [pc, #24]	; (800b9f0 <vTaskDelay+0x64>)
 800b9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9da:	601a      	str	r2, [r3, #0]
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9e4:	bf00      	nop
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	20000d6c 	.word	0x20000d6c
 800b9f0:	e000ed04 	.word	0xe000ed04

0800b9f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b08a      	sub	sp, #40	; 0x28
 800b9f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ba02:	463a      	mov	r2, r7
 800ba04:	1d39      	adds	r1, r7, #4
 800ba06:	f107 0308 	add.w	r3, r7, #8
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fe ffa4 	bl	800a958 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ba10:	6839      	ldr	r1, [r7, #0]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	68ba      	ldr	r2, [r7, #8]
 800ba16:	9202      	str	r2, [sp, #8]
 800ba18:	9301      	str	r3, [sp, #4]
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	9300      	str	r3, [sp, #0]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	460a      	mov	r2, r1
 800ba22:	4921      	ldr	r1, [pc, #132]	; (800baa8 <vTaskStartScheduler+0xb4>)
 800ba24:	4821      	ldr	r0, [pc, #132]	; (800baac <vTaskStartScheduler+0xb8>)
 800ba26:	f7ff fd9b 	bl	800b560 <xTaskCreateStatic>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	4a20      	ldr	r2, [pc, #128]	; (800bab0 <vTaskStartScheduler+0xbc>)
 800ba2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ba30:	4b1f      	ldr	r3, [pc, #124]	; (800bab0 <vTaskStartScheduler+0xbc>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d002      	beq.n	800ba3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	617b      	str	r3, [r7, #20]
 800ba3c:	e001      	b.n	800ba42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d102      	bne.n	800ba4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ba48:	f000 fe14 	bl	800c674 <xTimerCreateTimerTask>
 800ba4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d116      	bne.n	800ba82 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ba54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba58:	f383 8811 	msr	BASEPRI, r3
 800ba5c:	f3bf 8f6f 	isb	sy
 800ba60:	f3bf 8f4f 	dsb	sy
 800ba64:	613b      	str	r3, [r7, #16]
}
 800ba66:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ba68:	4b12      	ldr	r3, [pc, #72]	; (800bab4 <vTaskStartScheduler+0xc0>)
 800ba6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ba70:	4b11      	ldr	r3, [pc, #68]	; (800bab8 <vTaskStartScheduler+0xc4>)
 800ba72:	2201      	movs	r2, #1
 800ba74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ba76:	4b11      	ldr	r3, [pc, #68]	; (800babc <vTaskStartScheduler+0xc8>)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ba7c:	f001 f98c 	bl	800cd98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ba80:	e00e      	b.n	800baa0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba88:	d10a      	bne.n	800baa0 <vTaskStartScheduler+0xac>
	__asm volatile
 800ba8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	60fb      	str	r3, [r7, #12]
}
 800ba9c:	bf00      	nop
 800ba9e:	e7fe      	b.n	800ba9e <vTaskStartScheduler+0xaa>
}
 800baa0:	bf00      	nop
 800baa2:	3718      	adds	r7, #24
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	0800e0a8 	.word	0x0800e0a8
 800baac:	0800c0d9 	.word	0x0800c0d9
 800bab0:	20000d68 	.word	0x20000d68
 800bab4:	20000d64 	.word	0x20000d64
 800bab8:	20000d50 	.word	0x20000d50
 800babc:	20000d48 	.word	0x20000d48

0800bac0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bac0:	b480      	push	{r7}
 800bac2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bac4:	4b04      	ldr	r3, [pc, #16]	; (800bad8 <vTaskSuspendAll+0x18>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	3301      	adds	r3, #1
 800baca:	4a03      	ldr	r2, [pc, #12]	; (800bad8 <vTaskSuspendAll+0x18>)
 800bacc:	6013      	str	r3, [r2, #0]
}
 800bace:	bf00      	nop
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bc80      	pop	{r7}
 800bad4:	4770      	bx	lr
 800bad6:	bf00      	nop
 800bad8:	20000d6c 	.word	0x20000d6c

0800badc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bae2:	2300      	movs	r3, #0
 800bae4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bae6:	2300      	movs	r3, #0
 800bae8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800baea:	4b42      	ldr	r3, [pc, #264]	; (800bbf4 <xTaskResumeAll+0x118>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10a      	bne.n	800bb08 <xTaskResumeAll+0x2c>
	__asm volatile
 800baf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	603b      	str	r3, [r7, #0]
}
 800bb04:	bf00      	nop
 800bb06:	e7fe      	b.n	800bb06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bb08:	f001 f9b8 	bl	800ce7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bb0c:	4b39      	ldr	r3, [pc, #228]	; (800bbf4 <xTaskResumeAll+0x118>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	3b01      	subs	r3, #1
 800bb12:	4a38      	ldr	r2, [pc, #224]	; (800bbf4 <xTaskResumeAll+0x118>)
 800bb14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb16:	4b37      	ldr	r3, [pc, #220]	; (800bbf4 <xTaskResumeAll+0x118>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d162      	bne.n	800bbe4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb1e:	4b36      	ldr	r3, [pc, #216]	; (800bbf8 <xTaskResumeAll+0x11c>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d05e      	beq.n	800bbe4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb26:	e02f      	b.n	800bb88 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800bb28:	4b34      	ldr	r3, [pc, #208]	; (800bbfc <xTaskResumeAll+0x120>)
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	3318      	adds	r3, #24
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7fe ffc7 	bl	800aac8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fe ffc2 	bl	800aac8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb48:	4b2d      	ldr	r3, [pc, #180]	; (800bc00 <xTaskResumeAll+0x124>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d903      	bls.n	800bb58 <xTaskResumeAll+0x7c>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	4a2a      	ldr	r2, [pc, #168]	; (800bc00 <xTaskResumeAll+0x124>)
 800bb56:	6013      	str	r3, [r2, #0]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	4413      	add	r3, r2
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4a27      	ldr	r2, [pc, #156]	; (800bc04 <xTaskResumeAll+0x128>)
 800bb66:	441a      	add	r2, r3
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	4610      	mov	r0, r2
 800bb70:	f7fe ff4f 	bl	800aa12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb78:	4b23      	ldr	r3, [pc, #140]	; (800bc08 <xTaskResumeAll+0x12c>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d302      	bcc.n	800bb88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bb82:	4b22      	ldr	r3, [pc, #136]	; (800bc0c <xTaskResumeAll+0x130>)
 800bb84:	2201      	movs	r2, #1
 800bb86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb88:	4b1c      	ldr	r3, [pc, #112]	; (800bbfc <xTaskResumeAll+0x120>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1cb      	bne.n	800bb28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d001      	beq.n	800bb9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bb96:	f000 fb8d 	bl	800c2b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bb9a:	4b1d      	ldr	r3, [pc, #116]	; (800bc10 <xTaskResumeAll+0x134>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d010      	beq.n	800bbc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bba6:	f000 f845 	bl	800bc34 <xTaskIncrementTick>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bbb0:	4b16      	ldr	r3, [pc, #88]	; (800bc0c <xTaskResumeAll+0x130>)
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1f1      	bne.n	800bba6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800bbc2:	4b13      	ldr	r3, [pc, #76]	; (800bc10 <xTaskResumeAll+0x134>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bbc8:	4b10      	ldr	r3, [pc, #64]	; (800bc0c <xTaskResumeAll+0x130>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d009      	beq.n	800bbe4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bbd4:	4b0f      	ldr	r3, [pc, #60]	; (800bc14 <xTaskResumeAll+0x138>)
 800bbd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbda:	601a      	str	r2, [r3, #0]
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bbe4:	f001 f97a 	bl	800cedc <vPortExitCritical>

	return xAlreadyYielded;
 800bbe8:	68bb      	ldr	r3, [r7, #8]
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	20000d6c 	.word	0x20000d6c
 800bbf8:	20000d44 	.word	0x20000d44
 800bbfc:	20000d04 	.word	0x20000d04
 800bc00:	20000d4c 	.word	0x20000d4c
 800bc04:	20000874 	.word	0x20000874
 800bc08:	20000870 	.word	0x20000870
 800bc0c:	20000d58 	.word	0x20000d58
 800bc10:	20000d54 	.word	0x20000d54
 800bc14:	e000ed04 	.word	0xe000ed04

0800bc18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bc1e:	4b04      	ldr	r3, [pc, #16]	; (800bc30 <xTaskGetTickCount+0x18>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bc24:	687b      	ldr	r3, [r7, #4]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	370c      	adds	r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bc80      	pop	{r7}
 800bc2e:	4770      	bx	lr
 800bc30:	20000d48 	.word	0x20000d48

0800bc34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc3e:	4b51      	ldr	r3, [pc, #324]	; (800bd84 <xTaskIncrementTick+0x150>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f040 808e 	bne.w	800bd64 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bc48:	4b4f      	ldr	r3, [pc, #316]	; (800bd88 <xTaskIncrementTick+0x154>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bc50:	4a4d      	ldr	r2, [pc, #308]	; (800bd88 <xTaskIncrementTick+0x154>)
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d120      	bne.n	800bc9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bc5c:	4b4b      	ldr	r3, [pc, #300]	; (800bd8c <xTaskIncrementTick+0x158>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00a      	beq.n	800bc7c <xTaskIncrementTick+0x48>
	__asm volatile
 800bc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6a:	f383 8811 	msr	BASEPRI, r3
 800bc6e:	f3bf 8f6f 	isb	sy
 800bc72:	f3bf 8f4f 	dsb	sy
 800bc76:	603b      	str	r3, [r7, #0]
}
 800bc78:	bf00      	nop
 800bc7a:	e7fe      	b.n	800bc7a <xTaskIncrementTick+0x46>
 800bc7c:	4b43      	ldr	r3, [pc, #268]	; (800bd8c <xTaskIncrementTick+0x158>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	60fb      	str	r3, [r7, #12]
 800bc82:	4b43      	ldr	r3, [pc, #268]	; (800bd90 <xTaskIncrementTick+0x15c>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4a41      	ldr	r2, [pc, #260]	; (800bd8c <xTaskIncrementTick+0x158>)
 800bc88:	6013      	str	r3, [r2, #0]
 800bc8a:	4a41      	ldr	r2, [pc, #260]	; (800bd90 <xTaskIncrementTick+0x15c>)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6013      	str	r3, [r2, #0]
 800bc90:	4b40      	ldr	r3, [pc, #256]	; (800bd94 <xTaskIncrementTick+0x160>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	3301      	adds	r3, #1
 800bc96:	4a3f      	ldr	r2, [pc, #252]	; (800bd94 <xTaskIncrementTick+0x160>)
 800bc98:	6013      	str	r3, [r2, #0]
 800bc9a:	f000 fb0b 	bl	800c2b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc9e:	4b3e      	ldr	r3, [pc, #248]	; (800bd98 <xTaskIncrementTick+0x164>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	693a      	ldr	r2, [r7, #16]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d34e      	bcc.n	800bd46 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bca8:	4b38      	ldr	r3, [pc, #224]	; (800bd8c <xTaskIncrementTick+0x158>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d101      	bne.n	800bcb6 <xTaskIncrementTick+0x82>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e000      	b.n	800bcb8 <xTaskIncrementTick+0x84>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d004      	beq.n	800bcc6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcbc:	4b36      	ldr	r3, [pc, #216]	; (800bd98 <xTaskIncrementTick+0x164>)
 800bcbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc2:	601a      	str	r2, [r3, #0]
					break;
 800bcc4:	e03f      	b.n	800bd46 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bcc6:	4b31      	ldr	r3, [pc, #196]	; (800bd8c <xTaskIncrementTick+0x158>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bcd6:	693a      	ldr	r2, [r7, #16]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d203      	bcs.n	800bce6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bcde:	4a2e      	ldr	r2, [pc, #184]	; (800bd98 <xTaskIncrementTick+0x164>)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6013      	str	r3, [r2, #0]
						break;
 800bce4:	e02f      	b.n	800bd46 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	3304      	adds	r3, #4
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fe feec 	bl	800aac8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d004      	beq.n	800bd02 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	3318      	adds	r3, #24
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7fe fee3 	bl	800aac8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd06:	4b25      	ldr	r3, [pc, #148]	; (800bd9c <xTaskIncrementTick+0x168>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d903      	bls.n	800bd16 <xTaskIncrementTick+0xe2>
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd12:	4a22      	ldr	r2, [pc, #136]	; (800bd9c <xTaskIncrementTick+0x168>)
 800bd14:	6013      	str	r3, [r2, #0]
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4a1f      	ldr	r2, [pc, #124]	; (800bda0 <xTaskIncrementTick+0x16c>)
 800bd24:	441a      	add	r2, r3
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	3304      	adds	r3, #4
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	f7fe fe70 	bl	800aa12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd36:	4b1b      	ldr	r3, [pc, #108]	; (800bda4 <xTaskIncrementTick+0x170>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d3b3      	bcc.n	800bca8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bd40:	2301      	movs	r3, #1
 800bd42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd44:	e7b0      	b.n	800bca8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd46:	4b17      	ldr	r3, [pc, #92]	; (800bda4 <xTaskIncrementTick+0x170>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd4c:	4914      	ldr	r1, [pc, #80]	; (800bda0 <xTaskIncrementTick+0x16c>)
 800bd4e:	4613      	mov	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4413      	add	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	440b      	add	r3, r1
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d907      	bls.n	800bd6e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	617b      	str	r3, [r7, #20]
 800bd62:	e004      	b.n	800bd6e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bd64:	4b10      	ldr	r3, [pc, #64]	; (800bda8 <xTaskIncrementTick+0x174>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	4a0f      	ldr	r2, [pc, #60]	; (800bda8 <xTaskIncrementTick+0x174>)
 800bd6c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bd6e:	4b0f      	ldr	r3, [pc, #60]	; (800bdac <xTaskIncrementTick+0x178>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d001      	beq.n	800bd7a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800bd76:	2301      	movs	r3, #1
 800bd78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bd7a:	697b      	ldr	r3, [r7, #20]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3718      	adds	r7, #24
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	20000d6c 	.word	0x20000d6c
 800bd88:	20000d48 	.word	0x20000d48
 800bd8c:	20000cfc 	.word	0x20000cfc
 800bd90:	20000d00 	.word	0x20000d00
 800bd94:	20000d5c 	.word	0x20000d5c
 800bd98:	20000d64 	.word	0x20000d64
 800bd9c:	20000d4c 	.word	0x20000d4c
 800bda0:	20000874 	.word	0x20000874
 800bda4:	20000870 	.word	0x20000870
 800bda8:	20000d54 	.word	0x20000d54
 800bdac:	20000d58 	.word	0x20000d58

0800bdb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bdb6:	4b27      	ldr	r3, [pc, #156]	; (800be54 <vTaskSwitchContext+0xa4>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bdbe:	4b26      	ldr	r3, [pc, #152]	; (800be58 <vTaskSwitchContext+0xa8>)
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bdc4:	e041      	b.n	800be4a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bdc6:	4b24      	ldr	r3, [pc, #144]	; (800be58 <vTaskSwitchContext+0xa8>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800bdcc:	4b23      	ldr	r3, [pc, #140]	; (800be5c <vTaskSwitchContext+0xac>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	60fb      	str	r3, [r7, #12]
 800bdd2:	e010      	b.n	800bdf6 <vTaskSwitchContext+0x46>
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10a      	bne.n	800bdf0 <vTaskSwitchContext+0x40>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	607b      	str	r3, [r7, #4]
}
 800bdec:	bf00      	nop
 800bdee:	e7fe      	b.n	800bdee <vTaskSwitchContext+0x3e>
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	60fb      	str	r3, [r7, #12]
 800bdf6:	491a      	ldr	r1, [pc, #104]	; (800be60 <vTaskSwitchContext+0xb0>)
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	4413      	add	r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	440b      	add	r3, r1
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d0e4      	beq.n	800bdd4 <vTaskSwitchContext+0x24>
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	4613      	mov	r3, r2
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4413      	add	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4a12      	ldr	r2, [pc, #72]	; (800be60 <vTaskSwitchContext+0xb0>)
 800be16:	4413      	add	r3, r2
 800be18:	60bb      	str	r3, [r7, #8]
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	685a      	ldr	r2, [r3, #4]
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	605a      	str	r2, [r3, #4]
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	685a      	ldr	r2, [r3, #4]
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	3308      	adds	r3, #8
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d104      	bne.n	800be3a <vTaskSwitchContext+0x8a>
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	685a      	ldr	r2, [r3, #4]
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	605a      	str	r2, [r3, #4]
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	4a08      	ldr	r2, [pc, #32]	; (800be64 <vTaskSwitchContext+0xb4>)
 800be42:	6013      	str	r3, [r2, #0]
 800be44:	4a05      	ldr	r2, [pc, #20]	; (800be5c <vTaskSwitchContext+0xac>)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6013      	str	r3, [r2, #0]
}
 800be4a:	bf00      	nop
 800be4c:	3714      	adds	r7, #20
 800be4e:	46bd      	mov	sp, r7
 800be50:	bc80      	pop	{r7}
 800be52:	4770      	bx	lr
 800be54:	20000d6c 	.word	0x20000d6c
 800be58:	20000d58 	.word	0x20000d58
 800be5c:	20000d4c 	.word	0x20000d4c
 800be60:	20000874 	.word	0x20000874
 800be64:	20000870 	.word	0x20000870

0800be68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d10a      	bne.n	800be8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800be78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7c:	f383 8811 	msr	BASEPRI, r3
 800be80:	f3bf 8f6f 	isb	sy
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	60fb      	str	r3, [r7, #12]
}
 800be8a:	bf00      	nop
 800be8c:	e7fe      	b.n	800be8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be8e:	4b07      	ldr	r3, [pc, #28]	; (800beac <vTaskPlaceOnEventList+0x44>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	3318      	adds	r3, #24
 800be94:	4619      	mov	r1, r3
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7fe fdde 	bl	800aa58 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be9c:	2101      	movs	r1, #1
 800be9e:	6838      	ldr	r0, [r7, #0]
 800bea0:	f000 fb94 	bl	800c5cc <prvAddCurrentTaskToDelayedList>
}
 800bea4:	bf00      	nop
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	20000870 	.word	0x20000870

0800beb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b086      	sub	sp, #24
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10a      	bne.n	800bed8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	617b      	str	r3, [r7, #20]
}
 800bed4:	bf00      	nop
 800bed6:	e7fe      	b.n	800bed6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bed8:	4b0a      	ldr	r3, [pc, #40]	; (800bf04 <vTaskPlaceOnEventListRestricted+0x54>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	3318      	adds	r3, #24
 800bede:	4619      	mov	r1, r3
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f7fe fd96 	bl	800aa12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d002      	beq.n	800bef2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800beec:	f04f 33ff 	mov.w	r3, #4294967295
 800bef0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bef2:	6879      	ldr	r1, [r7, #4]
 800bef4:	68b8      	ldr	r0, [r7, #8]
 800bef6:	f000 fb69 	bl	800c5cc <prvAddCurrentTaskToDelayedList>
	}
 800befa:	bf00      	nop
 800befc:	3718      	adds	r7, #24
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	20000870 	.word	0x20000870

0800bf08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10a      	bne.n	800bf34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	60fb      	str	r3, [r7, #12]
}
 800bf30:	bf00      	nop
 800bf32:	e7fe      	b.n	800bf32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	3318      	adds	r3, #24
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7fe fdc5 	bl	800aac8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf3e:	4b1e      	ldr	r3, [pc, #120]	; (800bfb8 <xTaskRemoveFromEventList+0xb0>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d11d      	bne.n	800bf82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	3304      	adds	r3, #4
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fe fdbc 	bl	800aac8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf54:	4b19      	ldr	r3, [pc, #100]	; (800bfbc <xTaskRemoveFromEventList+0xb4>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d903      	bls.n	800bf64 <xTaskRemoveFromEventList+0x5c>
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf60:	4a16      	ldr	r2, [pc, #88]	; (800bfbc <xTaskRemoveFromEventList+0xb4>)
 800bf62:	6013      	str	r3, [r2, #0]
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf68:	4613      	mov	r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	4a13      	ldr	r2, [pc, #76]	; (800bfc0 <xTaskRemoveFromEventList+0xb8>)
 800bf72:	441a      	add	r2, r3
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	3304      	adds	r3, #4
 800bf78:	4619      	mov	r1, r3
 800bf7a:	4610      	mov	r0, r2
 800bf7c:	f7fe fd49 	bl	800aa12 <vListInsertEnd>
 800bf80:	e005      	b.n	800bf8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	3318      	adds	r3, #24
 800bf86:	4619      	mov	r1, r3
 800bf88:	480e      	ldr	r0, [pc, #56]	; (800bfc4 <xTaskRemoveFromEventList+0xbc>)
 800bf8a:	f7fe fd42 	bl	800aa12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf92:	4b0d      	ldr	r3, [pc, #52]	; (800bfc8 <xTaskRemoveFromEventList+0xc0>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d905      	bls.n	800bfa8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bfa0:	4b0a      	ldr	r3, [pc, #40]	; (800bfcc <xTaskRemoveFromEventList+0xc4>)
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	601a      	str	r2, [r3, #0]
 800bfa6:	e001      	b.n	800bfac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bfac:	697b      	ldr	r3, [r7, #20]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3718      	adds	r7, #24
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	20000d6c 	.word	0x20000d6c
 800bfbc:	20000d4c 	.word	0x20000d4c
 800bfc0:	20000874 	.word	0x20000874
 800bfc4:	20000d04 	.word	0x20000d04
 800bfc8:	20000870 	.word	0x20000870
 800bfcc:	20000d58 	.word	0x20000d58

0800bfd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bfd8:	4b06      	ldr	r3, [pc, #24]	; (800bff4 <vTaskInternalSetTimeOutState+0x24>)
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bfe0:	4b05      	ldr	r3, [pc, #20]	; (800bff8 <vTaskInternalSetTimeOutState+0x28>)
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	605a      	str	r2, [r3, #4]
}
 800bfe8:	bf00      	nop
 800bfea:	370c      	adds	r7, #12
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bc80      	pop	{r7}
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	20000d5c 	.word	0x20000d5c
 800bff8:	20000d48 	.word	0x20000d48

0800bffc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b088      	sub	sp, #32
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d10a      	bne.n	800c022 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c010:	f383 8811 	msr	BASEPRI, r3
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	613b      	str	r3, [r7, #16]
}
 800c01e:	bf00      	nop
 800c020:	e7fe      	b.n	800c020 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d10a      	bne.n	800c03e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02c:	f383 8811 	msr	BASEPRI, r3
 800c030:	f3bf 8f6f 	isb	sy
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	60fb      	str	r3, [r7, #12]
}
 800c03a:	bf00      	nop
 800c03c:	e7fe      	b.n	800c03c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c03e:	f000 ff1d 	bl	800ce7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c042:	4b1d      	ldr	r3, [pc, #116]	; (800c0b8 <xTaskCheckForTimeOut+0xbc>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	69ba      	ldr	r2, [r7, #24]
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05a:	d102      	bne.n	800c062 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c05c:	2300      	movs	r3, #0
 800c05e:	61fb      	str	r3, [r7, #28]
 800c060:	e023      	b.n	800c0aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	4b15      	ldr	r3, [pc, #84]	; (800c0bc <xTaskCheckForTimeOut+0xc0>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d007      	beq.n	800c07e <xTaskCheckForTimeOut+0x82>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	69ba      	ldr	r2, [r7, #24]
 800c074:	429a      	cmp	r2, r3
 800c076:	d302      	bcc.n	800c07e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c078:	2301      	movs	r3, #1
 800c07a:	61fb      	str	r3, [r7, #28]
 800c07c:	e015      	b.n	800c0aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	697a      	ldr	r2, [r7, #20]
 800c084:	429a      	cmp	r2, r3
 800c086:	d20b      	bcs.n	800c0a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	1ad2      	subs	r2, r2, r3
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7ff ff9b 	bl	800bfd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c09a:	2300      	movs	r3, #0
 800c09c:	61fb      	str	r3, [r7, #28]
 800c09e:	e004      	b.n	800c0aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c0aa:	f000 ff17 	bl	800cedc <vPortExitCritical>

	return xReturn;
 800c0ae:	69fb      	ldr	r3, [r7, #28]
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3720      	adds	r7, #32
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	20000d48 	.word	0x20000d48
 800c0bc:	20000d5c 	.word	0x20000d5c

0800c0c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c0c4:	4b03      	ldr	r3, [pc, #12]	; (800c0d4 <vTaskMissedYield+0x14>)
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	601a      	str	r2, [r3, #0]
}
 800c0ca:	bf00      	nop
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bc80      	pop	{r7}
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop
 800c0d4:	20000d58 	.word	0x20000d58

0800c0d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c0e0:	f000 f852 	bl	800c188 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c0e4:	4b06      	ldr	r3, [pc, #24]	; (800c100 <prvIdleTask+0x28>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d9f9      	bls.n	800c0e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c0ec:	4b05      	ldr	r3, [pc, #20]	; (800c104 <prvIdleTask+0x2c>)
 800c0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0f2:	601a      	str	r2, [r3, #0]
 800c0f4:	f3bf 8f4f 	dsb	sy
 800c0f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c0fc:	e7f0      	b.n	800c0e0 <prvIdleTask+0x8>
 800c0fe:	bf00      	nop
 800c100:	20000874 	.word	0x20000874
 800c104:	e000ed04 	.word	0xe000ed04

0800c108 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c10e:	2300      	movs	r3, #0
 800c110:	607b      	str	r3, [r7, #4]
 800c112:	e00c      	b.n	800c12e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	4613      	mov	r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	4413      	add	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4a12      	ldr	r2, [pc, #72]	; (800c168 <prvInitialiseTaskLists+0x60>)
 800c120:	4413      	add	r3, r2
 800c122:	4618      	mov	r0, r3
 800c124:	f7fe fc4a 	bl	800a9bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	3301      	adds	r3, #1
 800c12c:	607b      	str	r3, [r7, #4]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2b37      	cmp	r3, #55	; 0x37
 800c132:	d9ef      	bls.n	800c114 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c134:	480d      	ldr	r0, [pc, #52]	; (800c16c <prvInitialiseTaskLists+0x64>)
 800c136:	f7fe fc41 	bl	800a9bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c13a:	480d      	ldr	r0, [pc, #52]	; (800c170 <prvInitialiseTaskLists+0x68>)
 800c13c:	f7fe fc3e 	bl	800a9bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c140:	480c      	ldr	r0, [pc, #48]	; (800c174 <prvInitialiseTaskLists+0x6c>)
 800c142:	f7fe fc3b 	bl	800a9bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c146:	480c      	ldr	r0, [pc, #48]	; (800c178 <prvInitialiseTaskLists+0x70>)
 800c148:	f7fe fc38 	bl	800a9bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c14c:	480b      	ldr	r0, [pc, #44]	; (800c17c <prvInitialiseTaskLists+0x74>)
 800c14e:	f7fe fc35 	bl	800a9bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c152:	4b0b      	ldr	r3, [pc, #44]	; (800c180 <prvInitialiseTaskLists+0x78>)
 800c154:	4a05      	ldr	r2, [pc, #20]	; (800c16c <prvInitialiseTaskLists+0x64>)
 800c156:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c158:	4b0a      	ldr	r3, [pc, #40]	; (800c184 <prvInitialiseTaskLists+0x7c>)
 800c15a:	4a05      	ldr	r2, [pc, #20]	; (800c170 <prvInitialiseTaskLists+0x68>)
 800c15c:	601a      	str	r2, [r3, #0]
}
 800c15e:	bf00      	nop
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	20000874 	.word	0x20000874
 800c16c:	20000cd4 	.word	0x20000cd4
 800c170:	20000ce8 	.word	0x20000ce8
 800c174:	20000d04 	.word	0x20000d04
 800c178:	20000d18 	.word	0x20000d18
 800c17c:	20000d30 	.word	0x20000d30
 800c180:	20000cfc 	.word	0x20000cfc
 800c184:	20000d00 	.word	0x20000d00

0800c188 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c18e:	e019      	b.n	800c1c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c190:	f000 fe74 	bl	800ce7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c194:	4b10      	ldr	r3, [pc, #64]	; (800c1d8 <prvCheckTasksWaitingTermination+0x50>)
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	3304      	adds	r3, #4
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7fe fc91 	bl	800aac8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c1a6:	4b0d      	ldr	r3, [pc, #52]	; (800c1dc <prvCheckTasksWaitingTermination+0x54>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	4a0b      	ldr	r2, [pc, #44]	; (800c1dc <prvCheckTasksWaitingTermination+0x54>)
 800c1ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c1b0:	4b0b      	ldr	r3, [pc, #44]	; (800c1e0 <prvCheckTasksWaitingTermination+0x58>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	4a0a      	ldr	r2, [pc, #40]	; (800c1e0 <prvCheckTasksWaitingTermination+0x58>)
 800c1b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c1ba:	f000 fe8f 	bl	800cedc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f848 	bl	800c254 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1c4:	4b06      	ldr	r3, [pc, #24]	; (800c1e0 <prvCheckTasksWaitingTermination+0x58>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1e1      	bne.n	800c190 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c1cc:	bf00      	nop
 800c1ce:	bf00      	nop
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	20000d18 	.word	0x20000d18
 800c1dc:	20000d44 	.word	0x20000d44
 800c1e0:	20000d2c 	.word	0x20000d2c

0800c1e4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c1f0:	e005      	b.n	800c1fe <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	2ba5      	cmp	r3, #165	; 0xa5
 800c204:	d0f5      	beq.n	800c1f2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	089b      	lsrs	r3, r3, #2
 800c20a:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	b29b      	uxth	r3, r3
	}
 800c210:	4618      	mov	r0, r3
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	bc80      	pop	{r7}
 800c218:	4770      	bx	lr
	...

0800c21c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b086      	sub	sp, #24
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d102      	bne.n	800c230 <uxTaskGetStackHighWaterMark+0x14>
 800c22a:	4b09      	ldr	r3, [pc, #36]	; (800c250 <uxTaskGetStackHighWaterMark+0x34>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	e000      	b.n	800c232 <uxTaskGetStackHighWaterMark+0x16>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c238:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800c23a:	6938      	ldr	r0, [r7, #16]
 800c23c:	f7ff ffd2 	bl	800c1e4 <prvTaskCheckFreeStackSpace>
 800c240:	4603      	mov	r3, r0
 800c242:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800c244:	68fb      	ldr	r3, [r7, #12]
	}
 800c246:	4618      	mov	r0, r3
 800c248:	3718      	adds	r7, #24
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	20000870 	.word	0x20000870

0800c254 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c262:	2b00      	cmp	r3, #0
 800c264:	d108      	bne.n	800c278 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 ffca 	bl	800d204 <vPortFree>
				vPortFree( pxTCB );
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 ffc7 	bl	800d204 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c276:	e018      	b.n	800c2aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d103      	bne.n	800c28a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 ffbe 	bl	800d204 <vPortFree>
	}
 800c288:	e00f      	b.n	800c2aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c290:	2b02      	cmp	r3, #2
 800c292:	d00a      	beq.n	800c2aa <prvDeleteTCB+0x56>
	__asm volatile
 800c294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c298:	f383 8811 	msr	BASEPRI, r3
 800c29c:	f3bf 8f6f 	isb	sy
 800c2a0:	f3bf 8f4f 	dsb	sy
 800c2a4:	60fb      	str	r3, [r7, #12]
}
 800c2a6:	bf00      	nop
 800c2a8:	e7fe      	b.n	800c2a8 <prvDeleteTCB+0x54>
	}
 800c2aa:	bf00      	nop
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
	...

0800c2b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2ba:	4b0e      	ldr	r3, [pc, #56]	; (800c2f4 <prvResetNextTaskUnblockTime+0x40>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d101      	bne.n	800c2c8 <prvResetNextTaskUnblockTime+0x14>
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	e000      	b.n	800c2ca <prvResetNextTaskUnblockTime+0x16>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d004      	beq.n	800c2d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c2ce:	4b0a      	ldr	r3, [pc, #40]	; (800c2f8 <prvResetNextTaskUnblockTime+0x44>)
 800c2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c2d6:	e008      	b.n	800c2ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c2d8:	4b06      	ldr	r3, [pc, #24]	; (800c2f4 <prvResetNextTaskUnblockTime+0x40>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	4a04      	ldr	r2, [pc, #16]	; (800c2f8 <prvResetNextTaskUnblockTime+0x44>)
 800c2e8:	6013      	str	r3, [r2, #0]
}
 800c2ea:	bf00      	nop
 800c2ec:	370c      	adds	r7, #12
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bc80      	pop	{r7}
 800c2f2:	4770      	bx	lr
 800c2f4:	20000cfc 	.word	0x20000cfc
 800c2f8:	20000d64 	.word	0x20000d64

0800c2fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c302:	4b0b      	ldr	r3, [pc, #44]	; (800c330 <xTaskGetSchedulerState+0x34>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d102      	bne.n	800c310 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c30a:	2301      	movs	r3, #1
 800c30c:	607b      	str	r3, [r7, #4]
 800c30e:	e008      	b.n	800c322 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c310:	4b08      	ldr	r3, [pc, #32]	; (800c334 <xTaskGetSchedulerState+0x38>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d102      	bne.n	800c31e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c318:	2302      	movs	r3, #2
 800c31a:	607b      	str	r3, [r7, #4]
 800c31c:	e001      	b.n	800c322 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c31e:	2300      	movs	r3, #0
 800c320:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c322:	687b      	ldr	r3, [r7, #4]
	}
 800c324:	4618      	mov	r0, r3
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	bc80      	pop	{r7}
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	20000d50 	.word	0x20000d50
 800c334:	20000d6c 	.word	0x20000d6c

0800c338 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b086      	sub	sp, #24
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c344:	2300      	movs	r3, #0
 800c346:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d056      	beq.n	800c3fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c34e:	4b2e      	ldr	r3, [pc, #184]	; (800c408 <xTaskPriorityDisinherit+0xd0>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	693a      	ldr	r2, [r7, #16]
 800c354:	429a      	cmp	r2, r3
 800c356:	d00a      	beq.n	800c36e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35c:	f383 8811 	msr	BASEPRI, r3
 800c360:	f3bf 8f6f 	isb	sy
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	60fb      	str	r3, [r7, #12]
}
 800c36a:	bf00      	nop
 800c36c:	e7fe      	b.n	800c36c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10a      	bne.n	800c38c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37a:	f383 8811 	msr	BASEPRI, r3
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	60bb      	str	r3, [r7, #8]
}
 800c388:	bf00      	nop
 800c38a:	e7fe      	b.n	800c38a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c390:	1e5a      	subs	r2, r3, #1
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d02c      	beq.n	800c3fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d128      	bne.n	800c3fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	3304      	adds	r3, #4
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fe fb8a 	bl	800aac8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3cc:	4b0f      	ldr	r3, [pc, #60]	; (800c40c <xTaskPriorityDisinherit+0xd4>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d903      	bls.n	800c3dc <xTaskPriorityDisinherit+0xa4>
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d8:	4a0c      	ldr	r2, [pc, #48]	; (800c40c <xTaskPriorityDisinherit+0xd4>)
 800c3da:	6013      	str	r3, [r2, #0]
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	4413      	add	r3, r2
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	4a09      	ldr	r2, [pc, #36]	; (800c410 <xTaskPriorityDisinherit+0xd8>)
 800c3ea:	441a      	add	r2, r3
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	3304      	adds	r3, #4
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	4610      	mov	r0, r2
 800c3f4:	f7fe fb0d 	bl	800aa12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3fc:	697b      	ldr	r3, [r7, #20]
	}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3718      	adds	r7, #24
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	20000870 	.word	0x20000870
 800c40c:	20000d4c 	.word	0x20000d4c
 800c410:	20000874 	.word	0x20000874

0800c414 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c41e:	f000 fd2d 	bl	800ce7c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c422:	4b1e      	ldr	r3, [pc, #120]	; (800c49c <ulTaskNotifyTake+0x88>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d113      	bne.n	800c454 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c42c:	4b1b      	ldr	r3, [pc, #108]	; (800c49c <ulTaskNotifyTake+0x88>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2201      	movs	r2, #1
 800c432:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d00b      	beq.n	800c454 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c43c:	2101      	movs	r1, #1
 800c43e:	6838      	ldr	r0, [r7, #0]
 800c440:	f000 f8c4 	bl	800c5cc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c444:	4b16      	ldr	r3, [pc, #88]	; (800c4a0 <ulTaskNotifyTake+0x8c>)
 800c446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c44a:	601a      	str	r2, [r3, #0]
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c454:	f000 fd42 	bl	800cedc <vPortExitCritical>

		taskENTER_CRITICAL();
 800c458:	f000 fd10 	bl	800ce7c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c45c:	4b0f      	ldr	r3, [pc, #60]	; (800c49c <ulTaskNotifyTake+0x88>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c462:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00c      	beq.n	800c484 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d004      	beq.n	800c47a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c470:	4b0a      	ldr	r3, [pc, #40]	; (800c49c <ulTaskNotifyTake+0x88>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	2200      	movs	r2, #0
 800c476:	655a      	str	r2, [r3, #84]	; 0x54
 800c478:	e004      	b.n	800c484 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c47a:	4b08      	ldr	r3, [pc, #32]	; (800c49c <ulTaskNotifyTake+0x88>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	3a01      	subs	r2, #1
 800c482:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c484:	4b05      	ldr	r3, [pc, #20]	; (800c49c <ulTaskNotifyTake+0x88>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2200      	movs	r2, #0
 800c48a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c48e:	f000 fd25 	bl	800cedc <vPortExitCritical>

		return ulReturn;
 800c492:	68fb      	ldr	r3, [r7, #12]
	}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	20000870 	.word	0x20000870
 800c4a0:	e000ed04 	.word	0xe000ed04

0800c4a4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b08a      	sub	sp, #40	; 0x28
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d10a      	bne.n	800c4ca <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800c4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	61bb      	str	r3, [r7, #24]
}
 800c4c6:	bf00      	nop
 800c4c8:	e7fe      	b.n	800c4c8 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4ca:	f000 fd99 	bl	800d000 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800c4d2:	f3ef 8211 	mrs	r2, BASEPRI
 800c4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4da:	f383 8811 	msr	BASEPRI, r3
 800c4de:	f3bf 8f6f 	isb	sy
 800c4e2:	f3bf 8f4f 	dsb	sy
 800c4e6:	617a      	str	r2, [r7, #20]
 800c4e8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c4ea:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4ec:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c4f4:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f8:	2202      	movs	r2, #2
 800c4fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c502:	1c5a      	adds	r2, r3, #1
 800c504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c506:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c508:	7ffb      	ldrb	r3, [r7, #31]
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d147      	bne.n	800c59e <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00a      	beq.n	800c52c <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800c516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51a:	f383 8811 	msr	BASEPRI, r3
 800c51e:	f3bf 8f6f 	isb	sy
 800c522:	f3bf 8f4f 	dsb	sy
 800c526:	60fb      	str	r3, [r7, #12]
}
 800c528:	bf00      	nop
 800c52a:	e7fe      	b.n	800c52a <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c52c:	4b21      	ldr	r3, [pc, #132]	; (800c5b4 <vTaskNotifyGiveFromISR+0x110>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d11d      	bne.n	800c570 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c536:	3304      	adds	r3, #4
 800c538:	4618      	mov	r0, r3
 800c53a:	f7fe fac5 	bl	800aac8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c542:	4b1d      	ldr	r3, [pc, #116]	; (800c5b8 <vTaskNotifyGiveFromISR+0x114>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	429a      	cmp	r2, r3
 800c548:	d903      	bls.n	800c552 <vTaskNotifyGiveFromISR+0xae>
 800c54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c54e:	4a1a      	ldr	r2, [pc, #104]	; (800c5b8 <vTaskNotifyGiveFromISR+0x114>)
 800c550:	6013      	str	r3, [r2, #0]
 800c552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c556:	4613      	mov	r3, r2
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	4413      	add	r3, r2
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4a17      	ldr	r2, [pc, #92]	; (800c5bc <vTaskNotifyGiveFromISR+0x118>)
 800c560:	441a      	add	r2, r3
 800c562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c564:	3304      	adds	r3, #4
 800c566:	4619      	mov	r1, r3
 800c568:	4610      	mov	r0, r2
 800c56a:	f7fe fa52 	bl	800aa12 <vListInsertEnd>
 800c56e:	e005      	b.n	800c57c <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c572:	3318      	adds	r3, #24
 800c574:	4619      	mov	r1, r3
 800c576:	4812      	ldr	r0, [pc, #72]	; (800c5c0 <vTaskNotifyGiveFromISR+0x11c>)
 800c578:	f7fe fa4b 	bl	800aa12 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c580:	4b10      	ldr	r3, [pc, #64]	; (800c5c4 <vTaskNotifyGiveFromISR+0x120>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c586:	429a      	cmp	r2, r3
 800c588:	d909      	bls.n	800c59e <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	2201      	movs	r2, #1
 800c594:	601a      	str	r2, [r3, #0]
 800c596:	e002      	b.n	800c59e <vTaskNotifyGiveFromISR+0xfa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800c598:	4b0b      	ldr	r3, [pc, #44]	; (800c5c8 <vTaskNotifyGiveFromISR+0x124>)
 800c59a:	2201      	movs	r2, #1
 800c59c:	601a      	str	r2, [r3, #0]
 800c59e:	6a3b      	ldr	r3, [r7, #32]
 800c5a0:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	f383 8811 	msr	BASEPRI, r3
}
 800c5a8:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c5aa:	bf00      	nop
 800c5ac:	3728      	adds	r7, #40	; 0x28
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	20000d6c 	.word	0x20000d6c
 800c5b8:	20000d4c 	.word	0x20000d4c
 800c5bc:	20000874 	.word	0x20000874
 800c5c0:	20000d04 	.word	0x20000d04
 800c5c4:	20000870 	.word	0x20000870
 800c5c8:	20000d58 	.word	0x20000d58

0800c5cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c5d6:	4b21      	ldr	r3, [pc, #132]	; (800c65c <prvAddCurrentTaskToDelayedList+0x90>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5dc:	4b20      	ldr	r3, [pc, #128]	; (800c660 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	3304      	adds	r3, #4
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fe fa70 	bl	800aac8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ee:	d10a      	bne.n	800c606 <prvAddCurrentTaskToDelayedList+0x3a>
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d007      	beq.n	800c606 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5f6:	4b1a      	ldr	r3, [pc, #104]	; (800c660 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	4819      	ldr	r0, [pc, #100]	; (800c664 <prvAddCurrentTaskToDelayedList+0x98>)
 800c600:	f7fe fa07 	bl	800aa12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c604:	e026      	b.n	800c654 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4413      	add	r3, r2
 800c60c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c60e:	4b14      	ldr	r3, [pc, #80]	; (800c660 <prvAddCurrentTaskToDelayedList+0x94>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d209      	bcs.n	800c632 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c61e:	4b12      	ldr	r3, [pc, #72]	; (800c668 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	4b0f      	ldr	r3, [pc, #60]	; (800c660 <prvAddCurrentTaskToDelayedList+0x94>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	3304      	adds	r3, #4
 800c628:	4619      	mov	r1, r3
 800c62a:	4610      	mov	r0, r2
 800c62c:	f7fe fa14 	bl	800aa58 <vListInsert>
}
 800c630:	e010      	b.n	800c654 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c632:	4b0e      	ldr	r3, [pc, #56]	; (800c66c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	4b0a      	ldr	r3, [pc, #40]	; (800c660 <prvAddCurrentTaskToDelayedList+0x94>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	3304      	adds	r3, #4
 800c63c:	4619      	mov	r1, r3
 800c63e:	4610      	mov	r0, r2
 800c640:	f7fe fa0a 	bl	800aa58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c644:	4b0a      	ldr	r3, [pc, #40]	; (800c670 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68ba      	ldr	r2, [r7, #8]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d202      	bcs.n	800c654 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c64e:	4a08      	ldr	r2, [pc, #32]	; (800c670 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	6013      	str	r3, [r2, #0]
}
 800c654:	bf00      	nop
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	20000d48 	.word	0x20000d48
 800c660:	20000870 	.word	0x20000870
 800c664:	20000d30 	.word	0x20000d30
 800c668:	20000d00 	.word	0x20000d00
 800c66c:	20000cfc 	.word	0x20000cfc
 800c670:	20000d64 	.word	0x20000d64

0800c674 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b08a      	sub	sp, #40	; 0x28
 800c678:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c67a:	2300      	movs	r3, #0
 800c67c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c67e:	f000 facb 	bl	800cc18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c682:	4b1c      	ldr	r3, [pc, #112]	; (800c6f4 <xTimerCreateTimerTask+0x80>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d021      	beq.n	800c6ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c68a:	2300      	movs	r3, #0
 800c68c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c68e:	2300      	movs	r3, #0
 800c690:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c692:	1d3a      	adds	r2, r7, #4
 800c694:	f107 0108 	add.w	r1, r7, #8
 800c698:	f107 030c 	add.w	r3, r7, #12
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7fe f973 	bl	800a988 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c6a2:	6879      	ldr	r1, [r7, #4]
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	9202      	str	r2, [sp, #8]
 800c6aa:	9301      	str	r3, [sp, #4]
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	460a      	mov	r2, r1
 800c6b4:	4910      	ldr	r1, [pc, #64]	; (800c6f8 <xTimerCreateTimerTask+0x84>)
 800c6b6:	4811      	ldr	r0, [pc, #68]	; (800c6fc <xTimerCreateTimerTask+0x88>)
 800c6b8:	f7fe ff52 	bl	800b560 <xTaskCreateStatic>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	4a10      	ldr	r2, [pc, #64]	; (800c700 <xTimerCreateTimerTask+0x8c>)
 800c6c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c6c2:	4b0f      	ldr	r3, [pc, #60]	; (800c700 <xTimerCreateTimerTask+0x8c>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d001      	beq.n	800c6ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d10a      	bne.n	800c6ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d8:	f383 8811 	msr	BASEPRI, r3
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	f3bf 8f4f 	dsb	sy
 800c6e4:	613b      	str	r3, [r7, #16]
}
 800c6e6:	bf00      	nop
 800c6e8:	e7fe      	b.n	800c6e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c6ea:	697b      	ldr	r3, [r7, #20]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3718      	adds	r7, #24
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	20000da0 	.word	0x20000da0
 800c6f8:	0800e0b0 	.word	0x0800e0b0
 800c6fc:	0800c821 	.word	0x0800c821
 800c700:	20000da4 	.word	0x20000da4

0800c704 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b08a      	sub	sp, #40	; 0x28
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	607a      	str	r2, [r7, #4]
 800c710:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c712:	2300      	movs	r3, #0
 800c714:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d10a      	bne.n	800c732 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c720:	f383 8811 	msr	BASEPRI, r3
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	623b      	str	r3, [r7, #32]
}
 800c72e:	bf00      	nop
 800c730:	e7fe      	b.n	800c730 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c732:	4b1a      	ldr	r3, [pc, #104]	; (800c79c <xTimerGenericCommand+0x98>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d02a      	beq.n	800c790 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	2b05      	cmp	r3, #5
 800c74a:	dc18      	bgt.n	800c77e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c74c:	f7ff fdd6 	bl	800c2fc <xTaskGetSchedulerState>
 800c750:	4603      	mov	r3, r0
 800c752:	2b02      	cmp	r3, #2
 800c754:	d109      	bne.n	800c76a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c756:	4b11      	ldr	r3, [pc, #68]	; (800c79c <xTimerGenericCommand+0x98>)
 800c758:	6818      	ldr	r0, [r3, #0]
 800c75a:	f107 0110 	add.w	r1, r7, #16
 800c75e:	2300      	movs	r3, #0
 800c760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c762:	f7fe fb1b 	bl	800ad9c <xQueueGenericSend>
 800c766:	6278      	str	r0, [r7, #36]	; 0x24
 800c768:	e012      	b.n	800c790 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c76a:	4b0c      	ldr	r3, [pc, #48]	; (800c79c <xTimerGenericCommand+0x98>)
 800c76c:	6818      	ldr	r0, [r3, #0]
 800c76e:	f107 0110 	add.w	r1, r7, #16
 800c772:	2300      	movs	r3, #0
 800c774:	2200      	movs	r2, #0
 800c776:	f7fe fb11 	bl	800ad9c <xQueueGenericSend>
 800c77a:	6278      	str	r0, [r7, #36]	; 0x24
 800c77c:	e008      	b.n	800c790 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c77e:	4b07      	ldr	r3, [pc, #28]	; (800c79c <xTimerGenericCommand+0x98>)
 800c780:	6818      	ldr	r0, [r3, #0]
 800c782:	f107 0110 	add.w	r1, r7, #16
 800c786:	2300      	movs	r3, #0
 800c788:	683a      	ldr	r2, [r7, #0]
 800c78a:	f7fe fc05 	bl	800af98 <xQueueGenericSendFromISR>
 800c78e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c792:	4618      	mov	r0, r3
 800c794:	3728      	adds	r7, #40	; 0x28
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	20000da0 	.word	0x20000da0

0800c7a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b088      	sub	sp, #32
 800c7a4:	af02      	add	r7, sp, #8
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7aa:	4b1c      	ldr	r3, [pc, #112]	; (800c81c <prvProcessExpiredTimer+0x7c>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	68db      	ldr	r3, [r3, #12]
 800c7b0:	68db      	ldr	r3, [r3, #12]
 800c7b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	3304      	adds	r3, #4
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fe f985 	bl	800aac8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	69db      	ldr	r3, [r3, #28]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d122      	bne.n	800c80c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	699a      	ldr	r2, [r3, #24]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	18d1      	adds	r1, r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	683a      	ldr	r2, [r7, #0]
 800c7d2:	6978      	ldr	r0, [r7, #20]
 800c7d4:	f000 f8c8 	bl	800c968 <prvInsertTimerInActiveList>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d016      	beq.n	800c80c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7de:	2300      	movs	r3, #0
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	6978      	ldr	r0, [r7, #20]
 800c7ea:	f7ff ff8b 	bl	800c704 <xTimerGenericCommand>
 800c7ee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10a      	bne.n	800c80c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fa:	f383 8811 	msr	BASEPRI, r3
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	60fb      	str	r3, [r7, #12]
}
 800c808:	bf00      	nop
 800c80a:	e7fe      	b.n	800c80a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c810:	6978      	ldr	r0, [r7, #20]
 800c812:	4798      	blx	r3
}
 800c814:	bf00      	nop
 800c816:	3718      	adds	r7, #24
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	20000d98 	.word	0x20000d98

0800c820 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c828:	f107 0308 	add.w	r3, r7, #8
 800c82c:	4618      	mov	r0, r3
 800c82e:	f000 f857 	bl	800c8e0 <prvGetNextExpireTime>
 800c832:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	4619      	mov	r1, r3
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f000 f803 	bl	800c844 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c83e:	f000 f8d5 	bl	800c9ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c842:	e7f1      	b.n	800c828 <prvTimerTask+0x8>

0800c844 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c84e:	f7ff f937 	bl	800bac0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c852:	f107 0308 	add.w	r3, r7, #8
 800c856:	4618      	mov	r0, r3
 800c858:	f000 f866 	bl	800c928 <prvSampleTimeNow>
 800c85c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d130      	bne.n	800c8c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d10a      	bne.n	800c880 <prvProcessTimerOrBlockTask+0x3c>
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	429a      	cmp	r2, r3
 800c870:	d806      	bhi.n	800c880 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c872:	f7ff f933 	bl	800badc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c876:	68f9      	ldr	r1, [r7, #12]
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f7ff ff91 	bl	800c7a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c87e:	e024      	b.n	800c8ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d008      	beq.n	800c898 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c886:	4b13      	ldr	r3, [pc, #76]	; (800c8d4 <prvProcessTimerOrBlockTask+0x90>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	bf0c      	ite	eq
 800c890:	2301      	moveq	r3, #1
 800c892:	2300      	movne	r3, #0
 800c894:	b2db      	uxtb	r3, r3
 800c896:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c898:	4b0f      	ldr	r3, [pc, #60]	; (800c8d8 <prvProcessTimerOrBlockTask+0x94>)
 800c89a:	6818      	ldr	r0, [r3, #0]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	683a      	ldr	r2, [r7, #0]
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	f7fe fe27 	bl	800b4f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c8aa:	f7ff f917 	bl	800badc <xTaskResumeAll>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d10a      	bne.n	800c8ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c8b4:	4b09      	ldr	r3, [pc, #36]	; (800c8dc <prvProcessTimerOrBlockTask+0x98>)
 800c8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ba:	601a      	str	r2, [r3, #0]
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	f3bf 8f6f 	isb	sy
}
 800c8c4:	e001      	b.n	800c8ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c8c6:	f7ff f909 	bl	800badc <xTaskResumeAll>
}
 800c8ca:	bf00      	nop
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	20000d9c 	.word	0x20000d9c
 800c8d8:	20000da0 	.word	0x20000da0
 800c8dc:	e000ed04 	.word	0xe000ed04

0800c8e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b085      	sub	sp, #20
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c8e8:	4b0e      	ldr	r3, [pc, #56]	; (800c924 <prvGetNextExpireTime+0x44>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	bf0c      	ite	eq
 800c8f2:	2301      	moveq	r3, #1
 800c8f4:	2300      	movne	r3, #0
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d105      	bne.n	800c912 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c906:	4b07      	ldr	r3, [pc, #28]	; (800c924 <prvGetNextExpireTime+0x44>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	e001      	b.n	800c916 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c912:	2300      	movs	r3, #0
 800c914:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c916:	68fb      	ldr	r3, [r7, #12]
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3714      	adds	r7, #20
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bc80      	pop	{r7}
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	20000d98 	.word	0x20000d98

0800c928 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c930:	f7ff f972 	bl	800bc18 <xTaskGetTickCount>
 800c934:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c936:	4b0b      	ldr	r3, [pc, #44]	; (800c964 <prvSampleTimeNow+0x3c>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d205      	bcs.n	800c94c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c940:	f000 f908 	bl	800cb54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2201      	movs	r2, #1
 800c948:	601a      	str	r2, [r3, #0]
 800c94a:	e002      	b.n	800c952 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c952:	4a04      	ldr	r2, [pc, #16]	; (800c964 <prvSampleTimeNow+0x3c>)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c958:	68fb      	ldr	r3, [r7, #12]
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3710      	adds	r7, #16
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	20000da8 	.word	0x20000da8

0800c968 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b086      	sub	sp, #24
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
 800c974:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c976:	2300      	movs	r3, #0
 800c978:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c986:	68ba      	ldr	r2, [r7, #8]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d812      	bhi.n	800c9b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	1ad2      	subs	r2, r2, r3
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	699b      	ldr	r3, [r3, #24]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d302      	bcc.n	800c9a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c99c:	2301      	movs	r3, #1
 800c99e:	617b      	str	r3, [r7, #20]
 800c9a0:	e01b      	b.n	800c9da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c9a2:	4b10      	ldr	r3, [pc, #64]	; (800c9e4 <prvInsertTimerInActiveList+0x7c>)
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	3304      	adds	r3, #4
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	4610      	mov	r0, r2
 800c9ae:	f7fe f853 	bl	800aa58 <vListInsert>
 800c9b2:	e012      	b.n	800c9da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d206      	bcs.n	800c9ca <prvInsertTimerInActiveList+0x62>
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d302      	bcc.n	800c9ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	617b      	str	r3, [r7, #20]
 800c9c8:	e007      	b.n	800c9da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9ca:	4b07      	ldr	r3, [pc, #28]	; (800c9e8 <prvInsertTimerInActiveList+0x80>)
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	f7fe f83f 	bl	800aa58 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c9da:	697b      	ldr	r3, [r7, #20]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3718      	adds	r7, #24
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	20000d9c 	.word	0x20000d9c
 800c9e8:	20000d98 	.word	0x20000d98

0800c9ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b08e      	sub	sp, #56	; 0x38
 800c9f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9f2:	e09d      	b.n	800cb30 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	da18      	bge.n	800ca2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c9fa:	1d3b      	adds	r3, r7, #4
 800c9fc:	3304      	adds	r3, #4
 800c9fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ca00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d10a      	bne.n	800ca1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ca06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0a:	f383 8811 	msr	BASEPRI, r3
 800ca0e:	f3bf 8f6f 	isb	sy
 800ca12:	f3bf 8f4f 	dsb	sy
 800ca16:	61fb      	str	r3, [r7, #28]
}
 800ca18:	bf00      	nop
 800ca1a:	e7fe      	b.n	800ca1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca22:	6850      	ldr	r0, [r2, #4]
 800ca24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca26:	6892      	ldr	r2, [r2, #8]
 800ca28:	4611      	mov	r1, r2
 800ca2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	db7d      	blt.n	800cb2e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca38:	695b      	ldr	r3, [r3, #20]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d004      	beq.n	800ca48 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca40:	3304      	adds	r3, #4
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fe f840 	bl	800aac8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca48:	463b      	mov	r3, r7
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7ff ff6c 	bl	800c928 <prvSampleTimeNow>
 800ca50:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b09      	cmp	r3, #9
 800ca56:	d86b      	bhi.n	800cb30 <prvProcessReceivedCommands+0x144>
 800ca58:	a201      	add	r2, pc, #4	; (adr r2, 800ca60 <prvProcessReceivedCommands+0x74>)
 800ca5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca5e:	bf00      	nop
 800ca60:	0800ca89 	.word	0x0800ca89
 800ca64:	0800ca89 	.word	0x0800ca89
 800ca68:	0800ca89 	.word	0x0800ca89
 800ca6c:	0800cb31 	.word	0x0800cb31
 800ca70:	0800cae5 	.word	0x0800cae5
 800ca74:	0800cb1d 	.word	0x0800cb1d
 800ca78:	0800ca89 	.word	0x0800ca89
 800ca7c:	0800ca89 	.word	0x0800ca89
 800ca80:	0800cb31 	.word	0x0800cb31
 800ca84:	0800cae5 	.word	0x0800cae5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8c:	699b      	ldr	r3, [r3, #24]
 800ca8e:	18d1      	adds	r1, r2, r3
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca96:	f7ff ff67 	bl	800c968 <prvInsertTimerInActiveList>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d047      	beq.n	800cb30 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800caa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caa6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800caa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caaa:	69db      	ldr	r3, [r3, #28]
 800caac:	2b01      	cmp	r3, #1
 800caae:	d13f      	bne.n	800cb30 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab4:	699b      	ldr	r3, [r3, #24]
 800cab6:	441a      	add	r2, r3
 800cab8:	2300      	movs	r3, #0
 800caba:	9300      	str	r3, [sp, #0]
 800cabc:	2300      	movs	r3, #0
 800cabe:	2100      	movs	r1, #0
 800cac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cac2:	f7ff fe1f 	bl	800c704 <xTimerGenericCommand>
 800cac6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cac8:	6a3b      	ldr	r3, [r7, #32]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d130      	bne.n	800cb30 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	61bb      	str	r3, [r7, #24]
}
 800cae0:	bf00      	nop
 800cae2:	e7fe      	b.n	800cae2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800caea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d10a      	bne.n	800cb08 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800caf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf6:	f383 8811 	msr	BASEPRI, r3
 800cafa:	f3bf 8f6f 	isb	sy
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	617b      	str	r3, [r7, #20]
}
 800cb04:	bf00      	nop
 800cb06:	e7fe      	b.n	800cb06 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0a:	699a      	ldr	r2, [r3, #24]
 800cb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0e:	18d1      	adds	r1, r2, r3
 800cb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb16:	f7ff ff27 	bl	800c968 <prvInsertTimerInActiveList>
					break;
 800cb1a:	e009      	b.n	800cb30 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d104      	bne.n	800cb30 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800cb26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb28:	f000 fb6c 	bl	800d204 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cb2c:	e000      	b.n	800cb30 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cb2e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb30:	4b07      	ldr	r3, [pc, #28]	; (800cb50 <prvProcessReceivedCommands+0x164>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	1d39      	adds	r1, r7, #4
 800cb36:	2200      	movs	r2, #0
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7fe fac5 	bl	800b0c8 <xQueueReceive>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f47f af57 	bne.w	800c9f4 <prvProcessReceivedCommands+0x8>
	}
}
 800cb46:	bf00      	nop
 800cb48:	bf00      	nop
 800cb4a:	3730      	adds	r7, #48	; 0x30
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	20000da0 	.word	0x20000da0

0800cb54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b088      	sub	sp, #32
 800cb58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb5a:	e045      	b.n	800cbe8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb5c:	4b2c      	ldr	r3, [pc, #176]	; (800cc10 <prvSwitchTimerLists+0xbc>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb66:	4b2a      	ldr	r3, [pc, #168]	; (800cc10 <prvSwitchTimerLists+0xbc>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	3304      	adds	r3, #4
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7fd ffa7 	bl	800aac8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb7e:	68f8      	ldr	r0, [r7, #12]
 800cb80:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	69db      	ldr	r3, [r3, #28]
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d12e      	bne.n	800cbe8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	699b      	ldr	r3, [r3, #24]
 800cb8e:	693a      	ldr	r2, [r7, #16]
 800cb90:	4413      	add	r3, r2
 800cb92:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cb94:	68ba      	ldr	r2, [r7, #8]
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d90e      	bls.n	800cbba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cba8:	4b19      	ldr	r3, [pc, #100]	; (800cc10 <prvSwitchTimerLists+0xbc>)
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	3304      	adds	r3, #4
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	4610      	mov	r0, r2
 800cbb4:	f7fd ff50 	bl	800aa58 <vListInsert>
 800cbb8:	e016      	b.n	800cbe8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cbba:	2300      	movs	r3, #0
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	693a      	ldr	r2, [r7, #16]
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f7ff fd9d 	bl	800c704 <xTimerGenericCommand>
 800cbca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d10a      	bne.n	800cbe8 <prvSwitchTimerLists+0x94>
	__asm volatile
 800cbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd6:	f383 8811 	msr	BASEPRI, r3
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	603b      	str	r3, [r7, #0]
}
 800cbe4:	bf00      	nop
 800cbe6:	e7fe      	b.n	800cbe6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbe8:	4b09      	ldr	r3, [pc, #36]	; (800cc10 <prvSwitchTimerLists+0xbc>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1b4      	bne.n	800cb5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cbf2:	4b07      	ldr	r3, [pc, #28]	; (800cc10 <prvSwitchTimerLists+0xbc>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cbf8:	4b06      	ldr	r3, [pc, #24]	; (800cc14 <prvSwitchTimerLists+0xc0>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a04      	ldr	r2, [pc, #16]	; (800cc10 <prvSwitchTimerLists+0xbc>)
 800cbfe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cc00:	4a04      	ldr	r2, [pc, #16]	; (800cc14 <prvSwitchTimerLists+0xc0>)
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	6013      	str	r3, [r2, #0]
}
 800cc06:	bf00      	nop
 800cc08:	3718      	adds	r7, #24
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	20000d98 	.word	0x20000d98
 800cc14:	20000d9c 	.word	0x20000d9c

0800cc18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cc1e:	f000 f92d 	bl	800ce7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cc22:	4b15      	ldr	r3, [pc, #84]	; (800cc78 <prvCheckForValidListAndQueue+0x60>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d120      	bne.n	800cc6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cc2a:	4814      	ldr	r0, [pc, #80]	; (800cc7c <prvCheckForValidListAndQueue+0x64>)
 800cc2c:	f7fd fec6 	bl	800a9bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cc30:	4813      	ldr	r0, [pc, #76]	; (800cc80 <prvCheckForValidListAndQueue+0x68>)
 800cc32:	f7fd fec3 	bl	800a9bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cc36:	4b13      	ldr	r3, [pc, #76]	; (800cc84 <prvCheckForValidListAndQueue+0x6c>)
 800cc38:	4a10      	ldr	r2, [pc, #64]	; (800cc7c <prvCheckForValidListAndQueue+0x64>)
 800cc3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cc3c:	4b12      	ldr	r3, [pc, #72]	; (800cc88 <prvCheckForValidListAndQueue+0x70>)
 800cc3e:	4a10      	ldr	r2, [pc, #64]	; (800cc80 <prvCheckForValidListAndQueue+0x68>)
 800cc40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cc42:	2300      	movs	r3, #0
 800cc44:	9300      	str	r3, [sp, #0]
 800cc46:	4b11      	ldr	r3, [pc, #68]	; (800cc8c <prvCheckForValidListAndQueue+0x74>)
 800cc48:	4a11      	ldr	r2, [pc, #68]	; (800cc90 <prvCheckForValidListAndQueue+0x78>)
 800cc4a:	2110      	movs	r1, #16
 800cc4c:	200a      	movs	r0, #10
 800cc4e:	f7fd ffcd 	bl	800abec <xQueueGenericCreateStatic>
 800cc52:	4603      	mov	r3, r0
 800cc54:	4a08      	ldr	r2, [pc, #32]	; (800cc78 <prvCheckForValidListAndQueue+0x60>)
 800cc56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cc58:	4b07      	ldr	r3, [pc, #28]	; (800cc78 <prvCheckForValidListAndQueue+0x60>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d005      	beq.n	800cc6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc60:	4b05      	ldr	r3, [pc, #20]	; (800cc78 <prvCheckForValidListAndQueue+0x60>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	490b      	ldr	r1, [pc, #44]	; (800cc94 <prvCheckForValidListAndQueue+0x7c>)
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7fe fc1e 	bl	800b4a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc6c:	f000 f936 	bl	800cedc <vPortExitCritical>
}
 800cc70:	bf00      	nop
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	20000da0 	.word	0x20000da0
 800cc7c:	20000d70 	.word	0x20000d70
 800cc80:	20000d84 	.word	0x20000d84
 800cc84:	20000d98 	.word	0x20000d98
 800cc88:	20000d9c 	.word	0x20000d9c
 800cc8c:	20000e4c 	.word	0x20000e4c
 800cc90:	20000dac 	.word	0x20000dac
 800cc94:	0800e0b8 	.word	0x0800e0b8

0800cc98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b085      	sub	sp, #20
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	3b04      	subs	r3, #4
 800cca8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ccb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	3b04      	subs	r3, #4
 800ccb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	f023 0201 	bic.w	r2, r3, #1
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	3b04      	subs	r3, #4
 800ccc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ccc8:	4a08      	ldr	r2, [pc, #32]	; (800ccec <pxPortInitialiseStack+0x54>)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	3b14      	subs	r3, #20
 800ccd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	3b20      	subs	r3, #32
 800ccde:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cce0:	68fb      	ldr	r3, [r7, #12]
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3714      	adds	r7, #20
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bc80      	pop	{r7}
 800ccea:	4770      	bx	lr
 800ccec:	0800ccf1 	.word	0x0800ccf1

0800ccf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b085      	sub	sp, #20
 800ccf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ccfa:	4b12      	ldr	r3, [pc, #72]	; (800cd44 <prvTaskExitError+0x54>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd02:	d00a      	beq.n	800cd1a <prvTaskExitError+0x2a>
	__asm volatile
 800cd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd08:	f383 8811 	msr	BASEPRI, r3
 800cd0c:	f3bf 8f6f 	isb	sy
 800cd10:	f3bf 8f4f 	dsb	sy
 800cd14:	60fb      	str	r3, [r7, #12]
}
 800cd16:	bf00      	nop
 800cd18:	e7fe      	b.n	800cd18 <prvTaskExitError+0x28>
	__asm volatile
 800cd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1e:	f383 8811 	msr	BASEPRI, r3
 800cd22:	f3bf 8f6f 	isb	sy
 800cd26:	f3bf 8f4f 	dsb	sy
 800cd2a:	60bb      	str	r3, [r7, #8]
}
 800cd2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cd2e:	bf00      	nop
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d0fc      	beq.n	800cd30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cd36:	bf00      	nop
 800cd38:	bf00      	nop
 800cd3a:	3714      	adds	r7, #20
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bc80      	pop	{r7}
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	2000012c 	.word	0x2000012c
	...

0800cd50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd50:	4b07      	ldr	r3, [pc, #28]	; (800cd70 <pxCurrentTCBConst2>)
 800cd52:	6819      	ldr	r1, [r3, #0]
 800cd54:	6808      	ldr	r0, [r1, #0]
 800cd56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cd5a:	f380 8809 	msr	PSP, r0
 800cd5e:	f3bf 8f6f 	isb	sy
 800cd62:	f04f 0000 	mov.w	r0, #0
 800cd66:	f380 8811 	msr	BASEPRI, r0
 800cd6a:	f04e 0e0d 	orr.w	lr, lr, #13
 800cd6e:	4770      	bx	lr

0800cd70 <pxCurrentTCBConst2>:
 800cd70:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd74:	bf00      	nop
 800cd76:	bf00      	nop

0800cd78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800cd78:	4806      	ldr	r0, [pc, #24]	; (800cd94 <prvPortStartFirstTask+0x1c>)
 800cd7a:	6800      	ldr	r0, [r0, #0]
 800cd7c:	6800      	ldr	r0, [r0, #0]
 800cd7e:	f380 8808 	msr	MSP, r0
 800cd82:	b662      	cpsie	i
 800cd84:	b661      	cpsie	f
 800cd86:	f3bf 8f4f 	dsb	sy
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	df00      	svc	0
 800cd90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd92:	bf00      	nop
 800cd94:	e000ed08 	.word	0xe000ed08

0800cd98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd9e:	4b32      	ldr	r3, [pc, #200]	; (800ce68 <xPortStartScheduler+0xd0>)
 800cda0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	22ff      	movs	r2, #255	; 0xff
 800cdae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cdb8:	78fb      	ldrb	r3, [r7, #3]
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cdc0:	b2da      	uxtb	r2, r3
 800cdc2:	4b2a      	ldr	r3, [pc, #168]	; (800ce6c <xPortStartScheduler+0xd4>)
 800cdc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cdc6:	4b2a      	ldr	r3, [pc, #168]	; (800ce70 <xPortStartScheduler+0xd8>)
 800cdc8:	2207      	movs	r2, #7
 800cdca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdcc:	e009      	b.n	800cde2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cdce:	4b28      	ldr	r3, [pc, #160]	; (800ce70 <xPortStartScheduler+0xd8>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	4a26      	ldr	r2, [pc, #152]	; (800ce70 <xPortStartScheduler+0xd8>)
 800cdd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cdd8:	78fb      	ldrb	r3, [r7, #3]
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	005b      	lsls	r3, r3, #1
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cde2:	78fb      	ldrb	r3, [r7, #3]
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdea:	2b80      	cmp	r3, #128	; 0x80
 800cdec:	d0ef      	beq.n	800cdce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cdee:	4b20      	ldr	r3, [pc, #128]	; (800ce70 <xPortStartScheduler+0xd8>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f1c3 0307 	rsb	r3, r3, #7
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	d00a      	beq.n	800ce10 <xPortStartScheduler+0x78>
	__asm volatile
 800cdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfe:	f383 8811 	msr	BASEPRI, r3
 800ce02:	f3bf 8f6f 	isb	sy
 800ce06:	f3bf 8f4f 	dsb	sy
 800ce0a:	60bb      	str	r3, [r7, #8]
}
 800ce0c:	bf00      	nop
 800ce0e:	e7fe      	b.n	800ce0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce10:	4b17      	ldr	r3, [pc, #92]	; (800ce70 <xPortStartScheduler+0xd8>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	021b      	lsls	r3, r3, #8
 800ce16:	4a16      	ldr	r2, [pc, #88]	; (800ce70 <xPortStartScheduler+0xd8>)
 800ce18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce1a:	4b15      	ldr	r3, [pc, #84]	; (800ce70 <xPortStartScheduler+0xd8>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce22:	4a13      	ldr	r2, [pc, #76]	; (800ce70 <xPortStartScheduler+0xd8>)
 800ce24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	b2da      	uxtb	r2, r3
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce2e:	4b11      	ldr	r3, [pc, #68]	; (800ce74 <xPortStartScheduler+0xdc>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4a10      	ldr	r2, [pc, #64]	; (800ce74 <xPortStartScheduler+0xdc>)
 800ce34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce3a:	4b0e      	ldr	r3, [pc, #56]	; (800ce74 <xPortStartScheduler+0xdc>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a0d      	ldr	r2, [pc, #52]	; (800ce74 <xPortStartScheduler+0xdc>)
 800ce40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ce44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce46:	f000 f8b9 	bl	800cfbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce4a:	4b0b      	ldr	r3, [pc, #44]	; (800ce78 <xPortStartScheduler+0xe0>)
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce50:	f7ff ff92 	bl	800cd78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce54:	f7fe ffac 	bl	800bdb0 <vTaskSwitchContext>
	prvTaskExitError();
 800ce58:	f7ff ff4a 	bl	800ccf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	e000e400 	.word	0xe000e400
 800ce6c:	20000e9c 	.word	0x20000e9c
 800ce70:	20000ea0 	.word	0x20000ea0
 800ce74:	e000ed20 	.word	0xe000ed20
 800ce78:	2000012c 	.word	0x2000012c

0800ce7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
	__asm volatile
 800ce82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce86:	f383 8811 	msr	BASEPRI, r3
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	607b      	str	r3, [r7, #4]
}
 800ce94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce96:	4b0f      	ldr	r3, [pc, #60]	; (800ced4 <vPortEnterCritical+0x58>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	4a0d      	ldr	r2, [pc, #52]	; (800ced4 <vPortEnterCritical+0x58>)
 800ce9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cea0:	4b0c      	ldr	r3, [pc, #48]	; (800ced4 <vPortEnterCritical+0x58>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d10f      	bne.n	800cec8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cea8:	4b0b      	ldr	r3, [pc, #44]	; (800ced8 <vPortEnterCritical+0x5c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00a      	beq.n	800cec8 <vPortEnterCritical+0x4c>
	__asm volatile
 800ceb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb6:	f383 8811 	msr	BASEPRI, r3
 800ceba:	f3bf 8f6f 	isb	sy
 800cebe:	f3bf 8f4f 	dsb	sy
 800cec2:	603b      	str	r3, [r7, #0]
}
 800cec4:	bf00      	nop
 800cec6:	e7fe      	b.n	800cec6 <vPortEnterCritical+0x4a>
	}
}
 800cec8:	bf00      	nop
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	bc80      	pop	{r7}
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	2000012c 	.word	0x2000012c
 800ced8:	e000ed04 	.word	0xe000ed04

0800cedc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cee2:	4b11      	ldr	r3, [pc, #68]	; (800cf28 <vPortExitCritical+0x4c>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d10a      	bne.n	800cf00 <vPortExitCritical+0x24>
	__asm volatile
 800ceea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceee:	f383 8811 	msr	BASEPRI, r3
 800cef2:	f3bf 8f6f 	isb	sy
 800cef6:	f3bf 8f4f 	dsb	sy
 800cefa:	607b      	str	r3, [r7, #4]
}
 800cefc:	bf00      	nop
 800cefe:	e7fe      	b.n	800cefe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf00:	4b09      	ldr	r3, [pc, #36]	; (800cf28 <vPortExitCritical+0x4c>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	3b01      	subs	r3, #1
 800cf06:	4a08      	ldr	r2, [pc, #32]	; (800cf28 <vPortExitCritical+0x4c>)
 800cf08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf0a:	4b07      	ldr	r3, [pc, #28]	; (800cf28 <vPortExitCritical+0x4c>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d105      	bne.n	800cf1e <vPortExitCritical+0x42>
 800cf12:	2300      	movs	r3, #0
 800cf14:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	f383 8811 	msr	BASEPRI, r3
}
 800cf1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf1e:	bf00      	nop
 800cf20:	370c      	adds	r7, #12
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bc80      	pop	{r7}
 800cf26:	4770      	bx	lr
 800cf28:	2000012c 	.word	0x2000012c
 800cf2c:	00000000 	.word	0x00000000

0800cf30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf30:	f3ef 8009 	mrs	r0, PSP
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	4b0d      	ldr	r3, [pc, #52]	; (800cf70 <pxCurrentTCBConst>)
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cf40:	6010      	str	r0, [r2, #0]
 800cf42:	e92d 4008 	stmdb	sp!, {r3, lr}
 800cf46:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cf4a:	f380 8811 	msr	BASEPRI, r0
 800cf4e:	f7fe ff2f 	bl	800bdb0 <vTaskSwitchContext>
 800cf52:	f04f 0000 	mov.w	r0, #0
 800cf56:	f380 8811 	msr	BASEPRI, r0
 800cf5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cf5e:	6819      	ldr	r1, [r3, #0]
 800cf60:	6808      	ldr	r0, [r1, #0]
 800cf62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cf66:	f380 8809 	msr	PSP, r0
 800cf6a:	f3bf 8f6f 	isb	sy
 800cf6e:	4770      	bx	lr

0800cf70 <pxCurrentTCBConst>:
 800cf70:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf74:	bf00      	nop
 800cf76:	bf00      	nop

0800cf78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	607b      	str	r3, [r7, #4]
}
 800cf90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf92:	f7fe fe4f 	bl	800bc34 <xTaskIncrementTick>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf9c:	4b06      	ldr	r3, [pc, #24]	; (800cfb8 <SysTick_Handler+0x40>)
 800cf9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	f383 8811 	msr	BASEPRI, r3
}
 800cfae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cfb0:	bf00      	nop
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	e000ed04 	.word	0xe000ed04

0800cfbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cfc0:	4b0a      	ldr	r3, [pc, #40]	; (800cfec <vPortSetupTimerInterrupt+0x30>)
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cfc6:	4b0a      	ldr	r3, [pc, #40]	; (800cff0 <vPortSetupTimerInterrupt+0x34>)
 800cfc8:	2200      	movs	r2, #0
 800cfca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cfcc:	4b09      	ldr	r3, [pc, #36]	; (800cff4 <vPortSetupTimerInterrupt+0x38>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a09      	ldr	r2, [pc, #36]	; (800cff8 <vPortSetupTimerInterrupt+0x3c>)
 800cfd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfd6:	099b      	lsrs	r3, r3, #6
 800cfd8:	4a08      	ldr	r2, [pc, #32]	; (800cffc <vPortSetupTimerInterrupt+0x40>)
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cfde:	4b03      	ldr	r3, [pc, #12]	; (800cfec <vPortSetupTimerInterrupt+0x30>)
 800cfe0:	2207      	movs	r2, #7
 800cfe2:	601a      	str	r2, [r3, #0]
}
 800cfe4:	bf00      	nop
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bc80      	pop	{r7}
 800cfea:	4770      	bx	lr
 800cfec:	e000e010 	.word	0xe000e010
 800cff0:	e000e018 	.word	0xe000e018
 800cff4:	20000010 	.word	0x20000010
 800cff8:	10624dd3 	.word	0x10624dd3
 800cffc:	e000e014 	.word	0xe000e014

0800d000 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d006:	f3ef 8305 	mrs	r3, IPSR
 800d00a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2b0f      	cmp	r3, #15
 800d010:	d914      	bls.n	800d03c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d012:	4a16      	ldr	r2, [pc, #88]	; (800d06c <vPortValidateInterruptPriority+0x6c>)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	4413      	add	r3, r2
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d01c:	4b14      	ldr	r3, [pc, #80]	; (800d070 <vPortValidateInterruptPriority+0x70>)
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	7afa      	ldrb	r2, [r7, #11]
 800d022:	429a      	cmp	r2, r3
 800d024:	d20a      	bcs.n	800d03c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	607b      	str	r3, [r7, #4]
}
 800d038:	bf00      	nop
 800d03a:	e7fe      	b.n	800d03a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d03c:	4b0d      	ldr	r3, [pc, #52]	; (800d074 <vPortValidateInterruptPriority+0x74>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d044:	4b0c      	ldr	r3, [pc, #48]	; (800d078 <vPortValidateInterruptPriority+0x78>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d90a      	bls.n	800d062 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d050:	f383 8811 	msr	BASEPRI, r3
 800d054:	f3bf 8f6f 	isb	sy
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	603b      	str	r3, [r7, #0]
}
 800d05e:	bf00      	nop
 800d060:	e7fe      	b.n	800d060 <vPortValidateInterruptPriority+0x60>
	}
 800d062:	bf00      	nop
 800d064:	3714      	adds	r7, #20
 800d066:	46bd      	mov	sp, r7
 800d068:	bc80      	pop	{r7}
 800d06a:	4770      	bx	lr
 800d06c:	e000e3f0 	.word	0xe000e3f0
 800d070:	20000e9c 	.word	0x20000e9c
 800d074:	e000ed0c 	.word	0xe000ed0c
 800d078:	20000ea0 	.word	0x20000ea0

0800d07c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b08a      	sub	sp, #40	; 0x28
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d084:	2300      	movs	r3, #0
 800d086:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d088:	f7fe fd1a 	bl	800bac0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d08c:	4b58      	ldr	r3, [pc, #352]	; (800d1f0 <pvPortMalloc+0x174>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d101      	bne.n	800d098 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d094:	f000 f910 	bl	800d2b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d098:	4b56      	ldr	r3, [pc, #344]	; (800d1f4 <pvPortMalloc+0x178>)
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	4013      	ands	r3, r2
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f040 808e 	bne.w	800d1c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d01d      	beq.n	800d0e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d0ac:	2208      	movs	r2, #8
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f003 0307 	and.w	r3, r3, #7
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d014      	beq.n	800d0e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f023 0307 	bic.w	r3, r3, #7
 800d0c4:	3308      	adds	r3, #8
 800d0c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f003 0307 	and.w	r3, r3, #7
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d00a      	beq.n	800d0e8 <pvPortMalloc+0x6c>
	__asm volatile
 800d0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d6:	f383 8811 	msr	BASEPRI, r3
 800d0da:	f3bf 8f6f 	isb	sy
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	617b      	str	r3, [r7, #20]
}
 800d0e4:	bf00      	nop
 800d0e6:	e7fe      	b.n	800d0e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d069      	beq.n	800d1c2 <pvPortMalloc+0x146>
 800d0ee:	4b42      	ldr	r3, [pc, #264]	; (800d1f8 <pvPortMalloc+0x17c>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d864      	bhi.n	800d1c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d0f8:	4b40      	ldr	r3, [pc, #256]	; (800d1fc <pvPortMalloc+0x180>)
 800d0fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d0fc:	4b3f      	ldr	r3, [pc, #252]	; (800d1fc <pvPortMalloc+0x180>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d102:	e004      	b.n	800d10e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d106:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	429a      	cmp	r2, r3
 800d116:	d903      	bls.n	800d120 <pvPortMalloc+0xa4>
 800d118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d1f1      	bne.n	800d104 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d120:	4b33      	ldr	r3, [pc, #204]	; (800d1f0 <pvPortMalloc+0x174>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d126:	429a      	cmp	r2, r3
 800d128:	d04b      	beq.n	800d1c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d12a:	6a3b      	ldr	r3, [r7, #32]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2208      	movs	r2, #8
 800d130:	4413      	add	r3, r2
 800d132:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	6a3b      	ldr	r3, [r7, #32]
 800d13a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	685a      	ldr	r2, [r3, #4]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	1ad2      	subs	r2, r2, r3
 800d144:	2308      	movs	r3, #8
 800d146:	005b      	lsls	r3, r3, #1
 800d148:	429a      	cmp	r2, r3
 800d14a:	d91f      	bls.n	800d18c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	4413      	add	r3, r2
 800d152:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d154:	69bb      	ldr	r3, [r7, #24]
 800d156:	f003 0307 	and.w	r3, r3, #7
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00a      	beq.n	800d174 <pvPortMalloc+0xf8>
	__asm volatile
 800d15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	613b      	str	r3, [r7, #16]
}
 800d170:	bf00      	nop
 800d172:	e7fe      	b.n	800d172 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d176:	685a      	ldr	r2, [r3, #4]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	1ad2      	subs	r2, r2, r3
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d186:	69b8      	ldr	r0, [r7, #24]
 800d188:	f000 f8f8 	bl	800d37c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d18c:	4b1a      	ldr	r3, [pc, #104]	; (800d1f8 <pvPortMalloc+0x17c>)
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	1ad3      	subs	r3, r2, r3
 800d196:	4a18      	ldr	r2, [pc, #96]	; (800d1f8 <pvPortMalloc+0x17c>)
 800d198:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d19a:	4b17      	ldr	r3, [pc, #92]	; (800d1f8 <pvPortMalloc+0x17c>)
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	4b18      	ldr	r3, [pc, #96]	; (800d200 <pvPortMalloc+0x184>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d203      	bcs.n	800d1ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d1a6:	4b14      	ldr	r3, [pc, #80]	; (800d1f8 <pvPortMalloc+0x17c>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4a15      	ldr	r2, [pc, #84]	; (800d200 <pvPortMalloc+0x184>)
 800d1ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	685a      	ldr	r2, [r3, #4]
 800d1b2:	4b10      	ldr	r3, [pc, #64]	; (800d1f4 <pvPortMalloc+0x178>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	431a      	orrs	r2, r3
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1be:	2200      	movs	r2, #0
 800d1c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d1c2:	f7fe fc8b 	bl	800badc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	f003 0307 	and.w	r3, r3, #7
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00a      	beq.n	800d1e6 <pvPortMalloc+0x16a>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	60fb      	str	r3, [r7, #12]
}
 800d1e2:	bf00      	nop
 800d1e4:	e7fe      	b.n	800d1e4 <pvPortMalloc+0x168>
	return pvReturn;
 800d1e6:	69fb      	ldr	r3, [r7, #28]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3728      	adds	r7, #40	; 0x28
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	20002248 	.word	0x20002248
 800d1f4:	20002254 	.word	0x20002254
 800d1f8:	2000224c 	.word	0x2000224c
 800d1fc:	20002240 	.word	0x20002240
 800d200:	20002250 	.word	0x20002250

0800d204 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b086      	sub	sp, #24
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d048      	beq.n	800d2a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d216:	2308      	movs	r3, #8
 800d218:	425b      	negs	r3, r3
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	4413      	add	r3, r2
 800d21e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	685a      	ldr	r2, [r3, #4]
 800d228:	4b21      	ldr	r3, [pc, #132]	; (800d2b0 <vPortFree+0xac>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4013      	ands	r3, r2
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d10a      	bne.n	800d248 <vPortFree+0x44>
	__asm volatile
 800d232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d236:	f383 8811 	msr	BASEPRI, r3
 800d23a:	f3bf 8f6f 	isb	sy
 800d23e:	f3bf 8f4f 	dsb	sy
 800d242:	60fb      	str	r3, [r7, #12]
}
 800d244:	bf00      	nop
 800d246:	e7fe      	b.n	800d246 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00a      	beq.n	800d266 <vPortFree+0x62>
	__asm volatile
 800d250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d254:	f383 8811 	msr	BASEPRI, r3
 800d258:	f3bf 8f6f 	isb	sy
 800d25c:	f3bf 8f4f 	dsb	sy
 800d260:	60bb      	str	r3, [r7, #8]
}
 800d262:	bf00      	nop
 800d264:	e7fe      	b.n	800d264 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	685a      	ldr	r2, [r3, #4]
 800d26a:	4b11      	ldr	r3, [pc, #68]	; (800d2b0 <vPortFree+0xac>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	4013      	ands	r3, r2
 800d270:	2b00      	cmp	r3, #0
 800d272:	d019      	beq.n	800d2a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d115      	bne.n	800d2a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	685a      	ldr	r2, [r3, #4]
 800d280:	4b0b      	ldr	r3, [pc, #44]	; (800d2b0 <vPortFree+0xac>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	43db      	mvns	r3, r3
 800d286:	401a      	ands	r2, r3
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d28c:	f7fe fc18 	bl	800bac0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	685a      	ldr	r2, [r3, #4]
 800d294:	4b07      	ldr	r3, [pc, #28]	; (800d2b4 <vPortFree+0xb0>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4413      	add	r3, r2
 800d29a:	4a06      	ldr	r2, [pc, #24]	; (800d2b4 <vPortFree+0xb0>)
 800d29c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d29e:	6938      	ldr	r0, [r7, #16]
 800d2a0:	f000 f86c 	bl	800d37c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d2a4:	f7fe fc1a 	bl	800badc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d2a8:	bf00      	nop
 800d2aa:	3718      	adds	r7, #24
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	20002254 	.word	0x20002254
 800d2b4:	2000224c 	.word	0x2000224c

0800d2b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d2be:	f241 339c 	movw	r3, #5020	; 0x139c
 800d2c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d2c4:	4b27      	ldr	r3, [pc, #156]	; (800d364 <prvHeapInit+0xac>)
 800d2c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f003 0307 	and.w	r3, r3, #7
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00c      	beq.n	800d2ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	3307      	adds	r3, #7
 800d2d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f023 0307 	bic.w	r3, r3, #7
 800d2de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d2e0:	68ba      	ldr	r2, [r7, #8]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	1ad3      	subs	r3, r2, r3
 800d2e6:	4a1f      	ldr	r2, [pc, #124]	; (800d364 <prvHeapInit+0xac>)
 800d2e8:	4413      	add	r3, r2
 800d2ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d2f0:	4a1d      	ldr	r2, [pc, #116]	; (800d368 <prvHeapInit+0xb0>)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d2f6:	4b1c      	ldr	r3, [pc, #112]	; (800d368 <prvHeapInit+0xb0>)
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	68ba      	ldr	r2, [r7, #8]
 800d300:	4413      	add	r3, r2
 800d302:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d304:	2208      	movs	r2, #8
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	1a9b      	subs	r3, r3, r2
 800d30a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f023 0307 	bic.w	r3, r3, #7
 800d312:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	4a15      	ldr	r2, [pc, #84]	; (800d36c <prvHeapInit+0xb4>)
 800d318:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d31a:	4b14      	ldr	r3, [pc, #80]	; (800d36c <prvHeapInit+0xb4>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2200      	movs	r2, #0
 800d320:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d322:	4b12      	ldr	r3, [pc, #72]	; (800d36c <prvHeapInit+0xb4>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2200      	movs	r2, #0
 800d328:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	68fa      	ldr	r2, [r7, #12]
 800d332:	1ad2      	subs	r2, r2, r3
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d338:	4b0c      	ldr	r3, [pc, #48]	; (800d36c <prvHeapInit+0xb4>)
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	4a0a      	ldr	r2, [pc, #40]	; (800d370 <prvHeapInit+0xb8>)
 800d346:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	4a09      	ldr	r2, [pc, #36]	; (800d374 <prvHeapInit+0xbc>)
 800d34e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d350:	4b09      	ldr	r3, [pc, #36]	; (800d378 <prvHeapInit+0xc0>)
 800d352:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d356:	601a      	str	r2, [r3, #0]
}
 800d358:	bf00      	nop
 800d35a:	3714      	adds	r7, #20
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bc80      	pop	{r7}
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	20000ea4 	.word	0x20000ea4
 800d368:	20002240 	.word	0x20002240
 800d36c:	20002248 	.word	0x20002248
 800d370:	20002250 	.word	0x20002250
 800d374:	2000224c 	.word	0x2000224c
 800d378:	20002254 	.word	0x20002254

0800d37c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d384:	4b27      	ldr	r3, [pc, #156]	; (800d424 <prvInsertBlockIntoFreeList+0xa8>)
 800d386:	60fb      	str	r3, [r7, #12]
 800d388:	e002      	b.n	800d390 <prvInsertBlockIntoFreeList+0x14>
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	60fb      	str	r3, [r7, #12]
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	429a      	cmp	r2, r3
 800d398:	d8f7      	bhi.n	800d38a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	68ba      	ldr	r2, [r7, #8]
 800d3a4:	4413      	add	r3, r2
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d108      	bne.n	800d3be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	685a      	ldr	r2, [r3, #4]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	441a      	add	r2, r3
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	68ba      	ldr	r2, [r7, #8]
 800d3c8:	441a      	add	r2, r3
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d118      	bne.n	800d404 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	4b14      	ldr	r3, [pc, #80]	; (800d428 <prvInsertBlockIntoFreeList+0xac>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d00d      	beq.n	800d3fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	685a      	ldr	r2, [r3, #4]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	441a      	add	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	601a      	str	r2, [r3, #0]
 800d3f8:	e008      	b.n	800d40c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d3fa:	4b0b      	ldr	r3, [pc, #44]	; (800d428 <prvInsertBlockIntoFreeList+0xac>)
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	601a      	str	r2, [r3, #0]
 800d402:	e003      	b.n	800d40c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	429a      	cmp	r2, r3
 800d412:	d002      	beq.n	800d41a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d41a:	bf00      	nop
 800d41c:	3714      	adds	r7, #20
 800d41e:	46bd      	mov	sp, r7
 800d420:	bc80      	pop	{r7}
 800d422:	4770      	bx	lr
 800d424:	20002240 	.word	0x20002240
 800d428:	20002248 	.word	0x20002248

0800d42c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d430:	2200      	movs	r2, #0
 800d432:	4912      	ldr	r1, [pc, #72]	; (800d47c <MX_USB_DEVICE_Init+0x50>)
 800d434:	4812      	ldr	r0, [pc, #72]	; (800d480 <MX_USB_DEVICE_Init+0x54>)
 800d436:	f7fc f830 	bl	800949a <USBD_Init>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d001      	beq.n	800d444 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d440:	f7f3 fcf8 	bl	8000e34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d444:	490f      	ldr	r1, [pc, #60]	; (800d484 <MX_USB_DEVICE_Init+0x58>)
 800d446:	480e      	ldr	r0, [pc, #56]	; (800d480 <MX_USB_DEVICE_Init+0x54>)
 800d448:	f7fc f852 	bl	80094f0 <USBD_RegisterClass>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d001      	beq.n	800d456 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d452:	f7f3 fcef 	bl	8000e34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d456:	490c      	ldr	r1, [pc, #48]	; (800d488 <MX_USB_DEVICE_Init+0x5c>)
 800d458:	4809      	ldr	r0, [pc, #36]	; (800d480 <MX_USB_DEVICE_Init+0x54>)
 800d45a:	f7fb ff83 	bl	8009364 <USBD_CDC_RegisterInterface>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d001      	beq.n	800d468 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d464:	f7f3 fce6 	bl	8000e34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d468:	4805      	ldr	r0, [pc, #20]	; (800d480 <MX_USB_DEVICE_Init+0x54>)
 800d46a:	f7fc f85a 	bl	8009522 <USBD_Start>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d001      	beq.n	800d478 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d474:	f7f3 fcde 	bl	8000e34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d478:	bf00      	nop
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	20000140 	.word	0x20000140
 800d480:	200026a0 	.word	0x200026a0
 800d484:	20000028 	.word	0x20000028
 800d488:	20000130 	.word	0x20000130

0800d48c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d490:	2200      	movs	r2, #0
 800d492:	4905      	ldr	r1, [pc, #20]	; (800d4a8 <CDC_Init_FS+0x1c>)
 800d494:	4805      	ldr	r0, [pc, #20]	; (800d4ac <CDC_Init_FS+0x20>)
 800d496:	f7fb ff7b 	bl	8009390 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d49a:	4905      	ldr	r1, [pc, #20]	; (800d4b0 <CDC_Init_FS+0x24>)
 800d49c:	4803      	ldr	r0, [pc, #12]	; (800d4ac <CDC_Init_FS+0x20>)
 800d49e:	f7fb ff90 	bl	80093c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d4a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	20002d4c 	.word	0x20002d4c
 800d4ac:	200026a0 	.word	0x200026a0
 800d4b0:	20002964 	.word	0x20002964

0800d4b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d4b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bc80      	pop	{r7}
 800d4c0:	4770      	bx	lr
	...

0800d4c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	6039      	str	r1, [r7, #0]
 800d4ce:	71fb      	strb	r3, [r7, #7]
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d4d4:	79fb      	ldrb	r3, [r7, #7]
 800d4d6:	2b23      	cmp	r3, #35	; 0x23
 800d4d8:	d84a      	bhi.n	800d570 <CDC_Control_FS+0xac>
 800d4da:	a201      	add	r2, pc, #4	; (adr r2, 800d4e0 <CDC_Control_FS+0x1c>)
 800d4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e0:	0800d571 	.word	0x0800d571
 800d4e4:	0800d571 	.word	0x0800d571
 800d4e8:	0800d571 	.word	0x0800d571
 800d4ec:	0800d571 	.word	0x0800d571
 800d4f0:	0800d571 	.word	0x0800d571
 800d4f4:	0800d571 	.word	0x0800d571
 800d4f8:	0800d571 	.word	0x0800d571
 800d4fc:	0800d571 	.word	0x0800d571
 800d500:	0800d571 	.word	0x0800d571
 800d504:	0800d571 	.word	0x0800d571
 800d508:	0800d571 	.word	0x0800d571
 800d50c:	0800d571 	.word	0x0800d571
 800d510:	0800d571 	.word	0x0800d571
 800d514:	0800d571 	.word	0x0800d571
 800d518:	0800d571 	.word	0x0800d571
 800d51c:	0800d571 	.word	0x0800d571
 800d520:	0800d571 	.word	0x0800d571
 800d524:	0800d571 	.word	0x0800d571
 800d528:	0800d571 	.word	0x0800d571
 800d52c:	0800d571 	.word	0x0800d571
 800d530:	0800d571 	.word	0x0800d571
 800d534:	0800d571 	.word	0x0800d571
 800d538:	0800d571 	.word	0x0800d571
 800d53c:	0800d571 	.word	0x0800d571
 800d540:	0800d571 	.word	0x0800d571
 800d544:	0800d571 	.word	0x0800d571
 800d548:	0800d571 	.word	0x0800d571
 800d54c:	0800d571 	.word	0x0800d571
 800d550:	0800d571 	.word	0x0800d571
 800d554:	0800d571 	.word	0x0800d571
 800d558:	0800d571 	.word	0x0800d571
 800d55c:	0800d571 	.word	0x0800d571
 800d560:	0800d571 	.word	0x0800d571
 800d564:	0800d571 	.word	0x0800d571
 800d568:	0800d571 	.word	0x0800d571
 800d56c:	0800d571 	.word	0x0800d571
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d570:	bf00      	nop
  }

  return (USBD_OK);
 800d572:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d574:	4618      	mov	r0, r3
 800d576:	370c      	adds	r7, #12
 800d578:	46bd      	mov	sp, r7
 800d57a:	bc80      	pop	{r7}
 800d57c:	4770      	bx	lr
 800d57e:	bf00      	nop

0800d580 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800d58a:	2300      	movs	r3, #0
 800d58c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800d58e:	2300      	movs	r3, #0
 800d590:	60fb      	str	r3, [r7, #12]
 800d592:	e00c      	b.n	800d5ae <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800d594:	4b14      	ldr	r3, [pc, #80]	; (800d5e8 <CDC_Receive_FS+0x68>)
 800d596:	6818      	ldr	r0, [r3, #0]
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	18d1      	adds	r1, r2, r3
 800d59e:	f107 0208 	add.w	r2, r7, #8
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	f7fd fcf8 	bl	800af98 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	60fb      	str	r3, [r7, #12]
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d3ed      	bcc.n	800d594 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d5b8:	6879      	ldr	r1, [r7, #4]
 800d5ba:	480c      	ldr	r0, [pc, #48]	; (800d5ec <CDC_Receive_FS+0x6c>)
 800d5bc:	f7fb ff01 	bl	80093c2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d5c0:	480a      	ldr	r0, [pc, #40]	; (800d5ec <CDC_Receive_FS+0x6c>)
 800d5c2:	f7fb ff40 	bl	8009446 <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d007      	beq.n	800d5dc <CDC_Receive_FS+0x5c>
 800d5cc:	4b08      	ldr	r3, [pc, #32]	; (800d5f0 <CDC_Receive_FS+0x70>)
 800d5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5d2:	601a      	str	r2, [r3, #0]
 800d5d4:	f3bf 8f4f 	dsb	sy
 800d5d8:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800d5dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3710      	adds	r7, #16
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	20002490 	.word	0x20002490
 800d5ec:	200026a0 	.word	0x200026a0
 800d5f0:	e000ed04 	.word	0xe000ed04

0800d5f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d600:	2300      	movs	r3, #0
 800d602:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d604:	4b0d      	ldr	r3, [pc, #52]	; (800d63c <CDC_Transmit_FS+0x48>)
 800d606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d60a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d612:	2b00      	cmp	r3, #0
 800d614:	d001      	beq.n	800d61a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d616:	2301      	movs	r3, #1
 800d618:	e00b      	b.n	800d632 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d61a:	887b      	ldrh	r3, [r7, #2]
 800d61c:	461a      	mov	r2, r3
 800d61e:	6879      	ldr	r1, [r7, #4]
 800d620:	4806      	ldr	r0, [pc, #24]	; (800d63c <CDC_Transmit_FS+0x48>)
 800d622:	f7fb feb5 	bl	8009390 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d626:	4805      	ldr	r0, [pc, #20]	; (800d63c <CDC_Transmit_FS+0x48>)
 800d628:	f7fb fede 	bl	80093e8 <USBD_CDC_TransmitPacket>
 800d62c:	4603      	mov	r3, r0
 800d62e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d630:	7bfb      	ldrb	r3, [r7, #15]
}
 800d632:	4618      	mov	r0, r3
 800d634:	3710      	adds	r7, #16
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	200026a0 	.word	0x200026a0

0800d640 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	4603      	mov	r3, r0
 800d648:	6039      	str	r1, [r7, #0]
 800d64a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	2212      	movs	r2, #18
 800d650:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d652:	4b03      	ldr	r3, [pc, #12]	; (800d660 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d654:	4618      	mov	r0, r3
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	bc80      	pop	{r7}
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop
 800d660:	2000015c 	.word	0x2000015c

0800d664 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	4603      	mov	r3, r0
 800d66c:	6039      	str	r1, [r7, #0]
 800d66e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	2204      	movs	r2, #4
 800d674:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d676:	4b03      	ldr	r3, [pc, #12]	; (800d684 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d678:	4618      	mov	r0, r3
 800d67a:	370c      	adds	r7, #12
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bc80      	pop	{r7}
 800d680:	4770      	bx	lr
 800d682:	bf00      	nop
 800d684:	20000170 	.word	0x20000170

0800d688 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	4603      	mov	r3, r0
 800d690:	6039      	str	r1, [r7, #0]
 800d692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d694:	79fb      	ldrb	r3, [r7, #7]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d105      	bne.n	800d6a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d69a:	683a      	ldr	r2, [r7, #0]
 800d69c:	4907      	ldr	r1, [pc, #28]	; (800d6bc <USBD_FS_ProductStrDescriptor+0x34>)
 800d69e:	4808      	ldr	r0, [pc, #32]	; (800d6c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d6a0:	f7fc feb8 	bl	800a414 <USBD_GetString>
 800d6a4:	e004      	b.n	800d6b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d6a6:	683a      	ldr	r2, [r7, #0]
 800d6a8:	4904      	ldr	r1, [pc, #16]	; (800d6bc <USBD_FS_ProductStrDescriptor+0x34>)
 800d6aa:	4805      	ldr	r0, [pc, #20]	; (800d6c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d6ac:	f7fc feb2 	bl	800a414 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6b0:	4b02      	ldr	r3, [pc, #8]	; (800d6bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	20003134 	.word	0x20003134
 800d6c0:	0800e0c0 	.word	0x0800e0c0

0800d6c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	6039      	str	r1, [r7, #0]
 800d6ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d6d0:	683a      	ldr	r2, [r7, #0]
 800d6d2:	4904      	ldr	r1, [pc, #16]	; (800d6e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d6d4:	4804      	ldr	r0, [pc, #16]	; (800d6e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d6d6:	f7fc fe9d 	bl	800a414 <USBD_GetString>
  return USBD_StrDesc;
 800d6da:	4b02      	ldr	r3, [pc, #8]	; (800d6e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3708      	adds	r7, #8
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}
 800d6e4:	20003134 	.word	0x20003134
 800d6e8:	0800e0cc 	.word	0x0800e0cc

0800d6ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	6039      	str	r1, [r7, #0]
 800d6f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	221a      	movs	r2, #26
 800d6fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d6fe:	f000 f843 	bl	800d788 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d702:	4b02      	ldr	r3, [pc, #8]	; (800d70c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d704:	4618      	mov	r0, r3
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	20000174 	.word	0x20000174

0800d710 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	4603      	mov	r3, r0
 800d718:	6039      	str	r1, [r7, #0]
 800d71a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d71c:	79fb      	ldrb	r3, [r7, #7]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d105      	bne.n	800d72e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d722:	683a      	ldr	r2, [r7, #0]
 800d724:	4907      	ldr	r1, [pc, #28]	; (800d744 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d726:	4808      	ldr	r0, [pc, #32]	; (800d748 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d728:	f7fc fe74 	bl	800a414 <USBD_GetString>
 800d72c:	e004      	b.n	800d738 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d72e:	683a      	ldr	r2, [r7, #0]
 800d730:	4904      	ldr	r1, [pc, #16]	; (800d744 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d732:	4805      	ldr	r0, [pc, #20]	; (800d748 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d734:	f7fc fe6e 	bl	800a414 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d738:	4b02      	ldr	r3, [pc, #8]	; (800d744 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	20003134 	.word	0x20003134
 800d748:	0800e0e0 	.word	0x0800e0e0

0800d74c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	4603      	mov	r3, r0
 800d754:	6039      	str	r1, [r7, #0]
 800d756:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d758:	79fb      	ldrb	r3, [r7, #7]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d105      	bne.n	800d76a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d75e:	683a      	ldr	r2, [r7, #0]
 800d760:	4907      	ldr	r1, [pc, #28]	; (800d780 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d762:	4808      	ldr	r0, [pc, #32]	; (800d784 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d764:	f7fc fe56 	bl	800a414 <USBD_GetString>
 800d768:	e004      	b.n	800d774 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d76a:	683a      	ldr	r2, [r7, #0]
 800d76c:	4904      	ldr	r1, [pc, #16]	; (800d780 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d76e:	4805      	ldr	r0, [pc, #20]	; (800d784 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d770:	f7fc fe50 	bl	800a414 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d774:	4b02      	ldr	r3, [pc, #8]	; (800d780 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d776:	4618      	mov	r0, r3
 800d778:	3708      	adds	r7, #8
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	20003134 	.word	0x20003134
 800d784:	0800e0ec 	.word	0x0800e0ec

0800d788 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d78e:	4b0f      	ldr	r3, [pc, #60]	; (800d7cc <Get_SerialNum+0x44>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d794:	4b0e      	ldr	r3, [pc, #56]	; (800d7d0 <Get_SerialNum+0x48>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d79a:	4b0e      	ldr	r3, [pc, #56]	; (800d7d4 <Get_SerialNum+0x4c>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d7a0:	68fa      	ldr	r2, [r7, #12]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d009      	beq.n	800d7c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d7ae:	2208      	movs	r2, #8
 800d7b0:	4909      	ldr	r1, [pc, #36]	; (800d7d8 <Get_SerialNum+0x50>)
 800d7b2:	68f8      	ldr	r0, [r7, #12]
 800d7b4:	f000 f814 	bl	800d7e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d7b8:	2204      	movs	r2, #4
 800d7ba:	4908      	ldr	r1, [pc, #32]	; (800d7dc <Get_SerialNum+0x54>)
 800d7bc:	68b8      	ldr	r0, [r7, #8]
 800d7be:	f000 f80f 	bl	800d7e0 <IntToUnicode>
  }
}
 800d7c2:	bf00      	nop
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	1ffff7e8 	.word	0x1ffff7e8
 800d7d0:	1ffff7ec 	.word	0x1ffff7ec
 800d7d4:	1ffff7f0 	.word	0x1ffff7f0
 800d7d8:	20000176 	.word	0x20000176
 800d7dc:	20000186 	.word	0x20000186

0800d7e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b087      	sub	sp, #28
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	60b9      	str	r1, [r7, #8]
 800d7ea:	4613      	mov	r3, r2
 800d7ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	75fb      	strb	r3, [r7, #23]
 800d7f6:	e027      	b.n	800d848 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	0f1b      	lsrs	r3, r3, #28
 800d7fc:	2b09      	cmp	r3, #9
 800d7fe:	d80b      	bhi.n	800d818 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	0f1b      	lsrs	r3, r3, #28
 800d804:	b2da      	uxtb	r2, r3
 800d806:	7dfb      	ldrb	r3, [r7, #23]
 800d808:	005b      	lsls	r3, r3, #1
 800d80a:	4619      	mov	r1, r3
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	440b      	add	r3, r1
 800d810:	3230      	adds	r2, #48	; 0x30
 800d812:	b2d2      	uxtb	r2, r2
 800d814:	701a      	strb	r2, [r3, #0]
 800d816:	e00a      	b.n	800d82e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	0f1b      	lsrs	r3, r3, #28
 800d81c:	b2da      	uxtb	r2, r3
 800d81e:	7dfb      	ldrb	r3, [r7, #23]
 800d820:	005b      	lsls	r3, r3, #1
 800d822:	4619      	mov	r1, r3
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	440b      	add	r3, r1
 800d828:	3237      	adds	r2, #55	; 0x37
 800d82a:	b2d2      	uxtb	r2, r2
 800d82c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	011b      	lsls	r3, r3, #4
 800d832:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d834:	7dfb      	ldrb	r3, [r7, #23]
 800d836:	005b      	lsls	r3, r3, #1
 800d838:	3301      	adds	r3, #1
 800d83a:	68ba      	ldr	r2, [r7, #8]
 800d83c:	4413      	add	r3, r2
 800d83e:	2200      	movs	r2, #0
 800d840:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d842:	7dfb      	ldrb	r3, [r7, #23]
 800d844:	3301      	adds	r3, #1
 800d846:	75fb      	strb	r3, [r7, #23]
 800d848:	7dfa      	ldrb	r2, [r7, #23]
 800d84a:	79fb      	ldrb	r3, [r7, #7]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d3d3      	bcc.n	800d7f8 <IntToUnicode+0x18>
  }
}
 800d850:	bf00      	nop
 800d852:	bf00      	nop
 800d854:	371c      	adds	r7, #28
 800d856:	46bd      	mov	sp, r7
 800d858:	bc80      	pop	{r7}
 800d85a:	4770      	bx	lr

0800d85c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4a0d      	ldr	r2, [pc, #52]	; (800d8a0 <HAL_PCD_MspInit+0x44>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d113      	bne.n	800d896 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d86e:	4b0d      	ldr	r3, [pc, #52]	; (800d8a4 <HAL_PCD_MspInit+0x48>)
 800d870:	69db      	ldr	r3, [r3, #28]
 800d872:	4a0c      	ldr	r2, [pc, #48]	; (800d8a4 <HAL_PCD_MspInit+0x48>)
 800d874:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d878:	61d3      	str	r3, [r2, #28]
 800d87a:	4b0a      	ldr	r3, [pc, #40]	; (800d8a4 <HAL_PCD_MspInit+0x48>)
 800d87c:	69db      	ldr	r3, [r3, #28]
 800d87e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d882:	60fb      	str	r3, [r7, #12]
 800d884:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800d886:	2200      	movs	r2, #0
 800d888:	2105      	movs	r1, #5
 800d88a:	2014      	movs	r0, #20
 800d88c:	f7f5 fb07 	bl	8002e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d890:	2014      	movs	r0, #20
 800d892:	f7f5 fb20 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d896:	bf00      	nop
 800d898:	3710      	adds	r7, #16
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	40005c00 	.word	0x40005c00
 800d8a4:	40021000 	.word	0x40021000

0800d8a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4610      	mov	r0, r2
 800d8c0:	f7fb fe77 	bl	80095b2 <USBD_LL_SetupStage>
}
 800d8c4:	bf00      	nop
 800d8c6:	3708      	adds	r7, #8
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d8de:	78fa      	ldrb	r2, [r7, #3]
 800d8e0:	6879      	ldr	r1, [r7, #4]
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	4413      	add	r3, r2
 800d8e8:	00db      	lsls	r3, r3, #3
 800d8ea:	440b      	add	r3, r1
 800d8ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	78fb      	ldrb	r3, [r7, #3]
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	f7fb fea9 	bl	800964c <USBD_LL_DataOutStage>
}
 800d8fa:	bf00      	nop
 800d8fc:	3708      	adds	r7, #8
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}

0800d902 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d902:	b580      	push	{r7, lr}
 800d904:	b082      	sub	sp, #8
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
 800d90a:	460b      	mov	r3, r1
 800d90c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d914:	78fa      	ldrb	r2, [r7, #3]
 800d916:	6879      	ldr	r1, [r7, #4]
 800d918:	4613      	mov	r3, r2
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	4413      	add	r3, r2
 800d91e:	00db      	lsls	r3, r3, #3
 800d920:	440b      	add	r3, r1
 800d922:	333c      	adds	r3, #60	; 0x3c
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	78fb      	ldrb	r3, [r7, #3]
 800d928:	4619      	mov	r1, r3
 800d92a:	f7fb ff00 	bl	800972e <USBD_LL_DataInStage>
}
 800d92e:	bf00      	nop
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d944:	4618      	mov	r0, r3
 800d946:	f7fc f810 	bl	800996a <USBD_LL_SOF>
}
 800d94a:	bf00      	nop
 800d94c:	3708      	adds	r7, #8
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}

0800d952 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d952:	b580      	push	{r7, lr}
 800d954:	b084      	sub	sp, #16
 800d956:	af00      	add	r7, sp, #0
 800d958:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d95a:	2301      	movs	r3, #1
 800d95c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	2b02      	cmp	r3, #2
 800d964:	d001      	beq.n	800d96a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d966:	f7f3 fa65 	bl	8000e34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d970:	7bfa      	ldrb	r2, [r7, #15]
 800d972:	4611      	mov	r1, r2
 800d974:	4618      	mov	r0, r3
 800d976:	f7fb ffc0 	bl	80098fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d980:	4618      	mov	r0, r3
 800d982:	f7fb ff79 	bl	8009878 <USBD_LL_Reset>
}
 800d986:	bf00      	nop
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
	...

0800d990 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fb ffba 	bl	8009918 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	699b      	ldr	r3, [r3, #24]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d005      	beq.n	800d9b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9ac:	4b04      	ldr	r3, [pc, #16]	; (800d9c0 <HAL_PCD_SuspendCallback+0x30>)
 800d9ae:	691b      	ldr	r3, [r3, #16]
 800d9b0:	4a03      	ldr	r2, [pc, #12]	; (800d9c0 <HAL_PCD_SuspendCallback+0x30>)
 800d9b2:	f043 0306 	orr.w	r3, r3, #6
 800d9b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d9b8:	bf00      	nop
 800d9ba:	3708      	adds	r7, #8
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	e000ed00 	.word	0xe000ed00

0800d9c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fb ffb4 	bl	8009940 <USBD_LL_Resume>
}
 800d9d8:	bf00      	nop
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d9e8:	4a28      	ldr	r2, [pc, #160]	; (800da8c <USBD_LL_Init+0xac>)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a26      	ldr	r2, [pc, #152]	; (800da8c <USBD_LL_Init+0xac>)
 800d9f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d9f8:	4b24      	ldr	r3, [pc, #144]	; (800da8c <USBD_LL_Init+0xac>)
 800d9fa:	4a25      	ldr	r2, [pc, #148]	; (800da90 <USBD_LL_Init+0xb0>)
 800d9fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d9fe:	4b23      	ldr	r3, [pc, #140]	; (800da8c <USBD_LL_Init+0xac>)
 800da00:	2208      	movs	r2, #8
 800da02:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800da04:	4b21      	ldr	r3, [pc, #132]	; (800da8c <USBD_LL_Init+0xac>)
 800da06:	2202      	movs	r2, #2
 800da08:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800da0a:	4b20      	ldr	r3, [pc, #128]	; (800da8c <USBD_LL_Init+0xac>)
 800da0c:	2200      	movs	r2, #0
 800da0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800da10:	4b1e      	ldr	r3, [pc, #120]	; (800da8c <USBD_LL_Init+0xac>)
 800da12:	2200      	movs	r2, #0
 800da14:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800da16:	4b1d      	ldr	r3, [pc, #116]	; (800da8c <USBD_LL_Init+0xac>)
 800da18:	2200      	movs	r2, #0
 800da1a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800da1c:	481b      	ldr	r0, [pc, #108]	; (800da8c <USBD_LL_Init+0xac>)
 800da1e:	f7f5 fd07 	bl	8003430 <HAL_PCD_Init>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d001      	beq.n	800da2c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800da28:	f7f3 fa04 	bl	8000e34 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da32:	2318      	movs	r3, #24
 800da34:	2200      	movs	r2, #0
 800da36:	2100      	movs	r1, #0
 800da38:	f7f7 f97d 	bl	8004d36 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da42:	2358      	movs	r3, #88	; 0x58
 800da44:	2200      	movs	r2, #0
 800da46:	2180      	movs	r1, #128	; 0x80
 800da48:	f7f7 f975 	bl	8004d36 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da52:	23c0      	movs	r3, #192	; 0xc0
 800da54:	2200      	movs	r2, #0
 800da56:	2181      	movs	r1, #129	; 0x81
 800da58:	f7f7 f96d 	bl	8004d36 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da62:	f44f 7388 	mov.w	r3, #272	; 0x110
 800da66:	2200      	movs	r2, #0
 800da68:	2101      	movs	r1, #1
 800da6a:	f7f7 f964 	bl	8004d36 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da78:	2200      	movs	r2, #0
 800da7a:	2182      	movs	r1, #130	; 0x82
 800da7c:	f7f7 f95b 	bl	8004d36 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800da80:	2300      	movs	r3, #0
}
 800da82:	4618      	mov	r0, r3
 800da84:	3708      	adds	r7, #8
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	20003334 	.word	0x20003334
 800da90:	40005c00 	.word	0x40005c00

0800da94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da9c:	2300      	movs	r3, #0
 800da9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daa0:	2300      	movs	r3, #0
 800daa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800daaa:	4618      	mov	r0, r3
 800daac:	f7f5 fdcb 	bl	8003646 <HAL_PCD_Start>
 800dab0:	4603      	mov	r3, r0
 800dab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dab4:	7bfb      	ldrb	r3, [r7, #15]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f000 f94e 	bl	800dd58 <USBD_Get_USB_Status>
 800dabc:	4603      	mov	r3, r0
 800dabe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dac0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b084      	sub	sp, #16
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
 800dad2:	4608      	mov	r0, r1
 800dad4:	4611      	mov	r1, r2
 800dad6:	461a      	mov	r2, r3
 800dad8:	4603      	mov	r3, r0
 800dada:	70fb      	strb	r3, [r7, #3]
 800dadc:	460b      	mov	r3, r1
 800dade:	70bb      	strb	r3, [r7, #2]
 800dae0:	4613      	mov	r3, r2
 800dae2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dae4:	2300      	movs	r3, #0
 800dae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dae8:	2300      	movs	r3, #0
 800daea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800daf2:	78bb      	ldrb	r3, [r7, #2]
 800daf4:	883a      	ldrh	r2, [r7, #0]
 800daf6:	78f9      	ldrb	r1, [r7, #3]
 800daf8:	f7f5 ff45 	bl	8003986 <HAL_PCD_EP_Open>
 800dafc:	4603      	mov	r3, r0
 800dafe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db00:	7bfb      	ldrb	r3, [r7, #15]
 800db02:	4618      	mov	r0, r3
 800db04:	f000 f928 	bl	800dd58 <USBD_Get_USB_Status>
 800db08:	4603      	mov	r3, r0
 800db0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}

0800db16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db16:	b580      	push	{r7, lr}
 800db18:	b084      	sub	sp, #16
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
 800db1e:	460b      	mov	r3, r1
 800db20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db30:	78fa      	ldrb	r2, [r7, #3]
 800db32:	4611      	mov	r1, r2
 800db34:	4618      	mov	r0, r3
 800db36:	f7f5 ff8c 	bl	8003a52 <HAL_PCD_EP_Close>
 800db3a:	4603      	mov	r3, r0
 800db3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db3e:	7bfb      	ldrb	r3, [r7, #15]
 800db40:	4618      	mov	r0, r3
 800db42:	f000 f909 	bl	800dd58 <USBD_Get_USB_Status>
 800db46:	4603      	mov	r3, r0
 800db48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3710      	adds	r7, #16
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	460b      	mov	r3, r1
 800db5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db60:	2300      	movs	r3, #0
 800db62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db64:	2300      	movs	r3, #0
 800db66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db6e:	78fa      	ldrb	r2, [r7, #3]
 800db70:	4611      	mov	r1, r2
 800db72:	4618      	mov	r0, r3
 800db74:	f7f6 f84c 	bl	8003c10 <HAL_PCD_EP_SetStall>
 800db78:	4603      	mov	r3, r0
 800db7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db7c:	7bfb      	ldrb	r3, [r7, #15]
 800db7e:	4618      	mov	r0, r3
 800db80:	f000 f8ea 	bl	800dd58 <USBD_Get_USB_Status>
 800db84:	4603      	mov	r3, r0
 800db86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db88:	7bbb      	ldrb	r3, [r7, #14]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b084      	sub	sp, #16
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
 800db9a:	460b      	mov	r3, r1
 800db9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db9e:	2300      	movs	r3, #0
 800dba0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dba2:	2300      	movs	r3, #0
 800dba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbac:	78fa      	ldrb	r2, [r7, #3]
 800dbae:	4611      	mov	r1, r2
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7f6 f88d 	bl	8003cd0 <HAL_PCD_EP_ClrStall>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbba:	7bfb      	ldrb	r3, [r7, #15]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f000 f8cb 	bl	800dd58 <USBD_Get_USB_Status>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b085      	sub	sp, #20
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbe2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dbe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	da0c      	bge.n	800dc06 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dbec:	78fb      	ldrb	r3, [r7, #3]
 800dbee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbf2:	68f9      	ldr	r1, [r7, #12]
 800dbf4:	1c5a      	adds	r2, r3, #1
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	4413      	add	r3, r2
 800dbfc:	00db      	lsls	r3, r3, #3
 800dbfe:	440b      	add	r3, r1
 800dc00:	3302      	adds	r3, #2
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	e00b      	b.n	800dc1e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dc06:	78fb      	ldrb	r3, [r7, #3]
 800dc08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc0c:	68f9      	ldr	r1, [r7, #12]
 800dc0e:	4613      	mov	r3, r2
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	4413      	add	r3, r2
 800dc14:	00db      	lsls	r3, r3, #3
 800dc16:	440b      	add	r3, r1
 800dc18:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800dc1c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3714      	adds	r7, #20
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bc80      	pop	{r7}
 800dc26:	4770      	bx	lr

0800dc28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	460b      	mov	r3, r1
 800dc32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc34:	2300      	movs	r3, #0
 800dc36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc42:	78fa      	ldrb	r2, [r7, #3]
 800dc44:	4611      	mov	r1, r2
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7f5 fe78 	bl	800393c <HAL_PCD_SetAddress>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc50:	7bfb      	ldrb	r3, [r7, #15]
 800dc52:	4618      	mov	r0, r3
 800dc54:	f000 f880 	bl	800dd58 <USBD_Get_USB_Status>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3710      	adds	r7, #16
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b086      	sub	sp, #24
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	60f8      	str	r0, [r7, #12]
 800dc6e:	607a      	str	r2, [r7, #4]
 800dc70:	461a      	mov	r2, r3
 800dc72:	460b      	mov	r3, r1
 800dc74:	72fb      	strb	r3, [r7, #11]
 800dc76:	4613      	mov	r3, r2
 800dc78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dc88:	893b      	ldrh	r3, [r7, #8]
 800dc8a:	7af9      	ldrb	r1, [r7, #11]
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	f7f5 ff7c 	bl	8003b8a <HAL_PCD_EP_Transmit>
 800dc92:	4603      	mov	r3, r0
 800dc94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc96:	7dfb      	ldrb	r3, [r7, #23]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f000 f85d 	bl	800dd58 <USBD_Get_USB_Status>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dca2:	7dbb      	ldrb	r3, [r7, #22]
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3718      	adds	r7, #24
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b086      	sub	sp, #24
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	607a      	str	r2, [r7, #4]
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	460b      	mov	r3, r1
 800dcba:	72fb      	strb	r3, [r7, #11]
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dcce:	893b      	ldrh	r3, [r7, #8]
 800dcd0:	7af9      	ldrb	r1, [r7, #11]
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	f7f5 ff05 	bl	8003ae2 <HAL_PCD_EP_Receive>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcdc:	7dfb      	ldrb	r3, [r7, #23]
 800dcde:	4618      	mov	r0, r3
 800dce0:	f000 f83a 	bl	800dd58 <USBD_Get_USB_Status>
 800dce4:	4603      	mov	r3, r0
 800dce6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dce8:	7dbb      	ldrb	r3, [r7, #22]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3718      	adds	r7, #24
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcf2:	b580      	push	{r7, lr}
 800dcf4:	b082      	sub	sp, #8
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd04:	78fa      	ldrb	r2, [r7, #3]
 800dd06:	4611      	mov	r1, r2
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7f5 ff27 	bl	8003b5c <HAL_PCD_EP_GetRxCount>
 800dd0e:	4603      	mov	r3, r0
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3708      	adds	r7, #8
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dd20:	4b02      	ldr	r3, [pc, #8]	; (800dd2c <USBD_static_malloc+0x14>)
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	370c      	adds	r7, #12
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bc80      	pop	{r7}
 800dd2a:	4770      	bx	lr
 800dd2c:	20002258 	.word	0x20002258

0800dd30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]

}
 800dd38:	bf00      	nop
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bc80      	pop	{r7}
 800dd40:	4770      	bx	lr

0800dd42 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd42:	b480      	push	{r7}
 800dd44:	b083      	sub	sp, #12
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800dd4e:	bf00      	nop
 800dd50:	370c      	adds	r7, #12
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bc80      	pop	{r7}
 800dd56:	4770      	bx	lr

0800dd58 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b085      	sub	sp, #20
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	4603      	mov	r3, r0
 800dd60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd62:	2300      	movs	r3, #0
 800dd64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd66:	79fb      	ldrb	r3, [r7, #7]
 800dd68:	2b03      	cmp	r3, #3
 800dd6a:	d817      	bhi.n	800dd9c <USBD_Get_USB_Status+0x44>
 800dd6c:	a201      	add	r2, pc, #4	; (adr r2, 800dd74 <USBD_Get_USB_Status+0x1c>)
 800dd6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd72:	bf00      	nop
 800dd74:	0800dd85 	.word	0x0800dd85
 800dd78:	0800dd8b 	.word	0x0800dd8b
 800dd7c:	0800dd91 	.word	0x0800dd91
 800dd80:	0800dd97 	.word	0x0800dd97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dd84:	2300      	movs	r3, #0
 800dd86:	73fb      	strb	r3, [r7, #15]
    break;
 800dd88:	e00b      	b.n	800dda2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd8a:	2302      	movs	r3, #2
 800dd8c:	73fb      	strb	r3, [r7, #15]
    break;
 800dd8e:	e008      	b.n	800dda2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd90:	2301      	movs	r3, #1
 800dd92:	73fb      	strb	r3, [r7, #15]
    break;
 800dd94:	e005      	b.n	800dda2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd96:	2302      	movs	r3, #2
 800dd98:	73fb      	strb	r3, [r7, #15]
    break;
 800dd9a:	e002      	b.n	800dda2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dd9c:	2302      	movs	r3, #2
 800dd9e:	73fb      	strb	r3, [r7, #15]
    break;
 800dda0:	bf00      	nop
  }
  return usb_status;
 800dda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3714      	adds	r7, #20
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bc80      	pop	{r7}
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop

0800ddb0 <__libc_init_array>:
 800ddb0:	b570      	push	{r4, r5, r6, lr}
 800ddb2:	2600      	movs	r6, #0
 800ddb4:	4d0c      	ldr	r5, [pc, #48]	; (800dde8 <__libc_init_array+0x38>)
 800ddb6:	4c0d      	ldr	r4, [pc, #52]	; (800ddec <__libc_init_array+0x3c>)
 800ddb8:	1b64      	subs	r4, r4, r5
 800ddba:	10a4      	asrs	r4, r4, #2
 800ddbc:	42a6      	cmp	r6, r4
 800ddbe:	d109      	bne.n	800ddd4 <__libc_init_array+0x24>
 800ddc0:	f000 f862 	bl	800de88 <_init>
 800ddc4:	2600      	movs	r6, #0
 800ddc6:	4d0a      	ldr	r5, [pc, #40]	; (800ddf0 <__libc_init_array+0x40>)
 800ddc8:	4c0a      	ldr	r4, [pc, #40]	; (800ddf4 <__libc_init_array+0x44>)
 800ddca:	1b64      	subs	r4, r4, r5
 800ddcc:	10a4      	asrs	r4, r4, #2
 800ddce:	42a6      	cmp	r6, r4
 800ddd0:	d105      	bne.n	800ddde <__libc_init_array+0x2e>
 800ddd2:	bd70      	pop	{r4, r5, r6, pc}
 800ddd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddd8:	4798      	blx	r3
 800ddda:	3601      	adds	r6, #1
 800dddc:	e7ee      	b.n	800ddbc <__libc_init_array+0xc>
 800ddde:	f855 3b04 	ldr.w	r3, [r5], #4
 800dde2:	4798      	blx	r3
 800dde4:	3601      	adds	r6, #1
 800dde6:	e7f2      	b.n	800ddce <__libc_init_array+0x1e>
 800dde8:	0800e704 	.word	0x0800e704
 800ddec:	0800e704 	.word	0x0800e704
 800ddf0:	0800e704 	.word	0x0800e704
 800ddf4:	0800e708 	.word	0x0800e708

0800ddf8 <memcpy>:
 800ddf8:	440a      	add	r2, r1
 800ddfa:	4291      	cmp	r1, r2
 800ddfc:	f100 33ff 	add.w	r3, r0, #4294967295
 800de00:	d100      	bne.n	800de04 <memcpy+0xc>
 800de02:	4770      	bx	lr
 800de04:	b510      	push	{r4, lr}
 800de06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de0a:	4291      	cmp	r1, r2
 800de0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de10:	d1f9      	bne.n	800de06 <memcpy+0xe>
 800de12:	bd10      	pop	{r4, pc}

0800de14 <memmove>:
 800de14:	4288      	cmp	r0, r1
 800de16:	b510      	push	{r4, lr}
 800de18:	eb01 0402 	add.w	r4, r1, r2
 800de1c:	d902      	bls.n	800de24 <memmove+0x10>
 800de1e:	4284      	cmp	r4, r0
 800de20:	4623      	mov	r3, r4
 800de22:	d807      	bhi.n	800de34 <memmove+0x20>
 800de24:	1e43      	subs	r3, r0, #1
 800de26:	42a1      	cmp	r1, r4
 800de28:	d008      	beq.n	800de3c <memmove+0x28>
 800de2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de32:	e7f8      	b.n	800de26 <memmove+0x12>
 800de34:	4601      	mov	r1, r0
 800de36:	4402      	add	r2, r0
 800de38:	428a      	cmp	r2, r1
 800de3a:	d100      	bne.n	800de3e <memmove+0x2a>
 800de3c:	bd10      	pop	{r4, pc}
 800de3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de46:	e7f7      	b.n	800de38 <memmove+0x24>

0800de48 <memset>:
 800de48:	4603      	mov	r3, r0
 800de4a:	4402      	add	r2, r0
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d100      	bne.n	800de52 <memset+0xa>
 800de50:	4770      	bx	lr
 800de52:	f803 1b01 	strb.w	r1, [r3], #1
 800de56:	e7f9      	b.n	800de4c <memset+0x4>

0800de58 <strstr>:
 800de58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de5a:	780c      	ldrb	r4, [r1, #0]
 800de5c:	b164      	cbz	r4, 800de78 <strstr+0x20>
 800de5e:	4603      	mov	r3, r0
 800de60:	781a      	ldrb	r2, [r3, #0]
 800de62:	4618      	mov	r0, r3
 800de64:	1c5e      	adds	r6, r3, #1
 800de66:	b90a      	cbnz	r2, 800de6c <strstr+0x14>
 800de68:	4610      	mov	r0, r2
 800de6a:	e005      	b.n	800de78 <strstr+0x20>
 800de6c:	4294      	cmp	r4, r2
 800de6e:	d108      	bne.n	800de82 <strstr+0x2a>
 800de70:	460d      	mov	r5, r1
 800de72:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800de76:	b902      	cbnz	r2, 800de7a <strstr+0x22>
 800de78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de7a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800de7e:	4297      	cmp	r7, r2
 800de80:	d0f7      	beq.n	800de72 <strstr+0x1a>
 800de82:	4633      	mov	r3, r6
 800de84:	e7ec      	b.n	800de60 <strstr+0x8>
	...

0800de88 <_init>:
 800de88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8a:	bf00      	nop
 800de8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de8e:	bc08      	pop	{r3}
 800de90:	469e      	mov	lr, r3
 800de92:	4770      	bx	lr

0800de94 <_fini>:
 800de94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de96:	bf00      	nop
 800de98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de9a:	bc08      	pop	{r3}
 800de9c:	469e      	mov	lr, r3
 800de9e:	4770      	bx	lr
