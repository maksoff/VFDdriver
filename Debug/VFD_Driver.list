
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ddc4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  0800ded4  0800ded4  0001ded4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6e8  0800e6e8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e6e8  0800e6e8  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e6e8  0800e6e8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6e8  0800e6e8  0001e6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6ec  0800e6ec  0001e6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800e6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045d4  200001f0  0800e8e0  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200047c4  0800e8e0  000247c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e8f3  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006275  00000000  00000000  0004eb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f18  00000000  00000000  00054d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ce0  00000000  00000000  00056ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eba2  00000000  00000000  00058980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025109  00000000  00000000  00077522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d65d  00000000  00000000  0009c62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139c88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008470  00000000  00000000  00139cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800debc 	.word	0x0800debc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800debc 	.word	0x0800debc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800017a:	4b21      	ldr	r3, [pc, #132]	; (8000200 <_DoInit+0x8c>)
 800017c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2202      	movs	r2, #2
 8000182:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2202      	movs	r2, #2
 8000188:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4a1d      	ldr	r2, [pc, #116]	; (8000204 <_DoInit+0x90>)
 800018e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4a1d      	ldr	r2, [pc, #116]	; (8000208 <_DoInit+0x94>)
 8000194:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800019c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2200      	movs	r2, #0
 80001a8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2200      	movs	r2, #0
 80001ae:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	4a14      	ldr	r2, [pc, #80]	; (8000204 <_DoInit+0x90>)
 80001b4:	649a      	str	r2, [r3, #72]	; 0x48
  p->aDown[0].pBuffer       = _acDownBuffer;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	4a14      	ldr	r2, [pc, #80]	; (800020c <_DoInit+0x98>)
 80001ba:	64da      	str	r2, [r3, #76]	; 0x4c
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	2210      	movs	r2, #16
 80001c0:	651a      	str	r2, [r3, #80]	; 0x50
  p->aDown[0].RdOff         = 0u;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	2200      	movs	r2, #0
 80001c6:	659a      	str	r2, [r3, #88]	; 0x58
  p->aDown[0].WrOff         = 0u;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2200      	movs	r2, #0
 80001cc:	655a      	str	r2, [r3, #84]	; 0x54
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2200      	movs	r2, #0
 80001d2:	65da      	str	r2, [r3, #92]	; 0x5c
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3307      	adds	r3, #7
 80001d8:	4a0d      	ldr	r2, [pc, #52]	; (8000210 <_DoInit+0x9c>)
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4a0c      	ldr	r2, [pc, #48]	; (8000214 <_DoInit+0xa0>)
 80001e2:	6810      	ldr	r0, [r2, #0]
 80001e4:	6018      	str	r0, [r3, #0]
 80001e6:	8891      	ldrh	r1, [r2, #4]
 80001e8:	7992      	ldrb	r2, [r2, #6]
 80001ea:	8099      	strh	r1, [r3, #4]
 80001ec:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2220      	movs	r2, #32
 80001f2:	719a      	strb	r2, [r3, #6]
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	2000355c 	.word	0x2000355c
 8000204:	0800ded4 	.word	0x0800ded4
 8000208:	2000020c 	.word	0x2000020c
 800020c:	2000060c 	.word	0x2000060c
 8000210:	0800dee0 	.word	0x0800dee0
 8000214:	0800dee4 	.word	0x0800dee4

08000218 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000224:	2300      	movs	r3, #0
 8000226:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	691b      	ldr	r3, [r3, #16]
 8000232:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8000234:	693a      	ldr	r2, [r7, #16]
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	429a      	cmp	r2, r3
 800023a:	d905      	bls.n	8000248 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800023c:	693a      	ldr	r2, [r7, #16]
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	3b01      	subs	r3, #1
 8000244:	61fb      	str	r3, [r7, #28]
 8000246:	e007      	b.n	8000258 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689a      	ldr	r2, [r3, #8]
 800024c:	6939      	ldr	r1, [r7, #16]
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	1acb      	subs	r3, r1, r3
 8000252:	4413      	add	r3, r2
 8000254:	3b01      	subs	r3, #1
 8000256:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	689a      	ldr	r2, [r3, #8]
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	1ad3      	subs	r3, r2, r3
 8000260:	69fa      	ldr	r2, [r7, #28]
 8000262:	4293      	cmp	r3, r2
 8000264:	bf28      	it	cs
 8000266:	4613      	movcs	r3, r2
 8000268:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800026a:	69fa      	ldr	r2, [r7, #28]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4293      	cmp	r3, r2
 8000270:	bf28      	it	cs
 8000272:	4613      	movcs	r3, r2
 8000274:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	685a      	ldr	r2, [r3, #4]
 800027a:	697b      	ldr	r3, [r7, #20]
 800027c:	4413      	add	r3, r2
 800027e:	69fa      	ldr	r2, [r7, #28]
 8000280:	68b9      	ldr	r1, [r7, #8]
 8000282:	4618      	mov	r0, r3
 8000284:	f00d f9ae 	bl	800d5e4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000288:	69ba      	ldr	r2, [r7, #24]
 800028a:	69fb      	ldr	r3, [r7, #28]
 800028c:	4413      	add	r3, r2
 800028e:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8000290:	68ba      	ldr	r2, [r7, #8]
 8000292:	69fb      	ldr	r3, [r7, #28]
 8000294:	4413      	add	r3, r2
 8000296:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	69fb      	ldr	r3, [r7, #28]
 800029c:	1ad3      	subs	r3, r2, r3
 800029e:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80002a0:	697a      	ldr	r2, [r7, #20]
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	4413      	add	r3, r2
 80002a6:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	697a      	ldr	r2, [r7, #20]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d101      	bne.n	80002b6 <_WriteBlocking+0x9e>
      WrOff = 0u;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	697a      	ldr	r2, [r7, #20]
 80002ba:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d1b5      	bne.n	800022e <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 80002c2:	69bb      	ldr	r3, [r7, #24]
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3720      	adds	r7, #32
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b088      	sub	sp, #32
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	60f8      	str	r0, [r7, #12]
 80002d4:	60b9      	str	r1, [r7, #8]
 80002d6:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	68db      	ldr	r3, [r3, #12]
 80002dc:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	689a      	ldr	r2, [r3, #8]
 80002e2:	69fb      	ldr	r3, [r7, #28]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80002e8:	69ba      	ldr	r2, [r7, #24]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d90e      	bls.n	800030e <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	685a      	ldr	r2, [r3, #4]
 80002f4:	69fb      	ldr	r3, [r7, #28]
 80002f6:	4413      	add	r3, r2
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	68b9      	ldr	r1, [r7, #8]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f00d f971 	bl	800d5e4 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8000302:	69fa      	ldr	r2, [r7, #28]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	441a      	add	r2, r3
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800030c:	e01a      	b.n	8000344 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 800030e:	69bb      	ldr	r3, [r7, #24]
 8000310:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	685a      	ldr	r2, [r3, #4]
 8000316:	69fb      	ldr	r3, [r7, #28]
 8000318:	4413      	add	r3, r2
 800031a:	697a      	ldr	r2, [r7, #20]
 800031c:	68b9      	ldr	r1, [r7, #8]
 800031e:	4618      	mov	r0, r3
 8000320:	f00d f960 	bl	800d5e4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	69bb      	ldr	r3, [r7, #24]
 8000328:	1ad3      	subs	r3, r2, r3
 800032a:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	6858      	ldr	r0, [r3, #4]
 8000330:	68ba      	ldr	r2, [r7, #8]
 8000332:	69bb      	ldr	r3, [r7, #24]
 8000334:	4413      	add	r3, r2
 8000336:	697a      	ldr	r2, [r7, #20]
 8000338:	4619      	mov	r1, r3
 800033a:	f00d f953 	bl	800d5e4 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	697a      	ldr	r2, [r7, #20]
 8000342:	60da      	str	r2, [r3, #12]
}
 8000344:	bf00      	nop
 8000346:	3720      	adds	r7, #32
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800034c:	b480      	push	{r7}
 800034e:	b087      	sub	sp, #28
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	691b      	ldr	r3, [r3, #16]
 8000358:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000360:	693a      	ldr	r2, [r7, #16]
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	429a      	cmp	r2, r3
 8000366:	d808      	bhi.n	800037a <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	689a      	ldr	r2, [r3, #8]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	1ad2      	subs	r2, r2, r3
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	4413      	add	r3, r2
 8000374:	3b01      	subs	r3, #1
 8000376:	617b      	str	r3, [r7, #20]
 8000378:	e004      	b.n	8000384 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800037a:	693a      	ldr	r2, [r7, #16]
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	1ad3      	subs	r3, r2, r3
 8000380:	3b01      	subs	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000384:	697b      	ldr	r3, [r7, #20]
}
 8000386:	4618      	mov	r0, r3
 8000388:	371c      	adds	r7, #28
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	1c5a      	adds	r2, r3, #1
 80003a4:	4613      	mov	r3, r2
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	4413      	add	r3, r2
 80003aa:	00db      	lsls	r3, r3, #3
 80003ac:	4a1f      	ldr	r2, [pc, #124]	; (800042c <SEGGER_RTT_WriteNoLock+0x9c>)
 80003ae:	4413      	add	r3, r2
 80003b0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	2b02      	cmp	r3, #2
 80003b8:	d029      	beq.n	800040e <SEGGER_RTT_WriteNoLock+0x7e>
 80003ba:	2b02      	cmp	r3, #2
 80003bc:	d82e      	bhi.n	800041c <SEGGER_RTT_WriteNoLock+0x8c>
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d002      	beq.n	80003c8 <SEGGER_RTT_WriteNoLock+0x38>
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d013      	beq.n	80003ee <SEGGER_RTT_WriteNoLock+0x5e>
 80003c6:	e029      	b.n	800041c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80003c8:	6978      	ldr	r0, [r7, #20]
 80003ca:	f7ff ffbf 	bl	800034c <_GetAvailWriteSpace>
 80003ce:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80003d0:	693a      	ldr	r2, [r7, #16]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d202      	bcs.n	80003de <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80003dc:	e021      	b.n	8000422 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	69b9      	ldr	r1, [r7, #24]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff70 	bl	80002cc <_WriteNoCheck>
    break;
 80003ec:	e019      	b.n	8000422 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80003ee:	6978      	ldr	r0, [r7, #20]
 80003f0:	f7ff ffac 	bl	800034c <_GetAvailWriteSpace>
 80003f4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	693b      	ldr	r3, [r7, #16]
 80003fa:	4293      	cmp	r3, r2
 80003fc:	bf28      	it	cs
 80003fe:	4613      	movcs	r3, r2
 8000400:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8000402:	69fa      	ldr	r2, [r7, #28]
 8000404:	69b9      	ldr	r1, [r7, #24]
 8000406:	6978      	ldr	r0, [r7, #20]
 8000408:	f7ff ff60 	bl	80002cc <_WriteNoCheck>
    break;
 800040c:	e009      	b.n	8000422 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	69b9      	ldr	r1, [r7, #24]
 8000412:	6978      	ldr	r0, [r7, #20]
 8000414:	f7ff ff00 	bl	8000218 <_WriteBlocking>
 8000418:	61f8      	str	r0, [r7, #28]
    break;
 800041a:	e002      	b.n	8000422 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800041c:	2300      	movs	r3, #0
 800041e:	61fb      	str	r3, [r7, #28]
    break;
 8000420:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000422:	69fb      	ldr	r3, [r7, #28]
}
 8000424:	4618      	mov	r0, r3
 8000426:	3720      	adds	r7, #32
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	2000355c 	.word	0x2000355c

08000430 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 800043c:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <SEGGER_RTT_Write+0x44>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d101      	bne.n	8000448 <SEGGER_RTT_Write+0x18>
 8000444:	f7ff fe96 	bl	8000174 <_DoInit>
  SEGGER_RTT_LOCK();
 8000448:	f3ef 8311 	mrs	r3, BASEPRI
 800044c:	f04f 0120 	mov.w	r1, #32
 8000450:	f381 8811 	msr	BASEPRI, r1
 8000454:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	68b9      	ldr	r1, [r7, #8]
 800045a:	68f8      	ldr	r0, [r7, #12]
 800045c:	f7ff ff98 	bl	8000390 <SEGGER_RTT_WriteNoLock>
 8000460:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8000468:	693b      	ldr	r3, [r7, #16]
}
 800046a:	4618      	mov	r0, r3
 800046c:	3718      	adds	r7, #24
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	2000355c 	.word	0x2000355c

08000478 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
  unsigned Len;

  Len = STRLEN(s);
 8000482:	6838      	ldr	r0, [r7, #0]
 8000484:	f7ff fe6e 	bl	8000164 <strlen>
 8000488:	60f8      	str	r0, [r7, #12]
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	6839      	ldr	r1, [r7, #0]
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f7ff ffce 	bl	8000430 <SEGGER_RTT_Write>
 8000494:	4603      	mov	r3, r0
}
 8000496:	4618      	mov	r0, r3
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (64, sizeof(uint8_t), &qUSB_rcv_attributes);
 80004a4:	4a26      	ldr	r2, [pc, #152]	; (8000540 <MX_FREERTOS_Init+0xa0>)
 80004a6:	2101      	movs	r1, #1
 80004a8:	2040      	movs	r0, #64	; 0x40
 80004aa:	f009 fdbd 	bl	800a028 <osMessageQueueNew>
 80004ae:	4603      	mov	r3, r0
 80004b0:	4a24      	ldr	r2, [pc, #144]	; (8000544 <MX_FREERTOS_Init+0xa4>)
 80004b2:	6013      	str	r3, [r2, #0]

  /* creation of qRTT */
  qRTTHandle = osMessageQueueNew (32, sizeof(uint32_t), &qRTT_attributes);
 80004b4:	4a24      	ldr	r2, [pc, #144]	; (8000548 <MX_FREERTOS_Init+0xa8>)
 80004b6:	2104      	movs	r1, #4
 80004b8:	2020      	movs	r0, #32
 80004ba:	f009 fdb5 	bl	800a028 <osMessageQueueNew>
 80004be:	4603      	mov	r3, r0
 80004c0:	4a22      	ldr	r2, [pc, #136]	; (800054c <MX_FREERTOS_Init+0xac>)
 80004c2:	6013      	str	r3, [r2, #0]

  /* creation of qdebugRTT */
  qdebugRTTHandle = osMessageQueueNew (16, sizeof(uint8_t), &qdebugRTT_attributes);
 80004c4:	4a22      	ldr	r2, [pc, #136]	; (8000550 <MX_FREERTOS_Init+0xb0>)
 80004c6:	2101      	movs	r1, #1
 80004c8:	2010      	movs	r0, #16
 80004ca:	f009 fdad 	bl	800a028 <osMessageQueueNew>
 80004ce:	4603      	mov	r3, r0
 80004d0:	4a20      	ldr	r2, [pc, #128]	; (8000554 <MX_FREERTOS_Init+0xb4>)
 80004d2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004d4:	4a20      	ldr	r2, [pc, #128]	; (8000558 <MX_FREERTOS_Init+0xb8>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	4820      	ldr	r0, [pc, #128]	; (800055c <MX_FREERTOS_Init+0xbc>)
 80004da:	f009 fccd 	bl	8009e78 <osThreadNew>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a1f      	ldr	r2, [pc, #124]	; (8000560 <MX_FREERTOS_Init+0xc0>)
 80004e2:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 80004e4:	4a1f      	ldr	r2, [pc, #124]	; (8000564 <MX_FREERTOS_Init+0xc4>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	481f      	ldr	r0, [pc, #124]	; (8000568 <MX_FREERTOS_Init+0xc8>)
 80004ea:	f009 fcc5 	bl	8009e78 <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a1e      	ldr	r2, [pc, #120]	; (800056c <MX_FREERTOS_Init+0xcc>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 80004f4:	4a1e      	ldr	r2, [pc, #120]	; (8000570 <MX_FREERTOS_Init+0xd0>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	481e      	ldr	r0, [pc, #120]	; (8000574 <MX_FREERTOS_Init+0xd4>)
 80004fa:	f009 fcbd 	bl	8009e78 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a1d      	ldr	r2, [pc, #116]	; (8000578 <MX_FREERTOS_Init+0xd8>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of SeggerRTT */
  SeggerRTTHandle = osThreadNew(StartSeggerRTT, NULL, &SeggerRTT_attributes);
 8000504:	4a1d      	ldr	r2, [pc, #116]	; (800057c <MX_FREERTOS_Init+0xdc>)
 8000506:	2100      	movs	r1, #0
 8000508:	481d      	ldr	r0, [pc, #116]	; (8000580 <MX_FREERTOS_Init+0xe0>)
 800050a:	f009 fcb5 	bl	8009e78 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a1c      	ldr	r2, [pc, #112]	; (8000584 <MX_FREERTOS_Init+0xe4>)
 8000512:	6013      	str	r3, [r2, #0]

  /* creation of UARTtask */
  UARTtaskHandle = osThreadNew(StartUARTtask, NULL, &UARTtask_attributes);
 8000514:	4a1c      	ldr	r2, [pc, #112]	; (8000588 <MX_FREERTOS_Init+0xe8>)
 8000516:	2100      	movs	r1, #0
 8000518:	481c      	ldr	r0, [pc, #112]	; (800058c <MX_FREERTOS_Init+0xec>)
 800051a:	f009 fcad 	bl	8009e78 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a1b      	ldr	r2, [pc, #108]	; (8000590 <MX_FREERTOS_Init+0xf0>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of debugRTT */
  debugRTTHandle = osThreadNew(StartdebugRTT, NULL, &debugRTT_attributes);
 8000524:	4a1b      	ldr	r2, [pc, #108]	; (8000594 <MX_FREERTOS_Init+0xf4>)
 8000526:	2100      	movs	r1, #0
 8000528:	481b      	ldr	r0, [pc, #108]	; (8000598 <MX_FREERTOS_Init+0xf8>)
 800052a:	f009 fca5 	bl	8009e78 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a1a      	ldr	r2, [pc, #104]	; (800059c <MX_FREERTOS_Init+0xfc>)
 8000532:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <MX_FREERTOS_Init+0xa4>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a19      	ldr	r2, [pc, #100]	; (80005a0 <MX_FREERTOS_Init+0x100>)
 800053a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	0800e214 	.word	0x0800e214
 8000544:	200035e8 	.word	0x200035e8
 8000548:	0800e22c 	.word	0x0800e22c
 800054c:	200035f0 	.word	0x200035f0
 8000550:	0800e244 	.word	0x0800e244
 8000554:	200035ec 	.word	0x200035ec
 8000558:	0800e13c 	.word	0x0800e13c
 800055c:	080005a5 	.word	0x080005a5
 8000560:	200035d4 	.word	0x200035d4
 8000564:	0800e160 	.word	0x0800e160
 8000568:	080005dd 	.word	0x080005dd
 800056c:	200035d8 	.word	0x200035d8
 8000570:	0800e184 	.word	0x0800e184
 8000574:	08000611 	.word	0x08000611
 8000578:	200035e0 	.word	0x200035e0
 800057c:	0800e1a8 	.word	0x0800e1a8
 8000580:	08000671 	.word	0x08000671
 8000584:	200035e4 	.word	0x200035e4
 8000588:	0800e1cc 	.word	0x0800e1cc
 800058c:	080006f5 	.word	0x080006f5
 8000590:	200035dc 	.word	0x200035dc
 8000594:	0800e1f0 	.word	0x0800e1f0
 8000598:	08000731 	.word	0x08000731
 800059c:	200035f4 	.word	0x200035f4
 80005a0:	200035f8 	.word	0x200035f8

080005a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80005ac:	f00c fb2e 	bl	800cc0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b6:	4808      	ldr	r0, [pc, #32]	; (80005d8 <StartDefaultTask+0x34>)
 80005b8:	f002 fcb7 	bl	8002f2a <HAL_GPIO_WritePin>
  osDelay(10);
 80005bc:	200a      	movs	r0, #10
 80005be:	f009 fd05 	bl	8009fcc <osDelay>
  init_microrl();
 80005c2:	f001 fddf 	bl	8002184 <init_microrl>
  set_CDC_ready(); // allow to send
 80005c6:	f001 fe17 	bl	80021f8 <set_CDC_ready>

  //vTaskDelete(NULL);
  /* Infinite loop */
  for(;;)
  {
	  process_encoder();
 80005ca:	f000 f8f1 	bl	80007b0 <process_encoder>
    osDelay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f009 fcfc 	bl	8009fcc <osDelay>
	  process_encoder();
 80005d4:	e7f9      	b.n	80005ca <StartDefaultTask+0x26>
 80005d6:	bf00      	nop
 80005d8:	40010800 	.word	0x40010800

080005dc <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 80005e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005e8:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 80005ea:	f00a ff03 	bl	800b3f4 <xTaskGetTickCount>
 80005ee:	4603      	mov	r3, r0
 80005f0:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <StartLEDheartbeat+0x30>)
 80005f8:	f002 fcaf 	bl	8002f5a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	68f9      	ldr	r1, [r7, #12]
 8000602:	4618      	mov	r0, r3
 8000604:	f00a fd32 	bl	800b06c <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000608:	e7ef      	b.n	80005ea <StartLEDheartbeat+0xe>
 800060a:	bf00      	nop
 800060c:	40011000 	.word	0x40011000

08000610 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 8000618:	2000      	movs	r0, #0
 800061a:	f00b f9ed 	bl	800b9f8 <uxTaskGetStackHighWaterMark>
 800061e:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000624:	4b10      	ldr	r3, [pc, #64]	; (8000668 <StartUSB_rcv+0x58>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f107 0113 	add.w	r1, r7, #19
 800062c:	f04f 32ff 	mov.w	r2, #4294967295
 8000630:	4618      	mov	r0, r3
 8000632:	f00a f937 	bl	800a8a4 <xQueueReceive>
	  microrl_print_char(buf);
 8000636:	7cfb      	ldrb	r3, [r7, #19]
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fa5f 	bl	8001afc <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800063e:	2000      	movs	r0, #0
 8000640:	f00b f9da 	bl	800b9f8 <uxTaskGetStackHighWaterMark>
 8000644:	4603      	mov	r3, r0
 8000646:	60fb      	str	r3, [r7, #12]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	429a      	cmp	r2, r3
 800064e:	d9e9      	bls.n	8000624 <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	617b      	str	r3, [r7, #20]
		  xQueueSend(qRTTHandle, &uxHighWaterMark, portMAX_DELAY);
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <StartUSB_rcv+0x5c>)
 8000656:	6818      	ldr	r0, [r3, #0]
 8000658:	f107 010c 	add.w	r1, r7, #12
 800065c:	2300      	movs	r3, #0
 800065e:	f04f 32ff 	mov.w	r2, #4294967295
 8000662:	f009 ff89 	bl	800a578 <xQueueGenericSend>
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000666:	e7dd      	b.n	8000624 <StartUSB_rcv+0x14>
 8000668:	200035f8 	.word	0x200035f8
 800066c:	200035f0 	.word	0x200035f0

08000670 <StartSeggerRTT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSeggerRTT */
void StartSeggerRTT(void *argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	uint32_t buf;
	char str [8];
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(qRTTHandle, &buf, portMAX_DELAY );
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <StartSeggerRTT+0x7c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f107 0110 	add.w	r1, r7, #16
 8000680:	f04f 32ff 	mov.w	r2, #4294967295
 8000684:	4618      	mov	r0, r3
 8000686:	f00a f90d 	bl	800a8a4 <xQueueReceive>
		for (int i = 0; i < 5; i++)
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	e01d      	b.n	80006cc <StartSeggerRTT+0x5c>
		{
			str[4 - i] = buf % 10 + '0';
 8000690:	6939      	ldr	r1, [r7, #16]
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <StartSeggerRTT+0x80>)
 8000694:	fba3 2301 	umull	r2, r3, r3, r1
 8000698:	08da      	lsrs	r2, r3, #3
 800069a:	4613      	mov	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	1aca      	subs	r2, r1, r3
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	f1c3 0304 	rsb	r3, r3, #4
 80006ac:	3230      	adds	r2, #48	; 0x30
 80006ae:	b2d2      	uxtb	r2, r2
 80006b0:	f107 0118 	add.w	r1, r7, #24
 80006b4:	440b      	add	r3, r1
 80006b6:	f803 2c10 	strb.w	r2, [r3, #-16]
			buf /= 10;
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <StartSeggerRTT+0x80>)
 80006be:	fba2 2303 	umull	r2, r3, r2, r3
 80006c2:	08db      	lsrs	r3, r3, #3
 80006c4:	613b      	str	r3, [r7, #16]
		for (int i = 0; i < 5; i++)
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	3301      	adds	r3, #1
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	ddde      	ble.n	8000690 <StartSeggerRTT+0x20>
		}
		str[5] = '\r';
 80006d2:	230d      	movs	r3, #13
 80006d4:	737b      	strb	r3, [r7, #13]
		str[6] = '\n';
 80006d6:	230a      	movs	r3, #10
 80006d8:	73bb      	strb	r3, [r7, #14]
		str[7] = '\0';
 80006da:	2300      	movs	r3, #0
 80006dc:	73fb      	strb	r3, [r7, #15]
		SEGGER_RTT_WriteString(0, str);
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	4619      	mov	r1, r3
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff fec7 	bl	8000478 <SEGGER_RTT_WriteString>
	  xQueueReceive(qRTTHandle, &buf, portMAX_DELAY );
 80006ea:	e7c5      	b.n	8000678 <StartSeggerRTT+0x8>
 80006ec:	200035f0 	.word	0x200035f0
 80006f0:	cccccccd 	.word	0xcccccccd

080006f4 <StartUARTtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTtask */
void StartUARTtask(void *argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  uint8_t data;
  for(;;)
  {
	HAL_UART_Receive_IT(&huart2, &data, 1);
 80006fc:	f107 030f 	add.w	r3, r7, #15
 8000700:	2201      	movs	r2, #1
 8000702:	4619      	mov	r1, r3
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <StartUARTtask+0x38>)
 8000706:	f005 f946 	bl	8005996 <HAL_UART_Receive_IT>
	/* Wait to be notified of an interrupt. */
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 800070a:	f04f 31ff 	mov.w	r1, #4294967295
 800070e:	2001      	movs	r0, #1
 8000710:	f00b fa6e 	bl	800bbf0 <ulTaskNotifyTake>
	if (get_nema())
 8000714:	f001 fe7a 	bl	800240c <get_nema>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0ee      	beq.n	80006fc <StartUARTtask+0x8>
		CDC_Transmit_FS(&data, 1);
 800071e:	f107 030f 	add.w	r3, r7, #15
 8000722:	2101      	movs	r1, #1
 8000724:	4618      	mov	r0, r3
 8000726:	f00c fb55 	bl	800cdd4 <CDC_Transmit_FS>
	HAL_UART_Receive_IT(&huart2, &data, 1);
 800072a:	e7e7      	b.n	80006fc <StartUARTtask+0x8>
 800072c:	200037ac 	.word	0x200037ac

08000730 <StartdebugRTT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartdebugRTT */
void StartdebugRTT(void *argument)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartdebugRTT */
  /* Infinite loop */
  uint8_t buf;
  for(;;)
  {
	  xQueueReceive(qdebugRTTHandle, &buf, portMAX_DELAY );
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <StartdebugRTT+0x2c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f107 010f 	add.w	r1, r7, #15
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	4618      	mov	r0, r3
 8000746:	f00a f8ad 	bl	800a8a4 <xQueueReceive>

	  SEGGER_RTT_Write(1, &buf, 1);
 800074a:	f107 030f 	add.w	r3, r7, #15
 800074e:	2201      	movs	r2, #1
 8000750:	4619      	mov	r1, r3
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff fe6c 	bl	8000430 <SEGGER_RTT_Write>
	  xQueueReceive(qdebugRTTHandle, &buf, portMAX_DELAY );
 8000758:	e7ee      	b.n	8000738 <StartdebugRTT+0x8>
 800075a:	bf00      	nop
 800075c:	200035ec 	.word	0x200035ec

08000760 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_UART_RxCpltCallback+0x44>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d115      	bne.n	800079c <HAL_UART_RxCpltCallback+0x3c>
		return;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]


   /* Notify the task that the transmission is complete by setting the TX_BIT
   in the task's notification value. */
	vTaskNotifyGiveFromISR( UARTtaskHandle,
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_UART_RxCpltCallback+0x48>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f107 020c 	add.w	r2, r7, #12
 800077c:	4611      	mov	r1, r2
 800077e:	4618      	mov	r0, r3
 8000780:	f00b fa7e 	bl	800bc80 <vTaskNotifyGiveFromISR>

   /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
   should be performed to ensure the interrupt returns directly to the highest
   priority task.  The macro used for this purpose is dependent on the port in
   use and may be called portEND_SWITCHING_ISR(). */
   portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d009      	beq.n	800079e <HAL_UART_RxCpltCallback+0x3e>
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_UART_RxCpltCallback+0x4c>)
 800078c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	f3bf 8f4f 	dsb	sy
 8000796:	f3bf 8f6f 	isb	sy
 800079a:	e000      	b.n	800079e <HAL_UART_RxCpltCallback+0x3e>
		return;
 800079c:	bf00      	nop
}
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200037ac 	.word	0x200037ac
 80007a8:	200035dc 	.word	0x200035dc
 80007ac:	e000ed04 	.word	0xe000ed04

080007b0 <process_encoder>:

void process_encoder(void)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (0b10*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 80007b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ba:	483b      	ldr	r0, [pc, #236]	; (80008a8 <process_encoder+0xf8>)
 80007bc:	f002 fb9e 	bl	8002efc <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	b2dc      	uxtb	r4, r3
		   0b01*HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin));
 80007c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ca:	4837      	ldr	r0, [pc, #220]	; (80008a8 <process_encoder+0xf8>)
 80007cc:	f002 fb96 	bl	8002efc <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
	new = (0b10*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 80007d2:	4423      	add	r3, r4
 80007d4:	71fb      	strb	r3, [r7, #7]
	switch(old)
 80007d6:	4b35      	ldr	r3, [pc, #212]	; (80008ac <process_encoder+0xfc>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b03      	cmp	r3, #3
 80007dc:	d85d      	bhi.n	800089a <process_encoder+0xea>
 80007de:	a201      	add	r2, pc, #4	; (adr r2, 80007e4 <process_encoder+0x34>)
 80007e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e4:	0800081b 	.word	0x0800081b
 80007e8:	08000841 	.word	0x08000841
 80007ec:	080007f5 	.word	0x080007f5
 80007f0:	08000867 	.word	0x08000867
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d105      	bne.n	8000806 <process_encoder+0x56>
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <process_encoder+0x100>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	b29a      	uxth	r2, r3
 8000802:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <process_encoder+0x100>)
 8000804:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d13f      	bne.n	800088c <process_encoder+0xdc>
 800080c:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <process_encoder+0x100>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	3b01      	subs	r3, #1
 8000812:	b29a      	uxth	r2, r3
 8000814:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <process_encoder+0x100>)
 8000816:	801a      	strh	r2, [r3, #0]
			break;
 8000818:	e038      	b.n	800088c <process_encoder+0xdc>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d105      	bne.n	800082c <process_encoder+0x7c>
 8000820:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <process_encoder+0x100>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	b29a      	uxth	r2, r3
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <process_encoder+0x100>)
 800082a:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d12e      	bne.n	8000890 <process_encoder+0xe0>
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <process_encoder+0x100>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	3b01      	subs	r3, #1
 8000838:	b29a      	uxth	r2, r3
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <process_encoder+0x100>)
 800083c:	801a      	strh	r2, [r3, #0]
			break;
 800083e:	e027      	b.n	8000890 <process_encoder+0xe0>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d105      	bne.n	8000852 <process_encoder+0xa2>
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <process_encoder+0x100>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	b29a      	uxth	r2, r3
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <process_encoder+0x100>)
 8000850:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b03      	cmp	r3, #3
 8000856:	d11d      	bne.n	8000894 <process_encoder+0xe4>
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <process_encoder+0x100>)
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	3b01      	subs	r3, #1
 800085e:	b29a      	uxth	r2, r3
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <process_encoder+0x100>)
 8000862:	801a      	strh	r2, [r3, #0]
			break;
 8000864:	e016      	b.n	8000894 <process_encoder+0xe4>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d105      	bne.n	8000878 <process_encoder+0xc8>
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <process_encoder+0x100>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <process_encoder+0x100>)
 8000876:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d10c      	bne.n	8000898 <process_encoder+0xe8>
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <process_encoder+0x100>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	3b01      	subs	r3, #1
 8000884:	b29a      	uxth	r2, r3
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <process_encoder+0x100>)
 8000888:	801a      	strh	r2, [r3, #0]
			break;
 800088a:	e005      	b.n	8000898 <process_encoder+0xe8>
			break;
 800088c:	bf00      	nop
 800088e:	e004      	b.n	800089a <process_encoder+0xea>
			break;
 8000890:	bf00      	nop
 8000892:	e002      	b.n	800089a <process_encoder+0xea>
			break;
 8000894:	bf00      	nop
 8000896:	e000      	b.n	800089a <process_encoder+0xea>
			break;
 8000898:	bf00      	nop
			}
		}
	old = new;
 800089a:	4a04      	ldr	r2, [pc, #16]	; (80008ac <process_encoder+0xfc>)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	7013      	strb	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd90      	pop	{r4, r7, pc}
 80008a8:	40010c00 	.word	0x40010c00
 80008ac:	2000061e 	.word	0x2000061e
 80008b0:	2000061c 	.word	0x2000061c

080008b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	4b48      	ldr	r3, [pc, #288]	; (80009ec <MX_GPIO_Init+0x138>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a47      	ldr	r2, [pc, #284]	; (80009ec <MX_GPIO_Init+0x138>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b45      	ldr	r3, [pc, #276]	; (80009ec <MX_GPIO_Init+0x138>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0310 	and.w	r3, r3, #16
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e0:	4b42      	ldr	r3, [pc, #264]	; (80009ec <MX_GPIO_Init+0x138>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a41      	ldr	r2, [pc, #260]	; (80009ec <MX_GPIO_Init+0x138>)
 80008e6:	f043 0320 	orr.w	r3, r3, #32
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b3f      	ldr	r3, [pc, #252]	; (80009ec <MX_GPIO_Init+0x138>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0320 	and.w	r3, r3, #32
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <MX_GPIO_Init+0x138>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a3b      	ldr	r2, [pc, #236]	; (80009ec <MX_GPIO_Init+0x138>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b39      	ldr	r3, [pc, #228]	; (80009ec <MX_GPIO_Init+0x138>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	4b36      	ldr	r3, [pc, #216]	; (80009ec <MX_GPIO_Init+0x138>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a35      	ldr	r2, [pc, #212]	; (80009ec <MX_GPIO_Init+0x138>)
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b33      	ldr	r3, [pc, #204]	; (80009ec <MX_GPIO_Init+0x138>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092e:	4830      	ldr	r0, [pc, #192]	; (80009f0 <MX_GPIO_Init+0x13c>)
 8000930:	f002 fafb 	bl	8002f2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093a:	482e      	ldr	r0, [pc, #184]	; (80009f4 <MX_GPIO_Init+0x140>)
 800093c:	f002 faf5 	bl	8002f2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2120      	movs	r1, #32
 8000944:	482c      	ldr	r0, [pc, #176]	; (80009f8 <MX_GPIO_Init+0x144>)
 8000946:	f002 faf0 	bl	8002f2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800094a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	4823      	ldr	r0, [pc, #140]	; (80009f0 <MX_GPIO_Init+0x13c>)
 8000964:	f002 f946 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000968:	2301      	movs	r3, #1
 800096a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_GPIO_Init+0x148>)
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	4619      	mov	r1, r3
 800097a:	481e      	ldr	r0, [pc, #120]	; (80009f4 <MX_GPIO_Init+0x140>)
 800097c:	f002 f93a 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000984:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2302      	movs	r3, #2
 8000990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	4619      	mov	r1, r3
 8000998:	4816      	ldr	r0, [pc, #88]	; (80009f4 <MX_GPIO_Init+0x140>)
 800099a:	f002 f92b 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HV_EN_Pin;
 800099e:	2320      	movs	r3, #32
 80009a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HV_EN_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4619      	mov	r1, r3
 80009b4:	4810      	ldr	r0, [pc, #64]	; (80009f8 <MX_GPIO_Init+0x144>)
 80009b6:	f002 f91d 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_s_Pin|enc_a_Pin|enc_b_Pin;
 80009ba:	f44f 7360 	mov.w	r3, #896	; 0x380
 80009be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4619      	mov	r1, r3
 80009ce:	480a      	ldr	r0, [pc, #40]	; (80009f8 <MX_GPIO_Init+0x144>)
 80009d0:	f002 f910 	bl	8002bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2105      	movs	r1, #5
 80009d8:	2006      	movs	r0, #6
 80009da:	f002 f830 	bl	8002a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009de:	2006      	movs	r0, #6
 80009e0:	f002 f849 	bl	8002a76 <HAL_NVIC_EnableIRQ>

}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40011000 	.word	0x40011000
 80009f4:	40010800 	.word	0x40010800
 80009f8:	40010c00 	.word	0x40010c00
 80009fc:	10110000 	.word	0x10110000

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a04:	f001 ff34 	bl	8002870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a08:	f000 f80d 	bl	8000a26 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0c:	f7ff ff52 	bl	80008b4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a10:	f001 fd06 	bl	8002420 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000a14:	f001 fe8a 	bl	800272c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a18:	f009 f9c8 	bl	8009dac <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a1c:	f7ff fd40 	bl	80004a0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000a20:	f009 f9f6 	bl	8009e10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <main+0x24>

08000a26 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b094      	sub	sp, #80	; 0x50
 8000a2a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a30:	2228      	movs	r2, #40	; 0x28
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f00c fdfd 	bl	800d634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a56:	2301      	movs	r3, #1
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a66:	2301      	movs	r3, #1
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a74:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a78:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 ff6c 	bl	800495c <HAL_RCC_OscConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a8a:	f000 f839 	bl	8000b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8e:	230f      	movs	r3, #15
 8000a90:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f004 f9d6 	bl	8004e5c <HAL_RCC_ClockConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ab6:	f000 f823 	bl	8000b00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000aba:	2310      	movs	r3, #16
 8000abc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f004 fb95 	bl	80051f4 <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ad0:	f000 f816 	bl	8000b00 <Error_Handler>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3750      	adds	r7, #80	; 0x50
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d101      	bne.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aee:	f001 fed5 	bl	800289c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40012c00 	.word	0x40012c00

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>

08000b0a <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b085      	sub	sp, #20
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	5c8a      	ldrb	r2, [r1, r2]
 8000b1e:	4413      	add	r3, r2
 8000b20:	3301      	adds	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b3f      	cmp	r3, #63	; 0x3f
 8000b28:	dd02      	ble.n	8000b30 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3b40      	subs	r3, #64	; 0x40
 8000b2e:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	5cd3      	ldrb	r3, [r2, r3]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d101      	bne.n	8000b5a <hist_is_space_for_new+0x1a>
		return true;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e01e      	b.n	8000b98 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	429a      	cmp	r2, r3
 8000b64:	db0c      	blt.n	8000b80 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4413      	add	r3, r2
 8000b74:	3b01      	subs	r3, #1
 8000b76:	683a      	ldr	r2, [r7, #0]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	da0c      	bge.n	8000b96 <hist_is_space_for_new+0x56>
			return true;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e00b      	b.n	8000b98 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	da01      	bge.n	8000b96 <hist_is_space_for_new+0x56>
			return true;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e000      	b.n	8000b98 <hist_is_space_for_new+0x58>
	}
	return false;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	60f8      	str	r0, [r7, #12]
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b3e      	cmp	r3, #62	; 0x3e
 8000bb2:	dc61      	bgt.n	8000c78 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8000bb4:	e002      	b.n	8000bbc <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f7ff ffa7 	bl	8000b0a <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f7ff ffbe 	bl	8000b40 <hist_is_space_for_new>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f5      	beq.n	8000bb6 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	5cd3      	ldrb	r3, [r2, r3]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d105      	bne.n	8000be2 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	b2d1      	uxtb	r1, r2
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	da0a      	bge.n	8000c06 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4413      	add	r3, r2
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	68b9      	ldr	r1, [r7, #8]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f00c fcf0 	bl	800d5e4 <memcpy>
 8000c04:	e018      	b.n	8000c38 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000c0e:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	3301      	adds	r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f00c fce0 	bl	800d5e4 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	18d1      	adds	r1, r2, r3
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	f00c fcd6 	bl	800d5e4 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	b2d1      	uxtb	r1, r2
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	1c5a      	adds	r2, r3, #1
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	2b3f      	cmp	r3, #63	; 0x3f
 8000c58:	dd05      	ble.n	8000c66 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2200      	movs	r2, #0
 8000c74:	649a      	str	r2, [r3, #72]	; 0x48
 8000c76:	e000      	b.n	8000c7a <hist_save_line+0xd8>
		return;
 8000c78:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	; 0x30
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8000c96:	e010      	b.n	8000cba <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ca4:	4413      	add	r3, r2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8000ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000caa:	2b3f      	cmp	r3, #63	; 0x3f
 8000cac:	dd02      	ble.n	8000cb4 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8000cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb0:	3b40      	subs	r3, #64	; 0x40
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8000cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1e8      	bne.n	8000c98 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d176      	bne.n	8000dba <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	f2c0 80d6 	blt.w	8000e84 <hist_restore_line+0x204>
			int header = pThis->begin;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000ce2:	e010      	b.n	8000d06 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	4413      	add	r3, r2
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cf0:	4413      	add	r3, r2
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	2b3f      	cmp	r3, #63	; 0x3f
 8000cf8:	dd02      	ble.n	8000d00 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	3b40      	subs	r3, #64	; 0x40
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8000d00:	6a3b      	ldr	r3, [r7, #32]
 8000d02:	3301      	adds	r3, #1
 8000d04:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	4413      	add	r3, r2
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d007      	beq.n	8000d22 <hist_restore_line+0xa2>
 8000d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d14:	6a3b      	ldr	r3, [r7, #32]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	1e5a      	subs	r2, r3, #1
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d1e0      	bne.n	8000ce4 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	4413      	add	r3, r2
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 80aa 	beq.w	8000e84 <hist_restore_line+0x204>
					pThis->cur++;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	4413      	add	r3, r2
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	4413      	add	r3, r2
 8000d48:	2b3f      	cmp	r3, #63	; 0x3f
 8000d4a:	dc11      	bgt.n	8000d70 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8000d4c:	2265      	movs	r2, #101	; 0x65
 8000d4e:	2100      	movs	r1, #0
 8000d50:	68b8      	ldr	r0, [r7, #8]
 8000d52:	f00c fc6f 	bl	800d634 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	18d1      	adds	r1, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	4413      	add	r3, r2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	68b8      	ldr	r0, [r7, #8]
 8000d6a:	f00c fc3b 	bl	800d5e4 <memcpy>
 8000d6e:	e01f      	b.n	8000db0 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000d76:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8000d78:	2265      	movs	r2, #101	; 0x65
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	68b8      	ldr	r0, [r7, #8]
 8000d7e:	f00c fc59 	bl	800d634 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	3301      	adds	r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	68b8      	ldr	r0, [r7, #8]
 8000d90:	f00c fc28 	bl	800d5e4 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	18d0      	adds	r0, r2, r3
 8000d9a:	68f9      	ldr	r1, [r7, #12]
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	4413      	add	r3, r2
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	461a      	mov	r2, r3
 8000dac:	f00c fc1a 	bl	800d5e4 <memcpy>
				}
				return pThis->ring_buf[header];
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	4413      	add	r3, r2
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	e066      	b.n	8000e88 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	dd5e      	ble.n	8000e80 <hist_restore_line+0x200>
				pThis->cur--;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dc6:	1e5a      	subs	r2, r3, #1
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8000dd6:	e010      	b.n	8000dfa <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	4413      	add	r3, r2
 8000de6:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	2b3f      	cmp	r3, #63	; 0x3f
 8000dec:	dd02      	ble.n	8000df4 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b40      	subs	r3, #64	; 0x40
 8000df2:	61fb      	str	r3, [r7, #28]
				j++;
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	3301      	adds	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	4413      	add	r3, r2
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d006      	beq.n	8000e14 <hist_restore_line+0x194>
 8000e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	1ad2      	subs	r2, r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d1e1      	bne.n	8000dd8 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	4413      	add	r3, r2
 8000e22:	2b3f      	cmp	r3, #63	; 0x3f
 8000e24:	dc0c      	bgt.n	8000e40 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	18d1      	adds	r1, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	4413      	add	r3, r2
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	68b8      	ldr	r0, [r7, #8]
 8000e3a:	f00c fbd3 	bl	800d5e4 <memcpy>
 8000e3e:	e01a      	b.n	8000e76 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000e46:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	4619      	mov	r1, r3
 8000e54:	68b8      	ldr	r0, [r7, #8]
 8000e56:	f00c fbc5 	bl	800d5e4 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	18d0      	adds	r0, r2, r3
 8000e60:	68f9      	ldr	r1, [r7, #12]
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	4413      	add	r3, r2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	f00c fbb7 	bl	800d5e4 <memcpy>
			}
			return pThis->ring_buf[header];
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	e003      	b.n	8000e88 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	e001      	b.n	8000e88 <hist_restore_line+0x208>
		}
	}
	return -1;
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3730      	adds	r7, #48	; 0x30
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8000ea4:	e002      	b.n	8000eac <split+0x1c>
			ind++;
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	3354      	adds	r3, #84	; 0x54
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d103      	bne.n	8000ec2 <split+0x32>
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	dbf1      	blt.n	8000ea6 <split+0x16>
		}
		if (!(ind < limit)) return i;
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	db01      	blt.n	8000ece <split+0x3e>
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	e024      	b.n	8000f18 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	1c58      	adds	r0, r3, #1
 8000eda:	6178      	str	r0, [r7, #20]
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	4403      	add	r3, r0
 8000ee2:	440a      	add	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2b07      	cmp	r3, #7
 8000eea:	dd05      	ble.n	8000ef8 <split+0x68>
			return -1;
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	e012      	b.n	8000f18 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4413      	add	r3, r2
 8000efe:	3354      	adds	r3, #84	; 0x54
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <split+0x7e>
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	dbf1      	blt.n	8000ef2 <split+0x62>
		}
		if (!(ind < limit)) return i;
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	dbca      	blt.n	8000eac <split+0x1c>
 8000f16:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	371c      	adds	r7, #28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr

08000f22 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f34:	4610      	mov	r0, r2
 8000f36:	4798      	blx	r3
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000f4e:	4803      	ldr	r0, [pc, #12]	; (8000f5c <terminal_backspace+0x1c>)
 8000f50:	4798      	blx	r3
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	0800df68 	.word	0x0800df68

08000f60 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000f6e:	4803      	ldr	r0, [pc, #12]	; (8000f7c <terminal_newline+0x1c>)
 8000f70:	4798      	blx	r3
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	0800df70 	.word	0x0800df70

08000f80 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
#ifdef _USE_LIBC_STDIO 
	if (offset > 0) {
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	dd07      	ble.n	8000fb0 <terminal_move_cursor+0x30>
		snprintf (str, 16, "\033[%dC", offset);
 8000fa0:	f107 0008 	add.w	r0, r7, #8
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <terminal_move_cursor+0x5c>)
 8000fa8:	2110      	movs	r1, #16
 8000faa:	f00c fb4b 	bl	800d644 <sniprintf>
 8000fae:	e00a      	b.n	8000fc6 <terminal_move_cursor+0x46>
	} else if (offset < 0) {
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	da07      	bge.n	8000fc6 <terminal_move_cursor+0x46>
		snprintf (str, 16, "\033[%dD", -(offset));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	425b      	negs	r3, r3
 8000fba:	f107 0008 	add.w	r0, r7, #8
 8000fbe:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <terminal_move_cursor+0x60>)
 8000fc0:	2110      	movs	r1, #16
 8000fc2:	f00c fb3f 	bl	800d644 <sniprintf>
		endstr = u16bit_to_str (-(offset), str+2);
		strcpy (endstr, "D");
	} else
		return;
#endif	
	pThis->print (str);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000fcc:	f107 0208 	add.w	r2, r7, #8
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4798      	blx	r3
}
 8000fd4:	bf00      	nop
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	0800df74 	.word	0x0800df74
 8000fe0:	0800df7c 	.word	0x0800df7c

08000fe4 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	6078      	str	r0, [r7, #4]
	char str[16];
#ifdef _USE_LIBC_STDIO
	snprintf (str, 16, "\033[%dD\033[%dC", \
 8000fec:	f107 0008 	add.w	r0, r7, #8
 8000ff0:	2305      	movs	r3, #5
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	236c      	movs	r3, #108	; 0x6c
 8000ff6:	4a07      	ldr	r2, [pc, #28]	; (8001014 <terminal_reset_cursor+0x30>)
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	f00c fb23 	bl	800d644 <sniprintf>
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
	strcpy (endstr, "D\033["); endstr += 3;
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
	strcpy (endstr, "C");
#endif
	pThis->print (str);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001004:	f107 0208 	add.w	r2, r7, #8
 8001008:	4610      	mov	r0, r2
 800100a:	4798      	blx	r3
}
 800100c:	bf00      	nop
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	0800df84 	.word	0x0800df84

08001018 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800102a:	4816      	ldr	r0, [pc, #88]	; (8001084 <terminal_print_line+0x6c>)
 800102c:	4798      	blx	r3

	char nch [] = {0,0};
 800102e:	2300      	movs	r3, #0
 8001030:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e014      	b.n	8001062 <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	4413      	add	r3, r2
 800103e:	3354      	adds	r3, #84	; 0x54
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8001044:	7c3b      	ldrb	r3, [r7, #16]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <terminal_print_line+0x36>
			nch[0] = ' ';
 800104a:	2320      	movs	r3, #32
 800104c:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001054:	f107 0210 	add.w	r2, r7, #16
 8001058:	4610      	mov	r0, r2
 800105a:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	429a      	cmp	r2, r3
 800106c:	dbe4      	blt.n	8001038 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f7ff ffb8 	bl	8000fe4 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f7ff ff82 	bl	8000f80 <terminal_move_cursor>
}
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	0800df90 	.word	0x0800df90

08001088 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3354      	adds	r3, #84	; 0x54
 8001096:	2265      	movs	r2, #101	; 0x65
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f00c faca 	bl	800d634 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3304      	adds	r3, #4
 80010a4:	2240      	movs	r2, #64	; 0x40
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00c fac3 	bl	800d634 <memset>
	pThis->ring_hist.begin = 0;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	pThis->execute = NULL;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pThis->get_completion = NULL;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
	pThis->prompt_str = prompt_default;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <microrl_init+0x78>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000

08001104 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	1d18      	adds	r0, r3, #4
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3354      	adds	r3, #84	; 0x54
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fd87 	bl	8000c80 <hist_restore_line>
 8001172:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	db1a      	blt.n	80011b0 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	3354      	adds	r3, #84	; 0x54
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		terminal_reset_cursor (pThis);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ff22 	bl	8000fe4 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80011a6:	461a      	mov	r2, r3
 80011a8:	2100      	movs	r1, #0
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff34 	bl	8001018 <terminal_print_line>
	}
}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	2b5b      	cmp	r3, #91	; 0x5b
 80011c8:	d104      	bne.n	80011d4 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
		return 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	e07b      	b.n	80012cc <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d14f      	bne.n	800127c <escape_process+0xc4>
		if (ch == 'A') {
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	2b41      	cmp	r3, #65	; 0x41
 80011e0:	d105      	bne.n	80011ee <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 80011e2:	2100      	movs	r1, #0
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ffb7 	bl	8001158 <hist_search>
#endif
			return 1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e06e      	b.n	80012cc <escape_process+0x114>
		} else if (ch == 'B') {
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	2b42      	cmp	r3, #66	; 0x42
 80011f2:	d105      	bne.n	8001200 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 80011f4:	2101      	movs	r1, #1
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffae 	bl	8001158 <hist_search>
#endif
			return 1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e065      	b.n	80012cc <escape_process+0x114>
		} else if (ch == 'C') {
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	2b43      	cmp	r3, #67	; 0x43
 8001204:	d114      	bne.n	8001230 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001212:	429a      	cmp	r2, r3
 8001214:	da0a      	bge.n	800122c <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 8001216:	2101      	movs	r1, #1
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff feb1 	bl	8000f80 <terminal_move_cursor>
				pThis->cursor++;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 800122c:	2301      	movs	r3, #1
 800122e:	e04d      	b.n	80012cc <escape_process+0x114>
		} else if (ch == 'D') {
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	2b44      	cmp	r3, #68	; 0x44
 8001234:	d112      	bne.n	800125c <escape_process+0xa4>
			if (pThis->cursor > 0) {
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800123c:	2b00      	cmp	r3, #0
 800123e:	dd0b      	ble.n	8001258 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fe9b 	bl	8000f80 <terminal_move_cursor>
				pThis->cursor--;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001250:	1e5a      	subs	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8001258:	2301      	movs	r3, #1
 800125a:	e037      	b.n	80012cc <escape_process+0x114>
		} else if (ch == '7') {
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	2b37      	cmp	r3, #55	; 0x37
 8001260:	d104      	bne.n	800126c <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2202      	movs	r2, #2
 8001266:	701a      	strb	r2, [r3, #0]
			return 0;
 8001268:	2300      	movs	r3, #0
 800126a:	e02f      	b.n	80012cc <escape_process+0x114>
		} else if (ch == '8') {
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	2b38      	cmp	r3, #56	; 0x38
 8001270:	d12b      	bne.n	80012ca <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2203      	movs	r2, #3
 8001276:	701a      	strb	r2, [r3, #0]
			return 0;
 8001278:	2300      	movs	r3, #0
 800127a:	e027      	b.n	80012cc <escape_process+0x114>
		} 
	} else if (ch == '~') {
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2b7e      	cmp	r3, #126	; 0x7e
 8001280:	d123      	bne.n	80012ca <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d108      	bne.n	800129c <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff feaa 	bl	8000fe4 <terminal_reset_cursor>
			pThis->cursor = 0;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 8001298:	2301      	movs	r3, #1
 800129a:	e017      	b.n	80012cc <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d112      	bne.n	80012ca <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	4619      	mov	r1, r3
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fe63 	bl	8000f80 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	dc60      	bgt.n	80013b0 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80012fa:	4619      	mov	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	440b      	add	r3, r1
 8001300:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3354      	adds	r3, #84	; 0x54
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor + len,
 800130c:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800131a:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 800131c:	461a      	mov	r2, r3
 800131e:	f00c f96f 	bl	800d600 <memmove>
		for (i = 0; i < len; i++) {
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e025      	b.n	8001374 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	441a      	add	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	440b      	add	r3, r1
 8001338:	7811      	ldrb	r1, [r2, #0]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	460a      	mov	r2, r1
 8001340:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	4413      	add	r3, r2
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	4413      	add	r3, r2
 8001352:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001356:	2b20      	cmp	r3, #32
 8001358:	d109      	bne.n	800136e <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	4413      	add	r3, r2
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	429a      	cmp	r2, r3
 800137a:	dbd5      	blt.n	8001328 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	441a      	add	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdlen += len;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	441a      	add	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pThis->cmdline [pThis->cmdlen] = '\0';
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	4413      	add	r3, r2
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <microrl_insert_text+0xde>
	}
	return false;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	dd31      	ble.n	8001430 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fdb7 	bl	8000f40 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013de:	3b01      	subs	r3, #1
 80013e0:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3354      	adds	r3, #84	; 0x54
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor-1,
 80013ec:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 80013fe:	461a      	mov	r2, r3
 8001400:	f00c f8fe 	bl	800d600 <memmove>
		pThis->cursor--;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800140a:	1e5a      	subs	r2, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001428:	1e5a      	subs	r2, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7fe fe8c 	bl	8000164 <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	e019      	b.n	800148a <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7fe fe7f 	bl	8000164 <strlen>
 8001466:	4602      	mov	r2, r0
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	429a      	cmp	r2, r3
 800146c:	d20a      	bcs.n	8001484 <common_len+0x4c>
			shortest = arr[i];
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f7fe fe72 	bl	8000164 <strlen>
 8001480:	4603      	mov	r3, r0
 8001482:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	3301      	adds	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1de      	bne.n	8001456 <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	e01f      	b.n	80014de <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	e012      	b.n	80014ca <common_len+0x92>
			if (shortest[i] != arr[j][i])
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	4413      	add	r3, r2
 80014aa:	781a      	ldrb	r2, [r3, #0]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	440b      	add	r3, r1
 80014b4:	6819      	ldr	r1, [r3, #0]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	440b      	add	r3, r1
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <common_len+0x8c>
				return i;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	e011      	b.n	80014e8 <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	3301      	adds	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e5      	bne.n	80014a4 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3301      	adds	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbdb      	blt.n	800149e <common_len+0x66>

	return i;
 80014e6:	697b      	ldr	r3, [r7, #20]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b08e      	sub	sp, #56	; 0x38
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 809c 	beq.w	800163c <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800150a:	f107 0208 	add.w	r2, r7, #8
 800150e:	4619      	mov	r1, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fcbd 	bl	8000e90 <split>
 8001516:	6378      	str	r0, [r7, #52]	; 0x34
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800151e:	3b01      	subs	r3, #1
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	4413      	add	r3, r2
 8001524:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 800152c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	637a      	str	r2, [r7, #52]	; 0x34
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001538:	4413      	add	r3, r2
 800153a:	4a42      	ldr	r2, [pc, #264]	; (8001644 <microrl_get_complite+0x154>)
 800153c:	f843 2c30 	str.w	r2, [r3, #-48]
	compl_token = pThis->get_completion (status, tkn_arr);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001546:	f107 0208 	add.w	r2, r7, #8
 800154a:	4611      	mov	r1, r2
 800154c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800154e:	4798      	blx	r3
 8001550:	62b8      	str	r0, [r7, #40]	; 0x28
	if (compl_token[0] != NULL) {
 8001552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d071      	beq.n	800163e <microrl_get_complite+0x14e>
		int i = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
		int len;

		if (compl_token[1] == NULL) {
 800155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001560:	3304      	adds	r3, #4
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d107      	bne.n	8001578 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8001568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe fdf9 	bl	8000164 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001576:	e026      	b.n	80015c6 <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800157a:	f7ff ff5d 	bl	8001438 <common_len>
 800157e:	62f8      	str	r0, [r7, #44]	; 0x2c
			terminal_newline (pThis);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fced 	bl	8000f60 <terminal_newline>
			while (compl_token [i] != NULL) {
 8001586:	e011      	b.n	80015ac <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800158e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001594:	440a      	add	r2, r1
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	4610      	mov	r0, r2
 800159a:	4798      	blx	r3
				pThis->print (" ");
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80015a2:	4829      	ldr	r0, [pc, #164]	; (8001648 <microrl_get_complite+0x158>)
 80015a4:	4798      	blx	r3
				i++;
 80015a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a8:	3301      	adds	r3, #1
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
			while (compl_token [i] != NULL) {
 80015ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015b2:	4413      	add	r3, r2
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1e6      	bne.n	8001588 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fcd0 	bl	8000f60 <terminal_newline>
			print_prompt (pThis);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fcae 	bl	8000f22 <print_prompt>
		}
		
		if (len) {
 80015c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d02b      	beq.n	8001624 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ce:	681c      	ldr	r4, [r3, #0]
 80015d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d2:	3b01      	subs	r3, #1
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80015da:	4413      	add	r3, r2
 80015dc:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe fdbf 	bl	8000164 <strlen>
 80015e6:	4603      	mov	r3, r0
 80015e8:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 80015ea:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80015ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ee:	3b01      	subs	r3, #1
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80015f6:	4413      	add	r3, r2
 80015f8:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fdb1 	bl	8000164 <strlen>
 8001602:	4603      	mov	r3, r0
 8001604:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001606:	461a      	mov	r2, r3
 8001608:	4629      	mov	r1, r5
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fe62 	bl	80012d4 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001612:	3304      	adds	r3, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d104      	bne.n	8001624 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 800161a:	2201      	movs	r2, #1
 800161c:	490a      	ldr	r1, [pc, #40]	; (8001648 <microrl_get_complite+0x158>)
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fe58 	bl	80012d4 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fcdd 	bl	8000fe4 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001630:	461a      	mov	r2, r3
 8001632:	2100      	movs	r1, #0
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff fcef 	bl	8001018 <terminal_print_line>
 800163a:	e000      	b.n	800163e <microrl_get_complite+0x14e>
		return;
 800163c:	bf00      	nop
	} 
}
 800163e:	3738      	adds	r7, #56	; 0x38
 8001640:	46bd      	mov	sp, r7
 8001642:	bdb0      	pop	{r4, r5, r7, pc}
 8001644:	0800df94 	.word	0x0800df94
 8001648:	0800df98 	.word	0x0800df98

0800164c <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	; 0x30
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fc83 	bl	8000f60 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001660:	2b00      	cmp	r3, #0
 8001662:	dd0a      	ble.n	800167a <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	1d18      	adds	r0, r3, #4
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001674:	461a      	mov	r2, r3
 8001676:	f7ff fa94 	bl	8000ba2 <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001680:	f107 020c 	add.w	r2, r7, #12
 8001684:	4619      	mov	r1, r3
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fc02 	bl	8000e90 <split>
 800168c:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (status == -1){
 800168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d109      	bne.n	80016aa <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800169c:	4817      	ldr	r0, [pc, #92]	; (80016fc <new_line_handler+0xb0>)
 800169e:	4798      	blx	r3
		pThis->print (ENDL);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80016a6:	4816      	ldr	r0, [pc, #88]	; (8001700 <new_line_handler+0xb4>)
 80016a8:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 80016aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	dd0c      	ble.n	80016ca <new_line_handler+0x7e>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80016c0:	f107 020c 	add.w	r2, r7, #12
 80016c4:	4611      	mov	r1, r2
 80016c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016c8:	4798      	blx	r3
	print_prompt (pThis);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fc29 	bl	8000f22 <print_prompt>
	pThis->cmdlen = 0;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3354      	adds	r3, #84	; 0x54
 80016e4:	2265      	movs	r2, #101	; 0x65
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f00b ffa3 	bl	800d634 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 80016f4:	bf00      	nop
 80016f6:	3730      	adds	r7, #48	; 0x30
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	0800df9c 	.word	0x0800df9c
 8001700:	0800df70 	.word	0x0800df70

08001704 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	785b      	ldrb	r3, [r3, #1]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00d      	beq.n	8001732 <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	4619      	mov	r1, r3
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fd4b 	bl	80011b8 <escape_process>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 81e3 	beq.w	8001af0 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8001730:	e1de      	b.n	8001af0 <microrl_insert_char+0x3ec>
		switch (ch) {
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	3b01      	subs	r3, #1
 8001736:	2b7e      	cmp	r3, #126	; 0x7e
 8001738:	f200 81af 	bhi.w	8001a9a <microrl_insert_char+0x396>
 800173c:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <microrl_insert_char+0x40>)
 800173e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001742:	bf00      	nop
 8001744:	080019d7 	.word	0x080019d7
 8001748:	08001a0f 	.word	0x08001a0f
 800174c:	08001a87 	.word	0x08001a87
 8001750:	08001a9b 	.word	0x08001a9b
 8001754:	080019b3 	.word	0x080019b3
 8001758:	080019e7 	.word	0x080019e7
 800175c:	08001a9b 	.word	0x08001a9b
 8001760:	08001a47 	.word	0x08001a47
 8001764:	08001969 	.word	0x08001969
 8001768:	08001941 	.word	0x08001941
 800176c:	0800199b 	.word	0x0800199b
 8001770:	08001a9b 	.word	0x08001a9b
 8001774:	08001941 	.word	0x08001941
 8001778:	08001a3d 	.word	0x08001a3d
 800177c:	08001a9b 	.word	0x08001a9b
 8001780:	08001a33 	.word	0x08001a33
 8001784:	08001a9b 	.word	0x08001a9b
 8001788:	08001a63 	.word	0x08001a63
 800178c:	08001a9b 	.word	0x08001a9b
 8001790:	08001a9b 	.word	0x08001a9b
 8001794:	0800197f 	.word	0x0800197f
 8001798:	08001a9b 	.word	0x08001a9b
 800179c:	08001a9b 	.word	0x08001a9b
 80017a0:	08001a9b 	.word	0x08001a9b
 80017a4:	08001a9b 	.word	0x08001a9b
 80017a8:	08001a9b 	.word	0x08001a9b
 80017ac:	08001971 	.word	0x08001971
 80017b0:	08001a9b 	.word	0x08001a9b
 80017b4:	08001a9b 	.word	0x08001a9b
 80017b8:	08001a9b 	.word	0x08001a9b
 80017bc:	08001a9b 	.word	0x08001a9b
 80017c0:	08001a9b 	.word	0x08001a9b
 80017c4:	08001a9b 	.word	0x08001a9b
 80017c8:	08001a9b 	.word	0x08001a9b
 80017cc:	08001a9b 	.word	0x08001a9b
 80017d0:	08001a9b 	.word	0x08001a9b
 80017d4:	08001a9b 	.word	0x08001a9b
 80017d8:	08001a9b 	.word	0x08001a9b
 80017dc:	08001a9b 	.word	0x08001a9b
 80017e0:	08001a9b 	.word	0x08001a9b
 80017e4:	08001a9b 	.word	0x08001a9b
 80017e8:	08001a9b 	.word	0x08001a9b
 80017ec:	08001a9b 	.word	0x08001a9b
 80017f0:	08001a9b 	.word	0x08001a9b
 80017f4:	08001a9b 	.word	0x08001a9b
 80017f8:	08001a9b 	.word	0x08001a9b
 80017fc:	08001a9b 	.word	0x08001a9b
 8001800:	08001a9b 	.word	0x08001a9b
 8001804:	08001a9b 	.word	0x08001a9b
 8001808:	08001a9b 	.word	0x08001a9b
 800180c:	08001a9b 	.word	0x08001a9b
 8001810:	08001a9b 	.word	0x08001a9b
 8001814:	08001a9b 	.word	0x08001a9b
 8001818:	08001a9b 	.word	0x08001a9b
 800181c:	08001a9b 	.word	0x08001a9b
 8001820:	08001a9b 	.word	0x08001a9b
 8001824:	08001a9b 	.word	0x08001a9b
 8001828:	08001a9b 	.word	0x08001a9b
 800182c:	08001a9b 	.word	0x08001a9b
 8001830:	08001a9b 	.word	0x08001a9b
 8001834:	08001a9b 	.word	0x08001a9b
 8001838:	08001a9b 	.word	0x08001a9b
 800183c:	08001a9b 	.word	0x08001a9b
 8001840:	08001a9b 	.word	0x08001a9b
 8001844:	08001a9b 	.word	0x08001a9b
 8001848:	08001a9b 	.word	0x08001a9b
 800184c:	08001a9b 	.word	0x08001a9b
 8001850:	08001a9b 	.word	0x08001a9b
 8001854:	08001a9b 	.word	0x08001a9b
 8001858:	08001a9b 	.word	0x08001a9b
 800185c:	08001a9b 	.word	0x08001a9b
 8001860:	08001a9b 	.word	0x08001a9b
 8001864:	08001a9b 	.word	0x08001a9b
 8001868:	08001a9b 	.word	0x08001a9b
 800186c:	08001a9b 	.word	0x08001a9b
 8001870:	08001a9b 	.word	0x08001a9b
 8001874:	08001a9b 	.word	0x08001a9b
 8001878:	08001a9b 	.word	0x08001a9b
 800187c:	08001a9b 	.word	0x08001a9b
 8001880:	08001a9b 	.word	0x08001a9b
 8001884:	08001a9b 	.word	0x08001a9b
 8001888:	08001a9b 	.word	0x08001a9b
 800188c:	08001a9b 	.word	0x08001a9b
 8001890:	08001a9b 	.word	0x08001a9b
 8001894:	08001a9b 	.word	0x08001a9b
 8001898:	08001a9b 	.word	0x08001a9b
 800189c:	08001a9b 	.word	0x08001a9b
 80018a0:	08001a9b 	.word	0x08001a9b
 80018a4:	08001a9b 	.word	0x08001a9b
 80018a8:	08001a9b 	.word	0x08001a9b
 80018ac:	08001a9b 	.word	0x08001a9b
 80018b0:	08001a9b 	.word	0x08001a9b
 80018b4:	08001a9b 	.word	0x08001a9b
 80018b8:	08001a9b 	.word	0x08001a9b
 80018bc:	08001a9b 	.word	0x08001a9b
 80018c0:	08001a9b 	.word	0x08001a9b
 80018c4:	08001a9b 	.word	0x08001a9b
 80018c8:	08001a9b 	.word	0x08001a9b
 80018cc:	08001a9b 	.word	0x08001a9b
 80018d0:	08001a9b 	.word	0x08001a9b
 80018d4:	08001a9b 	.word	0x08001a9b
 80018d8:	08001a9b 	.word	0x08001a9b
 80018dc:	08001a9b 	.word	0x08001a9b
 80018e0:	08001a9b 	.word	0x08001a9b
 80018e4:	08001a9b 	.word	0x08001a9b
 80018e8:	08001a9b 	.word	0x08001a9b
 80018ec:	08001a9b 	.word	0x08001a9b
 80018f0:	08001a9b 	.word	0x08001a9b
 80018f4:	08001a9b 	.word	0x08001a9b
 80018f8:	08001a9b 	.word	0x08001a9b
 80018fc:	08001a9b 	.word	0x08001a9b
 8001900:	08001a9b 	.word	0x08001a9b
 8001904:	08001a9b 	.word	0x08001a9b
 8001908:	08001a9b 	.word	0x08001a9b
 800190c:	08001a9b 	.word	0x08001a9b
 8001910:	08001a9b 	.word	0x08001a9b
 8001914:	08001a9b 	.word	0x08001a9b
 8001918:	08001a9b 	.word	0x08001a9b
 800191c:	08001a9b 	.word	0x08001a9b
 8001920:	08001a9b 	.word	0x08001a9b
 8001924:	08001a9b 	.word	0x08001a9b
 8001928:	08001a9b 	.word	0x08001a9b
 800192c:	08001a9b 	.word	0x08001a9b
 8001930:	08001a9b 	.word	0x08001a9b
 8001934:	08001a9b 	.word	0x08001a9b
 8001938:	08001a9b 	.word	0x08001a9b
 800193c:	08001a47 	.word	0x08001a47
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	789b      	ldrb	r3, [r3, #2]
 8001944:	461a      	mov	r2, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	2b0d      	cmp	r3, #13
 800194a:	d101      	bne.n	8001950 <microrl_insert_char+0x24c>
 800194c:	230a      	movs	r3, #10
 800194e:	e000      	b.n	8001952 <microrl_insert_char+0x24e>
 8001950:	230d      	movs	r3, #13
 8001952:	4293      	cmp	r3, r2
 8001954:	f000 80c1 	beq.w	8001ada <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff fe73 	bl	800164c <new_line_handler>
				break;
 8001966:	e0c3      	b.n	8001af0 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff fdc1 	bl	80014f0 <microrl_get_complite>
			break;
 800196e:	e0bf      	b.n	8001af0 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	705a      	strb	r2, [r3, #1]
			break;
 8001976:	e0bb      	b.n	8001af0 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff fd1e 	bl	80013ba <microrl_backspace>
					while (pThis->cursor > 0) {
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001984:	2b00      	cmp	r3, #0
 8001986:	dcf7      	bgt.n	8001978 <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800198e:	461a      	mov	r2, r3
 8001990:	2100      	movs	r1, #0
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fb40 	bl	8001018 <terminal_print_line>
			break;
 8001998:	e0aa      	b.n	8001af0 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80019a0:	4855      	ldr	r0, [pc, #340]	; (8001af8 <microrl_insert_char+0x3f4>)
 80019a2:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			break;
 80019b0:	e09e      	b.n	8001af0 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	4619      	mov	r1, r3
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fadc 	bl	8000f80 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80019d4:	e08c      	b.n	8001af0 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fb04 	bl	8000fe4 <terminal_reset_cursor>
				pThis->cursor = 0;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80019e4:	e084      	b.n	8001af0 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80019f2:	429a      	cmp	r2, r3
 80019f4:	da73      	bge.n	8001ade <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 80019f6:	2101      	movs	r1, #1
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff fac1 	bl	8000f80 <terminal_move_cursor>
				pThis->cursor++;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8001a0c:	e067      	b.n	8001ade <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d064      	beq.n	8001ae2 <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff faaf 	bl	8000f80 <terminal_move_cursor>
				pThis->cursor--;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8001a30:	e057      	b.n	8001ae2 <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 8001a32:	2100      	movs	r1, #0
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff fb8f 	bl	8001158 <hist_search>
			break;
 8001a3a:	e059      	b.n	8001af0 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fb8a 	bl	8001158 <hist_search>
			break;
 8001a44:	e054      	b.n	8001af0 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fcb7 	bl	80013ba <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fadc 	bl	8001018 <terminal_print_line>
			break;
 8001a60:	e046      	b.n	8001af0 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fa7c 	bl	8000f60 <terminal_newline>
				print_prompt (pThis);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff fa5a 	bl	8000f22 <print_prompt>
				terminal_reset_cursor (pThis);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff fab8 	bl	8000fe4 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff faca 	bl	8001018 <terminal_print_line>
			break;
 8001a84:	e034      	b.n	8001af0 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d02a      	beq.n	8001ae6 <microrl_insert_char+0x3e2>
				pThis->sigint();
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001a96:	4798      	blx	r3
			break;
 8001a98:	e025      	b.n	8001ae6 <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b20      	cmp	r3, #32
 8001a9e:	d104      	bne.n	8001aaa <microrl_insert_char+0x3a6>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d01f      	beq.n	8001aea <microrl_insert_char+0x3e6>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2b1f      	cmp	r3, #31
 8001aae:	dd1c      	ble.n	8001aea <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fc0c 	bl	80012d4 <microrl_insert_text>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d015      	beq.n	8001aee <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ac8:	1e59      	subs	r1, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff faa0 	bl	8001018 <terminal_print_line>
			break;
 8001ad8:	e009      	b.n	8001aee <microrl_insert_char+0x3ea>
					break;
 8001ada:	bf00      	nop
 8001adc:	e008      	b.n	8001af0 <microrl_insert_char+0x3ec>
			break;
 8001ade:	bf00      	nop
 8001ae0:	e006      	b.n	8001af0 <microrl_insert_char+0x3ec>
			break;
 8001ae2:	bf00      	nop
 8001ae4:	e004      	b.n	8001af0 <microrl_insert_char+0x3ec>
			break;
 8001ae6:	bf00      	nop
 8001ae8:	e002      	b.n	8001af0 <microrl_insert_char+0x3ec>
	}
 8001aea:	bf00      	nop
 8001aec:	e000      	b.n	8001af0 <microrl_insert_char+0x3ec>
			break;
 8001aee:	bf00      	nop
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	0800df90 	.word	0x0800df90

08001afc <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <microrl_print_char+0x20>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	79fa      	ldrb	r2, [r7, #7]
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fdf8 	bl	8001704 <microrl_insert_char>
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000004 	.word	0x20000004

08001b20 <print>:

void print (const char * str)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 8001b28:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <print+0x84>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	f083 0301 	eor.w	r3, r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <print+0x1e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b1b      	cmp	r3, #27
 8001b3c:	d02b      	beq.n	8001b96 <print+0x76>
		return;
	if (!CDC_is_ready)
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <print+0x88>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	f083 0301 	eor.w	r3, r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d126      	bne.n	8001b9a <print+0x7a>
		return;
	uint16_t len = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 8001b50:	89fb      	ldrh	r3, [r7, #14]
 8001b52:	3301      	adds	r3, #1
 8001b54:	81fb      	strh	r3, [r7, #14]
 8001b56:	89fb      	ldrh	r3, [r7, #14]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f6      	bne.n	8001b50 <print+0x30>
	uint32_t timeout = HAL_GetTick();
 8001b62:	f000 fead 	bl	80028c0 <HAL_GetTick>
 8001b66:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001b68:	e006      	b.n	8001b78 <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 8001b6a:	f000 fea9 	bl	80028c0 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d807      	bhi.n	8001b88 <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <print+0x8c>)
 8001b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001b7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f1      	bne.n	8001b6a <print+0x4a>
 8001b86:	e000      	b.n	8001b8a <print+0x6a>
			break;
 8001b88:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 8001b8a:	89fb      	ldrh	r3, [r7, #14]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f00b f920 	bl	800cdd4 <CDC_Transmit_FS>
 8001b94:	e002      	b.n	8001b9c <print+0x7c>
		return;
 8001b96:	bf00      	nop
 8001b98:	e000      	b.n	8001b9c <print+0x7c>
		return;
 8001b9a:	bf00      	nop
		len++;
	}
	test_str[i] = '\0';
	SEGGER_RTT_WriteString(0,test_str);
#endif
}
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	2000061f 	.word	0x2000061f
 8001bac:	20003834 	.word	0x20003834

08001bb0 <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	e010      	b.n	8001be2 <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 8001bc0:	490c      	ldr	r1, [pc, #48]	; (8001bf4 <find_color_by_name+0x44>)
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	79fa      	ldrb	r2, [r7, #7]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d101      	bne.n	8001bdc <find_color_by_name+0x2c>
		{
			return i;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	e006      	b.n	8001bea <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3301      	adds	r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b10      	cmp	r3, #16
 8001be6:	d9eb      	bls.n	8001bc0 <find_color_by_name+0x10>
		}
	}
	return 0;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	0800e5dc 	.word	0x0800e5dc

08001bf8 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ffd2 	bl	8001bb0 <find_color_by_name>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <print_color+0x44>)
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff7e 	bl	8001b20 <print>
	print(str);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff7b 	bl	8001b20 <print>
	print(COLOR_NC);
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <print_color+0x48>)
 8001c2c:	f7ff ff78 	bl	8001b20 <print>
	return 0;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	0800e5dc 	.word	0x0800e5dc
 8001c40:	0800dfb4 	.word	0x0800dfb4

08001c44 <str_length>:

int str_length(const char * str)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001c50:	e002      	b.n	8001c58 <str_length+0x14>
		i++;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3301      	adds	r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f6      	bne.n	8001c52 <str_length+0xe>
	return i;
 8001c64:	68fb      	ldr	r3, [r7, #12]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <print_help>:


int print_help(int argc, const char * const * argv)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
	print(_VER);
 8001c7a:	4858      	ldr	r0, [pc, #352]	; (8001ddc <print_help+0x16c>)
 8001c7c:	f7ff ff50 	bl	8001b20 <print>
	print(ENDL);
 8001c80:	4857      	ldr	r0, [pc, #348]	; (8001de0 <print_help+0x170>)
 8001c82:	f7ff ff4d 	bl	8001b20 <print>
	print ("Use ");
 8001c86:	4857      	ldr	r0, [pc, #348]	; (8001de4 <print_help+0x174>)
 8001c88:	f7ff ff4a 	bl	8001b20 <print>
	print_color("TAB", C_GREEN);
 8001c8c:	2105      	movs	r1, #5
 8001c8e:	4856      	ldr	r0, [pc, #344]	; (8001de8 <print_help+0x178>)
 8001c90:	f7ff ffb2 	bl	8001bf8 <print_color>
	print(" key for completion");
 8001c94:	4855      	ldr	r0, [pc, #340]	; (8001dec <print_help+0x17c>)
 8001c96:	f7ff ff43 	bl	8001b20 <print>
	print (ENDL);
 8001c9a:	4851      	ldr	r0, [pc, #324]	; (8001de0 <print_help+0x170>)
 8001c9c:	f7ff ff40 	bl	8001b20 <print>
	print ("Available commands:");
 8001ca0:	4853      	ldr	r0, [pc, #332]	; (8001df0 <print_help+0x180>)
 8001ca2:	f7ff ff3d 	bl	8001b20 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	e08a      	b.n	8001dc2 <print_help+0x152>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8001cac:	4a51      	ldr	r2, [pc, #324]	; (8001df4 <print_help+0x184>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	019b      	lsls	r3, r3, #6
 8001cb2:	4413      	add	r3, r2
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cba:	d11b      	bne.n	8001cf4 <print_help+0x84>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	4a4c      	ldr	r2, [pc, #304]	; (8001df4 <print_help+0x184>)
 8001cc2:	019b      	lsls	r3, r3, #6
 8001cc4:	4413      	add	r3, r2
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d004      	beq.n	8001cd8 <print_help+0x68>
				print_color(" aka ", C_L_PURPLE);
 8001cce:	210c      	movs	r1, #12
 8001cd0:	4849      	ldr	r0, [pc, #292]	; (8001df8 <print_help+0x188>)
 8001cd2:	f7ff ff91 	bl	8001bf8 <print_color>
 8001cd6:	e003      	b.n	8001ce0 <print_help+0x70>
			else
				print_color("/", C_L_PURPLE);
 8001cd8:	210c      	movs	r1, #12
 8001cda:	4848      	ldr	r0, [pc, #288]	; (8001dfc <print_help+0x18c>)
 8001cdc:	f7ff ff8c 	bl	8001bf8 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	019b      	lsls	r3, r3, #6
 8001ce4:	4a43      	ldr	r2, [pc, #268]	; (8001df4 <print_help+0x184>)
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3304      	adds	r3, #4
 8001cea:	210b      	movs	r1, #11
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff83 	bl	8001bf8 <print_color>
 8001cf2:	e063      	b.n	8001dbc <print_help+0x14c>
		}
		else
		{
			print(ENDL);
 8001cf4:	483a      	ldr	r0, [pc, #232]	; (8001de0 <print_help+0x170>)
 8001cf6:	f7ff ff13 	bl	8001b20 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8001cfa:	f06f 0303 	mvn.w	r3, #3
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	e005      	b.n	8001d0e <print_help+0x9e>
				print(" ");
 8001d02:	483f      	ldr	r0, [pc, #252]	; (8001e00 <print_help+0x190>)
 8001d04:	f7ff ff0c 	bl	8001b20 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	4a39      	ldr	r2, [pc, #228]	; (8001df4 <print_help+0x184>)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	019b      	lsls	r3, r3, #6
 8001d14:	4413      	add	r3, r2
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	dbf1      	blt.n	8001d02 <print_help+0x92>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	019b      	lsls	r3, r3, #6
 8001d22:	4a34      	ldr	r2, [pc, #208]	; (8001df4 <print_help+0x184>)
 8001d24:	4413      	add	r3, r2
 8001d26:	1d1a      	adds	r2, r3, #4
 8001d28:	4932      	ldr	r1, [pc, #200]	; (8001df4 <print_help+0x184>)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	019b      	lsls	r3, r3, #6
 8001d2e:	440b      	add	r3, r1
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4934      	ldr	r1, [pc, #208]	; (8001e04 <print_help+0x194>)
 8001d34:	5ccb      	ldrb	r3, [r1, r3]
 8001d36:	4619      	mov	r1, r3
 8001d38:	4610      	mov	r0, r2
 8001d3a:	f7ff ff5d 	bl	8001bf8 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	e005      	b.n	8001d50 <print_help+0xe0>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 8001d44:	482e      	ldr	r0, [pc, #184]	; (8001e00 <print_help+0x190>)
 8001d46:	f7ff feeb 	bl	8001b20 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	4a28      	ldr	r2, [pc, #160]	; (8001df4 <print_help+0x184>)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	4413      	add	r3, r2
 8001d58:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001d5a:	f1c3 040c 	rsb	r4, r3, #12
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	019b      	lsls	r3, r3, #6
 8001d62:	4a24      	ldr	r2, [pc, #144]	; (8001df4 <print_help+0x184>)
 8001d64:	4413      	add	r3, r2
 8001d66:	3304      	adds	r3, #4
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff6b 	bl	8001c44 <str_length>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	dbe5      	blt.n	8001d44 <print_help+0xd4>
			switch (microrl_actions[i].level){
 8001d78:	4a1e      	ldr	r2, [pc, #120]	; (8001df4 <print_help+0x184>)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	019b      	lsls	r3, r3, #6
 8001d7e:	4413      	add	r3, r2
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <print_help+0x11c>
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d004      	beq.n	8001d94 <print_help+0x124>
 8001d8a:	e007      	b.n	8001d9c <print_help+0x12c>
			case 0:
				print ("-");
 8001d8c:	481e      	ldr	r0, [pc, #120]	; (8001e08 <print_help+0x198>)
 8001d8e:	f7ff fec7 	bl	8001b20 <print>
				break;
 8001d92:	e007      	b.n	8001da4 <print_help+0x134>
			case 1:
				print ("^");
 8001d94:	481d      	ldr	r0, [pc, #116]	; (8001e0c <print_help+0x19c>)
 8001d96:	f7ff fec3 	bl	8001b20 <print>
				break;
 8001d9a:	e003      	b.n	8001da4 <print_help+0x134>
			default:
				print ("#");
 8001d9c:	481c      	ldr	r0, [pc, #112]	; (8001e10 <print_help+0x1a0>)
 8001d9e:	f7ff febf 	bl	8001b20 <print>
				break;
 8001da2:	bf00      	nop
			}
			print (" ");
 8001da4:	4816      	ldr	r0, [pc, #88]	; (8001e00 <print_help+0x190>)
 8001da6:	f7ff febb 	bl	8001b20 <print>
			print (microrl_actions[i].help_msg);
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	019b      	lsls	r3, r3, #6
 8001dae:	3308      	adds	r3, #8
 8001db0:	4a10      	ldr	r2, [pc, #64]	; (8001df4 <print_help+0x184>)
 8001db2:	4413      	add	r3, r2
 8001db4:	3306      	adds	r3, #6
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff feb2 	bl	8001b20 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b0d      	cmp	r3, #13
 8001dc6:	f67f af71 	bls.w	8001cac <print_help+0x3c>
		}
	}
	print(ENDL);
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <print_help+0x170>)
 8001dcc:	f7ff fea8 	bl	8001b20 <print>
	return 0;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	371c      	adds	r7, #28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd90      	pop	{r4, r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	0800dfbc 	.word	0x0800dfbc
 8001de0:	0800dfcc 	.word	0x0800dfcc
 8001de4:	0800dfd0 	.word	0x0800dfd0
 8001de8:	0800dfd8 	.word	0x0800dfd8
 8001dec:	0800dfdc 	.word	0x0800dfdc
 8001df0:	0800dff0 	.word	0x0800dff0
 8001df4:	0800e25c 	.word	0x0800e25c
 8001df8:	0800e004 	.word	0x0800e004
 8001dfc:	0800e00c 	.word	0x0800e00c
 8001e00:	0800e010 	.word	0x0800e010
 8001e04:	0800e698 	.word	0x0800e698
 8001e08:	0800e014 	.word	0x0800e014
 8001e0c:	0800e018 	.word	0x0800e018
 8001e10:	0800e01c 	.word	0x0800e01c

08001e14 <execute>:



int execute (int argc, const char * const * argv)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	; 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e050      	b.n	8001ed6 <execute+0xc2>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	e03f      	b.n	8001eba <execute+0xa6>
		{
			tokens_found = false;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 8001e3e:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <execute+0x174>)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	019b      	lsls	r3, r3, #6
 8001e44:	4413      	add	r3, r2
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d001      	beq.n	8001e56 <execute+0x42>
				synonym_level = current_level; // save the synonym level
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d003      	beq.n	8001e66 <execute+0x52>
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	db2d      	blt.n	8001ec2 <execute+0xae>
				break;
			if (current_level == i)
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d101      	bne.n	8001e72 <execute+0x5e>
				last_main_synonym = n;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	4413      	add	r3, r2
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	019b      	lsls	r3, r3, #6
 8001e80:	4941      	ldr	r1, [pc, #260]	; (8001f88 <execute+0x174>)
 8001e82:	440b      	add	r3, r1
 8001e84:	3304      	adds	r3, #4
 8001e86:	4619      	mov	r1, r3
 8001e88:	4610      	mov	r0, r2
 8001e8a:	f7fe f961 	bl	8000150 <strcmp>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10f      	bne.n	8001eb4 <execute+0xa0>
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d10b      	bne.n	8001eb4 <execute+0xa0>
					(i == synonym_level))
			{
				tokens_found = true;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	623a      	str	r2, [r7, #32]
 8001ea6:	4a38      	ldr	r2, [pc, #224]	; (8001f88 <execute+0x174>)
 8001ea8:	019b      	lsls	r3, r3, #6
 8001eaa:	4413      	add	r3, r2
 8001eac:	333c      	adds	r3, #60	; 0x3c
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001eb2:	e007      	b.n	8001ec4 <execute+0xb0>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	2b0d      	cmp	r3, #13
 8001ebe:	d9bc      	bls.n	8001e3a <execute+0x26>
 8001ec0:	e000      	b.n	8001ec4 <execute+0xb0>
				break;
 8001ec2:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8001ec4:	7efb      	ldrb	r3, [r7, #27]
 8001ec6:	f083 0301 	eor.w	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d107      	bne.n	8001ee0 <execute+0xcc>
	for (int i = 0; i < argc; i++)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dbaa      	blt.n	8001e34 <execute+0x20>
 8001ede:	e000      	b.n	8001ee2 <execute+0xce>
			break;
 8001ee0:	bf00      	nop
	}

	if (func != NULL)
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <execute+0xe0>
	{
		return func(argc, argv); // function found
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	6839      	ldr	r1, [r7, #0]
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	e045      	b.n	8001f80 <execute+0x16c>
	} else if (tokens_found)
 8001ef4:	7efb      	ldrb	r3, [r7, #27]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d021      	beq.n	8001f3e <execute+0x12a>
	{
		print_color ("command: '", C_L_RED);
 8001efa:	210a      	movs	r1, #10
 8001efc:	4823      	ldr	r0, [pc, #140]	; (8001f8c <execute+0x178>)
 8001efe:	f7ff fe7b 	bl	8001bf8 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	210a      	movs	r1, #10
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fe75 	bl	8001bf8 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 8001f0e:	210a      	movs	r1, #10
 8001f10:	481f      	ldr	r0, [pc, #124]	; (8001f90 <execute+0x17c>)
 8001f12:	f7ff fe71 	bl	8001bf8 <print_color>
		print(ENDL);
 8001f16:	481f      	ldr	r0, [pc, #124]	; (8001f94 <execute+0x180>)
 8001f18:	f7ff fe02 	bl	8001b20 <print>
		print_color ("use '", C_NC);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	481e      	ldr	r0, [pc, #120]	; (8001f98 <execute+0x184>)
 8001f20:	f7ff fe6a 	bl	8001bf8 <print_color>
		print_color ("?", C_GREEN);
 8001f24:	2105      	movs	r1, #5
 8001f26:	481d      	ldr	r0, [pc, #116]	; (8001f9c <execute+0x188>)
 8001f28:	f7ff fe66 	bl	8001bf8 <print_color>
		print_color ("' for help", C_NC);
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	481c      	ldr	r0, [pc, #112]	; (8001fa0 <execute+0x18c>)
 8001f30:	f7ff fe62 	bl	8001bf8 <print_color>
		print (ENDL);
 8001f34:	4817      	ldr	r0, [pc, #92]	; (8001f94 <execute+0x180>)
 8001f36:	f7ff fdf3 	bl	8001b20 <print>
		return 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e020      	b.n	8001f80 <execute+0x16c>
	}
	else
	{
		print_color ("command: '", C_RED);
 8001f3e:	2109      	movs	r1, #9
 8001f40:	4812      	ldr	r0, [pc, #72]	; (8001f8c <execute+0x178>)
 8001f42:	f7ff fe59 	bl	8001bf8 <print_color>
		print_color ((char*)argv[0], C_RED);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2109      	movs	r1, #9
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fe53 	bl	8001bf8 <print_color>
		print_color ("' not found", C_RED);
 8001f52:	2109      	movs	r1, #9
 8001f54:	4813      	ldr	r0, [pc, #76]	; (8001fa4 <execute+0x190>)
 8001f56:	f7ff fe4f 	bl	8001bf8 <print_color>
		print(ENDL);
 8001f5a:	480e      	ldr	r0, [pc, #56]	; (8001f94 <execute+0x180>)
 8001f5c:	f7ff fde0 	bl	8001b20 <print>
		print_color ("use '", C_NC);
 8001f60:	2100      	movs	r1, #0
 8001f62:	480d      	ldr	r0, [pc, #52]	; (8001f98 <execute+0x184>)
 8001f64:	f7ff fe48 	bl	8001bf8 <print_color>
		print_color ("?", C_GREEN);
 8001f68:	2105      	movs	r1, #5
 8001f6a:	480c      	ldr	r0, [pc, #48]	; (8001f9c <execute+0x188>)
 8001f6c:	f7ff fe44 	bl	8001bf8 <print_color>
		print_color ("' for help", C_NC);
 8001f70:	2100      	movs	r1, #0
 8001f72:	480b      	ldr	r0, [pc, #44]	; (8001fa0 <execute+0x18c>)
 8001f74:	f7ff fe40 	bl	8001bf8 <print_color>
		print (ENDL);
 8001f78:	4806      	ldr	r0, [pc, #24]	; (8001f94 <execute+0x180>)
 8001f7a:	f7ff fdd1 	bl	8001b20 <print>
		return 1;
 8001f7e:	2301      	movs	r3, #1

	}
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3728      	adds	r7, #40	; 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	0800e25c 	.word	0x0800e25c
 8001f8c:	0800e020 	.word	0x0800e020
 8001f90:	0800e02c 	.word	0x0800e02c
 8001f94:	0800dfcc 	.word	0x0800dfcc
 8001f98:	0800e04c 	.word	0x0800e04c
 8001f9c:	0800e054 	.word	0x0800e054
 8001fa0:	0800e058 	.word	0x0800e058
 8001fa4:	0800e064 	.word	0x0800e064

08001fa8 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	; 0x30
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
	int j = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 8001fb6:	4b5b      	ldr	r3, [pc, #364]	; (8002124 <complet+0x17c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d11b      	bne.n	8001ffa <complet+0x52>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc6:	e014      	b.n	8001ff2 <complet+0x4a>
			if (microrl_actions[i].level == 0)
 8001fc8:	4a57      	ldr	r2, [pc, #348]	; (8002128 <complet+0x180>)
 8001fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fcc:	019b      	lsls	r3, r3, #6
 8001fce:	4413      	add	r3, r2
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10a      	bne.n	8001fec <complet+0x44>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fde:	0192      	lsls	r2, r2, #6
 8001fe0:	4951      	ldr	r1, [pc, #324]	; (8002128 <complet+0x180>)
 8001fe2:	440a      	add	r2, r1
 8001fe4:	3204      	adds	r2, #4
 8001fe6:	494f      	ldr	r1, [pc, #316]	; (8002124 <complet+0x17c>)
 8001fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	3301      	adds	r3, #1
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff4:	2b0d      	cmp	r3, #13
 8001ff6:	d9e7      	bls.n	8001fc8 <complet+0x20>
 8001ff8:	e08a      	b.n	8002110 <complet+0x168>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002000:	3b01      	subs	r3, #1
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	4413      	add	r3, r2
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 8002014:	2300      	movs	r3, #0
 8002016:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	e072      	b.n	8002104 <complet+0x15c>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	e061      	b.n	80020e8 <complet+0x140>
			{
				tokens_found = false;
 8002024:	2300      	movs	r3, #0
 8002026:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 8002028:	4a3f      	ldr	r2, [pc, #252]	; (8002128 <complet+0x180>)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	019b      	lsls	r3, r3, #6
 800202e:	4413      	add	r3, r2
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203a:	d001      	beq.n	8002040 <complet+0x98>
					synonym_level = current_level; // save the synonym level
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002046:	d003      	beq.n	8002050 <complet+0xa8>
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	429a      	cmp	r2, r3
 800204e:	db4f      	blt.n	80020f0 <complet+0x148>
					break;
				if (current_level == i)
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	429a      	cmp	r2, r3
 8002056:	d101      	bne.n	800205c <complet+0xb4>
					last_main_synonym = n;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	429a      	cmp	r2, r3
 8002064:	d122      	bne.n	80020ac <complet+0x104>
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	019b      	lsls	r3, r3, #6
 800206a:	4a2f      	ldr	r2, [pc, #188]	; (8002128 <complet+0x180>)
 800206c:	4413      	add	r3, r2
 800206e:	3304      	adds	r3, #4
 8002070:	6939      	ldr	r1, [r7, #16]
 8002072:	4618      	mov	r0, r3
 8002074:	f00b fb1a 	bl	800d6ac <strstr>
 8002078:	4602      	mov	r2, r0
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	019b      	lsls	r3, r3, #6
 800207e:	492a      	ldr	r1, [pc, #168]	; (8002128 <complet+0x180>)
 8002080:	440b      	add	r3, r1
 8002082:	3304      	adds	r3, #4
 8002084:	429a      	cmp	r2, r3
 8002086:	d111      	bne.n	80020ac <complet+0x104>
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	429a      	cmp	r2, r3
 800208e:	d10d      	bne.n	80020ac <complet+0x104>
										(i == synonym_level))
				{
					tokens_found = true;
 8002090:	2301      	movs	r3, #1
 8002092:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 8002094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	62fa      	str	r2, [r7, #44]	; 0x2c
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	0192      	lsls	r2, r2, #6
 800209e:	4922      	ldr	r1, [pc, #136]	; (8002128 <complet+0x180>)
 80020a0:	440a      	add	r2, r1
 80020a2:	3204      	adds	r2, #4
 80020a4:	491f      	ldr	r1, [pc, #124]	; (8002124 <complet+0x17c>)
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80020aa:	e01a      	b.n	80020e2 <complet+0x13a>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	019b      	lsls	r3, r3, #6
 80020ba:	491b      	ldr	r1, [pc, #108]	; (8002128 <complet+0x180>)
 80020bc:	440b      	add	r3, r1
 80020be:	3304      	adds	r3, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f7fe f844 	bl	8000150 <strcmp>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <complet+0x13a>
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d105      	bne.n	80020e2 <complet+0x13a>
				{
					last_main_synonym++;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	3301      	adds	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 80020dc:	2301      	movs	r3, #1
 80020de:	77fb      	strb	r3, [r7, #31]
					break;
 80020e0:	e007      	b.n	80020f2 <complet+0x14a>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b0d      	cmp	r3, #13
 80020ec:	d99a      	bls.n	8002024 <complet+0x7c>
 80020ee:	e000      	b.n	80020f2 <complet+0x14a>
					break;
 80020f0:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 80020f2:	7ffb      	ldrb	r3, [r7, #31]
 80020f4:	f083 0301 	eor.w	r3, r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d107      	bne.n	800210e <complet+0x166>
		for (int i = 0; i < argc; i++)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	3301      	adds	r3, #1
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	db88      	blt.n	800201e <complet+0x76>
 800210c:	e000      	b.n	8002110 <complet+0x168>
				break;
 800210e:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <complet+0x17c>)
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	2100      	movs	r1, #0
 8002116:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 800211a:	4b02      	ldr	r3, [pc, #8]	; (8002124 <complet+0x17c>)
}
 800211c:	4618      	mov	r0, r3
 800211e:	3730      	adds	r7, #48	; 0x30
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200035fc 	.word	0x200035fc
 8002128:	0800e25c 	.word	0x0800e25c

0800212c <sigint>:
#endif


void sigint (void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <sigint+0x48>)
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]


	print (ENDL);
 8002138:	480f      	ldr	r0, [pc, #60]	; (8002178 <sigint+0x4c>)
 800213a:	f7ff fcf1 	bl	8001b20 <print>
	print ("^C catched!");
 800213e:	480f      	ldr	r0, [pc, #60]	; (800217c <sigint+0x50>)
 8002140:	f7ff fcee 	bl	8001b20 <print>
	int i = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 8002148:	e009      	b.n	800215e <sigint+0x32>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <sigint+0x54>)
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	4a08      	ldr	r2, [pc, #32]	; (8002178 <sigint+0x4c>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	4619      	mov	r1, r3
 800215a:	f7ff fad3 	bl	8001704 <microrl_insert_char>
	while (ENTER[i])
 800215e:	4a06      	ldr	r2, [pc, #24]	; (8002178 <sigint+0x4c>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4413      	add	r3, r2
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ef      	bne.n	800214a <sigint+0x1e>
}
 800216a:	bf00      	nop
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000620 	.word	0x20000620
 8002178:	0800dfcc 	.word	0x0800dfcc
 800217c:	0800e070 	.word	0x0800e070
 8002180:	20000004 	.word	0x20000004

08002184 <init_microrl>:

void init_microrl(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <init_microrl+0x38>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	490c      	ldr	r1, [pc, #48]	; (80021c0 <init_microrl+0x3c>)
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe ff7a 	bl	8001088 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <init_microrl+0x38>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	490a      	ldr	r1, [pc, #40]	; (80021c4 <init_microrl+0x40>)
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe ffc0 	bl	8001120 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <init_microrl+0x38>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4908      	ldr	r1, [pc, #32]	; (80021c8 <init_microrl+0x44>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe ffac 	bl	8001104 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <init_microrl+0x38>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4906      	ldr	r1, [pc, #24]	; (80021cc <init_microrl+0x48>)
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe ffc2 	bl	800113c <microrl_set_sigint_callback>
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000004 	.word	0x20000004
 80021c0:	08001b21 	.word	0x08001b21
 80021c4:	08001e15 	.word	0x08001e15
 80021c8:	08001fa9 	.word	0x08001fa9
 80021cc:	0800212d 	.word	0x0800212d

080021d0 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 80021da:	4805      	ldr	r0, [pc, #20]	; (80021f0 <clear_screen+0x20>)
 80021dc:	f7ff fca0 	bl	8001b20 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 80021e0:	4804      	ldr	r0, [pc, #16]	; (80021f4 <clear_screen+0x24>)
 80021e2:	f7ff fc9d 	bl	8001b20 <print>
	return 0;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	0800e07c 	.word	0x0800e07c
 80021f4:	0800e084 	.word	0x0800e084

080021f8 <set_CDC_ready>:


void set_CDC_ready(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <set_CDC_ready+0x14>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	2000061f 	.word	0x2000061f

08002210 <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <color_toggle+0x30>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	f083 0301 	eor.w	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf14      	ite	ne
 8002228:	2301      	movne	r3, #1
 800222a:	2300      	moveq	r3, #0
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <color_toggle+0x30>)
 8002230:	701a      	strb	r2, [r3, #0]
	return 0;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000008 	.word	0x20000008

08002244 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
	color_out = 1;
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <color_on+0x28>)
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 8002254:	2105      	movs	r1, #5
 8002256:	4806      	ldr	r0, [pc, #24]	; (8002270 <color_on+0x2c>)
 8002258:	f7ff fcce 	bl	8001bf8 <print_color>
	print(ENDL);
 800225c:	4805      	ldr	r0, [pc, #20]	; (8002274 <color_on+0x30>)
 800225e:	f7ff fc5f 	bl	8001b20 <print>
	return 0;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000008 	.word	0x20000008
 8002270:	0800e088 	.word	0x0800e088
 8002274:	0800dfcc 	.word	0x0800dfcc

08002278 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
	color_out = 0;
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <color_off+0x28>)
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8002288:	4806      	ldr	r0, [pc, #24]	; (80022a4 <color_off+0x2c>)
 800228a:	f7ff fc49 	bl	8001b20 <print>
	print(ENDL);
 800228e:	4806      	ldr	r0, [pc, #24]	; (80022a8 <color_off+0x30>)
 8002290:	f7ff fc46 	bl	8001b20 <print>
	return 0;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000008 	.word	0x20000008
 80022a4:	0800e09c 	.word	0x0800e09c
 80022a8:	0800dfcc 	.word	0x0800dfcc

080022ac <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
	if (color_out)
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <color_show+0x34>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d004      	beq.n	80022c8 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 80022be:	2105      	movs	r1, #5
 80022c0:	4808      	ldr	r0, [pc, #32]	; (80022e4 <color_show+0x38>)
 80022c2:	f7ff fc99 	bl	8001bf8 <print_color>
 80022c6:	e002      	b.n	80022ce <color_show+0x22>
	else
		print ("Color output is OFF");
 80022c8:	4807      	ldr	r0, [pc, #28]	; (80022e8 <color_show+0x3c>)
 80022ca:	f7ff fc29 	bl	8001b20 <print>
	print(ENDL);
 80022ce:	4807      	ldr	r0, [pc, #28]	; (80022ec <color_show+0x40>)
 80022d0:	f7ff fc26 	bl	8001b20 <print>
	return 0;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000008 	.word	0x20000008
 80022e4:	0800e088 	.word	0x0800e088
 80022e8:	0800e09c 	.word	0x0800e09c
 80022ec:	0800dfcc 	.word	0x0800dfcc

080022f0 <nema_toggle>:


int nema_toggle 	(int argc, const char * const * argv)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
	nema_out ^= 1;
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <nema_toggle+0x30>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	f083 0301 	eor.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf14      	ite	ne
 8002308:	2301      	movne	r3, #1
 800230a:	2300      	moveq	r3, #0
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <nema_toggle+0x30>)
 8002310:	701a      	strb	r2, [r3, #0]
	return 0;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000620 	.word	0x20000620

08002324 <nema_on>:

int nema_on 		(int argc, const char * const * argv)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
	nema_out = 1;
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <nema_on+0x28>)
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
	print_color ("NEMA output is ON", C_GREEN);
 8002334:	2105      	movs	r1, #5
 8002336:	4806      	ldr	r0, [pc, #24]	; (8002350 <nema_on+0x2c>)
 8002338:	f7ff fc5e 	bl	8001bf8 <print_color>
	print(ENDL);
 800233c:	4805      	ldr	r0, [pc, #20]	; (8002354 <nema_on+0x30>)
 800233e:	f7ff fbef 	bl	8001b20 <print>
	return 0;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000620 	.word	0x20000620
 8002350:	0800e0b0 	.word	0x0800e0b0
 8002354:	0800dfcc 	.word	0x0800dfcc

08002358 <nema_off>:

int nema_off 		(int argc, const char * const * argv)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
	nema_out = 0;
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <nema_off+0x28>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
	print ("NEM output is OFF");
 8002368:	4806      	ldr	r0, [pc, #24]	; (8002384 <nema_off+0x2c>)
 800236a:	f7ff fbd9 	bl	8001b20 <print>
	print(ENDL);
 800236e:	4806      	ldr	r0, [pc, #24]	; (8002388 <nema_off+0x30>)
 8002370:	f7ff fbd6 	bl	8001b20 <print>
	return 0;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000620 	.word	0x20000620
 8002384:	0800e0c4 	.word	0x0800e0c4
 8002388:	0800dfcc 	.word	0x0800dfcc

0800238c <show_encoder>:


int show_encoder (int argc, const char * const * argv)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]

	uint32_t buf = encoder_value;
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <show_encoder+0x78>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	617b      	str	r3, [r7, #20]
	char str [8];

	for (int i = 0; i < 5; i++)
 800239c:	2300      	movs	r3, #0
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	e01d      	b.n	80023de <show_encoder+0x52>
	{
		str[4 - i] = buf % 10 + '0';
 80023a2:	6979      	ldr	r1, [r7, #20]
 80023a4:	4b18      	ldr	r3, [pc, #96]	; (8002408 <show_encoder+0x7c>)
 80023a6:	fba3 2301 	umull	r2, r3, r3, r1
 80023aa:	08da      	lsrs	r2, r3, #3
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	1aca      	subs	r2, r1, r3
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	f1c3 0304 	rsb	r3, r3, #4
 80023be:	3230      	adds	r2, #48	; 0x30
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f107 0118 	add.w	r1, r7, #24
 80023c6:	440b      	add	r3, r1
 80023c8:	f803 2c10 	strb.w	r2, [r3, #-16]
		buf /= 10;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <show_encoder+0x7c>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	08db      	lsrs	r3, r3, #3
 80023d6:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 5; i++)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	3301      	adds	r3, #1
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	ddde      	ble.n	80023a2 <show_encoder+0x16>
	}
	str[5] = '\r';
 80023e4:	230d      	movs	r3, #13
 80023e6:	737b      	strb	r3, [r7, #13]
	str[6] = '\n';
 80023e8:	230a      	movs	r3, #10
 80023ea:	73bb      	strb	r3, [r7, #14]
	str[7] = '\0';
 80023ec:	2300      	movs	r3, #0
 80023ee:	73fb      	strb	r3, [r7, #15]
	print(str);
 80023f0:	f107 0308 	add.w	r3, r7, #8
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fb93 	bl	8001b20 <print>
	return 0;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	2000061c 	.word	0x2000061c
 8002408:	cccccccd 	.word	0xcccccccd

0800240c <get_nema>:


bool get_nema(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
	return nema_out;
 8002410:	4b02      	ldr	r3, [pc, #8]	; (800241c <get_nema+0x10>)
 8002412:	781b      	ldrb	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	20000620 	.word	0x20000620

08002420 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002424:	4b17      	ldr	r3, [pc, #92]	; (8002484 <MX_SPI2_Init+0x64>)
 8002426:	4a18      	ldr	r2, [pc, #96]	; (8002488 <MX_SPI2_Init+0x68>)
 8002428:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800242a:	4b16      	ldr	r3, [pc, #88]	; (8002484 <MX_SPI2_Init+0x64>)
 800242c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002430:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <MX_SPI2_Init+0x64>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <MX_SPI2_Init+0x64>)
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <MX_SPI2_Init+0x64>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <MX_SPI2_Init+0x64>)
 8002446:	2200      	movs	r2, #0
 8002448:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <MX_SPI2_Init+0x64>)
 800244c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002450:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <MX_SPI2_Init+0x64>)
 8002454:	2208      	movs	r2, #8
 8002456:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002458:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <MX_SPI2_Init+0x64>)
 800245a:	2200      	movs	r2, #0
 800245c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <MX_SPI2_Init+0x64>)
 8002460:	2200      	movs	r2, #0
 8002462:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002464:	4b07      	ldr	r3, [pc, #28]	; (8002484 <MX_SPI2_Init+0x64>)
 8002466:	2200      	movs	r2, #0
 8002468:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <MX_SPI2_Init+0x64>)
 800246c:	220a      	movs	r2, #10
 800246e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002470:	4804      	ldr	r0, [pc, #16]	; (8002484 <MX_SPI2_Init+0x64>)
 8002472:	f002 ff75 	bl	8005360 <HAL_SPI_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800247c:	f7fe fb40 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}
 8002484:	2000370c 	.word	0x2000370c
 8002488:	40003800 	.word	0x40003800

0800248c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1c      	ldr	r2, [pc, #112]	; (8002518 <HAL_SPI_MspInit+0x8c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d131      	bne.n	8002510 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_SPI_MspInit+0x90>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	4a1a      	ldr	r2, [pc, #104]	; (800251c <HAL_SPI_MspInit+0x90>)
 80024b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b6:	61d3      	str	r3, [r2, #28]
 80024b8:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_SPI_MspInit+0x90>)
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c4:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_SPI_MspInit+0x90>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	4a14      	ldr	r2, [pc, #80]	; (800251c <HAL_SPI_MspInit+0x90>)
 80024ca:	f043 0308 	orr.w	r3, r3, #8
 80024ce:	6193      	str	r3, [r2, #24]
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_SPI_MspInit+0x90>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80024dc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80024e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ea:	f107 0310 	add.w	r3, r7, #16
 80024ee:	4619      	mov	r1, r3
 80024f0:	480b      	ldr	r0, [pc, #44]	; (8002520 <HAL_SPI_MspInit+0x94>)
 80024f2:	f000 fb7f 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80024f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	4619      	mov	r1, r3
 800250a:	4805      	ldr	r0, [pc, #20]	; (8002520 <HAL_SPI_MspInit+0x94>)
 800250c:	f000 fb72 	bl	8002bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002510:	bf00      	nop
 8002512:	3720      	adds	r7, #32
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40003800 	.word	0x40003800
 800251c:	40021000 	.word	0x40021000
 8002520:	40010c00 	.word	0x40010c00

08002524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800252a:	4b18      	ldr	r3, [pc, #96]	; (800258c <HAL_MspInit+0x68>)
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	4a17      	ldr	r2, [pc, #92]	; (800258c <HAL_MspInit+0x68>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6193      	str	r3, [r2, #24]
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_MspInit+0x68>)
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_MspInit+0x68>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	4a11      	ldr	r2, [pc, #68]	; (800258c <HAL_MspInit+0x68>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254c:	61d3      	str	r3, [r2, #28]
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <HAL_MspInit+0x68>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	210f      	movs	r1, #15
 800255e:	f06f 0001 	mvn.w	r0, #1
 8002562:	f000 fa6c 	bl	8002a3e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_MspInit+0x6c>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_MspInit+0x6c>)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	40010000 	.word	0x40010000

08002594 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08c      	sub	sp, #48	; 0x30
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80025a4:	2200      	movs	r2, #0
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	2019      	movs	r0, #25
 80025aa:	f000 fa48 	bl	8002a3e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80025ae:	2019      	movs	r0, #25
 80025b0:	f000 fa61 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80025b4:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <HAL_InitTick+0x9c>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <HAL_InitTick+0x9c>)
 80025ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025be:	6193      	str	r3, [r2, #24]
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_InitTick+0x9c>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025cc:	f107 0210 	add.w	r2, r7, #16
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f002 fdbe 	bl	8005158 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80025dc:	f002 fda8 	bl	8005130 <HAL_RCC_GetPCLK2Freq>
 80025e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	4a13      	ldr	r2, [pc, #76]	; (8002634 <HAL_InitTick+0xa0>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0c9b      	lsrs	r3, r3, #18
 80025ec:	3b01      	subs	r3, #1
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_InitTick+0xa4>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <HAL_InitTick+0xa8>)
 80025f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <HAL_InitTick+0xa4>)
 80025f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025fe:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <HAL_InitTick+0xa4>)
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <HAL_InitTick+0xa4>)
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_InitTick+0xa4>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002610:	4809      	ldr	r0, [pc, #36]	; (8002638 <HAL_InitTick+0xa4>)
 8002612:	f002 ff29 	bl	8005468 <HAL_TIM_Base_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d104      	bne.n	8002626 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800261c:	4806      	ldr	r0, [pc, #24]	; (8002638 <HAL_InitTick+0xa4>)
 800261e:	f002 ff7b 	bl	8005518 <HAL_TIM_Base_Start_IT>
 8002622:	4603      	mov	r3, r0
 8002624:	e000      	b.n	8002628 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	3730      	adds	r7, #48	; 0x30
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	431bde83 	.word	0x431bde83
 8002638:	20003764 	.word	0x20003764
 800263c:	40012c00 	.word	0x40012c00

08002640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002644:	e7fe      	b.n	8002644 <NMI_Handler+0x4>

08002646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800264a:	e7fe      	b.n	800264a <HardFault_Handler+0x4>

0800264c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002650:	e7fe      	b.n	8002650 <MemManage_Handler+0x4>

08002652 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002656:	e7fe      	b.n	8002656 <BusFault_Handler+0x4>

08002658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800265c:	e7fe      	b.n	800265c <UsageFault_Handler+0x4>

0800265e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800266e:	2001      	movs	r0, #1
 8002670:	f000 fc8c 	bl	8002f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}

08002678 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800267e:	f000 fdd8 	bl	8003232 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200044c8 	.word	0x200044c8

0800268c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <TIM1_UP_IRQHandler+0x10>)
 8002692:	f002 ff93 	bl	80055bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20003764 	.word	0x20003764

080026a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <USART2_IRQHandler+0x10>)
 80026a6:	f003 f9a7 	bl	80059f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200037ac 	.word	0x200037ac

080026b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026bc:	4a14      	ldr	r2, [pc, #80]	; (8002710 <_sbrk+0x5c>)
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <_sbrk+0x60>)
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <_sbrk+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <_sbrk+0x64>)
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <_sbrk+0x68>)
 80026d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <_sbrk+0x64>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d207      	bcs.n	80026f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e4:	f00a ff54 	bl	800d590 <__errno>
 80026e8:	4603      	mov	r3, r0
 80026ea:	220c      	movs	r2, #12
 80026ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	e009      	b.n	8002708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <_sbrk+0x64>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026fa:	4b07      	ldr	r3, [pc, #28]	; (8002718 <_sbrk+0x64>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	4a05      	ldr	r2, [pc, #20]	; (8002718 <_sbrk+0x64>)
 8002704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002706:	68fb      	ldr	r3, [r7, #12]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20005000 	.word	0x20005000
 8002714:	00000400 	.word	0x00000400
 8002718:	20000624 	.word	0x20000624
 800271c:	200047c8 	.word	0x200047c8

08002720 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <MX_USART2_UART_Init+0x4c>)
 8002732:	4a12      	ldr	r2, [pc, #72]	; (800277c <MX_USART2_UART_Init+0x50>)
 8002734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <MX_USART2_UART_Init+0x4c>)
 8002738:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800273c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <MX_USART2_UART_Init+0x4c>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <MX_USART2_UART_Init+0x4c>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <MX_USART2_UART_Init+0x4c>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <MX_USART2_UART_Init+0x4c>)
 8002752:	220c      	movs	r2, #12
 8002754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <MX_USART2_UART_Init+0x4c>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <MX_USART2_UART_Init+0x4c>)
 800275e:	2200      	movs	r2, #0
 8002760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002762:	4805      	ldr	r0, [pc, #20]	; (8002778 <MX_USART2_UART_Init+0x4c>)
 8002764:	f003 f8ca 	bl	80058fc <HAL_UART_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800276e:	f7fe f9c7 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200037ac 	.word	0x200037ac
 800277c:	40004400 	.word	0x40004400

08002780 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0310 	add.w	r3, r7, #16
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_UART_MspInit+0x98>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d137      	bne.n	8002810 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027a0:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_UART_MspInit+0x9c>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	4a1d      	ldr	r2, [pc, #116]	; (800281c <HAL_UART_MspInit+0x9c>)
 80027a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027aa:	61d3      	str	r3, [r2, #28]
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_UART_MspInit+0x9c>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b8:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_UART_MspInit+0x9c>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	4a17      	ldr	r2, [pc, #92]	; (800281c <HAL_UART_MspInit+0x9c>)
 80027be:	f043 0304 	orr.w	r3, r3, #4
 80027c2:	6193      	str	r3, [r2, #24]
 80027c4:	4b15      	ldr	r3, [pc, #84]	; (800281c <HAL_UART_MspInit+0x9c>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027d0:	2304      	movs	r3, #4
 80027d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027d8:	2303      	movs	r3, #3
 80027da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	f107 0310 	add.w	r3, r7, #16
 80027e0:	4619      	mov	r1, r3
 80027e2:	480f      	ldr	r0, [pc, #60]	; (8002820 <HAL_UART_MspInit+0xa0>)
 80027e4:	f000 fa06 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027e8:	2308      	movs	r3, #8
 80027ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	4619      	mov	r1, r3
 80027fa:	4809      	ldr	r0, [pc, #36]	; (8002820 <HAL_UART_MspInit+0xa0>)
 80027fc:	f000 f9fa 	bl	8002bf4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002800:	2200      	movs	r2, #0
 8002802:	2105      	movs	r1, #5
 8002804:	2026      	movs	r0, #38	; 0x26
 8002806:	f000 f91a 	bl	8002a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800280a:	2026      	movs	r0, #38	; 0x26
 800280c:	f000 f933 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002810:	bf00      	nop
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40004400 	.word	0x40004400
 800281c:	40021000 	.word	0x40021000
 8002820:	40010800 	.word	0x40010800

08002824 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002824:	480c      	ldr	r0, [pc, #48]	; (8002858 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002826:	490d      	ldr	r1, [pc, #52]	; (800285c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002828:	4a0d      	ldr	r2, [pc, #52]	; (8002860 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800282a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800282c:	e002      	b.n	8002834 <LoopCopyDataInit>

0800282e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800282e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002832:	3304      	adds	r3, #4

08002834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002838:	d3f9      	bcc.n	800282e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800283c:	4c0a      	ldr	r4, [pc, #40]	; (8002868 <LoopFillZerobss+0x22>)
  movs r3, #0
 800283e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002840:	e001      	b.n	8002846 <LoopFillZerobss>

08002842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002844:	3204      	adds	r2, #4

08002846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002848:	d3fb      	bcc.n	8002842 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800284a:	f7ff ff69 	bl	8002720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800284e:	f00a fea5 	bl	800d59c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002852:	f7fe f8d5 	bl	8000a00 <main>
  bx lr
 8002856:	4770      	bx	lr
  ldr r0, =_sdata
 8002858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800285c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002860:	0800e6f0 	.word	0x0800e6f0
  ldr r2, =_sbss
 8002864:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002868:	200047c4 	.word	0x200047c4

0800286c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800286c:	e7fe      	b.n	800286c <ADC1_2_IRQHandler>
	...

08002870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_Init+0x28>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <HAL_Init+0x28>)
 800287a:	f043 0310 	orr.w	r3, r3, #16
 800287e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002880:	2003      	movs	r0, #3
 8002882:	f000 f8d1 	bl	8002a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002886:	2000      	movs	r0, #0
 8002888:	f7ff fe84 	bl	8002594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800288c:	f7ff fe4a 	bl	8002524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40022000 	.word	0x40022000

0800289c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_IncTick+0x1c>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_IncTick+0x20>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	4a03      	ldr	r2, [pc, #12]	; (80028bc <HAL_IncTick+0x20>)
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	20000014 	.word	0x20000014
 80028bc:	200037f0 	.word	0x200037f0

080028c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return uwTick;
 80028c4:	4b02      	ldr	r3, [pc, #8]	; (80028d0 <HAL_GetTick+0x10>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	200037f0 	.word	0x200037f0

080028d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002906:	4a04      	ldr	r2, [pc, #16]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	60d3      	str	r3, [r2, #12]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <__NVIC_GetPriorityGrouping+0x18>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	f003 0307 	and.w	r3, r3, #7
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	2b00      	cmp	r3, #0
 8002948:	db0b      	blt.n	8002962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	4906      	ldr	r1, [pc, #24]	; (800296c <__NVIC_EnableIRQ+0x34>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2001      	movs	r0, #1
 800295a:	fa00 f202 	lsl.w	r2, r0, r2
 800295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	e000e100 	.word	0xe000e100

08002970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	2b00      	cmp	r3, #0
 8002982:	db0a      	blt.n	800299a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	490c      	ldr	r1, [pc, #48]	; (80029bc <__NVIC_SetPriority+0x4c>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	0112      	lsls	r2, r2, #4
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	440b      	add	r3, r1
 8002994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002998:	e00a      	b.n	80029b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4908      	ldr	r1, [pc, #32]	; (80029c0 <__NVIC_SetPriority+0x50>)
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	3b04      	subs	r3, #4
 80029a8:	0112      	lsls	r2, r2, #4
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	440b      	add	r3, r1
 80029ae:	761a      	strb	r2, [r3, #24]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000e100 	.word	0xe000e100
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b089      	sub	sp, #36	; 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f1c3 0307 	rsb	r3, r3, #7
 80029de:	2b04      	cmp	r3, #4
 80029e0:	bf28      	it	cs
 80029e2:	2304      	movcs	r3, #4
 80029e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2b06      	cmp	r3, #6
 80029ec:	d902      	bls.n	80029f4 <NVIC_EncodePriority+0x30>
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3b03      	subs	r3, #3
 80029f2:	e000      	b.n	80029f6 <NVIC_EncodePriority+0x32>
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	f04f 32ff 	mov.w	r2, #4294967295
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43da      	mvns	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	401a      	ands	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	43d9      	mvns	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	4313      	orrs	r3, r2
         );
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3724      	adds	r7, #36	; 0x24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff ff4f 	bl	80028d4 <__NVIC_SetPriorityGrouping>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b086      	sub	sp, #24
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4603      	mov	r3, r0
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
 8002a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a50:	f7ff ff64 	bl	800291c <__NVIC_GetPriorityGrouping>
 8002a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	6978      	ldr	r0, [r7, #20]
 8002a5c:	f7ff ffb2 	bl	80029c4 <NVIC_EncodePriority>
 8002a60:	4602      	mov	r2, r0
 8002a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff81 	bl	8002970 <__NVIC_SetPriority>
}
 8002a6e:	bf00      	nop
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff57 	bl	8002938 <__NVIC_EnableIRQ>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d008      	beq.n	8002aba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2204      	movs	r2, #4
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e020      	b.n	8002afc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 020e 	bic.w	r2, r2, #14
 8002ac8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0201 	bic.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
	...

08002b08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d005      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2204      	movs	r2, #4
 8002b22:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	e051      	b.n	8002bce <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 020e 	bic.w	r2, r2, #14
 8002b38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a22      	ldr	r2, [pc, #136]	; (8002bd8 <HAL_DMA_Abort_IT+0xd0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d029      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0xa0>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a20      	ldr	r2, [pc, #128]	; (8002bdc <HAL_DMA_Abort_IT+0xd4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d022      	beq.n	8002ba4 <HAL_DMA_Abort_IT+0x9c>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <HAL_DMA_Abort_IT+0xd8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d01a      	beq.n	8002b9e <HAL_DMA_Abort_IT+0x96>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <HAL_DMA_Abort_IT+0xdc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d012      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x90>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <HAL_DMA_Abort_IT+0xe0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00a      	beq.n	8002b92 <HAL_DMA_Abort_IT+0x8a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1a      	ldr	r2, [pc, #104]	; (8002bec <HAL_DMA_Abort_IT+0xe4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d102      	bne.n	8002b8c <HAL_DMA_Abort_IT+0x84>
 8002b86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b8a:	e00e      	b.n	8002baa <HAL_DMA_Abort_IT+0xa2>
 8002b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b90:	e00b      	b.n	8002baa <HAL_DMA_Abort_IT+0xa2>
 8002b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b96:	e008      	b.n	8002baa <HAL_DMA_Abort_IT+0xa2>
 8002b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9c:	e005      	b.n	8002baa <HAL_DMA_Abort_IT+0xa2>
 8002b9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ba2:	e002      	b.n	8002baa <HAL_DMA_Abort_IT+0xa2>
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	e000      	b.n	8002baa <HAL_DMA_Abort_IT+0xa2>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <HAL_DMA_Abort_IT+0xe8>)
 8002bac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
    } 
  }
  return status;
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40020008 	.word	0x40020008
 8002bdc:	4002001c 	.word	0x4002001c
 8002be0:	40020030 	.word	0x40020030
 8002be4:	40020044 	.word	0x40020044
 8002be8:	40020058 	.word	0x40020058
 8002bec:	4002006c 	.word	0x4002006c
 8002bf0:	40020000 	.word	0x40020000

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b08b      	sub	sp, #44	; 0x2c
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c06:	e169      	b.n	8002edc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c08:	2201      	movs	r2, #1
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	f040 8158 	bne.w	8002ed6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4a9a      	ldr	r2, [pc, #616]	; (8002e94 <HAL_GPIO_Init+0x2a0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d05e      	beq.n	8002cee <HAL_GPIO_Init+0xfa>
 8002c30:	4a98      	ldr	r2, [pc, #608]	; (8002e94 <HAL_GPIO_Init+0x2a0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d875      	bhi.n	8002d22 <HAL_GPIO_Init+0x12e>
 8002c36:	4a98      	ldr	r2, [pc, #608]	; (8002e98 <HAL_GPIO_Init+0x2a4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d058      	beq.n	8002cee <HAL_GPIO_Init+0xfa>
 8002c3c:	4a96      	ldr	r2, [pc, #600]	; (8002e98 <HAL_GPIO_Init+0x2a4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d86f      	bhi.n	8002d22 <HAL_GPIO_Init+0x12e>
 8002c42:	4a96      	ldr	r2, [pc, #600]	; (8002e9c <HAL_GPIO_Init+0x2a8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d052      	beq.n	8002cee <HAL_GPIO_Init+0xfa>
 8002c48:	4a94      	ldr	r2, [pc, #592]	; (8002e9c <HAL_GPIO_Init+0x2a8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d869      	bhi.n	8002d22 <HAL_GPIO_Init+0x12e>
 8002c4e:	4a94      	ldr	r2, [pc, #592]	; (8002ea0 <HAL_GPIO_Init+0x2ac>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d04c      	beq.n	8002cee <HAL_GPIO_Init+0xfa>
 8002c54:	4a92      	ldr	r2, [pc, #584]	; (8002ea0 <HAL_GPIO_Init+0x2ac>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d863      	bhi.n	8002d22 <HAL_GPIO_Init+0x12e>
 8002c5a:	4a92      	ldr	r2, [pc, #584]	; (8002ea4 <HAL_GPIO_Init+0x2b0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d046      	beq.n	8002cee <HAL_GPIO_Init+0xfa>
 8002c60:	4a90      	ldr	r2, [pc, #576]	; (8002ea4 <HAL_GPIO_Init+0x2b0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d85d      	bhi.n	8002d22 <HAL_GPIO_Init+0x12e>
 8002c66:	2b12      	cmp	r3, #18
 8002c68:	d82a      	bhi.n	8002cc0 <HAL_GPIO_Init+0xcc>
 8002c6a:	2b12      	cmp	r3, #18
 8002c6c:	d859      	bhi.n	8002d22 <HAL_GPIO_Init+0x12e>
 8002c6e:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <HAL_GPIO_Init+0x80>)
 8002c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c74:	08002cef 	.word	0x08002cef
 8002c78:	08002cc9 	.word	0x08002cc9
 8002c7c:	08002cdb 	.word	0x08002cdb
 8002c80:	08002d1d 	.word	0x08002d1d
 8002c84:	08002d23 	.word	0x08002d23
 8002c88:	08002d23 	.word	0x08002d23
 8002c8c:	08002d23 	.word	0x08002d23
 8002c90:	08002d23 	.word	0x08002d23
 8002c94:	08002d23 	.word	0x08002d23
 8002c98:	08002d23 	.word	0x08002d23
 8002c9c:	08002d23 	.word	0x08002d23
 8002ca0:	08002d23 	.word	0x08002d23
 8002ca4:	08002d23 	.word	0x08002d23
 8002ca8:	08002d23 	.word	0x08002d23
 8002cac:	08002d23 	.word	0x08002d23
 8002cb0:	08002d23 	.word	0x08002d23
 8002cb4:	08002d23 	.word	0x08002d23
 8002cb8:	08002cd1 	.word	0x08002cd1
 8002cbc:	08002ce5 	.word	0x08002ce5
 8002cc0:	4a79      	ldr	r2, [pc, #484]	; (8002ea8 <HAL_GPIO_Init+0x2b4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d013      	beq.n	8002cee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cc6:	e02c      	b.n	8002d22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	623b      	str	r3, [r7, #32]
          break;
 8002cce:	e029      	b.n	8002d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	623b      	str	r3, [r7, #32]
          break;
 8002cd8:	e024      	b.n	8002d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	3308      	adds	r3, #8
 8002ce0:	623b      	str	r3, [r7, #32]
          break;
 8002ce2:	e01f      	b.n	8002d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	330c      	adds	r3, #12
 8002cea:	623b      	str	r3, [r7, #32]
          break;
 8002cec:	e01a      	b.n	8002d24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d102      	bne.n	8002cfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	623b      	str	r3, [r7, #32]
          break;
 8002cfa:	e013      	b.n	8002d24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d04:	2308      	movs	r3, #8
 8002d06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	611a      	str	r2, [r3, #16]
          break;
 8002d0e:	e009      	b.n	8002d24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d10:	2308      	movs	r3, #8
 8002d12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	615a      	str	r2, [r3, #20]
          break;
 8002d1a:	e003      	b.n	8002d24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	623b      	str	r3, [r7, #32]
          break;
 8002d20:	e000      	b.n	8002d24 <HAL_GPIO_Init+0x130>
          break;
 8002d22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2bff      	cmp	r3, #255	; 0xff
 8002d28:	d801      	bhi.n	8002d2e <HAL_GPIO_Init+0x13a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	e001      	b.n	8002d32 <HAL_GPIO_Init+0x13e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3304      	adds	r3, #4
 8002d32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2bff      	cmp	r3, #255	; 0xff
 8002d38:	d802      	bhi.n	8002d40 <HAL_GPIO_Init+0x14c>
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	e002      	b.n	8002d46 <HAL_GPIO_Init+0x152>
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	3b08      	subs	r3, #8
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	210f      	movs	r1, #15
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	401a      	ands	r2, r3
 8002d58:	6a39      	ldr	r1, [r7, #32]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	431a      	orrs	r2, r3
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80b1 	beq.w	8002ed6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d74:	4b4d      	ldr	r3, [pc, #308]	; (8002eac <HAL_GPIO_Init+0x2b8>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	4a4c      	ldr	r2, [pc, #304]	; (8002eac <HAL_GPIO_Init+0x2b8>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6193      	str	r3, [r2, #24]
 8002d80:	4b4a      	ldr	r3, [pc, #296]	; (8002eac <HAL_GPIO_Init+0x2b8>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d8c:	4a48      	ldr	r2, [pc, #288]	; (8002eb0 <HAL_GPIO_Init+0x2bc>)
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	089b      	lsrs	r3, r3, #2
 8002d92:	3302      	adds	r3, #2
 8002d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	220f      	movs	r2, #15
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a40      	ldr	r2, [pc, #256]	; (8002eb4 <HAL_GPIO_Init+0x2c0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d013      	beq.n	8002de0 <HAL_GPIO_Init+0x1ec>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a3f      	ldr	r2, [pc, #252]	; (8002eb8 <HAL_GPIO_Init+0x2c4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00d      	beq.n	8002ddc <HAL_GPIO_Init+0x1e8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a3e      	ldr	r2, [pc, #248]	; (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d007      	beq.n	8002dd8 <HAL_GPIO_Init+0x1e4>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a3d      	ldr	r2, [pc, #244]	; (8002ec0 <HAL_GPIO_Init+0x2cc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d101      	bne.n	8002dd4 <HAL_GPIO_Init+0x1e0>
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e006      	b.n	8002de2 <HAL_GPIO_Init+0x1ee>
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	e004      	b.n	8002de2 <HAL_GPIO_Init+0x1ee>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e002      	b.n	8002de2 <HAL_GPIO_Init+0x1ee>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <HAL_GPIO_Init+0x1ee>
 8002de0:	2300      	movs	r3, #0
 8002de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de4:	f002 0203 	and.w	r2, r2, #3
 8002de8:	0092      	lsls	r2, r2, #2
 8002dea:	4093      	lsls	r3, r2
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002df2:	492f      	ldr	r1, [pc, #188]	; (8002eb0 <HAL_GPIO_Init+0x2bc>)
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	089b      	lsrs	r3, r3, #2
 8002df8:	3302      	adds	r3, #2
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d006      	beq.n	8002e1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e0c:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	492c      	ldr	r1, [pc, #176]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]
 8002e18:	e006      	b.n	8002e28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e1a:	4b2a      	ldr	r3, [pc, #168]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	4928      	ldr	r1, [pc, #160]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d006      	beq.n	8002e42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e34:	4b23      	ldr	r3, [pc, #140]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	4922      	ldr	r1, [pc, #136]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]
 8002e40:	e006      	b.n	8002e50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e42:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	491e      	ldr	r1, [pc, #120]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d006      	beq.n	8002e6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	4918      	ldr	r1, [pc, #96]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	608b      	str	r3, [r1, #8]
 8002e68:	e006      	b.n	8002e78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e6a:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	4914      	ldr	r1, [pc, #80]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d021      	beq.n	8002ec8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	490e      	ldr	r1, [pc, #56]	; (8002ec4 <HAL_GPIO_Init+0x2d0>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60cb      	str	r3, [r1, #12]
 8002e90:	e021      	b.n	8002ed6 <HAL_GPIO_Init+0x2e2>
 8002e92:	bf00      	nop
 8002e94:	10320000 	.word	0x10320000
 8002e98:	10310000 	.word	0x10310000
 8002e9c:	10220000 	.word	0x10220000
 8002ea0:	10210000 	.word	0x10210000
 8002ea4:	10120000 	.word	0x10120000
 8002ea8:	10110000 	.word	0x10110000
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	40010800 	.word	0x40010800
 8002eb8:	40010c00 	.word	0x40010c00
 8002ebc:	40011000 	.word	0x40011000
 8002ec0:	40011400 	.word	0x40011400
 8002ec4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_GPIO_Init+0x304>)
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	4909      	ldr	r1, [pc, #36]	; (8002ef8 <HAL_GPIO_Init+0x304>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	3301      	adds	r3, #1
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f47f ae8e 	bne.w	8002c08 <HAL_GPIO_Init+0x14>
  }
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	372c      	adds	r7, #44	; 0x2c
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	40010400 	.word	0x40010400

08002efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	887b      	ldrh	r3, [r7, #2]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	e001      	b.n	8002f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	807b      	strh	r3, [r7, #2]
 8002f36:	4613      	mov	r3, r2
 8002f38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f3a:	787b      	ldrb	r3, [r7, #1]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f40:	887a      	ldrh	r2, [r7, #2]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f46:	e003      	b.n	8002f50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f48:	887b      	ldrh	r3, [r7, #2]
 8002f4a:	041a      	lsls	r2, r3, #16
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	611a      	str	r2, [r3, #16]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr

08002f5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b085      	sub	sp, #20
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	460b      	mov	r3, r1
 8002f64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f6c:	887a      	ldrh	r2, [r7, #2]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4013      	ands	r3, r2
 8002f72:	041a      	lsls	r2, r3, #16
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	43d9      	mvns	r1, r3
 8002f78:	887b      	ldrh	r3, [r7, #2]
 8002f7a:	400b      	ands	r3, r1
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	611a      	str	r2, [r3, #16]
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d006      	beq.n	8002fb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fa2:	4a05      	ldr	r2, [pc, #20]	; (8002fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f806 	bl	8002fbc <HAL_GPIO_EXTI_Callback>
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40010400 	.word	0x40010400

08002fbc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd2:	b08b      	sub	sp, #44	; 0x2c
 8002fd4:	af06      	add	r7, sp, #24
 8002fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0fd      	b.n	80031de <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f00a f820 	bl	800d03c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2203      	movs	r2, #3
 8003000:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f003 f8f9 	bl	8006200 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	687e      	ldr	r6, [r7, #4]
 8003016:	466d      	mov	r5, sp
 8003018:	f106 0410 	add.w	r4, r6, #16
 800301c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800301e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	602b      	str	r3, [r5, #0]
 8003024:	1d33      	adds	r3, r6, #4
 8003026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003028:	6838      	ldr	r0, [r7, #0]
 800302a:	f003 f8c3 	bl	80061b4 <USB_CoreInit>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0ce      	b.n	80031de <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f003 f8f4 	bl	8006234 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800304c:	2300      	movs	r3, #0
 800304e:	73fb      	strb	r3, [r7, #15]
 8003050:	e04c      	b.n	80030ec <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	3301      	adds	r3, #1
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	b298      	uxth	r0, r3
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	3336      	adds	r3, #54	; 0x36
 8003090:	4602      	mov	r2, r0
 8003092:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	3303      	adds	r3, #3
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030aa:	7bfa      	ldrb	r2, [r7, #15]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	440b      	add	r3, r1
 80030b8:	3338      	adds	r3, #56	; 0x38
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030be:	7bfa      	ldrb	r2, [r7, #15]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	440b      	add	r3, r1
 80030cc:	333c      	adds	r3, #60	; 0x3c
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030d2:	7bfa      	ldrb	r2, [r7, #15]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	440b      	add	r3, r1
 80030e0:	3340      	adds	r3, #64	; 0x40
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	3301      	adds	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	7bfa      	ldrb	r2, [r7, #15]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d3ad      	bcc.n	8003052 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	73fb      	strb	r3, [r7, #15]
 80030fa:	e044      	b.n	8003186 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030fc:	7bfa      	ldrb	r2, [r7, #15]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	440b      	add	r3, r1
 800310a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003112:	7bfa      	ldrb	r2, [r7, #15]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	440b      	add	r3, r1
 8003120:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	440b      	add	r3, r1
 8003136:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	440b      	add	r3, r1
 800314c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	440b      	add	r3, r1
 8003162:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800316a:	7bfa      	ldrb	r2, [r7, #15]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	440b      	add	r3, r1
 8003178:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	3301      	adds	r3, #1
 8003184:	73fb      	strb	r3, [r7, #15]
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d3b5      	bcc.n	80030fc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	603b      	str	r3, [r7, #0]
 8003196:	687e      	ldr	r6, [r7, #4]
 8003198:	466d      	mov	r5, sp
 800319a:	f106 0410 	add.w	r4, r6, #16
 800319e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	602b      	str	r3, [r5, #0]
 80031a6:	1d33      	adds	r3, r6, #4
 80031a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031aa:	6838      	ldr	r0, [r7, #0]
 80031ac:	f003 f84e 	bl	800624c <USB_DevInit>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e00d      	b.n	80031de <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f005 f9bf 	bl	800855a <USB_DevDisconnect>

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_PCD_Start+0x16>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e016      	b.n	800322a <HAL_PCD_Start+0x44>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f002 ffe3 	bl	80061d4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800320e:	2101      	movs	r1, #1
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f00a f986 	bl	800d522 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f005 f993 	bl	8008546 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b088      	sub	sp, #32
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f005 f995 	bl	800856e <USB_ReadInterrupts>
 8003244:	4603      	mov	r3, r0
 8003246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800324a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324e:	d102      	bne.n	8003256 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fb61 	bl	8003918 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f005 f987 	bl	800856e <USB_ReadInterrupts>
 8003260:	4603      	mov	r3, r0
 8003262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326a:	d112      	bne.n	8003292 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003274:	b29a      	uxth	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327e:	b292      	uxth	r2, r2
 8003280:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f009 ff54 	bl	800d132 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800328a:	2100      	movs	r1, #0
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f925 	bl	80034dc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f005 f969 	bl	800856e <USB_ReadInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032a6:	d10b      	bne.n	80032c0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032ba:	b292      	uxth	r2, r2
 80032bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f005 f952 	bl	800856e <USB_ReadInterrupts>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d4:	d10b      	bne.n	80032ee <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032de:	b29a      	uxth	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032e8:	b292      	uxth	r2, r2
 80032ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f005 f93b 	bl	800856e <USB_ReadInterrupts>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003302:	d126      	bne.n	8003352 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800330c:	b29a      	uxth	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0204 	bic.w	r2, r2, #4
 8003316:	b292      	uxth	r2, r2
 8003318:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003324:	b29a      	uxth	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0208 	bic.w	r2, r2, #8
 800332e:	b292      	uxth	r2, r2
 8003330:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f009 ff35 	bl	800d1a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003342:	b29a      	uxth	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800334c:	b292      	uxth	r2, r2
 800334e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f005 f909 	bl	800856e <USB_ReadInterrupts>
 800335c:	4603      	mov	r3, r0
 800335e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003366:	f040 8084 	bne.w	8003472 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800336a:	2300      	movs	r3, #0
 800336c:	77fb      	strb	r3, [r7, #31]
 800336e:	e011      	b.n	8003394 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	7ffb      	ldrb	r3, [r7, #31]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	441a      	add	r2, r3
 800337c:	7ffb      	ldrb	r3, [r7, #31]
 800337e:	8812      	ldrh	r2, [r2, #0]
 8003380:	b292      	uxth	r2, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	f107 0120 	add.w	r1, r7, #32
 8003388:	440b      	add	r3, r1
 800338a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800338e:	7ffb      	ldrb	r3, [r7, #31]
 8003390:	3301      	adds	r3, #1
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	7ffb      	ldrb	r3, [r7, #31]
 8003396:	2b07      	cmp	r3, #7
 8003398:	d9ea      	bls.n	8003370 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0201 	orr.w	r2, r2, #1
 80033ac:	b292      	uxth	r2, r2
 80033ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	b292      	uxth	r2, r2
 80033c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80033ca:	bf00      	nop
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f6      	beq.n	80033cc <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f0:	b292      	uxth	r2, r2
 80033f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80033f6:	2300      	movs	r3, #0
 80033f8:	77fb      	strb	r3, [r7, #31]
 80033fa:	e010      	b.n	800341e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80033fc:	7ffb      	ldrb	r3, [r7, #31]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	4611      	mov	r1, r2
 8003404:	7ffa      	ldrb	r2, [r7, #31]
 8003406:	0092      	lsls	r2, r2, #2
 8003408:	440a      	add	r2, r1
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	f107 0120 	add.w	r1, r7, #32
 8003410:	440b      	add	r3, r1
 8003412:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003416:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003418:	7ffb      	ldrb	r3, [r7, #31]
 800341a:	3301      	adds	r3, #1
 800341c:	77fb      	strb	r3, [r7, #31]
 800341e:	7ffb      	ldrb	r3, [r7, #31]
 8003420:	2b07      	cmp	r3, #7
 8003422:	d9eb      	bls.n	80033fc <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800342c:	b29a      	uxth	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0208 	orr.w	r2, r2, #8
 8003436:	b292      	uxth	r2, r2
 8003438:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003444:	b29a      	uxth	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800344e:	b292      	uxth	r2, r2
 8003450:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800345c:	b29a      	uxth	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0204 	orr.w	r2, r2, #4
 8003466:	b292      	uxth	r2, r2
 8003468:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f009 fe7f 	bl	800d170 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f005 f879 	bl	800856e <USB_ReadInterrupts>
 800347c:	4603      	mov	r3, r0
 800347e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003486:	d10e      	bne.n	80034a6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003490:	b29a      	uxth	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800349a:	b292      	uxth	r2, r2
 800349c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f009 fe38 	bl	800d116 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f005 f85f 	bl	800856e <USB_ReadInterrupts>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ba:	d10b      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ce:	b292      	uxth	r2, r2
 80034d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80034d4:	bf00      	nop
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_PCD_SetAddress+0x1a>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e013      	b.n	800351e <HAL_PCD_SetAddress+0x42>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f005 f806 	bl	8008520 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	4608      	mov	r0, r1
 8003530:	4611      	mov	r1, r2
 8003532:	461a      	mov	r2, r3
 8003534:	4603      	mov	r3, r0
 8003536:	70fb      	strb	r3, [r7, #3]
 8003538:	460b      	mov	r3, r1
 800353a:	803b      	strh	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003548:	2b00      	cmp	r3, #0
 800354a:	da0e      	bge.n	800356a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	4413      	add	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	705a      	strb	r2, [r3, #1]
 8003568:	e00e      	b.n	8003588 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	f003 0207 	and.w	r2, r3, #7
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	4413      	add	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	b2da      	uxtb	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003594:	883a      	ldrh	r2, [r7, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	78ba      	ldrb	r2, [r7, #2]
 800359e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	785b      	ldrb	r3, [r3, #1]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d004      	beq.n	80035b2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035b2:	78bb      	ldrb	r3, [r7, #2]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d102      	bne.n	80035be <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_PCD_EP_Open+0xa6>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e00e      	b.n	80035ea <HAL_PCD_EP_Open+0xc4>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68f9      	ldr	r1, [r7, #12]
 80035da:	4618      	mov	r0, r3
 80035dc:	f002 fe56 	bl	800628c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80035e8:	7afb      	ldrb	r3, [r7, #11]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003602:	2b00      	cmp	r3, #0
 8003604:	da0e      	bge.n	8003624 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	705a      	strb	r2, [r3, #1]
 8003622:	e00e      	b.n	8003642 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	f003 0207 	and.w	r2, r3, #7
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	b2da      	uxtb	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_PCD_EP_Close+0x6a>
 8003658:	2302      	movs	r3, #2
 800365a:	e00e      	b.n	800367a <HAL_PCD_EP_Close+0x88>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68f9      	ldr	r1, [r7, #12]
 800366a:	4618      	mov	r0, r3
 800366c:	f003 f978 	bl	8006960 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b086      	sub	sp, #24
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	460b      	mov	r3, r1
 8003690:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003692:	7afb      	ldrb	r3, [r7, #11]
 8003694:	f003 0207 	and.w	r2, r3, #7
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2200      	movs	r2, #0
 80036ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2200      	movs	r2, #0
 80036c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036c2:	7afb      	ldrb	r3, [r7, #11]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036ce:	7afb      	ldrb	r3, [r7, #11]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d106      	bne.n	80036e6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6979      	ldr	r1, [r7, #20]
 80036de:	4618      	mov	r0, r3
 80036e0:	f003 fb2a 	bl	8006d38 <USB_EPStartXfer>
 80036e4:	e005      	b.n	80036f2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6979      	ldr	r1, [r7, #20]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f003 fb23 	bl	8006d38 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	f003 0207 	and.w	r2, r3, #7
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	440b      	add	r3, r1
 800371a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	603b      	str	r3, [r7, #0]
 8003736:	460b      	mov	r3, r1
 8003738:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800373a:	7afb      	ldrb	r3, [r7, #11]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4413      	add	r3, r2
 800374e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2201      	movs	r2, #1
 8003774:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003776:	7afb      	ldrb	r3, [r7, #11]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	b2da      	uxtb	r2, r3
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003782:	7afb      	ldrb	r3, [r7, #11]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	2b00      	cmp	r3, #0
 800378a:	d106      	bne.n	800379a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6979      	ldr	r1, [r7, #20]
 8003792:	4618      	mov	r0, r3
 8003794:	f003 fad0 	bl	8006d38 <USB_EPStartXfer>
 8003798:	e005      	b.n	80037a6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6979      	ldr	r1, [r7, #20]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f003 fac9 	bl	8006d38 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	f003 0207 	and.w	r2, r3, #7
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d901      	bls.n	80037ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e04c      	b.n	8003868 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	da0e      	bge.n	80037f4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	705a      	strb	r2, [r3, #1]
 80037f2:	e00c      	b.n	800380e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	b2da      	uxtb	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_PCD_EP_SetStall+0x7e>
 800382a:	2302      	movs	r3, #2
 800382c:	e01c      	b.n	8003868 <HAL_PCD_EP_SetStall+0xb8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68f9      	ldr	r1, [r7, #12]
 800383c:	4618      	mov	r0, r3
 800383e:	f004 fd72 	bl	8008326 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	2b00      	cmp	r3, #0
 800384a:	d108      	bne.n	800385e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003856:	4619      	mov	r1, r3
 8003858:	4610      	mov	r0, r2
 800385a:	f004 fe97 	bl	800858c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	f003 020f 	and.w	r2, r3, #15
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	429a      	cmp	r2, r3
 8003888:	d901      	bls.n	800388e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e040      	b.n	8003910 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800388e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003892:	2b00      	cmp	r3, #0
 8003894:	da0e      	bge.n	80038b4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	4413      	add	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	705a      	strb	r2, [r3, #1]
 80038b2:	e00e      	b.n	80038d2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	f003 0207 	and.w	r2, r3, #7
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_PCD_EP_ClrStall+0x82>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e00e      	b.n	8003910 <HAL_PCD_EP_ClrStall+0xa0>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68f9      	ldr	r1, [r7, #12]
 8003900:	4618      	mov	r0, r3
 8003902:	f004 fd60 	bl	80083c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08e      	sub	sp, #56	; 0x38
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003920:	e2ec      	b.n	8003efc <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800392a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800392c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003938:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800393c:	2b00      	cmp	r3, #0
 800393e:	f040 8161 	bne.w	8003c04 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003942:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	d152      	bne.n	80039f2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395c:	81fb      	strh	r3, [r7, #14]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	89fb      	ldrh	r3, [r7, #14]
 8003964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800396c:	b29b      	uxth	r3, r3
 800396e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3328      	adds	r3, #40	; 0x28
 8003974:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800397e:	b29b      	uxth	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	3302      	adds	r3, #2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	441a      	add	r2, r3
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80039b0:	2100      	movs	r1, #0
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f009 fb95 	bl	800d0e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 829b 	beq.w	8003efc <PCD_EP_ISR_Handler+0x5e4>
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 8296 	bne.w	8003efc <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	b292      	uxth	r2, r2
 80039e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80039f0:	e284      	b.n	8003efc <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003a02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d034      	beq.n	8003a76 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	3306      	adds	r3, #6
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f004 fdee 	bl	800862c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	823b      	strh	r3, [r7, #16]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	8a3a      	ldrh	r2, [r7, #16]
 8003a66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a6a:	b292      	uxth	r2, r2
 8003a6c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f009 fb0a 	bl	800d088 <HAL_PCD_SetupStageCallback>
 8003a74:	e242      	b.n	8003efc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a76:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f280 823e 	bge.w	8003efc <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	83bb      	strh	r3, [r7, #28]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	8bba      	ldrh	r2, [r7, #28]
 8003a96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a9a:	b292      	uxth	r2, r2
 8003a9c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3306      	adds	r3, #6
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d019      	beq.n	8003b06 <PCD_EP_ISR_Handler+0x1ee>
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d015      	beq.n	8003b06 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	6959      	ldr	r1, [r3, #20]
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f004 fd9e 	bl	800862c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	441a      	add	r2, r3
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003afe:	2100      	movs	r1, #0
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f009 fad3 	bl	800d0ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f040 81f2 	bne.w	8003efc <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d112      	bne.n	8003b66 <PCD_EP_ISR_Handler+0x24e>
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	801a      	strh	r2, [r3, #0]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	801a      	strh	r2, [r3, #0]
 8003b64:	e02f      	b.n	8003bc6 <PCD_EP_ISR_Handler+0x2ae>
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b3e      	cmp	r3, #62	; 0x3e
 8003b6c:	d813      	bhi.n	8003b96 <PCD_EP_ISR_Handler+0x27e>
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	085b      	lsrs	r3, r3, #1
 8003b74:	633b      	str	r3, [r7, #48]	; 0x30
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <PCD_EP_ISR_Handler+0x270>
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	3301      	adds	r3, #1
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	029b      	lsls	r3, r3, #10
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	801a      	strh	r2, [r3, #0]
 8003b94:	e017      	b.n	8003bc6 <PCD_EP_ISR_Handler+0x2ae>
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d102      	bne.n	8003bb0 <PCD_EP_ISR_Handler+0x298>
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	3b01      	subs	r3, #1
 8003bae:	633b      	str	r3, [r7, #48]	; 0x30
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	029b      	lsls	r3, r3, #10
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	827b      	strh	r3, [r7, #18]
 8003bd8:	8a7b      	ldrh	r3, [r7, #18]
 8003bda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003bde:	827b      	strh	r3, [r7, #18]
 8003be0:	8a7b      	ldrh	r3, [r7, #18]
 8003be2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003be6:	827b      	strh	r3, [r7, #18]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	8a7b      	ldrh	r3, [r7, #18]
 8003bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	8013      	strh	r3, [r2, #0]
 8003c02:	e17b      	b.n	8003efc <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c16:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f280 80ea 	bge.w	8003df4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c36:	4013      	ands	r3, r2
 8003c38:	853b      	strh	r3, [r7, #40]	; 0x28
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003c4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c4e:	b292      	uxth	r2, r2
 8003c50:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003c52:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	7b1b      	ldrb	r3, [r3, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d122      	bne.n	8003cb6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4413      	add	r3, r2
 8003c84:	3306      	adds	r3, #6
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c98:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003c9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8087 	beq.w	8003db0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	6959      	ldr	r1, [r3, #20]
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	88da      	ldrh	r2, [r3, #6]
 8003cae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cb0:	f004 fcbc 	bl	800862c <USB_ReadPMA>
 8003cb4:	e07c      	b.n	8003db0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	78db      	ldrb	r3, [r3, #3]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d108      	bne.n	8003cd0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003cbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f927 	bl	8003f18 <HAL_PCD_EP_DB_Receive>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003cce:	e06f      	b.n	8003db0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cea:	847b      	strh	r3, [r7, #34]	; 0x22
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	441a      	add	r2, r3
 8003cfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d021      	beq.n	8003d6e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3302      	adds	r3, #2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d52:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003d54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d02a      	beq.n	8003db0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	6959      	ldr	r1, [r3, #20]
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	891a      	ldrh	r2, [r3, #8]
 8003d66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d68:	f004 fc60 	bl	800862c <USB_ReadPMA>
 8003d6c:	e020      	b.n	8003db0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	3306      	adds	r3, #6
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d96:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003d98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	6959      	ldr	r1, [r3, #20]
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	895a      	ldrh	r2, [r3, #10]
 8003daa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dac:	f004 fc3e 	bl	800862c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003db6:	441a      	add	r2, r3
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dc2:	441a      	add	r2, r3
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d004      	beq.n	8003dda <PCD_EP_ISR_Handler+0x4c2>
 8003dd0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d206      	bcs.n	8003de8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	4619      	mov	r1, r3
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f009 f963 	bl	800d0ac <HAL_PCD_DataOutStageCallback>
 8003de6:	e005      	b.n	8003df4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dee:	4618      	mov	r0, r3
 8003df0:	f002 ffa2 	bl	8006d38 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003df4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d07e      	beq.n	8003efc <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003dfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	4413      	add	r3, r2
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2c:	843b      	strh	r3, [r7, #32]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	441a      	add	r2, r3
 8003e3c:	8c3b      	ldrh	r3, [r7, #32]
 8003e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	78db      	ldrb	r3, [r3, #3]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d00c      	beq.n	8003e6c <PCD_EP_ISR_Handler+0x554>
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	78db      	ldrb	r3, [r3, #3]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d146      	bne.n	8003ef0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003e62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d141      	bne.n	8003ef0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4413      	add	r3, r2
 8003e80:	3302      	adds	r3, #2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e94:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	8bfb      	ldrh	r3, [r7, #30]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d906      	bls.n	8003eae <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	699a      	ldr	r2, [r3, #24]
 8003ea4:	8bfb      	ldrh	r3, [r7, #30]
 8003ea6:	1ad2      	subs	r2, r2, r3
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	619a      	str	r2, [r3, #24]
 8003eac:	e002      	b.n	8003eb4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f009 f90d 	bl	800d0e2 <HAL_PCD_DataInStageCallback>
 8003ec8:	e018      	b.n	8003efc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	8bfb      	ldrh	r3, [r7, #30]
 8003ed0:	441a      	add	r2, r3
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	69da      	ldr	r2, [r3, #28]
 8003eda:	8bfb      	ldrh	r3, [r7, #30]
 8003edc:	441a      	add	r2, r3
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f002 ff25 	bl	8006d38 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003eee:	e005      	b.n	8003efc <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ef0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f91b 	bl	8004132 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	b21b      	sxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f6ff ad0a 	blt.w	8003922 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3738      	adds	r7, #56	; 0x38
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d07e      	beq.n	800402e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	4413      	add	r3, r2
 8003f44:	3302      	adds	r3, #2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f58:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	8b7b      	ldrh	r3, [r7, #26]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d306      	bcc.n	8003f72 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	8b7b      	ldrh	r3, [r7, #26]
 8003f6a:	1ad2      	subs	r2, r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	619a      	str	r2, [r3, #24]
 8003f70:	e002      	b.n	8003f78 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2200      	movs	r2, #0
 8003f76:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d123      	bne.n	8003fc8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9a:	833b      	strh	r3, [r7, #24]
 8003f9c:	8b3b      	ldrh	r3, [r7, #24]
 8003f9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003fa2:	833b      	strh	r3, [r7, #24]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	441a      	add	r2, r3
 8003fb2:	8b3b      	ldrh	r3, [r7, #24]
 8003fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d01f      	beq.n	8004012 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fec:	82fb      	strh	r3, [r7, #22]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	441a      	add	r2, r3
 8003ffc:	8afb      	ldrh	r3, [r7, #22]
 8003ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800400e:	b29b      	uxth	r3, r3
 8004010:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004012:	8b7b      	ldrh	r3, [r7, #26]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8087 	beq.w	8004128 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6959      	ldr	r1, [r3, #20]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	891a      	ldrh	r2, [r3, #8]
 8004026:	8b7b      	ldrh	r3, [r7, #26]
 8004028:	f004 fb00 	bl	800862c <USB_ReadPMA>
 800402c:	e07c      	b.n	8004128 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	3306      	adds	r3, #6
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004056:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	8b7b      	ldrh	r3, [r7, #26]
 800405e:	429a      	cmp	r2, r3
 8004060:	d306      	bcc.n	8004070 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	8b7b      	ldrh	r3, [r7, #26]
 8004068:	1ad2      	subs	r2, r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	619a      	str	r2, [r3, #24]
 800406e:	e002      	b.n	8004076 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2200      	movs	r2, #0
 8004074:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d123      	bne.n	80040c6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004098:	83fb      	strh	r3, [r7, #30]
 800409a:	8bfb      	ldrh	r3, [r7, #30]
 800409c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040a0:	83fb      	strh	r3, [r7, #30]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	441a      	add	r2, r3
 80040b0:	8bfb      	ldrh	r3, [r7, #30]
 80040b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d11f      	bne.n	8004110 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ea:	83bb      	strh	r3, [r7, #28]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	441a      	add	r2, r3
 80040fa:	8bbb      	ldrh	r3, [r7, #28]
 80040fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004108:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800410c:	b29b      	uxth	r3, r3
 800410e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004110:	8b7b      	ldrh	r3, [r7, #26]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d008      	beq.n	8004128 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	6959      	ldr	r1, [r3, #20]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	895a      	ldrh	r2, [r3, #10]
 8004122:	8b7b      	ldrh	r3, [r7, #26]
 8004124:	f004 fa82 	bl	800862c <USB_ReadPMA>
    }
  }

  return count;
 8004128:	8b7b      	ldrh	r3, [r7, #26]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b0a2      	sub	sp, #136	; 0x88
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	4613      	mov	r3, r2
 800413e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004140:	88fb      	ldrh	r3, [r7, #6]
 8004142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 81c7 	beq.w	80044da <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004154:	b29b      	uxth	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4413      	add	r3, r2
 8004160:	3302      	adds	r3, #2
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004174:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	699a      	ldr	r2, [r3, #24]
 800417c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004180:	429a      	cmp	r2, r3
 8004182:	d907      	bls.n	8004194 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	699a      	ldr	r2, [r3, #24]
 8004188:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800418c:	1ad2      	subs	r2, r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	619a      	str	r2, [r3, #24]
 8004192:	e002      	b.n	800419a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2200      	movs	r2, #0
 8004198:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f040 80b9 	bne.w	8004316 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	785b      	ldrb	r3, [r3, #1]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d126      	bne.n	80041fa <HAL_PCD_EP_DB_Transmit+0xc8>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	4413      	add	r3, r2
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	011a      	lsls	r2, r3, #4
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041cc:	4413      	add	r3, r2
 80041ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041de:	b29a      	uxth	r2, r3
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	801a      	strh	r2, [r3, #0]
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	801a      	strh	r2, [r3, #0]
 80041f8:	e01a      	b.n	8004230 <HAL_PCD_EP_DB_Transmit+0xfe>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	785b      	ldrb	r3, [r3, #1]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d116      	bne.n	8004230 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	633b      	str	r3, [r7, #48]	; 0x30
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004210:	b29b      	uxth	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	4413      	add	r3, r2
 8004218:	633b      	str	r3, [r7, #48]	; 0x30
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	011a      	lsls	r2, r3, #4
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	4413      	add	r3, r2
 8004224:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	2200      	movs	r2, #0
 800422e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	623b      	str	r3, [r7, #32]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d126      	bne.n	800428c <HAL_PCD_EP_DB_Transmit+0x15a>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	61bb      	str	r3, [r7, #24]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800424c:	b29b      	uxth	r3, r3
 800424e:	461a      	mov	r2, r3
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	4413      	add	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	011a      	lsls	r2, r3, #4
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	4413      	add	r3, r2
 8004260:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	b29b      	uxth	r3, r3
 800426c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004270:	b29a      	uxth	r2, r3
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	801a      	strh	r2, [r3, #0]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29b      	uxth	r3, r3
 800427c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004284:	b29a      	uxth	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	e017      	b.n	80042bc <HAL_PCD_EP_DB_Transmit+0x18a>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	785b      	ldrb	r3, [r3, #1]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d113      	bne.n	80042bc <HAL_PCD_EP_DB_Transmit+0x18a>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800429c:	b29b      	uxth	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	4413      	add	r3, r2
 80042a4:	623b      	str	r3, [r7, #32]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	011a      	lsls	r2, r3, #4
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	4413      	add	r3, r2
 80042b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042b4:	61fb      	str	r3, [r7, #28]
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	2200      	movs	r2, #0
 80042ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	4619      	mov	r1, r3
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f008 ff0d 	bl	800d0e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 82d4 	beq.w	800487c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	827b      	strh	r3, [r7, #18]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	441a      	add	r2, r3
 80042fe:	8a7b      	ldrh	r3, [r7, #18]
 8004300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800430c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004310:	b29b      	uxth	r3, r3
 8004312:	8013      	strh	r3, [r2, #0]
 8004314:	e2b2      	b.n	800487c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d021      	beq.n	8004364 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	441a      	add	r2, r3
 800434c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800435c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004360:	b29b      	uxth	r3, r3
 8004362:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800436a:	2b01      	cmp	r3, #1
 800436c:	f040 8286 	bne.w	800487c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004378:	441a      	add	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	69da      	ldr	r2, [r3, #28]
 8004382:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004386:	441a      	add	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	6a1a      	ldr	r2, [r3, #32]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	429a      	cmp	r2, r3
 8004396:	d309      	bcc.n	80043ac <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	6a1a      	ldr	r2, [r3, #32]
 80043a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a4:	1ad2      	subs	r2, r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	621a      	str	r2, [r3, #32]
 80043aa:	e015      	b.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d107      	bne.n	80043c4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80043b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80043c2:	e009      	b.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2200      	movs	r2, #0
 80043d6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	785b      	ldrb	r3, [r3, #1]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d155      	bne.n	800448c <HAL_PCD_EP_DB_Transmit+0x35a>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f4:	4413      	add	r3, r2
 80043f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	011a      	lsls	r2, r3, #4
 80043fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004400:	4413      	add	r3, r2
 8004402:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004406:	637b      	str	r3, [r7, #52]	; 0x34
 8004408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800440a:	2b00      	cmp	r3, #0
 800440c:	d112      	bne.n	8004434 <HAL_PCD_EP_DB_Transmit+0x302>
 800440e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004418:	b29a      	uxth	r2, r3
 800441a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441c:	801a      	strh	r2, [r3, #0]
 800441e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800442c:	b29a      	uxth	r2, r3
 800442e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	e047      	b.n	80044c4 <HAL_PCD_EP_DB_Transmit+0x392>
 8004434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004436:	2b3e      	cmp	r3, #62	; 0x3e
 8004438:	d811      	bhi.n	800445e <HAL_PCD_EP_DB_Transmit+0x32c>
 800443a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800443c:	085b      	lsrs	r3, r3, #1
 800443e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_PCD_EP_DB_Transmit+0x31e>
 800444a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800444c:	3301      	adds	r3, #1
 800444e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004452:	b29b      	uxth	r3, r3
 8004454:	029b      	lsls	r3, r3, #10
 8004456:	b29a      	uxth	r2, r3
 8004458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445a:	801a      	strh	r2, [r3, #0]
 800445c:	e032      	b.n	80044c4 <HAL_PCD_EP_DB_Transmit+0x392>
 800445e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	64bb      	str	r3, [r7, #72]	; 0x48
 8004464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_PCD_EP_DB_Transmit+0x342>
 800446e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004470:	3b01      	subs	r3, #1
 8004472:	64bb      	str	r3, [r7, #72]	; 0x48
 8004474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004476:	b29b      	uxth	r3, r3
 8004478:	029b      	lsls	r3, r3, #10
 800447a:	b29b      	uxth	r3, r3
 800447c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004484:	b29a      	uxth	r2, r3
 8004486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004488:	801a      	strh	r2, [r3, #0]
 800448a:	e01b      	b.n	80044c4 <HAL_PCD_EP_DB_Transmit+0x392>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d117      	bne.n	80044c4 <HAL_PCD_EP_DB_Transmit+0x392>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	643b      	str	r3, [r7, #64]	; 0x40
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	461a      	mov	r2, r3
 80044a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a8:	4413      	add	r3, r2
 80044aa:	643b      	str	r3, [r7, #64]	; 0x40
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	011a      	lsls	r2, r3, #4
 80044b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b4:	4413      	add	r3, r2
 80044b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044be:	b29a      	uxth	r2, r3
 80044c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	6959      	ldr	r1, [r3, #20]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	891a      	ldrh	r2, [r3, #8]
 80044d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	f004 f865 	bl	80085a2 <USB_WritePMA>
 80044d8:	e1d0      	b.n	800487c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4413      	add	r3, r2
 80044ee:	3306      	adds	r3, #6
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	6812      	ldr	r2, [r2, #0]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004502:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800450e:	429a      	cmp	r2, r3
 8004510:	d307      	bcc.n	8004522 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800451a:	1ad2      	subs	r2, r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	619a      	str	r2, [r3, #24]
 8004520:	e002      	b.n	8004528 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2200      	movs	r2, #0
 8004526:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f040 80c4 	bne.w	80046ba <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	785b      	ldrb	r3, [r3, #1]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d126      	bne.n	8004588 <HAL_PCD_EP_DB_Transmit+0x456>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004548:	b29b      	uxth	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454e:	4413      	add	r3, r2
 8004550:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	011a      	lsls	r2, r3, #4
 8004558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455a:	4413      	add	r3, r2
 800455c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004560:	66bb      	str	r3, [r7, #104]	; 0x68
 8004562:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800456c:	b29a      	uxth	r2, r3
 800456e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800457c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004580:	b29a      	uxth	r2, r3
 8004582:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004584:	801a      	strh	r2, [r3, #0]
 8004586:	e01a      	b.n	80045be <HAL_PCD_EP_DB_Transmit+0x48c>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	785b      	ldrb	r3, [r3, #1]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d116      	bne.n	80045be <HAL_PCD_EP_DB_Transmit+0x48c>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	677b      	str	r3, [r7, #116]	; 0x74
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800459e:	b29b      	uxth	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a4:	4413      	add	r3, r2
 80045a6:	677b      	str	r3, [r7, #116]	; 0x74
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	011a      	lsls	r2, r3, #4
 80045ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b0:	4413      	add	r3, r2
 80045b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045b6:	673b      	str	r3, [r7, #112]	; 0x70
 80045b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045ba:	2200      	movs	r2, #0
 80045bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d12f      	bne.n	800462c <HAL_PCD_EP_DB_Transmit+0x4fa>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045dc:	b29b      	uxth	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045e4:	4413      	add	r3, r2
 80045e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	011a      	lsls	r2, r3, #4
 80045f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045f4:	4413      	add	r3, r2
 80045f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	b29b      	uxth	r3, r3
 8004606:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800460a:	b29a      	uxth	r2, r3
 800460c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004610:	801a      	strh	r2, [r3, #0]
 8004612:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800461e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004622:	b29a      	uxth	r2, r3
 8004624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004628:	801a      	strh	r2, [r3, #0]
 800462a:	e017      	b.n	800465c <HAL_PCD_EP_DB_Transmit+0x52a>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	785b      	ldrb	r3, [r3, #1]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d113      	bne.n	800465c <HAL_PCD_EP_DB_Transmit+0x52a>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800463c:	b29b      	uxth	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004642:	4413      	add	r3, r2
 8004644:	67bb      	str	r3, [r7, #120]	; 0x78
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	011a      	lsls	r2, r3, #4
 800464c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800464e:	4413      	add	r3, r2
 8004650:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004654:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004656:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004658:	2200      	movs	r2, #0
 800465a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	4619      	mov	r1, r3
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f008 fd3d 	bl	800d0e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004668:	88fb      	ldrh	r3, [r7, #6]
 800466a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800466e:	2b00      	cmp	r3, #0
 8004670:	f040 8104 	bne.w	800487c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b29b      	uxth	r3, r3
 8004686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	441a      	add	r2, r3
 80046a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80046a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	8013      	strh	r3, [r2, #0]
 80046b8:	e0e0      	b.n	800487c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d121      	bne.n	8004708 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	441a      	add	r2, r3
 80046f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80046f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004704:	b29b      	uxth	r3, r3
 8004706:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800470e:	2b01      	cmp	r3, #1
 8004710:	f040 80b4 	bne.w	800487c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	695a      	ldr	r2, [r3, #20]
 8004718:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800471c:	441a      	add	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800472a:	441a      	add	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	6a1a      	ldr	r2, [r3, #32]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	429a      	cmp	r2, r3
 800473a:	d309      	bcc.n	8004750 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004748:	1ad2      	subs	r2, r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	621a      	str	r2, [r3, #32]
 800474e:	e015      	b.n	800477c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d107      	bne.n	8004768 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004758:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800475c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004766:	e009      	b.n	800477c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2200      	movs	r2, #0
 8004772:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	667b      	str	r3, [r7, #100]	; 0x64
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	785b      	ldrb	r3, [r3, #1]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d155      	bne.n	8004836 <HAL_PCD_EP_DB_Transmit+0x704>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004798:	b29b      	uxth	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479e:	4413      	add	r3, r2
 80047a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	011a      	lsls	r2, r3, #4
 80047a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047aa:	4413      	add	r3, r2
 80047ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80047b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d112      	bne.n	80047de <HAL_PCD_EP_DB_Transmit+0x6ac>
 80047b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047c6:	801a      	strh	r2, [r3, #0]
 80047c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047da:	801a      	strh	r2, [r3, #0]
 80047dc:	e044      	b.n	8004868 <HAL_PCD_EP_DB_Transmit+0x736>
 80047de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e0:	2b3e      	cmp	r3, #62	; 0x3e
 80047e2:	d811      	bhi.n	8004808 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80047e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	657b      	str	r3, [r7, #84]	; 0x54
 80047ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_PCD_EP_DB_Transmit+0x6c8>
 80047f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f6:	3301      	adds	r3, #1
 80047f8:	657b      	str	r3, [r7, #84]	; 0x54
 80047fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	029b      	lsls	r3, r3, #10
 8004800:	b29a      	uxth	r2, r3
 8004802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004804:	801a      	strh	r2, [r3, #0]
 8004806:	e02f      	b.n	8004868 <HAL_PCD_EP_DB_Transmit+0x736>
 8004808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	657b      	str	r3, [r7, #84]	; 0x54
 800480e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800481a:	3b01      	subs	r3, #1
 800481c:	657b      	str	r3, [r7, #84]	; 0x54
 800481e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004820:	b29b      	uxth	r3, r3
 8004822:	029b      	lsls	r3, r3, #10
 8004824:	b29b      	uxth	r3, r3
 8004826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800482a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800482e:	b29a      	uxth	r2, r3
 8004830:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004832:	801a      	strh	r2, [r3, #0]
 8004834:	e018      	b.n	8004868 <HAL_PCD_EP_DB_Transmit+0x736>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	785b      	ldrb	r3, [r3, #1]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d114      	bne.n	8004868 <HAL_PCD_EP_DB_Transmit+0x736>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004846:	b29b      	uxth	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800484c:	4413      	add	r3, r2
 800484e:	667b      	str	r3, [r7, #100]	; 0x64
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	011a      	lsls	r2, r3, #4
 8004856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004858:	4413      	add	r3, r2
 800485a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800485e:	663b      	str	r3, [r7, #96]	; 0x60
 8004860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004862:	b29a      	uxth	r2, r3
 8004864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004866:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6818      	ldr	r0, [r3, #0]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	6959      	ldr	r1, [r3, #20]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	895a      	ldrh	r2, [r3, #10]
 8004874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004876:	b29b      	uxth	r3, r3
 8004878:	f003 fe93 	bl	80085a2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004896:	823b      	strh	r3, [r7, #16]
 8004898:	8a3b      	ldrh	r3, [r7, #16]
 800489a:	f083 0310 	eor.w	r3, r3, #16
 800489e:	823b      	strh	r3, [r7, #16]
 80048a0:	8a3b      	ldrh	r3, [r7, #16]
 80048a2:	f083 0320 	eor.w	r3, r3, #32
 80048a6:	823b      	strh	r3, [r7, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	441a      	add	r2, r3
 80048b6:	8a3b      	ldrh	r3, [r7, #16]
 80048b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3788      	adds	r7, #136	; 0x88
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b087      	sub	sp, #28
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	817b      	strh	r3, [r7, #10]
 80048e4:	4613      	mov	r3, r2
 80048e6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80048e8:	897b      	ldrh	r3, [r7, #10]
 80048ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00b      	beq.n	800490c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048f4:	897b      	ldrh	r3, [r7, #10]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e009      	b.n	8004920 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800490c:	897a      	ldrh	r2, [r7, #10]
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4413      	add	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004920:	893b      	ldrh	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d107      	bne.n	8004936 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2200      	movs	r2, #0
 800492a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	b29a      	uxth	r2, r3
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	80da      	strh	r2, [r3, #6]
 8004934:	e00b      	b.n	800494e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2201      	movs	r2, #1
 800493a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	b29a      	uxth	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	0c1b      	lsrs	r3, r3, #16
 8004948:	b29a      	uxth	r2, r3
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr
	...

0800495c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e26c      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8087 	beq.w	8004a8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800497c:	4b92      	ldr	r3, [pc, #584]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b04      	cmp	r3, #4
 8004986:	d00c      	beq.n	80049a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004988:	4b8f      	ldr	r3, [pc, #572]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 030c 	and.w	r3, r3, #12
 8004990:	2b08      	cmp	r3, #8
 8004992:	d112      	bne.n	80049ba <HAL_RCC_OscConfig+0x5e>
 8004994:	4b8c      	ldr	r3, [pc, #560]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a0:	d10b      	bne.n	80049ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a2:	4b89      	ldr	r3, [pc, #548]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d06c      	beq.n	8004a88 <HAL_RCC_OscConfig+0x12c>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d168      	bne.n	8004a88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e246      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c2:	d106      	bne.n	80049d2 <HAL_RCC_OscConfig+0x76>
 80049c4:	4b80      	ldr	r3, [pc, #512]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a7f      	ldr	r2, [pc, #508]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 80049ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	e02e      	b.n	8004a30 <HAL_RCC_OscConfig+0xd4>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x98>
 80049da:	4b7b      	ldr	r3, [pc, #492]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a7a      	ldr	r2, [pc, #488]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 80049e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	4b78      	ldr	r3, [pc, #480]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a77      	ldr	r2, [pc, #476]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 80049ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e01d      	b.n	8004a30 <HAL_RCC_OscConfig+0xd4>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049fc:	d10c      	bne.n	8004a18 <HAL_RCC_OscConfig+0xbc>
 80049fe:	4b72      	ldr	r3, [pc, #456]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a71      	ldr	r2, [pc, #452]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	4b6f      	ldr	r3, [pc, #444]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a6e      	ldr	r2, [pc, #440]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	e00b      	b.n	8004a30 <HAL_RCC_OscConfig+0xd4>
 8004a18:	4b6b      	ldr	r3, [pc, #428]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a6a      	ldr	r2, [pc, #424]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	4b68      	ldr	r3, [pc, #416]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a67      	ldr	r2, [pc, #412]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d013      	beq.n	8004a60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a38:	f7fd ff42 	bl	80028c0 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a40:	f7fd ff3e 	bl	80028c0 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b64      	cmp	r3, #100	; 0x64
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e1fa      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a52:	4b5d      	ldr	r3, [pc, #372]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCC_OscConfig+0xe4>
 8004a5e:	e014      	b.n	8004a8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fd ff2e 	bl	80028c0 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a68:	f7fd ff2a 	bl	80028c0 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b64      	cmp	r3, #100	; 0x64
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e1e6      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7a:	4b53      	ldr	r3, [pc, #332]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCC_OscConfig+0x10c>
 8004a86:	e000      	b.n	8004a8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d063      	beq.n	8004b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a96:	4b4c      	ldr	r3, [pc, #304]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004aa2:	4b49      	ldr	r3, [pc, #292]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d11c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x18c>
 8004aae:	4b46      	ldr	r3, [pc, #280]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d116      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aba:	4b43      	ldr	r3, [pc, #268]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x176>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d001      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e1ba      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad2:	4b3d      	ldr	r3, [pc, #244]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	4939      	ldr	r1, [pc, #228]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ae6:	e03a      	b.n	8004b5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d020      	beq.n	8004b32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af0:	4b36      	ldr	r3, [pc, #216]	; (8004bcc <HAL_RCC_OscConfig+0x270>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af6:	f7fd fee3 	bl	80028c0 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004afe:	f7fd fedf 	bl	80028c0 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e19b      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b10:	4b2d      	ldr	r3, [pc, #180]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1c:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	4927      	ldr	r1, [pc, #156]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	600b      	str	r3, [r1, #0]
 8004b30:	e015      	b.n	8004b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b32:	4b26      	ldr	r3, [pc, #152]	; (8004bcc <HAL_RCC_OscConfig+0x270>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b38:	f7fd fec2 	bl	80028c0 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b40:	f7fd febe 	bl	80028c0 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e17a      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b52:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d03a      	beq.n	8004be0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d019      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b72:	4b17      	ldr	r3, [pc, #92]	; (8004bd0 <HAL_RCC_OscConfig+0x274>)
 8004b74:	2201      	movs	r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b78:	f7fd fea2 	bl	80028c0 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b80:	f7fd fe9e 	bl	80028c0 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e15a      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b92:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <HAL_RCC_OscConfig+0x26c>)
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	f000 fb0a 	bl	80051b8 <RCC_Delay>
 8004ba4:	e01c      	b.n	8004be0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <HAL_RCC_OscConfig+0x274>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bac:	f7fd fe88 	bl	80028c0 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb2:	e00f      	b.n	8004bd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb4:	f7fd fe84 	bl	80028c0 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d908      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e140      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	42420000 	.word	0x42420000
 8004bd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd4:	4b9e      	ldr	r3, [pc, #632]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e9      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80a6 	beq.w	8004d3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bf2:	4b97      	ldr	r3, [pc, #604]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10d      	bne.n	8004c1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bfe:	4b94      	ldr	r3, [pc, #592]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	4a93      	ldr	r2, [pc, #588]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c08:	61d3      	str	r3, [r2, #28]
 8004c0a:	4b91      	ldr	r3, [pc, #580]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c16:	2301      	movs	r3, #1
 8004c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1a:	4b8e      	ldr	r3, [pc, #568]	; (8004e54 <HAL_RCC_OscConfig+0x4f8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d118      	bne.n	8004c58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c26:	4b8b      	ldr	r3, [pc, #556]	; (8004e54 <HAL_RCC_OscConfig+0x4f8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a8a      	ldr	r2, [pc, #552]	; (8004e54 <HAL_RCC_OscConfig+0x4f8>)
 8004c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c32:	f7fd fe45 	bl	80028c0 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3a:	f7fd fe41 	bl	80028c0 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b64      	cmp	r3, #100	; 0x64
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e0fd      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4c:	4b81      	ldr	r3, [pc, #516]	; (8004e54 <HAL_RCC_OscConfig+0x4f8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d106      	bne.n	8004c6e <HAL_RCC_OscConfig+0x312>
 8004c60:	4b7b      	ldr	r3, [pc, #492]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	4a7a      	ldr	r2, [pc, #488]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	6213      	str	r3, [r2, #32]
 8004c6c:	e02d      	b.n	8004cca <HAL_RCC_OscConfig+0x36e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x334>
 8004c76:	4b76      	ldr	r3, [pc, #472]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	4a75      	ldr	r2, [pc, #468]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004c7c:	f023 0301 	bic.w	r3, r3, #1
 8004c80:	6213      	str	r3, [r2, #32]
 8004c82:	4b73      	ldr	r3, [pc, #460]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	4a72      	ldr	r2, [pc, #456]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004c88:	f023 0304 	bic.w	r3, r3, #4
 8004c8c:	6213      	str	r3, [r2, #32]
 8004c8e:	e01c      	b.n	8004cca <HAL_RCC_OscConfig+0x36e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2b05      	cmp	r3, #5
 8004c96:	d10c      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x356>
 8004c98:	4b6d      	ldr	r3, [pc, #436]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	4a6c      	ldr	r2, [pc, #432]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004c9e:	f043 0304 	orr.w	r3, r3, #4
 8004ca2:	6213      	str	r3, [r2, #32]
 8004ca4:	4b6a      	ldr	r3, [pc, #424]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	4a69      	ldr	r2, [pc, #420]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	6213      	str	r3, [r2, #32]
 8004cb0:	e00b      	b.n	8004cca <HAL_RCC_OscConfig+0x36e>
 8004cb2:	4b67      	ldr	r3, [pc, #412]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	4a66      	ldr	r2, [pc, #408]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	6213      	str	r3, [r2, #32]
 8004cbe:	4b64      	ldr	r3, [pc, #400]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	4a63      	ldr	r2, [pc, #396]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004cc4:	f023 0304 	bic.w	r3, r3, #4
 8004cc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d015      	beq.n	8004cfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd2:	f7fd fdf5 	bl	80028c0 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd8:	e00a      	b.n	8004cf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cda:	f7fd fdf1 	bl	80028c0 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e0ab      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf0:	4b57      	ldr	r3, [pc, #348]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0ee      	beq.n	8004cda <HAL_RCC_OscConfig+0x37e>
 8004cfc:	e014      	b.n	8004d28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cfe:	f7fd fddf 	bl	80028c0 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d04:	e00a      	b.n	8004d1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d06:	f7fd fddb 	bl	80028c0 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e095      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d1c:	4b4c      	ldr	r3, [pc, #304]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1ee      	bne.n	8004d06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d28:	7dfb      	ldrb	r3, [r7, #23]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d105      	bne.n	8004d3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d2e:	4b48      	ldr	r3, [pc, #288]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	4a47      	ldr	r2, [pc, #284]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8081 	beq.w	8004e46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d44:	4b42      	ldr	r3, [pc, #264]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f003 030c 	and.w	r3, r3, #12
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d061      	beq.n	8004e14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d146      	bne.n	8004de6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d58:	4b3f      	ldr	r3, [pc, #252]	; (8004e58 <HAL_RCC_OscConfig+0x4fc>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5e:	f7fd fdaf 	bl	80028c0 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d66:	f7fd fdab 	bl	80028c0 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e067      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d78:	4b35      	ldr	r3, [pc, #212]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f0      	bne.n	8004d66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d8c:	d108      	bne.n	8004da0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d8e:	4b30      	ldr	r3, [pc, #192]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	492d      	ldr	r1, [pc, #180]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004da0:	4b2b      	ldr	r3, [pc, #172]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a19      	ldr	r1, [r3, #32]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	430b      	orrs	r3, r1
 8004db2:	4927      	ldr	r1, [pc, #156]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004db8:	4b27      	ldr	r3, [pc, #156]	; (8004e58 <HAL_RCC_OscConfig+0x4fc>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbe:	f7fd fd7f 	bl	80028c0 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc6:	f7fd fd7b 	bl	80028c0 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e037      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dd8:	4b1d      	ldr	r3, [pc, #116]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0f0      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x46a>
 8004de4:	e02f      	b.n	8004e46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de6:	4b1c      	ldr	r3, [pc, #112]	; (8004e58 <HAL_RCC_OscConfig+0x4fc>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dec:	f7fd fd68 	bl	80028c0 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df4:	f7fd fd64 	bl	80028c0 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e020      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e06:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x498>
 8004e12:	e018      	b.n	8004e46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e013      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <HAL_RCC_OscConfig+0x4f4>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d106      	bne.n	8004e42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d001      	beq.n	8004e46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40007000 	.word	0x40007000
 8004e58:	42420060 	.word	0x42420060

08004e5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0d0      	b.n	8005012 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e70:	4b6a      	ldr	r3, [pc, #424]	; (800501c <HAL_RCC_ClockConfig+0x1c0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d910      	bls.n	8004ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7e:	4b67      	ldr	r3, [pc, #412]	; (800501c <HAL_RCC_ClockConfig+0x1c0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 0207 	bic.w	r2, r3, #7
 8004e86:	4965      	ldr	r1, [pc, #404]	; (800501c <HAL_RCC_ClockConfig+0x1c0>)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b63      	ldr	r3, [pc, #396]	; (800501c <HAL_RCC_ClockConfig+0x1c0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0b8      	b.n	8005012 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d020      	beq.n	8004eee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eb8:	4b59      	ldr	r3, [pc, #356]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4a58      	ldr	r2, [pc, #352]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004ebe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ec2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ed0:	4b53      	ldr	r3, [pc, #332]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4a52      	ldr	r2, [pc, #328]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004eda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004edc:	4b50      	ldr	r3, [pc, #320]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	494d      	ldr	r1, [pc, #308]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d040      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d107      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f02:	4b47      	ldr	r3, [pc, #284]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d115      	bne.n	8004f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e07f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d107      	bne.n	8004f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1a:	4b41      	ldr	r3, [pc, #260]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d109      	bne.n	8004f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e073      	b.n	8005012 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f2a:	4b3d      	ldr	r3, [pc, #244]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e06b      	b.n	8005012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f3a:	4b39      	ldr	r3, [pc, #228]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f023 0203 	bic.w	r2, r3, #3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	4936      	ldr	r1, [pc, #216]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f4c:	f7fd fcb8 	bl	80028c0 <HAL_GetTick>
 8004f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f52:	e00a      	b.n	8004f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f54:	f7fd fcb4 	bl	80028c0 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e053      	b.n	8005012 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6a:	4b2d      	ldr	r3, [pc, #180]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 020c 	and.w	r2, r3, #12
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d1eb      	bne.n	8004f54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f7c:	4b27      	ldr	r3, [pc, #156]	; (800501c <HAL_RCC_ClockConfig+0x1c0>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d210      	bcs.n	8004fac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8a:	4b24      	ldr	r3, [pc, #144]	; (800501c <HAL_RCC_ClockConfig+0x1c0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f023 0207 	bic.w	r2, r3, #7
 8004f92:	4922      	ldr	r1, [pc, #136]	; (800501c <HAL_RCC_ClockConfig+0x1c0>)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9a:	4b20      	ldr	r3, [pc, #128]	; (800501c <HAL_RCC_ClockConfig+0x1c0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e032      	b.n	8005012 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb8:	4b19      	ldr	r3, [pc, #100]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4916      	ldr	r1, [pc, #88]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fd6:	4b12      	ldr	r3, [pc, #72]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	490e      	ldr	r1, [pc, #56]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fea:	f000 f821 	bl	8005030 <HAL_RCC_GetSysClockFreq>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	490a      	ldr	r1, [pc, #40]	; (8005024 <HAL_RCC_ClockConfig+0x1c8>)
 8004ffc:	5ccb      	ldrb	r3, [r1, r3]
 8004ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8005002:	4a09      	ldr	r2, [pc, #36]	; (8005028 <HAL_RCC_ClockConfig+0x1cc>)
 8005004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005006:	4b09      	ldr	r3, [pc, #36]	; (800502c <HAL_RCC_ClockConfig+0x1d0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7fd fac2 	bl	8002594 <HAL_InitTick>

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40022000 	.word	0x40022000
 8005020:	40021000 	.word	0x40021000
 8005024:	0800e69c 	.word	0x0800e69c
 8005028:	2000000c 	.word	0x2000000c
 800502c:	20000010 	.word	0x20000010

08005030 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005030:	b490      	push	{r4, r7}
 8005032:	b08a      	sub	sp, #40	; 0x28
 8005034:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005036:	4b2a      	ldr	r3, [pc, #168]	; (80050e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005038:	1d3c      	adds	r4, r7, #4
 800503a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800503c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005040:	f240 2301 	movw	r3, #513	; 0x201
 8005044:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	2300      	movs	r3, #0
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	2300      	movs	r3, #0
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800505a:	4b22      	ldr	r3, [pc, #136]	; (80050e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f003 030c 	and.w	r3, r3, #12
 8005066:	2b04      	cmp	r3, #4
 8005068:	d002      	beq.n	8005070 <HAL_RCC_GetSysClockFreq+0x40>
 800506a:	2b08      	cmp	r3, #8
 800506c:	d003      	beq.n	8005076 <HAL_RCC_GetSysClockFreq+0x46>
 800506e:	e02d      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005070:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005072:	623b      	str	r3, [r7, #32]
      break;
 8005074:	e02d      	b.n	80050d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	0c9b      	lsrs	r3, r3, #18
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005082:	4413      	add	r3, r2
 8005084:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005088:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d013      	beq.n	80050bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005094:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	0c5b      	lsrs	r3, r3, #17
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80050a2:	4413      	add	r3, r2
 80050a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80050a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	4a0e      	ldr	r2, [pc, #56]	; (80050e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ae:	fb02 f203 	mul.w	r2, r2, r3
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ba:	e004      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	4a0b      	ldr	r2, [pc, #44]	; (80050ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80050c0:	fb02 f303 	mul.w	r3, r2, r3
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	623b      	str	r3, [r7, #32]
      break;
 80050ca:	e002      	b.n	80050d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050cc:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050ce:	623b      	str	r3, [r7, #32]
      break;
 80050d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050d2:	6a3b      	ldr	r3, [r7, #32]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3728      	adds	r7, #40	; 0x28
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc90      	pop	{r4, r7}
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	0800e0d8 	.word	0x0800e0d8
 80050e4:	40021000 	.word	0x40021000
 80050e8:	00f42400 	.word	0x00f42400
 80050ec:	003d0900 	.word	0x003d0900
 80050f0:	007a1200 	.word	0x007a1200

080050f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f8:	4b02      	ldr	r3, [pc, #8]	; (8005104 <HAL_RCC_GetHCLKFreq+0x10>)
 80050fa:	681b      	ldr	r3, [r3, #0]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr
 8005104:	2000000c 	.word	0x2000000c

08005108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800510c:	f7ff fff2 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8005110:	4602      	mov	r2, r0
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	4903      	ldr	r1, [pc, #12]	; (800512c <HAL_RCC_GetPCLK1Freq+0x24>)
 800511e:	5ccb      	ldrb	r3, [r1, r3]
 8005120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005124:	4618      	mov	r0, r3
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40021000 	.word	0x40021000
 800512c:	0800e6ac 	.word	0x0800e6ac

08005130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005134:	f7ff ffde 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8005138:	4602      	mov	r2, r0
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	0adb      	lsrs	r3, r3, #11
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	4903      	ldr	r1, [pc, #12]	; (8005154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005146:	5ccb      	ldrb	r3, [r1, r3]
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800514c:	4618      	mov	r0, r3
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40021000 	.word	0x40021000
 8005154:	0800e6ac 	.word	0x0800e6ac

08005158 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	220f      	movs	r2, #15
 8005166:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005168:	4b11      	ldr	r3, [pc, #68]	; (80051b0 <HAL_RCC_GetClockConfig+0x58>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f003 0203 	and.w	r2, r3, #3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005174:	4b0e      	ldr	r3, [pc, #56]	; (80051b0 <HAL_RCC_GetClockConfig+0x58>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCC_GetClockConfig+0x58>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800518c:	4b08      	ldr	r3, [pc, #32]	; (80051b0 <HAL_RCC_GetClockConfig+0x58>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	08db      	lsrs	r3, r3, #3
 8005192:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800519a:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <HAL_RCC_GetClockConfig+0x5c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0207 	and.w	r2, r3, #7
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr
 80051b0:	40021000 	.word	0x40021000
 80051b4:	40022000 	.word	0x40022000

080051b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <RCC_Delay+0x34>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a0a      	ldr	r2, [pc, #40]	; (80051f0 <RCC_Delay+0x38>)
 80051c6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ca:	0a5b      	lsrs	r3, r3, #9
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
 80051d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051d4:	bf00      	nop
  }
  while (Delay --);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1e5a      	subs	r2, r3, #1
 80051da:	60fa      	str	r2, [r7, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1f9      	bne.n	80051d4 <RCC_Delay+0x1c>
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr
 80051ec:	2000000c 	.word	0x2000000c
 80051f0:	10624dd3 	.word	0x10624dd3

080051f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d07d      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005210:	2300      	movs	r3, #0
 8005212:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005214:	4b4f      	ldr	r3, [pc, #316]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10d      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005220:	4b4c      	ldr	r3, [pc, #304]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	4a4b      	ldr	r2, [pc, #300]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800522a:	61d3      	str	r3, [r2, #28]
 800522c:	4b49      	ldr	r3, [pc, #292]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005238:	2301      	movs	r3, #1
 800523a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523c:	4b46      	ldr	r3, [pc, #280]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d118      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005248:	4b43      	ldr	r3, [pc, #268]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a42      	ldr	r2, [pc, #264]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800524e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005252:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005254:	f7fd fb34 	bl	80028c0 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525a:	e008      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800525c:	f7fd fb30 	bl	80028c0 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b64      	cmp	r3, #100	; 0x64
 8005268:	d901      	bls.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e06d      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800526e:	4b3a      	ldr	r3, [pc, #232]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800527a:	4b36      	ldr	r3, [pc, #216]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005282:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d02e      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	429a      	cmp	r2, r3
 8005296:	d027      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005298:	4b2e      	ldr	r3, [pc, #184]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052a2:	4b2e      	ldr	r3, [pc, #184]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052a8:	4b2c      	ldr	r3, [pc, #176]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052ae:	4a29      	ldr	r2, [pc, #164]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d014      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052be:	f7fd faff 	bl	80028c0 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c4:	e00a      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c6:	f7fd fafb 	bl	80028c0 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d901      	bls.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e036      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052dc:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0ee      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052e8:	4b1a      	ldr	r3, [pc, #104]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	4917      	ldr	r1, [pc, #92]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052fa:	7dfb      	ldrb	r3, [r7, #23]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d105      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005300:	4b14      	ldr	r3, [pc, #80]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	4a13      	ldr	r2, [pc, #76]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800530a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d008      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005318:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	490b      	ldr	r1, [pc, #44]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005326:	4313      	orrs	r3, r2
 8005328:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0310 	and.w	r3, r3, #16
 8005332:	2b00      	cmp	r3, #0
 8005334:	d008      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005336:	4b07      	ldr	r3, [pc, #28]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	4904      	ldr	r1, [pc, #16]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005344:	4313      	orrs	r3, r2
 8005346:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40021000 	.word	0x40021000
 8005358:	40007000 	.word	0x40007000
 800535c:	42420440 	.word	0x42420440

08005360 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e076      	b.n	8005460 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2b00      	cmp	r3, #0
 8005378:	d108      	bne.n	800538c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005382:	d009      	beq.n	8005398 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	61da      	str	r2, [r3, #28]
 800538a:	e005      	b.n	8005398 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fd f86a 	bl	800248c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053e0:	431a      	orrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541c:	ea42 0103 	orr.w	r1, r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	0c1a      	lsrs	r2, r3, #16
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f002 0204 	and.w	r2, r2, #4
 800543e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69da      	ldr	r2, [r3, #28]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800544e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e041      	b.n	80054fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f839 	bl	8005506 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4619      	mov	r1, r3
 80054a6:	4610      	mov	r0, r2
 80054a8:	f000 f9b4 	bl	8005814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr

08005518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	d001      	beq.n	8005530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e03a      	b.n	80055a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a18      	ldr	r2, [pc, #96]	; (80055b0 <HAL_TIM_Base_Start_IT+0x98>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00e      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x58>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555a:	d009      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x58>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a14      	ldr	r2, [pc, #80]	; (80055b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x58>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a13      	ldr	r2, [pc, #76]	; (80055b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d111      	bne.n	8005594 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b06      	cmp	r3, #6
 8005580:	d010      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0201 	orr.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005592:	e007      	b.n	80055a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr
 80055b0:	40012c00 	.word	0x40012c00
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40000800 	.word	0x40000800

080055bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d122      	bne.n	8005618 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d11b      	bne.n	8005618 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0202 	mvn.w	r2, #2
 80055e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8ed 	bl	80057de <HAL_TIM_IC_CaptureCallback>
 8005604:	e005      	b.n	8005612 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f8e0 	bl	80057cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f8ef 	bl	80057f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b04      	cmp	r3, #4
 8005624:	d122      	bne.n	800566c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b04      	cmp	r3, #4
 8005632:	d11b      	bne.n	800566c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0204 	mvn.w	r2, #4
 800563c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f8c3 	bl	80057de <HAL_TIM_IC_CaptureCallback>
 8005658:	e005      	b.n	8005666 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f8b6 	bl	80057cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f8c5 	bl	80057f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b08      	cmp	r3, #8
 8005678:	d122      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b08      	cmp	r3, #8
 8005686:	d11b      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0208 	mvn.w	r2, #8
 8005690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2204      	movs	r2, #4
 8005696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f899 	bl	80057de <HAL_TIM_IC_CaptureCallback>
 80056ac:	e005      	b.n	80056ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f88c 	bl	80057cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f89b 	bl	80057f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0310 	and.w	r3, r3, #16
 80056ca:	2b10      	cmp	r3, #16
 80056cc:	d122      	bne.n	8005714 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d11b      	bne.n	8005714 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0210 	mvn.w	r2, #16
 80056e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2208      	movs	r2, #8
 80056ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f86f 	bl	80057de <HAL_TIM_IC_CaptureCallback>
 8005700:	e005      	b.n	800570e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f862 	bl	80057cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f871 	bl	80057f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b01      	cmp	r3, #1
 8005720:	d10e      	bne.n	8005740 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b01      	cmp	r3, #1
 800572e:	d107      	bne.n	8005740 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0201 	mvn.w	r2, #1
 8005738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fb f9ce 	bl	8000adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574a:	2b80      	cmp	r3, #128	; 0x80
 800574c:	d10e      	bne.n	800576c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005758:	2b80      	cmp	r3, #128	; 0x80
 800575a:	d107      	bne.n	800576c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f8bf 	bl	80058ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	d10e      	bne.n	8005798 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005784:	2b40      	cmp	r3, #64	; 0x40
 8005786:	d107      	bne.n	8005798 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f835 	bl	8005802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d10e      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d107      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0220 	mvn.w	r2, #32
 80057bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f88a 	bl	80058d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057c4:	bf00      	nop
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr

080057de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr

08005802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a29      	ldr	r2, [pc, #164]	; (80058cc <TIM_Base_SetConfig+0xb8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00b      	beq.n	8005844 <TIM_Base_SetConfig+0x30>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005832:	d007      	beq.n	8005844 <TIM_Base_SetConfig+0x30>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a26      	ldr	r2, [pc, #152]	; (80058d0 <TIM_Base_SetConfig+0xbc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d003      	beq.n	8005844 <TIM_Base_SetConfig+0x30>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a25      	ldr	r2, [pc, #148]	; (80058d4 <TIM_Base_SetConfig+0xc0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d108      	bne.n	8005856 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a1c      	ldr	r2, [pc, #112]	; (80058cc <TIM_Base_SetConfig+0xb8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00b      	beq.n	8005876 <TIM_Base_SetConfig+0x62>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005864:	d007      	beq.n	8005876 <TIM_Base_SetConfig+0x62>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a19      	ldr	r2, [pc, #100]	; (80058d0 <TIM_Base_SetConfig+0xbc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_Base_SetConfig+0x62>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <TIM_Base_SetConfig+0xc0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d108      	bne.n	8005888 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a07      	ldr	r2, [pc, #28]	; (80058cc <TIM_Base_SetConfig+0xb8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d103      	bne.n	80058bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	615a      	str	r2, [r3, #20]
}
 80058c2:	bf00      	nop
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40000800 	.word	0x40000800

080058d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bc80      	pop	{r7}
 80058e8:	4770      	bx	lr

080058ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr

080058fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e03f      	b.n	800598e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fc ff2c 	bl	8002780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2224      	movs	r2, #36	; 0x24
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800593e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fba9 	bl	8006098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	4613      	mov	r3, r2
 80059a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d11d      	bne.n	80059ec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <HAL_UART_Receive_IT+0x26>
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e016      	b.n	80059ee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_UART_Receive_IT+0x38>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e00f      	b.n	80059ee <HAL_UART_Receive_IT+0x58>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80059dc:	88fb      	ldrh	r3, [r7, #6]
 80059de:	461a      	mov	r2, r3
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 f9cf 	bl	8005d86 <UART_Start_Receive_IT>
 80059e8:	4603      	mov	r3, r0
 80059ea:	e000      	b.n	80059ee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80059ec:	2302      	movs	r3, #2
  }
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08a      	sub	sp, #40	; 0x28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10d      	bne.n	8005a4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d008      	beq.n	8005a4a <HAL_UART_IRQHandler+0x52>
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fa7f 	bl	8005f46 <UART_Receive_IT>
      return;
 8005a48:	e17b      	b.n	8005d42 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80b1 	beq.w	8005bb4 <HAL_UART_IRQHandler+0x1bc>
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d105      	bne.n	8005a68 <HAL_UART_IRQHandler+0x70>
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 80a6 	beq.w	8005bb4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <HAL_UART_IRQHandler+0x90>
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	f043 0201 	orr.w	r2, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <HAL_UART_IRQHandler+0xb0>
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	f043 0202 	orr.w	r2, r3, #2
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <HAL_UART_IRQHandler+0xd0>
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	f043 0204 	orr.w	r2, r3, #4
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00f      	beq.n	8005af2 <HAL_UART_IRQHandler+0xfa>
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_UART_IRQHandler+0xee>
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	f043 0208 	orr.w	r2, r3, #8
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 811e 	beq.w	8005d38 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <HAL_UART_IRQHandler+0x11e>
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fa18 	bl	8005f46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bf14      	ite	ne
 8005b24:	2301      	movne	r3, #1
 8005b26:	2300      	moveq	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d102      	bne.n	8005b3e <HAL_UART_IRQHandler+0x146>
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d031      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f95a 	bl	8005df8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d023      	beq.n	8005b9a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b60:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d013      	beq.n	8005b92 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	4a76      	ldr	r2, [pc, #472]	; (8005d48 <HAL_UART_IRQHandler+0x350>)
 8005b70:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fc ffc6 	bl	8002b08 <HAL_DMA_Abort_IT>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d016      	beq.n	8005bb0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b90:	e00e      	b.n	8005bb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f8e3 	bl	8005d5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b98:	e00a      	b.n	8005bb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f8df 	bl	8005d5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba0:	e006      	b.n	8005bb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f8db 	bl	8005d5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005bae:	e0c3      	b.n	8005d38 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb0:	bf00      	nop
    return;
 8005bb2:	e0c1      	b.n	8005d38 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	f040 80a1 	bne.w	8005d00 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 809b 	beq.w	8005d00 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 8095 	beq.w	8005d00 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d04e      	beq.n	8005c98 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005c04:	8a3b      	ldrh	r3, [r7, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 8098 	beq.w	8005d3c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c10:	8a3a      	ldrh	r2, [r7, #16]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	f080 8092 	bcs.w	8005d3c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	8a3a      	ldrh	r2, [r7, #16]
 8005c1c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d02b      	beq.n	8005c80 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c36:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695a      	ldr	r2, [r3, #20]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695a      	ldr	r2, [r3, #20]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c56:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0210 	bic.w	r2, r2, #16
 8005c74:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fc ff09 	bl	8002a92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f86d 	bl	8005d70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c96:	e051      	b.n	8005d3c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d047      	beq.n	8005d40 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005cb0:	8a7b      	ldrh	r3, [r7, #18]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d044      	beq.n	8005d40 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cc4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695a      	ldr	r2, [r3, #20]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0210 	bic.w	r2, r2, #16
 8005cf2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cf4:	8a7b      	ldrh	r3, [r7, #18]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f839 	bl	8005d70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005cfe:	e01f      	b.n	8005d40 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d008      	beq.n	8005d1c <HAL_UART_IRQHandler+0x324>
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f8af 	bl	8005e78 <UART_Transmit_IT>
    return;
 8005d1a:	e012      	b.n	8005d42 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00d      	beq.n	8005d42 <HAL_UART_IRQHandler+0x34a>
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f8f0 	bl	8005f16 <UART_EndTransmit_IT>
    return;
 8005d36:	e004      	b.n	8005d42 <HAL_UART_IRQHandler+0x34a>
    return;
 8005d38:	bf00      	nop
 8005d3a:	e002      	b.n	8005d42 <HAL_UART_IRQHandler+0x34a>
      return;
 8005d3c:	bf00      	nop
 8005d3e:	e000      	b.n	8005d42 <HAL_UART_IRQHandler+0x34a>
      return;
 8005d40:	bf00      	nop
  }
}
 8005d42:	3728      	adds	r7, #40	; 0x28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	08005e51 	.word	0x08005e51

08005d4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr

08005d5e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr

08005d70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr

08005d86 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	4613      	mov	r3, r2
 8005d92:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	88fa      	ldrh	r2, [r7, #6]
 8005d9e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	88fa      	ldrh	r2, [r7, #6]
 8005da4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2222      	movs	r2, #34	; 0x22
 8005db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dca:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695a      	ldr	r2, [r3, #20]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68da      	ldr	r2, [r3, #12]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0220 	orr.w	r2, r2, #32
 8005dea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr

08005df8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e0e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	695a      	ldr	r2, [r3, #20]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0201 	bic.w	r2, r2, #1
 8005e1e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d107      	bne.n	8005e38 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0210 	bic.w	r2, r2, #16
 8005e36:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr

08005e50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f7ff ff77 	bl	8005d5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b21      	cmp	r3, #33	; 0x21
 8005e8a:	d13e      	bne.n	8005f0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e94:	d114      	bne.n	8005ec0 <UART_Transmit_IT+0x48>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d110      	bne.n	8005ec0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	1c9a      	adds	r2, r3, #2
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]
 8005ebe:	e008      	b.n	8005ed2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6211      	str	r1, [r2, #32]
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10f      	bne.n	8005f06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ef4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e000      	b.n	8005f0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f0a:	2302      	movs	r3, #2
  }
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr

08005f16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b082      	sub	sp, #8
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7ff ff08 	bl	8005d4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b086      	sub	sp, #24
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b22      	cmp	r3, #34	; 0x22
 8005f58:	f040 8099 	bne.w	800608e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f64:	d117      	bne.n	8005f96 <UART_Receive_IT+0x50>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d113      	bne.n	8005f96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	1c9a      	adds	r2, r3, #2
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	629a      	str	r2, [r3, #40]	; 0x28
 8005f94:	e026      	b.n	8005fe4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa8:	d007      	beq.n	8005fba <UART_Receive_IT+0x74>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10a      	bne.n	8005fc8 <UART_Receive_IT+0x82>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	e008      	b.n	8005fda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d148      	bne.n	800608a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0220 	bic.w	r2, r2, #32
 8006006:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006016:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695a      	ldr	r2, [r3, #20]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0201 	bic.w	r2, r2, #1
 8006026:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006034:	2b01      	cmp	r3, #1
 8006036:	d123      	bne.n	8006080 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0210 	bic.w	r2, r2, #16
 800604c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b10      	cmp	r3, #16
 800605a:	d10a      	bne.n	8006072 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff fe79 	bl	8005d70 <HAL_UARTEx_RxEventCallback>
 800607e:	e002      	b.n	8006086 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7fa fb6d 	bl	8000760 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	e002      	b.n	8006090 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	e000      	b.n	8006090 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800608e:	2302      	movs	r3, #2
  }
}
 8006090:	4618      	mov	r0, r3
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689a      	ldr	r2, [r3, #8]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80060d2:	f023 030c 	bic.w	r3, r3, #12
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6812      	ldr	r2, [r2, #0]
 80060da:	68b9      	ldr	r1, [r7, #8]
 80060dc:	430b      	orrs	r3, r1
 80060de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a2c      	ldr	r2, [pc, #176]	; (80061ac <UART_SetConfig+0x114>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d103      	bne.n	8006108 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006100:	f7ff f816 	bl	8005130 <HAL_RCC_GetPCLK2Freq>
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	e002      	b.n	800610e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006108:	f7fe fffe 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 800610c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009a      	lsls	r2, r3, #2
 8006118:	441a      	add	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	fbb2 f3f3 	udiv	r3, r2, r3
 8006124:	4a22      	ldr	r2, [pc, #136]	; (80061b0 <UART_SetConfig+0x118>)
 8006126:	fba2 2303 	umull	r2, r3, r2, r3
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	0119      	lsls	r1, r3, #4
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	009a      	lsls	r2, r3, #2
 8006138:	441a      	add	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	fbb2 f2f3 	udiv	r2, r2, r3
 8006144:	4b1a      	ldr	r3, [pc, #104]	; (80061b0 <UART_SetConfig+0x118>)
 8006146:	fba3 0302 	umull	r0, r3, r3, r2
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	2064      	movs	r0, #100	; 0x64
 800614e:	fb00 f303 	mul.w	r3, r0, r3
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	3332      	adds	r3, #50	; 0x32
 8006158:	4a15      	ldr	r2, [pc, #84]	; (80061b0 <UART_SetConfig+0x118>)
 800615a:	fba2 2303 	umull	r2, r3, r2, r3
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006164:	4419      	add	r1, r3
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009a      	lsls	r2, r3, #2
 8006170:	441a      	add	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	fbb2 f2f3 	udiv	r2, r2, r3
 800617c:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <UART_SetConfig+0x118>)
 800617e:	fba3 0302 	umull	r0, r3, r3, r2
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	2064      	movs	r0, #100	; 0x64
 8006186:	fb00 f303 	mul.w	r3, r0, r3
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	3332      	adds	r3, #50	; 0x32
 8006190:	4a07      	ldr	r2, [pc, #28]	; (80061b0 <UART_SetConfig+0x118>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	f003 020f 	and.w	r2, r3, #15
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	440a      	add	r2, r1
 80061a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80061a4:	bf00      	nop
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40013800 	.word	0x40013800
 80061b0:	51eb851f 	.word	0x51eb851f

080061b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061b4:	b084      	sub	sp, #16
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	f107 0014 	add.w	r0, r7, #20
 80061c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	b004      	add	sp, #16
 80061d2:	4770      	bx	lr

080061d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80061e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006208:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800620c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006214:	b29a      	uxth	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	b29b      	uxth	r3, r3
 800621a:	43db      	mvns	r3, r3
 800621c:	b29b      	uxth	r3, r3
 800621e:	4013      	ands	r3, r2
 8006220:	b29a      	uxth	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr

08006234 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	460b      	mov	r3, r1
 800623e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr

0800624c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800624c:	b084      	sub	sp, #16
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	f107 0014 	add.w	r0, r7, #20
 800625a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	bc80      	pop	{r7}
 8006288:	b004      	add	sp, #16
 800628a:	4770      	bx	lr

0800628c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800628c:	b480      	push	{r7}
 800628e:	b09b      	sub	sp, #108	; 0x6c
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80062ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	78db      	ldrb	r3, [r3, #3]
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d81f      	bhi.n	80062fe <USB_ActivateEndpoint+0x72>
 80062be:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <USB_ActivateEndpoint+0x38>)
 80062c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c4:	080062d5 	.word	0x080062d5
 80062c8:	080062f1 	.word	0x080062f1
 80062cc:	08006307 	.word	0x08006307
 80062d0:	080062e3 	.word	0x080062e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80062d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80062d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80062e0:	e012      	b.n	8006308 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80062e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80062e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80062ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80062ee:	e00b      	b.n	8006308 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80062f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80062f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80062fc:	e004      	b.n	8006308 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006304:	e000      	b.n	8006308 <USB_ActivateEndpoint+0x7c>
      break;
 8006306:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	441a      	add	r2, r3
 8006312:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800631a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800631e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006326:	b29b      	uxth	r3, r3
 8006328:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	b29b      	uxth	r3, r3
 8006338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800633c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006340:	b29a      	uxth	r2, r3
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	4313      	orrs	r3, r2
 800634a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	441a      	add	r2, r3
 8006358:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800635c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800636c:	b29b      	uxth	r3, r3
 800636e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	7b1b      	ldrb	r3, [r3, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f040 8149 	bne.w	800660c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	785b      	ldrb	r3, [r3, #1]
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 8084 	beq.w	800648c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800638e:	b29b      	uxth	r3, r3
 8006390:	461a      	mov	r2, r3
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	4413      	add	r3, r2
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	011a      	lsls	r2, r3, #4
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063a6:	613b      	str	r3, [r7, #16]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	88db      	ldrh	r3, [r3, #6]
 80063ac:	085b      	lsrs	r3, r3, #1
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	81fb      	strh	r3, [r7, #14]
 80063c6:	89fb      	ldrh	r3, [r7, #14]
 80063c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01b      	beq.n	8006408 <USB_ActivateEndpoint+0x17c>
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e6:	81bb      	strh	r3, [r7, #12]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	441a      	add	r2, r3
 80063f2:	89bb      	ldrh	r3, [r7, #12]
 80063f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006400:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006404:	b29b      	uxth	r3, r3
 8006406:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	78db      	ldrb	r3, [r3, #3]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d020      	beq.n	8006452 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29b      	uxth	r3, r3
 800641e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006426:	813b      	strh	r3, [r7, #8]
 8006428:	893b      	ldrh	r3, [r7, #8]
 800642a:	f083 0320 	eor.w	r3, r3, #32
 800642e:	813b      	strh	r3, [r7, #8]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	441a      	add	r2, r3
 800643a:	893b      	ldrh	r3, [r7, #8]
 800643c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644c:	b29b      	uxth	r3, r3
 800644e:	8013      	strh	r3, [r2, #0]
 8006450:	e27f      	b.n	8006952 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006468:	817b      	strh	r3, [r7, #10]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	441a      	add	r2, r3
 8006474:	897b      	ldrh	r3, [r7, #10]
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]
 800648a:	e262      	b.n	8006952 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006496:	b29b      	uxth	r3, r3
 8006498:	461a      	mov	r2, r3
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	4413      	add	r3, r2
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	011a      	lsls	r2, r3, #4
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80064ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	88db      	ldrh	r3, [r3, #6]
 80064b4:	085b      	lsrs	r3, r3, #1
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	4413      	add	r3, r2
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	011a      	lsls	r2, r3, #4
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	4413      	add	r3, r2
 80064de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064e2:	623b      	str	r3, [r7, #32]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d112      	bne.n	8006512 <USB_ActivateEndpoint+0x286>
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	801a      	strh	r2, [r3, #0]
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800650a:	b29a      	uxth	r2, r3
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	e02f      	b.n	8006572 <USB_ActivateEndpoint+0x2e6>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b3e      	cmp	r3, #62	; 0x3e
 8006518:	d813      	bhi.n	8006542 <USB_ActivateEndpoint+0x2b6>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	663b      	str	r3, [r7, #96]	; 0x60
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <USB_ActivateEndpoint+0x2a8>
 800652e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006530:	3301      	adds	r3, #1
 8006532:	663b      	str	r3, [r7, #96]	; 0x60
 8006534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006536:	b29b      	uxth	r3, r3
 8006538:	029b      	lsls	r3, r3, #10
 800653a:	b29a      	uxth	r2, r3
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	801a      	strh	r2, [r3, #0]
 8006540:	e017      	b.n	8006572 <USB_ActivateEndpoint+0x2e6>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	663b      	str	r3, [r7, #96]	; 0x60
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f003 031f 	and.w	r3, r3, #31
 8006552:	2b00      	cmp	r3, #0
 8006554:	d102      	bne.n	800655c <USB_ActivateEndpoint+0x2d0>
 8006556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006558:	3b01      	subs	r3, #1
 800655a:	663b      	str	r3, [r7, #96]	; 0x60
 800655c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800655e:	b29b      	uxth	r3, r3
 8006560:	029b      	lsls	r3, r3, #10
 8006562:	b29b      	uxth	r3, r3
 8006564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800656c:	b29a      	uxth	r2, r3
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	83fb      	strh	r3, [r7, #30]
 8006580:	8bfb      	ldrh	r3, [r7, #30]
 8006582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d01b      	beq.n	80065c2 <USB_ActivateEndpoint+0x336>
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	b29b      	uxth	r3, r3
 8006598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800659c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a0:	83bb      	strh	r3, [r7, #28]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	441a      	add	r2, r3
 80065ac:	8bbb      	ldrh	r3, [r7, #28]
 80065ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065be:	b29b      	uxth	r3, r3
 80065c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d8:	837b      	strh	r3, [r7, #26]
 80065da:	8b7b      	ldrh	r3, [r7, #26]
 80065dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065e0:	837b      	strh	r3, [r7, #26]
 80065e2:	8b7b      	ldrh	r3, [r7, #26]
 80065e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065e8:	837b      	strh	r3, [r7, #26]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	441a      	add	r2, r3
 80065f4:	8b7b      	ldrh	r3, [r7, #26]
 80065f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006606:	b29b      	uxth	r3, r3
 8006608:	8013      	strh	r3, [r2, #0]
 800660a:	e1a2      	b.n	8006952 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	b29b      	uxth	r3, r3
 800661a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800661e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006622:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	441a      	add	r2, r3
 8006630:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800663c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006644:	b29b      	uxth	r3, r3
 8006646:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	65bb      	str	r3, [r7, #88]	; 0x58
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006652:	b29b      	uxth	r3, r3
 8006654:	461a      	mov	r2, r3
 8006656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006658:	4413      	add	r3, r2
 800665a:	65bb      	str	r3, [r7, #88]	; 0x58
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	011a      	lsls	r2, r3, #4
 8006662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006664:	4413      	add	r3, r2
 8006666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800666a:	657b      	str	r3, [r7, #84]	; 0x54
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	891b      	ldrh	r3, [r3, #8]
 8006670:	085b      	lsrs	r3, r3, #1
 8006672:	b29b      	uxth	r3, r3
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800667a:	801a      	strh	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	653b      	str	r3, [r7, #80]	; 0x50
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006686:	b29b      	uxth	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800668c:	4413      	add	r3, r2
 800668e:	653b      	str	r3, [r7, #80]	; 0x50
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	011a      	lsls	r2, r3, #4
 8006696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006698:	4413      	add	r3, r2
 800669a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800669e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	895b      	ldrh	r3, [r3, #10]
 80066a4:	085b      	lsrs	r3, r3, #1
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	785b      	ldrb	r3, [r3, #1]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f040 8091 	bne.w	80067dc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80066c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80066ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d01b      	beq.n	800670a <USB_ActivateEndpoint+0x47e>
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	441a      	add	r2, r3
 80066f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80066f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006706:	b29b      	uxth	r3, r3
 8006708:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	873b      	strh	r3, [r7, #56]	; 0x38
 8006718:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800671a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d01b      	beq.n	800675a <USB_ActivateEndpoint+0x4ce>
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29b      	uxth	r3, r3
 8006730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006738:	86fb      	strh	r3, [r7, #54]	; 0x36
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	441a      	add	r2, r3
 8006744:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800674a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006752:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006756:	b29b      	uxth	r3, r3
 8006758:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800676c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006770:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006772:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006774:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006778:	86bb      	strh	r3, [r7, #52]	; 0x34
 800677a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800677c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006780:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	441a      	add	r2, r3
 800678c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800678e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800679a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800679e:	b29b      	uxth	r3, r3
 80067a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b8:	867b      	strh	r3, [r7, #50]	; 0x32
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]
 80067da:	e0ba      	b.n	8006952 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80067ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80067f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01d      	beq.n	8006834 <USB_ActivateEndpoint+0x5a8>
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	b29b      	uxth	r3, r3
 8006806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800680a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	441a      	add	r2, r3
 800681c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800682c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006830:	b29b      	uxth	r3, r3
 8006832:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006844:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01d      	beq.n	800688c <USB_ActivateEndpoint+0x600>
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	b29b      	uxth	r3, r3
 800685e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006866:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	441a      	add	r2, r3
 8006874:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800687c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006884:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006888:	b29b      	uxth	r3, r3
 800688a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	78db      	ldrb	r3, [r3, #3]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d024      	beq.n	80068de <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80068ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80068b2:	f083 0320 	eor.w	r3, r3, #32
 80068b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	441a      	add	r2, r3
 80068c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80068c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d8:	b29b      	uxth	r3, r3
 80068da:	8013      	strh	r3, [r2, #0]
 80068dc:	e01d      	b.n	800691a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	441a      	add	r2, r3
 8006902:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800690e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006916:	b29b      	uxth	r3, r3
 8006918:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800692c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006930:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	441a      	add	r2, r3
 800693c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800693e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800694a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694e:	b29b      	uxth	r3, r3
 8006950:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006952:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006956:	4618      	mov	r0, r3
 8006958:	376c      	adds	r7, #108	; 0x6c
 800695a:	46bd      	mov	sp, r7
 800695c:	bc80      	pop	{r7}
 800695e:	4770      	bx	lr

08006960 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006960:	b480      	push	{r7}
 8006962:	b08d      	sub	sp, #52	; 0x34
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	7b1b      	ldrb	r3, [r3, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 808e 	bne.w	8006a90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	785b      	ldrb	r3, [r3, #1]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d044      	beq.n	8006a06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	81bb      	strh	r3, [r7, #12]
 800698a:	89bb      	ldrh	r3, [r7, #12]
 800698c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01b      	beq.n	80069cc <USB_DeactivateEndpoint+0x6c>
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069aa:	817b      	strh	r3, [r7, #10]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	441a      	add	r2, r3
 80069b6:	897b      	ldrh	r3, [r7, #10]
 80069b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e2:	813b      	strh	r3, [r7, #8]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	441a      	add	r2, r3
 80069ee:	893b      	ldrh	r3, [r7, #8]
 80069f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	8013      	strh	r3, [r2, #0]
 8006a04:	e192      	b.n	8006d2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	827b      	strh	r3, [r7, #18]
 8006a14:	8a7b      	ldrh	r3, [r7, #18]
 8006a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01b      	beq.n	8006a56 <USB_DeactivateEndpoint+0xf6>
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a34:	823b      	strh	r3, [r7, #16]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	441a      	add	r2, r3
 8006a40:	8a3b      	ldrh	r3, [r7, #16]
 8006a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6c:	81fb      	strh	r3, [r7, #14]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	441a      	add	r2, r3
 8006a78:	89fb      	ldrh	r3, [r7, #14]
 8006a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	8013      	strh	r3, [r2, #0]
 8006a8e:	e14d      	b.n	8006d2c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f040 80a5 	bne.w	8006be4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	843b      	strh	r3, [r7, #32]
 8006aa8:	8c3b      	ldrh	r3, [r7, #32]
 8006aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01b      	beq.n	8006aea <USB_DeactivateEndpoint+0x18a>
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac8:	83fb      	strh	r3, [r7, #30]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	441a      	add	r2, r3
 8006ad4:	8bfb      	ldrh	r3, [r7, #30]
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ade:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	83bb      	strh	r3, [r7, #28]
 8006af8:	8bbb      	ldrh	r3, [r7, #28]
 8006afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01b      	beq.n	8006b3a <USB_DeactivateEndpoint+0x1da>
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b18:	837b      	strh	r3, [r7, #26]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	441a      	add	r2, r3
 8006b24:	8b7b      	ldrh	r3, [r7, #26]
 8006b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b50:	833b      	strh	r3, [r7, #24]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	441a      	add	r2, r3
 8006b5c:	8b3b      	ldrh	r3, [r7, #24]
 8006b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b88:	82fb      	strh	r3, [r7, #22]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	441a      	add	r2, r3
 8006b94:	8afb      	ldrh	r3, [r7, #22]
 8006b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc0:	82bb      	strh	r3, [r7, #20]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	441a      	add	r2, r3
 8006bcc:	8abb      	ldrh	r3, [r7, #20]
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]
 8006be2:	e0a3      	b.n	8006d2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006bf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01b      	beq.n	8006c34 <USB_DeactivateEndpoint+0x2d4>
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c12:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006c42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01b      	beq.n	8006c84 <USB_DeactivateEndpoint+0x324>
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c62:	853b      	strh	r3, [r7, #40]	; 0x28
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	441a      	add	r2, r3
 8006c6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	441a      	add	r2, r3
 8006cde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	441a      	add	r2, r3
 8006d16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3734      	adds	r7, #52	; 0x34
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b0cc      	sub	sp, #304	; 0x130
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	1d3b      	adds	r3, r7, #4
 8006d40:	6018      	str	r0, [r3, #0]
 8006d42:	463b      	mov	r3, r7
 8006d44:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d46:	463b      	mov	r3, r7
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	785b      	ldrb	r3, [r3, #1]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	f040 872e 	bne.w	8007bae <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006d52:	463b      	mov	r3, r7
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	699a      	ldr	r2, [r3, #24]
 8006d58:	463b      	mov	r3, r7
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d905      	bls.n	8006d6e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006d62:	463b      	mov	r3, r7
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006d6c:	e004      	b.n	8006d78 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006d6e:	463b      	mov	r3, r7
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006d78:	463b      	mov	r3, r7
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	7b1b      	ldrb	r3, [r3, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d134      	bne.n	8006dec <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006d82:	463b      	mov	r3, r7
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6959      	ldr	r1, [r3, #20]
 8006d88:	463b      	mov	r3, r7
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	88da      	ldrh	r2, [r3, #6]
 8006d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	1d38      	adds	r0, r7, #4
 8006d96:	6800      	ldr	r0, [r0, #0]
 8006d98:	f001 fc03 	bl	80085a2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d9c:	f107 0310 	add.w	r3, r7, #16
 8006da0:	1d3a      	adds	r2, r7, #4
 8006da2:	6812      	ldr	r2, [r2, #0]
 8006da4:	601a      	str	r2, [r3, #0]
 8006da6:	1d3b      	adds	r3, r7, #4
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	4619      	mov	r1, r3
 8006db2:	f107 0310 	add.w	r3, r7, #16
 8006db6:	f107 0210 	add.w	r2, r7, #16
 8006dba:	6812      	ldr	r2, [r2, #0]
 8006dbc:	440a      	add	r2, r1
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	011a      	lsls	r2, r3, #4
 8006dc8:	f107 0310 	add.w	r3, r7, #16
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006dd4:	f107 030c 	add.w	r3, r7, #12
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	f107 030c 	add.w	r3, r7, #12
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	801a      	strh	r2, [r3, #0]
 8006de8:	f000 beac 	b.w	8007b44 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006dec:	463b      	mov	r3, r7
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	78db      	ldrb	r3, [r3, #3]
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	f040 838c 	bne.w	8007510 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006df8:	463b      	mov	r3, r7
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6a1a      	ldr	r2, [r3, #32]
 8006dfe:	463b      	mov	r3, r7
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	f240 8330 	bls.w	800746a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006e0a:	1d3b      	adds	r3, r7, #4
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	463b      	mov	r3, r7
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006e28:	1d3b      	adds	r3, r7, #4
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	463b      	mov	r3, r7
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	441a      	add	r2, r3
 8006e36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006e4e:	463b      	mov	r3, r7
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6a1a      	ldr	r2, [r3, #32]
 8006e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e58:	1ad2      	subs	r2, r2, r3
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e60:	1d3b      	adds	r3, r7, #4
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	463b      	mov	r3, r7
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 819e 	beq.w	80071b8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e80:	1d3a      	adds	r2, r7, #4
 8006e82:	6812      	ldr	r2, [r2, #0]
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	463b      	mov	r3, r7
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	785b      	ldrb	r3, [r3, #1]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d17a      	bne.n	8006f86 <USB_EPStartXfer+0x24e>
 8006e90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e94:	1d3a      	adds	r2, r7, #4
 8006e96:	6812      	ldr	r2, [r2, #0]
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	1d3b      	adds	r3, r7, #4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006eaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006eae:	6812      	ldr	r2, [r2, #0]
 8006eb0:	440a      	add	r2, r1
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	463b      	mov	r3, r7
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	011a      	lsls	r2, r3, #4
 8006ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d11a      	bne.n	8006f0c <USB_EPStartXfer+0x1d4>
 8006ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	801a      	strh	r2, [r3, #0]
 8006eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	801a      	strh	r2, [r3, #0]
 8006f0a:	e062      	b.n	8006fd2 <USB_EPStartXfer+0x29a>
 8006f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f10:	2b3e      	cmp	r3, #62	; 0x3e
 8006f12:	d819      	bhi.n	8006f48 <USB_EPStartXfer+0x210>
 8006f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f18:	085b      	lsrs	r3, r3, #1
 8006f1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d004      	beq.n	8006f34 <USB_EPStartXfer+0x1fc>
 8006f2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f2e:	3301      	adds	r3, #1
 8006f30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	029b      	lsls	r3, r3, #10
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	801a      	strh	r2, [r3, #0]
 8006f46:	e044      	b.n	8006fd2 <USB_EPStartXfer+0x29a>
 8006f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f56:	f003 031f 	and.w	r3, r3, #31
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d104      	bne.n	8006f68 <USB_EPStartXfer+0x230>
 8006f5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f62:	3b01      	subs	r3, #1
 8006f64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	029b      	lsls	r3, r3, #10
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	801a      	strh	r2, [r3, #0]
 8006f84:	e025      	b.n	8006fd2 <USB_EPStartXfer+0x29a>
 8006f86:	463b      	mov	r3, r7
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	785b      	ldrb	r3, [r3, #1]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d120      	bne.n	8006fd2 <USB_EPStartXfer+0x29a>
 8006f90:	1d3b      	adds	r3, r7, #4
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006fa0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006fa4:	6812      	ldr	r2, [r2, #0]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	463b      	mov	r3, r7
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	011a      	lsls	r2, r3, #4
 8006fb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006fbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fd2:	463b      	mov	r3, r7
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	895b      	ldrh	r3, [r3, #10]
 8006fd8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fdc:	463b      	mov	r3, r7
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6959      	ldr	r1, [r3, #20]
 8006fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006fec:	1d38      	adds	r0, r7, #4
 8006fee:	6800      	ldr	r0, [r0, #0]
 8006ff0:	f001 fad7 	bl	80085a2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	695a      	ldr	r2, [r3, #20]
 8006ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffe:	441a      	add	r2, r3
 8007000:	463b      	mov	r3, r7
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007006:	463b      	mov	r3, r7
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6a1a      	ldr	r2, [r3, #32]
 800700c:	463b      	mov	r3, r7
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	429a      	cmp	r2, r3
 8007014:	d909      	bls.n	800702a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8007016:	463b      	mov	r3, r7
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6a1a      	ldr	r2, [r3, #32]
 800701c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007020:	1ad2      	subs	r2, r2, r3
 8007022:	463b      	mov	r3, r7
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	621a      	str	r2, [r3, #32]
 8007028:	e008      	b.n	800703c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800702a:	463b      	mov	r3, r7
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007034:	463b      	mov	r3, r7
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2200      	movs	r2, #0
 800703a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800703c:	463b      	mov	r3, r7
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	785b      	ldrb	r3, [r3, #1]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d17a      	bne.n	800713c <USB_EPStartXfer+0x404>
 8007046:	f107 0318 	add.w	r3, r7, #24
 800704a:	1d3a      	adds	r2, r7, #4
 800704c:	6812      	ldr	r2, [r2, #0]
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	1d3b      	adds	r3, r7, #4
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007058:	b29b      	uxth	r3, r3
 800705a:	4619      	mov	r1, r3
 800705c:	f107 0318 	add.w	r3, r7, #24
 8007060:	f107 0218 	add.w	r2, r7, #24
 8007064:	6812      	ldr	r2, [r2, #0]
 8007066:	440a      	add	r2, r1
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	463b      	mov	r3, r7
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	011a      	lsls	r2, r3, #4
 8007072:	f107 0318 	add.w	r3, r7, #24
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4413      	add	r3, r2
 800707a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800707e:	f107 0314 	add.w	r3, r7, #20
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007088:	2b00      	cmp	r3, #0
 800708a:	d11a      	bne.n	80070c2 <USB_EPStartXfer+0x38a>
 800708c:	f107 0314 	add.w	r3, r7, #20
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	b29b      	uxth	r3, r3
 8007096:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800709a:	b29a      	uxth	r2, r3
 800709c:	f107 0314 	add.w	r3, r7, #20
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	801a      	strh	r2, [r3, #0]
 80070a4:	f107 0314 	add.w	r3, r7, #20
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	f107 0314 	add.w	r3, r7, #20
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	801a      	strh	r2, [r3, #0]
 80070c0:	e067      	b.n	8007192 <USB_EPStartXfer+0x45a>
 80070c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c6:	2b3e      	cmp	r3, #62	; 0x3e
 80070c8:	d819      	bhi.n	80070fe <USB_EPStartXfer+0x3c6>
 80070ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ce:	085b      	lsrs	r3, r3, #1
 80070d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80070d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d004      	beq.n	80070ea <USB_EPStartXfer+0x3b2>
 80070e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80070e4:	3301      	adds	r3, #1
 80070e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80070ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	029b      	lsls	r3, r3, #10
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	f107 0314 	add.w	r3, r7, #20
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	e049      	b.n	8007192 <USB_EPStartXfer+0x45a>
 80070fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007102:	095b      	lsrs	r3, r3, #5
 8007104:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	2b00      	cmp	r3, #0
 8007112:	d104      	bne.n	800711e <USB_EPStartXfer+0x3e6>
 8007114:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007118:	3b01      	subs	r3, #1
 800711a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800711e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007122:	b29b      	uxth	r3, r3
 8007124:	029b      	lsls	r3, r3, #10
 8007126:	b29b      	uxth	r3, r3
 8007128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800712c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007130:	b29a      	uxth	r2, r3
 8007132:	f107 0314 	add.w	r3, r7, #20
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	801a      	strh	r2, [r3, #0]
 800713a:	e02a      	b.n	8007192 <USB_EPStartXfer+0x45a>
 800713c:	463b      	mov	r3, r7
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	785b      	ldrb	r3, [r3, #1]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d125      	bne.n	8007192 <USB_EPStartXfer+0x45a>
 8007146:	f107 0320 	add.w	r3, r7, #32
 800714a:	1d3a      	adds	r2, r7, #4
 800714c:	6812      	ldr	r2, [r2, #0]
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	1d3b      	adds	r3, r7, #4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007158:	b29b      	uxth	r3, r3
 800715a:	4619      	mov	r1, r3
 800715c:	f107 0320 	add.w	r3, r7, #32
 8007160:	f107 0220 	add.w	r2, r7, #32
 8007164:	6812      	ldr	r2, [r2, #0]
 8007166:	440a      	add	r2, r1
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	463b      	mov	r3, r7
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	011a      	lsls	r2, r3, #4
 8007172:	f107 0320 	add.w	r3, r7, #32
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4413      	add	r3, r2
 800717a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800717e:	f107 031c 	add.w	r3, r7, #28
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007188:	b29a      	uxth	r2, r3
 800718a:	f107 031c 	add.w	r3, r7, #28
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007192:	463b      	mov	r3, r7
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	891b      	ldrh	r3, [r3, #8]
 8007198:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800719c:	463b      	mov	r3, r7
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6959      	ldr	r1, [r3, #20]
 80071a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071ac:	1d38      	adds	r0, r7, #4
 80071ae:	6800      	ldr	r0, [r0, #0]
 80071b0:	f001 f9f7 	bl	80085a2 <USB_WritePMA>
 80071b4:	f000 bcc6 	b.w	8007b44 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071b8:	463b      	mov	r3, r7
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	785b      	ldrb	r3, [r3, #1]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d164      	bne.n	800728c <USB_EPStartXfer+0x554>
 80071c2:	1d3b      	adds	r3, r7, #4
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80071c8:	1d3b      	adds	r3, r7, #4
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	461a      	mov	r2, r3
 80071d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d6:	4413      	add	r3, r2
 80071d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80071da:	463b      	mov	r3, r7
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	011a      	lsls	r2, r3, #4
 80071e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e4:	4413      	add	r3, r2
 80071e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071ea:	647b      	str	r3, [r7, #68]	; 0x44
 80071ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d112      	bne.n	800721a <USB_EPStartXfer+0x4e2>
 80071f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071fe:	b29a      	uxth	r2, r3
 8007200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	b29b      	uxth	r3, r3
 800720a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800720e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007212:	b29a      	uxth	r2, r3
 8007214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007216:	801a      	strh	r2, [r3, #0]
 8007218:	e057      	b.n	80072ca <USB_EPStartXfer+0x592>
 800721a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721e:	2b3e      	cmp	r3, #62	; 0x3e
 8007220:	d817      	bhi.n	8007252 <USB_EPStartXfer+0x51a>
 8007222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007226:	085b      	lsrs	r3, r3, #1
 8007228:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800722c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d004      	beq.n	8007242 <USB_EPStartXfer+0x50a>
 8007238:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800723c:	3301      	adds	r3, #1
 800723e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007242:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007246:	b29b      	uxth	r3, r3
 8007248:	029b      	lsls	r3, r3, #10
 800724a:	b29a      	uxth	r2, r3
 800724c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	e03b      	b.n	80072ca <USB_EPStartXfer+0x592>
 8007252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800725c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007260:	f003 031f 	and.w	r3, r3, #31
 8007264:	2b00      	cmp	r3, #0
 8007266:	d104      	bne.n	8007272 <USB_EPStartXfer+0x53a>
 8007268:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800726c:	3b01      	subs	r3, #1
 800726e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007272:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007276:	b29b      	uxth	r3, r3
 8007278:	029b      	lsls	r3, r3, #10
 800727a:	b29b      	uxth	r3, r3
 800727c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007284:	b29a      	uxth	r2, r3
 8007286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007288:	801a      	strh	r2, [r3, #0]
 800728a:	e01e      	b.n	80072ca <USB_EPStartXfer+0x592>
 800728c:	463b      	mov	r3, r7
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	785b      	ldrb	r3, [r3, #1]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d119      	bne.n	80072ca <USB_EPStartXfer+0x592>
 8007296:	1d3b      	adds	r3, r7, #4
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	653b      	str	r3, [r7, #80]	; 0x50
 800729c:	1d3b      	adds	r3, r7, #4
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	461a      	mov	r2, r3
 80072a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072aa:	4413      	add	r3, r2
 80072ac:	653b      	str	r3, [r7, #80]	; 0x50
 80072ae:	463b      	mov	r3, r7
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	011a      	lsls	r2, r3, #4
 80072b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072b8:	4413      	add	r3, r2
 80072ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072ca:	463b      	mov	r3, r7
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	891b      	ldrh	r3, [r3, #8]
 80072d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072d4:	463b      	mov	r3, r7
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6959      	ldr	r1, [r3, #20]
 80072da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072de:	b29b      	uxth	r3, r3
 80072e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072e4:	1d38      	adds	r0, r7, #4
 80072e6:	6800      	ldr	r0, [r0, #0]
 80072e8:	f001 f95b 	bl	80085a2 <USB_WritePMA>
            ep->xfer_buff += len;
 80072ec:	463b      	mov	r3, r7
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695a      	ldr	r2, [r3, #20]
 80072f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f6:	441a      	add	r2, r3
 80072f8:	463b      	mov	r3, r7
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80072fe:	463b      	mov	r3, r7
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6a1a      	ldr	r2, [r3, #32]
 8007304:	463b      	mov	r3, r7
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	429a      	cmp	r2, r3
 800730c:	d909      	bls.n	8007322 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800730e:	463b      	mov	r3, r7
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6a1a      	ldr	r2, [r3, #32]
 8007314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007318:	1ad2      	subs	r2, r2, r3
 800731a:	463b      	mov	r3, r7
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	621a      	str	r2, [r3, #32]
 8007320:	e008      	b.n	8007334 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8007322:	463b      	mov	r3, r7
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800732c:	463b      	mov	r3, r7
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2200      	movs	r2, #0
 8007332:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007334:	1d3b      	adds	r3, r7, #4
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	643b      	str	r3, [r7, #64]	; 0x40
 800733a:	463b      	mov	r3, r7
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	785b      	ldrb	r3, [r3, #1]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d164      	bne.n	800740e <USB_EPStartXfer+0x6d6>
 8007344:	1d3b      	adds	r3, r7, #4
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	63bb      	str	r3, [r7, #56]	; 0x38
 800734a:	1d3b      	adds	r3, r7, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007352:	b29b      	uxth	r3, r3
 8007354:	461a      	mov	r2, r3
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	4413      	add	r3, r2
 800735a:	63bb      	str	r3, [r7, #56]	; 0x38
 800735c:	463b      	mov	r3, r7
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	011a      	lsls	r2, r3, #4
 8007364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007366:	4413      	add	r3, r2
 8007368:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800736c:	637b      	str	r3, [r7, #52]	; 0x34
 800736e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d112      	bne.n	800739c <USB_EPStartXfer+0x664>
 8007376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	b29b      	uxth	r3, r3
 800737c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007380:	b29a      	uxth	r2, r3
 8007382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007384:	801a      	strh	r2, [r3, #0]
 8007386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007394:	b29a      	uxth	r2, r3
 8007396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007398:	801a      	strh	r2, [r3, #0]
 800739a:	e054      	b.n	8007446 <USB_EPStartXfer+0x70e>
 800739c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a0:	2b3e      	cmp	r3, #62	; 0x3e
 80073a2:	d817      	bhi.n	80073d4 <USB_EPStartXfer+0x69c>
 80073a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a8:	085b      	lsrs	r3, r3, #1
 80073aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80073ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d004      	beq.n	80073c4 <USB_EPStartXfer+0x68c>
 80073ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80073be:	3301      	adds	r3, #1
 80073c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80073c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	029b      	lsls	r3, r3, #10
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d0:	801a      	strh	r2, [r3, #0]
 80073d2:	e038      	b.n	8007446 <USB_EPStartXfer+0x70e>
 80073d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d8:	095b      	lsrs	r3, r3, #5
 80073da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80073de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e2:	f003 031f 	and.w	r3, r3, #31
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d104      	bne.n	80073f4 <USB_EPStartXfer+0x6bc>
 80073ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80073ee:	3b01      	subs	r3, #1
 80073f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80073f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	029b      	lsls	r3, r3, #10
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007406:	b29a      	uxth	r2, r3
 8007408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	e01b      	b.n	8007446 <USB_EPStartXfer+0x70e>
 800740e:	463b      	mov	r3, r7
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	785b      	ldrb	r3, [r3, #1]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d116      	bne.n	8007446 <USB_EPStartXfer+0x70e>
 8007418:	1d3b      	adds	r3, r7, #4
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007420:	b29b      	uxth	r3, r3
 8007422:	461a      	mov	r2, r3
 8007424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007426:	4413      	add	r3, r2
 8007428:	643b      	str	r3, [r7, #64]	; 0x40
 800742a:	463b      	mov	r3, r7
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	011a      	lsls	r2, r3, #4
 8007432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007434:	4413      	add	r3, r2
 8007436:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800743a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800743c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007440:	b29a      	uxth	r2, r3
 8007442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007444:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007446:	463b      	mov	r3, r7
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	895b      	ldrh	r3, [r3, #10]
 800744c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007450:	463b      	mov	r3, r7
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6959      	ldr	r1, [r3, #20]
 8007456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800745a:	b29b      	uxth	r3, r3
 800745c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007460:	1d38      	adds	r0, r7, #4
 8007462:	6800      	ldr	r0, [r0, #0]
 8007464:	f001 f89d 	bl	80085a2 <USB_WritePMA>
 8007468:	e36c      	b.n	8007b44 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800746a:	463b      	mov	r3, r7
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007474:	1d3b      	adds	r3, r7, #4
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	463b      	mov	r3, r7
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b29b      	uxth	r3, r3
 8007486:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800748a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007492:	1d3b      	adds	r3, r7, #4
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	463b      	mov	r3, r7
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	441a      	add	r2, r3
 80074a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80074a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80074b8:	1d3b      	adds	r3, r7, #4
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074be:	1d3b      	adds	r3, r7, #4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	461a      	mov	r2, r3
 80074ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074cc:	4413      	add	r3, r2
 80074ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074d0:	463b      	mov	r3, r7
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	011a      	lsls	r2, r3, #4
 80074d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074da:	4413      	add	r3, r2
 80074dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80074e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074ec:	463b      	mov	r3, r7
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	891b      	ldrh	r3, [r3, #8]
 80074f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074f6:	463b      	mov	r3, r7
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6959      	ldr	r1, [r3, #20]
 80074fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007500:	b29b      	uxth	r3, r3
 8007502:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007506:	1d38      	adds	r0, r7, #4
 8007508:	6800      	ldr	r0, [r0, #0]
 800750a:	f001 f84a 	bl	80085a2 <USB_WritePMA>
 800750e:	e319      	b.n	8007b44 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007510:	1d3b      	adds	r3, r7, #4
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	463b      	mov	r3, r7
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800752e:	1d3b      	adds	r3, r7, #4
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	463b      	mov	r3, r7
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	441a      	add	r2, r3
 800753c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007548:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800754c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007550:	b29b      	uxth	r3, r3
 8007552:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007554:	463b      	mov	r3, r7
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6a1a      	ldr	r2, [r3, #32]
 800755a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800755e:	1ad2      	subs	r2, r2, r3
 8007560:	463b      	mov	r3, r7
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007566:	1d3b      	adds	r3, r7, #4
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	463b      	mov	r3, r7
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 8162 	beq.w	8007846 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007582:	1d3b      	adds	r3, r7, #4
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800758a:	463b      	mov	r3, r7
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	785b      	ldrb	r3, [r3, #1]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d164      	bne.n	800765e <USB_EPStartXfer+0x926>
 8007594:	1d3b      	adds	r3, r7, #4
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	67bb      	str	r3, [r7, #120]	; 0x78
 800759a:	1d3b      	adds	r3, r7, #4
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	461a      	mov	r2, r3
 80075a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075a8:	4413      	add	r3, r2
 80075aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80075ac:	463b      	mov	r3, r7
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	011a      	lsls	r2, r3, #4
 80075b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075b6:	4413      	add	r3, r2
 80075b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075bc:	677b      	str	r3, [r7, #116]	; 0x74
 80075be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d112      	bne.n	80075ec <USB_EPStartXfer+0x8b4>
 80075c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075d4:	801a      	strh	r2, [r3, #0]
 80075d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	b29b      	uxth	r3, r3
 80075dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075e8:	801a      	strh	r2, [r3, #0]
 80075ea:	e057      	b.n	800769c <USB_EPStartXfer+0x964>
 80075ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f0:	2b3e      	cmp	r3, #62	; 0x3e
 80075f2:	d817      	bhi.n	8007624 <USB_EPStartXfer+0x8ec>
 80075f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f8:	085b      	lsrs	r3, r3, #1
 80075fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80075fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d004      	beq.n	8007614 <USB_EPStartXfer+0x8dc>
 800760a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800760e:	3301      	adds	r3, #1
 8007610:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007614:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007618:	b29b      	uxth	r3, r3
 800761a:	029b      	lsls	r3, r3, #10
 800761c:	b29a      	uxth	r2, r3
 800761e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007620:	801a      	strh	r2, [r3, #0]
 8007622:	e03b      	b.n	800769c <USB_EPStartXfer+0x964>
 8007624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007628:	095b      	lsrs	r3, r3, #5
 800762a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800762e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007632:	f003 031f 	and.w	r3, r3, #31
 8007636:	2b00      	cmp	r3, #0
 8007638:	d104      	bne.n	8007644 <USB_EPStartXfer+0x90c>
 800763a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800763e:	3b01      	subs	r3, #1
 8007640:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007644:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007648:	b29b      	uxth	r3, r3
 800764a:	029b      	lsls	r3, r3, #10
 800764c:	b29b      	uxth	r3, r3
 800764e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007656:	b29a      	uxth	r2, r3
 8007658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800765a:	801a      	strh	r2, [r3, #0]
 800765c:	e01e      	b.n	800769c <USB_EPStartXfer+0x964>
 800765e:	463b      	mov	r3, r7
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	785b      	ldrb	r3, [r3, #1]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d119      	bne.n	800769c <USB_EPStartXfer+0x964>
 8007668:	1d3b      	adds	r3, r7, #4
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007670:	b29b      	uxth	r3, r3
 8007672:	461a      	mov	r2, r3
 8007674:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007678:	4413      	add	r3, r2
 800767a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800767e:	463b      	mov	r3, r7
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	011a      	lsls	r2, r3, #4
 8007686:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800768a:	4413      	add	r3, r2
 800768c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007690:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007696:	b29a      	uxth	r2, r3
 8007698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800769a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800769c:	463b      	mov	r3, r7
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	895b      	ldrh	r3, [r3, #10]
 80076a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076a6:	463b      	mov	r3, r7
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6959      	ldr	r1, [r3, #20]
 80076ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076b6:	1d38      	adds	r0, r7, #4
 80076b8:	6800      	ldr	r0, [r0, #0]
 80076ba:	f000 ff72 	bl	80085a2 <USB_WritePMA>
          ep->xfer_buff += len;
 80076be:	463b      	mov	r3, r7
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	695a      	ldr	r2, [r3, #20]
 80076c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c8:	441a      	add	r2, r3
 80076ca:	463b      	mov	r3, r7
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80076d0:	463b      	mov	r3, r7
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6a1a      	ldr	r2, [r3, #32]
 80076d6:	463b      	mov	r3, r7
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d909      	bls.n	80076f4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80076e0:	463b      	mov	r3, r7
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6a1a      	ldr	r2, [r3, #32]
 80076e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ea:	1ad2      	subs	r2, r2, r3
 80076ec:	463b      	mov	r3, r7
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	621a      	str	r2, [r3, #32]
 80076f2:	e008      	b.n	8007706 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80076f4:	463b      	mov	r3, r7
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80076fe:	463b      	mov	r3, r7
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2200      	movs	r2, #0
 8007704:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 821a 	beq.w	8007b44 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007710:	463b      	mov	r3, r7
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d164      	bne.n	80077e4 <USB_EPStartXfer+0xaac>
 800771a:	1d3b      	adds	r3, r7, #4
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007720:	1d3b      	adds	r3, r7, #4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007728:	b29b      	uxth	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800772e:	4413      	add	r3, r2
 8007730:	66bb      	str	r3, [r7, #104]	; 0x68
 8007732:	463b      	mov	r3, r7
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	011a      	lsls	r2, r3, #4
 800773a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800773c:	4413      	add	r3, r2
 800773e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007742:	667b      	str	r3, [r7, #100]	; 0x64
 8007744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007748:	2b00      	cmp	r3, #0
 800774a:	d112      	bne.n	8007772 <USB_EPStartXfer+0xa3a>
 800774c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	b29b      	uxth	r3, r3
 8007752:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007756:	b29a      	uxth	r2, r3
 8007758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800775a:	801a      	strh	r2, [r3, #0]
 800775c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	b29b      	uxth	r3, r3
 8007762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800776a:	b29a      	uxth	r2, r3
 800776c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800776e:	801a      	strh	r2, [r3, #0]
 8007770:	e057      	b.n	8007822 <USB_EPStartXfer+0xaea>
 8007772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007776:	2b3e      	cmp	r3, #62	; 0x3e
 8007778:	d817      	bhi.n	80077aa <USB_EPStartXfer+0xa72>
 800777a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777e:	085b      	lsrs	r3, r3, #1
 8007780:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b00      	cmp	r3, #0
 800778e:	d004      	beq.n	800779a <USB_EPStartXfer+0xa62>
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007794:	3301      	adds	r3, #1
 8007796:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800779a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800779e:	b29b      	uxth	r3, r3
 80077a0:	029b      	lsls	r3, r3, #10
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	e03b      	b.n	8007822 <USB_EPStartXfer+0xaea>
 80077aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ae:	095b      	lsrs	r3, r3, #5
 80077b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80077b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b8:	f003 031f 	and.w	r3, r3, #31
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d104      	bne.n	80077ca <USB_EPStartXfer+0xa92>
 80077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077c4:	3b01      	subs	r3, #1
 80077c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80077ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	029b      	lsls	r3, r3, #10
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077dc:	b29a      	uxth	r2, r3
 80077de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077e0:	801a      	strh	r2, [r3, #0]
 80077e2:	e01e      	b.n	8007822 <USB_EPStartXfer+0xaea>
 80077e4:	463b      	mov	r3, r7
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d119      	bne.n	8007822 <USB_EPStartXfer+0xaea>
 80077ee:	1d3b      	adds	r3, r7, #4
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	673b      	str	r3, [r7, #112]	; 0x70
 80077f4:	1d3b      	adds	r3, r7, #4
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	461a      	mov	r2, r3
 8007800:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007802:	4413      	add	r3, r2
 8007804:	673b      	str	r3, [r7, #112]	; 0x70
 8007806:	463b      	mov	r3, r7
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	011a      	lsls	r2, r3, #4
 800780e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007810:	4413      	add	r3, r2
 8007812:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007816:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800781c:	b29a      	uxth	r2, r3
 800781e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007820:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007822:	463b      	mov	r3, r7
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	891b      	ldrh	r3, [r3, #8]
 8007828:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800782c:	463b      	mov	r3, r7
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6959      	ldr	r1, [r3, #20]
 8007832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007836:	b29b      	uxth	r3, r3
 8007838:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800783c:	1d38      	adds	r0, r7, #4
 800783e:	6800      	ldr	r0, [r0, #0]
 8007840:	f000 feaf 	bl	80085a2 <USB_WritePMA>
 8007844:	e17e      	b.n	8007b44 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007846:	463b      	mov	r3, r7
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	785b      	ldrb	r3, [r3, #1]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d16f      	bne.n	8007930 <USB_EPStartXfer+0xbf8>
 8007850:	1d3b      	adds	r3, r7, #4
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007858:	1d3b      	adds	r3, r7, #4
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007860:	b29b      	uxth	r3, r3
 8007862:	461a      	mov	r2, r3
 8007864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007868:	4413      	add	r3, r2
 800786a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800786e:	463b      	mov	r3, r7
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	011a      	lsls	r2, r3, #4
 8007876:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800787a:	4413      	add	r3, r2
 800787c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d116      	bne.n	80078ba <USB_EPStartXfer+0xb82>
 800788c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	b29b      	uxth	r3, r3
 8007894:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007898:	b29a      	uxth	r2, r3
 800789a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800789e:	801a      	strh	r2, [r3, #0]
 80078a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078b6:	801a      	strh	r2, [r3, #0]
 80078b8:	e05f      	b.n	800797a <USB_EPStartXfer+0xc42>
 80078ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078be:	2b3e      	cmp	r3, #62	; 0x3e
 80078c0:	d818      	bhi.n	80078f4 <USB_EPStartXfer+0xbbc>
 80078c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c6:	085b      	lsrs	r3, r3, #1
 80078c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80078cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d004      	beq.n	80078e2 <USB_EPStartXfer+0xbaa>
 80078d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80078dc:	3301      	adds	r3, #1
 80078de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80078e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	029b      	lsls	r3, r3, #10
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078f0:	801a      	strh	r2, [r3, #0]
 80078f2:	e042      	b.n	800797a <USB_EPStartXfer+0xc42>
 80078f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f8:	095b      	lsrs	r3, r3, #5
 80078fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80078fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007902:	f003 031f 	and.w	r3, r3, #31
 8007906:	2b00      	cmp	r3, #0
 8007908:	d104      	bne.n	8007914 <USB_EPStartXfer+0xbdc>
 800790a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800790e:	3b01      	subs	r3, #1
 8007910:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007914:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007918:	b29b      	uxth	r3, r3
 800791a:	029b      	lsls	r3, r3, #10
 800791c:	b29b      	uxth	r3, r3
 800791e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007926:	b29a      	uxth	r2, r3
 8007928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800792c:	801a      	strh	r2, [r3, #0]
 800792e:	e024      	b.n	800797a <USB_EPStartXfer+0xc42>
 8007930:	463b      	mov	r3, r7
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	785b      	ldrb	r3, [r3, #1]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d11f      	bne.n	800797a <USB_EPStartXfer+0xc42>
 800793a:	1d3b      	adds	r3, r7, #4
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007942:	1d3b      	adds	r3, r7, #4
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800794a:	b29b      	uxth	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007952:	4413      	add	r3, r2
 8007954:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007958:	463b      	mov	r3, r7
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	011a      	lsls	r2, r3, #4
 8007960:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007964:	4413      	add	r3, r2
 8007966:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800796a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800796e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007972:	b29a      	uxth	r2, r3
 8007974:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007978:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800797a:	463b      	mov	r3, r7
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	891b      	ldrh	r3, [r3, #8]
 8007980:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007984:	463b      	mov	r3, r7
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6959      	ldr	r1, [r3, #20]
 800798a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800798e:	b29b      	uxth	r3, r3
 8007990:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007994:	1d38      	adds	r0, r7, #4
 8007996:	6800      	ldr	r0, [r0, #0]
 8007998:	f000 fe03 	bl	80085a2 <USB_WritePMA>
          ep->xfer_buff += len;
 800799c:	463b      	mov	r3, r7
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695a      	ldr	r2, [r3, #20]
 80079a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a6:	441a      	add	r2, r3
 80079a8:	463b      	mov	r3, r7
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80079ae:	463b      	mov	r3, r7
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6a1a      	ldr	r2, [r3, #32]
 80079b4:	463b      	mov	r3, r7
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d909      	bls.n	80079d2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80079be:	463b      	mov	r3, r7
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6a1a      	ldr	r2, [r3, #32]
 80079c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c8:	1ad2      	subs	r2, r2, r3
 80079ca:	463b      	mov	r3, r7
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	621a      	str	r2, [r3, #32]
 80079d0:	e008      	b.n	80079e4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80079d2:	463b      	mov	r3, r7
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6a1b      	ldr	r3, [r3, #32]
 80079d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80079dc:	463b      	mov	r3, r7
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2200      	movs	r2, #0
 80079e2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80079e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 80ab 	beq.w	8007b44 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079ee:	1d3b      	adds	r3, r7, #4
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079f6:	463b      	mov	r3, r7
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	785b      	ldrb	r3, [r3, #1]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d16f      	bne.n	8007ae0 <USB_EPStartXfer+0xda8>
 8007a00:	1d3b      	adds	r3, r7, #4
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a08:	1d3b      	adds	r3, r7, #4
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	461a      	mov	r2, r3
 8007a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a18:	4413      	add	r3, r2
 8007a1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a1e:	463b      	mov	r3, r7
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	011a      	lsls	r2, r3, #4
 8007a26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d116      	bne.n	8007a6a <USB_EPStartXfer+0xd32>
 8007a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a4e:	801a      	strh	r2, [r3, #0]
 8007a50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a66:	801a      	strh	r2, [r3, #0]
 8007a68:	e05b      	b.n	8007b22 <USB_EPStartXfer+0xdea>
 8007a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a6e:	2b3e      	cmp	r3, #62	; 0x3e
 8007a70:	d818      	bhi.n	8007aa4 <USB_EPStartXfer+0xd6c>
 8007a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a76:	085b      	lsrs	r3, r3, #1
 8007a78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d004      	beq.n	8007a92 <USB_EPStartXfer+0xd5a>
 8007a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	029b      	lsls	r3, r3, #10
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007aa0:	801a      	strh	r2, [r3, #0]
 8007aa2:	e03e      	b.n	8007b22 <USB_EPStartXfer+0xdea>
 8007aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa8:	095b      	lsrs	r3, r3, #5
 8007aaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab2:	f003 031f 	and.w	r3, r3, #31
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d104      	bne.n	8007ac4 <USB_EPStartXfer+0xd8c>
 8007aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	029b      	lsls	r3, r3, #10
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007adc:	801a      	strh	r2, [r3, #0]
 8007ade:	e020      	b.n	8007b22 <USB_EPStartXfer+0xdea>
 8007ae0:	463b      	mov	r3, r7
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	785b      	ldrb	r3, [r3, #1]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d11b      	bne.n	8007b22 <USB_EPStartXfer+0xdea>
 8007aea:	1d3b      	adds	r3, r7, #4
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	461a      	mov	r2, r3
 8007af6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007afa:	4413      	add	r3, r2
 8007afc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b00:	463b      	mov	r3, r7
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	011a      	lsls	r2, r3, #4
 8007b08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007b22:	463b      	mov	r3, r7
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	895b      	ldrh	r3, [r3, #10]
 8007b28:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b2c:	463b      	mov	r3, r7
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6959      	ldr	r1, [r3, #20]
 8007b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b3c:	1d38      	adds	r0, r7, #4
 8007b3e:	6800      	ldr	r0, [r0, #0]
 8007b40:	f000 fd2f 	bl	80085a2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b44:	1d3b      	adds	r3, r7, #4
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	463b      	mov	r3, r7
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	f107 020a 	add.w	r2, r7, #10
 8007b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b62:	8013      	strh	r3, [r2, #0]
 8007b64:	f107 030a 	add.w	r3, r7, #10
 8007b68:	f107 020a 	add.w	r2, r7, #10
 8007b6c:	8812      	ldrh	r2, [r2, #0]
 8007b6e:	f082 0210 	eor.w	r2, r2, #16
 8007b72:	801a      	strh	r2, [r3, #0]
 8007b74:	f107 030a 	add.w	r3, r7, #10
 8007b78:	f107 020a 	add.w	r2, r7, #10
 8007b7c:	8812      	ldrh	r2, [r2, #0]
 8007b7e:	f082 0220 	eor.w	r2, r2, #32
 8007b82:	801a      	strh	r2, [r3, #0]
 8007b84:	1d3b      	adds	r3, r7, #4
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	463b      	mov	r3, r7
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	441a      	add	r2, r3
 8007b92:	f107 030a 	add.w	r3, r7, #10
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	8013      	strh	r3, [r2, #0]
 8007bac:	e3b5      	b.n	800831a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007bae:	463b      	mov	r3, r7
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	7b1b      	ldrb	r3, [r3, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f040 8090 	bne.w	8007cda <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007bba:	463b      	mov	r3, r7
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	699a      	ldr	r2, [r3, #24]
 8007bc0:	463b      	mov	r3, r7
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d90e      	bls.n	8007be8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8007bca:	463b      	mov	r3, r7
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007bd4:	463b      	mov	r3, r7
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	699a      	ldr	r2, [r3, #24]
 8007bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bde:	1ad2      	subs	r2, r2, r3
 8007be0:	463b      	mov	r3, r7
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	619a      	str	r2, [r3, #24]
 8007be6:	e008      	b.n	8007bfa <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8007be8:	463b      	mov	r3, r7
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007bf2:	463b      	mov	r3, r7
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007bfa:	1d3b      	adds	r3, r7, #4
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c02:	1d3b      	adds	r3, r7, #4
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c12:	4413      	add	r3, r2
 8007c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c18:	463b      	mov	r3, r7
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	011a      	lsls	r2, r3, #4
 8007c20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c24:	4413      	add	r3, r2
 8007c26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d116      	bne.n	8007c64 <USB_EPStartXfer+0xf2c>
 8007c36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c48:	801a      	strh	r2, [r3, #0]
 8007c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c60:	801a      	strh	r2, [r3, #0]
 8007c62:	e32c      	b.n	80082be <USB_EPStartXfer+0x1586>
 8007c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c68:	2b3e      	cmp	r3, #62	; 0x3e
 8007c6a:	d818      	bhi.n	8007c9e <USB_EPStartXfer+0xf66>
 8007c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c70:	085b      	lsrs	r3, r3, #1
 8007c72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d004      	beq.n	8007c8c <USB_EPStartXfer+0xf54>
 8007c82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007c86:	3301      	adds	r3, #1
 8007c88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007c8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	029b      	lsls	r3, r3, #10
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c9a:	801a      	strh	r2, [r3, #0]
 8007c9c:	e30f      	b.n	80082be <USB_EPStartXfer+0x1586>
 8007c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca2:	095b      	lsrs	r3, r3, #5
 8007ca4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cac:	f003 031f 	and.w	r3, r3, #31
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d104      	bne.n	8007cbe <USB_EPStartXfer+0xf86>
 8007cb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007cbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	029b      	lsls	r3, r3, #10
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cd6:	801a      	strh	r2, [r3, #0]
 8007cd8:	e2f1      	b.n	80082be <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007cda:	463b      	mov	r3, r7
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	78db      	ldrb	r3, [r3, #3]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	f040 818f 	bne.w	8008004 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	785b      	ldrb	r3, [r3, #1]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d175      	bne.n	8007ddc <USB_EPStartXfer+0x10a4>
 8007cf0:	1d3b      	adds	r3, r7, #4
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007cf8:	1d3b      	adds	r3, r7, #4
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	461a      	mov	r2, r3
 8007d04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d08:	4413      	add	r3, r2
 8007d0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d0e:	463b      	mov	r3, r7
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	011a      	lsls	r2, r3, #4
 8007d16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d24:	463b      	mov	r3, r7
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d116      	bne.n	8007d5c <USB_EPStartXfer+0x1024>
 8007d2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d40:	801a      	strh	r2, [r3, #0]
 8007d42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d46:	881b      	ldrh	r3, [r3, #0]
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d58:	801a      	strh	r2, [r3, #0]
 8007d5a:	e065      	b.n	8007e28 <USB_EPStartXfer+0x10f0>
 8007d5c:	463b      	mov	r3, r7
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	2b3e      	cmp	r3, #62	; 0x3e
 8007d64:	d81a      	bhi.n	8007d9c <USB_EPStartXfer+0x1064>
 8007d66:	463b      	mov	r3, r7
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	085b      	lsrs	r3, r3, #1
 8007d6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d72:	463b      	mov	r3, r7
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d004      	beq.n	8007d8a <USB_EPStartXfer+0x1052>
 8007d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d84:	3301      	adds	r3, #1
 8007d86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	029b      	lsls	r3, r3, #10
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d98:	801a      	strh	r2, [r3, #0]
 8007d9a:	e045      	b.n	8007e28 <USB_EPStartXfer+0x10f0>
 8007d9c:	463b      	mov	r3, r7
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	095b      	lsrs	r3, r3, #5
 8007da4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007da8:	463b      	mov	r3, r7
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f003 031f 	and.w	r3, r3, #31
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d104      	bne.n	8007dc0 <USB_EPStartXfer+0x1088>
 8007db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	029b      	lsls	r3, r3, #10
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dd8:	801a      	strh	r2, [r3, #0]
 8007dda:	e025      	b.n	8007e28 <USB_EPStartXfer+0x10f0>
 8007ddc:	463b      	mov	r3, r7
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	785b      	ldrb	r3, [r3, #1]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d120      	bne.n	8007e28 <USB_EPStartXfer+0x10f0>
 8007de6:	1d3b      	adds	r3, r7, #4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007dee:	1d3b      	adds	r3, r7, #4
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	461a      	mov	r2, r3
 8007dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dfe:	4413      	add	r3, r2
 8007e00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e04:	463b      	mov	r3, r7
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	011a      	lsls	r2, r3, #4
 8007e0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e10:	4413      	add	r3, r2
 8007e12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007e26:	801a      	strh	r2, [r3, #0]
 8007e28:	1d3b      	adds	r3, r7, #4
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e30:	463b      	mov	r3, r7
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	785b      	ldrb	r3, [r3, #1]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d175      	bne.n	8007f26 <USB_EPStartXfer+0x11ee>
 8007e3a:	1d3b      	adds	r3, r7, #4
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007e42:	1d3b      	adds	r3, r7, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e52:	4413      	add	r3, r2
 8007e54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007e58:	463b      	mov	r3, r7
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	011a      	lsls	r2, r3, #4
 8007e60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e64:	4413      	add	r3, r2
 8007e66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e6e:	463b      	mov	r3, r7
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d116      	bne.n	8007ea6 <USB_EPStartXfer+0x116e>
 8007e78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e8a:	801a      	strh	r2, [r3, #0]
 8007e8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ea2:	801a      	strh	r2, [r3, #0]
 8007ea4:	e061      	b.n	8007f6a <USB_EPStartXfer+0x1232>
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	2b3e      	cmp	r3, #62	; 0x3e
 8007eae:	d81a      	bhi.n	8007ee6 <USB_EPStartXfer+0x11ae>
 8007eb0:	463b      	mov	r3, r7
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	085b      	lsrs	r3, r3, #1
 8007eb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ebc:	463b      	mov	r3, r7
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d004      	beq.n	8007ed4 <USB_EPStartXfer+0x119c>
 8007eca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ece:	3301      	adds	r3, #1
 8007ed0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ed4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	029b      	lsls	r3, r3, #10
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ee2:	801a      	strh	r2, [r3, #0]
 8007ee4:	e041      	b.n	8007f6a <USB_EPStartXfer+0x1232>
 8007ee6:	463b      	mov	r3, r7
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	095b      	lsrs	r3, r3, #5
 8007eee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ef2:	463b      	mov	r3, r7
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	f003 031f 	and.w	r3, r3, #31
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d104      	bne.n	8007f0a <USB_EPStartXfer+0x11d2>
 8007f00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f04:	3b01      	subs	r3, #1
 8007f06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	029b      	lsls	r3, r3, #10
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f22:	801a      	strh	r2, [r3, #0]
 8007f24:	e021      	b.n	8007f6a <USB_EPStartXfer+0x1232>
 8007f26:	463b      	mov	r3, r7
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	785b      	ldrb	r3, [r3, #1]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d11c      	bne.n	8007f6a <USB_EPStartXfer+0x1232>
 8007f30:	1d3b      	adds	r3, r7, #4
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f40:	4413      	add	r3, r2
 8007f42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f46:	463b      	mov	r3, r7
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	011a      	lsls	r2, r3, #4
 8007f4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f52:	4413      	add	r3, r2
 8007f54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f5c:	463b      	mov	r3, r7
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f68:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007f6a:	463b      	mov	r3, r7
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69db      	ldr	r3, [r3, #28]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 81a4 	beq.w	80082be <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007f76:	1d3b      	adds	r3, r7, #4
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	463b      	mov	r3, r7
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	881b      	ldrh	r3, [r3, #0]
 8007f86:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f8a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d005      	beq.n	8007fa2 <USB_EPStartXfer+0x126a>
 8007f96:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10d      	bne.n	8007fbe <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007fa2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f040 8187 	bne.w	80082be <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007fb0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f040 8180 	bne.w	80082be <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007fbe:	1d3b      	adds	r3, r7, #4
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	463b      	mov	r3, r7
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007fdc:	1d3b      	adds	r3, r7, #4
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	463b      	mov	r3, r7
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	441a      	add	r2, r3
 8007fea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ffa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	8013      	strh	r3, [r2, #0]
 8008002:	e15c      	b.n	80082be <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008004:	463b      	mov	r3, r7
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	78db      	ldrb	r3, [r3, #3]
 800800a:	2b01      	cmp	r3, #1
 800800c:	f040 8155 	bne.w	80082ba <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008010:	463b      	mov	r3, r7
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	699a      	ldr	r2, [r3, #24]
 8008016:	463b      	mov	r3, r7
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	429a      	cmp	r2, r3
 800801e:	d90e      	bls.n	800803e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8008020:	463b      	mov	r3, r7
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800802a:	463b      	mov	r3, r7
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	699a      	ldr	r2, [r3, #24]
 8008030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008034:	1ad2      	subs	r2, r2, r3
 8008036:	463b      	mov	r3, r7
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	619a      	str	r2, [r3, #24]
 800803c:	e008      	b.n	8008050 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800803e:	463b      	mov	r3, r7
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008048:	463b      	mov	r3, r7
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2200      	movs	r2, #0
 800804e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008050:	463b      	mov	r3, r7
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	785b      	ldrb	r3, [r3, #1]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d16f      	bne.n	800813a <USB_EPStartXfer+0x1402>
 800805a:	1d3b      	adds	r3, r7, #4
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008062:	1d3b      	adds	r3, r7, #4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800806a:	b29b      	uxth	r3, r3
 800806c:	461a      	mov	r2, r3
 800806e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008072:	4413      	add	r3, r2
 8008074:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008078:	463b      	mov	r3, r7
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	011a      	lsls	r2, r3, #4
 8008080:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008084:	4413      	add	r3, r2
 8008086:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800808a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800808e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d116      	bne.n	80080c4 <USB_EPStartXfer+0x138c>
 8008096:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	b29b      	uxth	r3, r3
 800809e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080a8:	801a      	strh	r2, [r3, #0]
 80080aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080ae:	881b      	ldrh	r3, [r3, #0]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080c0:	801a      	strh	r2, [r3, #0]
 80080c2:	e05f      	b.n	8008184 <USB_EPStartXfer+0x144c>
 80080c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c8:	2b3e      	cmp	r3, #62	; 0x3e
 80080ca:	d818      	bhi.n	80080fe <USB_EPStartXfer+0x13c6>
 80080cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d0:	085b      	lsrs	r3, r3, #1
 80080d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d004      	beq.n	80080ec <USB_EPStartXfer+0x13b4>
 80080e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080e6:	3301      	adds	r3, #1
 80080e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	029b      	lsls	r3, r3, #10
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080fa:	801a      	strh	r2, [r3, #0]
 80080fc:	e042      	b.n	8008184 <USB_EPStartXfer+0x144c>
 80080fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008102:	095b      	lsrs	r3, r3, #5
 8008104:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810c:	f003 031f 	and.w	r3, r3, #31
 8008110:	2b00      	cmp	r3, #0
 8008112:	d104      	bne.n	800811e <USB_EPStartXfer+0x13e6>
 8008114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008118:	3b01      	subs	r3, #1
 800811a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800811e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008122:	b29b      	uxth	r3, r3
 8008124:	029b      	lsls	r3, r3, #10
 8008126:	b29b      	uxth	r3, r3
 8008128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800812c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008130:	b29a      	uxth	r2, r3
 8008132:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008136:	801a      	strh	r2, [r3, #0]
 8008138:	e024      	b.n	8008184 <USB_EPStartXfer+0x144c>
 800813a:	463b      	mov	r3, r7
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	785b      	ldrb	r3, [r3, #1]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d11f      	bne.n	8008184 <USB_EPStartXfer+0x144c>
 8008144:	1d3b      	adds	r3, r7, #4
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800814c:	1d3b      	adds	r3, r7, #4
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008154:	b29b      	uxth	r3, r3
 8008156:	461a      	mov	r2, r3
 8008158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815c:	4413      	add	r3, r2
 800815e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008162:	463b      	mov	r3, r7
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	011a      	lsls	r2, r3, #4
 800816a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816e:	4413      	add	r3, r2
 8008170:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008174:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800817c:	b29a      	uxth	r2, r3
 800817e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008182:	801a      	strh	r2, [r3, #0]
 8008184:	1d3b      	adds	r3, r7, #4
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800818c:	463b      	mov	r3, r7
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	785b      	ldrb	r3, [r3, #1]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d16f      	bne.n	8008276 <USB_EPStartXfer+0x153e>
 8008196:	1d3b      	adds	r3, r7, #4
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800819e:	1d3b      	adds	r3, r7, #4
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	461a      	mov	r2, r3
 80081aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ae:	4413      	add	r3, r2
 80081b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80081b4:	463b      	mov	r3, r7
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	011a      	lsls	r2, r3, #4
 80081bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081c0:	4413      	add	r3, r2
 80081c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d116      	bne.n	8008200 <USB_EPStartXfer+0x14c8>
 80081d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081de:	b29a      	uxth	r2, r3
 80081e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081e4:	801a      	strh	r2, [r3, #0]
 80081e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081fc:	801a      	strh	r2, [r3, #0]
 80081fe:	e05e      	b.n	80082be <USB_EPStartXfer+0x1586>
 8008200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008204:	2b3e      	cmp	r3, #62	; 0x3e
 8008206:	d818      	bhi.n	800823a <USB_EPStartXfer+0x1502>
 8008208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800820c:	085b      	lsrs	r3, r3, #1
 800820e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	d004      	beq.n	8008228 <USB_EPStartXfer+0x14f0>
 800821e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008222:	3301      	adds	r3, #1
 8008224:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008228:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800822c:	b29b      	uxth	r3, r3
 800822e:	029b      	lsls	r3, r3, #10
 8008230:	b29a      	uxth	r2, r3
 8008232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008236:	801a      	strh	r2, [r3, #0]
 8008238:	e041      	b.n	80082be <USB_EPStartXfer+0x1586>
 800823a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008248:	f003 031f 	and.w	r3, r3, #31
 800824c:	2b00      	cmp	r3, #0
 800824e:	d104      	bne.n	800825a <USB_EPStartXfer+0x1522>
 8008250:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008254:	3b01      	subs	r3, #1
 8008256:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800825a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800825e:	b29b      	uxth	r3, r3
 8008260:	029b      	lsls	r3, r3, #10
 8008262:	b29b      	uxth	r3, r3
 8008264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800826c:	b29a      	uxth	r2, r3
 800826e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008272:	801a      	strh	r2, [r3, #0]
 8008274:	e023      	b.n	80082be <USB_EPStartXfer+0x1586>
 8008276:	463b      	mov	r3, r7
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	785b      	ldrb	r3, [r3, #1]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d11e      	bne.n	80082be <USB_EPStartXfer+0x1586>
 8008280:	1d3b      	adds	r3, r7, #4
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008288:	b29b      	uxth	r3, r3
 800828a:	461a      	mov	r2, r3
 800828c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008290:	4413      	add	r3, r2
 8008292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008296:	463b      	mov	r3, r7
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	011a      	lsls	r2, r3, #4
 800829e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a2:	4413      	add	r3, r2
 80082a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b6:	801a      	strh	r2, [r3, #0]
 80082b8:	e001      	b.n	80082be <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e02e      	b.n	800831c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082be:	1d3b      	adds	r3, r7, #4
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	463b      	mov	r3, r7
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80082dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80082e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082e4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80082e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80082ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082f0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80082f4:	1d3b      	adds	r3, r7, #4
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	463b      	mov	r3, r7
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	441a      	add	r2, r3
 8008302:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800830a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800830e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008316:	b29b      	uxth	r3, r3
 8008318:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008326:	b480      	push	{r7}
 8008328:	b085      	sub	sp, #20
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	785b      	ldrb	r3, [r3, #1]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d020      	beq.n	800837a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	881b      	ldrh	r3, [r3, #0]
 8008344:	b29b      	uxth	r3, r3
 8008346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800834a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800834e:	81bb      	strh	r3, [r7, #12]
 8008350:	89bb      	ldrh	r3, [r7, #12]
 8008352:	f083 0310 	eor.w	r3, r3, #16
 8008356:	81bb      	strh	r3, [r7, #12]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	441a      	add	r2, r3
 8008362:	89bb      	ldrh	r3, [r7, #12]
 8008364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800836c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008374:	b29b      	uxth	r3, r3
 8008376:	8013      	strh	r3, [r2, #0]
 8008378:	e01f      	b.n	80083ba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	b29b      	uxth	r3, r3
 8008388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800838c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008390:	81fb      	strh	r3, [r7, #14]
 8008392:	89fb      	ldrh	r3, [r7, #14]
 8008394:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008398:	81fb      	strh	r3, [r7, #14]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	441a      	add	r2, r3
 80083a4:	89fb      	ldrh	r3, [r7, #14]
 80083a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bc80      	pop	{r7}
 80083c4:	4770      	bx	lr

080083c6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b087      	sub	sp, #28
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	7b1b      	ldrb	r3, [r3, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f040 809d 	bne.w	8008514 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	785b      	ldrb	r3, [r3, #1]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d04c      	beq.n	800847c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	823b      	strh	r3, [r7, #16]
 80083f0:	8a3b      	ldrh	r3, [r7, #16]
 80083f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d01b      	beq.n	8008432 <USB_EPClearStall+0x6c>
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	b29b      	uxth	r3, r3
 8008408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800840c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008410:	81fb      	strh	r3, [r7, #14]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	441a      	add	r2, r3
 800841c:	89fb      	ldrh	r3, [r7, #14]
 800841e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800842a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800842e:	b29b      	uxth	r3, r3
 8008430:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	78db      	ldrb	r3, [r3, #3]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d06c      	beq.n	8008514 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	b29b      	uxth	r3, r3
 8008448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800844c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008450:	81bb      	strh	r3, [r7, #12]
 8008452:	89bb      	ldrh	r3, [r7, #12]
 8008454:	f083 0320 	eor.w	r3, r3, #32
 8008458:	81bb      	strh	r3, [r7, #12]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	441a      	add	r2, r3
 8008464:	89bb      	ldrh	r3, [r7, #12]
 8008466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800846a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800846e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008476:	b29b      	uxth	r3, r3
 8008478:	8013      	strh	r3, [r2, #0]
 800847a:	e04b      	b.n	8008514 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4413      	add	r3, r2
 8008486:	881b      	ldrh	r3, [r3, #0]
 8008488:	82fb      	strh	r3, [r7, #22]
 800848a:	8afb      	ldrh	r3, [r7, #22]
 800848c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d01b      	beq.n	80084cc <USB_EPClearStall+0x106>
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084aa:	82bb      	strh	r3, [r7, #20]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	441a      	add	r2, r3
 80084b6:	8abb      	ldrh	r3, [r7, #20]
 80084b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	b29b      	uxth	r3, r3
 80084da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e2:	827b      	strh	r3, [r7, #18]
 80084e4:	8a7b      	ldrh	r3, [r7, #18]
 80084e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084ea:	827b      	strh	r3, [r7, #18]
 80084ec:	8a7b      	ldrh	r3, [r7, #18]
 80084ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084f2:	827b      	strh	r3, [r7, #18]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	441a      	add	r2, r3
 80084fe:	8a7b      	ldrh	r3, [r7, #18]
 8008500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800850c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008510:	b29b      	uxth	r3, r3
 8008512:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	371c      	adds	r7, #28
 800851a:	46bd      	mov	sp, r7
 800851c:	bc80      	pop	{r7}
 800851e:	4770      	bx	lr

08008520 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800852c:	78fb      	ldrb	r3, [r7, #3]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d103      	bne.n	800853a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2280      	movs	r2, #128	; 0x80
 8008536:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	bc80      	pop	{r7}
 8008544:	4770      	bx	lr

08008546 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008546:	b480      	push	{r7}
 8008548:	b083      	sub	sp, #12
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	bc80      	pop	{r7}
 8008558:	4770      	bx	lr

0800855a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800855a:	b480      	push	{r7}
 800855c:	b083      	sub	sp, #12
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	bc80      	pop	{r7}
 800856c:	4770      	bx	lr

0800856e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800856e:	b480      	push	{r7}
 8008570:	b085      	sub	sp, #20
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800857c:	b29b      	uxth	r3, r3
 800857e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008580:	68fb      	ldr	r3, [r7, #12]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	bc80      	pop	{r7}
 800858a:	4770      	bx	lr

0800858c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr

080085a2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b08d      	sub	sp, #52	; 0x34
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	4611      	mov	r1, r2
 80085ae:	461a      	mov	r2, r3
 80085b0:	460b      	mov	r3, r1
 80085b2:	80fb      	strh	r3, [r7, #6]
 80085b4:	4613      	mov	r3, r2
 80085b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80085b8:	88bb      	ldrh	r3, [r7, #4]
 80085ba:	3301      	adds	r3, #1
 80085bc:	085b      	lsrs	r3, r3, #1
 80085be:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085c8:	88fb      	ldrh	r3, [r7, #6]
 80085ca:	005a      	lsls	r2, r3, #1
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085d4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085da:	e01e      	b.n	800861a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	3301      	adds	r3, #1
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	021b      	lsls	r3, r3, #8
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	461a      	mov	r2, r3
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008600:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008604:	3302      	adds	r3, #2
 8008606:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	3302      	adds	r3, #2
 800860c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	3301      	adds	r3, #1
 8008612:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008616:	3b01      	subs	r3, #1
 8008618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1dd      	bne.n	80085dc <USB_WritePMA+0x3a>
  }
}
 8008620:	bf00      	nop
 8008622:	bf00      	nop
 8008624:	3734      	adds	r7, #52	; 0x34
 8008626:	46bd      	mov	sp, r7
 8008628:	bc80      	pop	{r7}
 800862a:	4770      	bx	lr

0800862c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800862c:	b480      	push	{r7}
 800862e:	b08b      	sub	sp, #44	; 0x2c
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	4611      	mov	r1, r2
 8008638:	461a      	mov	r2, r3
 800863a:	460b      	mov	r3, r1
 800863c:	80fb      	strh	r3, [r7, #6]
 800863e:	4613      	mov	r3, r2
 8008640:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008642:	88bb      	ldrh	r3, [r7, #4]
 8008644:	085b      	lsrs	r3, r3, #1
 8008646:	b29b      	uxth	r3, r3
 8008648:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008652:	88fb      	ldrh	r3, [r7, #6]
 8008654:	005a      	lsls	r2, r3, #1
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800865e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
 8008664:	e01b      	b.n	800869e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008666:	6a3b      	ldr	r3, [r7, #32]
 8008668:	881b      	ldrh	r3, [r3, #0]
 800866a:	b29b      	uxth	r3, r3
 800866c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	3302      	adds	r3, #2
 8008672:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	b2da      	uxtb	r2, r3
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	3301      	adds	r3, #1
 8008680:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	0a1b      	lsrs	r3, r3, #8
 8008686:	b2da      	uxtb	r2, r3
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	3301      	adds	r3, #1
 8008690:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	3302      	adds	r3, #2
 8008696:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	3b01      	subs	r3, #1
 800869c:	627b      	str	r3, [r7, #36]	; 0x24
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1e0      	bne.n	8008666 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80086a4:	88bb      	ldrh	r3, [r7, #4]
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d007      	beq.n	80086c0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	701a      	strb	r2, [r3, #0]
  }
}
 80086c0:	bf00      	nop
 80086c2:	372c      	adds	r7, #44	; 0x2c
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bc80      	pop	{r7}
 80086c8:	4770      	bx	lr

080086ca <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	460b      	mov	r3, r1
 80086d4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	7c1b      	ldrb	r3, [r3, #16]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d115      	bne.n	800870e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80086e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086e6:	2202      	movs	r2, #2
 80086e8:	2181      	movs	r1, #129	; 0x81
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f004 fddd 	bl	800d2aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086fa:	2202      	movs	r2, #2
 80086fc:	2101      	movs	r1, #1
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f004 fdd3 	bl	800d2aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800870c:	e012      	b.n	8008734 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800870e:	2340      	movs	r3, #64	; 0x40
 8008710:	2202      	movs	r2, #2
 8008712:	2181      	movs	r1, #129	; 0x81
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f004 fdc8 	bl	800d2aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008720:	2340      	movs	r3, #64	; 0x40
 8008722:	2202      	movs	r2, #2
 8008724:	2101      	movs	r1, #1
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f004 fdbf 	bl	800d2aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008734:	2308      	movs	r3, #8
 8008736:	2203      	movs	r2, #3
 8008738:	2182      	movs	r1, #130	; 0x82
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f004 fdb5 	bl	800d2aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008746:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800874a:	f004 fed5 	bl	800d4f8 <USBD_static_malloc>
 800874e:	4602      	mov	r2, r0
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875c:	2b00      	cmp	r3, #0
 800875e:	d102      	bne.n	8008766 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008760:	2301      	movs	r3, #1
 8008762:	73fb      	strb	r3, [r7, #15]
 8008764:	e026      	b.n	80087b4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800876c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2200      	movs	r2, #0
 800877c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2200      	movs	r2, #0
 8008784:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	7c1b      	ldrb	r3, [r3, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d109      	bne.n	80087a4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800879a:	2101      	movs	r1, #1
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f004 fe75 	bl	800d48c <USBD_LL_PrepareReceive>
 80087a2:	e007      	b.n	80087b4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087aa:	2340      	movs	r3, #64	; 0x40
 80087ac:	2101      	movs	r1, #1
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f004 fe6c 	bl	800d48c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	460b      	mov	r3, r1
 80087c8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80087ce:	2181      	movs	r1, #129	; 0x81
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f004 fd90 	bl	800d2f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80087dc:	2101      	movs	r1, #1
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f004 fd89 	bl	800d2f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80087ec:	2182      	movs	r1, #130	; 0x82
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f004 fd81 	bl	800d2f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00e      	beq.n	8008822 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008814:	4618      	mov	r0, r3
 8008816:	f004 fe7b 	bl	800d510 <USBD_static_free>
    pdev->pClassData = NULL;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008822:	7bfb      	ldrb	r3, [r7, #15]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b086      	sub	sp, #24
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800883e:	2300      	movs	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008852:	2b00      	cmp	r3, #0
 8008854:	d039      	beq.n	80088ca <USBD_CDC_Setup+0x9e>
 8008856:	2b20      	cmp	r3, #32
 8008858:	d17f      	bne.n	800895a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	88db      	ldrh	r3, [r3, #6]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d029      	beq.n	80088b6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	b25b      	sxtb	r3, r3
 8008868:	2b00      	cmp	r3, #0
 800886a:	da11      	bge.n	8008890 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008878:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	88d2      	ldrh	r2, [r2, #6]
 800887e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008880:	6939      	ldr	r1, [r7, #16]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	88db      	ldrh	r3, [r3, #6]
 8008886:	461a      	mov	r2, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 fa0a 	bl	8009ca2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800888e:	e06b      	b.n	8008968 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	785a      	ldrb	r2, [r3, #1]
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	88db      	ldrh	r3, [r3, #6]
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80088a6:	6939      	ldr	r1, [r7, #16]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	88db      	ldrh	r3, [r3, #6]
 80088ac:	461a      	mov	r2, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 fa25 	bl	8009cfe <USBD_CtlPrepareRx>
      break;
 80088b4:	e058      	b.n	8008968 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	7850      	ldrb	r0, [r2, #1]
 80088c2:	2200      	movs	r2, #0
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	4798      	blx	r3
      break;
 80088c8:	e04e      	b.n	8008968 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	785b      	ldrb	r3, [r3, #1]
 80088ce:	2b0b      	cmp	r3, #11
 80088d0:	d02e      	beq.n	8008930 <USBD_CDC_Setup+0x104>
 80088d2:	2b0b      	cmp	r3, #11
 80088d4:	dc38      	bgt.n	8008948 <USBD_CDC_Setup+0x11c>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d002      	beq.n	80088e0 <USBD_CDC_Setup+0xb4>
 80088da:	2b0a      	cmp	r3, #10
 80088dc:	d014      	beq.n	8008908 <USBD_CDC_Setup+0xdc>
 80088de:	e033      	b.n	8008948 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d107      	bne.n	80088fa <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80088ea:	f107 030c 	add.w	r3, r7, #12
 80088ee:	2202      	movs	r2, #2
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f001 f9d5 	bl	8009ca2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088f8:	e02e      	b.n	8008958 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 f966 	bl	8009bce <USBD_CtlError>
            ret = USBD_FAIL;
 8008902:	2302      	movs	r3, #2
 8008904:	75fb      	strb	r3, [r7, #23]
          break;
 8008906:	e027      	b.n	8008958 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890e:	2b03      	cmp	r3, #3
 8008910:	d107      	bne.n	8008922 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008912:	f107 030f 	add.w	r3, r7, #15
 8008916:	2201      	movs	r2, #1
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f001 f9c1 	bl	8009ca2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008920:	e01a      	b.n	8008958 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f001 f952 	bl	8009bce <USBD_CtlError>
            ret = USBD_FAIL;
 800892a:	2302      	movs	r3, #2
 800892c:	75fb      	strb	r3, [r7, #23]
          break;
 800892e:	e013      	b.n	8008958 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008936:	2b03      	cmp	r3, #3
 8008938:	d00d      	beq.n	8008956 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 f946 	bl	8009bce <USBD_CtlError>
            ret = USBD_FAIL;
 8008942:	2302      	movs	r3, #2
 8008944:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008946:	e006      	b.n	8008956 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f001 f93f 	bl	8009bce <USBD_CtlError>
          ret = USBD_FAIL;
 8008950:	2302      	movs	r3, #2
 8008952:	75fb      	strb	r3, [r7, #23]
          break;
 8008954:	e000      	b.n	8008958 <USBD_CDC_Setup+0x12c>
          break;
 8008956:	bf00      	nop
      }
      break;
 8008958:	e006      	b.n	8008968 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 f936 	bl	8009bce <USBD_CtlError>
      ret = USBD_FAIL;
 8008962:	2302      	movs	r3, #2
 8008964:	75fb      	strb	r3, [r7, #23]
      break;
 8008966:	bf00      	nop
  }

  return ret;
 8008968:	7dfb      	ldrb	r3, [r7, #23]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	460b      	mov	r3, r1
 800897c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008984:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800898c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008994:	2b00      	cmp	r3, #0
 8008996:	d03a      	beq.n	8008a0e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008998:	78fa      	ldrb	r2, [r7, #3]
 800899a:	6879      	ldr	r1, [r7, #4]
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	440b      	add	r3, r1
 80089a6:	331c      	adds	r3, #28
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d029      	beq.n	8008a02 <USBD_CDC_DataIn+0x90>
 80089ae:	78fa      	ldrb	r2, [r7, #3]
 80089b0:	6879      	ldr	r1, [r7, #4]
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	440b      	add	r3, r1
 80089bc:	331c      	adds	r3, #28
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	78f9      	ldrb	r1, [r7, #3]
 80089c2:	68b8      	ldr	r0, [r7, #8]
 80089c4:	460b      	mov	r3, r1
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	440b      	add	r3, r1
 80089ca:	00db      	lsls	r3, r3, #3
 80089cc:	4403      	add	r3, r0
 80089ce:	3338      	adds	r3, #56	; 0x38
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	fbb2 f1f3 	udiv	r1, r2, r3
 80089d6:	fb03 f301 	mul.w	r3, r3, r1
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d110      	bne.n	8008a02 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80089e0:	78fa      	ldrb	r2, [r7, #3]
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	4613      	mov	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	440b      	add	r3, r1
 80089ee:	331c      	adds	r3, #28
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80089f4:	78f9      	ldrb	r1, [r7, #3]
 80089f6:	2300      	movs	r3, #0
 80089f8:	2200      	movs	r2, #0
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f004 fd23 	bl	800d446 <USBD_LL_Transmit>
 8008a00:	e003      	b.n	8008a0a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	e000      	b.n	8008a10 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008a0e:	2302      	movs	r3, #2
  }
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a2a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a2c:	78fb      	ldrb	r3, [r7, #3]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f004 fd4e 	bl	800d4d2 <USBD_LL_GetRxDataSize>
 8008a36:	4602      	mov	r2, r0
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00d      	beq.n	8008a64 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4798      	blx	r3

    return USBD_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	e000      	b.n	8008a66 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008a64:	2302      	movs	r3, #2
  }
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d015      	beq.n	8008ab4 <USBD_CDC_EP0_RxReady+0x46>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008a8e:	2bff      	cmp	r3, #255	; 0xff
 8008a90:	d010      	beq.n	8008ab4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008aa0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008aa8:	b292      	uxth	r2, r2
 8008aaa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	22ff      	movs	r2, #255	; 0xff
 8008ab0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2243      	movs	r2, #67	; 0x43
 8008acc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008ace:	4b03      	ldr	r3, [pc, #12]	; (8008adc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bc80      	pop	{r7}
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	200000a0 	.word	0x200000a0

08008ae0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2243      	movs	r2, #67	; 0x43
 8008aec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008aee:	4b03      	ldr	r3, [pc, #12]	; (8008afc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bc80      	pop	{r7}
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	2000005c 	.word	0x2000005c

08008b00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2243      	movs	r2, #67	; 0x43
 8008b0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008b0e:	4b03      	ldr	r3, [pc, #12]	; (8008b1c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bc80      	pop	{r7}
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	200000e4 	.word	0x200000e4

08008b20 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	220a      	movs	r2, #10
 8008b2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008b2e:	4b03      	ldr	r3, [pc, #12]	; (8008b3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bc80      	pop	{r7}
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	20000018 	.word	0x20000018

08008b40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d005      	beq.n	8008b60 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bc80      	pop	{r7}
 8008b6a:	4770      	bx	lr

08008b6c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	4613      	mov	r3, r2
 8008b78:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b80:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b8a:	88fa      	ldrh	r2, [r7, #6]
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	371c      	adds	r7, #28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bc80      	pop	{r7}
 8008b9c:	4770      	bx	lr

08008b9e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b085      	sub	sp, #20
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bc80      	pop	{r7}
 8008bc2:	4770      	bx	lr

08008bc4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d01c      	beq.n	8008c18 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d115      	bne.n	8008c14 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	2181      	movs	r1, #129	; 0x81
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f004 fc1b 	bl	800d446 <USBD_LL_Transmit>

      return USBD_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	e002      	b.n	8008c1a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e000      	b.n	8008c1a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008c18:	2302      	movs	r3, #2
  }
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b084      	sub	sp, #16
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c30:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d017      	beq.n	8008c6c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	7c1b      	ldrb	r3, [r3, #16]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d109      	bne.n	8008c58 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c4e:	2101      	movs	r1, #1
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f004 fc1b 	bl	800d48c <USBD_LL_PrepareReceive>
 8008c56:	e007      	b.n	8008c68 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c5e:	2340      	movs	r3, #64	; 0x40
 8008c60:	2101      	movs	r1, #1
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f004 fc12 	bl	800d48c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	e000      	b.n	8008c6e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008c6c:	2302      	movs	r3, #2
  }
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	4613      	mov	r3, r2
 8008c82:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008c8a:	2302      	movs	r3, #2
 8008c8c:	e01a      	b.n	8008cc4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	79fa      	ldrb	r2, [r7, #7]
 8008cba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f004 fa7f 	bl	800d1c0 <USBD_LL_Init>

  return USBD_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d006      	beq.n	8008cee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73fb      	strb	r3, [r7, #15]
 8008cec:	e001      	b.n	8008cf2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008cee:	2302      	movs	r3, #2
 8008cf0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bc80      	pop	{r7}
 8008cfc:	4770      	bx	lr

08008cfe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f004 fab4 	bl	800d274 <USBD_LL_Start>

  return USBD_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b083      	sub	sp, #12
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bc80      	pop	{r7}
 8008d28:	4770      	bx	lr

08008d2a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b084      	sub	sp, #16
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	460b      	mov	r3, r1
 8008d34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008d36:	2302      	movs	r3, #2
 8008d38:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00c      	beq.n	8008d5e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	78fa      	ldrb	r2, [r7, #3]
 8008d4e:	4611      	mov	r1, r2
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	4798      	blx	r3
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	460b      	mov	r3, r1
 8008d72:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	78fa      	ldrb	r2, [r7, #3]
 8008d7e:	4611      	mov	r1, r2
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	4798      	blx	r3

  return USBD_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b082      	sub	sp, #8
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f000 fed8 	bl	8009b56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008db4:	461a      	mov	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008dc2:	f003 031f 	and.w	r3, r3, #31
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d016      	beq.n	8008df8 <USBD_LL_SetupStage+0x6a>
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d81c      	bhi.n	8008e08 <USBD_LL_SetupStage+0x7a>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <USBD_LL_SetupStage+0x4a>
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d008      	beq.n	8008de8 <USBD_LL_SetupStage+0x5a>
 8008dd6:	e017      	b.n	8008e08 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008dde:	4619      	mov	r1, r3
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f9cb 	bl	800917c <USBD_StdDevReq>
      break;
 8008de6:	e01a      	b.n	8008e1e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008dee:	4619      	mov	r1, r3
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fa2d 	bl	8009250 <USBD_StdItfReq>
      break;
 8008df6:	e012      	b.n	8008e1e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fa6d 	bl	80092e0 <USBD_StdEPReq>
      break;
 8008e06:	e00a      	b.n	8008e1e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008e0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f004 fa8c 	bl	800d334 <USBD_LL_StallEP>
      break;
 8008e1c:	bf00      	nop
  }

  return USBD_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	460b      	mov	r3, r1
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008e36:	7afb      	ldrb	r3, [r7, #11]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d14b      	bne.n	8008ed4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008e42:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d134      	bne.n	8008eb8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	68da      	ldr	r2, [r3, #12]
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d919      	bls.n	8008e8e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	1ad2      	subs	r2, r2, r3
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	68da      	ldr	r2, [r3, #12]
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d203      	bcs.n	8008e7c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	e002      	b.n	8008e82 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	461a      	mov	r2, r3
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 ff57 	bl	8009d3a <USBD_CtlContinueRx>
 8008e8c:	e038      	b.n	8008f00 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d105      	bne.n	8008eb0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f000 ff54 	bl	8009d5e <USBD_CtlSendStatus>
 8008eb6:	e023      	b.n	8008f00 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ebe:	2b05      	cmp	r3, #5
 8008ec0:	d11e      	bne.n	8008f00 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008eca:	2100      	movs	r1, #0
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f004 fa31 	bl	800d334 <USBD_LL_StallEP>
 8008ed2:	e015      	b.n	8008f00 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00d      	beq.n	8008efc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ee6:	2b03      	cmp	r3, #3
 8008ee8:	d108      	bne.n	8008efc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	7afa      	ldrb	r2, [r7, #11]
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	4798      	blx	r3
 8008efa:	e001      	b.n	8008f00 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008efc:	2302      	movs	r3, #2
 8008efe:	e000      	b.n	8008f02 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b086      	sub	sp, #24
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	60f8      	str	r0, [r7, #12]
 8008f12:	460b      	mov	r3, r1
 8008f14:	607a      	str	r2, [r7, #4]
 8008f16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f18:	7afb      	ldrb	r3, [r7, #11]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d17f      	bne.n	800901e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	3314      	adds	r3, #20
 8008f22:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d15c      	bne.n	8008fe8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	68da      	ldr	r2, [r3, #12]
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d915      	bls.n	8008f66 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	1ad2      	subs	r2, r2, r3
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	461a      	mov	r2, r3
 8008f50:	6879      	ldr	r1, [r7, #4]
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 fec1 	bl	8009cda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f58:	2300      	movs	r3, #0
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f004 fa94 	bl	800d48c <USBD_LL_PrepareReceive>
 8008f64:	e04e      	b.n	8009004 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	6912      	ldr	r2, [r2, #16]
 8008f6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f72:	fb02 f201 	mul.w	r2, r2, r1
 8008f76:	1a9b      	subs	r3, r3, r2
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d11c      	bne.n	8008fb6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	689a      	ldr	r2, [r3, #8]
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d316      	bcc.n	8008fb6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	689a      	ldr	r2, [r3, #8]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d20f      	bcs.n	8008fb6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f96:	2200      	movs	r2, #0
 8008f98:	2100      	movs	r1, #0
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f000 fe9d 	bl	8009cda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fa8:	2300      	movs	r3, #0
 8008faa:	2200      	movs	r2, #0
 8008fac:	2100      	movs	r1, #0
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f004 fa6c 	bl	800d48c <USBD_LL_PrepareReceive>
 8008fb4:	e026      	b.n	8009004 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00a      	beq.n	8008fd8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	d105      	bne.n	8008fd8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008fd8:	2180      	movs	r1, #128	; 0x80
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f004 f9aa 	bl	800d334 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 fecf 	bl	8009d84 <USBD_CtlReceiveStatus>
 8008fe6:	e00d      	b.n	8009004 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d004      	beq.n	8008ffc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d103      	bne.n	8009004 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008ffc:	2180      	movs	r1, #128	; 0x80
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f004 f998 	bl	800d334 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800900a:	2b01      	cmp	r3, #1
 800900c:	d11d      	bne.n	800904a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f7ff fe81 	bl	8008d16 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800901c:	e015      	b.n	800904a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00d      	beq.n	8009046 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009030:	2b03      	cmp	r3, #3
 8009032:	d108      	bne.n	8009046 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	7afa      	ldrb	r2, [r7, #11]
 800903e:	4611      	mov	r1, r2
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	4798      	blx	r3
 8009044:	e001      	b.n	800904a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009046:	2302      	movs	r3, #2
 8009048:	e000      	b.n	800904c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800905c:	2340      	movs	r3, #64	; 0x40
 800905e:	2200      	movs	r2, #0
 8009060:	2100      	movs	r1, #0
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f004 f921 	bl	800d2aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2240      	movs	r2, #64	; 0x40
 8009074:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009078:	2340      	movs	r3, #64	; 0x40
 800907a:	2200      	movs	r2, #0
 800907c:	2180      	movs	r1, #128	; 0x80
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f004 f913 	bl	800d2aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2240      	movs	r2, #64	; 0x40
 800908e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d009      	beq.n	80090cc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	6852      	ldr	r2, [r2, #4]
 80090c4:	b2d2      	uxtb	r2, r2
 80090c6:	4611      	mov	r1, r2
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	4798      	blx	r3
  }

  return USBD_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b083      	sub	sp, #12
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	460b      	mov	r3, r1
 80090e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	78fa      	ldrb	r2, [r7, #3]
 80090e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bc80      	pop	{r7}
 80090f2:	4770      	bx	lr

080090f4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2204      	movs	r2, #4
 800910c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	370c      	adds	r7, #12
 8009116:	46bd      	mov	sp, r7
 8009118:	bc80      	pop	{r7}
 800911a:	4770      	bx	lr

0800911c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800912a:	2b04      	cmp	r3, #4
 800912c:	d105      	bne.n	800913a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	bc80      	pop	{r7}
 8009144:	4770      	bx	lr

08009146 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009154:	2b03      	cmp	r3, #3
 8009156:	d10b      	bne.n	8009170 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d005      	beq.n	8009170 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800916a:	69db      	ldr	r3, [r3, #28]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009192:	2b40      	cmp	r3, #64	; 0x40
 8009194:	d005      	beq.n	80091a2 <USBD_StdDevReq+0x26>
 8009196:	2b40      	cmp	r3, #64	; 0x40
 8009198:	d84f      	bhi.n	800923a <USBD_StdDevReq+0xbe>
 800919a:	2b00      	cmp	r3, #0
 800919c:	d009      	beq.n	80091b2 <USBD_StdDevReq+0x36>
 800919e:	2b20      	cmp	r3, #32
 80091a0:	d14b      	bne.n	800923a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	4798      	blx	r3
      break;
 80091b0:	e048      	b.n	8009244 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	785b      	ldrb	r3, [r3, #1]
 80091b6:	2b09      	cmp	r3, #9
 80091b8:	d839      	bhi.n	800922e <USBD_StdDevReq+0xb2>
 80091ba:	a201      	add	r2, pc, #4	; (adr r2, 80091c0 <USBD_StdDevReq+0x44>)
 80091bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c0:	08009211 	.word	0x08009211
 80091c4:	08009225 	.word	0x08009225
 80091c8:	0800922f 	.word	0x0800922f
 80091cc:	0800921b 	.word	0x0800921b
 80091d0:	0800922f 	.word	0x0800922f
 80091d4:	080091f3 	.word	0x080091f3
 80091d8:	080091e9 	.word	0x080091e9
 80091dc:	0800922f 	.word	0x0800922f
 80091e0:	08009207 	.word	0x08009207
 80091e4:	080091fd 	.word	0x080091fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f9dc 	bl	80095a8 <USBD_GetDescriptor>
          break;
 80091f0:	e022      	b.n	8009238 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091f2:	6839      	ldr	r1, [r7, #0]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fb3f 	bl	8009878 <USBD_SetAddress>
          break;
 80091fa:	e01d      	b.n	8009238 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fb7e 	bl	8009900 <USBD_SetConfig>
          break;
 8009204:	e018      	b.n	8009238 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fc07 	bl	8009a1c <USBD_GetConfig>
          break;
 800920e:	e013      	b.n	8009238 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fc37 	bl	8009a86 <USBD_GetStatus>
          break;
 8009218:	e00e      	b.n	8009238 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fc65 	bl	8009aec <USBD_SetFeature>
          break;
 8009222:	e009      	b.n	8009238 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fc74 	bl	8009b14 <USBD_ClrFeature>
          break;
 800922c:	e004      	b.n	8009238 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fccc 	bl	8009bce <USBD_CtlError>
          break;
 8009236:	bf00      	nop
      }
      break;
 8009238:	e004      	b.n	8009244 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fcc6 	bl	8009bce <USBD_CtlError>
      break;
 8009242:	bf00      	nop
  }

  return ret;
 8009244:	7bfb      	ldrb	r3, [r7, #15]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop

08009250 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800925a:	2300      	movs	r3, #0
 800925c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009266:	2b40      	cmp	r3, #64	; 0x40
 8009268:	d005      	beq.n	8009276 <USBD_StdItfReq+0x26>
 800926a:	2b40      	cmp	r3, #64	; 0x40
 800926c:	d82e      	bhi.n	80092cc <USBD_StdItfReq+0x7c>
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <USBD_StdItfReq+0x26>
 8009272:	2b20      	cmp	r3, #32
 8009274:	d12a      	bne.n	80092cc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927c:	3b01      	subs	r3, #1
 800927e:	2b02      	cmp	r3, #2
 8009280:	d81d      	bhi.n	80092be <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	889b      	ldrh	r3, [r3, #4]
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b01      	cmp	r3, #1
 800928a:	d813      	bhi.n	80092b4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	4798      	blx	r3
 800929a:	4603      	mov	r3, r0
 800929c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	88db      	ldrh	r3, [r3, #6]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d110      	bne.n	80092c8 <USBD_StdItfReq+0x78>
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d10d      	bne.n	80092c8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fd56 	bl	8009d5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092b2:	e009      	b.n	80092c8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fc89 	bl	8009bce <USBD_CtlError>
          break;
 80092bc:	e004      	b.n	80092c8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 fc84 	bl	8009bce <USBD_CtlError>
          break;
 80092c6:	e000      	b.n	80092ca <USBD_StdItfReq+0x7a>
          break;
 80092c8:	bf00      	nop
      }
      break;
 80092ca:	e004      	b.n	80092d6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fc7d 	bl	8009bce <USBD_CtlError>
      break;
 80092d4:	bf00      	nop
  }

  return USBD_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	889b      	ldrh	r3, [r3, #4]
 80092f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092fc:	2b40      	cmp	r3, #64	; 0x40
 80092fe:	d007      	beq.n	8009310 <USBD_StdEPReq+0x30>
 8009300:	2b40      	cmp	r3, #64	; 0x40
 8009302:	f200 8146 	bhi.w	8009592 <USBD_StdEPReq+0x2b2>
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00a      	beq.n	8009320 <USBD_StdEPReq+0x40>
 800930a:	2b20      	cmp	r3, #32
 800930c:	f040 8141 	bne.w	8009592 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	4798      	blx	r3
      break;
 800931e:	e13d      	b.n	800959c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009328:	2b20      	cmp	r3, #32
 800932a:	d10a      	bne.n	8009342 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	4798      	blx	r3
 800933a:	4603      	mov	r3, r0
 800933c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800933e:	7bfb      	ldrb	r3, [r7, #15]
 8009340:	e12d      	b.n	800959e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	785b      	ldrb	r3, [r3, #1]
 8009346:	2b03      	cmp	r3, #3
 8009348:	d007      	beq.n	800935a <USBD_StdEPReq+0x7a>
 800934a:	2b03      	cmp	r3, #3
 800934c:	f300 811b 	bgt.w	8009586 <USBD_StdEPReq+0x2a6>
 8009350:	2b00      	cmp	r3, #0
 8009352:	d072      	beq.n	800943a <USBD_StdEPReq+0x15a>
 8009354:	2b01      	cmp	r3, #1
 8009356:	d03a      	beq.n	80093ce <USBD_StdEPReq+0xee>
 8009358:	e115      	b.n	8009586 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009360:	2b02      	cmp	r3, #2
 8009362:	d002      	beq.n	800936a <USBD_StdEPReq+0x8a>
 8009364:	2b03      	cmp	r3, #3
 8009366:	d015      	beq.n	8009394 <USBD_StdEPReq+0xb4>
 8009368:	e02b      	b.n	80093c2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800936a:	7bbb      	ldrb	r3, [r7, #14]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00c      	beq.n	800938a <USBD_StdEPReq+0xaa>
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	2b80      	cmp	r3, #128	; 0x80
 8009374:	d009      	beq.n	800938a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009376:	7bbb      	ldrb	r3, [r7, #14]
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f003 ffda 	bl	800d334 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009380:	2180      	movs	r1, #128	; 0x80
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f003 ffd6 	bl	800d334 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009388:	e020      	b.n	80093cc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 fc1e 	bl	8009bce <USBD_CtlError>
              break;
 8009392:	e01b      	b.n	80093cc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	885b      	ldrh	r3, [r3, #2]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10e      	bne.n	80093ba <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800939c:	7bbb      	ldrb	r3, [r7, #14]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00b      	beq.n	80093ba <USBD_StdEPReq+0xda>
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
 80093a4:	2b80      	cmp	r3, #128	; 0x80
 80093a6:	d008      	beq.n	80093ba <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	88db      	ldrh	r3, [r3, #6]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d104      	bne.n	80093ba <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f003 ffbd 	bl	800d334 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fccf 	bl	8009d5e <USBD_CtlSendStatus>

              break;
 80093c0:	e004      	b.n	80093cc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fc02 	bl	8009bce <USBD_CtlError>
              break;
 80093ca:	bf00      	nop
          }
          break;
 80093cc:	e0e0      	b.n	8009590 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d002      	beq.n	80093de <USBD_StdEPReq+0xfe>
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d015      	beq.n	8009408 <USBD_StdEPReq+0x128>
 80093dc:	e026      	b.n	800942c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093de:	7bbb      	ldrb	r3, [r7, #14]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00c      	beq.n	80093fe <USBD_StdEPReq+0x11e>
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2b80      	cmp	r3, #128	; 0x80
 80093e8:	d009      	beq.n	80093fe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f003 ffa0 	bl	800d334 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80093f4:	2180      	movs	r1, #128	; 0x80
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f003 ff9c 	bl	800d334 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093fc:	e01c      	b.n	8009438 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fbe4 	bl	8009bce <USBD_CtlError>
              break;
 8009406:	e017      	b.n	8009438 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	885b      	ldrh	r3, [r3, #2]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d112      	bne.n	8009436 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009410:	7bbb      	ldrb	r3, [r7, #14]
 8009412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009416:	2b00      	cmp	r3, #0
 8009418:	d004      	beq.n	8009424 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800941a:	7bbb      	ldrb	r3, [r7, #14]
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f003 ffa7 	bl	800d372 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fc9a 	bl	8009d5e <USBD_CtlSendStatus>
              }
              break;
 800942a:	e004      	b.n	8009436 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fbcd 	bl	8009bce <USBD_CtlError>
              break;
 8009434:	e000      	b.n	8009438 <USBD_StdEPReq+0x158>
              break;
 8009436:	bf00      	nop
          }
          break;
 8009438:	e0aa      	b.n	8009590 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009440:	2b02      	cmp	r3, #2
 8009442:	d002      	beq.n	800944a <USBD_StdEPReq+0x16a>
 8009444:	2b03      	cmp	r3, #3
 8009446:	d032      	beq.n	80094ae <USBD_StdEPReq+0x1ce>
 8009448:	e097      	b.n	800957a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d007      	beq.n	8009460 <USBD_StdEPReq+0x180>
 8009450:	7bbb      	ldrb	r3, [r7, #14]
 8009452:	2b80      	cmp	r3, #128	; 0x80
 8009454:	d004      	beq.n	8009460 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fbb8 	bl	8009bce <USBD_CtlError>
                break;
 800945e:	e091      	b.n	8009584 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009464:	2b00      	cmp	r3, #0
 8009466:	da0b      	bge.n	8009480 <USBD_StdEPReq+0x1a0>
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800946e:	4613      	mov	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	3310      	adds	r3, #16
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	4413      	add	r3, r2
 800947c:	3304      	adds	r3, #4
 800947e:	e00b      	b.n	8009498 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009486:	4613      	mov	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	4413      	add	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	4413      	add	r3, r2
 8009496:	3304      	adds	r3, #4
 8009498:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2200      	movs	r2, #0
 800949e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2202      	movs	r2, #2
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fbfb 	bl	8009ca2 <USBD_CtlSendData>
              break;
 80094ac:	e06a      	b.n	8009584 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	da11      	bge.n	80094da <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	f003 020f 	and.w	r2, r3, #15
 80094bc:	6879      	ldr	r1, [r7, #4]
 80094be:	4613      	mov	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	440b      	add	r3, r1
 80094c8:	3318      	adds	r3, #24
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d117      	bne.n	8009500 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fb7b 	bl	8009bce <USBD_CtlError>
                  break;
 80094d8:	e054      	b.n	8009584 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80094da:	7bbb      	ldrb	r3, [r7, #14]
 80094dc:	f003 020f 	and.w	r2, r3, #15
 80094e0:	6879      	ldr	r1, [r7, #4]
 80094e2:	4613      	mov	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	440b      	add	r3, r1
 80094ec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d104      	bne.n	8009500 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fb68 	bl	8009bce <USBD_CtlError>
                  break;
 80094fe:	e041      	b.n	8009584 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009504:	2b00      	cmp	r3, #0
 8009506:	da0b      	bge.n	8009520 <USBD_StdEPReq+0x240>
 8009508:	7bbb      	ldrb	r3, [r7, #14]
 800950a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800950e:	4613      	mov	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	3310      	adds	r3, #16
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	4413      	add	r3, r2
 800951c:	3304      	adds	r3, #4
 800951e:	e00b      	b.n	8009538 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009520:	7bbb      	ldrb	r3, [r7, #14]
 8009522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009526:	4613      	mov	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	4413      	add	r3, r2
 8009536:	3304      	adds	r3, #4
 8009538:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800953a:	7bbb      	ldrb	r3, [r7, #14]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <USBD_StdEPReq+0x266>
 8009540:	7bbb      	ldrb	r3, [r7, #14]
 8009542:	2b80      	cmp	r3, #128	; 0x80
 8009544:	d103      	bne.n	800954e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	e00e      	b.n	800956c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800954e:	7bbb      	ldrb	r3, [r7, #14]
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f003 ff2c 	bl	800d3b0 <USBD_LL_IsStallEP>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2201      	movs	r2, #1
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	e002      	b.n	800956c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2200      	movs	r2, #0
 800956a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2202      	movs	r2, #2
 8009570:	4619      	mov	r1, r3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fb95 	bl	8009ca2 <USBD_CtlSendData>
              break;
 8009578:	e004      	b.n	8009584 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fb26 	bl	8009bce <USBD_CtlError>
              break;
 8009582:	bf00      	nop
          }
          break;
 8009584:	e004      	b.n	8009590 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 fb20 	bl	8009bce <USBD_CtlError>
          break;
 800958e:	bf00      	nop
      }
      break;
 8009590:	e004      	b.n	800959c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fb1a 	bl	8009bce <USBD_CtlError>
      break;
 800959a:	bf00      	nop
  }

  return ret;
 800959c:	7bfb      	ldrb	r3, [r7, #15]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
	...

080095a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095b2:	2300      	movs	r3, #0
 80095b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095b6:	2300      	movs	r3, #0
 80095b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	885b      	ldrh	r3, [r3, #2]
 80095c2:	0a1b      	lsrs	r3, r3, #8
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	3b01      	subs	r3, #1
 80095c8:	2b06      	cmp	r3, #6
 80095ca:	f200 8128 	bhi.w	800981e <USBD_GetDescriptor+0x276>
 80095ce:	a201      	add	r2, pc, #4	; (adr r2, 80095d4 <USBD_GetDescriptor+0x2c>)
 80095d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d4:	080095f1 	.word	0x080095f1
 80095d8:	08009609 	.word	0x08009609
 80095dc:	08009649 	.word	0x08009649
 80095e0:	0800981f 	.word	0x0800981f
 80095e4:	0800981f 	.word	0x0800981f
 80095e8:	080097bf 	.word	0x080097bf
 80095ec:	080097eb 	.word	0x080097eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	7c12      	ldrb	r2, [r2, #16]
 80095fc:	f107 0108 	add.w	r1, r7, #8
 8009600:	4610      	mov	r0, r2
 8009602:	4798      	blx	r3
 8009604:	60f8      	str	r0, [r7, #12]
      break;
 8009606:	e112      	b.n	800982e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	7c1b      	ldrb	r3, [r3, #16]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d10d      	bne.n	800962c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009618:	f107 0208 	add.w	r2, r7, #8
 800961c:	4610      	mov	r0, r2
 800961e:	4798      	blx	r3
 8009620:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3301      	adds	r3, #1
 8009626:	2202      	movs	r2, #2
 8009628:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800962a:	e100      	b.n	800982e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009634:	f107 0208 	add.w	r2, r7, #8
 8009638:	4610      	mov	r0, r2
 800963a:	4798      	blx	r3
 800963c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3301      	adds	r3, #1
 8009642:	2202      	movs	r2, #2
 8009644:	701a      	strb	r2, [r3, #0]
      break;
 8009646:	e0f2      	b.n	800982e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	885b      	ldrh	r3, [r3, #2]
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b05      	cmp	r3, #5
 8009650:	f200 80ac 	bhi.w	80097ac <USBD_GetDescriptor+0x204>
 8009654:	a201      	add	r2, pc, #4	; (adr r2, 800965c <USBD_GetDescriptor+0xb4>)
 8009656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965a:	bf00      	nop
 800965c:	08009675 	.word	0x08009675
 8009660:	080096a9 	.word	0x080096a9
 8009664:	080096dd 	.word	0x080096dd
 8009668:	08009711 	.word	0x08009711
 800966c:	08009745 	.word	0x08009745
 8009670:	08009779 	.word	0x08009779
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00b      	beq.n	8009698 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	7c12      	ldrb	r2, [r2, #16]
 800968c:	f107 0108 	add.w	r1, r7, #8
 8009690:	4610      	mov	r0, r2
 8009692:	4798      	blx	r3
 8009694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009696:	e091      	b.n	80097bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fa97 	bl	8009bce <USBD_CtlError>
            err++;
 80096a0:	7afb      	ldrb	r3, [r7, #11]
 80096a2:	3301      	adds	r3, #1
 80096a4:	72fb      	strb	r3, [r7, #11]
          break;
 80096a6:	e089      	b.n	80097bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00b      	beq.n	80096cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	7c12      	ldrb	r2, [r2, #16]
 80096c0:	f107 0108 	add.w	r1, r7, #8
 80096c4:	4610      	mov	r0, r2
 80096c6:	4798      	blx	r3
 80096c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ca:	e077      	b.n	80097bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fa7d 	bl	8009bce <USBD_CtlError>
            err++;
 80096d4:	7afb      	ldrb	r3, [r7, #11]
 80096d6:	3301      	adds	r3, #1
 80096d8:	72fb      	strb	r3, [r7, #11]
          break;
 80096da:	e06f      	b.n	80097bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00b      	beq.n	8009700 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	7c12      	ldrb	r2, [r2, #16]
 80096f4:	f107 0108 	add.w	r1, r7, #8
 80096f8:	4610      	mov	r0, r2
 80096fa:	4798      	blx	r3
 80096fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096fe:	e05d      	b.n	80097bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fa63 	bl	8009bce <USBD_CtlError>
            err++;
 8009708:	7afb      	ldrb	r3, [r7, #11]
 800970a:	3301      	adds	r3, #1
 800970c:	72fb      	strb	r3, [r7, #11]
          break;
 800970e:	e055      	b.n	80097bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00b      	beq.n	8009734 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	7c12      	ldrb	r2, [r2, #16]
 8009728:	f107 0108 	add.w	r1, r7, #8
 800972c:	4610      	mov	r0, r2
 800972e:	4798      	blx	r3
 8009730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009732:	e043      	b.n	80097bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fa49 	bl	8009bce <USBD_CtlError>
            err++;
 800973c:	7afb      	ldrb	r3, [r7, #11]
 800973e:	3301      	adds	r3, #1
 8009740:	72fb      	strb	r3, [r7, #11]
          break;
 8009742:	e03b      	b.n	80097bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800974a:	695b      	ldr	r3, [r3, #20]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00b      	beq.n	8009768 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	7c12      	ldrb	r2, [r2, #16]
 800975c:	f107 0108 	add.w	r1, r7, #8
 8009760:	4610      	mov	r0, r2
 8009762:	4798      	blx	r3
 8009764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009766:	e029      	b.n	80097bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fa2f 	bl	8009bce <USBD_CtlError>
            err++;
 8009770:	7afb      	ldrb	r3, [r7, #11]
 8009772:	3301      	adds	r3, #1
 8009774:	72fb      	strb	r3, [r7, #11]
          break;
 8009776:	e021      	b.n	80097bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00b      	beq.n	800979c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	7c12      	ldrb	r2, [r2, #16]
 8009790:	f107 0108 	add.w	r1, r7, #8
 8009794:	4610      	mov	r0, r2
 8009796:	4798      	blx	r3
 8009798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800979a:	e00f      	b.n	80097bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fa15 	bl	8009bce <USBD_CtlError>
            err++;
 80097a4:	7afb      	ldrb	r3, [r7, #11]
 80097a6:	3301      	adds	r3, #1
 80097a8:	72fb      	strb	r3, [r7, #11]
          break;
 80097aa:	e007      	b.n	80097bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fa0d 	bl	8009bce <USBD_CtlError>
          err++;
 80097b4:	7afb      	ldrb	r3, [r7, #11]
 80097b6:	3301      	adds	r3, #1
 80097b8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80097ba:	e038      	b.n	800982e <USBD_GetDescriptor+0x286>
 80097bc:	e037      	b.n	800982e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	7c1b      	ldrb	r3, [r3, #16]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d109      	bne.n	80097da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ce:	f107 0208 	add.w	r2, r7, #8
 80097d2:	4610      	mov	r0, r2
 80097d4:	4798      	blx	r3
 80097d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097d8:	e029      	b.n	800982e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f9f6 	bl	8009bce <USBD_CtlError>
        err++;
 80097e2:	7afb      	ldrb	r3, [r7, #11]
 80097e4:	3301      	adds	r3, #1
 80097e6:	72fb      	strb	r3, [r7, #11]
      break;
 80097e8:	e021      	b.n	800982e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	7c1b      	ldrb	r3, [r3, #16]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10d      	bne.n	800980e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fa:	f107 0208 	add.w	r2, r7, #8
 80097fe:	4610      	mov	r0, r2
 8009800:	4798      	blx	r3
 8009802:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	3301      	adds	r3, #1
 8009808:	2207      	movs	r2, #7
 800980a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800980c:	e00f      	b.n	800982e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f9dc 	bl	8009bce <USBD_CtlError>
        err++;
 8009816:	7afb      	ldrb	r3, [r7, #11]
 8009818:	3301      	adds	r3, #1
 800981a:	72fb      	strb	r3, [r7, #11]
      break;
 800981c:	e007      	b.n	800982e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f9d4 	bl	8009bce <USBD_CtlError>
      err++;
 8009826:	7afb      	ldrb	r3, [r7, #11]
 8009828:	3301      	adds	r3, #1
 800982a:	72fb      	strb	r3, [r7, #11]
      break;
 800982c:	bf00      	nop
  }

  if (err != 0U)
 800982e:	7afb      	ldrb	r3, [r7, #11]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d11c      	bne.n	800986e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009834:	893b      	ldrh	r3, [r7, #8]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d011      	beq.n	800985e <USBD_GetDescriptor+0x2b6>
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	88db      	ldrh	r3, [r3, #6]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00d      	beq.n	800985e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	88da      	ldrh	r2, [r3, #6]
 8009846:	893b      	ldrh	r3, [r7, #8]
 8009848:	4293      	cmp	r3, r2
 800984a:	bf28      	it	cs
 800984c:	4613      	movcs	r3, r2
 800984e:	b29b      	uxth	r3, r3
 8009850:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009852:	893b      	ldrh	r3, [r7, #8]
 8009854:	461a      	mov	r2, r3
 8009856:	68f9      	ldr	r1, [r7, #12]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fa22 	bl	8009ca2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	88db      	ldrh	r3, [r3, #6]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d104      	bne.n	8009870 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fa79 	bl	8009d5e <USBD_CtlSendStatus>
 800986c:	e000      	b.n	8009870 <USBD_GetDescriptor+0x2c8>
    return;
 800986e:	bf00      	nop
    }
  }
}
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop

08009878 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	889b      	ldrh	r3, [r3, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d130      	bne.n	80098ec <USBD_SetAddress+0x74>
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	88db      	ldrh	r3, [r3, #6]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d12c      	bne.n	80098ec <USBD_SetAddress+0x74>
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	885b      	ldrh	r3, [r3, #2]
 8009896:	2b7f      	cmp	r3, #127	; 0x7f
 8009898:	d828      	bhi.n	80098ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	885b      	ldrh	r3, [r3, #2]
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	d104      	bne.n	80098ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f98b 	bl	8009bce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098b8:	e01d      	b.n	80098f6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	7bfa      	ldrb	r2, [r7, #15]
 80098be:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f003 fd9e 	bl	800d408 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fa46 	bl	8009d5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d004      	beq.n	80098e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2202      	movs	r2, #2
 80098dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098e0:	e009      	b.n	80098f6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ea:	e004      	b.n	80098f6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f96d 	bl	8009bce <USBD_CtlError>
  }
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
	...

08009900 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	885b      	ldrh	r3, [r3, #2]
 800990e:	b2da      	uxtb	r2, r3
 8009910:	4b41      	ldr	r3, [pc, #260]	; (8009a18 <USBD_SetConfig+0x118>)
 8009912:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009914:	4b40      	ldr	r3, [pc, #256]	; (8009a18 <USBD_SetConfig+0x118>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d904      	bls.n	8009926 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f955 	bl	8009bce <USBD_CtlError>
 8009924:	e075      	b.n	8009a12 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800992c:	2b02      	cmp	r3, #2
 800992e:	d002      	beq.n	8009936 <USBD_SetConfig+0x36>
 8009930:	2b03      	cmp	r3, #3
 8009932:	d023      	beq.n	800997c <USBD_SetConfig+0x7c>
 8009934:	e062      	b.n	80099fc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009936:	4b38      	ldr	r3, [pc, #224]	; (8009a18 <USBD_SetConfig+0x118>)
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d01a      	beq.n	8009974 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800993e:	4b36      	ldr	r3, [pc, #216]	; (8009a18 <USBD_SetConfig+0x118>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	461a      	mov	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2203      	movs	r2, #3
 800994c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009950:	4b31      	ldr	r3, [pc, #196]	; (8009a18 <USBD_SetConfig+0x118>)
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7ff f9e7 	bl	8008d2a <USBD_SetClassConfig>
 800995c:	4603      	mov	r3, r0
 800995e:	2b02      	cmp	r3, #2
 8009960:	d104      	bne.n	800996c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f932 	bl	8009bce <USBD_CtlError>
            return;
 800996a:	e052      	b.n	8009a12 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 f9f6 	bl	8009d5e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009972:	e04e      	b.n	8009a12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f9f2 	bl	8009d5e <USBD_CtlSendStatus>
        break;
 800997a:	e04a      	b.n	8009a12 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800997c:	4b26      	ldr	r3, [pc, #152]	; (8009a18 <USBD_SetConfig+0x118>)
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d112      	bne.n	80099aa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800998c:	4b22      	ldr	r3, [pc, #136]	; (8009a18 <USBD_SetConfig+0x118>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	461a      	mov	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009996:	4b20      	ldr	r3, [pc, #128]	; (8009a18 <USBD_SetConfig+0x118>)
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7ff f9e3 	bl	8008d68 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 f9db 	bl	8009d5e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80099a8:	e033      	b.n	8009a12 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80099aa:	4b1b      	ldr	r3, [pc, #108]	; (8009a18 <USBD_SetConfig+0x118>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	461a      	mov	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d01d      	beq.n	80099f4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7ff f9d1 	bl	8008d68 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80099c6:	4b14      	ldr	r3, [pc, #80]	; (8009a18 <USBD_SetConfig+0x118>)
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80099d0:	4b11      	ldr	r3, [pc, #68]	; (8009a18 <USBD_SetConfig+0x118>)
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	4619      	mov	r1, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7ff f9a7 	bl	8008d2a <USBD_SetClassConfig>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d104      	bne.n	80099ec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f8f2 	bl	8009bce <USBD_CtlError>
            return;
 80099ea:	e012      	b.n	8009a12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 f9b6 	bl	8009d5e <USBD_CtlSendStatus>
        break;
 80099f2:	e00e      	b.n	8009a12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f9b2 	bl	8009d5e <USBD_CtlSendStatus>
        break;
 80099fa:	e00a      	b.n	8009a12 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f8e5 	bl	8009bce <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009a04:	4b04      	ldr	r3, [pc, #16]	; (8009a18 <USBD_SetConfig+0x118>)
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	4619      	mov	r1, r3
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7ff f9ac 	bl	8008d68 <USBD_ClrClassConfig>
        break;
 8009a10:	bf00      	nop
    }
  }
}
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	20000628 	.word	0x20000628

08009a1c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	88db      	ldrh	r3, [r3, #6]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d004      	beq.n	8009a38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f8cc 	bl	8009bce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a36:	e022      	b.n	8009a7e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	dc02      	bgt.n	8009a48 <USBD_GetConfig+0x2c>
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	dc03      	bgt.n	8009a4e <USBD_GetConfig+0x32>
 8009a46:	e015      	b.n	8009a74 <USBD_GetConfig+0x58>
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d00b      	beq.n	8009a64 <USBD_GetConfig+0x48>
 8009a4c:	e012      	b.n	8009a74 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3308      	adds	r3, #8
 8009a58:	2201      	movs	r2, #1
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f920 	bl	8009ca2 <USBD_CtlSendData>
        break;
 8009a62:	e00c      	b.n	8009a7e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	3304      	adds	r3, #4
 8009a68:	2201      	movs	r2, #1
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f918 	bl	8009ca2 <USBD_CtlSendData>
        break;
 8009a72:	e004      	b.n	8009a7e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f8a9 	bl	8009bce <USBD_CtlError>
        break;
 8009a7c:	bf00      	nop
}
 8009a7e:	bf00      	nop
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b082      	sub	sp, #8
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a96:	3b01      	subs	r3, #1
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d81e      	bhi.n	8009ada <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	88db      	ldrh	r3, [r3, #6]
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d004      	beq.n	8009aae <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f891 	bl	8009bce <USBD_CtlError>
        break;
 8009aac:	e01a      	b.n	8009ae4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d005      	beq.n	8009aca <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	f043 0202 	orr.w	r2, r3, #2
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	330c      	adds	r3, #12
 8009ace:	2202      	movs	r2, #2
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f8e5 	bl	8009ca2 <USBD_CtlSendData>
      break;
 8009ad8:	e004      	b.n	8009ae4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f876 	bl	8009bce <USBD_CtlError>
      break;
 8009ae2:	bf00      	nop
  }
}
 8009ae4:	bf00      	nop
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	885b      	ldrh	r3, [r3, #2]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d106      	bne.n	8009b0c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f929 	bl	8009d5e <USBD_CtlSendStatus>
  }
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b24:	3b01      	subs	r3, #1
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d80b      	bhi.n	8009b42 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	885b      	ldrh	r3, [r3, #2]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d10c      	bne.n	8009b4c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f90f 	bl	8009d5e <USBD_CtlSendStatus>
      }
      break;
 8009b40:	e004      	b.n	8009b4c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 f842 	bl	8009bce <USBD_CtlError>
      break;
 8009b4a:	e000      	b.n	8009b4e <USBD_ClrFeature+0x3a>
      break;
 8009b4c:	bf00      	nop
  }
}
 8009b4e:	bf00      	nop
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b56:	b480      	push	{r7}
 8009b58:	b083      	sub	sp, #12
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	781a      	ldrb	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	785a      	ldrb	r2, [r3, #1]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	3302      	adds	r3, #2
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	3303      	adds	r3, #3
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	021b      	lsls	r3, r3, #8
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	4413      	add	r3, r2
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	3304      	adds	r3, #4
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	3305      	adds	r3, #5
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	021b      	lsls	r3, r3, #8
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	4413      	add	r3, r2
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	3306      	adds	r3, #6
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	3307      	adds	r3, #7
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	021b      	lsls	r3, r3, #8
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	4413      	add	r3, r2
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	80da      	strh	r2, [r3, #6]

}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bc80      	pop	{r7}
 8009bcc:	4770      	bx	lr

08009bce <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b082      	sub	sp, #8
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009bd8:	2180      	movs	r1, #128	; 0x80
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f003 fbaa 	bl	800d334 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009be0:	2100      	movs	r1, #0
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f003 fba6 	bl	800d334 <USBD_LL_StallEP>
}
 8009be8:	bf00      	nop
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d032      	beq.n	8009c6c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f000 f834 	bl	8009c74 <USBD_GetLen>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	3301      	adds	r3, #1
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	005b      	lsls	r3, r3, #1
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	1c5a      	adds	r2, r3, #1
 8009c1e:	75fa      	strb	r2, [r7, #23]
 8009c20:	461a      	mov	r2, r3
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	4413      	add	r3, r2
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	7812      	ldrb	r2, [r2, #0]
 8009c2a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009c2c:	7dfb      	ldrb	r3, [r7, #23]
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	75fa      	strb	r2, [r7, #23]
 8009c32:	461a      	mov	r2, r3
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	4413      	add	r3, r2
 8009c38:	2203      	movs	r2, #3
 8009c3a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009c3c:	e012      	b.n	8009c64 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	1c5a      	adds	r2, r3, #1
 8009c42:	60fa      	str	r2, [r7, #12]
 8009c44:	7dfa      	ldrb	r2, [r7, #23]
 8009c46:	1c51      	adds	r1, r2, #1
 8009c48:	75f9      	strb	r1, [r7, #23]
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	440a      	add	r2, r1
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009c54:	7dfb      	ldrb	r3, [r7, #23]
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	75fa      	strb	r2, [r7, #23]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	4413      	add	r3, r2
 8009c60:	2200      	movs	r2, #0
 8009c62:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1e8      	bne.n	8009c3e <USBD_GetString+0x4e>
    }
  }
}
 8009c6c:	bf00      	nop
 8009c6e:	3718      	adds	r7, #24
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009c80:	e005      	b.n	8009c8e <USBD_GetLen+0x1a>
  {
    len++;
 8009c82:	7bfb      	ldrb	r3, [r7, #15]
 8009c84:	3301      	adds	r3, #1
 8009c86:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1f5      	bne.n	8009c82 <USBD_GetLen+0xe>
  }

  return len;
 8009c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bc80      	pop	{r7}
 8009ca0:	4770      	bx	lr

08009ca2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b084      	sub	sp, #16
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	60f8      	str	r0, [r7, #12]
 8009caa:	60b9      	str	r1, [r7, #8]
 8009cac:	4613      	mov	r3, r2
 8009cae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009cb8:	88fa      	ldrh	r2, [r7, #6]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009cbe:	88fa      	ldrh	r2, [r7, #6]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cc4:	88fb      	ldrh	r3, [r7, #6]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	2100      	movs	r1, #0
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f003 fbbb 	bl	800d446 <USBD_LL_Transmit>

  return USBD_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ce8:	88fb      	ldrh	r3, [r7, #6]
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	2100      	movs	r1, #0
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f003 fba9 	bl	800d446 <USBD_LL_Transmit>

  return USBD_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b084      	sub	sp, #16
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	60f8      	str	r0, [r7, #12]
 8009d06:	60b9      	str	r1, [r7, #8]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2203      	movs	r2, #3
 8009d10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d14:	88fa      	ldrh	r2, [r7, #6]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009d1c:	88fa      	ldrh	r2, [r7, #6]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d24:	88fb      	ldrh	r3, [r7, #6]
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	2100      	movs	r1, #0
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f003 fbae 	bl	800d48c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	60f8      	str	r0, [r7, #12]
 8009d42:	60b9      	str	r1, [r7, #8]
 8009d44:	4613      	mov	r3, r2
 8009d46:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d48:	88fb      	ldrh	r3, [r7, #6]
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f003 fb9c 	bl	800d48c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b082      	sub	sp, #8
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2204      	movs	r2, #4
 8009d6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d6e:	2300      	movs	r3, #0
 8009d70:	2200      	movs	r2, #0
 8009d72:	2100      	movs	r1, #0
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f003 fb66 	bl	800d446 <USBD_LL_Transmit>

  return USBD_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2205      	movs	r2, #5
 8009d90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d94:	2300      	movs	r3, #0
 8009d96:	2200      	movs	r2, #0
 8009d98:	2100      	movs	r1, #0
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f003 fb76 	bl	800d48c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
	...

08009dac <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009db2:	f3ef 8305 	mrs	r3, IPSR
 8009db6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009db8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10f      	bne.n	8009dde <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8009dc2:	607b      	str	r3, [r7, #4]
  return(result);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d109      	bne.n	8009dde <osKernelInitialize+0x32>
 8009dca:	4b10      	ldr	r3, [pc, #64]	; (8009e0c <osKernelInitialize+0x60>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d109      	bne.n	8009de6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009dd2:	f3ef 8311 	mrs	r3, BASEPRI
 8009dd6:	603b      	str	r3, [r7, #0]
  return(result);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d003      	beq.n	8009de6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009dde:	f06f 0305 	mvn.w	r3, #5
 8009de2:	60fb      	str	r3, [r7, #12]
 8009de4:	e00c      	b.n	8009e00 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009de6:	4b09      	ldr	r3, [pc, #36]	; (8009e0c <osKernelInitialize+0x60>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d105      	bne.n	8009dfa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009dee:	4b07      	ldr	r3, [pc, #28]	; (8009e0c <osKernelInitialize+0x60>)
 8009df0:	2201      	movs	r2, #1
 8009df2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	60fb      	str	r3, [r7, #12]
 8009df8:	e002      	b.n	8009e00 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8009dfe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009e00:	68fb      	ldr	r3, [r7, #12]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bc80      	pop	{r7}
 8009e0a:	4770      	bx	lr
 8009e0c:	2000062c 	.word	0x2000062c

08009e10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e16:	f3ef 8305 	mrs	r3, IPSR
 8009e1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10f      	bne.n	8009e42 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e22:	f3ef 8310 	mrs	r3, PRIMASK
 8009e26:	607b      	str	r3, [r7, #4]
  return(result);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d109      	bne.n	8009e42 <osKernelStart+0x32>
 8009e2e:	4b11      	ldr	r3, [pc, #68]	; (8009e74 <osKernelStart+0x64>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d109      	bne.n	8009e4a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e36:	f3ef 8311 	mrs	r3, BASEPRI
 8009e3a:	603b      	str	r3, [r7, #0]
  return(result);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d003      	beq.n	8009e4a <osKernelStart+0x3a>
    stat = osErrorISR;
 8009e42:	f06f 0305 	mvn.w	r3, #5
 8009e46:	60fb      	str	r3, [r7, #12]
 8009e48:	e00e      	b.n	8009e68 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e4a:	4b0a      	ldr	r3, [pc, #40]	; (8009e74 <osKernelStart+0x64>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d107      	bne.n	8009e62 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8009e52:	4b08      	ldr	r3, [pc, #32]	; (8009e74 <osKernelStart+0x64>)
 8009e54:	2202      	movs	r2, #2
 8009e56:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009e58:	f001 f9ba 	bl	800b1d0 <vTaskStartScheduler>
      stat = osOK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	60fb      	str	r3, [r7, #12]
 8009e60:	e002      	b.n	8009e68 <osKernelStart+0x58>
    } else {
      stat = osError;
 8009e62:	f04f 33ff 	mov.w	r3, #4294967295
 8009e66:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009e68:	68fb      	ldr	r3, [r7, #12]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	2000062c 	.word	0x2000062c

08009e78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b092      	sub	sp, #72	; 0x48
 8009e7c:	af04      	add	r7, sp, #16
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e84:	2300      	movs	r3, #0
 8009e86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e88:	f3ef 8305 	mrs	r3, IPSR
 8009e8c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f040 8094 	bne.w	8009fbe <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e96:	f3ef 8310 	mrs	r3, PRIMASK
 8009e9a:	623b      	str	r3, [r7, #32]
  return(result);
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f040 808d 	bne.w	8009fbe <osThreadNew+0x146>
 8009ea4:	4b48      	ldr	r3, [pc, #288]	; (8009fc8 <osThreadNew+0x150>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d106      	bne.n	8009eba <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009eac:	f3ef 8311 	mrs	r3, BASEPRI
 8009eb0:	61fb      	str	r3, [r7, #28]
  return(result);
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f040 8082 	bne.w	8009fbe <osThreadNew+0x146>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d07e      	beq.n	8009fbe <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8009ec0:	2380      	movs	r3, #128	; 0x80
 8009ec2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8009ec4:	2318      	movs	r3, #24
 8009ec6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8009ec8:	2300      	movs	r3, #0
 8009eca:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8009ecc:	f107 031b 	add.w	r3, r7, #27
 8009ed0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8009ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d045      	beq.n	8009f6a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d002      	beq.n	8009eec <osThreadNew+0x74>
        name = attr->name;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d008      	beq.n	8009f12 <osThreadNew+0x9a>
 8009f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f02:	2b38      	cmp	r3, #56	; 0x38
 8009f04:	d805      	bhi.n	8009f12 <osThreadNew+0x9a>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <osThreadNew+0x9e>
        return (NULL);
 8009f12:	2300      	movs	r3, #0
 8009f14:	e054      	b.n	8009fc0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	089b      	lsrs	r3, r3, #2
 8009f24:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00e      	beq.n	8009f4c <osThreadNew+0xd4>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	2b5b      	cmp	r3, #91	; 0x5b
 8009f34:	d90a      	bls.n	8009f4c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d006      	beq.n	8009f4c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <osThreadNew+0xd4>
        mem = 1;
 8009f46:	2301      	movs	r3, #1
 8009f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f4a:	e010      	b.n	8009f6e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10c      	bne.n	8009f6e <osThreadNew+0xf6>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d108      	bne.n	8009f6e <osThreadNew+0xf6>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d104      	bne.n	8009f6e <osThreadNew+0xf6>
          mem = 0;
 8009f64:	2300      	movs	r3, #0
 8009f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f68:	e001      	b.n	8009f6e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d110      	bne.n	8009f96 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f7c:	9202      	str	r2, [sp, #8]
 8009f7e:	9301      	str	r3, [sp, #4]
 8009f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f000 fed6 	bl	800ad3c <xTaskCreateStatic>
 8009f90:	4603      	mov	r3, r0
 8009f92:	617b      	str	r3, [r7, #20]
 8009f94:	e013      	b.n	8009fbe <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8009f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d110      	bne.n	8009fbe <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	f107 0314 	add.w	r3, r7, #20
 8009fa4:	9301      	str	r3, [sp, #4]
 8009fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f000 ff20 	bl	800adf4 <xTaskCreate>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d001      	beq.n	8009fbe <osThreadNew+0x146>
          hTask = NULL;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009fbe:	697b      	ldr	r3, [r7, #20]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3738      	adds	r7, #56	; 0x38
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	2000062c 	.word	0x2000062c

08009fcc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fd4:	f3ef 8305 	mrs	r3, IPSR
 8009fd8:	613b      	str	r3, [r7, #16]
  return(result);
 8009fda:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10f      	bne.n	800a000 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8009fe4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d109      	bne.n	800a000 <osDelay+0x34>
 8009fec:	4b0d      	ldr	r3, [pc, #52]	; (800a024 <osDelay+0x58>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d109      	bne.n	800a008 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ff4:	f3ef 8311 	mrs	r3, BASEPRI
 8009ff8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d003      	beq.n	800a008 <osDelay+0x3c>
    stat = osErrorISR;
 800a000:	f06f 0305 	mvn.w	r3, #5
 800a004:	617b      	str	r3, [r7, #20]
 800a006:	e007      	b.n	800a018 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a008:	2300      	movs	r3, #0
 800a00a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f001 f8a8 	bl	800b168 <vTaskDelay>
    }
  }

  return (stat);
 800a018:	697b      	ldr	r3, [r7, #20]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3718      	adds	r7, #24
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	2000062c 	.word	0x2000062c

0800a028 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08c      	sub	sp, #48	; 0x30
 800a02c:	af02      	add	r7, sp, #8
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a034:	2300      	movs	r3, #0
 800a036:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a038:	f3ef 8305 	mrs	r3, IPSR
 800a03c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a03e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a040:	2b00      	cmp	r3, #0
 800a042:	d16f      	bne.n	800a124 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a044:	f3ef 8310 	mrs	r3, PRIMASK
 800a048:	617b      	str	r3, [r7, #20]
  return(result);
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d169      	bne.n	800a124 <osMessageQueueNew+0xfc>
 800a050:	4b37      	ldr	r3, [pc, #220]	; (800a130 <osMessageQueueNew+0x108>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b02      	cmp	r3, #2
 800a056:	d105      	bne.n	800a064 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a058:	f3ef 8311 	mrs	r3, BASEPRI
 800a05c:	613b      	str	r3, [r7, #16]
  return(result);
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d15f      	bne.n	800a124 <osMessageQueueNew+0xfc>
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d05c      	beq.n	800a124 <osMessageQueueNew+0xfc>
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d059      	beq.n	800a124 <osMessageQueueNew+0xfc>
    mem = -1;
 800a070:	f04f 33ff 	mov.w	r3, #4294967295
 800a074:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d029      	beq.n	800a0d0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d012      	beq.n	800a0aa <osMessageQueueNew+0x82>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	2b4f      	cmp	r3, #79	; 0x4f
 800a08a:	d90e      	bls.n	800a0aa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00a      	beq.n	800a0aa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	695a      	ldr	r2, [r3, #20]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	68b9      	ldr	r1, [r7, #8]
 800a09c:	fb01 f303 	mul.w	r3, r1, r3
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d302      	bcc.n	800a0aa <osMessageQueueNew+0x82>
        mem = 1;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	623b      	str	r3, [r7, #32]
 800a0a8:	e014      	b.n	800a0d4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d110      	bne.n	800a0d4 <osMessageQueueNew+0xac>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10c      	bne.n	800a0d4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d108      	bne.n	800a0d4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	695b      	ldr	r3, [r3, #20]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d104      	bne.n	800a0d4 <osMessageQueueNew+0xac>
          mem = 0;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	623b      	str	r3, [r7, #32]
 800a0ce:	e001      	b.n	800a0d4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d10b      	bne.n	800a0f2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	691a      	ldr	r2, [r3, #16]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	9100      	str	r1, [sp, #0]
 800a0e6:	68b9      	ldr	r1, [r7, #8]
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 f96d 	bl	800a3c8 <xQueueGenericCreateStatic>
 800a0ee:	6278      	str	r0, [r7, #36]	; 0x24
 800a0f0:	e008      	b.n	800a104 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d105      	bne.n	800a104 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	68b9      	ldr	r1, [r7, #8]
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f000 f9da 	bl	800a4b6 <xQueueGenericCreate>
 800a102:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00c      	beq.n	800a124 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d003      	beq.n	800a118 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	61fb      	str	r3, [r7, #28]
 800a116:	e001      	b.n	800a11c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a118:	2300      	movs	r3, #0
 800a11a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a11c:	69f9      	ldr	r1, [r7, #28]
 800a11e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a120:	f000 fdb0 	bl	800ac84 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a126:	4618      	mov	r0, r3
 800a128:	3728      	adds	r7, #40	; 0x28
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	2000062c 	.word	0x2000062c

0800a134 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	4a06      	ldr	r2, [pc, #24]	; (800a15c <vApplicationGetIdleTaskMemory+0x28>)
 800a144:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	4a05      	ldr	r2, [pc, #20]	; (800a160 <vApplicationGetIdleTaskMemory+0x2c>)
 800a14a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2280      	movs	r2, #128	; 0x80
 800a150:	601a      	str	r2, [r3, #0]
}
 800a152:	bf00      	nop
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	bc80      	pop	{r7}
 800a15a:	4770      	bx	lr
 800a15c:	20000630 	.word	0x20000630
 800a160:	2000068c 	.word	0x2000068c

0800a164 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	4a07      	ldr	r2, [pc, #28]	; (800a190 <vApplicationGetTimerTaskMemory+0x2c>)
 800a174:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	4a06      	ldr	r2, [pc, #24]	; (800a194 <vApplicationGetTimerTaskMemory+0x30>)
 800a17a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a182:	601a      	str	r2, [r3, #0]
}
 800a184:	bf00      	nop
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	bc80      	pop	{r7}
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	2000088c 	.word	0x2000088c
 800a194:	200008e8 	.word	0x200008e8

0800a198 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f103 0208 	add.w	r2, r3, #8
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f103 0208 	add.w	r2, r3, #8
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f103 0208 	add.w	r2, r3, #8
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bc80      	pop	{r7}
 800a1d4:	4770      	bx	lr

0800a1d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1d6:	b480      	push	{r7}
 800a1d8:	b083      	sub	sp, #12
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bc80      	pop	{r7}
 800a1ec:	4770      	bx	lr

0800a1ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b085      	sub	sp, #20
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	601a      	str	r2, [r3, #0]
}
 800a22a:	bf00      	nop
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	bc80      	pop	{r7}
 800a232:	4770      	bx	lr

0800a234 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a234:	b480      	push	{r7}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24a:	d103      	bne.n	800a254 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	60fb      	str	r3, [r7, #12]
 800a252:	e00c      	b.n	800a26e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3308      	adds	r3, #8
 800a258:	60fb      	str	r3, [r7, #12]
 800a25a:	e002      	b.n	800a262 <vListInsert+0x2e>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d2f6      	bcs.n	800a25c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	1c5a      	adds	r2, r3, #1
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	601a      	str	r2, [r3, #0]
}
 800a29a:	bf00      	nop
 800a29c:	3714      	adds	r7, #20
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bc80      	pop	{r7}
 800a2a2:	4770      	bx	lr

0800a2a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	6892      	ldr	r2, [r2, #8]
 800a2ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	6852      	ldr	r2, [r2, #4]
 800a2c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d103      	bne.n	800a2d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	689a      	ldr	r2, [r3, #8]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	1e5a      	subs	r2, r3, #1
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bc80      	pop	{r7}
 800a2f4:	4770      	bx	lr
	...

0800a2f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10a      	bne.n	800a322 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a322:	f002 f99b 	bl	800c65c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32e:	68f9      	ldr	r1, [r7, #12]
 800a330:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a332:	fb01 f303 	mul.w	r3, r1, r3
 800a336:	441a      	add	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a352:	3b01      	subs	r3, #1
 800a354:	68f9      	ldr	r1, [r7, #12]
 800a356:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a358:	fb01 f303 	mul.w	r3, r1, r3
 800a35c:	441a      	add	r2, r3
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	22ff      	movs	r2, #255	; 0xff
 800a366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	22ff      	movs	r2, #255	; 0xff
 800a36e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d114      	bne.n	800a3a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d01a      	beq.n	800a3b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	3310      	adds	r3, #16
 800a384:	4618      	mov	r0, r3
 800a386:	f001 f9ad 	bl	800b6e4 <xTaskRemoveFromEventList>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d012      	beq.n	800a3b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a390:	4b0c      	ldr	r3, [pc, #48]	; (800a3c4 <xQueueGenericReset+0xcc>)
 800a392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a396:	601a      	str	r2, [r3, #0]
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	e009      	b.n	800a3b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3310      	adds	r3, #16
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7ff fef6 	bl	800a198 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3324      	adds	r3, #36	; 0x24
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7ff fef1 	bl	800a198 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3b6:	f002 f981 	bl	800c6bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3ba:	2301      	movs	r3, #1
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	e000ed04 	.word	0xe000ed04

0800a3c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b08e      	sub	sp, #56	; 0x38
 800a3cc:	af02      	add	r7, sp, #8
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
 800a3d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10a      	bne.n	800a3f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e0:	f383 8811 	msr	BASEPRI, r3
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a3ee:	bf00      	nop
 800a3f0:	e7fe      	b.n	800a3f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10a      	bne.n	800a40e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a40a:	bf00      	nop
 800a40c:	e7fe      	b.n	800a40c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <xQueueGenericCreateStatic+0x52>
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <xQueueGenericCreateStatic+0x56>
 800a41a:	2301      	movs	r3, #1
 800a41c:	e000      	b.n	800a420 <xQueueGenericCreateStatic+0x58>
 800a41e:	2300      	movs	r3, #0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10a      	bne.n	800a43a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	623b      	str	r3, [r7, #32]
}
 800a436:	bf00      	nop
 800a438:	e7fe      	b.n	800a438 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d102      	bne.n	800a446 <xQueueGenericCreateStatic+0x7e>
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d101      	bne.n	800a44a <xQueueGenericCreateStatic+0x82>
 800a446:	2301      	movs	r3, #1
 800a448:	e000      	b.n	800a44c <xQueueGenericCreateStatic+0x84>
 800a44a:	2300      	movs	r3, #0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10a      	bne.n	800a466 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	61fb      	str	r3, [r7, #28]
}
 800a462:	bf00      	nop
 800a464:	e7fe      	b.n	800a464 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a466:	2350      	movs	r3, #80	; 0x50
 800a468:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2b50      	cmp	r3, #80	; 0x50
 800a46e:	d00a      	beq.n	800a486 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	61bb      	str	r3, [r7, #24]
}
 800a482:	bf00      	nop
 800a484:	e7fe      	b.n	800a484 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00d      	beq.n	800a4ac <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a492:	2201      	movs	r2, #1
 800a494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a498:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	68b9      	ldr	r1, [r7, #8]
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f000 f843 	bl	800a532 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3730      	adds	r7, #48	; 0x30
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b08a      	sub	sp, #40	; 0x28
 800a4ba:	af02      	add	r7, sp, #8
 800a4bc:	60f8      	str	r0, [r7, #12]
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10a      	bne.n	800a4e0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	613b      	str	r3, [r7, #16]
}
 800a4dc:	bf00      	nop
 800a4de:	e7fe      	b.n	800a4de <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d102      	bne.n	800a4ec <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	61fb      	str	r3, [r7, #28]
 800a4ea:	e004      	b.n	800a4f6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	fb02 f303 	mul.w	r3, r2, r3
 800a4f4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	3350      	adds	r3, #80	; 0x50
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f002 f9ae 	bl	800c85c <pvPortMalloc>
 800a500:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00f      	beq.n	800a528 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	3350      	adds	r3, #80	; 0x50
 800a50c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	2200      	movs	r2, #0
 800a512:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a516:	79fa      	ldrb	r2, [r7, #7]
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	4613      	mov	r3, r2
 800a51e:	697a      	ldr	r2, [r7, #20]
 800a520:	68b9      	ldr	r1, [r7, #8]
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f000 f805 	bl	800a532 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a528:	69bb      	ldr	r3, [r7, #24]
	}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3720      	adds	r7, #32
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b084      	sub	sp, #16
 800a536:	af00      	add	r7, sp, #0
 800a538:	60f8      	str	r0, [r7, #12]
 800a53a:	60b9      	str	r1, [r7, #8]
 800a53c:	607a      	str	r2, [r7, #4]
 800a53e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d103      	bne.n	800a54e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	69ba      	ldr	r2, [r7, #24]
 800a54a:	601a      	str	r2, [r3, #0]
 800a54c:	e002      	b.n	800a554 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a560:	2101      	movs	r1, #1
 800a562:	69b8      	ldr	r0, [r7, #24]
 800a564:	f7ff fec8 	bl	800a2f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	78fa      	ldrb	r2, [r7, #3]
 800a56c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a570:	bf00      	nop
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08e      	sub	sp, #56	; 0x38
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
 800a584:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a586:	2300      	movs	r3, #0
 800a588:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10a      	bne.n	800a5aa <xQueueGenericSend+0x32>
	__asm volatile
 800a594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5a6:	bf00      	nop
 800a5a8:	e7fe      	b.n	800a5a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d103      	bne.n	800a5b8 <xQueueGenericSend+0x40>
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <xQueueGenericSend+0x44>
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e000      	b.n	800a5be <xQueueGenericSend+0x46>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10a      	bne.n	800a5d8 <xQueueGenericSend+0x60>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5d4:	bf00      	nop
 800a5d6:	e7fe      	b.n	800a5d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d103      	bne.n	800a5e6 <xQueueGenericSend+0x6e>
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d101      	bne.n	800a5ea <xQueueGenericSend+0x72>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e000      	b.n	800a5ec <xQueueGenericSend+0x74>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10a      	bne.n	800a606 <xQueueGenericSend+0x8e>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	623b      	str	r3, [r7, #32]
}
 800a602:	bf00      	nop
 800a604:	e7fe      	b.n	800a604 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a606:	f001 fa67 	bl	800bad8 <xTaskGetSchedulerState>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d102      	bne.n	800a616 <xQueueGenericSend+0x9e>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <xQueueGenericSend+0xa2>
 800a616:	2301      	movs	r3, #1
 800a618:	e000      	b.n	800a61c <xQueueGenericSend+0xa4>
 800a61a:	2300      	movs	r3, #0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10a      	bne.n	800a636 <xQueueGenericSend+0xbe>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	61fb      	str	r3, [r7, #28]
}
 800a632:	bf00      	nop
 800a634:	e7fe      	b.n	800a634 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a636:	f002 f811 	bl	800c65c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a642:	429a      	cmp	r2, r3
 800a644:	d302      	bcc.n	800a64c <xQueueGenericSend+0xd4>
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2b02      	cmp	r3, #2
 800a64a:	d129      	bne.n	800a6a0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a64c:	683a      	ldr	r2, [r7, #0]
 800a64e:	68b9      	ldr	r1, [r7, #8]
 800a650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a652:	f000 fa07 	bl	800aa64 <prvCopyDataToQueue>
 800a656:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d010      	beq.n	800a682 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a662:	3324      	adds	r3, #36	; 0x24
 800a664:	4618      	mov	r0, r3
 800a666:	f001 f83d 	bl	800b6e4 <xTaskRemoveFromEventList>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d013      	beq.n	800a698 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a670:	4b3f      	ldr	r3, [pc, #252]	; (800a770 <xQueueGenericSend+0x1f8>)
 800a672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	e00a      	b.n	800a698 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a684:	2b00      	cmp	r3, #0
 800a686:	d007      	beq.n	800a698 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a688:	4b39      	ldr	r3, [pc, #228]	; (800a770 <xQueueGenericSend+0x1f8>)
 800a68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a68e:	601a      	str	r2, [r3, #0]
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a698:	f002 f810 	bl	800c6bc <vPortExitCritical>
				return pdPASS;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e063      	b.n	800a768 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d103      	bne.n	800a6ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6a6:	f002 f809 	bl	800c6bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	e05c      	b.n	800a768 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d106      	bne.n	800a6c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6b4:	f107 0314 	add.w	r3, r7, #20
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f001 f877 	bl	800b7ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6c2:	f001 fffb 	bl	800c6bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6c6:	f000 fde9 	bl	800b29c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6ca:	f001 ffc7 	bl	800c65c <vPortEnterCritical>
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6d4:	b25b      	sxtb	r3, r3
 800a6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6da:	d103      	bne.n	800a6e4 <xQueueGenericSend+0x16c>
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6ea:	b25b      	sxtb	r3, r3
 800a6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f0:	d103      	bne.n	800a6fa <xQueueGenericSend+0x182>
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6fa:	f001 ffdf 	bl	800c6bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6fe:	1d3a      	adds	r2, r7, #4
 800a700:	f107 0314 	add.w	r3, r7, #20
 800a704:	4611      	mov	r1, r2
 800a706:	4618      	mov	r0, r3
 800a708:	f001 f866 	bl	800b7d8 <xTaskCheckForTimeOut>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d124      	bne.n	800a75c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a714:	f000 fa9e 	bl	800ac54 <prvIsQueueFull>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d018      	beq.n	800a750 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a720:	3310      	adds	r3, #16
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	4611      	mov	r1, r2
 800a726:	4618      	mov	r0, r3
 800a728:	f000 ff8c 	bl	800b644 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a72c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a72e:	f000 fa29 	bl	800ab84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a732:	f000 fdc1 	bl	800b2b8 <xTaskResumeAll>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f47f af7c 	bne.w	800a636 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a73e:	4b0c      	ldr	r3, [pc, #48]	; (800a770 <xQueueGenericSend+0x1f8>)
 800a740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a744:	601a      	str	r2, [r3, #0]
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	e772      	b.n	800a636 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a752:	f000 fa17 	bl	800ab84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a756:	f000 fdaf 	bl	800b2b8 <xTaskResumeAll>
 800a75a:	e76c      	b.n	800a636 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a75c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a75e:	f000 fa11 	bl	800ab84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a762:	f000 fda9 	bl	800b2b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a766:	2300      	movs	r3, #0
		}
	}
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3738      	adds	r7, #56	; 0x38
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	e000ed04 	.word	0xe000ed04

0800a774 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b08e      	sub	sp, #56	; 0x38
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
 800a780:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10a      	bne.n	800a7a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a79e:	bf00      	nop
 800a7a0:	e7fe      	b.n	800a7a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d103      	bne.n	800a7b0 <xQueueGenericSendFromISR+0x3c>
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d101      	bne.n	800a7b4 <xQueueGenericSendFromISR+0x40>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e000      	b.n	800a7b6 <xQueueGenericSendFromISR+0x42>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10a      	bne.n	800a7d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	623b      	str	r3, [r7, #32]
}
 800a7cc:	bf00      	nop
 800a7ce:	e7fe      	b.n	800a7ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d103      	bne.n	800a7de <xQueueGenericSendFromISR+0x6a>
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d101      	bne.n	800a7e2 <xQueueGenericSendFromISR+0x6e>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e000      	b.n	800a7e4 <xQueueGenericSendFromISR+0x70>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d10a      	bne.n	800a7fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	61fb      	str	r3, [r7, #28]
}
 800a7fa:	bf00      	nop
 800a7fc:	e7fe      	b.n	800a7fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7fe:	f001 ffef 	bl	800c7e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a802:	f3ef 8211 	mrs	r2, BASEPRI
 800a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	61ba      	str	r2, [r7, #24]
 800a818:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a81a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a81c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a826:	429a      	cmp	r2, r3
 800a828:	d302      	bcc.n	800a830 <xQueueGenericSendFromISR+0xbc>
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d12c      	bne.n	800a88a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	68b9      	ldr	r1, [r7, #8]
 800a83e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a840:	f000 f910 	bl	800aa64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a844:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84c:	d112      	bne.n	800a874 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a852:	2b00      	cmp	r3, #0
 800a854:	d016      	beq.n	800a884 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	3324      	adds	r3, #36	; 0x24
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 ff42 	bl	800b6e4 <xTaskRemoveFromEventList>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00e      	beq.n	800a884 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00b      	beq.n	800a884 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	601a      	str	r2, [r3, #0]
 800a872:	e007      	b.n	800a884 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a874:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a878:	3301      	adds	r3, #1
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	b25a      	sxtb	r2, r3
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a884:	2301      	movs	r3, #1
 800a886:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a888:	e001      	b.n	800a88e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	637b      	str	r3, [r7, #52]	; 0x34
 800a88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a890:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a898:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3738      	adds	r7, #56	; 0x38
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b08c      	sub	sp, #48	; 0x30
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10a      	bne.n	800a8d4 <xQueueReceive+0x30>
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	623b      	str	r3, [r7, #32]
}
 800a8d0:	bf00      	nop
 800a8d2:	e7fe      	b.n	800a8d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d103      	bne.n	800a8e2 <xQueueReceive+0x3e>
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <xQueueReceive+0x42>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e000      	b.n	800a8e8 <xQueueReceive+0x44>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10a      	bne.n	800a902 <xQueueReceive+0x5e>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	61fb      	str	r3, [r7, #28]
}
 800a8fe:	bf00      	nop
 800a900:	e7fe      	b.n	800a900 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a902:	f001 f8e9 	bl	800bad8 <xTaskGetSchedulerState>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d102      	bne.n	800a912 <xQueueReceive+0x6e>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d101      	bne.n	800a916 <xQueueReceive+0x72>
 800a912:	2301      	movs	r3, #1
 800a914:	e000      	b.n	800a918 <xQueueReceive+0x74>
 800a916:	2300      	movs	r3, #0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10a      	bne.n	800a932 <xQueueReceive+0x8e>
	__asm volatile
 800a91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a920:	f383 8811 	msr	BASEPRI, r3
 800a924:	f3bf 8f6f 	isb	sy
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	61bb      	str	r3, [r7, #24]
}
 800a92e:	bf00      	nop
 800a930:	e7fe      	b.n	800a930 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a932:	f001 fe93 	bl	800c65c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d01f      	beq.n	800a982 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a942:	68b9      	ldr	r1, [r7, #8]
 800a944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a946:	f000 f8f7 	bl	800ab38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	1e5a      	subs	r2, r3, #1
 800a94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a950:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00f      	beq.n	800a97a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95c:	3310      	adds	r3, #16
 800a95e:	4618      	mov	r0, r3
 800a960:	f000 fec0 	bl	800b6e4 <xTaskRemoveFromEventList>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d007      	beq.n	800a97a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a96a:	4b3d      	ldr	r3, [pc, #244]	; (800aa60 <xQueueReceive+0x1bc>)
 800a96c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a970:	601a      	str	r2, [r3, #0]
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a97a:	f001 fe9f 	bl	800c6bc <vPortExitCritical>
				return pdPASS;
 800a97e:	2301      	movs	r3, #1
 800a980:	e069      	b.n	800aa56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d103      	bne.n	800a990 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a988:	f001 fe98 	bl	800c6bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a98c:	2300      	movs	r3, #0
 800a98e:	e062      	b.n	800aa56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a992:	2b00      	cmp	r3, #0
 800a994:	d106      	bne.n	800a9a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a996:	f107 0310 	add.w	r3, r7, #16
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 ff06 	bl	800b7ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9a4:	f001 fe8a 	bl	800c6bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9a8:	f000 fc78 	bl	800b29c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9ac:	f001 fe56 	bl	800c65c <vPortEnterCritical>
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9b6:	b25b      	sxtb	r3, r3
 800a9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9bc:	d103      	bne.n	800a9c6 <xQueueReceive+0x122>
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9cc:	b25b      	sxtb	r3, r3
 800a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d2:	d103      	bne.n	800a9dc <xQueueReceive+0x138>
 800a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9dc:	f001 fe6e 	bl	800c6bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9e0:	1d3a      	adds	r2, r7, #4
 800a9e2:	f107 0310 	add.w	r3, r7, #16
 800a9e6:	4611      	mov	r1, r2
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 fef5 	bl	800b7d8 <xTaskCheckForTimeOut>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d123      	bne.n	800aa3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9f6:	f000 f917 	bl	800ac28 <prvIsQueueEmpty>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d017      	beq.n	800aa30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa02:	3324      	adds	r3, #36	; 0x24
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	4611      	mov	r1, r2
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 fe1b 	bl	800b644 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa10:	f000 f8b8 	bl	800ab84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa14:	f000 fc50 	bl	800b2b8 <xTaskResumeAll>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d189      	bne.n	800a932 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aa1e:	4b10      	ldr	r3, [pc, #64]	; (800aa60 <xQueueReceive+0x1bc>)
 800aa20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa24:	601a      	str	r2, [r3, #0]
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	e780      	b.n	800a932 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa32:	f000 f8a7 	bl	800ab84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa36:	f000 fc3f 	bl	800b2b8 <xTaskResumeAll>
 800aa3a:	e77a      	b.n	800a932 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa3e:	f000 f8a1 	bl	800ab84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa42:	f000 fc39 	bl	800b2b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa48:	f000 f8ee 	bl	800ac28 <prvIsQueueEmpty>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f43f af6f 	beq.w	800a932 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3730      	adds	r7, #48	; 0x30
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	e000ed04 	.word	0xe000ed04

0800aa64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa70:	2300      	movs	r3, #0
 800aa72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10d      	bne.n	800aa9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d14d      	bne.n	800ab26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f001 f840 	bl	800bb14 <xTaskPriorityDisinherit>
 800aa94:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	605a      	str	r2, [r3, #4]
 800aa9c:	e043      	b.n	800ab26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d119      	bne.n	800aad8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6898      	ldr	r0, [r3, #8]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaac:	461a      	mov	r2, r3
 800aaae:	68b9      	ldr	r1, [r7, #8]
 800aab0:	f002 fd98 	bl	800d5e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	689a      	ldr	r2, [r3, #8]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aabc:	441a      	add	r2, r3
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	689a      	ldr	r2, [r3, #8]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d32b      	bcc.n	800ab26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	609a      	str	r2, [r3, #8]
 800aad6:	e026      	b.n	800ab26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	68d8      	ldr	r0, [r3, #12]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae0:	461a      	mov	r2, r3
 800aae2:	68b9      	ldr	r1, [r7, #8]
 800aae4:	f002 fd7e 	bl	800d5e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	68da      	ldr	r2, [r3, #12]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf0:	425b      	negs	r3, r3
 800aaf2:	441a      	add	r2, r3
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	68da      	ldr	r2, [r3, #12]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d207      	bcs.n	800ab14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	685a      	ldr	r2, [r3, #4]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0c:	425b      	negs	r3, r3
 800ab0e:	441a      	add	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d105      	bne.n	800ab26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	3b01      	subs	r3, #1
 800ab24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	1c5a      	adds	r2, r3, #1
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab2e:	697b      	ldr	r3, [r7, #20]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3718      	adds	r7, #24
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d018      	beq.n	800ab7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68da      	ldr	r2, [r3, #12]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab52:	441a      	add	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	68da      	ldr	r2, [r3, #12]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d303      	bcc.n	800ab6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	68d9      	ldr	r1, [r3, #12]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab74:	461a      	mov	r2, r3
 800ab76:	6838      	ldr	r0, [r7, #0]
 800ab78:	f002 fd34 	bl	800d5e4 <memcpy>
	}
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab8c:	f001 fd66 	bl	800c65c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab98:	e011      	b.n	800abbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d012      	beq.n	800abc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	3324      	adds	r3, #36	; 0x24
 800aba6:	4618      	mov	r0, r3
 800aba8:	f000 fd9c 	bl	800b6e4 <xTaskRemoveFromEventList>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d001      	beq.n	800abb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abb2:	f000 fe73 	bl	800b89c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800abb6:	7bfb      	ldrb	r3, [r7, #15]
 800abb8:	3b01      	subs	r3, #1
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	dce9      	bgt.n	800ab9a <prvUnlockQueue+0x16>
 800abc6:	e000      	b.n	800abca <prvUnlockQueue+0x46>
					break;
 800abc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	22ff      	movs	r2, #255	; 0xff
 800abce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800abd2:	f001 fd73 	bl	800c6bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abd6:	f001 fd41 	bl	800c65c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abe0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abe2:	e011      	b.n	800ac08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d012      	beq.n	800ac12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	3310      	adds	r3, #16
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 fd77 	bl	800b6e4 <xTaskRemoveFromEventList>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800abfc:	f000 fe4e 	bl	800b89c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	dce9      	bgt.n	800abe4 <prvUnlockQueue+0x60>
 800ac10:	e000      	b.n	800ac14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	22ff      	movs	r2, #255	; 0xff
 800ac18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac1c:	f001 fd4e 	bl	800c6bc <vPortExitCritical>
}
 800ac20:	bf00      	nop
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac30:	f001 fd14 	bl	800c65c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d102      	bne.n	800ac42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	e001      	b.n	800ac46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac42:	2300      	movs	r3, #0
 800ac44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac46:	f001 fd39 	bl	800c6bc <vPortExitCritical>

	return xReturn;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac5c:	f001 fcfe 	bl	800c65c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d102      	bne.n	800ac72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	60fb      	str	r3, [r7, #12]
 800ac70:	e001      	b.n	800ac76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac72:	2300      	movs	r3, #0
 800ac74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac76:	f001 fd21 	bl	800c6bc <vPortExitCritical>

	return xReturn;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac8e:	2300      	movs	r3, #0
 800ac90:	60fb      	str	r3, [r7, #12]
 800ac92:	e014      	b.n	800acbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac94:	4a0e      	ldr	r2, [pc, #56]	; (800acd0 <vQueueAddToRegistry+0x4c>)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d10b      	bne.n	800acb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aca0:	490b      	ldr	r1, [pc, #44]	; (800acd0 <vQueueAddToRegistry+0x4c>)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800acaa:	4a09      	ldr	r2, [pc, #36]	; (800acd0 <vQueueAddToRegistry+0x4c>)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	00db      	lsls	r3, r3, #3
 800acb0:	4413      	add	r3, r2
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800acb6:	e006      	b.n	800acc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	3301      	adds	r3, #1
 800acbc:	60fb      	str	r3, [r7, #12]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2b07      	cmp	r3, #7
 800acc2:	d9e7      	bls.n	800ac94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800acc4:	bf00      	nop
 800acc6:	bf00      	nop
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	bc80      	pop	{r7}
 800acce:	4770      	bx	lr
 800acd0:	200037f4 	.word	0x200037f4

0800acd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ace4:	f001 fcba 	bl	800c65c <vPortEnterCritical>
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acee:	b25b      	sxtb	r3, r3
 800acf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf4:	d103      	bne.n	800acfe <vQueueWaitForMessageRestricted+0x2a>
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad04:	b25b      	sxtb	r3, r3
 800ad06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0a:	d103      	bne.n	800ad14 <vQueueWaitForMessageRestricted+0x40>
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad14:	f001 fcd2 	bl	800c6bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d106      	bne.n	800ad2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	3324      	adds	r3, #36	; 0x24
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	68b9      	ldr	r1, [r7, #8]
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f000 fcaf 	bl	800b68c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad2e:	6978      	ldr	r0, [r7, #20]
 800ad30:	f7ff ff28 	bl	800ab84 <prvUnlockQueue>
	}
 800ad34:	bf00      	nop
 800ad36:	3718      	adds	r7, #24
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b08e      	sub	sp, #56	; 0x38
 800ad40:	af04      	add	r7, sp, #16
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
 800ad48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10a      	bne.n	800ad66 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ad50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad54:	f383 8811 	msr	BASEPRI, r3
 800ad58:	f3bf 8f6f 	isb	sy
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	623b      	str	r3, [r7, #32]
}
 800ad62:	bf00      	nop
 800ad64:	e7fe      	b.n	800ad64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10a      	bne.n	800ad82 <xTaskCreateStatic+0x46>
	__asm volatile
 800ad6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	61fb      	str	r3, [r7, #28]
}
 800ad7e:	bf00      	nop
 800ad80:	e7fe      	b.n	800ad80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad82:	235c      	movs	r3, #92	; 0x5c
 800ad84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	2b5c      	cmp	r3, #92	; 0x5c
 800ad8a:	d00a      	beq.n	800ada2 <xTaskCreateStatic+0x66>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	f383 8811 	msr	BASEPRI, r3
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	61bb      	str	r3, [r7, #24]
}
 800ad9e:	bf00      	nop
 800ada0:	e7fe      	b.n	800ada0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ada2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d01e      	beq.n	800ade6 <xTaskCreateStatic+0xaa>
 800ada8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d01b      	beq.n	800ade6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800adae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800adb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adb6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	2202      	movs	r2, #2
 800adbc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800adc0:	2300      	movs	r3, #0
 800adc2:	9303      	str	r3, [sp, #12]
 800adc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc6:	9302      	str	r3, [sp, #8]
 800adc8:	f107 0314 	add.w	r3, r7, #20
 800adcc:	9301      	str	r3, [sp, #4]
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	68b9      	ldr	r1, [r7, #8]
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 f850 	bl	800ae7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ade0:	f000 f8d4 	bl	800af8c <prvAddNewTaskToReadyList>
 800ade4:	e001      	b.n	800adea <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800adea:	697b      	ldr	r3, [r7, #20]
	}
 800adec:	4618      	mov	r0, r3
 800adee:	3728      	adds	r7, #40	; 0x28
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08c      	sub	sp, #48	; 0x30
 800adf8:	af04      	add	r7, sp, #16
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	603b      	str	r3, [r7, #0]
 800ae00:	4613      	mov	r3, r2
 800ae02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae04:	88fb      	ldrh	r3, [r7, #6]
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f001 fd27 	bl	800c85c <pvPortMalloc>
 800ae0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00e      	beq.n	800ae34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ae16:	205c      	movs	r0, #92	; 0x5c
 800ae18:	f001 fd20 	bl	800c85c <pvPortMalloc>
 800ae1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d003      	beq.n	800ae2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	631a      	str	r2, [r3, #48]	; 0x30
 800ae2a:	e005      	b.n	800ae38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae2c:	6978      	ldr	r0, [r7, #20]
 800ae2e:	f001 fdd9 	bl	800c9e4 <vPortFree>
 800ae32:	e001      	b.n	800ae38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae34:	2300      	movs	r3, #0
 800ae36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d017      	beq.n	800ae6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae46:	88fa      	ldrh	r2, [r7, #6]
 800ae48:	2300      	movs	r3, #0
 800ae4a:	9303      	str	r3, [sp, #12]
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	9302      	str	r3, [sp, #8]
 800ae50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae52:	9301      	str	r3, [sp, #4]
 800ae54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	68b9      	ldr	r1, [r7, #8]
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f000 f80e 	bl	800ae7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae62:	69f8      	ldr	r0, [r7, #28]
 800ae64:	f000 f892 	bl	800af8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	61bb      	str	r3, [r7, #24]
 800ae6c:	e002      	b.n	800ae74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae74:	69bb      	ldr	r3, [r7, #24]
	}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3720      	adds	r7, #32
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b088      	sub	sp, #32
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	60f8      	str	r0, [r7, #12]
 800ae86:	60b9      	str	r1, [r7, #8]
 800ae88:	607a      	str	r2, [r7, #4]
 800ae8a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	461a      	mov	r2, r3
 800ae96:	21a5      	movs	r1, #165	; 0xa5
 800ae98:	f002 fbcc 	bl	800d634 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aea6:	3b01      	subs	r3, #1
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	f023 0307 	bic.w	r3, r3, #7
 800aeb4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	f003 0307 	and.w	r3, r3, #7
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00a      	beq.n	800aed6 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec4:	f383 8811 	msr	BASEPRI, r3
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	617b      	str	r3, [r7, #20]
}
 800aed2:	bf00      	nop
 800aed4:	e7fe      	b.n	800aed4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aed6:	2300      	movs	r3, #0
 800aed8:	61fb      	str	r3, [r7, #28]
 800aeda:	e012      	b.n	800af02 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	4413      	add	r3, r2
 800aee2:	7819      	ldrb	r1, [r3, #0]
 800aee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	4413      	add	r3, r2
 800aeea:	3334      	adds	r3, #52	; 0x34
 800aeec:	460a      	mov	r2, r1
 800aeee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	4413      	add	r3, r2
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d006      	beq.n	800af0a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	3301      	adds	r3, #1
 800af00:	61fb      	str	r3, [r7, #28]
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	2b0f      	cmp	r3, #15
 800af06:	d9e9      	bls.n	800aedc <prvInitialiseNewTask+0x5e>
 800af08:	e000      	b.n	800af0c <prvInitialiseNewTask+0x8e>
		{
			break;
 800af0a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af16:	2b37      	cmp	r3, #55	; 0x37
 800af18:	d901      	bls.n	800af1e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af1a:	2337      	movs	r3, #55	; 0x37
 800af1c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af22:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af28:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2c:	2200      	movs	r2, #0
 800af2e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af32:	3304      	adds	r3, #4
 800af34:	4618      	mov	r0, r3
 800af36:	f7ff f94e 	bl	800a1d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	3318      	adds	r3, #24
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff f949 	bl	800a1d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af58:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5c:	2200      	movs	r2, #0
 800af5e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af62:	2200      	movs	r2, #0
 800af64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	68f9      	ldr	r1, [r7, #12]
 800af6c:	69b8      	ldr	r0, [r7, #24]
 800af6e:	f001 fa81 	bl	800c474 <pxPortInitialiseStack>
 800af72:	4602      	mov	r2, r0
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800af78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d002      	beq.n	800af84 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af84:	bf00      	nop
 800af86:	3720      	adds	r7, #32
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af94:	f001 fb62 	bl	800c65c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af98:	4b2d      	ldr	r3, [pc, #180]	; (800b050 <prvAddNewTaskToReadyList+0xc4>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	3301      	adds	r3, #1
 800af9e:	4a2c      	ldr	r2, [pc, #176]	; (800b050 <prvAddNewTaskToReadyList+0xc4>)
 800afa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800afa2:	4b2c      	ldr	r3, [pc, #176]	; (800b054 <prvAddNewTaskToReadyList+0xc8>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d109      	bne.n	800afbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800afaa:	4a2a      	ldr	r2, [pc, #168]	; (800b054 <prvAddNewTaskToReadyList+0xc8>)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800afb0:	4b27      	ldr	r3, [pc, #156]	; (800b050 <prvAddNewTaskToReadyList+0xc4>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d110      	bne.n	800afda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800afb8:	f000 fc94 	bl	800b8e4 <prvInitialiseTaskLists>
 800afbc:	e00d      	b.n	800afda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800afbe:	4b26      	ldr	r3, [pc, #152]	; (800b058 <prvAddNewTaskToReadyList+0xcc>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d109      	bne.n	800afda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800afc6:	4b23      	ldr	r3, [pc, #140]	; (800b054 <prvAddNewTaskToReadyList+0xc8>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d802      	bhi.n	800afda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800afd4:	4a1f      	ldr	r2, [pc, #124]	; (800b054 <prvAddNewTaskToReadyList+0xc8>)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800afda:	4b20      	ldr	r3, [pc, #128]	; (800b05c <prvAddNewTaskToReadyList+0xd0>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	3301      	adds	r3, #1
 800afe0:	4a1e      	ldr	r2, [pc, #120]	; (800b05c <prvAddNewTaskToReadyList+0xd0>)
 800afe2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800afe4:	4b1d      	ldr	r3, [pc, #116]	; (800b05c <prvAddNewTaskToReadyList+0xd0>)
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff0:	4b1b      	ldr	r3, [pc, #108]	; (800b060 <prvAddNewTaskToReadyList+0xd4>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d903      	bls.n	800b000 <prvAddNewTaskToReadyList+0x74>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800affc:	4a18      	ldr	r2, [pc, #96]	; (800b060 <prvAddNewTaskToReadyList+0xd4>)
 800affe:	6013      	str	r3, [r2, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b004:	4613      	mov	r3, r2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	4413      	add	r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4a15      	ldr	r2, [pc, #84]	; (800b064 <prvAddNewTaskToReadyList+0xd8>)
 800b00e:	441a      	add	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	3304      	adds	r3, #4
 800b014:	4619      	mov	r1, r3
 800b016:	4610      	mov	r0, r2
 800b018:	f7ff f8e9 	bl	800a1ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b01c:	f001 fb4e 	bl	800c6bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b020:	4b0d      	ldr	r3, [pc, #52]	; (800b058 <prvAddNewTaskToReadyList+0xcc>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00e      	beq.n	800b046 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b028:	4b0a      	ldr	r3, [pc, #40]	; (800b054 <prvAddNewTaskToReadyList+0xc8>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b032:	429a      	cmp	r2, r3
 800b034:	d207      	bcs.n	800b046 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b036:	4b0c      	ldr	r3, [pc, #48]	; (800b068 <prvAddNewTaskToReadyList+0xdc>)
 800b038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b03c:	601a      	str	r2, [r3, #0]
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b046:	bf00      	nop
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	200011bc 	.word	0x200011bc
 800b054:	20000ce8 	.word	0x20000ce8
 800b058:	200011c8 	.word	0x200011c8
 800b05c:	200011d8 	.word	0x200011d8
 800b060:	200011c4 	.word	0x200011c4
 800b064:	20000cec 	.word	0x20000cec
 800b068:	e000ed04 	.word	0xe000ed04

0800b06c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b08a      	sub	sp, #40	; 0x28
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b076:	2300      	movs	r3, #0
 800b078:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d10a      	bne.n	800b096 <vTaskDelayUntil+0x2a>
	__asm volatile
 800b080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	617b      	str	r3, [r7, #20]
}
 800b092:	bf00      	nop
 800b094:	e7fe      	b.n	800b094 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10a      	bne.n	800b0b2 <vTaskDelayUntil+0x46>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	613b      	str	r3, [r7, #16]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b0b2:	4b2a      	ldr	r3, [pc, #168]	; (800b15c <vTaskDelayUntil+0xf0>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00a      	beq.n	800b0d0 <vTaskDelayUntil+0x64>
	__asm volatile
 800b0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0be:	f383 8811 	msr	BASEPRI, r3
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	60fb      	str	r3, [r7, #12]
}
 800b0cc:	bf00      	nop
 800b0ce:	e7fe      	b.n	800b0ce <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b0d0:	f000 f8e4 	bl	800b29c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b0d4:	4b22      	ldr	r3, [pc, #136]	; (800b160 <vTaskDelayUntil+0xf4>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	683a      	ldr	r2, [r7, #0]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6a3a      	ldr	r2, [r7, #32]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d20b      	bcs.n	800b106 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	69fa      	ldr	r2, [r7, #28]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d211      	bcs.n	800b11c <vTaskDelayUntil+0xb0>
 800b0f8:	69fa      	ldr	r2, [r7, #28]
 800b0fa:	6a3b      	ldr	r3, [r7, #32]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d90d      	bls.n	800b11c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b100:	2301      	movs	r3, #1
 800b102:	627b      	str	r3, [r7, #36]	; 0x24
 800b104:	e00a      	b.n	800b11c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	69fa      	ldr	r2, [r7, #28]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d303      	bcc.n	800b118 <vTaskDelayUntil+0xac>
 800b110:	69fa      	ldr	r2, [r7, #28]
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	429a      	cmp	r2, r3
 800b116:	d901      	bls.n	800b11c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b118:	2301      	movs	r3, #1
 800b11a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	69fa      	ldr	r2, [r7, #28]
 800b120:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	2b00      	cmp	r3, #0
 800b126:	d006      	beq.n	800b136 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b128:	69fa      	ldr	r2, [r7, #28]
 800b12a:	6a3b      	ldr	r3, [r7, #32]
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	2100      	movs	r1, #0
 800b130:	4618      	mov	r0, r3
 800b132:	f000 fe39 	bl	800bda8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b136:	f000 f8bf 	bl	800b2b8 <xTaskResumeAll>
 800b13a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d107      	bne.n	800b152 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b142:	4b08      	ldr	r3, [pc, #32]	; (800b164 <vTaskDelayUntil+0xf8>)
 800b144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b148:	601a      	str	r2, [r3, #0]
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b152:	bf00      	nop
 800b154:	3728      	adds	r7, #40	; 0x28
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	200011e4 	.word	0x200011e4
 800b160:	200011c0 	.word	0x200011c0
 800b164:	e000ed04 	.word	0xe000ed04

0800b168 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b170:	2300      	movs	r3, #0
 800b172:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d017      	beq.n	800b1aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b17a:	4b13      	ldr	r3, [pc, #76]	; (800b1c8 <vTaskDelay+0x60>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00a      	beq.n	800b198 <vTaskDelay+0x30>
	__asm volatile
 800b182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b186:	f383 8811 	msr	BASEPRI, r3
 800b18a:	f3bf 8f6f 	isb	sy
 800b18e:	f3bf 8f4f 	dsb	sy
 800b192:	60bb      	str	r3, [r7, #8]
}
 800b194:	bf00      	nop
 800b196:	e7fe      	b.n	800b196 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b198:	f000 f880 	bl	800b29c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b19c:	2100      	movs	r1, #0
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fe02 	bl	800bda8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b1a4:	f000 f888 	bl	800b2b8 <xTaskResumeAll>
 800b1a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d107      	bne.n	800b1c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b1b0:	4b06      	ldr	r3, [pc, #24]	; (800b1cc <vTaskDelay+0x64>)
 800b1b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1b6:	601a      	str	r2, [r3, #0]
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1c0:	bf00      	nop
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	200011e4 	.word	0x200011e4
 800b1cc:	e000ed04 	.word	0xe000ed04

0800b1d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b08a      	sub	sp, #40	; 0x28
 800b1d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1de:	463a      	mov	r2, r7
 800b1e0:	1d39      	adds	r1, r7, #4
 800b1e2:	f107 0308 	add.w	r3, r7, #8
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fe ffa4 	bl	800a134 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	9202      	str	r2, [sp, #8]
 800b1f4:	9301      	str	r3, [sp, #4]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	9300      	str	r3, [sp, #0]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	460a      	mov	r2, r1
 800b1fe:	4921      	ldr	r1, [pc, #132]	; (800b284 <vTaskStartScheduler+0xb4>)
 800b200:	4821      	ldr	r0, [pc, #132]	; (800b288 <vTaskStartScheduler+0xb8>)
 800b202:	f7ff fd9b 	bl	800ad3c <xTaskCreateStatic>
 800b206:	4603      	mov	r3, r0
 800b208:	4a20      	ldr	r2, [pc, #128]	; (800b28c <vTaskStartScheduler+0xbc>)
 800b20a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b20c:	4b1f      	ldr	r3, [pc, #124]	; (800b28c <vTaskStartScheduler+0xbc>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b214:	2301      	movs	r3, #1
 800b216:	617b      	str	r3, [r7, #20]
 800b218:	e001      	b.n	800b21e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d102      	bne.n	800b22a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b224:	f000 fe14 	bl	800be50 <xTimerCreateTimerTask>
 800b228:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d116      	bne.n	800b25e <vTaskStartScheduler+0x8e>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	613b      	str	r3, [r7, #16]
}
 800b242:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b244:	4b12      	ldr	r3, [pc, #72]	; (800b290 <vTaskStartScheduler+0xc0>)
 800b246:	f04f 32ff 	mov.w	r2, #4294967295
 800b24a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b24c:	4b11      	ldr	r3, [pc, #68]	; (800b294 <vTaskStartScheduler+0xc4>)
 800b24e:	2201      	movs	r2, #1
 800b250:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b252:	4b11      	ldr	r3, [pc, #68]	; (800b298 <vTaskStartScheduler+0xc8>)
 800b254:	2200      	movs	r2, #0
 800b256:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b258:	f001 f98e 	bl	800c578 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b25c:	e00e      	b.n	800b27c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b264:	d10a      	bne.n	800b27c <vTaskStartScheduler+0xac>
	__asm volatile
 800b266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26a:	f383 8811 	msr	BASEPRI, r3
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f3bf 8f4f 	dsb	sy
 800b276:	60fb      	str	r3, [r7, #12]
}
 800b278:	bf00      	nop
 800b27a:	e7fe      	b.n	800b27a <vTaskStartScheduler+0xaa>
}
 800b27c:	bf00      	nop
 800b27e:	3718      	adds	r7, #24
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	0800e0e8 	.word	0x0800e0e8
 800b288:	0800b8b5 	.word	0x0800b8b5
 800b28c:	200011e0 	.word	0x200011e0
 800b290:	200011dc 	.word	0x200011dc
 800b294:	200011c8 	.word	0x200011c8
 800b298:	200011c0 	.word	0x200011c0

0800b29c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b29c:	b480      	push	{r7}
 800b29e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b2a0:	4b04      	ldr	r3, [pc, #16]	; (800b2b4 <vTaskSuspendAll+0x18>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	4a03      	ldr	r2, [pc, #12]	; (800b2b4 <vTaskSuspendAll+0x18>)
 800b2a8:	6013      	str	r3, [r2, #0]
}
 800b2aa:	bf00      	nop
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bc80      	pop	{r7}
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	200011e4 	.word	0x200011e4

0800b2b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b2c6:	4b42      	ldr	r3, [pc, #264]	; (800b3d0 <xTaskResumeAll+0x118>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10a      	bne.n	800b2e4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	603b      	str	r3, [r7, #0]
}
 800b2e0:	bf00      	nop
 800b2e2:	e7fe      	b.n	800b2e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2e4:	f001 f9ba 	bl	800c65c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2e8:	4b39      	ldr	r3, [pc, #228]	; (800b3d0 <xTaskResumeAll+0x118>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	4a38      	ldr	r2, [pc, #224]	; (800b3d0 <xTaskResumeAll+0x118>)
 800b2f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2f2:	4b37      	ldr	r3, [pc, #220]	; (800b3d0 <xTaskResumeAll+0x118>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d162      	bne.n	800b3c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2fa:	4b36      	ldr	r3, [pc, #216]	; (800b3d4 <xTaskResumeAll+0x11c>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d05e      	beq.n	800b3c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b302:	e02f      	b.n	800b364 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b304:	4b34      	ldr	r3, [pc, #208]	; (800b3d8 <xTaskResumeAll+0x120>)
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	3318      	adds	r3, #24
 800b310:	4618      	mov	r0, r3
 800b312:	f7fe ffc7 	bl	800a2a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3304      	adds	r3, #4
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fe ffc2 	bl	800a2a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b324:	4b2d      	ldr	r3, [pc, #180]	; (800b3dc <xTaskResumeAll+0x124>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d903      	bls.n	800b334 <xTaskResumeAll+0x7c>
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b330:	4a2a      	ldr	r2, [pc, #168]	; (800b3dc <xTaskResumeAll+0x124>)
 800b332:	6013      	str	r3, [r2, #0]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b338:	4613      	mov	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4a27      	ldr	r2, [pc, #156]	; (800b3e0 <xTaskResumeAll+0x128>)
 800b342:	441a      	add	r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	3304      	adds	r3, #4
 800b348:	4619      	mov	r1, r3
 800b34a:	4610      	mov	r0, r2
 800b34c:	f7fe ff4f 	bl	800a1ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b354:	4b23      	ldr	r3, [pc, #140]	; (800b3e4 <xTaskResumeAll+0x12c>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d302      	bcc.n	800b364 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b35e:	4b22      	ldr	r3, [pc, #136]	; (800b3e8 <xTaskResumeAll+0x130>)
 800b360:	2201      	movs	r2, #1
 800b362:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b364:	4b1c      	ldr	r3, [pc, #112]	; (800b3d8 <xTaskResumeAll+0x120>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1cb      	bne.n	800b304 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d001      	beq.n	800b376 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b372:	f000 fb8d 	bl	800ba90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b376:	4b1d      	ldr	r3, [pc, #116]	; (800b3ec <xTaskResumeAll+0x134>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d010      	beq.n	800b3a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b382:	f000 f845 	bl	800b410 <xTaskIncrementTick>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b38c:	4b16      	ldr	r3, [pc, #88]	; (800b3e8 <xTaskResumeAll+0x130>)
 800b38e:	2201      	movs	r2, #1
 800b390:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3b01      	subs	r3, #1
 800b396:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1f1      	bne.n	800b382 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b39e:	4b13      	ldr	r3, [pc, #76]	; (800b3ec <xTaskResumeAll+0x134>)
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3a4:	4b10      	ldr	r3, [pc, #64]	; (800b3e8 <xTaskResumeAll+0x130>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d009      	beq.n	800b3c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b3b0:	4b0f      	ldr	r3, [pc, #60]	; (800b3f0 <xTaskResumeAll+0x138>)
 800b3b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3c0:	f001 f97c 	bl	800c6bc <vPortExitCritical>

	return xAlreadyYielded;
 800b3c4:	68bb      	ldr	r3, [r7, #8]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	200011e4 	.word	0x200011e4
 800b3d4:	200011bc 	.word	0x200011bc
 800b3d8:	2000117c 	.word	0x2000117c
 800b3dc:	200011c4 	.word	0x200011c4
 800b3e0:	20000cec 	.word	0x20000cec
 800b3e4:	20000ce8 	.word	0x20000ce8
 800b3e8:	200011d0 	.word	0x200011d0
 800b3ec:	200011cc 	.word	0x200011cc
 800b3f0:	e000ed04 	.word	0xe000ed04

0800b3f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b3fa:	4b04      	ldr	r3, [pc, #16]	; (800b40c <xTaskGetTickCount+0x18>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b400:	687b      	ldr	r3, [r7, #4]
}
 800b402:	4618      	mov	r0, r3
 800b404:	370c      	adds	r7, #12
 800b406:	46bd      	mov	sp, r7
 800b408:	bc80      	pop	{r7}
 800b40a:	4770      	bx	lr
 800b40c:	200011c0 	.word	0x200011c0

0800b410 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b416:	2300      	movs	r3, #0
 800b418:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b41a:	4b51      	ldr	r3, [pc, #324]	; (800b560 <xTaskIncrementTick+0x150>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f040 808e 	bne.w	800b540 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b424:	4b4f      	ldr	r3, [pc, #316]	; (800b564 <xTaskIncrementTick+0x154>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3301      	adds	r3, #1
 800b42a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b42c:	4a4d      	ldr	r2, [pc, #308]	; (800b564 <xTaskIncrementTick+0x154>)
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d120      	bne.n	800b47a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b438:	4b4b      	ldr	r3, [pc, #300]	; (800b568 <xTaskIncrementTick+0x158>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00a      	beq.n	800b458 <xTaskIncrementTick+0x48>
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	603b      	str	r3, [r7, #0]
}
 800b454:	bf00      	nop
 800b456:	e7fe      	b.n	800b456 <xTaskIncrementTick+0x46>
 800b458:	4b43      	ldr	r3, [pc, #268]	; (800b568 <xTaskIncrementTick+0x158>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	60fb      	str	r3, [r7, #12]
 800b45e:	4b43      	ldr	r3, [pc, #268]	; (800b56c <xTaskIncrementTick+0x15c>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a41      	ldr	r2, [pc, #260]	; (800b568 <xTaskIncrementTick+0x158>)
 800b464:	6013      	str	r3, [r2, #0]
 800b466:	4a41      	ldr	r2, [pc, #260]	; (800b56c <xTaskIncrementTick+0x15c>)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6013      	str	r3, [r2, #0]
 800b46c:	4b40      	ldr	r3, [pc, #256]	; (800b570 <xTaskIncrementTick+0x160>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	3301      	adds	r3, #1
 800b472:	4a3f      	ldr	r2, [pc, #252]	; (800b570 <xTaskIncrementTick+0x160>)
 800b474:	6013      	str	r3, [r2, #0]
 800b476:	f000 fb0b 	bl	800ba90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b47a:	4b3e      	ldr	r3, [pc, #248]	; (800b574 <xTaskIncrementTick+0x164>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	429a      	cmp	r2, r3
 800b482:	d34e      	bcc.n	800b522 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b484:	4b38      	ldr	r3, [pc, #224]	; (800b568 <xTaskIncrementTick+0x158>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <xTaskIncrementTick+0x82>
 800b48e:	2301      	movs	r3, #1
 800b490:	e000      	b.n	800b494 <xTaskIncrementTick+0x84>
 800b492:	2300      	movs	r3, #0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d004      	beq.n	800b4a2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b498:	4b36      	ldr	r3, [pc, #216]	; (800b574 <xTaskIncrementTick+0x164>)
 800b49a:	f04f 32ff 	mov.w	r2, #4294967295
 800b49e:	601a      	str	r2, [r3, #0]
					break;
 800b4a0:	e03f      	b.n	800b522 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b4a2:	4b31      	ldr	r3, [pc, #196]	; (800b568 <xTaskIncrementTick+0x158>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b4b2:	693a      	ldr	r2, [r7, #16]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d203      	bcs.n	800b4c2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b4ba:	4a2e      	ldr	r2, [pc, #184]	; (800b574 <xTaskIncrementTick+0x164>)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6013      	str	r3, [r2, #0]
						break;
 800b4c0:	e02f      	b.n	800b522 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fe feec 	bl	800a2a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d004      	beq.n	800b4de <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	3318      	adds	r3, #24
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7fe fee3 	bl	800a2a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4e2:	4b25      	ldr	r3, [pc, #148]	; (800b578 <xTaskIncrementTick+0x168>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d903      	bls.n	800b4f2 <xTaskIncrementTick+0xe2>
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ee:	4a22      	ldr	r2, [pc, #136]	; (800b578 <xTaskIncrementTick+0x168>)
 800b4f0:	6013      	str	r3, [r2, #0]
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4a1f      	ldr	r2, [pc, #124]	; (800b57c <xTaskIncrementTick+0x16c>)
 800b500:	441a      	add	r2, r3
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	3304      	adds	r3, #4
 800b506:	4619      	mov	r1, r3
 800b508:	4610      	mov	r0, r2
 800b50a:	f7fe fe70 	bl	800a1ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b512:	4b1b      	ldr	r3, [pc, #108]	; (800b580 <xTaskIncrementTick+0x170>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	429a      	cmp	r2, r3
 800b51a:	d3b3      	bcc.n	800b484 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b51c:	2301      	movs	r3, #1
 800b51e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b520:	e7b0      	b.n	800b484 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b522:	4b17      	ldr	r3, [pc, #92]	; (800b580 <xTaskIncrementTick+0x170>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b528:	4914      	ldr	r1, [pc, #80]	; (800b57c <xTaskIncrementTick+0x16c>)
 800b52a:	4613      	mov	r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	4413      	add	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	440b      	add	r3, r1
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d907      	bls.n	800b54a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b53a:	2301      	movs	r3, #1
 800b53c:	617b      	str	r3, [r7, #20]
 800b53e:	e004      	b.n	800b54a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b540:	4b10      	ldr	r3, [pc, #64]	; (800b584 <xTaskIncrementTick+0x174>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	3301      	adds	r3, #1
 800b546:	4a0f      	ldr	r2, [pc, #60]	; (800b584 <xTaskIncrementTick+0x174>)
 800b548:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b54a:	4b0f      	ldr	r3, [pc, #60]	; (800b588 <xTaskIncrementTick+0x178>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b552:	2301      	movs	r3, #1
 800b554:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b556:	697b      	ldr	r3, [r7, #20]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3718      	adds	r7, #24
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	200011e4 	.word	0x200011e4
 800b564:	200011c0 	.word	0x200011c0
 800b568:	20001174 	.word	0x20001174
 800b56c:	20001178 	.word	0x20001178
 800b570:	200011d4 	.word	0x200011d4
 800b574:	200011dc 	.word	0x200011dc
 800b578:	200011c4 	.word	0x200011c4
 800b57c:	20000cec 	.word	0x20000cec
 800b580:	20000ce8 	.word	0x20000ce8
 800b584:	200011cc 	.word	0x200011cc
 800b588:	200011d0 	.word	0x200011d0

0800b58c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b592:	4b27      	ldr	r3, [pc, #156]	; (800b630 <vTaskSwitchContext+0xa4>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d003      	beq.n	800b5a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b59a:	4b26      	ldr	r3, [pc, #152]	; (800b634 <vTaskSwitchContext+0xa8>)
 800b59c:	2201      	movs	r2, #1
 800b59e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b5a0:	e041      	b.n	800b626 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b5a2:	4b24      	ldr	r3, [pc, #144]	; (800b634 <vTaskSwitchContext+0xa8>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b5a8:	4b23      	ldr	r3, [pc, #140]	; (800b638 <vTaskSwitchContext+0xac>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	60fb      	str	r3, [r7, #12]
 800b5ae:	e010      	b.n	800b5d2 <vTaskSwitchContext+0x46>
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10a      	bne.n	800b5cc <vTaskSwitchContext+0x40>
	__asm volatile
 800b5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	607b      	str	r3, [r7, #4]
}
 800b5c8:	bf00      	nop
 800b5ca:	e7fe      	b.n	800b5ca <vTaskSwitchContext+0x3e>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	60fb      	str	r3, [r7, #12]
 800b5d2:	491a      	ldr	r1, [pc, #104]	; (800b63c <vTaskSwitchContext+0xb0>)
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4413      	add	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	440b      	add	r3, r1
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d0e4      	beq.n	800b5b0 <vTaskSwitchContext+0x24>
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	4413      	add	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4a12      	ldr	r2, [pc, #72]	; (800b63c <vTaskSwitchContext+0xb0>)
 800b5f2:	4413      	add	r3, r2
 800b5f4:	60bb      	str	r3, [r7, #8]
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	685a      	ldr	r2, [r3, #4]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	605a      	str	r2, [r3, #4]
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	685a      	ldr	r2, [r3, #4]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	3308      	adds	r3, #8
 800b608:	429a      	cmp	r2, r3
 800b60a:	d104      	bne.n	800b616 <vTaskSwitchContext+0x8a>
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	685a      	ldr	r2, [r3, #4]
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	605a      	str	r2, [r3, #4]
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	4a08      	ldr	r2, [pc, #32]	; (800b640 <vTaskSwitchContext+0xb4>)
 800b61e:	6013      	str	r3, [r2, #0]
 800b620:	4a05      	ldr	r2, [pc, #20]	; (800b638 <vTaskSwitchContext+0xac>)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6013      	str	r3, [r2, #0]
}
 800b626:	bf00      	nop
 800b628:	3714      	adds	r7, #20
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bc80      	pop	{r7}
 800b62e:	4770      	bx	lr
 800b630:	200011e4 	.word	0x200011e4
 800b634:	200011d0 	.word	0x200011d0
 800b638:	200011c4 	.word	0x200011c4
 800b63c:	20000cec 	.word	0x20000cec
 800b640:	20000ce8 	.word	0x20000ce8

0800b644 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10a      	bne.n	800b66a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	60fb      	str	r3, [r7, #12]
}
 800b666:	bf00      	nop
 800b668:	e7fe      	b.n	800b668 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b66a:	4b07      	ldr	r3, [pc, #28]	; (800b688 <vTaskPlaceOnEventList+0x44>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	3318      	adds	r3, #24
 800b670:	4619      	mov	r1, r3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7fe fdde 	bl	800a234 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b678:	2101      	movs	r1, #1
 800b67a:	6838      	ldr	r0, [r7, #0]
 800b67c:	f000 fb94 	bl	800bda8 <prvAddCurrentTaskToDelayedList>
}
 800b680:	bf00      	nop
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	20000ce8 	.word	0x20000ce8

0800b68c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10a      	bne.n	800b6b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	617b      	str	r3, [r7, #20]
}
 800b6b0:	bf00      	nop
 800b6b2:	e7fe      	b.n	800b6b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6b4:	4b0a      	ldr	r3, [pc, #40]	; (800b6e0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	3318      	adds	r3, #24
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f7fe fd96 	bl	800a1ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d002      	beq.n	800b6ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b6ce:	6879      	ldr	r1, [r7, #4]
 800b6d0:	68b8      	ldr	r0, [r7, #8]
 800b6d2:	f000 fb69 	bl	800bda8 <prvAddCurrentTaskToDelayedList>
	}
 800b6d6:	bf00      	nop
 800b6d8:	3718      	adds	r7, #24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	20000ce8 	.word	0x20000ce8

0800b6e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b086      	sub	sp, #24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d10a      	bne.n	800b710 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	60fb      	str	r3, [r7, #12]
}
 800b70c:	bf00      	nop
 800b70e:	e7fe      	b.n	800b70e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	3318      	adds	r3, #24
 800b714:	4618      	mov	r0, r3
 800b716:	f7fe fdc5 	bl	800a2a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b71a:	4b1e      	ldr	r3, [pc, #120]	; (800b794 <xTaskRemoveFromEventList+0xb0>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d11d      	bne.n	800b75e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	3304      	adds	r3, #4
 800b726:	4618      	mov	r0, r3
 800b728:	f7fe fdbc 	bl	800a2a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b730:	4b19      	ldr	r3, [pc, #100]	; (800b798 <xTaskRemoveFromEventList+0xb4>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	429a      	cmp	r2, r3
 800b736:	d903      	bls.n	800b740 <xTaskRemoveFromEventList+0x5c>
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73c:	4a16      	ldr	r2, [pc, #88]	; (800b798 <xTaskRemoveFromEventList+0xb4>)
 800b73e:	6013      	str	r3, [r2, #0]
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b744:	4613      	mov	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4a13      	ldr	r2, [pc, #76]	; (800b79c <xTaskRemoveFromEventList+0xb8>)
 800b74e:	441a      	add	r2, r3
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	3304      	adds	r3, #4
 800b754:	4619      	mov	r1, r3
 800b756:	4610      	mov	r0, r2
 800b758:	f7fe fd49 	bl	800a1ee <vListInsertEnd>
 800b75c:	e005      	b.n	800b76a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	3318      	adds	r3, #24
 800b762:	4619      	mov	r1, r3
 800b764:	480e      	ldr	r0, [pc, #56]	; (800b7a0 <xTaskRemoveFromEventList+0xbc>)
 800b766:	f7fe fd42 	bl	800a1ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76e:	4b0d      	ldr	r3, [pc, #52]	; (800b7a4 <xTaskRemoveFromEventList+0xc0>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b774:	429a      	cmp	r2, r3
 800b776:	d905      	bls.n	800b784 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b778:	2301      	movs	r3, #1
 800b77a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b77c:	4b0a      	ldr	r3, [pc, #40]	; (800b7a8 <xTaskRemoveFromEventList+0xc4>)
 800b77e:	2201      	movs	r2, #1
 800b780:	601a      	str	r2, [r3, #0]
 800b782:	e001      	b.n	800b788 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b784:	2300      	movs	r3, #0
 800b786:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b788:	697b      	ldr	r3, [r7, #20]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3718      	adds	r7, #24
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	200011e4 	.word	0x200011e4
 800b798:	200011c4 	.word	0x200011c4
 800b79c:	20000cec 	.word	0x20000cec
 800b7a0:	2000117c 	.word	0x2000117c
 800b7a4:	20000ce8 	.word	0x20000ce8
 800b7a8:	200011d0 	.word	0x200011d0

0800b7ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b7b4:	4b06      	ldr	r3, [pc, #24]	; (800b7d0 <vTaskInternalSetTimeOutState+0x24>)
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7bc:	4b05      	ldr	r3, [pc, #20]	; (800b7d4 <vTaskInternalSetTimeOutState+0x28>)
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	605a      	str	r2, [r3, #4]
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bc80      	pop	{r7}
 800b7cc:	4770      	bx	lr
 800b7ce:	bf00      	nop
 800b7d0:	200011d4 	.word	0x200011d4
 800b7d4:	200011c0 	.word	0x200011c0

0800b7d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b088      	sub	sp, #32
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10a      	bne.n	800b7fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	613b      	str	r3, [r7, #16]
}
 800b7fa:	bf00      	nop
 800b7fc:	e7fe      	b.n	800b7fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10a      	bne.n	800b81a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	60fb      	str	r3, [r7, #12]
}
 800b816:	bf00      	nop
 800b818:	e7fe      	b.n	800b818 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b81a:	f000 ff1f 	bl	800c65c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b81e:	4b1d      	ldr	r3, [pc, #116]	; (800b894 <xTaskCheckForTimeOut+0xbc>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	69ba      	ldr	r2, [r7, #24]
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b836:	d102      	bne.n	800b83e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b838:	2300      	movs	r3, #0
 800b83a:	61fb      	str	r3, [r7, #28]
 800b83c:	e023      	b.n	800b886 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	4b15      	ldr	r3, [pc, #84]	; (800b898 <xTaskCheckForTimeOut+0xc0>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	429a      	cmp	r2, r3
 800b848:	d007      	beq.n	800b85a <xTaskCheckForTimeOut+0x82>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	69ba      	ldr	r2, [r7, #24]
 800b850:	429a      	cmp	r2, r3
 800b852:	d302      	bcc.n	800b85a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b854:	2301      	movs	r3, #1
 800b856:	61fb      	str	r3, [r7, #28]
 800b858:	e015      	b.n	800b886 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	429a      	cmp	r2, r3
 800b862:	d20b      	bcs.n	800b87c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	1ad2      	subs	r2, r2, r3
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f7ff ff9b 	bl	800b7ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b876:	2300      	movs	r3, #0
 800b878:	61fb      	str	r3, [r7, #28]
 800b87a:	e004      	b.n	800b886 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2200      	movs	r2, #0
 800b880:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b882:	2301      	movs	r3, #1
 800b884:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b886:	f000 ff19 	bl	800c6bc <vPortExitCritical>

	return xReturn;
 800b88a:	69fb      	ldr	r3, [r7, #28]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3720      	adds	r7, #32
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	200011c0 	.word	0x200011c0
 800b898:	200011d4 	.word	0x200011d4

0800b89c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b89c:	b480      	push	{r7}
 800b89e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b8a0:	4b03      	ldr	r3, [pc, #12]	; (800b8b0 <vTaskMissedYield+0x14>)
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	601a      	str	r2, [r3, #0]
}
 800b8a6:	bf00      	nop
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bc80      	pop	{r7}
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	200011d0 	.word	0x200011d0

0800b8b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8bc:	f000 f852 	bl	800b964 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8c0:	4b06      	ldr	r3, [pc, #24]	; (800b8dc <prvIdleTask+0x28>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d9f9      	bls.n	800b8bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8c8:	4b05      	ldr	r3, [pc, #20]	; (800b8e0 <prvIdleTask+0x2c>)
 800b8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ce:	601a      	str	r2, [r3, #0]
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8d8:	e7f0      	b.n	800b8bc <prvIdleTask+0x8>
 800b8da:	bf00      	nop
 800b8dc:	20000cec 	.word	0x20000cec
 800b8e0:	e000ed04 	.word	0xe000ed04

0800b8e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	607b      	str	r3, [r7, #4]
 800b8ee:	e00c      	b.n	800b90a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	4413      	add	r3, r2
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	4a12      	ldr	r2, [pc, #72]	; (800b944 <prvInitialiseTaskLists+0x60>)
 800b8fc:	4413      	add	r3, r2
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fe fc4a 	bl	800a198 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	3301      	adds	r3, #1
 800b908:	607b      	str	r3, [r7, #4]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b37      	cmp	r3, #55	; 0x37
 800b90e:	d9ef      	bls.n	800b8f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b910:	480d      	ldr	r0, [pc, #52]	; (800b948 <prvInitialiseTaskLists+0x64>)
 800b912:	f7fe fc41 	bl	800a198 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b916:	480d      	ldr	r0, [pc, #52]	; (800b94c <prvInitialiseTaskLists+0x68>)
 800b918:	f7fe fc3e 	bl	800a198 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b91c:	480c      	ldr	r0, [pc, #48]	; (800b950 <prvInitialiseTaskLists+0x6c>)
 800b91e:	f7fe fc3b 	bl	800a198 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b922:	480c      	ldr	r0, [pc, #48]	; (800b954 <prvInitialiseTaskLists+0x70>)
 800b924:	f7fe fc38 	bl	800a198 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b928:	480b      	ldr	r0, [pc, #44]	; (800b958 <prvInitialiseTaskLists+0x74>)
 800b92a:	f7fe fc35 	bl	800a198 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b92e:	4b0b      	ldr	r3, [pc, #44]	; (800b95c <prvInitialiseTaskLists+0x78>)
 800b930:	4a05      	ldr	r2, [pc, #20]	; (800b948 <prvInitialiseTaskLists+0x64>)
 800b932:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b934:	4b0a      	ldr	r3, [pc, #40]	; (800b960 <prvInitialiseTaskLists+0x7c>)
 800b936:	4a05      	ldr	r2, [pc, #20]	; (800b94c <prvInitialiseTaskLists+0x68>)
 800b938:	601a      	str	r2, [r3, #0]
}
 800b93a:	bf00      	nop
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	20000cec 	.word	0x20000cec
 800b948:	2000114c 	.word	0x2000114c
 800b94c:	20001160 	.word	0x20001160
 800b950:	2000117c 	.word	0x2000117c
 800b954:	20001190 	.word	0x20001190
 800b958:	200011a8 	.word	0x200011a8
 800b95c:	20001174 	.word	0x20001174
 800b960:	20001178 	.word	0x20001178

0800b964 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b96a:	e019      	b.n	800b9a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b96c:	f000 fe76 	bl	800c65c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b970:	4b10      	ldr	r3, [pc, #64]	; (800b9b4 <prvCheckTasksWaitingTermination+0x50>)
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	3304      	adds	r3, #4
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fe fc91 	bl	800a2a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b982:	4b0d      	ldr	r3, [pc, #52]	; (800b9b8 <prvCheckTasksWaitingTermination+0x54>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3b01      	subs	r3, #1
 800b988:	4a0b      	ldr	r2, [pc, #44]	; (800b9b8 <prvCheckTasksWaitingTermination+0x54>)
 800b98a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b98c:	4b0b      	ldr	r3, [pc, #44]	; (800b9bc <prvCheckTasksWaitingTermination+0x58>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	3b01      	subs	r3, #1
 800b992:	4a0a      	ldr	r2, [pc, #40]	; (800b9bc <prvCheckTasksWaitingTermination+0x58>)
 800b994:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b996:	f000 fe91 	bl	800c6bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f848 	bl	800ba30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9a0:	4b06      	ldr	r3, [pc, #24]	; (800b9bc <prvCheckTasksWaitingTermination+0x58>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1e1      	bne.n	800b96c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b9a8:	bf00      	nop
 800b9aa:	bf00      	nop
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	20001190 	.word	0x20001190
 800b9b8:	200011bc 	.word	0x200011bc
 800b9bc:	200011a4 	.word	0x200011a4

0800b9c0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b9cc:	e005      	b.n	800b9da <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	2ba5      	cmp	r3, #165	; 0xa5
 800b9e0:	d0f5      	beq.n	800b9ce <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	089b      	lsrs	r3, r3, #2
 800b9e6:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	b29b      	uxth	r3, r3
	}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bc80      	pop	{r7}
 800b9f4:	4770      	bx	lr
	...

0800b9f8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d102      	bne.n	800ba0c <uxTaskGetStackHighWaterMark+0x14>
 800ba06:	4b09      	ldr	r3, [pc, #36]	; (800ba2c <uxTaskGetStackHighWaterMark+0x34>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	e000      	b.n	800ba0e <uxTaskGetStackHighWaterMark+0x16>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba14:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800ba16:	6938      	ldr	r0, [r7, #16]
 800ba18:	f7ff ffd2 	bl	800b9c0 <prvTaskCheckFreeStackSpace>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800ba20:	68fb      	ldr	r3, [r7, #12]
	}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3718      	adds	r7, #24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	20000ce8 	.word	0x20000ce8

0800ba30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d108      	bne.n	800ba54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 ffcc 	bl	800c9e4 <vPortFree>
				vPortFree( pxTCB );
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 ffc9 	bl	800c9e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba52:	e018      	b.n	800ba86 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d103      	bne.n	800ba66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 ffc0 	bl	800c9e4 <vPortFree>
	}
 800ba64:	e00f      	b.n	800ba86 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d00a      	beq.n	800ba86 <prvDeleteTCB+0x56>
	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	60fb      	str	r3, [r7, #12]
}
 800ba82:	bf00      	nop
 800ba84:	e7fe      	b.n	800ba84 <prvDeleteTCB+0x54>
	}
 800ba86:	bf00      	nop
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
	...

0800ba90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba96:	4b0e      	ldr	r3, [pc, #56]	; (800bad0 <prvResetNextTaskUnblockTime+0x40>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d101      	bne.n	800baa4 <prvResetNextTaskUnblockTime+0x14>
 800baa0:	2301      	movs	r3, #1
 800baa2:	e000      	b.n	800baa6 <prvResetNextTaskUnblockTime+0x16>
 800baa4:	2300      	movs	r3, #0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d004      	beq.n	800bab4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800baaa:	4b0a      	ldr	r3, [pc, #40]	; (800bad4 <prvResetNextTaskUnblockTime+0x44>)
 800baac:	f04f 32ff 	mov.w	r2, #4294967295
 800bab0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bab2:	e008      	b.n	800bac6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bab4:	4b06      	ldr	r3, [pc, #24]	; (800bad0 <prvResetNextTaskUnblockTime+0x40>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	4a04      	ldr	r2, [pc, #16]	; (800bad4 <prvResetNextTaskUnblockTime+0x44>)
 800bac4:	6013      	str	r3, [r2, #0]
}
 800bac6:	bf00      	nop
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	bc80      	pop	{r7}
 800bace:	4770      	bx	lr
 800bad0:	20001174 	.word	0x20001174
 800bad4:	200011dc 	.word	0x200011dc

0800bad8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bade:	4b0b      	ldr	r3, [pc, #44]	; (800bb0c <xTaskGetSchedulerState+0x34>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d102      	bne.n	800baec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bae6:	2301      	movs	r3, #1
 800bae8:	607b      	str	r3, [r7, #4]
 800baea:	e008      	b.n	800bafe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baec:	4b08      	ldr	r3, [pc, #32]	; (800bb10 <xTaskGetSchedulerState+0x38>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d102      	bne.n	800bafa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800baf4:	2302      	movs	r3, #2
 800baf6:	607b      	str	r3, [r7, #4]
 800baf8:	e001      	b.n	800bafe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bafa:	2300      	movs	r3, #0
 800bafc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bafe:	687b      	ldr	r3, [r7, #4]
	}
 800bb00:	4618      	mov	r0, r3
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bc80      	pop	{r7}
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	200011c8 	.word	0x200011c8
 800bb10:	200011e4 	.word	0x200011e4

0800bb14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb20:	2300      	movs	r3, #0
 800bb22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d056      	beq.n	800bbd8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb2a:	4b2e      	ldr	r3, [pc, #184]	; (800bbe4 <xTaskPriorityDisinherit+0xd0>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	693a      	ldr	r2, [r7, #16]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d00a      	beq.n	800bb4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb38:	f383 8811 	msr	BASEPRI, r3
 800bb3c:	f3bf 8f6f 	isb	sy
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	60fb      	str	r3, [r7, #12]
}
 800bb46:	bf00      	nop
 800bb48:	e7fe      	b.n	800bb48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10a      	bne.n	800bb68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	60bb      	str	r3, [r7, #8]
}
 800bb64:	bf00      	nop
 800bb66:	e7fe      	b.n	800bb66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb6c:	1e5a      	subs	r2, r3, #1
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d02c      	beq.n	800bbd8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d128      	bne.n	800bbd8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	3304      	adds	r3, #4
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7fe fb8a 	bl	800a2a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba8:	4b0f      	ldr	r3, [pc, #60]	; (800bbe8 <xTaskPriorityDisinherit+0xd4>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d903      	bls.n	800bbb8 <xTaskPriorityDisinherit+0xa4>
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb4:	4a0c      	ldr	r2, [pc, #48]	; (800bbe8 <xTaskPriorityDisinherit+0xd4>)
 800bbb6:	6013      	str	r3, [r2, #0]
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	4413      	add	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	4a09      	ldr	r2, [pc, #36]	; (800bbec <xTaskPriorityDisinherit+0xd8>)
 800bbc6:	441a      	add	r2, r3
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	3304      	adds	r3, #4
 800bbcc:	4619      	mov	r1, r3
 800bbce:	4610      	mov	r0, r2
 800bbd0:	f7fe fb0d 	bl	800a1ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbd8:	697b      	ldr	r3, [r7, #20]
	}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3718      	adds	r7, #24
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	20000ce8 	.word	0x20000ce8
 800bbe8:	200011c4 	.word	0x200011c4
 800bbec:	20000cec 	.word	0x20000cec

0800bbf0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800bbfa:	f000 fd2f 	bl	800c65c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800bbfe:	4b1e      	ldr	r3, [pc, #120]	; (800bc78 <ulTaskNotifyTake+0x88>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d113      	bne.n	800bc30 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bc08:	4b1b      	ldr	r3, [pc, #108]	; (800bc78 <ulTaskNotifyTake+0x88>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00b      	beq.n	800bc30 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc18:	2101      	movs	r1, #1
 800bc1a:	6838      	ldr	r0, [r7, #0]
 800bc1c:	f000 f8c4 	bl	800bda8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bc20:	4b16      	ldr	r3, [pc, #88]	; (800bc7c <ulTaskNotifyTake+0x8c>)
 800bc22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc26:	601a      	str	r2, [r3, #0]
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bc30:	f000 fd44 	bl	800c6bc <vPortExitCritical>

		taskENTER_CRITICAL();
 800bc34:	f000 fd12 	bl	800c65c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800bc38:	4b0f      	ldr	r3, [pc, #60]	; (800bc78 <ulTaskNotifyTake+0x88>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc3e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d00c      	beq.n	800bc60 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d004      	beq.n	800bc56 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800bc4c:	4b0a      	ldr	r3, [pc, #40]	; (800bc78 <ulTaskNotifyTake+0x88>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2200      	movs	r2, #0
 800bc52:	655a      	str	r2, [r3, #84]	; 0x54
 800bc54:	e004      	b.n	800bc60 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800bc56:	4b08      	ldr	r3, [pc, #32]	; (800bc78 <ulTaskNotifyTake+0x88>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	3a01      	subs	r2, #1
 800bc5e:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bc60:	4b05      	ldr	r3, [pc, #20]	; (800bc78 <ulTaskNotifyTake+0x88>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800bc6a:	f000 fd27 	bl	800c6bc <vPortExitCritical>

		return ulReturn;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
	}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	20000ce8 	.word	0x20000ce8
 800bc7c:	e000ed04 	.word	0xe000ed04

0800bc80 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b08a      	sub	sp, #40	; 0x28
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10a      	bne.n	800bca6 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	61bb      	str	r3, [r7, #24]
}
 800bca2:	bf00      	nop
 800bca4:	e7fe      	b.n	800bca4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bca6:	f000 fd9b 	bl	800c7e0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800bcae:	f3ef 8211 	mrs	r2, BASEPRI
 800bcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb6:	f383 8811 	msr	BASEPRI, r3
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	617a      	str	r2, [r7, #20]
 800bcc4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bcc6:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcc8:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bccc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bcd0:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	2202      	movs	r2, #2
 800bcd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800bcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcde:	1c5a      	adds	r2, r3, #1
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bce4:	7ffb      	ldrb	r3, [r7, #31]
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d147      	bne.n	800bd7a <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d00a      	beq.n	800bd08 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800bcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf6:	f383 8811 	msr	BASEPRI, r3
 800bcfa:	f3bf 8f6f 	isb	sy
 800bcfe:	f3bf 8f4f 	dsb	sy
 800bd02:	60fb      	str	r3, [r7, #12]
}
 800bd04:	bf00      	nop
 800bd06:	e7fe      	b.n	800bd06 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd08:	4b21      	ldr	r3, [pc, #132]	; (800bd90 <vTaskNotifyGiveFromISR+0x110>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d11d      	bne.n	800bd4c <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd12:	3304      	adds	r3, #4
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7fe fac5 	bl	800a2a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1e:	4b1d      	ldr	r3, [pc, #116]	; (800bd94 <vTaskNotifyGiveFromISR+0x114>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d903      	bls.n	800bd2e <vTaskNotifyGiveFromISR+0xae>
 800bd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2a:	4a1a      	ldr	r2, [pc, #104]	; (800bd94 <vTaskNotifyGiveFromISR+0x114>)
 800bd2c:	6013      	str	r3, [r2, #0]
 800bd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd32:	4613      	mov	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4413      	add	r3, r2
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	4a17      	ldr	r2, [pc, #92]	; (800bd98 <vTaskNotifyGiveFromISR+0x118>)
 800bd3c:	441a      	add	r2, r3
 800bd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd40:	3304      	adds	r3, #4
 800bd42:	4619      	mov	r1, r3
 800bd44:	4610      	mov	r0, r2
 800bd46:	f7fe fa52 	bl	800a1ee <vListInsertEnd>
 800bd4a:	e005      	b.n	800bd58 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800bd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4e:	3318      	adds	r3, #24
 800bd50:	4619      	mov	r1, r3
 800bd52:	4812      	ldr	r0, [pc, #72]	; (800bd9c <vTaskNotifyGiveFromISR+0x11c>)
 800bd54:	f7fe fa4b 	bl	800a1ee <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd5c:	4b10      	ldr	r3, [pc, #64]	; (800bda0 <vTaskNotifyGiveFromISR+0x120>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d909      	bls.n	800bd7a <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d003      	beq.n	800bd74 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	e002      	b.n	800bd7a <vTaskNotifyGiveFromISR+0xfa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800bd74:	4b0b      	ldr	r3, [pc, #44]	; (800bda4 <vTaskNotifyGiveFromISR+0x124>)
 800bd76:	2201      	movs	r2, #1
 800bd78:	601a      	str	r2, [r3, #0]
 800bd7a:	6a3b      	ldr	r3, [r7, #32]
 800bd7c:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	f383 8811 	msr	BASEPRI, r3
}
 800bd84:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800bd86:	bf00      	nop
 800bd88:	3728      	adds	r7, #40	; 0x28
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	200011e4 	.word	0x200011e4
 800bd94:	200011c4 	.word	0x200011c4
 800bd98:	20000cec 	.word	0x20000cec
 800bd9c:	2000117c 	.word	0x2000117c
 800bda0:	20000ce8 	.word	0x20000ce8
 800bda4:	200011d0 	.word	0x200011d0

0800bda8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdb2:	4b21      	ldr	r3, [pc, #132]	; (800be38 <prvAddCurrentTaskToDelayedList+0x90>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdb8:	4b20      	ldr	r3, [pc, #128]	; (800be3c <prvAddCurrentTaskToDelayedList+0x94>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	3304      	adds	r3, #4
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fe fa70 	bl	800a2a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdca:	d10a      	bne.n	800bde2 <prvAddCurrentTaskToDelayedList+0x3a>
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d007      	beq.n	800bde2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdd2:	4b1a      	ldr	r3, [pc, #104]	; (800be3c <prvAddCurrentTaskToDelayedList+0x94>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3304      	adds	r3, #4
 800bdd8:	4619      	mov	r1, r3
 800bdda:	4819      	ldr	r0, [pc, #100]	; (800be40 <prvAddCurrentTaskToDelayedList+0x98>)
 800bddc:	f7fe fa07 	bl	800a1ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bde0:	e026      	b.n	800be30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4413      	add	r3, r2
 800bde8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bdea:	4b14      	ldr	r3, [pc, #80]	; (800be3c <prvAddCurrentTaskToDelayedList+0x94>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	68ba      	ldr	r2, [r7, #8]
 800bdf0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdf2:	68ba      	ldr	r2, [r7, #8]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d209      	bcs.n	800be0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdfa:	4b12      	ldr	r3, [pc, #72]	; (800be44 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	4b0f      	ldr	r3, [pc, #60]	; (800be3c <prvAddCurrentTaskToDelayedList+0x94>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	3304      	adds	r3, #4
 800be04:	4619      	mov	r1, r3
 800be06:	4610      	mov	r0, r2
 800be08:	f7fe fa14 	bl	800a234 <vListInsert>
}
 800be0c:	e010      	b.n	800be30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be0e:	4b0e      	ldr	r3, [pc, #56]	; (800be48 <prvAddCurrentTaskToDelayedList+0xa0>)
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	4b0a      	ldr	r3, [pc, #40]	; (800be3c <prvAddCurrentTaskToDelayedList+0x94>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	3304      	adds	r3, #4
 800be18:	4619      	mov	r1, r3
 800be1a:	4610      	mov	r0, r2
 800be1c:	f7fe fa0a 	bl	800a234 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be20:	4b0a      	ldr	r3, [pc, #40]	; (800be4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68ba      	ldr	r2, [r7, #8]
 800be26:	429a      	cmp	r2, r3
 800be28:	d202      	bcs.n	800be30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be2a:	4a08      	ldr	r2, [pc, #32]	; (800be4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	6013      	str	r3, [r2, #0]
}
 800be30:	bf00      	nop
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	200011c0 	.word	0x200011c0
 800be3c:	20000ce8 	.word	0x20000ce8
 800be40:	200011a8 	.word	0x200011a8
 800be44:	20001178 	.word	0x20001178
 800be48:	20001174 	.word	0x20001174
 800be4c:	200011dc 	.word	0x200011dc

0800be50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b08a      	sub	sp, #40	; 0x28
 800be54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be56:	2300      	movs	r3, #0
 800be58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be5a:	f000 facb 	bl	800c3f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800be5e:	4b1c      	ldr	r3, [pc, #112]	; (800bed0 <xTimerCreateTimerTask+0x80>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d021      	beq.n	800beaa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be66:	2300      	movs	r3, #0
 800be68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800be6e:	1d3a      	adds	r2, r7, #4
 800be70:	f107 0108 	add.w	r1, r7, #8
 800be74:	f107 030c 	add.w	r3, r7, #12
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fe f973 	bl	800a164 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800be7e:	6879      	ldr	r1, [r7, #4]
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	68fa      	ldr	r2, [r7, #12]
 800be84:	9202      	str	r2, [sp, #8]
 800be86:	9301      	str	r3, [sp, #4]
 800be88:	2302      	movs	r3, #2
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	2300      	movs	r3, #0
 800be8e:	460a      	mov	r2, r1
 800be90:	4910      	ldr	r1, [pc, #64]	; (800bed4 <xTimerCreateTimerTask+0x84>)
 800be92:	4811      	ldr	r0, [pc, #68]	; (800bed8 <xTimerCreateTimerTask+0x88>)
 800be94:	f7fe ff52 	bl	800ad3c <xTaskCreateStatic>
 800be98:	4603      	mov	r3, r0
 800be9a:	4a10      	ldr	r2, [pc, #64]	; (800bedc <xTimerCreateTimerTask+0x8c>)
 800be9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be9e:	4b0f      	ldr	r3, [pc, #60]	; (800bedc <xTimerCreateTimerTask+0x8c>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d001      	beq.n	800beaa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bea6:	2301      	movs	r3, #1
 800bea8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10a      	bne.n	800bec6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	613b      	str	r3, [r7, #16]
}
 800bec2:	bf00      	nop
 800bec4:	e7fe      	b.n	800bec4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bec6:	697b      	ldr	r3, [r7, #20]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3718      	adds	r7, #24
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	20001218 	.word	0x20001218
 800bed4:	0800e0f0 	.word	0x0800e0f0
 800bed8:	0800bffd 	.word	0x0800bffd
 800bedc:	2000121c 	.word	0x2000121c

0800bee0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b08a      	sub	sp, #40	; 0x28
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	607a      	str	r2, [r7, #4]
 800beec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800beee:	2300      	movs	r3, #0
 800bef0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <xTimerGenericCommand+0x2e>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	623b      	str	r3, [r7, #32]
}
 800bf0a:	bf00      	nop
 800bf0c:	e7fe      	b.n	800bf0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bf0e:	4b1a      	ldr	r3, [pc, #104]	; (800bf78 <xTimerGenericCommand+0x98>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d02a      	beq.n	800bf6c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	2b05      	cmp	r3, #5
 800bf26:	dc18      	bgt.n	800bf5a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf28:	f7ff fdd6 	bl	800bad8 <xTaskGetSchedulerState>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b02      	cmp	r3, #2
 800bf30:	d109      	bne.n	800bf46 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf32:	4b11      	ldr	r3, [pc, #68]	; (800bf78 <xTimerGenericCommand+0x98>)
 800bf34:	6818      	ldr	r0, [r3, #0]
 800bf36:	f107 0110 	add.w	r1, r7, #16
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf3e:	f7fe fb1b 	bl	800a578 <xQueueGenericSend>
 800bf42:	6278      	str	r0, [r7, #36]	; 0x24
 800bf44:	e012      	b.n	800bf6c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf46:	4b0c      	ldr	r3, [pc, #48]	; (800bf78 <xTimerGenericCommand+0x98>)
 800bf48:	6818      	ldr	r0, [r3, #0]
 800bf4a:	f107 0110 	add.w	r1, r7, #16
 800bf4e:	2300      	movs	r3, #0
 800bf50:	2200      	movs	r2, #0
 800bf52:	f7fe fb11 	bl	800a578 <xQueueGenericSend>
 800bf56:	6278      	str	r0, [r7, #36]	; 0x24
 800bf58:	e008      	b.n	800bf6c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf5a:	4b07      	ldr	r3, [pc, #28]	; (800bf78 <xTimerGenericCommand+0x98>)
 800bf5c:	6818      	ldr	r0, [r3, #0]
 800bf5e:	f107 0110 	add.w	r1, r7, #16
 800bf62:	2300      	movs	r3, #0
 800bf64:	683a      	ldr	r2, [r7, #0]
 800bf66:	f7fe fc05 	bl	800a774 <xQueueGenericSendFromISR>
 800bf6a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3728      	adds	r7, #40	; 0x28
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	20001218 	.word	0x20001218

0800bf7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b088      	sub	sp, #32
 800bf80:	af02      	add	r7, sp, #8
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf86:	4b1c      	ldr	r3, [pc, #112]	; (800bff8 <prvProcessExpiredTimer+0x7c>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	3304      	adds	r3, #4
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7fe f985 	bl	800a2a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	69db      	ldr	r3, [r3, #28]
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d122      	bne.n	800bfe8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	699a      	ldr	r2, [r3, #24]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	18d1      	adds	r1, r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	683a      	ldr	r2, [r7, #0]
 800bfae:	6978      	ldr	r0, [r7, #20]
 800bfb0:	f000 f8c8 	bl	800c144 <prvInsertTimerInActiveList>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d016      	beq.n	800bfe8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfba:	2300      	movs	r3, #0
 800bfbc:	9300      	str	r3, [sp, #0]
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	6978      	ldr	r0, [r7, #20]
 800bfc6:	f7ff ff8b 	bl	800bee0 <xTimerGenericCommand>
 800bfca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d10a      	bne.n	800bfe8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800bfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd6:	f383 8811 	msr	BASEPRI, r3
 800bfda:	f3bf 8f6f 	isb	sy
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	60fb      	str	r3, [r7, #12]
}
 800bfe4:	bf00      	nop
 800bfe6:	e7fe      	b.n	800bfe6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfec:	6978      	ldr	r0, [r7, #20]
 800bfee:	4798      	blx	r3
}
 800bff0:	bf00      	nop
 800bff2:	3718      	adds	r7, #24
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	20001210 	.word	0x20001210

0800bffc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c004:	f107 0308 	add.w	r3, r7, #8
 800c008:	4618      	mov	r0, r3
 800c00a:	f000 f857 	bl	800c0bc <prvGetNextExpireTime>
 800c00e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	4619      	mov	r1, r3
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f000 f803 	bl	800c020 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c01a:	f000 f8d5 	bl	800c1c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c01e:	e7f1      	b.n	800c004 <prvTimerTask+0x8>

0800c020 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c02a:	f7ff f937 	bl	800b29c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c02e:	f107 0308 	add.w	r3, r7, #8
 800c032:	4618      	mov	r0, r3
 800c034:	f000 f866 	bl	800c104 <prvSampleTimeNow>
 800c038:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d130      	bne.n	800c0a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d10a      	bne.n	800c05c <prvProcessTimerOrBlockTask+0x3c>
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d806      	bhi.n	800c05c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c04e:	f7ff f933 	bl	800b2b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c052:	68f9      	ldr	r1, [r7, #12]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f7ff ff91 	bl	800bf7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c05a:	e024      	b.n	800c0a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d008      	beq.n	800c074 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c062:	4b13      	ldr	r3, [pc, #76]	; (800c0b0 <prvProcessTimerOrBlockTask+0x90>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	bf0c      	ite	eq
 800c06c:	2301      	moveq	r3, #1
 800c06e:	2300      	movne	r3, #0
 800c070:	b2db      	uxtb	r3, r3
 800c072:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c074:	4b0f      	ldr	r3, [pc, #60]	; (800c0b4 <prvProcessTimerOrBlockTask+0x94>)
 800c076:	6818      	ldr	r0, [r3, #0]
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	1ad3      	subs	r3, r2, r3
 800c07e:	683a      	ldr	r2, [r7, #0]
 800c080:	4619      	mov	r1, r3
 800c082:	f7fe fe27 	bl	800acd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c086:	f7ff f917 	bl	800b2b8 <xTaskResumeAll>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10a      	bne.n	800c0a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c090:	4b09      	ldr	r3, [pc, #36]	; (800c0b8 <prvProcessTimerOrBlockTask+0x98>)
 800c092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c096:	601a      	str	r2, [r3, #0]
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	f3bf 8f6f 	isb	sy
}
 800c0a0:	e001      	b.n	800c0a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c0a2:	f7ff f909 	bl	800b2b8 <xTaskResumeAll>
}
 800c0a6:	bf00      	nop
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20001214 	.word	0x20001214
 800c0b4:	20001218 	.word	0x20001218
 800c0b8:	e000ed04 	.word	0xe000ed04

0800c0bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b085      	sub	sp, #20
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c0c4:	4b0e      	ldr	r3, [pc, #56]	; (800c100 <prvGetNextExpireTime+0x44>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	bf0c      	ite	eq
 800c0ce:	2301      	moveq	r3, #1
 800c0d0:	2300      	movne	r3, #0
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d105      	bne.n	800c0ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0e2:	4b07      	ldr	r3, [pc, #28]	; (800c100 <prvGetNextExpireTime+0x44>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	60fb      	str	r3, [r7, #12]
 800c0ec:	e001      	b.n	800c0f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3714      	adds	r7, #20
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bc80      	pop	{r7}
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	20001210 	.word	0x20001210

0800c104 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c10c:	f7ff f972 	bl	800b3f4 <xTaskGetTickCount>
 800c110:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c112:	4b0b      	ldr	r3, [pc, #44]	; (800c140 <prvSampleTimeNow+0x3c>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	68fa      	ldr	r2, [r7, #12]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d205      	bcs.n	800c128 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c11c:	f000 f908 	bl	800c330 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2201      	movs	r2, #1
 800c124:	601a      	str	r2, [r3, #0]
 800c126:	e002      	b.n	800c12e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c12e:	4a04      	ldr	r2, [pc, #16]	; (800c140 <prvSampleTimeNow+0x3c>)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c134:	68fb      	ldr	r3, [r7, #12]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	20001220 	.word	0x20001220

0800c144 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b086      	sub	sp, #24
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c152:	2300      	movs	r3, #0
 800c154:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c162:	68ba      	ldr	r2, [r7, #8]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	429a      	cmp	r2, r3
 800c168:	d812      	bhi.n	800c190 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	1ad2      	subs	r2, r2, r3
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	699b      	ldr	r3, [r3, #24]
 800c174:	429a      	cmp	r2, r3
 800c176:	d302      	bcc.n	800c17e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c178:	2301      	movs	r3, #1
 800c17a:	617b      	str	r3, [r7, #20]
 800c17c:	e01b      	b.n	800c1b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c17e:	4b10      	ldr	r3, [pc, #64]	; (800c1c0 <prvInsertTimerInActiveList+0x7c>)
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	3304      	adds	r3, #4
 800c186:	4619      	mov	r1, r3
 800c188:	4610      	mov	r0, r2
 800c18a:	f7fe f853 	bl	800a234 <vListInsert>
 800c18e:	e012      	b.n	800c1b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	429a      	cmp	r2, r3
 800c196:	d206      	bcs.n	800c1a6 <prvInsertTimerInActiveList+0x62>
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d302      	bcc.n	800c1a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	617b      	str	r3, [r7, #20]
 800c1a4:	e007      	b.n	800c1b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1a6:	4b07      	ldr	r3, [pc, #28]	; (800c1c4 <prvInsertTimerInActiveList+0x80>)
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	4610      	mov	r0, r2
 800c1b2:	f7fe f83f 	bl	800a234 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c1b6:	697b      	ldr	r3, [r7, #20]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3718      	adds	r7, #24
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	20001214 	.word	0x20001214
 800c1c4:	20001210 	.word	0x20001210

0800c1c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b08e      	sub	sp, #56	; 0x38
 800c1cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1ce:	e09d      	b.n	800c30c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	da18      	bge.n	800c208 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c1d6:	1d3b      	adds	r3, r7, #4
 800c1d8:	3304      	adds	r3, #4
 800c1da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d10a      	bne.n	800c1f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e6:	f383 8811 	msr	BASEPRI, r3
 800c1ea:	f3bf 8f6f 	isb	sy
 800c1ee:	f3bf 8f4f 	dsb	sy
 800c1f2:	61fb      	str	r3, [r7, #28]
}
 800c1f4:	bf00      	nop
 800c1f6:	e7fe      	b.n	800c1f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1fe:	6850      	ldr	r0, [r2, #4]
 800c200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c202:	6892      	ldr	r2, [r2, #8]
 800c204:	4611      	mov	r1, r2
 800c206:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	db7d      	blt.n	800c30a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c214:	695b      	ldr	r3, [r3, #20]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d004      	beq.n	800c224 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21c:	3304      	adds	r3, #4
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fe f840 	bl	800a2a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c224:	463b      	mov	r3, r7
 800c226:	4618      	mov	r0, r3
 800c228:	f7ff ff6c 	bl	800c104 <prvSampleTimeNow>
 800c22c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b09      	cmp	r3, #9
 800c232:	d86b      	bhi.n	800c30c <prvProcessReceivedCommands+0x144>
 800c234:	a201      	add	r2, pc, #4	; (adr r2, 800c23c <prvProcessReceivedCommands+0x74>)
 800c236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c23a:	bf00      	nop
 800c23c:	0800c265 	.word	0x0800c265
 800c240:	0800c265 	.word	0x0800c265
 800c244:	0800c265 	.word	0x0800c265
 800c248:	0800c30d 	.word	0x0800c30d
 800c24c:	0800c2c1 	.word	0x0800c2c1
 800c250:	0800c2f9 	.word	0x0800c2f9
 800c254:	0800c265 	.word	0x0800c265
 800c258:	0800c265 	.word	0x0800c265
 800c25c:	0800c30d 	.word	0x0800c30d
 800c260:	0800c2c1 	.word	0x0800c2c1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	18d1      	adds	r1, r2, r3
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c272:	f7ff ff67 	bl	800c144 <prvInsertTimerInActiveList>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d047      	beq.n	800c30c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c282:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c286:	69db      	ldr	r3, [r3, #28]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d13f      	bne.n	800c30c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	699b      	ldr	r3, [r3, #24]
 800c292:	441a      	add	r2, r3
 800c294:	2300      	movs	r3, #0
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	2300      	movs	r3, #0
 800c29a:	2100      	movs	r1, #0
 800c29c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c29e:	f7ff fe1f 	bl	800bee0 <xTimerGenericCommand>
 800c2a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c2a4:	6a3b      	ldr	r3, [r7, #32]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d130      	bne.n	800c30c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800c2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ae:	f383 8811 	msr	BASEPRI, r3
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	f3bf 8f4f 	dsb	sy
 800c2ba:	61bb      	str	r3, [r7, #24]
}
 800c2bc:	bf00      	nop
 800c2be:	e7fe      	b.n	800c2be <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c8:	699b      	ldr	r3, [r3, #24]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d10a      	bne.n	800c2e4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800c2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d2:	f383 8811 	msr	BASEPRI, r3
 800c2d6:	f3bf 8f6f 	isb	sy
 800c2da:	f3bf 8f4f 	dsb	sy
 800c2de:	617b      	str	r3, [r7, #20]
}
 800c2e0:	bf00      	nop
 800c2e2:	e7fe      	b.n	800c2e2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e6:	699a      	ldr	r2, [r3, #24]
 800c2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ea:	18d1      	adds	r1, r2, r3
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2f2:	f7ff ff27 	bl	800c144 <prvInsertTimerInActiveList>
					break;
 800c2f6:	e009      	b.n	800c30c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d104      	bne.n	800c30c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800c302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c304:	f000 fb6e 	bl	800c9e4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c308:	e000      	b.n	800c30c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c30a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c30c:	4b07      	ldr	r3, [pc, #28]	; (800c32c <prvProcessReceivedCommands+0x164>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	1d39      	adds	r1, r7, #4
 800c312:	2200      	movs	r2, #0
 800c314:	4618      	mov	r0, r3
 800c316:	f7fe fac5 	bl	800a8a4 <xQueueReceive>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	f47f af57 	bne.w	800c1d0 <prvProcessReceivedCommands+0x8>
	}
}
 800c322:	bf00      	nop
 800c324:	bf00      	nop
 800c326:	3730      	adds	r7, #48	; 0x30
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	20001218 	.word	0x20001218

0800c330 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b088      	sub	sp, #32
 800c334:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c336:	e045      	b.n	800c3c4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c338:	4b2c      	ldr	r3, [pc, #176]	; (800c3ec <prvSwitchTimerLists+0xbc>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c342:	4b2a      	ldr	r3, [pc, #168]	; (800c3ec <prvSwitchTimerLists+0xbc>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	3304      	adds	r3, #4
 800c350:	4618      	mov	r0, r3
 800c352:	f7fd ffa7 	bl	800a2a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	69db      	ldr	r3, [r3, #28]
 800c362:	2b01      	cmp	r3, #1
 800c364:	d12e      	bne.n	800c3c4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	699b      	ldr	r3, [r3, #24]
 800c36a:	693a      	ldr	r2, [r7, #16]
 800c36c:	4413      	add	r3, r2
 800c36e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c370:	68ba      	ldr	r2, [r7, #8]
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	429a      	cmp	r2, r3
 800c376:	d90e      	bls.n	800c396 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	68fa      	ldr	r2, [r7, #12]
 800c382:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c384:	4b19      	ldr	r3, [pc, #100]	; (800c3ec <prvSwitchTimerLists+0xbc>)
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	3304      	adds	r3, #4
 800c38c:	4619      	mov	r1, r3
 800c38e:	4610      	mov	r0, r2
 800c390:	f7fd ff50 	bl	800a234 <vListInsert>
 800c394:	e016      	b.n	800c3c4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c396:	2300      	movs	r3, #0
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	2300      	movs	r3, #0
 800c39c:	693a      	ldr	r2, [r7, #16]
 800c39e:	2100      	movs	r1, #0
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	f7ff fd9d 	bl	800bee0 <xTimerGenericCommand>
 800c3a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10a      	bne.n	800c3c4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	603b      	str	r3, [r7, #0]
}
 800c3c0:	bf00      	nop
 800c3c2:	e7fe      	b.n	800c3c2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3c4:	4b09      	ldr	r3, [pc, #36]	; (800c3ec <prvSwitchTimerLists+0xbc>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1b4      	bne.n	800c338 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c3ce:	4b07      	ldr	r3, [pc, #28]	; (800c3ec <prvSwitchTimerLists+0xbc>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c3d4:	4b06      	ldr	r3, [pc, #24]	; (800c3f0 <prvSwitchTimerLists+0xc0>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a04      	ldr	r2, [pc, #16]	; (800c3ec <prvSwitchTimerLists+0xbc>)
 800c3da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c3dc:	4a04      	ldr	r2, [pc, #16]	; (800c3f0 <prvSwitchTimerLists+0xc0>)
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	6013      	str	r3, [r2, #0]
}
 800c3e2:	bf00      	nop
 800c3e4:	3718      	adds	r7, #24
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20001210 	.word	0x20001210
 800c3f0:	20001214 	.word	0x20001214

0800c3f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c3fa:	f000 f92f 	bl	800c65c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c3fe:	4b15      	ldr	r3, [pc, #84]	; (800c454 <prvCheckForValidListAndQueue+0x60>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d120      	bne.n	800c448 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c406:	4814      	ldr	r0, [pc, #80]	; (800c458 <prvCheckForValidListAndQueue+0x64>)
 800c408:	f7fd fec6 	bl	800a198 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c40c:	4813      	ldr	r0, [pc, #76]	; (800c45c <prvCheckForValidListAndQueue+0x68>)
 800c40e:	f7fd fec3 	bl	800a198 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c412:	4b13      	ldr	r3, [pc, #76]	; (800c460 <prvCheckForValidListAndQueue+0x6c>)
 800c414:	4a10      	ldr	r2, [pc, #64]	; (800c458 <prvCheckForValidListAndQueue+0x64>)
 800c416:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c418:	4b12      	ldr	r3, [pc, #72]	; (800c464 <prvCheckForValidListAndQueue+0x70>)
 800c41a:	4a10      	ldr	r2, [pc, #64]	; (800c45c <prvCheckForValidListAndQueue+0x68>)
 800c41c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c41e:	2300      	movs	r3, #0
 800c420:	9300      	str	r3, [sp, #0]
 800c422:	4b11      	ldr	r3, [pc, #68]	; (800c468 <prvCheckForValidListAndQueue+0x74>)
 800c424:	4a11      	ldr	r2, [pc, #68]	; (800c46c <prvCheckForValidListAndQueue+0x78>)
 800c426:	2110      	movs	r1, #16
 800c428:	200a      	movs	r0, #10
 800c42a:	f7fd ffcd 	bl	800a3c8 <xQueueGenericCreateStatic>
 800c42e:	4603      	mov	r3, r0
 800c430:	4a08      	ldr	r2, [pc, #32]	; (800c454 <prvCheckForValidListAndQueue+0x60>)
 800c432:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c434:	4b07      	ldr	r3, [pc, #28]	; (800c454 <prvCheckForValidListAndQueue+0x60>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d005      	beq.n	800c448 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c43c:	4b05      	ldr	r3, [pc, #20]	; (800c454 <prvCheckForValidListAndQueue+0x60>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	490b      	ldr	r1, [pc, #44]	; (800c470 <prvCheckForValidListAndQueue+0x7c>)
 800c442:	4618      	mov	r0, r3
 800c444:	f7fe fc1e 	bl	800ac84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c448:	f000 f938 	bl	800c6bc <vPortExitCritical>
}
 800c44c:	bf00      	nop
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	20001218 	.word	0x20001218
 800c458:	200011e8 	.word	0x200011e8
 800c45c:	200011fc 	.word	0x200011fc
 800c460:	20001210 	.word	0x20001210
 800c464:	20001214 	.word	0x20001214
 800c468:	200012c4 	.word	0x200012c4
 800c46c:	20001224 	.word	0x20001224
 800c470:	0800e0f8 	.word	0x0800e0f8

0800c474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	3b04      	subs	r3, #4
 800c484:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c48c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	3b04      	subs	r3, #4
 800c492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	f023 0201 	bic.w	r2, r3, #1
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	3b04      	subs	r3, #4
 800c4a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c4a4:	4a08      	ldr	r2, [pc, #32]	; (800c4c8 <pxPortInitialiseStack+0x54>)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	3b14      	subs	r3, #20
 800c4ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	3b20      	subs	r3, #32
 800c4ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3714      	adds	r7, #20
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bc80      	pop	{r7}
 800c4c6:	4770      	bx	lr
 800c4c8:	0800c4cd 	.word	0x0800c4cd

0800c4cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b085      	sub	sp, #20
 800c4d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c4d6:	4b12      	ldr	r3, [pc, #72]	; (800c520 <prvTaskExitError+0x54>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4de:	d00a      	beq.n	800c4f6 <prvTaskExitError+0x2a>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	60fb      	str	r3, [r7, #12]
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <prvTaskExitError+0x28>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	60bb      	str	r3, [r7, #8]
}
 800c508:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c50a:	bf00      	nop
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d0fc      	beq.n	800c50c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c512:	bf00      	nop
 800c514:	bf00      	nop
 800c516:	3714      	adds	r7, #20
 800c518:	46bd      	mov	sp, r7
 800c51a:	bc80      	pop	{r7}
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop
 800c520:	20000128 	.word	0x20000128
	...

0800c530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c530:	4b07      	ldr	r3, [pc, #28]	; (800c550 <pxCurrentTCBConst2>)
 800c532:	6819      	ldr	r1, [r3, #0]
 800c534:	6808      	ldr	r0, [r1, #0]
 800c536:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c53a:	f380 8809 	msr	PSP, r0
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f04f 0000 	mov.w	r0, #0
 800c546:	f380 8811 	msr	BASEPRI, r0
 800c54a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c54e:	4770      	bx	lr

0800c550 <pxCurrentTCBConst2>:
 800c550:	20000ce8 	.word	0x20000ce8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c554:	bf00      	nop
 800c556:	bf00      	nop

0800c558 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c558:	4806      	ldr	r0, [pc, #24]	; (800c574 <prvPortStartFirstTask+0x1c>)
 800c55a:	6800      	ldr	r0, [r0, #0]
 800c55c:	6800      	ldr	r0, [r0, #0]
 800c55e:	f380 8808 	msr	MSP, r0
 800c562:	b662      	cpsie	i
 800c564:	b661      	cpsie	f
 800c566:	f3bf 8f4f 	dsb	sy
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	df00      	svc	0
 800c570:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c572:	bf00      	nop
 800c574:	e000ed08 	.word	0xe000ed08

0800c578 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c57e:	4b32      	ldr	r3, [pc, #200]	; (800c648 <xPortStartScheduler+0xd0>)
 800c580:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	b2db      	uxtb	r3, r3
 800c588:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	22ff      	movs	r2, #255	; 0xff
 800c58e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	b2db      	uxtb	r3, r3
 800c596:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c598:	78fb      	ldrb	r3, [r7, #3]
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c5a0:	b2da      	uxtb	r2, r3
 800c5a2:	4b2a      	ldr	r3, [pc, #168]	; (800c64c <xPortStartScheduler+0xd4>)
 800c5a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c5a6:	4b2a      	ldr	r3, [pc, #168]	; (800c650 <xPortStartScheduler+0xd8>)
 800c5a8:	2207      	movs	r2, #7
 800c5aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5ac:	e009      	b.n	800c5c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c5ae:	4b28      	ldr	r3, [pc, #160]	; (800c650 <xPortStartScheduler+0xd8>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	3b01      	subs	r3, #1
 800c5b4:	4a26      	ldr	r2, [pc, #152]	; (800c650 <xPortStartScheduler+0xd8>)
 800c5b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c5b8:	78fb      	ldrb	r3, [r7, #3]
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	005b      	lsls	r3, r3, #1
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5c2:	78fb      	ldrb	r3, [r7, #3]
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5ca:	2b80      	cmp	r3, #128	; 0x80
 800c5cc:	d0ef      	beq.n	800c5ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c5ce:	4b20      	ldr	r3, [pc, #128]	; (800c650 <xPortStartScheduler+0xd8>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f1c3 0307 	rsb	r3, r3, #7
 800c5d6:	2b04      	cmp	r3, #4
 800c5d8:	d00a      	beq.n	800c5f0 <xPortStartScheduler+0x78>
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	60bb      	str	r3, [r7, #8]
}
 800c5ec:	bf00      	nop
 800c5ee:	e7fe      	b.n	800c5ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c5f0:	4b17      	ldr	r3, [pc, #92]	; (800c650 <xPortStartScheduler+0xd8>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	021b      	lsls	r3, r3, #8
 800c5f6:	4a16      	ldr	r2, [pc, #88]	; (800c650 <xPortStartScheduler+0xd8>)
 800c5f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c5fa:	4b15      	ldr	r3, [pc, #84]	; (800c650 <xPortStartScheduler+0xd8>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c602:	4a13      	ldr	r2, [pc, #76]	; (800c650 <xPortStartScheduler+0xd8>)
 800c604:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	b2da      	uxtb	r2, r3
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c60e:	4b11      	ldr	r3, [pc, #68]	; (800c654 <xPortStartScheduler+0xdc>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a10      	ldr	r2, [pc, #64]	; (800c654 <xPortStartScheduler+0xdc>)
 800c614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c618:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c61a:	4b0e      	ldr	r3, [pc, #56]	; (800c654 <xPortStartScheduler+0xdc>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4a0d      	ldr	r2, [pc, #52]	; (800c654 <xPortStartScheduler+0xdc>)
 800c620:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c624:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c626:	f000 f8b9 	bl	800c79c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c62a:	4b0b      	ldr	r3, [pc, #44]	; (800c658 <xPortStartScheduler+0xe0>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c630:	f7ff ff92 	bl	800c558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c634:	f7fe ffaa 	bl	800b58c <vTaskSwitchContext>
	prvTaskExitError();
 800c638:	f7ff ff48 	bl	800c4cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	e000e400 	.word	0xe000e400
 800c64c:	20001314 	.word	0x20001314
 800c650:	20001318 	.word	0x20001318
 800c654:	e000ed20 	.word	0xe000ed20
 800c658:	20000128 	.word	0x20000128

0800c65c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
	__asm volatile
 800c662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c666:	f383 8811 	msr	BASEPRI, r3
 800c66a:	f3bf 8f6f 	isb	sy
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	607b      	str	r3, [r7, #4]
}
 800c674:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c676:	4b0f      	ldr	r3, [pc, #60]	; (800c6b4 <vPortEnterCritical+0x58>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3301      	adds	r3, #1
 800c67c:	4a0d      	ldr	r2, [pc, #52]	; (800c6b4 <vPortEnterCritical+0x58>)
 800c67e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c680:	4b0c      	ldr	r3, [pc, #48]	; (800c6b4 <vPortEnterCritical+0x58>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b01      	cmp	r3, #1
 800c686:	d10f      	bne.n	800c6a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c688:	4b0b      	ldr	r3, [pc, #44]	; (800c6b8 <vPortEnterCritical+0x5c>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d00a      	beq.n	800c6a8 <vPortEnterCritical+0x4c>
	__asm volatile
 800c692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c696:	f383 8811 	msr	BASEPRI, r3
 800c69a:	f3bf 8f6f 	isb	sy
 800c69e:	f3bf 8f4f 	dsb	sy
 800c6a2:	603b      	str	r3, [r7, #0]
}
 800c6a4:	bf00      	nop
 800c6a6:	e7fe      	b.n	800c6a6 <vPortEnterCritical+0x4a>
	}
}
 800c6a8:	bf00      	nop
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bc80      	pop	{r7}
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	20000128 	.word	0x20000128
 800c6b8:	e000ed04 	.word	0xe000ed04

0800c6bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c6c2:	4b11      	ldr	r3, [pc, #68]	; (800c708 <vPortExitCritical+0x4c>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d10a      	bne.n	800c6e0 <vPortExitCritical+0x24>
	__asm volatile
 800c6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ce:	f383 8811 	msr	BASEPRI, r3
 800c6d2:	f3bf 8f6f 	isb	sy
 800c6d6:	f3bf 8f4f 	dsb	sy
 800c6da:	607b      	str	r3, [r7, #4]
}
 800c6dc:	bf00      	nop
 800c6de:	e7fe      	b.n	800c6de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c6e0:	4b09      	ldr	r3, [pc, #36]	; (800c708 <vPortExitCritical+0x4c>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	4a08      	ldr	r2, [pc, #32]	; (800c708 <vPortExitCritical+0x4c>)
 800c6e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c6ea:	4b07      	ldr	r3, [pc, #28]	; (800c708 <vPortExitCritical+0x4c>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d105      	bne.n	800c6fe <vPortExitCritical+0x42>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	f383 8811 	msr	BASEPRI, r3
}
 800c6fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c6fe:	bf00      	nop
 800c700:	370c      	adds	r7, #12
 800c702:	46bd      	mov	sp, r7
 800c704:	bc80      	pop	{r7}
 800c706:	4770      	bx	lr
 800c708:	20000128 	.word	0x20000128
 800c70c:	00000000 	.word	0x00000000

0800c710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c710:	f3ef 8009 	mrs	r0, PSP
 800c714:	f3bf 8f6f 	isb	sy
 800c718:	4b0d      	ldr	r3, [pc, #52]	; (800c750 <pxCurrentTCBConst>)
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c720:	6010      	str	r0, [r2, #0]
 800c722:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c726:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c72a:	f380 8811 	msr	BASEPRI, r0
 800c72e:	f7fe ff2d 	bl	800b58c <vTaskSwitchContext>
 800c732:	f04f 0000 	mov.w	r0, #0
 800c736:	f380 8811 	msr	BASEPRI, r0
 800c73a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c73e:	6819      	ldr	r1, [r3, #0]
 800c740:	6808      	ldr	r0, [r1, #0]
 800c742:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c746:	f380 8809 	msr	PSP, r0
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	4770      	bx	lr

0800c750 <pxCurrentTCBConst>:
 800c750:	20000ce8 	.word	0x20000ce8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c754:	bf00      	nop
 800c756:	bf00      	nop

0800c758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
	__asm volatile
 800c75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	607b      	str	r3, [r7, #4]
}
 800c770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c772:	f7fe fe4d 	bl	800b410 <xTaskIncrementTick>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d003      	beq.n	800c784 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c77c:	4b06      	ldr	r3, [pc, #24]	; (800c798 <SysTick_Handler+0x40>)
 800c77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c782:	601a      	str	r2, [r3, #0]
 800c784:	2300      	movs	r3, #0
 800c786:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	f383 8811 	msr	BASEPRI, r3
}
 800c78e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c790:	bf00      	nop
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	e000ed04 	.word	0xe000ed04

0800c79c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c79c:	b480      	push	{r7}
 800c79e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c7a0:	4b0a      	ldr	r3, [pc, #40]	; (800c7cc <vPortSetupTimerInterrupt+0x30>)
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c7a6:	4b0a      	ldr	r3, [pc, #40]	; (800c7d0 <vPortSetupTimerInterrupt+0x34>)
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c7ac:	4b09      	ldr	r3, [pc, #36]	; (800c7d4 <vPortSetupTimerInterrupt+0x38>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a09      	ldr	r2, [pc, #36]	; (800c7d8 <vPortSetupTimerInterrupt+0x3c>)
 800c7b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7b6:	099b      	lsrs	r3, r3, #6
 800c7b8:	4a08      	ldr	r2, [pc, #32]	; (800c7dc <vPortSetupTimerInterrupt+0x40>)
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c7be:	4b03      	ldr	r3, [pc, #12]	; (800c7cc <vPortSetupTimerInterrupt+0x30>)
 800c7c0:	2207      	movs	r2, #7
 800c7c2:	601a      	str	r2, [r3, #0]
}
 800c7c4:	bf00      	nop
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bc80      	pop	{r7}
 800c7ca:	4770      	bx	lr
 800c7cc:	e000e010 	.word	0xe000e010
 800c7d0:	e000e018 	.word	0xe000e018
 800c7d4:	2000000c 	.word	0x2000000c
 800c7d8:	10624dd3 	.word	0x10624dd3
 800c7dc:	e000e014 	.word	0xe000e014

0800c7e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b085      	sub	sp, #20
 800c7e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c7e6:	f3ef 8305 	mrs	r3, IPSR
 800c7ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2b0f      	cmp	r3, #15
 800c7f0:	d914      	bls.n	800c81c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7f2:	4a16      	ldr	r2, [pc, #88]	; (800c84c <vPortValidateInterruptPriority+0x6c>)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7fc:	4b14      	ldr	r3, [pc, #80]	; (800c850 <vPortValidateInterruptPriority+0x70>)
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	7afa      	ldrb	r2, [r7, #11]
 800c802:	429a      	cmp	r2, r3
 800c804:	d20a      	bcs.n	800c81c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	607b      	str	r3, [r7, #4]
}
 800c818:	bf00      	nop
 800c81a:	e7fe      	b.n	800c81a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c81c:	4b0d      	ldr	r3, [pc, #52]	; (800c854 <vPortValidateInterruptPriority+0x74>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c824:	4b0c      	ldr	r3, [pc, #48]	; (800c858 <vPortValidateInterruptPriority+0x78>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d90a      	bls.n	800c842 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c830:	f383 8811 	msr	BASEPRI, r3
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	603b      	str	r3, [r7, #0]
}
 800c83e:	bf00      	nop
 800c840:	e7fe      	b.n	800c840 <vPortValidateInterruptPriority+0x60>
	}
 800c842:	bf00      	nop
 800c844:	3714      	adds	r7, #20
 800c846:	46bd      	mov	sp, r7
 800c848:	bc80      	pop	{r7}
 800c84a:	4770      	bx	lr
 800c84c:	e000e3f0 	.word	0xe000e3f0
 800c850:	20001314 	.word	0x20001314
 800c854:	e000ed0c 	.word	0xe000ed0c
 800c858:	20001318 	.word	0x20001318

0800c85c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b08a      	sub	sp, #40	; 0x28
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c864:	2300      	movs	r3, #0
 800c866:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c868:	f7fe fd18 	bl	800b29c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c86c:	4b58      	ldr	r3, [pc, #352]	; (800c9d0 <pvPortMalloc+0x174>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d101      	bne.n	800c878 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c874:	f000 f910 	bl	800ca98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c878:	4b56      	ldr	r3, [pc, #344]	; (800c9d4 <pvPortMalloc+0x178>)
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4013      	ands	r3, r2
 800c880:	2b00      	cmp	r3, #0
 800c882:	f040 808e 	bne.w	800c9a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d01d      	beq.n	800c8c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c88c:	2208      	movs	r2, #8
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4413      	add	r3, r2
 800c892:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f003 0307 	and.w	r3, r3, #7
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d014      	beq.n	800c8c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f023 0307 	bic.w	r3, r3, #7
 800c8a4:	3308      	adds	r3, #8
 800c8a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f003 0307 	and.w	r3, r3, #7
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00a      	beq.n	800c8c8 <pvPortMalloc+0x6c>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	617b      	str	r3, [r7, #20]
}
 800c8c4:	bf00      	nop
 800c8c6:	e7fe      	b.n	800c8c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d069      	beq.n	800c9a2 <pvPortMalloc+0x146>
 800c8ce:	4b42      	ldr	r3, [pc, #264]	; (800c9d8 <pvPortMalloc+0x17c>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d864      	bhi.n	800c9a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8d8:	4b40      	ldr	r3, [pc, #256]	; (800c9dc <pvPortMalloc+0x180>)
 800c8da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8dc:	4b3f      	ldr	r3, [pc, #252]	; (800c9dc <pvPortMalloc+0x180>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8e2:	e004      	b.n	800c8ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d903      	bls.n	800c900 <pvPortMalloc+0xa4>
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d1f1      	bne.n	800c8e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c900:	4b33      	ldr	r3, [pc, #204]	; (800c9d0 <pvPortMalloc+0x174>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c906:	429a      	cmp	r2, r3
 800c908:	d04b      	beq.n	800c9a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c90a:	6a3b      	ldr	r3, [r7, #32]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2208      	movs	r2, #8
 800c910:	4413      	add	r3, r2
 800c912:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	6a3b      	ldr	r3, [r7, #32]
 800c91a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91e:	685a      	ldr	r2, [r3, #4]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	1ad2      	subs	r2, r2, r3
 800c924:	2308      	movs	r3, #8
 800c926:	005b      	lsls	r3, r3, #1
 800c928:	429a      	cmp	r2, r3
 800c92a:	d91f      	bls.n	800c96c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c92c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	4413      	add	r3, r2
 800c932:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	f003 0307 	and.w	r3, r3, #7
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d00a      	beq.n	800c954 <pvPortMalloc+0xf8>
	__asm volatile
 800c93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c942:	f383 8811 	msr	BASEPRI, r3
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	613b      	str	r3, [r7, #16]
}
 800c950:	bf00      	nop
 800c952:	e7fe      	b.n	800c952 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	685a      	ldr	r2, [r3, #4]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	1ad2      	subs	r2, r2, r3
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c966:	69b8      	ldr	r0, [r7, #24]
 800c968:	f000 f8f8 	bl	800cb5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c96c:	4b1a      	ldr	r3, [pc, #104]	; (800c9d8 <pvPortMalloc+0x17c>)
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	4a18      	ldr	r2, [pc, #96]	; (800c9d8 <pvPortMalloc+0x17c>)
 800c978:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c97a:	4b17      	ldr	r3, [pc, #92]	; (800c9d8 <pvPortMalloc+0x17c>)
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	4b18      	ldr	r3, [pc, #96]	; (800c9e0 <pvPortMalloc+0x184>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	429a      	cmp	r2, r3
 800c984:	d203      	bcs.n	800c98e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c986:	4b14      	ldr	r3, [pc, #80]	; (800c9d8 <pvPortMalloc+0x17c>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a15      	ldr	r2, [pc, #84]	; (800c9e0 <pvPortMalloc+0x184>)
 800c98c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c990:	685a      	ldr	r2, [r3, #4]
 800c992:	4b10      	ldr	r3, [pc, #64]	; (800c9d4 <pvPortMalloc+0x178>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	431a      	orrs	r2, r3
 800c998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99e:	2200      	movs	r2, #0
 800c9a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c9a2:	f7fe fc89 	bl	800b2b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	f003 0307 	and.w	r3, r3, #7
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00a      	beq.n	800c9c6 <pvPortMalloc+0x16a>
	__asm volatile
 800c9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	60fb      	str	r3, [r7, #12]
}
 800c9c2:	bf00      	nop
 800c9c4:	e7fe      	b.n	800c9c4 <pvPortMalloc+0x168>
	return pvReturn;
 800c9c6:	69fb      	ldr	r3, [r7, #28]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3728      	adds	r7, #40	; 0x28
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	20003324 	.word	0x20003324
 800c9d4:	20003330 	.word	0x20003330
 800c9d8:	20003328 	.word	0x20003328
 800c9dc:	2000331c 	.word	0x2000331c
 800c9e0:	2000332c 	.word	0x2000332c

0800c9e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d048      	beq.n	800ca88 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9f6:	2308      	movs	r3, #8
 800c9f8:	425b      	negs	r3, r3
 800c9fa:	697a      	ldr	r2, [r7, #20]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	685a      	ldr	r2, [r3, #4]
 800ca08:	4b21      	ldr	r3, [pc, #132]	; (800ca90 <vPortFree+0xac>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4013      	ands	r3, r2
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d10a      	bne.n	800ca28 <vPortFree+0x44>
	__asm volatile
 800ca12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca16:	f383 8811 	msr	BASEPRI, r3
 800ca1a:	f3bf 8f6f 	isb	sy
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	60fb      	str	r3, [r7, #12]
}
 800ca24:	bf00      	nop
 800ca26:	e7fe      	b.n	800ca26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d00a      	beq.n	800ca46 <vPortFree+0x62>
	__asm volatile
 800ca30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca34:	f383 8811 	msr	BASEPRI, r3
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	60bb      	str	r3, [r7, #8]
}
 800ca42:	bf00      	nop
 800ca44:	e7fe      	b.n	800ca44 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	685a      	ldr	r2, [r3, #4]
 800ca4a:	4b11      	ldr	r3, [pc, #68]	; (800ca90 <vPortFree+0xac>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4013      	ands	r3, r2
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d019      	beq.n	800ca88 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d115      	bne.n	800ca88 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	685a      	ldr	r2, [r3, #4]
 800ca60:	4b0b      	ldr	r3, [pc, #44]	; (800ca90 <vPortFree+0xac>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	43db      	mvns	r3, r3
 800ca66:	401a      	ands	r2, r3
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca6c:	f7fe fc16 	bl	800b29c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	685a      	ldr	r2, [r3, #4]
 800ca74:	4b07      	ldr	r3, [pc, #28]	; (800ca94 <vPortFree+0xb0>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4413      	add	r3, r2
 800ca7a:	4a06      	ldr	r2, [pc, #24]	; (800ca94 <vPortFree+0xb0>)
 800ca7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca7e:	6938      	ldr	r0, [r7, #16]
 800ca80:	f000 f86c 	bl	800cb5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ca84:	f7fe fc18 	bl	800b2b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca88:	bf00      	nop
 800ca8a:	3718      	adds	r7, #24
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}
 800ca90:	20003330 	.word	0x20003330
 800ca94:	20003328 	.word	0x20003328

0800ca98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b085      	sub	sp, #20
 800ca9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800caa2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800caa4:	4b27      	ldr	r3, [pc, #156]	; (800cb44 <prvHeapInit+0xac>)
 800caa6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f003 0307 	and.w	r3, r3, #7
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00c      	beq.n	800cacc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	3307      	adds	r3, #7
 800cab6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f023 0307 	bic.w	r3, r3, #7
 800cabe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	1ad3      	subs	r3, r2, r3
 800cac6:	4a1f      	ldr	r2, [pc, #124]	; (800cb44 <prvHeapInit+0xac>)
 800cac8:	4413      	add	r3, r2
 800caca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cad0:	4a1d      	ldr	r2, [pc, #116]	; (800cb48 <prvHeapInit+0xb0>)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cad6:	4b1c      	ldr	r3, [pc, #112]	; (800cb48 <prvHeapInit+0xb0>)
 800cad8:	2200      	movs	r2, #0
 800cada:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	68ba      	ldr	r2, [r7, #8]
 800cae0:	4413      	add	r3, r2
 800cae2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cae4:	2208      	movs	r2, #8
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	1a9b      	subs	r3, r3, r2
 800caea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f023 0307 	bic.w	r3, r3, #7
 800caf2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	4a15      	ldr	r2, [pc, #84]	; (800cb4c <prvHeapInit+0xb4>)
 800caf8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cafa:	4b14      	ldr	r3, [pc, #80]	; (800cb4c <prvHeapInit+0xb4>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2200      	movs	r2, #0
 800cb00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb02:	4b12      	ldr	r3, [pc, #72]	; (800cb4c <prvHeapInit+0xb4>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2200      	movs	r2, #0
 800cb08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	1ad2      	subs	r2, r2, r3
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb18:	4b0c      	ldr	r3, [pc, #48]	; (800cb4c <prvHeapInit+0xb4>)
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	4a0a      	ldr	r2, [pc, #40]	; (800cb50 <prvHeapInit+0xb8>)
 800cb26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	4a09      	ldr	r2, [pc, #36]	; (800cb54 <prvHeapInit+0xbc>)
 800cb2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb30:	4b09      	ldr	r3, [pc, #36]	; (800cb58 <prvHeapInit+0xc0>)
 800cb32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb36:	601a      	str	r2, [r3, #0]
}
 800cb38:	bf00      	nop
 800cb3a:	3714      	adds	r7, #20
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bc80      	pop	{r7}
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	2000131c 	.word	0x2000131c
 800cb48:	2000331c 	.word	0x2000331c
 800cb4c:	20003324 	.word	0x20003324
 800cb50:	2000332c 	.word	0x2000332c
 800cb54:	20003328 	.word	0x20003328
 800cb58:	20003330 	.word	0x20003330

0800cb5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b085      	sub	sp, #20
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb64:	4b27      	ldr	r3, [pc, #156]	; (800cc04 <prvInsertBlockIntoFreeList+0xa8>)
 800cb66:	60fb      	str	r3, [r7, #12]
 800cb68:	e002      	b.n	800cb70 <prvInsertBlockIntoFreeList+0x14>
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	60fb      	str	r3, [r7, #12]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d8f7      	bhi.n	800cb6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	68ba      	ldr	r2, [r7, #8]
 800cb84:	4413      	add	r3, r2
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d108      	bne.n	800cb9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	685a      	ldr	r2, [r3, #4]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	441a      	add	r2, r3
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	68ba      	ldr	r2, [r7, #8]
 800cba8:	441a      	add	r2, r3
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d118      	bne.n	800cbe4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	4b14      	ldr	r3, [pc, #80]	; (800cc08 <prvInsertBlockIntoFreeList+0xac>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d00d      	beq.n	800cbda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	685a      	ldr	r2, [r3, #4]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	441a      	add	r2, r3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	601a      	str	r2, [r3, #0]
 800cbd8:	e008      	b.n	800cbec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbda:	4b0b      	ldr	r3, [pc, #44]	; (800cc08 <prvInsertBlockIntoFreeList+0xac>)
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	601a      	str	r2, [r3, #0]
 800cbe2:	e003      	b.n	800cbec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cbec:	68fa      	ldr	r2, [r7, #12]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d002      	beq.n	800cbfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbfa:	bf00      	nop
 800cbfc:	3714      	adds	r7, #20
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bc80      	pop	{r7}
 800cc02:	4770      	bx	lr
 800cc04:	2000331c 	.word	0x2000331c
 800cc08:	20003324 	.word	0x20003324

0800cc0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cc10:	2200      	movs	r2, #0
 800cc12:	4912      	ldr	r1, [pc, #72]	; (800cc5c <MX_USB_DEVICE_Init+0x50>)
 800cc14:	4812      	ldr	r0, [pc, #72]	; (800cc60 <MX_USB_DEVICE_Init+0x54>)
 800cc16:	f7fc f82e 	bl	8008c76 <USBD_Init>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d001      	beq.n	800cc24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cc20:	f7f3 ff6e 	bl	8000b00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cc24:	490f      	ldr	r1, [pc, #60]	; (800cc64 <MX_USB_DEVICE_Init+0x58>)
 800cc26:	480e      	ldr	r0, [pc, #56]	; (800cc60 <MX_USB_DEVICE_Init+0x54>)
 800cc28:	f7fc f850 	bl	8008ccc <USBD_RegisterClass>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d001      	beq.n	800cc36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cc32:	f7f3 ff65 	bl	8000b00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cc36:	490c      	ldr	r1, [pc, #48]	; (800cc68 <MX_USB_DEVICE_Init+0x5c>)
 800cc38:	4809      	ldr	r0, [pc, #36]	; (800cc60 <MX_USB_DEVICE_Init+0x54>)
 800cc3a:	f7fb ff81 	bl	8008b40 <USBD_CDC_RegisterInterface>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d001      	beq.n	800cc48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cc44:	f7f3 ff5c 	bl	8000b00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc48:	4805      	ldr	r0, [pc, #20]	; (800cc60 <MX_USB_DEVICE_Init+0x54>)
 800cc4a:	f7fc f858 	bl	8008cfe <USBD_Start>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d001      	beq.n	800cc58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cc54:	f7f3 ff54 	bl	8000b00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc58:	bf00      	nop
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	2000013c 	.word	0x2000013c
 800cc60:	20003834 	.word	0x20003834
 800cc64:	20000024 	.word	0x20000024
 800cc68:	2000012c 	.word	0x2000012c

0800cc6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc70:	2200      	movs	r2, #0
 800cc72:	4905      	ldr	r1, [pc, #20]	; (800cc88 <CDC_Init_FS+0x1c>)
 800cc74:	4805      	ldr	r0, [pc, #20]	; (800cc8c <CDC_Init_FS+0x20>)
 800cc76:	f7fb ff79 	bl	8008b6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc7a:	4905      	ldr	r1, [pc, #20]	; (800cc90 <CDC_Init_FS+0x24>)
 800cc7c:	4803      	ldr	r0, [pc, #12]	; (800cc8c <CDC_Init_FS+0x20>)
 800cc7e:	f7fb ff8e 	bl	8008b9e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	20003ee0 	.word	0x20003ee0
 800cc8c:	20003834 	.word	0x20003834
 800cc90:	20003af8 	.word	0x20003af8

0800cc94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc94:	b480      	push	{r7}
 800cc96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bc80      	pop	{r7}
 800cca0:	4770      	bx	lr
	...

0800cca4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	4603      	mov	r3, r0
 800ccac:	6039      	str	r1, [r7, #0]
 800ccae:	71fb      	strb	r3, [r7, #7]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ccb4:	79fb      	ldrb	r3, [r7, #7]
 800ccb6:	2b23      	cmp	r3, #35	; 0x23
 800ccb8:	d84a      	bhi.n	800cd50 <CDC_Control_FS+0xac>
 800ccba:	a201      	add	r2, pc, #4	; (adr r2, 800ccc0 <CDC_Control_FS+0x1c>)
 800ccbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc0:	0800cd51 	.word	0x0800cd51
 800ccc4:	0800cd51 	.word	0x0800cd51
 800ccc8:	0800cd51 	.word	0x0800cd51
 800cccc:	0800cd51 	.word	0x0800cd51
 800ccd0:	0800cd51 	.word	0x0800cd51
 800ccd4:	0800cd51 	.word	0x0800cd51
 800ccd8:	0800cd51 	.word	0x0800cd51
 800ccdc:	0800cd51 	.word	0x0800cd51
 800cce0:	0800cd51 	.word	0x0800cd51
 800cce4:	0800cd51 	.word	0x0800cd51
 800cce8:	0800cd51 	.word	0x0800cd51
 800ccec:	0800cd51 	.word	0x0800cd51
 800ccf0:	0800cd51 	.word	0x0800cd51
 800ccf4:	0800cd51 	.word	0x0800cd51
 800ccf8:	0800cd51 	.word	0x0800cd51
 800ccfc:	0800cd51 	.word	0x0800cd51
 800cd00:	0800cd51 	.word	0x0800cd51
 800cd04:	0800cd51 	.word	0x0800cd51
 800cd08:	0800cd51 	.word	0x0800cd51
 800cd0c:	0800cd51 	.word	0x0800cd51
 800cd10:	0800cd51 	.word	0x0800cd51
 800cd14:	0800cd51 	.word	0x0800cd51
 800cd18:	0800cd51 	.word	0x0800cd51
 800cd1c:	0800cd51 	.word	0x0800cd51
 800cd20:	0800cd51 	.word	0x0800cd51
 800cd24:	0800cd51 	.word	0x0800cd51
 800cd28:	0800cd51 	.word	0x0800cd51
 800cd2c:	0800cd51 	.word	0x0800cd51
 800cd30:	0800cd51 	.word	0x0800cd51
 800cd34:	0800cd51 	.word	0x0800cd51
 800cd38:	0800cd51 	.word	0x0800cd51
 800cd3c:	0800cd51 	.word	0x0800cd51
 800cd40:	0800cd51 	.word	0x0800cd51
 800cd44:	0800cd51 	.word	0x0800cd51
 800cd48:	0800cd51 	.word	0x0800cd51
 800cd4c:	0800cd51 	.word	0x0800cd51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd50:	bf00      	nop
  }

  return (USBD_OK);
 800cd52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bc80      	pop	{r7}
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop

0800cd60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800cd6e:	2300      	movs	r3, #0
 800cd70:	60fb      	str	r3, [r7, #12]
 800cd72:	e00c      	b.n	800cd8e <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800cd74:	4b14      	ldr	r3, [pc, #80]	; (800cdc8 <CDC_Receive_FS+0x68>)
 800cd76:	6818      	ldr	r0, [r3, #0]
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	18d1      	adds	r1, r2, r3
 800cd7e:	f107 0208 	add.w	r2, r7, #8
 800cd82:	2300      	movs	r3, #0
 800cd84:	f7fd fcf6 	bl	800a774 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	60fb      	str	r3, [r7, #12]
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d3ed      	bcc.n	800cd74 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd98:	6879      	ldr	r1, [r7, #4]
 800cd9a:	480c      	ldr	r0, [pc, #48]	; (800cdcc <CDC_Receive_FS+0x6c>)
 800cd9c:	f7fb feff 	bl	8008b9e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cda0:	480a      	ldr	r0, [pc, #40]	; (800cdcc <CDC_Receive_FS+0x6c>)
 800cda2:	f7fb ff3e 	bl	8008c22 <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d007      	beq.n	800cdbc <CDC_Receive_FS+0x5c>
 800cdac:	4b08      	ldr	r3, [pc, #32]	; (800cdd0 <CDC_Receive_FS+0x70>)
 800cdae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdb2:	601a      	str	r2, [r3, #0]
 800cdb4:	f3bf 8f4f 	dsb	sy
 800cdb8:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800cdbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	200035f8 	.word	0x200035f8
 800cdcc:	20003834 	.word	0x20003834
 800cdd0:	e000ed04 	.word	0xe000ed04

0800cdd4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	460b      	mov	r3, r1
 800cdde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cde0:	2300      	movs	r3, #0
 800cde2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cde4:	4b0d      	ldr	r3, [pc, #52]	; (800ce1c <CDC_Transmit_FS+0x48>)
 800cde6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d001      	beq.n	800cdfa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e00b      	b.n	800ce12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cdfa:	887b      	ldrh	r3, [r7, #2]
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	6879      	ldr	r1, [r7, #4]
 800ce00:	4806      	ldr	r0, [pc, #24]	; (800ce1c <CDC_Transmit_FS+0x48>)
 800ce02:	f7fb feb3 	bl	8008b6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ce06:	4805      	ldr	r0, [pc, #20]	; (800ce1c <CDC_Transmit_FS+0x48>)
 800ce08:	f7fb fedc 	bl	8008bc4 <USBD_CDC_TransmitPacket>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ce10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	20003834 	.word	0x20003834

0800ce20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	4603      	mov	r3, r0
 800ce28:	6039      	str	r1, [r7, #0]
 800ce2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	2212      	movs	r2, #18
 800ce30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ce32:	4b03      	ldr	r3, [pc, #12]	; (800ce40 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	370c      	adds	r7, #12
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bc80      	pop	{r7}
 800ce3c:	4770      	bx	lr
 800ce3e:	bf00      	nop
 800ce40:	20000158 	.word	0x20000158

0800ce44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b083      	sub	sp, #12
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	6039      	str	r1, [r7, #0]
 800ce4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	2204      	movs	r2, #4
 800ce54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce56:	4b03      	ldr	r3, [pc, #12]	; (800ce64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	370c      	adds	r7, #12
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bc80      	pop	{r7}
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	2000016c 	.word	0x2000016c

0800ce68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	4603      	mov	r3, r0
 800ce70:	6039      	str	r1, [r7, #0]
 800ce72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce74:	79fb      	ldrb	r3, [r7, #7]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d105      	bne.n	800ce86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce7a:	683a      	ldr	r2, [r7, #0]
 800ce7c:	4907      	ldr	r1, [pc, #28]	; (800ce9c <USBD_FS_ProductStrDescriptor+0x34>)
 800ce7e:	4808      	ldr	r0, [pc, #32]	; (800cea0 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce80:	f7fc feb6 	bl	8009bf0 <USBD_GetString>
 800ce84:	e004      	b.n	800ce90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce86:	683a      	ldr	r2, [r7, #0]
 800ce88:	4904      	ldr	r1, [pc, #16]	; (800ce9c <USBD_FS_ProductStrDescriptor+0x34>)
 800ce8a:	4805      	ldr	r0, [pc, #20]	; (800cea0 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce8c:	f7fc feb0 	bl	8009bf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce90:	4b02      	ldr	r3, [pc, #8]	; (800ce9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	200042c8 	.word	0x200042c8
 800cea0:	0800e100 	.word	0x0800e100

0800cea4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	6039      	str	r1, [r7, #0]
 800ceae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ceb0:	683a      	ldr	r2, [r7, #0]
 800ceb2:	4904      	ldr	r1, [pc, #16]	; (800cec4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ceb4:	4804      	ldr	r0, [pc, #16]	; (800cec8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ceb6:	f7fc fe9b 	bl	8009bf0 <USBD_GetString>
  return USBD_StrDesc;
 800ceba:	4b02      	ldr	r3, [pc, #8]	; (800cec4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	200042c8 	.word	0x200042c8
 800cec8:	0800e10c 	.word	0x0800e10c

0800cecc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	4603      	mov	r3, r0
 800ced4:	6039      	str	r1, [r7, #0]
 800ced6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	221a      	movs	r2, #26
 800cedc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cede:	f000 f843 	bl	800cf68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cee2:	4b02      	ldr	r3, [pc, #8]	; (800ceec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	20000170 	.word	0x20000170

0800cef0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	4603      	mov	r3, r0
 800cef8:	6039      	str	r1, [r7, #0]
 800cefa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cefc:	79fb      	ldrb	r3, [r7, #7]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d105      	bne.n	800cf0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf02:	683a      	ldr	r2, [r7, #0]
 800cf04:	4907      	ldr	r1, [pc, #28]	; (800cf24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf06:	4808      	ldr	r0, [pc, #32]	; (800cf28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf08:	f7fc fe72 	bl	8009bf0 <USBD_GetString>
 800cf0c:	e004      	b.n	800cf18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf0e:	683a      	ldr	r2, [r7, #0]
 800cf10:	4904      	ldr	r1, [pc, #16]	; (800cf24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf12:	4805      	ldr	r0, [pc, #20]	; (800cf28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf14:	f7fc fe6c 	bl	8009bf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf18:	4b02      	ldr	r3, [pc, #8]	; (800cf24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3708      	adds	r7, #8
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	200042c8 	.word	0x200042c8
 800cf28:	0800e120 	.word	0x0800e120

0800cf2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	4603      	mov	r3, r0
 800cf34:	6039      	str	r1, [r7, #0]
 800cf36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf38:	79fb      	ldrb	r3, [r7, #7]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d105      	bne.n	800cf4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf3e:	683a      	ldr	r2, [r7, #0]
 800cf40:	4907      	ldr	r1, [pc, #28]	; (800cf60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf42:	4808      	ldr	r0, [pc, #32]	; (800cf64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf44:	f7fc fe54 	bl	8009bf0 <USBD_GetString>
 800cf48:	e004      	b.n	800cf54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf4a:	683a      	ldr	r2, [r7, #0]
 800cf4c:	4904      	ldr	r1, [pc, #16]	; (800cf60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf4e:	4805      	ldr	r0, [pc, #20]	; (800cf64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf50:	f7fc fe4e 	bl	8009bf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf54:	4b02      	ldr	r3, [pc, #8]	; (800cf60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3708      	adds	r7, #8
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	200042c8 	.word	0x200042c8
 800cf64:	0800e12c 	.word	0x0800e12c

0800cf68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf6e:	4b0f      	ldr	r3, [pc, #60]	; (800cfac <Get_SerialNum+0x44>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf74:	4b0e      	ldr	r3, [pc, #56]	; (800cfb0 <Get_SerialNum+0x48>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf7a:	4b0e      	ldr	r3, [pc, #56]	; (800cfb4 <Get_SerialNum+0x4c>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4413      	add	r3, r2
 800cf86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d009      	beq.n	800cfa2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf8e:	2208      	movs	r2, #8
 800cf90:	4909      	ldr	r1, [pc, #36]	; (800cfb8 <Get_SerialNum+0x50>)
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f000 f814 	bl	800cfc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf98:	2204      	movs	r2, #4
 800cf9a:	4908      	ldr	r1, [pc, #32]	; (800cfbc <Get_SerialNum+0x54>)
 800cf9c:	68b8      	ldr	r0, [r7, #8]
 800cf9e:	f000 f80f 	bl	800cfc0 <IntToUnicode>
  }
}
 800cfa2:	bf00      	nop
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	1ffff7e8 	.word	0x1ffff7e8
 800cfb0:	1ffff7ec 	.word	0x1ffff7ec
 800cfb4:	1ffff7f0 	.word	0x1ffff7f0
 800cfb8:	20000172 	.word	0x20000172
 800cfbc:	20000182 	.word	0x20000182

0800cfc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b087      	sub	sp, #28
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	60f8      	str	r0, [r7, #12]
 800cfc8:	60b9      	str	r1, [r7, #8]
 800cfca:	4613      	mov	r3, r2
 800cfcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	75fb      	strb	r3, [r7, #23]
 800cfd6:	e027      	b.n	800d028 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	0f1b      	lsrs	r3, r3, #28
 800cfdc:	2b09      	cmp	r3, #9
 800cfde:	d80b      	bhi.n	800cff8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	0f1b      	lsrs	r3, r3, #28
 800cfe4:	b2da      	uxtb	r2, r3
 800cfe6:	7dfb      	ldrb	r3, [r7, #23]
 800cfe8:	005b      	lsls	r3, r3, #1
 800cfea:	4619      	mov	r1, r3
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	440b      	add	r3, r1
 800cff0:	3230      	adds	r2, #48	; 0x30
 800cff2:	b2d2      	uxtb	r2, r2
 800cff4:	701a      	strb	r2, [r3, #0]
 800cff6:	e00a      	b.n	800d00e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	0f1b      	lsrs	r3, r3, #28
 800cffc:	b2da      	uxtb	r2, r3
 800cffe:	7dfb      	ldrb	r3, [r7, #23]
 800d000:	005b      	lsls	r3, r3, #1
 800d002:	4619      	mov	r1, r3
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	440b      	add	r3, r1
 800d008:	3237      	adds	r2, #55	; 0x37
 800d00a:	b2d2      	uxtb	r2, r2
 800d00c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	011b      	lsls	r3, r3, #4
 800d012:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d014:	7dfb      	ldrb	r3, [r7, #23]
 800d016:	005b      	lsls	r3, r3, #1
 800d018:	3301      	adds	r3, #1
 800d01a:	68ba      	ldr	r2, [r7, #8]
 800d01c:	4413      	add	r3, r2
 800d01e:	2200      	movs	r2, #0
 800d020:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d022:	7dfb      	ldrb	r3, [r7, #23]
 800d024:	3301      	adds	r3, #1
 800d026:	75fb      	strb	r3, [r7, #23]
 800d028:	7dfa      	ldrb	r2, [r7, #23]
 800d02a:	79fb      	ldrb	r3, [r7, #7]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d3d3      	bcc.n	800cfd8 <IntToUnicode+0x18>
  }
}
 800d030:	bf00      	nop
 800d032:	bf00      	nop
 800d034:	371c      	adds	r7, #28
 800d036:	46bd      	mov	sp, r7
 800d038:	bc80      	pop	{r7}
 800d03a:	4770      	bx	lr

0800d03c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a0d      	ldr	r2, [pc, #52]	; (800d080 <HAL_PCD_MspInit+0x44>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d113      	bne.n	800d076 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d04e:	4b0d      	ldr	r3, [pc, #52]	; (800d084 <HAL_PCD_MspInit+0x48>)
 800d050:	69db      	ldr	r3, [r3, #28]
 800d052:	4a0c      	ldr	r2, [pc, #48]	; (800d084 <HAL_PCD_MspInit+0x48>)
 800d054:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d058:	61d3      	str	r3, [r2, #28]
 800d05a:	4b0a      	ldr	r3, [pc, #40]	; (800d084 <HAL_PCD_MspInit+0x48>)
 800d05c:	69db      	ldr	r3, [r3, #28]
 800d05e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d062:	60fb      	str	r3, [r7, #12]
 800d064:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800d066:	2200      	movs	r2, #0
 800d068:	2105      	movs	r1, #5
 800d06a:	2014      	movs	r0, #20
 800d06c:	f7f5 fce7 	bl	8002a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d070:	2014      	movs	r0, #20
 800d072:	f7f5 fd00 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d076:	bf00      	nop
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	40005c00 	.word	0x40005c00
 800d084:	40021000 	.word	0x40021000

0800d088 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d09c:	4619      	mov	r1, r3
 800d09e:	4610      	mov	r0, r2
 800d0a0:	f7fb fe75 	bl	8008d8e <USBD_LL_SetupStage>
}
 800d0a4:	bf00      	nop
 800d0a6:	3708      	adds	r7, #8
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d0be:	78fa      	ldrb	r2, [r7, #3]
 800d0c0:	6879      	ldr	r1, [r7, #4]
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	4413      	add	r3, r2
 800d0c8:	00db      	lsls	r3, r3, #3
 800d0ca:	440b      	add	r3, r1
 800d0cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	78fb      	ldrb	r3, [r7, #3]
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	f7fb fea7 	bl	8008e28 <USBD_LL_DataOutStage>
}
 800d0da:	bf00      	nop
 800d0dc:	3708      	adds	r7, #8
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b082      	sub	sp, #8
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d0f4:	78fa      	ldrb	r2, [r7, #3]
 800d0f6:	6879      	ldr	r1, [r7, #4]
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	4413      	add	r3, r2
 800d0fe:	00db      	lsls	r3, r3, #3
 800d100:	440b      	add	r3, r1
 800d102:	333c      	adds	r3, #60	; 0x3c
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	78fb      	ldrb	r3, [r7, #3]
 800d108:	4619      	mov	r1, r3
 800d10a:	f7fb fefe 	bl	8008f0a <USBD_LL_DataInStage>
}
 800d10e:	bf00      	nop
 800d110:	3708      	adds	r7, #8
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b082      	sub	sp, #8
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d124:	4618      	mov	r0, r3
 800d126:	f7fc f80e 	bl	8009146 <USBD_LL_SOF>
}
 800d12a:	bf00      	nop
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b084      	sub	sp, #16
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d13a:	2301      	movs	r3, #1
 800d13c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	2b02      	cmp	r3, #2
 800d144:	d001      	beq.n	800d14a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d146:	f7f3 fcdb 	bl	8000b00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d150:	7bfa      	ldrb	r2, [r7, #15]
 800d152:	4611      	mov	r1, r2
 800d154:	4618      	mov	r0, r3
 800d156:	f7fb ffbe 	bl	80090d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d160:	4618      	mov	r0, r3
 800d162:	f7fb ff77 	bl	8009054 <USBD_LL_Reset>
}
 800d166:	bf00      	nop
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
	...

0800d170 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fb ffb8 	bl	80090f4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	699b      	ldr	r3, [r3, #24]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d005      	beq.n	800d198 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d18c:	4b04      	ldr	r3, [pc, #16]	; (800d1a0 <HAL_PCD_SuspendCallback+0x30>)
 800d18e:	691b      	ldr	r3, [r3, #16]
 800d190:	4a03      	ldr	r2, [pc, #12]	; (800d1a0 <HAL_PCD_SuspendCallback+0x30>)
 800d192:	f043 0306 	orr.w	r3, r3, #6
 800d196:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d198:	bf00      	nop
 800d19a:	3708      	adds	r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	e000ed00 	.word	0xe000ed00

0800d1a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fb ffb2 	bl	800911c <USBD_LL_Resume>
}
 800d1b8:	bf00      	nop
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d1c8:	4a28      	ldr	r2, [pc, #160]	; (800d26c <USBD_LL_Init+0xac>)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	4a26      	ldr	r2, [pc, #152]	; (800d26c <USBD_LL_Init+0xac>)
 800d1d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d1d8:	4b24      	ldr	r3, [pc, #144]	; (800d26c <USBD_LL_Init+0xac>)
 800d1da:	4a25      	ldr	r2, [pc, #148]	; (800d270 <USBD_LL_Init+0xb0>)
 800d1dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d1de:	4b23      	ldr	r3, [pc, #140]	; (800d26c <USBD_LL_Init+0xac>)
 800d1e0:	2208      	movs	r2, #8
 800d1e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d1e4:	4b21      	ldr	r3, [pc, #132]	; (800d26c <USBD_LL_Init+0xac>)
 800d1e6:	2202      	movs	r2, #2
 800d1e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d1ea:	4b20      	ldr	r3, [pc, #128]	; (800d26c <USBD_LL_Init+0xac>)
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d1f0:	4b1e      	ldr	r3, [pc, #120]	; (800d26c <USBD_LL_Init+0xac>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d1f6:	4b1d      	ldr	r3, [pc, #116]	; (800d26c <USBD_LL_Init+0xac>)
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d1fc:	481b      	ldr	r0, [pc, #108]	; (800d26c <USBD_LL_Init+0xac>)
 800d1fe:	f7f5 fee7 	bl	8002fd0 <HAL_PCD_Init>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d001      	beq.n	800d20c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d208:	f7f3 fc7a 	bl	8000b00 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d212:	2318      	movs	r3, #24
 800d214:	2200      	movs	r2, #0
 800d216:	2100      	movs	r1, #0
 800d218:	f7f7 fb5d 	bl	80048d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d222:	2358      	movs	r3, #88	; 0x58
 800d224:	2200      	movs	r2, #0
 800d226:	2180      	movs	r1, #128	; 0x80
 800d228:	f7f7 fb55 	bl	80048d6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d232:	23c0      	movs	r3, #192	; 0xc0
 800d234:	2200      	movs	r2, #0
 800d236:	2181      	movs	r1, #129	; 0x81
 800d238:	f7f7 fb4d 	bl	80048d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d242:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d246:	2200      	movs	r2, #0
 800d248:	2101      	movs	r1, #1
 800d24a:	f7f7 fb44 	bl	80048d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d254:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d258:	2200      	movs	r2, #0
 800d25a:	2182      	movs	r1, #130	; 0x82
 800d25c:	f7f7 fb3b 	bl	80048d6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d260:	2300      	movs	r3, #0
}
 800d262:	4618      	mov	r0, r3
 800d264:	3708      	adds	r7, #8
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	200044c8 	.word	0x200044c8
 800d270:	40005c00 	.word	0x40005c00

0800d274 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d27c:	2300      	movs	r3, #0
 800d27e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d280:	2300      	movs	r3, #0
 800d282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7f5 ffab 	bl	80031e6 <HAL_PCD_Start>
 800d290:	4603      	mov	r3, r0
 800d292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d294:	7bfb      	ldrb	r3, [r7, #15]
 800d296:	4618      	mov	r0, r3
 800d298:	f000 f94e 	bl	800d538 <USBD_Get_USB_Status>
 800d29c:	4603      	mov	r3, r0
 800d29e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b084      	sub	sp, #16
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
 800d2b2:	4608      	mov	r0, r1
 800d2b4:	4611      	mov	r1, r2
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	70fb      	strb	r3, [r7, #3]
 800d2bc:	460b      	mov	r3, r1
 800d2be:	70bb      	strb	r3, [r7, #2]
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d2d2:	78bb      	ldrb	r3, [r7, #2]
 800d2d4:	883a      	ldrh	r2, [r7, #0]
 800d2d6:	78f9      	ldrb	r1, [r7, #3]
 800d2d8:	f7f6 f925 	bl	8003526 <HAL_PCD_EP_Open>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2e0:	7bfb      	ldrb	r3, [r7, #15]
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f000 f928 	bl	800d538 <USBD_Get_USB_Status>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}

0800d2f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2f6:	b580      	push	{r7, lr}
 800d2f8:	b084      	sub	sp, #16
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
 800d2fe:	460b      	mov	r3, r1
 800d300:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d302:	2300      	movs	r3, #0
 800d304:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d306:	2300      	movs	r3, #0
 800d308:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d310:	78fa      	ldrb	r2, [r7, #3]
 800d312:	4611      	mov	r1, r2
 800d314:	4618      	mov	r0, r3
 800d316:	f7f6 f96c 	bl	80035f2 <HAL_PCD_EP_Close>
 800d31a:	4603      	mov	r3, r0
 800d31c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d31e:	7bfb      	ldrb	r3, [r7, #15]
 800d320:	4618      	mov	r0, r3
 800d322:	f000 f909 	bl	800d538 <USBD_Get_USB_Status>
 800d326:	4603      	mov	r3, r0
 800d328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d32a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3710      	adds	r7, #16
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	460b      	mov	r3, r1
 800d33e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d340:	2300      	movs	r3, #0
 800d342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d344:	2300      	movs	r3, #0
 800d346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d34e:	78fa      	ldrb	r2, [r7, #3]
 800d350:	4611      	mov	r1, r2
 800d352:	4618      	mov	r0, r3
 800d354:	f7f6 fa2c 	bl	80037b0 <HAL_PCD_EP_SetStall>
 800d358:	4603      	mov	r3, r0
 800d35a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d35c:	7bfb      	ldrb	r3, [r7, #15]
 800d35e:	4618      	mov	r0, r3
 800d360:	f000 f8ea 	bl	800d538 <USBD_Get_USB_Status>
 800d364:	4603      	mov	r3, r0
 800d366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d368:	7bbb      	ldrb	r3, [r7, #14]
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3710      	adds	r7, #16
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}

0800d372 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d372:	b580      	push	{r7, lr}
 800d374:	b084      	sub	sp, #16
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
 800d37a:	460b      	mov	r3, r1
 800d37c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d37e:	2300      	movs	r3, #0
 800d380:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d382:	2300      	movs	r3, #0
 800d384:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d38c:	78fa      	ldrb	r2, [r7, #3]
 800d38e:	4611      	mov	r1, r2
 800d390:	4618      	mov	r0, r3
 800d392:	f7f6 fa6d 	bl	8003870 <HAL_PCD_EP_ClrStall>
 800d396:	4603      	mov	r3, r0
 800d398:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d39a:	7bfb      	ldrb	r3, [r7, #15]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f000 f8cb 	bl	800d538 <USBD_Get_USB_Status>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3710      	adds	r7, #16
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d3c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	da0c      	bge.n	800d3e6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d3cc:	78fb      	ldrb	r3, [r7, #3]
 800d3ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3d2:	68f9      	ldr	r1, [r7, #12]
 800d3d4:	1c5a      	adds	r2, r3, #1
 800d3d6:	4613      	mov	r3, r2
 800d3d8:	009b      	lsls	r3, r3, #2
 800d3da:	4413      	add	r3, r2
 800d3dc:	00db      	lsls	r3, r3, #3
 800d3de:	440b      	add	r3, r1
 800d3e0:	3302      	adds	r3, #2
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	e00b      	b.n	800d3fe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d3e6:	78fb      	ldrb	r3, [r7, #3]
 800d3e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3ec:	68f9      	ldr	r1, [r7, #12]
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	4413      	add	r3, r2
 800d3f4:	00db      	lsls	r3, r3, #3
 800d3f6:	440b      	add	r3, r1
 800d3f8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d3fc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3714      	adds	r7, #20
 800d402:	46bd      	mov	sp, r7
 800d404:	bc80      	pop	{r7}
 800d406:	4770      	bx	lr

0800d408 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	460b      	mov	r3, r1
 800d412:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d414:	2300      	movs	r3, #0
 800d416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d418:	2300      	movs	r3, #0
 800d41a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d422:	78fa      	ldrb	r2, [r7, #3]
 800d424:	4611      	mov	r1, r2
 800d426:	4618      	mov	r0, r3
 800d428:	f7f6 f858 	bl	80034dc <HAL_PCD_SetAddress>
 800d42c:	4603      	mov	r3, r0
 800d42e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d430:	7bfb      	ldrb	r3, [r7, #15]
 800d432:	4618      	mov	r0, r3
 800d434:	f000 f880 	bl	800d538 <USBD_Get_USB_Status>
 800d438:	4603      	mov	r3, r0
 800d43a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d43c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3710      	adds	r7, #16
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d446:	b580      	push	{r7, lr}
 800d448:	b086      	sub	sp, #24
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	60f8      	str	r0, [r7, #12]
 800d44e:	607a      	str	r2, [r7, #4]
 800d450:	461a      	mov	r2, r3
 800d452:	460b      	mov	r3, r1
 800d454:	72fb      	strb	r3, [r7, #11]
 800d456:	4613      	mov	r3, r2
 800d458:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d45a:	2300      	movs	r3, #0
 800d45c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d45e:	2300      	movs	r3, #0
 800d460:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d468:	893b      	ldrh	r3, [r7, #8]
 800d46a:	7af9      	ldrb	r1, [r7, #11]
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	f7f6 f95c 	bl	800372a <HAL_PCD_EP_Transmit>
 800d472:	4603      	mov	r3, r0
 800d474:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d476:	7dfb      	ldrb	r3, [r7, #23]
 800d478:	4618      	mov	r0, r3
 800d47a:	f000 f85d 	bl	800d538 <USBD_Get_USB_Status>
 800d47e:	4603      	mov	r3, r0
 800d480:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d482:	7dbb      	ldrb	r3, [r7, #22]
}
 800d484:	4618      	mov	r0, r3
 800d486:	3718      	adds	r7, #24
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b086      	sub	sp, #24
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	607a      	str	r2, [r7, #4]
 800d496:	461a      	mov	r2, r3
 800d498:	460b      	mov	r3, r1
 800d49a:	72fb      	strb	r3, [r7, #11]
 800d49c:	4613      	mov	r3, r2
 800d49e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d4ae:	893b      	ldrh	r3, [r7, #8]
 800d4b0:	7af9      	ldrb	r1, [r7, #11]
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	f7f6 f8e5 	bl	8003682 <HAL_PCD_EP_Receive>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4bc:	7dfb      	ldrb	r3, [r7, #23]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f000 f83a 	bl	800d538 <USBD_Get_USB_Status>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3718      	adds	r7, #24
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b082      	sub	sp, #8
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
 800d4da:	460b      	mov	r3, r1
 800d4dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d4e4:	78fa      	ldrb	r2, [r7, #3]
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7f6 f907 	bl	80036fc <HAL_PCD_EP_GetRxCount>
 800d4ee:	4603      	mov	r3, r0
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3708      	adds	r7, #8
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b083      	sub	sp, #12
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d500:	4b02      	ldr	r3, [pc, #8]	; (800d50c <USBD_static_malloc+0x14>)
}
 800d502:	4618      	mov	r0, r3
 800d504:	370c      	adds	r7, #12
 800d506:	46bd      	mov	sp, r7
 800d508:	bc80      	pop	{r7}
 800d50a:	4770      	bx	lr
 800d50c:	20003334 	.word	0x20003334

0800d510 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]

}
 800d518:	bf00      	nop
 800d51a:	370c      	adds	r7, #12
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bc80      	pop	{r7}
 800d520:	4770      	bx	lr

0800d522 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d522:	b480      	push	{r7}
 800d524:	b083      	sub	sp, #12
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
 800d52a:	460b      	mov	r3, r1
 800d52c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d52e:	bf00      	nop
 800d530:	370c      	adds	r7, #12
 800d532:	46bd      	mov	sp, r7
 800d534:	bc80      	pop	{r7}
 800d536:	4770      	bx	lr

0800d538 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d538:	b480      	push	{r7}
 800d53a:	b085      	sub	sp, #20
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	4603      	mov	r3, r0
 800d540:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d542:	2300      	movs	r3, #0
 800d544:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d546:	79fb      	ldrb	r3, [r7, #7]
 800d548:	2b03      	cmp	r3, #3
 800d54a:	d817      	bhi.n	800d57c <USBD_Get_USB_Status+0x44>
 800d54c:	a201      	add	r2, pc, #4	; (adr r2, 800d554 <USBD_Get_USB_Status+0x1c>)
 800d54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d552:	bf00      	nop
 800d554:	0800d565 	.word	0x0800d565
 800d558:	0800d56b 	.word	0x0800d56b
 800d55c:	0800d571 	.word	0x0800d571
 800d560:	0800d577 	.word	0x0800d577
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d564:	2300      	movs	r3, #0
 800d566:	73fb      	strb	r3, [r7, #15]
    break;
 800d568:	e00b      	b.n	800d582 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d56a:	2302      	movs	r3, #2
 800d56c:	73fb      	strb	r3, [r7, #15]
    break;
 800d56e:	e008      	b.n	800d582 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d570:	2301      	movs	r3, #1
 800d572:	73fb      	strb	r3, [r7, #15]
    break;
 800d574:	e005      	b.n	800d582 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d576:	2302      	movs	r3, #2
 800d578:	73fb      	strb	r3, [r7, #15]
    break;
 800d57a:	e002      	b.n	800d582 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d57c:	2302      	movs	r3, #2
 800d57e:	73fb      	strb	r3, [r7, #15]
    break;
 800d580:	bf00      	nop
  }
  return usb_status;
 800d582:	7bfb      	ldrb	r3, [r7, #15]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3714      	adds	r7, #20
 800d588:	46bd      	mov	sp, r7
 800d58a:	bc80      	pop	{r7}
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop

0800d590 <__errno>:
 800d590:	4b01      	ldr	r3, [pc, #4]	; (800d598 <__errno+0x8>)
 800d592:	6818      	ldr	r0, [r3, #0]
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop
 800d598:	2000018c 	.word	0x2000018c

0800d59c <__libc_init_array>:
 800d59c:	b570      	push	{r4, r5, r6, lr}
 800d59e:	2600      	movs	r6, #0
 800d5a0:	4d0c      	ldr	r5, [pc, #48]	; (800d5d4 <__libc_init_array+0x38>)
 800d5a2:	4c0d      	ldr	r4, [pc, #52]	; (800d5d8 <__libc_init_array+0x3c>)
 800d5a4:	1b64      	subs	r4, r4, r5
 800d5a6:	10a4      	asrs	r4, r4, #2
 800d5a8:	42a6      	cmp	r6, r4
 800d5aa:	d109      	bne.n	800d5c0 <__libc_init_array+0x24>
 800d5ac:	f000 fc86 	bl	800debc <_init>
 800d5b0:	2600      	movs	r6, #0
 800d5b2:	4d0a      	ldr	r5, [pc, #40]	; (800d5dc <__libc_init_array+0x40>)
 800d5b4:	4c0a      	ldr	r4, [pc, #40]	; (800d5e0 <__libc_init_array+0x44>)
 800d5b6:	1b64      	subs	r4, r4, r5
 800d5b8:	10a4      	asrs	r4, r4, #2
 800d5ba:	42a6      	cmp	r6, r4
 800d5bc:	d105      	bne.n	800d5ca <__libc_init_array+0x2e>
 800d5be:	bd70      	pop	{r4, r5, r6, pc}
 800d5c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5c4:	4798      	blx	r3
 800d5c6:	3601      	adds	r6, #1
 800d5c8:	e7ee      	b.n	800d5a8 <__libc_init_array+0xc>
 800d5ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5ce:	4798      	blx	r3
 800d5d0:	3601      	adds	r6, #1
 800d5d2:	e7f2      	b.n	800d5ba <__libc_init_array+0x1e>
 800d5d4:	0800e6e8 	.word	0x0800e6e8
 800d5d8:	0800e6e8 	.word	0x0800e6e8
 800d5dc:	0800e6e8 	.word	0x0800e6e8
 800d5e0:	0800e6ec 	.word	0x0800e6ec

0800d5e4 <memcpy>:
 800d5e4:	440a      	add	r2, r1
 800d5e6:	4291      	cmp	r1, r2
 800d5e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d5ec:	d100      	bne.n	800d5f0 <memcpy+0xc>
 800d5ee:	4770      	bx	lr
 800d5f0:	b510      	push	{r4, lr}
 800d5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5f6:	4291      	cmp	r1, r2
 800d5f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5fc:	d1f9      	bne.n	800d5f2 <memcpy+0xe>
 800d5fe:	bd10      	pop	{r4, pc}

0800d600 <memmove>:
 800d600:	4288      	cmp	r0, r1
 800d602:	b510      	push	{r4, lr}
 800d604:	eb01 0402 	add.w	r4, r1, r2
 800d608:	d902      	bls.n	800d610 <memmove+0x10>
 800d60a:	4284      	cmp	r4, r0
 800d60c:	4623      	mov	r3, r4
 800d60e:	d807      	bhi.n	800d620 <memmove+0x20>
 800d610:	1e43      	subs	r3, r0, #1
 800d612:	42a1      	cmp	r1, r4
 800d614:	d008      	beq.n	800d628 <memmove+0x28>
 800d616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d61a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d61e:	e7f8      	b.n	800d612 <memmove+0x12>
 800d620:	4601      	mov	r1, r0
 800d622:	4402      	add	r2, r0
 800d624:	428a      	cmp	r2, r1
 800d626:	d100      	bne.n	800d62a <memmove+0x2a>
 800d628:	bd10      	pop	{r4, pc}
 800d62a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d62e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d632:	e7f7      	b.n	800d624 <memmove+0x24>

0800d634 <memset>:
 800d634:	4603      	mov	r3, r0
 800d636:	4402      	add	r2, r0
 800d638:	4293      	cmp	r3, r2
 800d63a:	d100      	bne.n	800d63e <memset+0xa>
 800d63c:	4770      	bx	lr
 800d63e:	f803 1b01 	strb.w	r1, [r3], #1
 800d642:	e7f9      	b.n	800d638 <memset+0x4>

0800d644 <sniprintf>:
 800d644:	b40c      	push	{r2, r3}
 800d646:	b530      	push	{r4, r5, lr}
 800d648:	4b17      	ldr	r3, [pc, #92]	; (800d6a8 <sniprintf+0x64>)
 800d64a:	1e0c      	subs	r4, r1, #0
 800d64c:	681d      	ldr	r5, [r3, #0]
 800d64e:	b09d      	sub	sp, #116	; 0x74
 800d650:	da08      	bge.n	800d664 <sniprintf+0x20>
 800d652:	238b      	movs	r3, #139	; 0x8b
 800d654:	f04f 30ff 	mov.w	r0, #4294967295
 800d658:	602b      	str	r3, [r5, #0]
 800d65a:	b01d      	add	sp, #116	; 0x74
 800d65c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d660:	b002      	add	sp, #8
 800d662:	4770      	bx	lr
 800d664:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d668:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d66c:	bf0c      	ite	eq
 800d66e:	4623      	moveq	r3, r4
 800d670:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d674:	9304      	str	r3, [sp, #16]
 800d676:	9307      	str	r3, [sp, #28]
 800d678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d67c:	9002      	str	r0, [sp, #8]
 800d67e:	9006      	str	r0, [sp, #24]
 800d680:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d684:	4628      	mov	r0, r5
 800d686:	ab21      	add	r3, sp, #132	; 0x84
 800d688:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d68a:	a902      	add	r1, sp, #8
 800d68c:	9301      	str	r3, [sp, #4]
 800d68e:	f000 f87f 	bl	800d790 <_svfiprintf_r>
 800d692:	1c43      	adds	r3, r0, #1
 800d694:	bfbc      	itt	lt
 800d696:	238b      	movlt	r3, #139	; 0x8b
 800d698:	602b      	strlt	r3, [r5, #0]
 800d69a:	2c00      	cmp	r4, #0
 800d69c:	d0dd      	beq.n	800d65a <sniprintf+0x16>
 800d69e:	2200      	movs	r2, #0
 800d6a0:	9b02      	ldr	r3, [sp, #8]
 800d6a2:	701a      	strb	r2, [r3, #0]
 800d6a4:	e7d9      	b.n	800d65a <sniprintf+0x16>
 800d6a6:	bf00      	nop
 800d6a8:	2000018c 	.word	0x2000018c

0800d6ac <strstr>:
 800d6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ae:	780c      	ldrb	r4, [r1, #0]
 800d6b0:	b164      	cbz	r4, 800d6cc <strstr+0x20>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	781a      	ldrb	r2, [r3, #0]
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	1c5e      	adds	r6, r3, #1
 800d6ba:	b90a      	cbnz	r2, 800d6c0 <strstr+0x14>
 800d6bc:	4610      	mov	r0, r2
 800d6be:	e005      	b.n	800d6cc <strstr+0x20>
 800d6c0:	4294      	cmp	r4, r2
 800d6c2:	d108      	bne.n	800d6d6 <strstr+0x2a>
 800d6c4:	460d      	mov	r5, r1
 800d6c6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800d6ca:	b902      	cbnz	r2, 800d6ce <strstr+0x22>
 800d6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6ce:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800d6d2:	4297      	cmp	r7, r2
 800d6d4:	d0f7      	beq.n	800d6c6 <strstr+0x1a>
 800d6d6:	4633      	mov	r3, r6
 800d6d8:	e7ec      	b.n	800d6b4 <strstr+0x8>

0800d6da <__ssputs_r>:
 800d6da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6de:	688e      	ldr	r6, [r1, #8]
 800d6e0:	4682      	mov	sl, r0
 800d6e2:	429e      	cmp	r6, r3
 800d6e4:	460c      	mov	r4, r1
 800d6e6:	4690      	mov	r8, r2
 800d6e8:	461f      	mov	r7, r3
 800d6ea:	d838      	bhi.n	800d75e <__ssputs_r+0x84>
 800d6ec:	898a      	ldrh	r2, [r1, #12]
 800d6ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d6f2:	d032      	beq.n	800d75a <__ssputs_r+0x80>
 800d6f4:	6825      	ldr	r5, [r4, #0]
 800d6f6:	6909      	ldr	r1, [r1, #16]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	eba5 0901 	sub.w	r9, r5, r1
 800d6fe:	6965      	ldr	r5, [r4, #20]
 800d700:	444b      	add	r3, r9
 800d702:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d706:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d70a:	106d      	asrs	r5, r5, #1
 800d70c:	429d      	cmp	r5, r3
 800d70e:	bf38      	it	cc
 800d710:	461d      	movcc	r5, r3
 800d712:	0553      	lsls	r3, r2, #21
 800d714:	d531      	bpl.n	800d77a <__ssputs_r+0xa0>
 800d716:	4629      	mov	r1, r5
 800d718:	f000 fb2a 	bl	800dd70 <_malloc_r>
 800d71c:	4606      	mov	r6, r0
 800d71e:	b950      	cbnz	r0, 800d736 <__ssputs_r+0x5c>
 800d720:	230c      	movs	r3, #12
 800d722:	f04f 30ff 	mov.w	r0, #4294967295
 800d726:	f8ca 3000 	str.w	r3, [sl]
 800d72a:	89a3      	ldrh	r3, [r4, #12]
 800d72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d730:	81a3      	strh	r3, [r4, #12]
 800d732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d736:	464a      	mov	r2, r9
 800d738:	6921      	ldr	r1, [r4, #16]
 800d73a:	f7ff ff53 	bl	800d5e4 <memcpy>
 800d73e:	89a3      	ldrh	r3, [r4, #12]
 800d740:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d748:	81a3      	strh	r3, [r4, #12]
 800d74a:	6126      	str	r6, [r4, #16]
 800d74c:	444e      	add	r6, r9
 800d74e:	6026      	str	r6, [r4, #0]
 800d750:	463e      	mov	r6, r7
 800d752:	6165      	str	r5, [r4, #20]
 800d754:	eba5 0509 	sub.w	r5, r5, r9
 800d758:	60a5      	str	r5, [r4, #8]
 800d75a:	42be      	cmp	r6, r7
 800d75c:	d900      	bls.n	800d760 <__ssputs_r+0x86>
 800d75e:	463e      	mov	r6, r7
 800d760:	4632      	mov	r2, r6
 800d762:	4641      	mov	r1, r8
 800d764:	6820      	ldr	r0, [r4, #0]
 800d766:	f7ff ff4b 	bl	800d600 <memmove>
 800d76a:	68a3      	ldr	r3, [r4, #8]
 800d76c:	6822      	ldr	r2, [r4, #0]
 800d76e:	1b9b      	subs	r3, r3, r6
 800d770:	4432      	add	r2, r6
 800d772:	2000      	movs	r0, #0
 800d774:	60a3      	str	r3, [r4, #8]
 800d776:	6022      	str	r2, [r4, #0]
 800d778:	e7db      	b.n	800d732 <__ssputs_r+0x58>
 800d77a:	462a      	mov	r2, r5
 800d77c:	f000 fb52 	bl	800de24 <_realloc_r>
 800d780:	4606      	mov	r6, r0
 800d782:	2800      	cmp	r0, #0
 800d784:	d1e1      	bne.n	800d74a <__ssputs_r+0x70>
 800d786:	4650      	mov	r0, sl
 800d788:	6921      	ldr	r1, [r4, #16]
 800d78a:	f000 faa5 	bl	800dcd8 <_free_r>
 800d78e:	e7c7      	b.n	800d720 <__ssputs_r+0x46>

0800d790 <_svfiprintf_r>:
 800d790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d794:	4698      	mov	r8, r3
 800d796:	898b      	ldrh	r3, [r1, #12]
 800d798:	4607      	mov	r7, r0
 800d79a:	061b      	lsls	r3, r3, #24
 800d79c:	460d      	mov	r5, r1
 800d79e:	4614      	mov	r4, r2
 800d7a0:	b09d      	sub	sp, #116	; 0x74
 800d7a2:	d50e      	bpl.n	800d7c2 <_svfiprintf_r+0x32>
 800d7a4:	690b      	ldr	r3, [r1, #16]
 800d7a6:	b963      	cbnz	r3, 800d7c2 <_svfiprintf_r+0x32>
 800d7a8:	2140      	movs	r1, #64	; 0x40
 800d7aa:	f000 fae1 	bl	800dd70 <_malloc_r>
 800d7ae:	6028      	str	r0, [r5, #0]
 800d7b0:	6128      	str	r0, [r5, #16]
 800d7b2:	b920      	cbnz	r0, 800d7be <_svfiprintf_r+0x2e>
 800d7b4:	230c      	movs	r3, #12
 800d7b6:	603b      	str	r3, [r7, #0]
 800d7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7bc:	e0d1      	b.n	800d962 <_svfiprintf_r+0x1d2>
 800d7be:	2340      	movs	r3, #64	; 0x40
 800d7c0:	616b      	str	r3, [r5, #20]
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7c6:	2320      	movs	r3, #32
 800d7c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7cc:	2330      	movs	r3, #48	; 0x30
 800d7ce:	f04f 0901 	mov.w	r9, #1
 800d7d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d97c <_svfiprintf_r+0x1ec>
 800d7da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7de:	4623      	mov	r3, r4
 800d7e0:	469a      	mov	sl, r3
 800d7e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7e6:	b10a      	cbz	r2, 800d7ec <_svfiprintf_r+0x5c>
 800d7e8:	2a25      	cmp	r2, #37	; 0x25
 800d7ea:	d1f9      	bne.n	800d7e0 <_svfiprintf_r+0x50>
 800d7ec:	ebba 0b04 	subs.w	fp, sl, r4
 800d7f0:	d00b      	beq.n	800d80a <_svfiprintf_r+0x7a>
 800d7f2:	465b      	mov	r3, fp
 800d7f4:	4622      	mov	r2, r4
 800d7f6:	4629      	mov	r1, r5
 800d7f8:	4638      	mov	r0, r7
 800d7fa:	f7ff ff6e 	bl	800d6da <__ssputs_r>
 800d7fe:	3001      	adds	r0, #1
 800d800:	f000 80aa 	beq.w	800d958 <_svfiprintf_r+0x1c8>
 800d804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d806:	445a      	add	r2, fp
 800d808:	9209      	str	r2, [sp, #36]	; 0x24
 800d80a:	f89a 3000 	ldrb.w	r3, [sl]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	f000 80a2 	beq.w	800d958 <_svfiprintf_r+0x1c8>
 800d814:	2300      	movs	r3, #0
 800d816:	f04f 32ff 	mov.w	r2, #4294967295
 800d81a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d81e:	f10a 0a01 	add.w	sl, sl, #1
 800d822:	9304      	str	r3, [sp, #16]
 800d824:	9307      	str	r3, [sp, #28]
 800d826:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d82a:	931a      	str	r3, [sp, #104]	; 0x68
 800d82c:	4654      	mov	r4, sl
 800d82e:	2205      	movs	r2, #5
 800d830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d834:	4851      	ldr	r0, [pc, #324]	; (800d97c <_svfiprintf_r+0x1ec>)
 800d836:	f000 fa41 	bl	800dcbc <memchr>
 800d83a:	9a04      	ldr	r2, [sp, #16]
 800d83c:	b9d8      	cbnz	r0, 800d876 <_svfiprintf_r+0xe6>
 800d83e:	06d0      	lsls	r0, r2, #27
 800d840:	bf44      	itt	mi
 800d842:	2320      	movmi	r3, #32
 800d844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d848:	0711      	lsls	r1, r2, #28
 800d84a:	bf44      	itt	mi
 800d84c:	232b      	movmi	r3, #43	; 0x2b
 800d84e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d852:	f89a 3000 	ldrb.w	r3, [sl]
 800d856:	2b2a      	cmp	r3, #42	; 0x2a
 800d858:	d015      	beq.n	800d886 <_svfiprintf_r+0xf6>
 800d85a:	4654      	mov	r4, sl
 800d85c:	2000      	movs	r0, #0
 800d85e:	f04f 0c0a 	mov.w	ip, #10
 800d862:	9a07      	ldr	r2, [sp, #28]
 800d864:	4621      	mov	r1, r4
 800d866:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d86a:	3b30      	subs	r3, #48	; 0x30
 800d86c:	2b09      	cmp	r3, #9
 800d86e:	d94e      	bls.n	800d90e <_svfiprintf_r+0x17e>
 800d870:	b1b0      	cbz	r0, 800d8a0 <_svfiprintf_r+0x110>
 800d872:	9207      	str	r2, [sp, #28]
 800d874:	e014      	b.n	800d8a0 <_svfiprintf_r+0x110>
 800d876:	eba0 0308 	sub.w	r3, r0, r8
 800d87a:	fa09 f303 	lsl.w	r3, r9, r3
 800d87e:	4313      	orrs	r3, r2
 800d880:	46a2      	mov	sl, r4
 800d882:	9304      	str	r3, [sp, #16]
 800d884:	e7d2      	b.n	800d82c <_svfiprintf_r+0x9c>
 800d886:	9b03      	ldr	r3, [sp, #12]
 800d888:	1d19      	adds	r1, r3, #4
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	9103      	str	r1, [sp, #12]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	bfbb      	ittet	lt
 800d892:	425b      	neglt	r3, r3
 800d894:	f042 0202 	orrlt.w	r2, r2, #2
 800d898:	9307      	strge	r3, [sp, #28]
 800d89a:	9307      	strlt	r3, [sp, #28]
 800d89c:	bfb8      	it	lt
 800d89e:	9204      	strlt	r2, [sp, #16]
 800d8a0:	7823      	ldrb	r3, [r4, #0]
 800d8a2:	2b2e      	cmp	r3, #46	; 0x2e
 800d8a4:	d10c      	bne.n	800d8c0 <_svfiprintf_r+0x130>
 800d8a6:	7863      	ldrb	r3, [r4, #1]
 800d8a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d8aa:	d135      	bne.n	800d918 <_svfiprintf_r+0x188>
 800d8ac:	9b03      	ldr	r3, [sp, #12]
 800d8ae:	3402      	adds	r4, #2
 800d8b0:	1d1a      	adds	r2, r3, #4
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	9203      	str	r2, [sp, #12]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	bfb8      	it	lt
 800d8ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8be:	9305      	str	r3, [sp, #20]
 800d8c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d98c <_svfiprintf_r+0x1fc>
 800d8c4:	2203      	movs	r2, #3
 800d8c6:	4650      	mov	r0, sl
 800d8c8:	7821      	ldrb	r1, [r4, #0]
 800d8ca:	f000 f9f7 	bl	800dcbc <memchr>
 800d8ce:	b140      	cbz	r0, 800d8e2 <_svfiprintf_r+0x152>
 800d8d0:	2340      	movs	r3, #64	; 0x40
 800d8d2:	eba0 000a 	sub.w	r0, r0, sl
 800d8d6:	fa03 f000 	lsl.w	r0, r3, r0
 800d8da:	9b04      	ldr	r3, [sp, #16]
 800d8dc:	3401      	adds	r4, #1
 800d8de:	4303      	orrs	r3, r0
 800d8e0:	9304      	str	r3, [sp, #16]
 800d8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8e6:	2206      	movs	r2, #6
 800d8e8:	4825      	ldr	r0, [pc, #148]	; (800d980 <_svfiprintf_r+0x1f0>)
 800d8ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8ee:	f000 f9e5 	bl	800dcbc <memchr>
 800d8f2:	2800      	cmp	r0, #0
 800d8f4:	d038      	beq.n	800d968 <_svfiprintf_r+0x1d8>
 800d8f6:	4b23      	ldr	r3, [pc, #140]	; (800d984 <_svfiprintf_r+0x1f4>)
 800d8f8:	bb1b      	cbnz	r3, 800d942 <_svfiprintf_r+0x1b2>
 800d8fa:	9b03      	ldr	r3, [sp, #12]
 800d8fc:	3307      	adds	r3, #7
 800d8fe:	f023 0307 	bic.w	r3, r3, #7
 800d902:	3308      	adds	r3, #8
 800d904:	9303      	str	r3, [sp, #12]
 800d906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d908:	4433      	add	r3, r6
 800d90a:	9309      	str	r3, [sp, #36]	; 0x24
 800d90c:	e767      	b.n	800d7de <_svfiprintf_r+0x4e>
 800d90e:	460c      	mov	r4, r1
 800d910:	2001      	movs	r0, #1
 800d912:	fb0c 3202 	mla	r2, ip, r2, r3
 800d916:	e7a5      	b.n	800d864 <_svfiprintf_r+0xd4>
 800d918:	2300      	movs	r3, #0
 800d91a:	f04f 0c0a 	mov.w	ip, #10
 800d91e:	4619      	mov	r1, r3
 800d920:	3401      	adds	r4, #1
 800d922:	9305      	str	r3, [sp, #20]
 800d924:	4620      	mov	r0, r4
 800d926:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d92a:	3a30      	subs	r2, #48	; 0x30
 800d92c:	2a09      	cmp	r2, #9
 800d92e:	d903      	bls.n	800d938 <_svfiprintf_r+0x1a8>
 800d930:	2b00      	cmp	r3, #0
 800d932:	d0c5      	beq.n	800d8c0 <_svfiprintf_r+0x130>
 800d934:	9105      	str	r1, [sp, #20]
 800d936:	e7c3      	b.n	800d8c0 <_svfiprintf_r+0x130>
 800d938:	4604      	mov	r4, r0
 800d93a:	2301      	movs	r3, #1
 800d93c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d940:	e7f0      	b.n	800d924 <_svfiprintf_r+0x194>
 800d942:	ab03      	add	r3, sp, #12
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	462a      	mov	r2, r5
 800d948:	4638      	mov	r0, r7
 800d94a:	4b0f      	ldr	r3, [pc, #60]	; (800d988 <_svfiprintf_r+0x1f8>)
 800d94c:	a904      	add	r1, sp, #16
 800d94e:	f3af 8000 	nop.w
 800d952:	1c42      	adds	r2, r0, #1
 800d954:	4606      	mov	r6, r0
 800d956:	d1d6      	bne.n	800d906 <_svfiprintf_r+0x176>
 800d958:	89ab      	ldrh	r3, [r5, #12]
 800d95a:	065b      	lsls	r3, r3, #25
 800d95c:	f53f af2c 	bmi.w	800d7b8 <_svfiprintf_r+0x28>
 800d960:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d962:	b01d      	add	sp, #116	; 0x74
 800d964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d968:	ab03      	add	r3, sp, #12
 800d96a:	9300      	str	r3, [sp, #0]
 800d96c:	462a      	mov	r2, r5
 800d96e:	4638      	mov	r0, r7
 800d970:	4b05      	ldr	r3, [pc, #20]	; (800d988 <_svfiprintf_r+0x1f8>)
 800d972:	a904      	add	r1, sp, #16
 800d974:	f000 f87c 	bl	800da70 <_printf_i>
 800d978:	e7eb      	b.n	800d952 <_svfiprintf_r+0x1c2>
 800d97a:	bf00      	nop
 800d97c:	0800e6b4 	.word	0x0800e6b4
 800d980:	0800e6be 	.word	0x0800e6be
 800d984:	00000000 	.word	0x00000000
 800d988:	0800d6db 	.word	0x0800d6db
 800d98c:	0800e6ba 	.word	0x0800e6ba

0800d990 <_printf_common>:
 800d990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d994:	4616      	mov	r6, r2
 800d996:	4699      	mov	r9, r3
 800d998:	688a      	ldr	r2, [r1, #8]
 800d99a:	690b      	ldr	r3, [r1, #16]
 800d99c:	4607      	mov	r7, r0
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	bfb8      	it	lt
 800d9a2:	4613      	movlt	r3, r2
 800d9a4:	6033      	str	r3, [r6, #0]
 800d9a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d9b0:	b10a      	cbz	r2, 800d9b6 <_printf_common+0x26>
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	6033      	str	r3, [r6, #0]
 800d9b6:	6823      	ldr	r3, [r4, #0]
 800d9b8:	0699      	lsls	r1, r3, #26
 800d9ba:	bf42      	ittt	mi
 800d9bc:	6833      	ldrmi	r3, [r6, #0]
 800d9be:	3302      	addmi	r3, #2
 800d9c0:	6033      	strmi	r3, [r6, #0]
 800d9c2:	6825      	ldr	r5, [r4, #0]
 800d9c4:	f015 0506 	ands.w	r5, r5, #6
 800d9c8:	d106      	bne.n	800d9d8 <_printf_common+0x48>
 800d9ca:	f104 0a19 	add.w	sl, r4, #25
 800d9ce:	68e3      	ldr	r3, [r4, #12]
 800d9d0:	6832      	ldr	r2, [r6, #0]
 800d9d2:	1a9b      	subs	r3, r3, r2
 800d9d4:	42ab      	cmp	r3, r5
 800d9d6:	dc28      	bgt.n	800da2a <_printf_common+0x9a>
 800d9d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d9dc:	1e13      	subs	r3, r2, #0
 800d9de:	6822      	ldr	r2, [r4, #0]
 800d9e0:	bf18      	it	ne
 800d9e2:	2301      	movne	r3, #1
 800d9e4:	0692      	lsls	r2, r2, #26
 800d9e6:	d42d      	bmi.n	800da44 <_printf_common+0xb4>
 800d9e8:	4649      	mov	r1, r9
 800d9ea:	4638      	mov	r0, r7
 800d9ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9f0:	47c0      	blx	r8
 800d9f2:	3001      	adds	r0, #1
 800d9f4:	d020      	beq.n	800da38 <_printf_common+0xa8>
 800d9f6:	6823      	ldr	r3, [r4, #0]
 800d9f8:	68e5      	ldr	r5, [r4, #12]
 800d9fa:	f003 0306 	and.w	r3, r3, #6
 800d9fe:	2b04      	cmp	r3, #4
 800da00:	bf18      	it	ne
 800da02:	2500      	movne	r5, #0
 800da04:	6832      	ldr	r2, [r6, #0]
 800da06:	f04f 0600 	mov.w	r6, #0
 800da0a:	68a3      	ldr	r3, [r4, #8]
 800da0c:	bf08      	it	eq
 800da0e:	1aad      	subeq	r5, r5, r2
 800da10:	6922      	ldr	r2, [r4, #16]
 800da12:	bf08      	it	eq
 800da14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da18:	4293      	cmp	r3, r2
 800da1a:	bfc4      	itt	gt
 800da1c:	1a9b      	subgt	r3, r3, r2
 800da1e:	18ed      	addgt	r5, r5, r3
 800da20:	341a      	adds	r4, #26
 800da22:	42b5      	cmp	r5, r6
 800da24:	d11a      	bne.n	800da5c <_printf_common+0xcc>
 800da26:	2000      	movs	r0, #0
 800da28:	e008      	b.n	800da3c <_printf_common+0xac>
 800da2a:	2301      	movs	r3, #1
 800da2c:	4652      	mov	r2, sl
 800da2e:	4649      	mov	r1, r9
 800da30:	4638      	mov	r0, r7
 800da32:	47c0      	blx	r8
 800da34:	3001      	adds	r0, #1
 800da36:	d103      	bne.n	800da40 <_printf_common+0xb0>
 800da38:	f04f 30ff 	mov.w	r0, #4294967295
 800da3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da40:	3501      	adds	r5, #1
 800da42:	e7c4      	b.n	800d9ce <_printf_common+0x3e>
 800da44:	2030      	movs	r0, #48	; 0x30
 800da46:	18e1      	adds	r1, r4, r3
 800da48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da4c:	1c5a      	adds	r2, r3, #1
 800da4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da52:	4422      	add	r2, r4
 800da54:	3302      	adds	r3, #2
 800da56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da5a:	e7c5      	b.n	800d9e8 <_printf_common+0x58>
 800da5c:	2301      	movs	r3, #1
 800da5e:	4622      	mov	r2, r4
 800da60:	4649      	mov	r1, r9
 800da62:	4638      	mov	r0, r7
 800da64:	47c0      	blx	r8
 800da66:	3001      	adds	r0, #1
 800da68:	d0e6      	beq.n	800da38 <_printf_common+0xa8>
 800da6a:	3601      	adds	r6, #1
 800da6c:	e7d9      	b.n	800da22 <_printf_common+0x92>
	...

0800da70 <_printf_i>:
 800da70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da74:	460c      	mov	r4, r1
 800da76:	7e27      	ldrb	r7, [r4, #24]
 800da78:	4691      	mov	r9, r2
 800da7a:	2f78      	cmp	r7, #120	; 0x78
 800da7c:	4680      	mov	r8, r0
 800da7e:	469a      	mov	sl, r3
 800da80:	990c      	ldr	r1, [sp, #48]	; 0x30
 800da82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da86:	d807      	bhi.n	800da98 <_printf_i+0x28>
 800da88:	2f62      	cmp	r7, #98	; 0x62
 800da8a:	d80a      	bhi.n	800daa2 <_printf_i+0x32>
 800da8c:	2f00      	cmp	r7, #0
 800da8e:	f000 80d9 	beq.w	800dc44 <_printf_i+0x1d4>
 800da92:	2f58      	cmp	r7, #88	; 0x58
 800da94:	f000 80a4 	beq.w	800dbe0 <_printf_i+0x170>
 800da98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800da9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800daa0:	e03a      	b.n	800db18 <_printf_i+0xa8>
 800daa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800daa6:	2b15      	cmp	r3, #21
 800daa8:	d8f6      	bhi.n	800da98 <_printf_i+0x28>
 800daaa:	a001      	add	r0, pc, #4	; (adr r0, 800dab0 <_printf_i+0x40>)
 800daac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dab0:	0800db09 	.word	0x0800db09
 800dab4:	0800db1d 	.word	0x0800db1d
 800dab8:	0800da99 	.word	0x0800da99
 800dabc:	0800da99 	.word	0x0800da99
 800dac0:	0800da99 	.word	0x0800da99
 800dac4:	0800da99 	.word	0x0800da99
 800dac8:	0800db1d 	.word	0x0800db1d
 800dacc:	0800da99 	.word	0x0800da99
 800dad0:	0800da99 	.word	0x0800da99
 800dad4:	0800da99 	.word	0x0800da99
 800dad8:	0800da99 	.word	0x0800da99
 800dadc:	0800dc2b 	.word	0x0800dc2b
 800dae0:	0800db4d 	.word	0x0800db4d
 800dae4:	0800dc0d 	.word	0x0800dc0d
 800dae8:	0800da99 	.word	0x0800da99
 800daec:	0800da99 	.word	0x0800da99
 800daf0:	0800dc4d 	.word	0x0800dc4d
 800daf4:	0800da99 	.word	0x0800da99
 800daf8:	0800db4d 	.word	0x0800db4d
 800dafc:	0800da99 	.word	0x0800da99
 800db00:	0800da99 	.word	0x0800da99
 800db04:	0800dc15 	.word	0x0800dc15
 800db08:	680b      	ldr	r3, [r1, #0]
 800db0a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800db0e:	1d1a      	adds	r2, r3, #4
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	600a      	str	r2, [r1, #0]
 800db14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db18:	2301      	movs	r3, #1
 800db1a:	e0a4      	b.n	800dc66 <_printf_i+0x1f6>
 800db1c:	6825      	ldr	r5, [r4, #0]
 800db1e:	6808      	ldr	r0, [r1, #0]
 800db20:	062e      	lsls	r6, r5, #24
 800db22:	f100 0304 	add.w	r3, r0, #4
 800db26:	d50a      	bpl.n	800db3e <_printf_i+0xce>
 800db28:	6805      	ldr	r5, [r0, #0]
 800db2a:	600b      	str	r3, [r1, #0]
 800db2c:	2d00      	cmp	r5, #0
 800db2e:	da03      	bge.n	800db38 <_printf_i+0xc8>
 800db30:	232d      	movs	r3, #45	; 0x2d
 800db32:	426d      	negs	r5, r5
 800db34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db38:	230a      	movs	r3, #10
 800db3a:	485e      	ldr	r0, [pc, #376]	; (800dcb4 <_printf_i+0x244>)
 800db3c:	e019      	b.n	800db72 <_printf_i+0x102>
 800db3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800db42:	6805      	ldr	r5, [r0, #0]
 800db44:	600b      	str	r3, [r1, #0]
 800db46:	bf18      	it	ne
 800db48:	b22d      	sxthne	r5, r5
 800db4a:	e7ef      	b.n	800db2c <_printf_i+0xbc>
 800db4c:	680b      	ldr	r3, [r1, #0]
 800db4e:	6825      	ldr	r5, [r4, #0]
 800db50:	1d18      	adds	r0, r3, #4
 800db52:	6008      	str	r0, [r1, #0]
 800db54:	0628      	lsls	r0, r5, #24
 800db56:	d501      	bpl.n	800db5c <_printf_i+0xec>
 800db58:	681d      	ldr	r5, [r3, #0]
 800db5a:	e002      	b.n	800db62 <_printf_i+0xf2>
 800db5c:	0669      	lsls	r1, r5, #25
 800db5e:	d5fb      	bpl.n	800db58 <_printf_i+0xe8>
 800db60:	881d      	ldrh	r5, [r3, #0]
 800db62:	2f6f      	cmp	r7, #111	; 0x6f
 800db64:	bf0c      	ite	eq
 800db66:	2308      	moveq	r3, #8
 800db68:	230a      	movne	r3, #10
 800db6a:	4852      	ldr	r0, [pc, #328]	; (800dcb4 <_printf_i+0x244>)
 800db6c:	2100      	movs	r1, #0
 800db6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db72:	6866      	ldr	r6, [r4, #4]
 800db74:	2e00      	cmp	r6, #0
 800db76:	bfa8      	it	ge
 800db78:	6821      	ldrge	r1, [r4, #0]
 800db7a:	60a6      	str	r6, [r4, #8]
 800db7c:	bfa4      	itt	ge
 800db7e:	f021 0104 	bicge.w	r1, r1, #4
 800db82:	6021      	strge	r1, [r4, #0]
 800db84:	b90d      	cbnz	r5, 800db8a <_printf_i+0x11a>
 800db86:	2e00      	cmp	r6, #0
 800db88:	d04d      	beq.n	800dc26 <_printf_i+0x1b6>
 800db8a:	4616      	mov	r6, r2
 800db8c:	fbb5 f1f3 	udiv	r1, r5, r3
 800db90:	fb03 5711 	mls	r7, r3, r1, r5
 800db94:	5dc7      	ldrb	r7, [r0, r7]
 800db96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db9a:	462f      	mov	r7, r5
 800db9c:	42bb      	cmp	r3, r7
 800db9e:	460d      	mov	r5, r1
 800dba0:	d9f4      	bls.n	800db8c <_printf_i+0x11c>
 800dba2:	2b08      	cmp	r3, #8
 800dba4:	d10b      	bne.n	800dbbe <_printf_i+0x14e>
 800dba6:	6823      	ldr	r3, [r4, #0]
 800dba8:	07df      	lsls	r7, r3, #31
 800dbaa:	d508      	bpl.n	800dbbe <_printf_i+0x14e>
 800dbac:	6923      	ldr	r3, [r4, #16]
 800dbae:	6861      	ldr	r1, [r4, #4]
 800dbb0:	4299      	cmp	r1, r3
 800dbb2:	bfde      	ittt	le
 800dbb4:	2330      	movle	r3, #48	; 0x30
 800dbb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dbbe:	1b92      	subs	r2, r2, r6
 800dbc0:	6122      	str	r2, [r4, #16]
 800dbc2:	464b      	mov	r3, r9
 800dbc4:	4621      	mov	r1, r4
 800dbc6:	4640      	mov	r0, r8
 800dbc8:	f8cd a000 	str.w	sl, [sp]
 800dbcc:	aa03      	add	r2, sp, #12
 800dbce:	f7ff fedf 	bl	800d990 <_printf_common>
 800dbd2:	3001      	adds	r0, #1
 800dbd4:	d14c      	bne.n	800dc70 <_printf_i+0x200>
 800dbd6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbda:	b004      	add	sp, #16
 800dbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe0:	4834      	ldr	r0, [pc, #208]	; (800dcb4 <_printf_i+0x244>)
 800dbe2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dbe6:	680e      	ldr	r6, [r1, #0]
 800dbe8:	6823      	ldr	r3, [r4, #0]
 800dbea:	f856 5b04 	ldr.w	r5, [r6], #4
 800dbee:	061f      	lsls	r7, r3, #24
 800dbf0:	600e      	str	r6, [r1, #0]
 800dbf2:	d514      	bpl.n	800dc1e <_printf_i+0x1ae>
 800dbf4:	07d9      	lsls	r1, r3, #31
 800dbf6:	bf44      	itt	mi
 800dbf8:	f043 0320 	orrmi.w	r3, r3, #32
 800dbfc:	6023      	strmi	r3, [r4, #0]
 800dbfe:	b91d      	cbnz	r5, 800dc08 <_printf_i+0x198>
 800dc00:	6823      	ldr	r3, [r4, #0]
 800dc02:	f023 0320 	bic.w	r3, r3, #32
 800dc06:	6023      	str	r3, [r4, #0]
 800dc08:	2310      	movs	r3, #16
 800dc0a:	e7af      	b.n	800db6c <_printf_i+0xfc>
 800dc0c:	6823      	ldr	r3, [r4, #0]
 800dc0e:	f043 0320 	orr.w	r3, r3, #32
 800dc12:	6023      	str	r3, [r4, #0]
 800dc14:	2378      	movs	r3, #120	; 0x78
 800dc16:	4828      	ldr	r0, [pc, #160]	; (800dcb8 <_printf_i+0x248>)
 800dc18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc1c:	e7e3      	b.n	800dbe6 <_printf_i+0x176>
 800dc1e:	065e      	lsls	r6, r3, #25
 800dc20:	bf48      	it	mi
 800dc22:	b2ad      	uxthmi	r5, r5
 800dc24:	e7e6      	b.n	800dbf4 <_printf_i+0x184>
 800dc26:	4616      	mov	r6, r2
 800dc28:	e7bb      	b.n	800dba2 <_printf_i+0x132>
 800dc2a:	680b      	ldr	r3, [r1, #0]
 800dc2c:	6826      	ldr	r6, [r4, #0]
 800dc2e:	1d1d      	adds	r5, r3, #4
 800dc30:	6960      	ldr	r0, [r4, #20]
 800dc32:	600d      	str	r5, [r1, #0]
 800dc34:	0635      	lsls	r5, r6, #24
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	d501      	bpl.n	800dc3e <_printf_i+0x1ce>
 800dc3a:	6018      	str	r0, [r3, #0]
 800dc3c:	e002      	b.n	800dc44 <_printf_i+0x1d4>
 800dc3e:	0671      	lsls	r1, r6, #25
 800dc40:	d5fb      	bpl.n	800dc3a <_printf_i+0x1ca>
 800dc42:	8018      	strh	r0, [r3, #0]
 800dc44:	2300      	movs	r3, #0
 800dc46:	4616      	mov	r6, r2
 800dc48:	6123      	str	r3, [r4, #16]
 800dc4a:	e7ba      	b.n	800dbc2 <_printf_i+0x152>
 800dc4c:	680b      	ldr	r3, [r1, #0]
 800dc4e:	1d1a      	adds	r2, r3, #4
 800dc50:	600a      	str	r2, [r1, #0]
 800dc52:	681e      	ldr	r6, [r3, #0]
 800dc54:	2100      	movs	r1, #0
 800dc56:	4630      	mov	r0, r6
 800dc58:	6862      	ldr	r2, [r4, #4]
 800dc5a:	f000 f82f 	bl	800dcbc <memchr>
 800dc5e:	b108      	cbz	r0, 800dc64 <_printf_i+0x1f4>
 800dc60:	1b80      	subs	r0, r0, r6
 800dc62:	6060      	str	r0, [r4, #4]
 800dc64:	6863      	ldr	r3, [r4, #4]
 800dc66:	6123      	str	r3, [r4, #16]
 800dc68:	2300      	movs	r3, #0
 800dc6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc6e:	e7a8      	b.n	800dbc2 <_printf_i+0x152>
 800dc70:	4632      	mov	r2, r6
 800dc72:	4649      	mov	r1, r9
 800dc74:	4640      	mov	r0, r8
 800dc76:	6923      	ldr	r3, [r4, #16]
 800dc78:	47d0      	blx	sl
 800dc7a:	3001      	adds	r0, #1
 800dc7c:	d0ab      	beq.n	800dbd6 <_printf_i+0x166>
 800dc7e:	6823      	ldr	r3, [r4, #0]
 800dc80:	079b      	lsls	r3, r3, #30
 800dc82:	d413      	bmi.n	800dcac <_printf_i+0x23c>
 800dc84:	68e0      	ldr	r0, [r4, #12]
 800dc86:	9b03      	ldr	r3, [sp, #12]
 800dc88:	4298      	cmp	r0, r3
 800dc8a:	bfb8      	it	lt
 800dc8c:	4618      	movlt	r0, r3
 800dc8e:	e7a4      	b.n	800dbda <_printf_i+0x16a>
 800dc90:	2301      	movs	r3, #1
 800dc92:	4632      	mov	r2, r6
 800dc94:	4649      	mov	r1, r9
 800dc96:	4640      	mov	r0, r8
 800dc98:	47d0      	blx	sl
 800dc9a:	3001      	adds	r0, #1
 800dc9c:	d09b      	beq.n	800dbd6 <_printf_i+0x166>
 800dc9e:	3501      	adds	r5, #1
 800dca0:	68e3      	ldr	r3, [r4, #12]
 800dca2:	9903      	ldr	r1, [sp, #12]
 800dca4:	1a5b      	subs	r3, r3, r1
 800dca6:	42ab      	cmp	r3, r5
 800dca8:	dcf2      	bgt.n	800dc90 <_printf_i+0x220>
 800dcaa:	e7eb      	b.n	800dc84 <_printf_i+0x214>
 800dcac:	2500      	movs	r5, #0
 800dcae:	f104 0619 	add.w	r6, r4, #25
 800dcb2:	e7f5      	b.n	800dca0 <_printf_i+0x230>
 800dcb4:	0800e6c5 	.word	0x0800e6c5
 800dcb8:	0800e6d6 	.word	0x0800e6d6

0800dcbc <memchr>:
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	b510      	push	{r4, lr}
 800dcc0:	b2c9      	uxtb	r1, r1
 800dcc2:	4402      	add	r2, r0
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	d101      	bne.n	800dcce <memchr+0x12>
 800dcca:	2000      	movs	r0, #0
 800dccc:	e003      	b.n	800dcd6 <memchr+0x1a>
 800dcce:	7804      	ldrb	r4, [r0, #0]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	428c      	cmp	r4, r1
 800dcd4:	d1f6      	bne.n	800dcc4 <memchr+0x8>
 800dcd6:	bd10      	pop	{r4, pc}

0800dcd8 <_free_r>:
 800dcd8:	b538      	push	{r3, r4, r5, lr}
 800dcda:	4605      	mov	r5, r0
 800dcdc:	2900      	cmp	r1, #0
 800dcde:	d043      	beq.n	800dd68 <_free_r+0x90>
 800dce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dce4:	1f0c      	subs	r4, r1, #4
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	bfb8      	it	lt
 800dcea:	18e4      	addlt	r4, r4, r3
 800dcec:	f000 f8d0 	bl	800de90 <__malloc_lock>
 800dcf0:	4a1e      	ldr	r2, [pc, #120]	; (800dd6c <_free_r+0x94>)
 800dcf2:	6813      	ldr	r3, [r2, #0]
 800dcf4:	4610      	mov	r0, r2
 800dcf6:	b933      	cbnz	r3, 800dd06 <_free_r+0x2e>
 800dcf8:	6063      	str	r3, [r4, #4]
 800dcfa:	6014      	str	r4, [r2, #0]
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd02:	f000 b8cb 	b.w	800de9c <__malloc_unlock>
 800dd06:	42a3      	cmp	r3, r4
 800dd08:	d90a      	bls.n	800dd20 <_free_r+0x48>
 800dd0a:	6821      	ldr	r1, [r4, #0]
 800dd0c:	1862      	adds	r2, r4, r1
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	bf01      	itttt	eq
 800dd12:	681a      	ldreq	r2, [r3, #0]
 800dd14:	685b      	ldreq	r3, [r3, #4]
 800dd16:	1852      	addeq	r2, r2, r1
 800dd18:	6022      	streq	r2, [r4, #0]
 800dd1a:	6063      	str	r3, [r4, #4]
 800dd1c:	6004      	str	r4, [r0, #0]
 800dd1e:	e7ed      	b.n	800dcfc <_free_r+0x24>
 800dd20:	461a      	mov	r2, r3
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	b10b      	cbz	r3, 800dd2a <_free_r+0x52>
 800dd26:	42a3      	cmp	r3, r4
 800dd28:	d9fa      	bls.n	800dd20 <_free_r+0x48>
 800dd2a:	6811      	ldr	r1, [r2, #0]
 800dd2c:	1850      	adds	r0, r2, r1
 800dd2e:	42a0      	cmp	r0, r4
 800dd30:	d10b      	bne.n	800dd4a <_free_r+0x72>
 800dd32:	6820      	ldr	r0, [r4, #0]
 800dd34:	4401      	add	r1, r0
 800dd36:	1850      	adds	r0, r2, r1
 800dd38:	4283      	cmp	r3, r0
 800dd3a:	6011      	str	r1, [r2, #0]
 800dd3c:	d1de      	bne.n	800dcfc <_free_r+0x24>
 800dd3e:	6818      	ldr	r0, [r3, #0]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	4401      	add	r1, r0
 800dd44:	6011      	str	r1, [r2, #0]
 800dd46:	6053      	str	r3, [r2, #4]
 800dd48:	e7d8      	b.n	800dcfc <_free_r+0x24>
 800dd4a:	d902      	bls.n	800dd52 <_free_r+0x7a>
 800dd4c:	230c      	movs	r3, #12
 800dd4e:	602b      	str	r3, [r5, #0]
 800dd50:	e7d4      	b.n	800dcfc <_free_r+0x24>
 800dd52:	6820      	ldr	r0, [r4, #0]
 800dd54:	1821      	adds	r1, r4, r0
 800dd56:	428b      	cmp	r3, r1
 800dd58:	bf01      	itttt	eq
 800dd5a:	6819      	ldreq	r1, [r3, #0]
 800dd5c:	685b      	ldreq	r3, [r3, #4]
 800dd5e:	1809      	addeq	r1, r1, r0
 800dd60:	6021      	streq	r1, [r4, #0]
 800dd62:	6063      	str	r3, [r4, #4]
 800dd64:	6054      	str	r4, [r2, #4]
 800dd66:	e7c9      	b.n	800dcfc <_free_r+0x24>
 800dd68:	bd38      	pop	{r3, r4, r5, pc}
 800dd6a:	bf00      	nop
 800dd6c:	20003554 	.word	0x20003554

0800dd70 <_malloc_r>:
 800dd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd72:	1ccd      	adds	r5, r1, #3
 800dd74:	f025 0503 	bic.w	r5, r5, #3
 800dd78:	3508      	adds	r5, #8
 800dd7a:	2d0c      	cmp	r5, #12
 800dd7c:	bf38      	it	cc
 800dd7e:	250c      	movcc	r5, #12
 800dd80:	2d00      	cmp	r5, #0
 800dd82:	4606      	mov	r6, r0
 800dd84:	db01      	blt.n	800dd8a <_malloc_r+0x1a>
 800dd86:	42a9      	cmp	r1, r5
 800dd88:	d903      	bls.n	800dd92 <_malloc_r+0x22>
 800dd8a:	230c      	movs	r3, #12
 800dd8c:	6033      	str	r3, [r6, #0]
 800dd8e:	2000      	movs	r0, #0
 800dd90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd92:	f000 f87d 	bl	800de90 <__malloc_lock>
 800dd96:	4921      	ldr	r1, [pc, #132]	; (800de1c <_malloc_r+0xac>)
 800dd98:	680a      	ldr	r2, [r1, #0]
 800dd9a:	4614      	mov	r4, r2
 800dd9c:	b99c      	cbnz	r4, 800ddc6 <_malloc_r+0x56>
 800dd9e:	4f20      	ldr	r7, [pc, #128]	; (800de20 <_malloc_r+0xb0>)
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	b923      	cbnz	r3, 800ddae <_malloc_r+0x3e>
 800dda4:	4621      	mov	r1, r4
 800dda6:	4630      	mov	r0, r6
 800dda8:	f000 f862 	bl	800de70 <_sbrk_r>
 800ddac:	6038      	str	r0, [r7, #0]
 800ddae:	4629      	mov	r1, r5
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	f000 f85d 	bl	800de70 <_sbrk_r>
 800ddb6:	1c43      	adds	r3, r0, #1
 800ddb8:	d123      	bne.n	800de02 <_malloc_r+0x92>
 800ddba:	230c      	movs	r3, #12
 800ddbc:	4630      	mov	r0, r6
 800ddbe:	6033      	str	r3, [r6, #0]
 800ddc0:	f000 f86c 	bl	800de9c <__malloc_unlock>
 800ddc4:	e7e3      	b.n	800dd8e <_malloc_r+0x1e>
 800ddc6:	6823      	ldr	r3, [r4, #0]
 800ddc8:	1b5b      	subs	r3, r3, r5
 800ddca:	d417      	bmi.n	800ddfc <_malloc_r+0x8c>
 800ddcc:	2b0b      	cmp	r3, #11
 800ddce:	d903      	bls.n	800ddd8 <_malloc_r+0x68>
 800ddd0:	6023      	str	r3, [r4, #0]
 800ddd2:	441c      	add	r4, r3
 800ddd4:	6025      	str	r5, [r4, #0]
 800ddd6:	e004      	b.n	800dde2 <_malloc_r+0x72>
 800ddd8:	6863      	ldr	r3, [r4, #4]
 800ddda:	42a2      	cmp	r2, r4
 800dddc:	bf0c      	ite	eq
 800ddde:	600b      	streq	r3, [r1, #0]
 800dde0:	6053      	strne	r3, [r2, #4]
 800dde2:	4630      	mov	r0, r6
 800dde4:	f000 f85a 	bl	800de9c <__malloc_unlock>
 800dde8:	f104 000b 	add.w	r0, r4, #11
 800ddec:	1d23      	adds	r3, r4, #4
 800ddee:	f020 0007 	bic.w	r0, r0, #7
 800ddf2:	1ac2      	subs	r2, r0, r3
 800ddf4:	d0cc      	beq.n	800dd90 <_malloc_r+0x20>
 800ddf6:	1a1b      	subs	r3, r3, r0
 800ddf8:	50a3      	str	r3, [r4, r2]
 800ddfa:	e7c9      	b.n	800dd90 <_malloc_r+0x20>
 800ddfc:	4622      	mov	r2, r4
 800ddfe:	6864      	ldr	r4, [r4, #4]
 800de00:	e7cc      	b.n	800dd9c <_malloc_r+0x2c>
 800de02:	1cc4      	adds	r4, r0, #3
 800de04:	f024 0403 	bic.w	r4, r4, #3
 800de08:	42a0      	cmp	r0, r4
 800de0a:	d0e3      	beq.n	800ddd4 <_malloc_r+0x64>
 800de0c:	1a21      	subs	r1, r4, r0
 800de0e:	4630      	mov	r0, r6
 800de10:	f000 f82e 	bl	800de70 <_sbrk_r>
 800de14:	3001      	adds	r0, #1
 800de16:	d1dd      	bne.n	800ddd4 <_malloc_r+0x64>
 800de18:	e7cf      	b.n	800ddba <_malloc_r+0x4a>
 800de1a:	bf00      	nop
 800de1c:	20003554 	.word	0x20003554
 800de20:	20003558 	.word	0x20003558

0800de24 <_realloc_r>:
 800de24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de26:	4607      	mov	r7, r0
 800de28:	4614      	mov	r4, r2
 800de2a:	460e      	mov	r6, r1
 800de2c:	b921      	cbnz	r1, 800de38 <_realloc_r+0x14>
 800de2e:	4611      	mov	r1, r2
 800de30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800de34:	f7ff bf9c 	b.w	800dd70 <_malloc_r>
 800de38:	b922      	cbnz	r2, 800de44 <_realloc_r+0x20>
 800de3a:	f7ff ff4d 	bl	800dcd8 <_free_r>
 800de3e:	4625      	mov	r5, r4
 800de40:	4628      	mov	r0, r5
 800de42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de44:	f000 f830 	bl	800dea8 <_malloc_usable_size_r>
 800de48:	42a0      	cmp	r0, r4
 800de4a:	d20f      	bcs.n	800de6c <_realloc_r+0x48>
 800de4c:	4621      	mov	r1, r4
 800de4e:	4638      	mov	r0, r7
 800de50:	f7ff ff8e 	bl	800dd70 <_malloc_r>
 800de54:	4605      	mov	r5, r0
 800de56:	2800      	cmp	r0, #0
 800de58:	d0f2      	beq.n	800de40 <_realloc_r+0x1c>
 800de5a:	4631      	mov	r1, r6
 800de5c:	4622      	mov	r2, r4
 800de5e:	f7ff fbc1 	bl	800d5e4 <memcpy>
 800de62:	4631      	mov	r1, r6
 800de64:	4638      	mov	r0, r7
 800de66:	f7ff ff37 	bl	800dcd8 <_free_r>
 800de6a:	e7e9      	b.n	800de40 <_realloc_r+0x1c>
 800de6c:	4635      	mov	r5, r6
 800de6e:	e7e7      	b.n	800de40 <_realloc_r+0x1c>

0800de70 <_sbrk_r>:
 800de70:	b538      	push	{r3, r4, r5, lr}
 800de72:	2300      	movs	r3, #0
 800de74:	4d05      	ldr	r5, [pc, #20]	; (800de8c <_sbrk_r+0x1c>)
 800de76:	4604      	mov	r4, r0
 800de78:	4608      	mov	r0, r1
 800de7a:	602b      	str	r3, [r5, #0]
 800de7c:	f7f4 fc1a 	bl	80026b4 <_sbrk>
 800de80:	1c43      	adds	r3, r0, #1
 800de82:	d102      	bne.n	800de8a <_sbrk_r+0x1a>
 800de84:	682b      	ldr	r3, [r5, #0]
 800de86:	b103      	cbz	r3, 800de8a <_sbrk_r+0x1a>
 800de88:	6023      	str	r3, [r4, #0]
 800de8a:	bd38      	pop	{r3, r4, r5, pc}
 800de8c:	200047b4 	.word	0x200047b4

0800de90 <__malloc_lock>:
 800de90:	4801      	ldr	r0, [pc, #4]	; (800de98 <__malloc_lock+0x8>)
 800de92:	f000 b811 	b.w	800deb8 <__retarget_lock_acquire_recursive>
 800de96:	bf00      	nop
 800de98:	200047bc 	.word	0x200047bc

0800de9c <__malloc_unlock>:
 800de9c:	4801      	ldr	r0, [pc, #4]	; (800dea4 <__malloc_unlock+0x8>)
 800de9e:	f000 b80c 	b.w	800deba <__retarget_lock_release_recursive>
 800dea2:	bf00      	nop
 800dea4:	200047bc 	.word	0x200047bc

0800dea8 <_malloc_usable_size_r>:
 800dea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deac:	1f18      	subs	r0, r3, #4
 800deae:	2b00      	cmp	r3, #0
 800deb0:	bfbc      	itt	lt
 800deb2:	580b      	ldrlt	r3, [r1, r0]
 800deb4:	18c0      	addlt	r0, r0, r3
 800deb6:	4770      	bx	lr

0800deb8 <__retarget_lock_acquire_recursive>:
 800deb8:	4770      	bx	lr

0800deba <__retarget_lock_release_recursive>:
 800deba:	4770      	bx	lr

0800debc <_init>:
 800debc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800debe:	bf00      	nop
 800dec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dec2:	bc08      	pop	{r3}
 800dec4:	469e      	mov	lr, r3
 800dec6:	4770      	bx	lr

0800dec8 <_fini>:
 800dec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deca:	bf00      	nop
 800decc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dece:	bc08      	pop	{r3}
 800ded0:	469e      	mov	lr, r3
 800ded2:	4770      	bx	lr
